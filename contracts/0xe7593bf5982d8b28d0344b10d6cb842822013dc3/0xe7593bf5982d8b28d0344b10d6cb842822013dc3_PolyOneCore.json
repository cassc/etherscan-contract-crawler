{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../extensions/ICreatorExtensionTokenURI.sol\\\";\\nimport \\\"../extensions/ICreatorExtensionRoyalties.sol\\\";\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core creator implementation\\n */\\nabstract contract CreatorCore is ReentrancyGuard, ICreatorCore, ERC165 {\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal _tokenCount = 0;\\n\\n    // Base approve transfers address location\\n    address internal _approveTransferBase;\\n\\n    // Track registered extensions data\\n    EnumerableSet.AddressSet internal _extensions;\\n    EnumerableSet.AddressSet internal _blacklistedExtensions;\\n\\n    // The baseURI for a given extension\\n    mapping (address => string) private _extensionBaseURI;\\n    mapping (address => bool) private _extensionBaseURIIdentical;\\n\\n    // The prefix for any tokens with a uri configured\\n    mapping (address => string) private _extensionURIPrefix;\\n\\n    // Mapping for individual token URIs\\n    mapping (uint256 => string) internal _tokenURIs;\\n\\n    // Royalty configurations\\n    struct RoyaltyConfig {\\n        address payable receiver;\\n        uint16 bps;\\n    }\\n    mapping (address => RoyaltyConfig[]) internal _extensionRoyalty;\\n    mapping (uint256 => RoyaltyConfig[]) internal _tokenRoyalty;\\n\\n    bytes4 private constant _CREATOR_CORE_V1 = 0x28f10a21;\\n\\n    /**\\n     * External interface identifiers for royalties\\n     */\\n\\n    /**\\n     *  @dev CreatorCore\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *  bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     *\\n     *  => 0xb9c4d9fb ^ 0x0ebd4c7f = 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\\n\\n    /**\\n     *  @dev Foundation\\n     *\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_FOUNDATION = 0xd5a06d4c;\\n\\n    /**\\n     *  @dev EIP-2981\\n     *\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(ICreatorCore).interfaceId || interfaceId == _CREATOR_CORE_V1 || super.supportsInterface(interfaceId)\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE || interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_FOUNDATION || interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981;\\n    }\\n\\n    /**\\n     * @dev Only allows registered extensions to call the specified function\\n     */\\n    function requireExtension() internal view {\\n        require(_extensions.contains(msg.sender), \\\"Must be registered extension\\\");\\n    }\\n\\n    /**\\n     * @dev Only allows non-blacklisted extensions\\n     */\\n    function requireNonBlacklist(address extension) internal view {\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n    }   \\n\\n    /**\\n     * @dev See {ICreatorCore-getExtensions}.\\n     */\\n    function getExtensions() external view override returns (address[] memory extensions) {\\n        extensions = new address[](_extensions.length());\\n        for (uint i; i < _extensions.length();) {\\n            extensions[i] = _extensions.at(i);\\n            unchecked { ++i; }\\n        }\\n        return extensions;\\n    }\\n\\n    /**\\n     * @dev Register an extension\\n     */\\n    function _registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) internal virtual {\\n        require(extension != address(this) && extension.isContract(), \\\"Invalid\\\");\\n        emit ExtensionRegistered(extension, msg.sender);\\n        _extensionBaseURI[extension] = baseURI;\\n        _extensionBaseURIIdentical[extension] = baseURIIdentical;\\n        _extensions.add(extension);\\n        _setApproveTransferExtension(extension, true);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransferExtension}.\\n     */\\n    function setApproveTransferExtension(bool enabled) external override {\\n        requireExtension();\\n        _setApproveTransferExtension(msg.sender, enabled);\\n    }\\n\\n    /**\\n     * @dev Set whether or not tokens minted by the extension defers transfer approvals to the extension\\n     */\\n    function _setApproveTransferExtension(address extension, bool enabled) internal virtual;\\n\\n    /**\\n     * @dev Unregister an extension\\n     */\\n    function _unregisterExtension(address extension) internal {\\n        emit ExtensionUnregistered(extension, msg.sender);\\n        _extensions.remove(extension);\\n    }\\n\\n    /**\\n     * @dev Blacklist an extension\\n     */\\n    function _blacklistExtension(address extension) internal {\\n       require(extension != address(0) && extension != address(this), \\\"Cannot blacklist yourself\\\");\\n       if (_extensions.contains(extension)) {\\n           emit ExtensionUnregistered(extension, msg.sender);\\n           _extensions.remove(extension);\\n       }\\n       if (!_blacklistedExtensions.contains(extension)) {\\n           emit ExtensionBlacklisted(extension, msg.sender);\\n           _blacklistedExtensions.add(extension);\\n       }\\n    }\\n\\n    /**\\n     * @dev Set base token uri for an extension\\n     */\\n    function _setBaseTokenURIExtension(string calldata uri, bool identical) internal {\\n        _extensionBaseURI[msg.sender] = uri;\\n        _extensionBaseURIIdentical[msg.sender] = identical;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for an extension\\n     */\\n    function _setTokenURIPrefixExtension(string calldata prefix) internal {\\n        _extensionURIPrefix[msg.sender] = prefix;\\n    }\\n\\n    /**\\n     * @dev Set token uri for a token of an extension\\n     */\\n    function _setTokenURIExtension(uint256 tokenId, string calldata uri) internal {\\n        require(_tokenExtension(tokenId) == msg.sender, \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Set base token uri for tokens with no extension\\n     */\\n    function _setBaseTokenURI(string calldata uri) internal {\\n        _extensionBaseURI[address(0)] = uri;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for tokens with no extension\\n     */\\n    function _setTokenURIPrefix(string calldata prefix) internal {\\n        _extensionURIPrefix[address(0)] = prefix;\\n    }\\n\\n\\n    /**\\n     * @dev Set token uri for a token with no extension\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata uri) internal {\\n        require(tokenId > 0 && tokenId <= _tokenCount && _tokenExtension(tokenId) == address(0), \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Retrieve a token's URI\\n     */\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        require(tokenId > 0 && tokenId <= _tokenCount, \\\"Invalid token\\\");\\n\\n        address extension = _tokenExtension(tokenId);\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            if (bytes(_extensionURIPrefix[extension]).length != 0) {\\n                return string(abi.encodePacked(_extensionURIPrefix[extension], _tokenURIs[tokenId]));\\n            }\\n            return _tokenURIs[tokenId];\\n        }\\n\\n        if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionTokenURI).interfaceId)) {\\n            return ICreatorExtensionTokenURI(extension).tokenURI(address(this), tokenId);\\n        }\\n\\n        if (!_extensionBaseURIIdentical[extension]) {\\n            return string(abi.encodePacked(_extensionBaseURI[extension], tokenId.toString()));\\n        } else {\\n            return _extensionBaseURI[extension];\\n        }\\n    }\\n\\n    /**\\n     * Helper to get royalties for a token\\n     */\\n    function _getRoyalties(uint256 tokenId) view internal returns (address payable[] memory receivers, uint256[] memory bps) {\\n\\n        // Get token level royalties\\n        RoyaltyConfig[] memory royalties = _tokenRoyalty[tokenId];\\n        if (royalties.length == 0) {\\n            // Get extension specific royalties\\n            address extension = _tokenExtension(tokenId);\\n            if (extension != address(0)) {\\n                if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionRoyalties).interfaceId)) {\\n                    (receivers, bps) = ICreatorExtensionRoyalties(extension).getRoyalties(address(this), tokenId);\\n                    // Extension override exists, just return that\\n                    if (receivers.length > 0) return (receivers, bps);\\n                }\\n                royalties = _extensionRoyalty[extension];\\n            }\\n        }\\n        if (royalties.length == 0) {\\n            // Get the default royalty\\n            royalties = _extensionRoyalty[address(0)];\\n        }\\n        \\n        if (royalties.length > 0) {\\n            receivers = new address payable[](royalties.length);\\n            bps = new uint256[](royalties.length);\\n            for (uint i; i < royalties.length;) {\\n                receivers[i] = royalties[i].receiver;\\n                bps[i] = royalties[i].bps;\\n                unchecked { ++i; }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Helper to get royalty receivers for a token\\n     */\\n    function _getRoyaltyReceivers(uint256 tokenId) view internal returns (address payable[] memory recievers) {\\n        (recievers, ) = _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * Helper to get royalty basis points for a token\\n     */\\n    function _getRoyaltyBPS(uint256 tokenId) view internal returns (uint256[] memory bps) {\\n        (, bps) = _getRoyalties(tokenId);\\n    }\\n\\n    function _getRoyaltyInfo(uint256 tokenId, uint256 value) view internal returns (address receiver, uint256 amount){\\n        (address payable[] memory receivers, uint256[] memory bps) = _getRoyalties(tokenId);\\n        require(receivers.length <= 1, \\\"More than 1 royalty receiver\\\");\\n        \\n        if (receivers.length == 0) {\\n            return (address(this), 0);\\n        }\\n        return (receivers[0], bps[0]*value/10000);\\n    }\\n\\n    /**\\n     * Set royalties for a token\\n     */\\n    function _setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n       _checkRoyalties(receivers, basisPoints);\\n        delete _tokenRoyalty[tokenId];\\n        _setRoyalties(receivers, basisPoints, _tokenRoyalty[tokenId]);\\n        emit RoyaltiesUpdated(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * Set royalties for all tokens of an extension\\n     */\\n    function _setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n        _checkRoyalties(receivers, basisPoints);\\n        delete _extensionRoyalty[extension];\\n        _setRoyalties(receivers, basisPoints, _extensionRoyalty[extension]);\\n        if (extension == address(0)) {\\n            emit DefaultRoyaltiesUpdated(receivers, basisPoints);\\n        } else {\\n            emit ExtensionRoyaltiesUpdated(extension, receivers, basisPoints);\\n        }\\n    }\\n\\n    /**\\n     * Helper function to check that royalties provided are valid\\n     */\\n    function _checkRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) private pure {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint i; i < basisPoints.length;) {\\n            totalBasisPoints += basisPoints[i];\\n            unchecked { ++i; }\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n    }\\n\\n    /**\\n     * Helper function to set royalties\\n     */\\n    function _setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints, RoyaltyConfig[] storage royalties) private {\\n        for (uint i; i < basisPoints.length;) {\\n            royalties.push(\\n                RoyaltyConfig(\\n                    {\\n                        receiver: receivers[i],\\n                        bps: uint16(basisPoints[i])\\n                    }\\n                )\\n            );\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the base contract's approve transfer contract location\\n     */\\n    function _setApproveTransferBase(address extension) internal {\\n        _approveTransferBase = extension;\\n        emit ApproveTransferUpdated(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getApproveTransfer}.\\n     */\\n    function getApproveTransfer() external view override returns (address) {\\n        return _approveTransferBase;\\n    }\\n\\n    /**\\n     * @dev Get the extension for the given token\\n     */\\n    function _tokenExtension(uint256 tokenId) internal virtual view returns(address);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/ERC1155CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../extensions/ERC1155/IERC1155CreatorExtensionApproveTransfer.sol\\\";\\nimport \\\"../extensions/ERC1155/IERC1155CreatorExtensionBurnable.sol\\\";\\nimport \\\"../permissions/ERC1155/IERC1155CreatorMintPermissions.sol\\\";\\nimport \\\"./IERC1155CreatorCore.sol\\\";\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator implementation\\n */\\nabstract contract ERC1155CreatorCore is CreatorCore, IERC1155CreatorCore {\\n\\n    uint256 constant public VERSION = 3;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered extensions data\\n    mapping (address => bool) internal _extensionApproveTransfers;\\n    mapping (address => address) internal _extensionPermissions;\\n\\n    // For tracking which extension a token was minted by\\n    mapping (uint256 => address) internal _tokensExtension;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(CreatorCore, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155CreatorCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {CreatorCore-_setApproveTransferExtension}\\n     */\\n    function _setApproveTransferExtension(address extension, bool enabled) internal override {\\n        if (ERC165Checker.supportsInterface(extension, type(IERC1155CreatorExtensionApproveTransfer).interfaceId)) {\\n            _extensionApproveTransfers[extension] = enabled;\\n            emit ExtensionApproveTransferUpdated(extension, enabled);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set mint permissions for an extension\\n     */\\n    function _setMintPermissions(address extension, address permissions) internal {\\n        require(_extensions.contains(extension), \\\"Invalid extension\\\");\\n        require(permissions == address(0) || ERC165Checker.supportsInterface(permissions, type(IERC1155CreatorMintPermissions).interfaceId), \\\"Invalid address\\\");\\n        if (_extensionPermissions[extension] != permissions) {\\n            _extensionPermissions[extension] = permissions;\\n            emit MintPermissionsUpdated(extension, permissions, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * If mint permissions have been set for an extension (extensions can mint by default),\\n     * check if an extension can mint via the permission contract's approveMint function.\\n     */\\n    function _checkMintPermissions(address[] memory to, uint256[] memory tokenIds, uint256[] memory amounts) internal {\\n        if (_extensionPermissions[msg.sender] != address(0)) {\\n            IERC1155CreatorMintPermissions(_extensionPermissions[msg.sender]).approveMint(msg.sender, to, tokenIds, amounts);\\n        }\\n    }\\n\\n    /**\\n     * Post burn actions\\n     */\\n    function _postBurn(address owner, uint256[] calldata tokenIds, uint256[] calldata amounts) internal virtual {\\n        require(tokenIds.length > 0, \\\"Invalid input\\\");\\n        address extension = _tokensExtension[tokenIds[0]];\\n        for (uint i; i < tokenIds.length;) {\\n            require(_tokensExtension[tokenIds[i]] == extension, \\\"Mismatched token originators\\\");\\n            unchecked { ++i; }\\n        }\\n        // Callback to originating extension if needed\\n        if (extension != address(0)) {\\n           if (ERC165Checker.supportsInterface(extension, type(IERC1155CreatorExtensionBurnable).interfaceId)) {\\n               IERC1155CreatorExtensionBurnable(extension).onBurn(owner, tokenIds, amounts);\\n           }\\n        }\\n    }\\n\\n    /**\\n     * Approve a transfer\\n     */\\n    function _approveTransfer(address from, address to, uint256[] memory tokenIds, uint256[] memory amounts) internal {\\n        // Do not need to approve mints\\n        if (from == address(0)) return;\\n\\n        address extension = _tokensExtension[tokenIds[0]];\\n\\n        for (uint i; i < tokenIds.length;) {\\n            require(_tokensExtension[tokenIds[i]] == extension, \\\"Mismatched token originators\\\");\\n            unchecked { ++i; }\\n        }\\n        if (extension != address(0) && _extensionApproveTransfers[extension]) {\\n            require(IERC1155CreatorExtensionApproveTransfer(extension).approveTransfer(msg.sender, from, to, tokenIds, amounts), \\\"Extension approval failure\\\");\\n        } else if (_approveTransferBase != address(0)) {\\n            require(IERC1155CreatorExtensionApproveTransfer(_approveTransferBase).approveTransfer(msg.sender, from, to, tokenIds, amounts), \\\"Extension approval failure\\\");\\n        }\\n    }\\n\\n    function _tokenExtension(uint256 tokenId) internal view override returns(address) {\\n        return _tokensExtension[tokenId];\\n    }\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/ERC721CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../extensions/ERC721/IERC721CreatorExtensionApproveTransfer.sol\\\";\\nimport \\\"../extensions/ERC721/IERC721CreatorExtensionBurnable.sol\\\";\\nimport \\\"../permissions/ERC721/IERC721CreatorMintPermissions.sol\\\";\\nimport \\\"./IERC721CreatorCore.sol\\\";\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator implementation\\n */\\nabstract contract ERC721CreatorCore is CreatorCore, IERC721CreatorCore {\\n\\n    uint256 constant public VERSION = 3;\\n\\n    bytes4 private constant _ERC721_CREATOR_CORE_V1 = 0x9088c207;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered extensions data\\n    mapping (address => bool) internal _extensionApproveTransfers;\\n    mapping (address => address) internal _extensionPermissions;\\n\\n    // For tracking extension indices\\n    uint16 private _extensionCounter;\\n    mapping (address => uint16) internal _extensionToIndex;    \\n    mapping (uint16 => address) internal _indexToExtension;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(CreatorCore, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721CreatorCore).interfaceId || interfaceId == _ERC721_CREATOR_CORE_V1 || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {CreatorCore-_setApproveTransferExtension}\\n     */\\n    function _setApproveTransferExtension(address extension, bool enabled) internal override {\\n        if (ERC165Checker.supportsInterface(extension, type(IERC721CreatorExtensionApproveTransfer).interfaceId)) {\\n            _extensionApproveTransfers[extension] = enabled;\\n            emit ExtensionApproveTransferUpdated(extension, enabled);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set mint permissions for an extension\\n     */\\n    function _setMintPermissions(address extension, address permissions) internal {\\n        require(_extensions.contains(extension), \\\"CreatorCore: Invalid extension\\\");\\n        require(permissions == address(0) || ERC165Checker.supportsInterface(permissions, type(IERC721CreatorMintPermissions).interfaceId), \\\"Invalid address\\\");\\n        if (_extensionPermissions[extension] != permissions) {\\n            _extensionPermissions[extension] = permissions;\\n            emit MintPermissionsUpdated(extension, permissions, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * If mint permissions have been set for an extension (extensions can mint by default),\\n     * check if an extension can mint via the permission contract's approveMint function.\\n     */\\n    function _checkMintPermissions(address to, uint256 tokenId) internal {\\n        if (_extensionPermissions[msg.sender] != address(0)) {\\n            IERC721CreatorMintPermissions(_extensionPermissions[msg.sender]).approveMint(msg.sender, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * Override for pre mint actions\\n     */\\n    function _preMintBase(address, uint256) internal virtual {}\\n\\n    \\n    /**\\n     * Override for pre mint actions for _mintExtension\\n     */\\n    function _preMintExtension(address, uint256) internal virtual {}\\n\\n    /**\\n     * Post-burning callback and metadata cleanup\\n     */\\n    function _postBurn(address owner, uint256 tokenId, address extension) internal virtual {\\n        // Callback to originating extension if needed\\n        if (extension != address(0)) {\\n           if (ERC165Checker.supportsInterface(extension, type(IERC721CreatorExtensionBurnable).interfaceId)) {\\n               IERC721CreatorExtensionBurnable(extension).onBurn(owner, tokenId);\\n           }\\n        }\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        } \\n    }\\n\\n    /**\\n     * Approve a transfer\\n     */\\n    function _approveTransfer(address from, address to, uint256 tokenId) internal {\\n        // Do not need to approve mints\\n        if (from == address(0)) return;\\n\\n        _approveTransfer(from, to, tokenId, _tokenExtension(tokenId));\\n    }\\n\\n    function _approveTransfer(address from, address to, uint256 tokenId, uint16 extensionIndex) internal {\\n        // Do not need to approve mints\\n        if (from == address(0)) return;\\n\\n        _approveTransfer(from, to, tokenId, _indexToExtension[extensionIndex]);\\n    }\\n\\n    function _approveTransfer(address from, address to, uint256 tokenId, address extension) internal {\\n        // Do not need to approve mints\\n        if (from == address(0)) return;\\n\\n        if (extension != address(0) && _extensionApproveTransfers[extension]) {\\n            require(IERC721CreatorExtensionApproveTransfer(extension).approveTransfer(msg.sender, from, to, tokenId), \\\"Extension approval failure\\\");\\n        } else if (_approveTransferBase != address(0)) {\\n           require(IERC721CreatorExtensionApproveTransfer(_approveTransferBase).approveTransfer(msg.sender, from, to, tokenId), \\\"Extension approval failure\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Register an extension\\n     */\\n    function _registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) internal override {\\n        require(_extensionCounter < 0xFFFF, \\\"Too many extensions\\\");\\n        if (_extensionToIndex[extension] == 0) {\\n            ++_extensionCounter;\\n            _extensionToIndex[extension] = _extensionCounter;\\n            _indexToExtension[_extensionCounter] = extension;\\n        }\\n        super._registerExtension(extension, baseURI, baseURIIdentical);\\n    }\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ApproveTransferUpdated(address extension);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    /**\\n     * @dev Set the default approve transfer contract location.\\n     */\\n    function setApproveTransfer(address extension) external; \\n\\n    /**\\n     * @dev Get the default approve transfer contract location.\\n     */\\n    function getApproveTransfer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/IERC1155CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator interface\\n */\\ninterface IERC1155CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintBaseNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token with no extension. Can only be called by an admin.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev mint a token from an extension. Can only be called by a registered extension.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintExtensionNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token from extension. Can only be called by a registered extension.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev burn tokens. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(address account, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given tokenId.\\n     */\\n    function totalSupply(uint256 tokenId) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator interface\\n */\\ninterface IERC721CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, uint80 data) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenIds minted\\n     */\\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, uint80[] calldata data) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev burn a token. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n    /**\\n     * @dev get token data\\n     */\\n    function tokenData(uint256 tokenId) external view returns (uint80);\\n\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/ERC1155CreatorImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControlUpgradeable.sol\\\";\\n\\nimport \\\"./core/ERC1155CreatorCore.sol\\\";\\nimport \\\"./token/ERC1155/ERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev ERC1155Creator implementation\\n */\\ncontract ERC1155CreatorImplementation is AdminControlUpgradeable, ERC1155Upgradeable, ERC1155CreatorCore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * Initializer\\n     */\\n    function initialize(string memory _name, string memory _symbol) public initializer {\\n        __ERC1155_init(_name, _symbol);\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Core, ERC1155CreatorCore, AdminControlUpgradeable) returns (bool) {\\n        return ERC1155CreatorCore.supportsInterface(interfaceId) || ERC1155Core.supportsInterface(interfaceId) || AdminControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(address, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory) internal virtual override {\\n        _approveTransfer(from, to, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external override adminRequired {\\n        requireNonBlacklist(extension);\\n        _registerExtension(extension, baseURI, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external override adminRequired {\\n        requireNonBlacklist(extension);\\n        _registerExtension(extension, baseURI, baseURIIdentical);\\n    }\\n\\n\\n    /**\\n     * @dev See {ICreatorCore-unregisterExtension}.\\n     */\\n    function unregisterExtension(address extension) external override adminRequired {\\n        _unregisterExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-blacklistExtension}.\\n     */\\n    function blacklistExtension(address extension) external override adminRequired {\\n        _blacklistExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri_) external override {\\n        requireExtension();\\n        _setBaseTokenURIExtension(uri_, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri_, bool identical) external override {\\n        requireExtension();\\n        _setBaseTokenURIExtension(uri_, identical);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefixExtension}.\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external override {\\n        requireExtension();\\n        _setTokenURIPrefixExtension(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri_) external override {\\n        requireExtension();\\n        _setTokenURIExtension(tokenId, uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256[] calldata tokenIds, string[] calldata uris) external override {\\n        requireExtension();\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i; i < tokenIds.length;) {\\n            _setTokenURIExtension(tokenIds[i], uris[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURI}.\\n     */\\n    function setBaseTokenURI(string calldata uri_) external override adminRequired {\\n        _setBaseTokenURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefix}.\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external override adminRequired {\\n        _setTokenURIPrefix(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri_) external override adminRequired {\\n        _setTokenURI(tokenId, uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256[] calldata tokenIds, string[] calldata uris) external override adminRequired {\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i; i < tokenIds.length;) {\\n            _setTokenURI(tokenIds[i], uris[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setMintPermissions}.\\n     */\\n    function setMintPermissions(address extension, address permissions) external override adminRequired {\\n        _setMintPermissions(extension, permissions);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintBaseNew}.\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) public virtual override nonReentrant adminRequired returns(uint256[] memory) {\\n        return _mintNew(address(0), to, amounts, uris);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintBaseExisting}.\\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) public virtual override nonReentrant adminRequired {\\n        for (uint i; i < tokenIds.length;) {\\n            uint256 tokenId = tokenIds[i];\\n            require(tokenId > 0 && tokenId <= _tokenCount, \\\"Invalid token\\\");\\n            require(_tokenExtension(tokenId) == address(0), \\\"Token created by extension\\\");\\n            unchecked { ++i; }\\n        }\\n        _mintExisting(address(0), to, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintExtensionNew}.\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) public virtual override nonReentrant returns(uint256[] memory tokenIds) {\\n        requireExtension();\\n        return _mintNew(msg.sender, to, amounts, uris);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintExtensionExisting}.\\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) public virtual override nonReentrant {\\n        requireExtension();\\n        for (uint i; i < tokenIds.length;) {\\n            require(_tokenExtension(tokenIds[i]) == address(msg.sender), \\\"Token not created by this extension\\\");\\n            unchecked { ++i; }\\n        }\\n        _mintExisting(msg.sender, to, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev Mint new tokens\\n     */\\n    function _mintNew(address extension, address[] calldata to, uint256[] calldata amounts, string[] calldata uris) internal returns(uint256[] memory tokenIds) {\\n        if (to.length > 1) {\\n            // Multiple receiver.  Give every receiver the same new token\\n            tokenIds = new uint256[](1);\\n            require(uris.length <= 1 && (amounts.length == 1 || to.length == amounts.length), \\\"Invalid input\\\");\\n        } else {\\n            // Single receiver.  Generating multiple tokens\\n            tokenIds = new uint256[](amounts.length);\\n            require(uris.length == 0 || amounts.length == uris.length, \\\"Invalid input\\\");\\n        }\\n\\n        // Assign tokenIds\\n        for (uint i; i < tokenIds.length;) {\\n            ++_tokenCount;\\n            tokenIds[i] = _tokenCount;\\n            // Track the extension that minted the token\\n            _tokensExtension[_tokenCount] = extension;\\n            unchecked { ++i; }\\n        }\\n\\n        if (extension != address(0)) {\\n            _checkMintPermissions(to, tokenIds, amounts);\\n        }\\n\\n        if (to.length == 1 && tokenIds.length == 1) {\\n           // Single mint\\n           _mint(to[0], tokenIds[0], amounts[0], new bytes(0));\\n        } else if (to.length > 1) {\\n            // Multiple receivers.  Receiving the same token\\n            if (amounts.length == 1) {\\n                // Everyone receiving the same amount\\n                for (uint i; i < to.length;) {\\n                    _mint(to[i], tokenIds[0], amounts[0], new bytes(0));\\n                    unchecked { ++i; }\\n                }\\n            } else {\\n                // Everyone receiving different amounts\\n                for (uint i; i < to.length;) {\\n                    _mint(to[i], tokenIds[0], amounts[i], new bytes(0));\\n                    unchecked { ++i; }\\n                }\\n            }\\n        } else {\\n            _mintBatch(to[0], tokenIds, amounts, new bytes(0));\\n        }\\n\\n        for (uint i; i < tokenIds.length;) {\\n            if (i < uris.length && bytes(uris[i]).length > 0) {\\n                _tokenURIs[tokenIds[i]] = uris[i];\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint existing tokens\\n     */\\n    function _mintExisting(address extension, address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) internal {\\n        if (extension != address(0)) {\\n            _checkMintPermissions(to, tokenIds, amounts);\\n        }\\n\\n        if (to.length == 1 && tokenIds.length == 1 && amounts.length == 1) {\\n             // Single mint\\n            _mint(to[0], tokenIds[0], amounts[0], new bytes(0));            \\n        } else if (to.length == 1 && tokenIds.length == amounts.length) {\\n            // Batch mint to same receiver\\n            _mintBatch(to[0], tokenIds, amounts, new bytes(0));\\n        } else if (tokenIds.length == 1 && amounts.length == 1) {\\n            // Mint of the same token/token amounts to various receivers\\n            for (uint i; i < to.length;) {\\n                _mint(to[i], tokenIds[0], amounts[0], new bytes(0));\\n                unchecked { ++i; }\\n            }\\n        } else if (tokenIds.length == 1 && to.length == amounts.length) {\\n            // Mint of the same token with different amounts to different receivers\\n            for (uint i; i < to.length;) {\\n                _mint(to[i], tokenIds[0], amounts[i], new bytes(0));\\n                unchecked { ++i; }\\n            }\\n        } else if (to.length == tokenIds.length && to.length == amounts.length) {\\n            // Mint of different tokens and different amounts to different receivers\\n            for (uint i; i < to.length;) {\\n                _mint(to[i], tokenIds[i], amounts[i], new bytes(0));\\n                unchecked { ++i; }\\n            }\\n        } else {\\n            revert(\\\"Invalid input\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-tokenExtension}.\\n     */\\n    function tokenExtension(uint256 tokenId) public view virtual override returns (address extension) {\\n        extension = _tokenExtension(tokenId);\\n        require(extension != address(0), \\\"No extension for token\\\");\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-burn}.\\n     */\\n    function burn(address account, uint256[] calldata tokenIds, uint256[] calldata amounts) public virtual override nonReentrant {\\n        require(account == msg.sender || isApprovedForAll(account, msg.sender), \\\"Caller is not owner or approved\\\");\\n        require(tokenIds.length == amounts.length, \\\"Invalid input\\\");\\n        if (tokenIds.length == 1) {\\n            _burn(account, tokenIds[0], amounts[0]);\\n        } else {\\n            _burnBatch(account, tokenIds, amounts);\\n        }\\n        _postBurn(account, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(address(0), receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyalties(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyaltiesExtension}.\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(extension, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getRoyalties}.\\n     */\\n    function getRoyalties(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFees}.\\n     */\\n    function getFees(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFeeRecipients}.\\n     */\\n    function getFeeRecipients(uint256 tokenId) external view virtual override returns (address payable[] memory) {\\n        return _getRoyaltyReceivers(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFeeBps}.\\n     */\\n    function getFeeBps(uint256 tokenId) external view virtual override returns (uint[] memory) {\\n        return _getRoyaltyBPS(tokenId);\\n    }\\n    \\n    /**\\n     * @dev See {ICreatorCore-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view virtual override returns (address, uint256) {\\n        return _getRoyaltyInfo(tokenId, value);\\n    } \\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n    \\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 tokenId) external view virtual override returns (uint256) {\\n        return _totalSupply[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual override {\\n        super._mint(account, id, amount, data);\\n        _totalSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n        for (uint i; i < ids.length;) {\\n            _totalSupply[ids[i]] += amounts[i];\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual override {\\n        super._burn(account, id, amount);\\n        _totalSupply[id] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint i; i < ids.length;) {\\n            _totalSupply[ids[i]] -= amounts[i];\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransfer}.\\n     */\\n    function setApproveTransfer(address extension) external override adminRequired {\\n        _setApproveTransferBase(extension);\\n    }\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/ERC721CreatorImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControlUpgradeable.sol\\\";\\n\\nimport \\\"./core/ERC721CreatorCore.sol\\\";\\nimport \\\"./token/ERC721/ERC721Upgradeable.sol\\\";\\n\\n/**\\n * @dev ERC721Creator implementation\\n */\\ncontract ERC721CreatorImplementation is AdminControlUpgradeable, ERC721Upgradeable, ERC721CreatorCore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * Initializer\\n     */\\n    function initialize(string memory _name, string memory _symbol) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Core, ERC721CreatorCore, AdminControlUpgradeable) returns (bool) {\\n        return ERC721CreatorCore.supportsInterface(interfaceId) || ERC721Core.supportsInterface(interfaceId) || AdminControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint96 data) internal virtual override {\\n        _approveTransfer(from, to, tokenId, uint16(data));\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external override adminRequired {\\n        requireNonBlacklist(extension);\\n        _registerExtension(extension, baseURI, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external override adminRequired {\\n        requireNonBlacklist(extension);\\n        _registerExtension(extension, baseURI, baseURIIdentical);\\n    }\\n\\n\\n    /**\\n     * @dev See {ICreatorCore-unregisterExtension}.\\n     */\\n    function unregisterExtension(address extension) external override adminRequired {\\n        _unregisterExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-blacklistExtension}.\\n     */\\n    function blacklistExtension(address extension) external override adminRequired {\\n        _blacklistExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external override {\\n        requireExtension();\\n        _setBaseTokenURIExtension(uri, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external override {\\n        requireExtension();\\n        _setBaseTokenURIExtension(uri, identical);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefixExtension}.\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external override {\\n        requireExtension();\\n        _setTokenURIPrefixExtension(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external override {\\n        requireExtension();\\n        _setTokenURIExtension(tokenId, uri);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256[] calldata tokenIds, string[] calldata uris) external override {\\n        requireExtension();\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i; i < tokenIds.length;) {\\n            _setTokenURIExtension(tokenIds[i], uris[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURI}.\\n     */\\n    function setBaseTokenURI(string calldata uri) external override adminRequired {\\n        _setBaseTokenURI(uri);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefix}.\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external override adminRequired {\\n        _setTokenURIPrefix(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external override adminRequired {\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256[] calldata tokenIds, string[] calldata uris) external override adminRequired {\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i; i < tokenIds.length;) {\\n            _setTokenURI(tokenIds[i], uris[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setMintPermissions}.\\n     */\\n    function setMintPermissions(address extension, address permissions) external override adminRequired {\\n        _setMintPermissions(extension, permissions);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintBase}.\\n     */\\n    function mintBase(address to) public virtual override nonReentrant adminRequired returns(uint256) {\\n        return _mintBase(to, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintBase}.\\n     */\\n    function mintBase(address to, string calldata uri) public virtual override nonReentrant adminRequired returns(uint256) {\\n        return _mintBase(to, uri, 0);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintBaseBatch}.\\n     */\\n    function mintBaseBatch(address to, uint16 count) public virtual override nonReentrant adminRequired returns(uint256[] memory tokenIds) {\\n        tokenIds = new uint256[](count);\\n        uint256 firstTokenId = _tokenCount+1;\\n        _tokenCount += count;\\n\\n        for (uint i; i < count;) {\\n            tokenIds[i] = _mintBase(to, \\\"\\\", firstTokenId+i);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintBaseBatch}.\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) public virtual override nonReentrant adminRequired returns(uint256[] memory tokenIds) {\\n        tokenIds = new uint256[](uris.length);\\n        uint256 firstTokenId = _tokenCount+1;\\n        _tokenCount += uris.length;\\n\\n        for (uint i; i < uris.length;) {\\n            tokenIds[i] = _mintBase(to, uris[i], firstTokenId+i);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint token with no extension\\n     */\\n    function _mintBase(address to, string memory uri, uint256 tokenId) internal virtual returns(uint256) {\\n        if (tokenId == 0) {\\n            ++_tokenCount;\\n            tokenId = _tokenCount;\\n        }\\n\\n        // Call pre mint\\n        _preMintBase(to, tokenId);\\n\\n        _safeMint(to, tokenId, 0);\\n\\n        if (bytes(uri).length > 0) {\\n            _tokenURIs[tokenId] = uri;\\n        }\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtension}.\\n     */\\n    function mintExtension(address to) public virtual override nonReentrant returns(uint256) {\\n        requireExtension();\\n        return _mintExtension(to, \\\"\\\", 0, 0);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtension}.\\n     */\\n    function mintExtension(address to, string calldata uri) public virtual override nonReentrant returns(uint256) {\\n        requireExtension();\\n        return _mintExtension(to, uri, 0, 0);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtension}.\\n     */\\n    function mintExtension(address to, uint80 data) public virtual override nonReentrant returns(uint256) {\\n        requireExtension();\\n        return _mintExtension(to, \\\"\\\", data, 0);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtensionBatch}.\\n     */\\n    function mintExtensionBatch(address to, uint16 count) public virtual override nonReentrant returns(uint256[] memory tokenIds) {\\n        requireExtension();\\n        tokenIds = new uint256[](count);\\n        uint256 firstTokenId = _tokenCount+1;\\n        _tokenCount += count;\\n\\n        for (uint i; i < count;) {\\n            tokenIds[i] = _mintExtension(to, \\\"\\\", 0, firstTokenId+i);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtensionBatch}.\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) public virtual override nonReentrant returns(uint256[] memory tokenIds) {\\n        requireExtension();\\n        tokenIds = new uint256[](uris.length);\\n        uint256 firstTokenId = _tokenCount+1;\\n        _tokenCount += uris.length;\\n\\n        for (uint i; i < uris.length;) {\\n            tokenIds[i] = _mintExtension(to, uris[i], 0, firstTokenId+i);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtensionBatch}.\\n     */\\n    function mintExtensionBatch(address to, uint80[] calldata data) public virtual override nonReentrant returns(uint256[] memory tokenIds) {\\n        requireExtension();\\n        tokenIds = new uint256[](data.length);\\n        uint256 firstTokenId = _tokenCount+1;\\n        _tokenCount += data.length;\\n\\n        for (uint i; i < data.length;) {\\n            tokenIds[i] = _mintExtension(to, \\\"\\\", data[i], firstTokenId+i);\\n            unchecked { ++i; }\\n        }\\n    }\\n    \\n    /**\\n     * @dev Mint token via extension\\n     */\\n    function _mintExtension(address to, string memory uri, uint80 data, uint256 tokenId) internal virtual returns(uint256) {\\n        if (tokenId == 0) {\\n            ++_tokenCount;\\n            tokenId = _tokenCount;\\n        }\\n\\n        _checkMintPermissions(to, tokenId);\\n        // Call pre mint\\n        _preMintExtension(to, tokenId);\\n\\n        _safeMint(to, tokenId, data << 16 | _extensionToIndex[msg.sender]);\\n\\n        if (bytes(uri).length > 0) {\\n            _tokenURIs[tokenId] = uri;\\n        }\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-tokenExtension}.\\n     */\\n    function tokenExtension(uint256 tokenId) public view virtual override returns (address extension) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        extension = _tokenExtension(tokenId);\\n        require(extension != address(0), \\\"No extension for token\\\");\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-burn}.\\n     */\\n    function burn(uint256 tokenId) public virtual override nonReentrant {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"Caller is not owner or approved\\\");\\n        address owner = ownerOf(tokenId);\\n        address extension = _tokenExtension(tokenId);\\n        _burn(tokenId);\\n        _postBurn(owner, tokenId, extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(address(0), receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        _setRoyalties(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyaltiesExtension}.\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(extension, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getRoyalties}.\\n     */\\n    function getRoyalties(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFees}.\\n     */\\n    function getFees(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFeeRecipients}.\\n     */\\n    function getFeeRecipients(uint256 tokenId) external view virtual override returns (address payable[] memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyaltyReceivers(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFeeBps}.\\n     */\\n    function getFeeBps(uint256 tokenId) external view virtual override returns (uint[] memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyaltyBPS(tokenId);\\n    }\\n    \\n    /**\\n     * @dev See {ICreatorCore-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view virtual override returns (address, uint256) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyaltyInfo(tokenId, value);\\n    } \\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransfer}.\\n     */\\n    function setApproveTransfer(address extension) external override adminRequired {\\n        _setApproveTransferBase(extension);\\n    }\\n\\n    function _tokenExtension(uint256 tokenId) internal view override returns(address) {\\n        uint16 extensionIndex = uint16(_tokenData[tokenId].data);\\n        if (extensionIndex == 0) return address(0);\\n        return _indexToExtension[extensionIndex];\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-tokenData}.\\n     */\\n    function tokenData(uint256 tokenId) external view returns (uint80) {\\n        return uint80(_tokenData[tokenId].data >> 16);\\n    }\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ERC1155/IERC1155CreatorExtensionApproveTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Implement this if you want your extension to approve a transfer\\n */\\ninterface IERC1155CreatorExtensionApproveTransfer is IERC165 {\\n\\n    /**\\n     * @dev Set whether or not the creator contract will check the extension for approval of token transfer\\n     */\\n    function setApproveTransfer(address creator, bool enabled) external;\\n\\n    /**\\n     * @dev Called by creator contract to approve a transfer\\n     */\\n    function approveTransfer(address operator, address from, address to, uint256[] calldata tokenIds, uint256[] calldata amounts) external returns (bool);\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ERC1155/IERC1155CreatorExtensionBurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Your extension is required to implement this interface if it wishes\\n * to receive the onBurn callback whenever a token the extension created is\\n * burned\\n */\\ninterface IERC1155CreatorExtensionBurnable is IERC165 {\\n    /**\\n     * @dev callback handler for burn events\\n     */\\n    function onBurn(address owner, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ERC721/IERC721CreatorExtensionApproveTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Implement this if you want your extension to approve a transfer\\n */\\ninterface IERC721CreatorExtensionApproveTransfer is IERC165 {\\n\\n    /**\\n     * @dev Set whether or not the creator will check the extension for approval of token transfer\\n     */\\n    function setApproveTransfer(address creator, bool enabled) external;\\n\\n    /**\\n     * @dev Called by creator contract to approve a transfer\\n     */\\n    function approveTransfer(address operator, address from, address to, uint256 tokenId) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ERC721/IERC721CreatorExtensionBurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Your extension is required to implement this interface if it wishes\\n * to receive the onBurn callback whenever a token the extension created is\\n * burned\\n */\\ninterface IERC721CreatorExtensionBurnable is IERC165 {\\n    /**\\n     * @dev callback handler for burn events\\n     */\\n    function onBurn(address owner, uint256 tokenId) external;\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable royalties\\n */\\ninterface ICreatorExtensionRoyalties is IERC165 {\\n\\n    /**\\n     * Get the royalties for a given creator/tokenId\\n     */\\n    function getRoyalties(address creator, uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/permissions/ERC1155/IERC1155CreatorMintPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155Creator compliant extension contracts.\\n */\\ninterface IERC1155CreatorMintPermissions is IERC165 {\\n\\n    /**\\n     * @dev get approval to mint\\n     */\\n    function approveMint(address extension, address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/permissions/ERC721/IERC721CreatorMintPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721Creator compliant extension contracts.\\n */\\ninterface IERC721CreatorMintPermissions is IERC165 {\\n\\n    /**\\n     * @dev get approval to mint\\n     */\\n    function approveMint(address extension, address to, uint256 tokenId) external;\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/token/ERC1155/ERC1155Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Core is ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Token name\\n    string internal _name;\\n\\n    // Token symbol\\n    string internal _symbol;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = msg.sender;\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = msg.sender;\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = msg.sender;\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/token/ERC1155/ERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Core.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-1155[ERC1155] Non-Fungible Token Standard,\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ERC1155Core {\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC1155_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC1155_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/token/ERC721/ERC721Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard\\n */\\nabstract contract ERC721Core is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string internal _name;\\n\\n    // Token symbol\\n    string internal _symbol;\\n\\n    struct TokenData {\\n        address owner;\\n        uint96 data;\\n    }\\n\\n    // Mapping from token ID to token data\\n    mapping(uint256 => TokenData) internal _tokenData;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _tokenData[tokenId].owner;\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Core.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenData[tokenId].owner != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Core.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId, uint96 tokenData) internal virtual {\\n        _safeMint(to, tokenId, tokenData, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        uint96 tokenData,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, tokenData);\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _tokenData[tokenId] = TokenData({\\n            owner: to,\\n            data: tokenData\\n        });\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, tokenData);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenData memory tokenData = _tokenData[tokenId];\\n        address owner = tokenData.owner;\\n        uint96 data = tokenData.data;\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, data);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _tokenData[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        TokenData memory tokenData = _tokenData[tokenId];\\n        address owner = tokenData.owner;\\n        require(owner == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        uint96 data = tokenData.data;\\n\\n        _beforeTokenTransfer(from, to, tokenId, data);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _tokenData[tokenId].owner = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Core.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint96 tokenData\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint96 tokenData\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721Core.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n */\\nabstract contract ERC721Upgradeable is Initializable, ERC721Core {\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/AdminControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControlUpgradeable is OwnableUpgradeable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/PullPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/PullPayment.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/development-recommendations/general/external-calls/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     *\\n     * Causes the `escrow` to emit a {Withdrawn} event.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     *\\n     * Causes the `escrow` to emit a {Deposited} event.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/escrow/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/escrow/Escrow.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     *\\n     * Emits a {Deposited} event.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     *\\n     * Emits a {Withdrawn} event.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/PolyOneCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/ERC721CreatorImplementation.sol\\\";\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/ERC1155CreatorImplementation.sol\\\";\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\\\";\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/PullPayment.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/IPolyOneCore.sol\\\";\\nimport \\\"../interfaces/IPolyOneDrop.sol\\\";\\nimport \\\"../libraries/PolyOneLibrary.sol\\\";\\n\\n/**\\n * @title PolyOne Core\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Performs core functionality to faciliate the creation of drops, listings and administrative functions\\n */\\ncontract PolyOneCore is IPolyOneCore, AccessControl, ReentrancyGuard, PullPayment {\\n  using ECDSA for bytes32;\\n\\n  bytes32 public constant override POLY_ONE_ADMIN_ROLE = keccak256(\\\"POLY_ONE_ADMIN_ROLE\\\");\\n  bytes32 public constant override POLY_ONE_CREATOR_ROLE = keccak256(\\\"POLY_ONE_CREATOR_ROLE\\\");\\n\\n  mapping(address dropContractAddress => bool isRegistered) public dropContracts;\\n  mapping(address collectionAddress => Collection collectionParameters) public collections;\\n  mapping(uint256 dropId => uint256 tokenId) public dropTokenIds;\\n\\n  uint256 public dropCounter = 0;\\n\\n  address payable public primaryFeeWallet;\\n  address payable public secondaryFeeWallet;\\n\\n  uint16 public defaultPrimaryFee = 1500;\\n  uint16 public defaultSecondaryFee = 250;\\n\\n  uint16 public constant MAX_PRIMARY_FEE = 1500;\\n  uint16 public constant MAX_SECONDARY_FEE = 250;\\n\\n  uint64 public bidExtensionTime = 60 seconds;\\n\\n  mapping(bytes signature => bool isUsed) public usedSignatures;\\n  address public requestSigner;\\n\\n  /**\\n   * @param _superUser The user to assign the DEFAULT_ADMIN_ROLE\\n   * @param _primaryFeeWallet The wallet to receive fees from primary sales\\n   * @param _secondaryFeeWallet The wallet to receive fees from secondary sales\\n   * @param _requestSigner The address of the authroized request signer\\n   */\\n  constructor(address _superUser, address payable _primaryFeeWallet, address payable _secondaryFeeWallet, address _requestSigner) {\\n    PolyOneLibrary.checkZeroAddress(_superUser, \\\"super user\\\");\\n    PolyOneLibrary.checkZeroAddress(_primaryFeeWallet, \\\"primary fee wallet\\\");\\n    PolyOneLibrary.checkZeroAddress(_secondaryFeeWallet, \\\"secondary fee wallet\\\");\\n    PolyOneLibrary.checkZeroAddress(_requestSigner, \\\"request signer\\\");\\n    _setupRole(DEFAULT_ADMIN_ROLE, _superUser);\\n    _setupRole(POLY_ONE_ADMIN_ROLE, _superUser);\\n    primaryFeeWallet = _primaryFeeWallet;\\n    secondaryFeeWallet = _secondaryFeeWallet;\\n    requestSigner = _requestSigner;\\n  }\\n\\n  function allowCreator(address _creator) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    PolyOneLibrary.checkZeroAddress(_creator, \\\"creator\\\");\\n    grantRole(POLY_ONE_CREATOR_ROLE, _creator);\\n    emit CreatorAllowed(_creator);\\n  }\\n\\n  function revokeCreator(address _creator) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    PolyOneLibrary.checkZeroAddress(_creator, \\\"creator\\\");\\n    revokeRole(POLY_ONE_CREATOR_ROLE, _creator);\\n    emit CreatorRevoked(_creator);\\n  }\\n\\n  function registerDropContract(address _dropContract) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    PolyOneLibrary.checkZeroAddress(_dropContract, \\\"drop contract\\\");\\n    PolyOneLibrary.validateDropContract(_dropContract);\\n    if (dropContracts[_dropContract]) {\\n      revert AddressAlreadyRegistered(_dropContract);\\n    }\\n\\n    dropContracts[_dropContract] = true;\\n    emit DropContractRegistered(_dropContract);\\n  }\\n\\n  function registerCollection(\\n    address _collection,\\n    bool _isERC721,\\n    SignedRequest calldata _signedRequest\\n  ) external onlyRole(POLY_ONE_CREATOR_ROLE) {\\n    PolyOneLibrary.checkZeroAddress(_collection, \\\"collection\\\");\\n    PolyOneLibrary.validateProxyCreatorContract(_collection, _isERC721);\\n    PolyOneLibrary.validateContractOwner(_collection, address(this));\\n    PolyOneLibrary.validateContractCreator(_collection, msg.sender);\\n    _validateRegisterCollectionRequest(_collection, _isERC721, _signedRequest);\\n\\n    if (collections[_collection].registered) {\\n      revert AddressAlreadyRegistered(_collection);\\n    }\\n\\n    collections[_collection] = Collection(true, _isERC721);\\n    emit CollectionRegistered(_collection, msg.sender, _isERC721);\\n  }\\n\\n  function createDrop(\\n    address _dropContract,\\n    IPolyOneDrop.Drop calldata _drop,\\n    SignedRequest calldata _signedRequest,\\n    bytes calldata _data\\n  ) external onlyRole(POLY_ONE_CREATOR_ROLE) nonReentrant {\\n    PolyOneLibrary.validateContractCreator(_drop.collection, msg.sender);\\n    _validateDropRequest(_dropContract, _drop, 0, _signedRequest);\\n    _validateDropContract(_dropContract);\\n    _validateCollectionRegistered(_drop.collection);\\n    _validateRoyaltyReceivers(_drop.royalties.saleReceivers, _drop.royalties.saleBasisPoints, defaultPrimaryFee, primaryFeeWallet);\\n    _validateRoyaltyReceivers(\\n      _drop.royalties.royaltyReceivers,\\n      _drop.royalties.royaltyBasisPoints,\\n      defaultSecondaryFee,\\n      secondaryFeeWallet\\n    );\\n    PolyOneLibrary.validateArrayTotal(_drop.royalties.saleBasisPoints, 10000);\\n\\n    uint256 dropId = ++dropCounter;\\n    emit DropCreated(_dropContract, dropId);\\n    IPolyOneDrop(_dropContract).createDrop(dropId, _drop, _data);\\n  }\\n\\n  function updateDrop(\\n    uint256 _dropId,\\n    address _dropContract,\\n    IPolyOneDrop.Drop calldata _drop,\\n    SignedRequest calldata _signedRequest,\\n    bytes calldata _data\\n  ) external onlyRole(POLY_ONE_CREATOR_ROLE) nonReentrant {\\n    PolyOneLibrary.validateContractCreator(_drop.collection, msg.sender);\\n    _validateDropRequest(_dropContract, _drop, _dropId, _signedRequest);\\n    _validateDropContract(_dropContract);\\n    _validateRoyaltyReceivers(_drop.royalties.saleReceivers, _drop.royalties.saleBasisPoints, defaultPrimaryFee, primaryFeeWallet);\\n    _validateRoyaltyReceivers(\\n      _drop.royalties.royaltyReceivers,\\n      _drop.royalties.royaltyBasisPoints,\\n      defaultSecondaryFee,\\n      secondaryFeeWallet\\n    );\\n    PolyOneLibrary.validateArrayTotal(_drop.royalties.saleBasisPoints, 10000);\\n\\n    emit DropUpdated(_dropContract, _dropId);\\n    IPolyOneDrop(_dropContract).updateDrop(_dropId, _drop, _data);\\n  }\\n\\n  function updateDropRoyalties(\\n    uint256 _dropId,\\n    address _dropContract,\\n    IPolyOneDrop.Royalties calldata _royalties\\n  ) external onlyRole(POLY_ONE_ADMIN_ROLE) nonReentrant {\\n    _validateDropContract(_dropContract);\\n    _validateRoyaltyReceivers(_royalties.royaltyReceivers, _royalties.royaltyBasisPoints, defaultSecondaryFee, secondaryFeeWallet);\\n    _validateRoyaltyReceivers(_royalties.saleReceivers, _royalties.saleBasisPoints, defaultPrimaryFee, primaryFeeWallet);\\n    PolyOneLibrary.validateArrayTotal(_royalties.saleBasisPoints, 10000);\\n\\n    emit DropUpdated(_dropContract, _dropId);\\n    IPolyOneDrop(_dropContract).updateDropRoyalties(_dropId, _royalties);\\n  }\\n\\n  function registerPurchaseIntent(\\n    uint256 _dropId,\\n    address _dropContract,\\n    uint256 _tokenIndex,\\n    bytes calldata _data,\\n    bool _useAsyncTransfer\\n  ) external payable nonReentrant {\\n    _validateDropContract(_dropContract);\\n    _refundPendingWithdrawals(payable(msg.sender));\\n\\n    emit PurchaseIntentRegistered(_dropContract, _dropId, _tokenIndex, msg.sender, msg.value);\\n\\n    (bool instantClaim, address collection, string memory tokenURI, IPolyOneDrop.Royalties memory royalties) = IPolyOneDrop(_dropContract)\\n      .registerPurchaseIntent(_dropId, _tokenIndex, msg.sender, msg.value, _data);\\n\\n    if (instantClaim) {\\n      _claimToken(collection, _dropId, _tokenIndex, msg.sender, tokenURI, msg.value, royalties, _useAsyncTransfer);\\n    }\\n  }\\n\\n  function claimToken(\\n    uint256 _dropId,\\n    address _dropContract,\\n    uint256 _tokenIndex,\\n    bytes calldata _data,\\n    bool _useAsyncTransfer\\n  ) external nonReentrant {\\n    _validateDropContract(_dropContract);\\n\\n    (address collection, string memory tokenURI, IPolyOneDrop.Bid memory claim, IPolyOneDrop.Royalties memory royalties) = IPolyOneDrop(\\n      _dropContract\\n    ).validateTokenClaim(_dropId, _tokenIndex, msg.sender, _data);\\n    _claimToken(collection, _dropId, _tokenIndex, claim.bidder, tokenURI, claim.amount, royalties, _useAsyncTransfer);\\n  }\\n\\n  function mintTokensERC721(\\n    address _collection,\\n    address _recipient,\\n    uint256 _qty,\\n    string calldata _baseTokenURI,\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints\\n  ) external onlyRole(POLY_ONE_CREATOR_ROLE) nonReentrant {\\n    _validateCollectionRegistered(_collection);\\n    _validateCollectionType(_collection, true);\\n    PolyOneLibrary.validateContractCreator(_collection, msg.sender);\\n    _validateRoyaltyReceivers(_royaltyReceivers, _royaltyBasisPoints, defaultSecondaryFee, secondaryFeeWallet);\\n\\n    for (uint256 i = 1; i <= _qty; i++) {\\n      _mintTokenERC721(_collection, i, _recipient, _baseTokenURI, _royaltyReceivers, _royaltyBasisPoints);\\n    }\\n  }\\n\\n  function mintTokensERC1155(\\n    address _collection,\\n    string[] calldata _tokenURIs,\\n    uint256[] calldata _tokenIds,\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints,\\n    address[] calldata _receivers,\\n    uint256[] calldata _amounts,\\n    bool _existingTokens\\n  ) external onlyRole(POLY_ONE_CREATOR_ROLE) nonReentrant {\\n    _validateCollectionRegistered(_collection);\\n    _validateCollectionType(_collection, false);\\n    PolyOneLibrary.validateContractCreator(_collection, msg.sender);\\n\\n    if (_existingTokens) {\\n      _mintTokensERC1155Existing(_collection, _tokenIds, _receivers, _amounts);\\n    } else {\\n      _validateRoyaltyReceivers(_royaltyReceivers, _royaltyBasisPoints, defaultSecondaryFee, secondaryFeeWallet);\\n      _mintTokensERC1155New(_collection, _tokenURIs, _royaltyReceivers, _royaltyBasisPoints, _receivers, _amounts);\\n    }\\n  }\\n\\n  function callCollectionContract(address _collection, bytes calldata _data) external onlyRole(POLY_ONE_ADMIN_ROLE) nonReentrant {\\n    _validateCollectionRegistered(_collection);\\n\\n    emit CollectionContractCalled(_collection, msg.sender, _data);\\n\\n    (bool success, bytes memory responseData) = _collection.call(_data);\\n    if (!success) {\\n      revert CallCollectionFailed(responseData);\\n    }\\n  }\\n\\n  function setPrimaryFeeWallet(address payable _feeWallet) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    PolyOneLibrary.checkZeroAddress(_feeWallet, \\\"primary fee wallet\\\");\\n    emit PrimaryFeeWalletUpdated(_feeWallet);\\n    primaryFeeWallet = _feeWallet;\\n  }\\n\\n  function setSecondaryFeeWallet(address payable _feeWallet) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    PolyOneLibrary.checkZeroAddress(_feeWallet, \\\"secondary fee wallet\\\");\\n    emit SecondaryFeeWalletUpdated(_feeWallet);\\n    secondaryFeeWallet = _feeWallet;\\n  }\\n\\n  function setDefaultPrimaryFee(uint16 _newFee) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    if (_newFee > MAX_PRIMARY_FEE) {\\n      revert InvalidPolyOneFee();\\n    }\\n    emit DefaultFeesUpdated(_newFee, defaultSecondaryFee);\\n    defaultPrimaryFee = _newFee;\\n  }\\n\\n  function setDefaultSecondaryFee(uint16 _newFee) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    if (_newFee > MAX_SECONDARY_FEE) {\\n      revert InvalidPolyOneFee();\\n    }\\n    emit DefaultFeesUpdated(defaultPrimaryFee, _newFee);\\n    defaultSecondaryFee = _newFee;\\n  }\\n\\n  function setBidExtensionTime(uint64 _newBidExtensionTime) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    emit BidExtensionTimeUpdated(_newBidExtensionTime);\\n    bidExtensionTime = _newBidExtensionTime;\\n  }\\n\\n  function setRequestSigner(address _signer) external onlyRole(POLY_ONE_ADMIN_ROLE) {\\n    emit RequestSignerUpdated(_signer);\\n    requestSigner = _signer;\\n  }\\n\\n  function transferEth(address _destination, uint256 _amount) external onlyDropContract {\\n    PolyOneLibrary.checkZeroAddress(_destination, \\\"destination\\\");\\n    if (_amount == 0) {\\n      revert InvalidEthAmount();\\n    }\\n\\n    _asyncTransfer(_destination, _amount);\\n  }\\n\\n  /**\\n   * @dev Initiate a token claim\\n   * @param _collection The address of the token collection contract\\n   * @param _dropId The id of the drop\\n   * @param _tokenIndex The index of the token in the drop\\n   * @param _recipient The recipient of the tokens\\n   * @param _tokenURI The base of the tokenURI to use for the newly minted token\\n   * @param _amount The value of the token purchase being claimed\\n   * @param _royalties The royalties data for initial sale distribution and secondary royalties\\n   * @param _useAsyncTransfer Whether to use async transfer or not\\n   */\\n  function _claimToken(\\n    address _collection,\\n    uint256 _dropId,\\n    uint256 _tokenIndex,\\n    address _recipient,\\n    string memory _tokenURI,\\n    uint256 _amount,\\n    IPolyOneDrop.Royalties memory _royalties,\\n    bool _useAsyncTransfer\\n  ) internal {\\n    _distributeFunds(_amount, _royalties.saleReceivers, _royalties.saleBasisPoints, _useAsyncTransfer);\\n    _validateCollectionRegistered(_collection);\\n    PolyOneLibrary.checkZeroAddress(_recipient, \\\"recipient\\\");\\n\\n    if (collections[_collection].isERC721) {\\n      uint256 tokenId = _mintTokenERC721(\\n        _collection,\\n        _tokenIndex,\\n        _recipient,\\n        _tokenURI,\\n        _royalties.royaltyReceivers,\\n        _royalties.royaltyBasisPoints\\n      );\\n      emit TokenClaimed(_collection, tokenId, _dropId, _tokenIndex, _recipient);\\n    } else {\\n      uint256 tokenId = dropTokenIds[_dropId];\\n\\n      if (tokenId == 0) {\\n        uint256 newTokenId = _mintTokensERC1155New(\\n          _collection,\\n          PolyOneLibrary.stringToStringArray(_tokenURI),\\n          _royalties.royaltyReceivers,\\n          _royalties.royaltyBasisPoints,\\n          PolyOneLibrary.addressToAddressArray(_recipient),\\n          PolyOneLibrary.uintToUintArray(1)\\n        )[0];\\n        dropTokenIds[_dropId] = newTokenId;\\n        emit TokenClaimed(_collection, newTokenId, _dropId, _tokenIndex, _recipient);\\n      } else {\\n        _mintTokensERC1155Existing(\\n          _collection,\\n          PolyOneLibrary.uintToUintArray(tokenId),\\n          PolyOneLibrary.addressToAddressArray(_recipient),\\n          PolyOneLibrary.uintToUintArray(1)\\n        );\\n        emit TokenClaimed(_collection, tokenId, _dropId, _tokenIndex, _recipient);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Mint a single ERC721 token to a recipient\\n   * @param _collection The address of the token collection contract\\n   * @param _tokenIndex The index of the token in the drop\\n   * @param _recipient The address of the recipient\\n   * @param _baseTokenURI The base URI of the token\\n   * @param _royaltyReceivers The addresses of the royalty receivers\\n   * @param _royaltyBasisPoints The royalty basis points for each receiver\\n   * @return The newly minted token ID\\n   */\\n  function _mintTokenERC721(\\n    address _collection,\\n    uint256 _tokenIndex,\\n    address _recipient,\\n    string memory _baseTokenURI,\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints\\n  ) internal returns (uint256) {\\n    ERC721CreatorImplementation collection = ERC721CreatorImplementation(_collection);\\n    string memory tokenURI = string(abi.encodePacked(_baseTokenURI, Strings.toString(_tokenIndex)));\\n    uint256 tokenId = collection.mintBase(_recipient, tokenURI);\\n    collection.setRoyalties(tokenId, _royaltyReceivers, _royaltyBasisPoints);\\n    return tokenId;\\n  }\\n\\n  /**\\n   * @dev Mint a batch of new ERC1155 tokens to recipients and set royalties\\n   * @param _collection The address of the token collection contract\\n   * @param _tokenURIs The base tokenURI for each new token to be minted\\n   * @param _royaltyReceivers The addresses of the royalty receivers\\n   * @param _royaltyBasisPoints The royalty basis points for each receiver\\n   * @param _recipients The address of the recipients\\n   * @param _amounts The amount of the token to mint to each recipient\\n   * @return The tokenIds of the newly minted tokens\\n   */\\n  function _mintTokensERC1155New(\\n    address _collection,\\n    string[] memory _tokenURIs,\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints,\\n    address[] memory _recipients,\\n    uint256[] memory _amounts\\n  ) internal returns (uint256[] memory) {\\n    ERC1155CreatorImplementation collection = ERC1155CreatorImplementation(_collection);\\n    uint256[] memory tokenIds = collection.mintBaseNew(_recipients, _amounts, _tokenURIs);\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      collection.setRoyalties(tokenIds[i], _royaltyReceivers, _royaltyBasisPoints);\\n    }\\n    return tokenIds;\\n  }\\n\\n  /**\\n   * @dev Mint a batch of new ERC1155 tokens with existing tokenIds to a batch of recipients\\n   * @param _collection The address of the token collection contract\\n   * @param _tokenIds The ids of the tokens to mint\\n   * @param _recipients The address of the recipients\\n   * @param _amounts The amount of the token to mint to each recipient\\n   * @return The tokenIds of the newly minted tokens\\n   */\\n  function _mintTokensERC1155Existing(\\n    address _collection,\\n    uint256[] memory _tokenIds,\\n    address[] memory _recipients,\\n    uint256[] memory _amounts\\n  ) internal returns (uint256[] memory) {\\n    ERC1155CreatorImplementation collection = ERC1155CreatorImplementation(_collection);\\n    collection.mintBaseExisting(_recipients, _tokenIds, _amounts);\\n    return _tokenIds;\\n  }\\n\\n  /**\\n   * @dev Distribute funds to the primary sale recipients\\n   *      Minimal leftover funds are sent to the first receiver\\n   * @param _amount The amount to distribute\\n   * @param _receivers The addresses of the receivers\\n   * @param _receiverBasisPoints The basis points for each receiver\\n   * @param _useAsyncTransfer Whether to use async transfer\\n   */\\n  function _distributeFunds(\\n    uint256 _amount,\\n    address payable[] memory _receivers,\\n    uint256[] memory _receiverBasisPoints,\\n    bool _useAsyncTransfer\\n  ) internal {\\n    uint256[] memory distributionAmounts = new uint256[](_receivers.length);\\n    uint256 totalAmount = 0;\\n\\n    for (uint256 i = 0; i < _receivers.length; i++) {\\n      distributionAmounts[i] = (_amount * _receiverBasisPoints[i]) / 10000;\\n      totalAmount += distributionAmounts[i];\\n    }\\n\\n    uint256 leftover = _amount - totalAmount;\\n    if (leftover > 0) {\\n      distributionAmounts[0] += leftover;\\n    }\\n\\n    for (uint256 i = 0; i < _receivers.length; i++) {\\n      if (_useAsyncTransfer || PolyOneLibrary.isContract(_receivers[i])) {\\n        _asyncTransfer(_receivers[i], distributionAmounts[i]);\\n      } else {\\n        (bool success, ) = _receivers[i].call{value: distributionAmounts[i]}(\\\"\\\");\\n        if (!success) {\\n          revert EthTransferFailed(_receivers[i], distributionAmounts[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Refund the pending withdrawals for a caller who has placed a previous bid and had their bid returned\\n   * @param _receiver The address of the receiver\\n   */\\n  function _refundPendingWithdrawals(address payable _receiver) internal {\\n    if (payments(_receiver) > 0) {\\n      withdrawPayments(_receiver);\\n    }\\n  }\\n\\n  /**\\n   * @dev Validate that a drop contract has already been registered\\n   * @param _dropContract The address of the drop contract\\n   */\\n  function _validateDropContract(address _dropContract) internal view {\\n    if (!dropContracts[_dropContract]) {\\n      revert DropContractNotRegistered(_dropContract);\\n    }\\n  }\\n\\n  /**\\n   * @dev Validate that a token collection has already been registered\\n   * @param _collection The address of the collection\\n   */\\n  function _validateCollectionRegistered(address _collection) internal view {\\n    if (!collections[_collection].registered) {\\n      revert CollectionNotRegistered(_collection);\\n    }\\n  }\\n\\n  /**\\n   * @dev Validate that a token collection is of the expected type (ERC721 or ERC1155)\\n   * @param _collection The address of the collection\\n   * @param _isERC721 Whether the collection is expected to be ERC721 (true) or ERC1155 (false)\\n   */\\n  function _validateCollectionType(address _collection, bool _isERC721) internal view {\\n    if (collections[_collection].isERC721 != _isERC721) {\\n      revert CollectionTypeMismatch(_collection);\\n    }\\n  }\\n\\n  /**\\n   * @dev Validate that the secondary sale royalties are appriopriately formatted with PolyOne fees as the first item in each array\\n   * @param _royaltyReceivers The addresses of the royalty receivers (PolyOne fee wallet should be the first item in this array)\\n   * @param _royaltyBasisPoints The royalty basis points for each receiver (PolyOne fee should be the first item in this array)\\n   * @param _minimumFee The minimum fee that must be paid to PolyOne\\n   * @param _expectedFeeWallet The expected fee wallet address\\n   */\\n  function _validateRoyaltyReceivers(\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints,\\n    uint16 _minimumFee,\\n    address payable _expectedFeeWallet\\n  ) internal pure {\\n    if (_royaltyReceivers.length != _royaltyBasisPoints.length) {\\n      revert InvalidRoyaltySettings();\\n    }\\n    if (_royaltyReceivers[0] != _expectedFeeWallet) {\\n      revert FeeWalletNotIncluded();\\n    }\\n    if (_royaltyBasisPoints[0] < _minimumFee) {\\n      revert InvalidPolyOneFee();\\n    }\\n  }\\n\\n  /**\\n   * @dev Validate the signature for a register collection request\\n   * @param _collection The address of the collection\\n   * @param _isERC721 Whether the collection is expected to be ERC721 (true) or ERC1155 (false)\\n   * @param _signedRequest The signed request\\n   */\\n  function _validateRegisterCollectionRequest(address _collection, bool _isERC721, SignedRequest calldata _signedRequest) internal {\\n    if (usedSignatures[_signedRequest.signature]) {\\n      revert SignatureAlreadyUsed();\\n    }\\n    bytes32 message = keccak256(abi.encode(_collection, _isERC721, _signedRequest.timestamp)).toEthSignedMessageHash();\\n    if (message.recover(_signedRequest.signature) != requestSigner) {\\n      revert InvalidSignature();\\n    }\\n    usedSignatures[_signedRequest.signature] = true;\\n  }\\n\\n  /**\\n   * @dev Validate the signature for a create drop request\\n   * @param _dropContract The address of the drop contract\\n   * @param _drop The drop data\\n   * @param _dropId The id of the drop (if it exists, else 0)\\n   * @param _signedRequest The signed request\\n   */\\n  function _validateDropRequest(\\n    address _dropContract,\\n    IPolyOneDrop.Drop calldata _drop,\\n    uint256 _dropId,\\n    SignedRequest calldata _signedRequest\\n  ) internal {\\n    if (usedSignatures[_signedRequest.signature]) {\\n      revert SignatureAlreadyUsed();\\n    }\\n    bytes32 message = keccak256(\\n      abi.encode(\\n        _dropId,\\n        _dropContract,\\n        _drop.startingPrice,\\n        _drop.bidIncrement,\\n        _drop.qty,\\n        _drop.startDate,\\n        _drop.dropLength,\\n        _drop.collection,\\n        _drop.baseTokenURI,\\n        _signedRequest.timestamp\\n      )\\n    ).toEthSignedMessageHash();\\n    if (message.recover(_signedRequest.signature) != requestSigner) {\\n      revert InvalidSignature();\\n    }\\n    usedSignatures[_signedRequest.signature] = true;\\n  }\\n\\n  /**\\n   * @dev Functions with the onlyDropContract modifier attached should only be callable by a registered PolyOneDrop contract\\n   */\\n  modifier onlyDropContract() {\\n    if (!dropContracts[msg.sender]) {\\n      revert PolyOneLibrary.InvalidCaller(msg.sender);\\n    }\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/PolyOneCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/**\\n * @title Interface for PolyOneCreator\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Interface for the PolyOneCreator Proxy contract\\n */\\ninterface IPolyOneCreator {\\n  /**\\n   * @notice The original creator of the contract. This is the only address that can reclaim ownership of the contract from PolyOneCore\\n   * @return The address of the creator\\n   */\\n  function creator() external view returns (address);\\n\\n  /**\\n   * @notice The address of the Manifold implementation contract (ERC721CreatorImplementation or ERC1155CreatorImplementation)\\n   * @return The address of the implementation contract\\n   */\\n  function implementation() external view returns (address);\\n}\\n\\n/**\\n * @title PolyOneCreator\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @custom:contributor manifoldxyz (manifold.xyz)\\n * @notice Deployable Proxy contract that delagates implementation to Manifold Core and registers the PolyOneCore contract as administrator\\n */\\ncontract PolyOneCreator is Proxy, IPolyOneCreator {\\n  address public immutable creator;\\n\\n  /**\\n   * @param _name The name of the collection\\n   * @param _symbol The symbol for the collection\\n   * @param _implementationContract The address of the Manifold implementation contract (ERC721CreatorImplementation or ERC1155CreatorImplementation)\\n   * @param _polyOneCore The address of the PolyOneCore contract\\n   * @param _operatorFilter The address of the OpenSea Filter Registry contract\\n   */\\n  constructor(string memory _name, string memory _symbol, address _implementationContract, address _polyOneCore, address _operatorFilter) {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = _implementationContract;\\n\\n    require(_implementationContract != address(0), \\\"Implementation cannot be 0x0\\\");\\n    require(_implementationContract.code.length > 0, \\\"Implementation must be a contract\\\");\\n    (bool initSuccess, ) = _implementationContract.delegatecall(abi.encodeWithSignature(\\\"initialize(string,string)\\\", _name, _symbol));\\n    require(initSuccess, \\\"Initialization failed\\\");\\n\\n    require(_operatorFilter != address(0), \\\"Operator Filter cannot be 0x0\\\");\\n    require(_operatorFilter.code.length > 0, \\\"Operator Filter must be a contract\\\");\\n    (bool approveOpenSeaSuccess, ) = _implementationContract.delegatecall(\\n      abi.encodeWithSignature(\\\"setApproveTransfer(address)\\\", _operatorFilter)\\n    );\\n    require(approveOpenSeaSuccess, \\\"OpenSea Registry approval failed\\\");\\n\\n    require(_polyOneCore != address(0), \\\"PolyOneCore cannot be 0x0\\\");\\n    require(_polyOneCore.code.length > 0, \\\"PolyOneCore must be a contract\\\");\\n    (bool approvePolyOneSuccess, ) = _implementationContract.delegatecall(\\n      abi.encodeWithSignature(\\\"transferOwnership(address)\\\", _polyOneCore)\\n    );\\n    require(approvePolyOneSuccess, \\\"PolyOneCore transfer failed\\\");\\n\\n    creator = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  function implementation() public view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function _implementation() internal view override returns (address) {\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPolyOneCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"../interfaces/IPolyOneDrop.sol\\\";\\n\\n/**\\n * @title Interface for PolyOne Core\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Performs core functionality to faciliate the creation of drops, listings and administrative functions\\n */\\ninterface IPolyOneCore is IAccessControl {\\n  /**\\n   * @dev Structure of the parameters required for the registering of a new collection\\n   * @param registered Whether the collection is registered\\n   * @param isERC721 Whether the collection is an ERC721 (true) or ERC1155 (false)\\n   */\\n  struct Collection {\\n    bool registered;\\n    bool isERC721;\\n  }\\n\\n  /**\\n   * @dev Structure of a signature request for an action by a PolyOne Creator\\n   * @param signature The signature of the request\\n   * @param timestamp The timestamp of the signature\\n   */\\n  struct SignedRequest {\\n    bytes signature;\\n    uint256 timestamp;\\n  }\\n\\n  /**\\n   * @notice Thrown if a contract address is already registered\\n   * @param contractAddress The address of the contract\\n   */\\n  error AddressAlreadyRegistered(address contractAddress);\\n\\n  /**\\n   * @notice Thrown if a collection was expected to be registered but currently isn't\\n   * @param collection The address of the collection contract\\n   */\\n  error CollectionNotRegistered(address collection);\\n\\n  /**\\n   * @notice Thrown if an unregistered contract is being used to create a drop\\n   * @param dropContract The address of the unregistered contract\\n   */\\n  error DropContractNotRegistered(address dropContract);\\n\\n  /**\\n   * @dev Thrown if a transfer of eth fails\\n   * @param destination The intented recipient\\n   * @param amount The amount of eth to be transferred\\n   */\\n  error EthTransferFailed(address destination, uint256 amount);\\n\\n  /**\\n   * @dev Thrown if attempting to transfer an invalid eth amount\\n   */\\n  error InvalidEthAmount();\\n\\n  /**\\n   * @dev Thrown if attempting to interact with a collection that is not of the expected type\\n   * @param collection The address of the collection contract\\n   */\\n  error CollectionTypeMismatch(address collection);\\n\\n  /**\\n   * @dev Thrown if attempting to create or update a drop with invalid royalty settings\\n   */\\n  error InvalidRoyaltySettings();\\n\\n  /**\\n   * @dev Thrown if attempting to create or update a drop with invalid PolyOne fee settings\\n   */\\n  error InvalidPolyOneFee();\\n\\n  /**\\n   * @dev Thrown if attempting to create or udpate a drop without including the PolyOne fee wallet\\n   */\\n  error FeeWalletNotIncluded();\\n\\n  /**\\n   * @dev Thrown if an arbitrary call to a collection contract fails\\n   * @param error The error thrown by the contract being called\\n   */\\n  error CallCollectionFailed(bytes error);\\n\\n  /**\\n   * @notice Emitted when a creator is allowed to access the PolyOne contract ecosystem\\n   * @param creator address of the creator\\n   */\\n  event CreatorAllowed(address indexed creator);\\n\\n  /**\\n   * @dev Thrown if an invalid signature has been used as a parameter for a function requiring signature validation\\n   */\\n  error InvalidSignature();\\n\\n  /**\\n   * @dev Thrown if a signature that has already being used is used again\\n   */\\n  error SignatureAlreadyUsed();\\n\\n  /**\\n   * @notice Emitted when a creator is revoked access to the PolyOne contract ecosystem\\n   * @param creator address of the creator\\n   */\\n  event CreatorRevoked(address indexed creator);\\n\\n  /**\\n   * @notice Emitted when a drop contract is registered\\n   * @param dropContract The address of the drop contract implementation\\n   */\\n  event DropContractRegistered(address indexed dropContract);\\n\\n  /**\\n   * @notice Emitted when a new token collection is registered\\n   * @param collection The address of the collection contract\\n   * @param creator The address of the creator who owns the contract\\n   * @param isERC721 Whether the collection is an ERC721 (true) or ERC1155 (false)\\n   */\\n  event CollectionRegistered(address indexed collection, address indexed creator, bool isERC721);\\n\\n  /**\\n   * @notice Emitted when a new drop is created for a collection\\n   * @param dropContract The address of the drop contract for which the drop was created\\n   * @param dropId the id of the newly created drop\\n   */\\n  event DropCreated(address indexed dropContract, uint256 dropId);\\n\\n  /**\\n   * @notice Emitted when a purchase intent is created for an auction or fixed price drop\\n   * @param dropContract The address of the drop contract for which the purchase intent was created\\n   * @param dropId The id of the drop for which the purchase intent was created\\n   * @param tokenIndex The index of the token in the drop for which the purchase intent was created\\n   * @param bidder The address of the bidder who registered the purchase intent\\n   * @param amount The amount of the purchase\\n   */\\n  event PurchaseIntentRegistered(address indexed dropContract, uint256 dropId, uint256 tokenIndex, address indexed bidder, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when a token is claimed by a claimant\\n   * @param collection The address of the token contract\\n   * @param tokenId The id of the newly minted token\\n   * @param dropId The id of the drop from which the token was minted\\n   * @param tokenIndex The index of the token in the drop\\n   * @param claimant The address of the claimant\\n   */\\n  event TokenClaimed(address indexed collection, uint256 tokenId, uint256 dropId, uint256 tokenIndex, address indexed claimant);\\n\\n  /**\\n   * @notice Emitted when an existing drop is updated\\n   * @param dropContract The address of the drop contract for which teh drop was updated\\n   * @param _dropId The id of the drop that was updated\\n   */\\n  event DropUpdated(address indexed dropContract, uint256 _dropId);\\n\\n  /**\\n   * @notice Emitted when the PolyOne primary fee wallet is updated\\n   * @param feeWallet The new PolyOne primary fee wallet\\n   */\\n  event PrimaryFeeWalletUpdated(address feeWallet);\\n\\n  /**\\n   * @notice Emitted when the PolyOne secondary fee wallet is updated\\n   * @param feeWallet The new PolyOne secondary fee wallet\\n   */\\n  event SecondaryFeeWalletUpdated(address feeWallet);\\n\\n  /**\\n   * @notice Emitted when the PolyOne default primary or secondary fees are updated\\n   * @param primaryFee The new primary sale fee\\n   * @param secondaryFee The new secondary sale fee\\n   */\\n  event DefaultFeesUpdated(uint16 primaryFee, uint16 secondaryFee);\\n\\n  /**\\n   * @notice Emitted when the PolyOne authorised signer address is updated\\n   * @param signer The address of the authorised signer\\n   */\\n  event RequestSignerUpdated(address indexed signer);\\n\\n  /**\\n   * @notice Emitted when a collection contract is called with arbitrary calldata\\n   * @param collection The address of the collection contract\\n   * @param caller The address of the caller\\n   * @param data The data passed to the collection contract\\n   */\\n  event CollectionContractCalled(address indexed collection, address indexed caller, bytes data);\\n\\n  /**\\n   * @notice Emitted when ether is transferred to a destination account\\n   * @param destination The address of the destination account\\n   * @param amount The amount of ether transferred\\n   */\\n  event EthTransferred(address indexed destination, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when the bid extension time is updated by an admin\\n   * @param bidExtensionTime The new bid extension time\\n   */\\n  event BidExtensionTimeUpdated(uint256 bidExtensionTime);\\n\\n  /**\\n   * @notice Allow a creator to access the PolyOne contract ecosystem\\n   * @dev Only callable by the POLY_ONE_ADMIN_ROLE\\n   *      Emits a {CreatorAllowed} event\\n   * @param _creator address of the creator\\n   */\\n  function allowCreator(address _creator) external;\\n\\n  /**\\n   * @notice Revoke creator access from the PolyOne contract ecosystem\\n   * @dev Only callable by the POLY_ONE_ADMIN_ROLE\\n   *      Emits a {CreatorRevoked} event\\n   * @param _creator address of the creator\\n   */\\n  function revokeCreator(address _creator) external;\\n\\n  /**\\n   * @notice Register a new drop contract implementation to be used for Poly One token drops\\n   * @dev Only callable by the POLY_ONE_ADMIN_ROLE\\n   *      Emits a {DropContractRegistered} event\\n   *      _dropContract must implement the IPolyOneDrop interface\\n   * @param _dropContract The address of the drop contract implementation\\n   */\\n  function registerDropContract(address _dropContract) external;\\n\\n  /**\\n   * @notice Register an ERC721 or ERC1155 collection to the PolyOne ecosystem\\n   * @dev The contract must extend the ERC721Creator or ERC1155Creator contracts to be compatible.\\n   *      Only callable by the POLY_ONE_CREATOR_ROLE, and caller must be the contract owner.\\n   *      The PolyOneCore contract must be assigned as an admin in the collection contract.\\n   *      Emits a {CollectionRegistered} event.\\n   * @param _collection The address of the token contract to register\\n   * @param _isERC721 Is the contract an ERC721 standard (true) or ERC1155 (false)\\n   * @param _signedRequest A signed request to allow the creator to register the collection\\n   */\\n  function registerCollection(address _collection, bool _isERC721, SignedRequest calldata _signedRequest) external;\\n\\n  /**\\n   * @notice Create a new drop for an already registered collection and tokens that are already minted\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   *      Caller must be assigned as the owner of the contract in the PolyOneCore contract\\n   *      Emits a {DropCreated} event\\n   * @param _dropContract The implementation contract for the drop to be created\\n   * @param _drop The drop parameters (see {NewDrop} struct)\\n   * @param _signedRequest A signed request to allow the creator to create the drop\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * */\\n  function createDrop(\\n    address _dropContract,\\n    IPolyOneDrop.Drop memory _drop,\\n    SignedRequest calldata _signedRequest,\\n    bytes calldata _data\\n  ) external;\\n\\n  /**\\n   * @notice Update an existing drop.\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   *      Caller must be assigned as the owner of the contract in the PolyOneCore contract\\n   *      Emits a {DropUpdated} event\\n   *      The collection address will be excluded from the update\\n   *      The drop must not have started yet\\n   * @param _dropId The id of the previously created drop to update\\n   * @param _dropContract The address of the drop contract to which the drop is registered\\n   * @param _drop The updated drop information (not that collection address will be excluded)\\n   * @param _signedRequest A signed request to allow the creator to update the drop\\n   * @param _data Any additional data that should be passed to the drop contract\\n   */\\n  function updateDrop(\\n    uint256 _dropId,\\n    address _dropContract,\\n    IPolyOneDrop.Drop memory _drop,\\n    SignedRequest calldata _signedRequest,\\n    bytes calldata _data\\n  ) external;\\n\\n  /**\\n   * @notice Update the royalties\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   *      Emits a {DropUpdatedEvent}\\n   *      The drop must not have started yet\\n   *      Only the total of saleReceivers are validated, there is not validation that PolyOne fees are included\\n   * @param _dropId The id of the previously created drop to update\\n   * @param _dropContract The address of the drop contract to which the drop is registered\\n   * @param _royalties The updated royalties information\\n   */\\n  function updateDropRoyalties(uint256 _dropId, address _dropContract, IPolyOneDrop.Royalties memory _royalties) external;\\n\\n  /**\\n   * @notice Register a bid for an existing drop\\n   * @dev Will call to an external contract for the bidding implementation depending on the drop type\\n   *      Emits a {PurchaseIntentRegistered} event\\n   * @param _dropId The id of the drop to register a bid for\\n   * @param _dropContract The contract for the type of drop to claim a token from\\n   * @param _tokenIndex The index of the token in the drop to bid on\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * @param _useAsyncTransfer If true, async transfer will be used for funds distribution instead of a direct call\\n   */\\n  function registerPurchaseIntent(\\n    uint256 _dropId,\\n    address _dropContract,\\n    uint256 _tokenIndex,\\n    bytes calldata _data,\\n    bool _useAsyncTransfer\\n  ) external payable;\\n\\n  /**\\n   * @notice Claim a token that has been won in an auction style drop\\n   * @dev This will always revert for fixed price (instant) style drops as the token has already been claimed\\n   *      Only callable by the winner of the sale\\n   * @param _dropId The id of the drop to claim a token from\\n   * @param _dropContract The contract for the type of drop to claim a token from\\n   * @param _tokenIndex The index in the drop of the token to claim\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * @param _useAsyncTransfer If true, async transfer will be used for funds distribution instead of a direct call\\n   */\\n  function claimToken(uint256 _dropId, address _dropContract, uint256 _tokenIndex, bytes calldata _data, bool _useAsyncTransfer) external;\\n\\n  /**\\n   * @notice Mint new tokens to an existing registered ERC721 collection.\\n   *         This can be called by the creator of the collection to mint individual tokens that are not listed\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   * @param _collection The address of the collection to mint the token for\\n   * @param _recipient The recipient of the tokens\\n   * @param _qty The number of tokens being minted\\n   * @param _baseTokenURI The base tokenURI the tokens to be minted\\n   * @param _royaltyReceivers The addresses to receive seconary royalties (not including PolyOne fees)\\n   * @param _royaltyBasisPoints The percentage of royalties for each wallet to receive (in bps)\\n   */\\n  function mintTokensERC721(\\n    address _collection,\\n    address _recipient,\\n    uint256 _qty,\\n    string calldata _baseTokenURI,\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @notice Mint new tokens to an existing registered ERC1155 collection.\\n   *         This can be called by the creator of the collection to mint individual tokens that are not listed\\n   * @dev Only callable by the POLY_ONE_CREATOR_ROLE\\n   * @param _collection The address of the collection to mint the token for\\n   * @param _tokenURIs The base tokenURI for each new token to be minted\\n   * @param _tokenIds The ids of the tokens to mint\\n   * @param _royaltyReceivers The addresses to receive seconary royalties (not including PolyOne fees)\\n   * @param _royaltyBasisPoints The percentage of royalties for each wallet to receive (in bps)\\n   * @param _receivers The addresses to mint tokens to\\n   * @param _amounts The amounts of tokens to mint to each address\\n   * @param _existingTokens Is the set of tokens already existing in the collection (true) or a new batch of tokens (false). Cannot be mixed\\n   */\\n  function mintTokensERC1155(\\n    address _collection,\\n    string[] calldata _tokenURIs,\\n    uint256[] calldata _tokenIds,\\n    address payable[] memory _royaltyReceivers,\\n    uint256[] memory _royaltyBasisPoints,\\n    address[] calldata _receivers,\\n    uint256[] calldata _amounts,\\n    bool _existingTokens\\n  ) external;\\n\\n  /**\\n   * @notice Make an arbitrary contract call to the collection contract\\n   * @dev Only callable by the POLY_ONE_ADMIN_ROLE\\n   *      Emits a {CollectionContractCalled} event\\n   * @param _data The data to call the collection contract with\\n   */\\n  function callCollectionContract(address _collection, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Mapping of drop contracts to whether they are registered\\n   * @param _dropContract The address of the drop contract\\n   * @return A boolean indicating whether the drop contract is registered\\n   */\\n  function dropContracts(address _dropContract) external view returns (bool);\\n\\n  /**\\n   * @notice Mapping of token contract addresses to their collection data\\n   * @param _collection The address of the collection token contract\\n   * @return registered Whether the collection is registered\\n   * @return isERC721 Whether the collection is an ERC721 (true) or ERC1155 (false)\\n   */\\n  function collections(address _collection) external view returns (bool registered, bool isERC721);\\n\\n  /**\\n   * @notice Mapping of dropIds to the tokenId assigned to the drop for ERC1155 mints to differentiate between new and existing mint cases\\n   * @param _dropId The id of the drop to get the token id for\\n   * @return The tokenId assigned to the drop\\n   */\\n  function dropTokenIds(uint256 _dropId) external view returns (uint256);\\n\\n  /**\\n   * @notice The number of drops that have been created. This counter is used to create incremental ids for each new drop registered\\n   * @dev The counter is incremented before the new drop is created, hence the first drop is always 1\\n   */\\n  function dropCounter() external view returns (uint256);\\n\\n  /**\\n   * @notice The PolyOne fee wallet to collection primary and secondary sales\\n   */\\n  function primaryFeeWallet() external view returns (address payable);\\n\\n  /**\\n   * @notice The PolyOne fee wallet to collection primary and secondary sales\\n   */\\n  function secondaryFeeWallet() external view returns (address payable);\\n\\n  /**\\n   * @notice The PolyOne authorized request signer\\n   */\\n  function requestSigner() external view returns (address);\\n\\n  /**\\n   * @notice The default primary sale fee to apply to new collections and drops (in bps)\\n   */\\n  function defaultPrimaryFee() external view returns (uint16);\\n\\n  /**\\n   * @notice The default secondary sale fee to apply to new collections and drops (in bps)\\n   */\\n  function defaultSecondaryFee() external view returns (uint16);\\n\\n  /**\\n   * @notice The bid extension time for auction style drops (in seconds)\\n   */\\n  function bidExtensionTime() external view returns (uint64);\\n\\n  /**\\n   * @notice A mapping of used signatures to prevent replay attacks\\n   * @param _signature The signature to check\\n   */\\n  function usedSignatures(bytes memory _signature) external view returns (bool);\\n\\n  /**\\n   * @notice Set the address for PolyOne fees from primary sales to be sent to\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   * @param _feeWallet The new fee wallet\\n   */\\n  function setPrimaryFeeWallet(address payable _feeWallet) external;\\n\\n  /**\\n   * @notice Set the address for PolyOne fees from secondary sales to be sent to\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   * @param _feeWallet The new fee wallet\\n   */\\n  function setSecondaryFeeWallet(address payable _feeWallet) external;\\n\\n  /**\\n   * @notice Set the default primary fee that is applied to new collections\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   * @param _newFee The new fee to set\\n   */\\n  function setDefaultPrimaryFee(uint16 _newFee) external;\\n\\n  /**\\n   * @notice Set the default secondary fee that is applied to new collection\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   * @param _newFee The new fee to set\\n   */\\n  function setDefaultSecondaryFee(uint16 _newFee) external;\\n\\n  /**\\n   * @notice Set the bid extension time for auction style drops\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   *      Emits a {BidExtensionTimeUpdated} event\\n   * @param _newBidExtensionTime The new bid extension time to set\\n   */\\n  function setBidExtensionTime(uint64 _newBidExtensionTime) external;\\n\\n  /**\\n   * @notice Set the authorised signer for the contract\\n   * @dev Only callable by POLY_ONE_ADMIN_ROLE\\n   *      Emits a {AuthorisedSignerUpdated} event\\n   * @param _signer The address to set as the authorised signer\\n   */\\n  function setRequestSigner(address _signer) external;\\n\\n  /**\\n   * @notice Initiates an async transfer for an ether amount to a destination address\\n   * @dev Only callable by registered PolyOneDrop contracts\\n   *      Emits an Escrow {Deposited} event\\n   * @param _destination The address to send the amount to\\n   * @param _amount The amount to send (in wei)\\n   */\\n  function transferEth(address _destination, uint256 _amount) external;\\n\\n  /**\\n   * @notice Poly One Administrators allowed to perform administrative functions\\n   * @return The bytes32 representation of the POLY_ONE_ADMIN_ROLE\\n   */\\n  function POLY_ONE_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Poly One Creators allowed to mint new collections and create listings for their tokens\\n   * @return The bytes32 representation of the POLY_ONE_CREATOR_ROLE\\n   */\\n  function POLY_ONE_CREATOR_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice The maximum default primary fee that can be set by the POLY_ONE_ADMIN_ROLE\\n   * @return The maximum default primary fee\\n   */\\n  function MAX_PRIMARY_FEE() external view returns (uint16);\\n\\n  /**\\n   * @notice The maximum default secondary fee that can be set by the POLY_ONE_ADMIN_ROLE\\n   * @return The maximum default secondary fee\\n   */\\n  function MAX_SECONDARY_FEE() external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPolyOneDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n * @title Interface for PolyOne Drop\\n * @author Developed by Labrys on behalf of PolyOne\\n * @custom:contributor mfbevan (mfbevan.eth)\\n * @notice Base interface for the creation of PolyOne drop listing contracts\\n */\\ninterface IPolyOneDrop {\\n  /**\\n   * @dev Structure of parameters required for the creation of a new drop\\n   * @param startingPrice The starting price of the drop\\n   * @param bidIncrement The bid increment of the drop (can be left as zero for fixed-price drops)\\n   * @param qty The quantity of tokens in the drop\\n   * @param startDate The start date of the drop (in seconds)\\n   * @param dropLength The length of the drop (in seconds)\\n   * @param collection The address of the collection that the drop was created for\\n   * @param baseTokenURI The tokenURI that the drop will use for the minted token metadata\\n   * @param royalties THe primary and secondary royalties for the drop\\n   */\\n  struct Drop {\\n    uint256 startingPrice;\\n    uint128 bidIncrement;\\n    uint128 qty;\\n    uint64 startDate;\\n    uint64 dropLength;\\n    address collection;\\n    string baseTokenURI;\\n    Royalties royalties;\\n  }\\n\\n  /**\\n   * @dev Structure of parameters required for primary sale and secondary royalties\\n   *      This must include PolyOne's primary sale and secondary royalties\\n   *      The secondary royalties are optional but the primary sale royalties are not (they must total 100% in bps)\\n   * @param royaltyReceivers The addresses of the secondary royalty receivers. The PolyOne fee wallet should be the first in the array\\n   * @param royaltyBasisPoints The basis points of each of the secondary royalty receivers\\n   * @param saleReceivers The addresses of the primary sale receivers. The PolyOne fee wallet should be the first in the array\\n   * @param saleBasisPoints The basis points of each of the primary sale receivers\\n   */\\n  struct Royalties {\\n    address payable[] royaltyReceivers;\\n    uint256[] royaltyBasisPoints;\\n    address payable[] saleReceivers;\\n    uint256[] saleBasisPoints;\\n  }\\n\\n  /**\\n   * @dev Structure of parameters required for a bid on a drop\\n   * @param bidder The address of the bidder\\n   * @param amount The value of the bid in wei\\n   */\\n  struct Bid {\\n    address bidder;\\n    uint256 amount;\\n  }\\n\\n  /**\\n   * @dev Thrown if a drop is being access that does not exist on the drop contract\\n   * @param dropId The id of the drop that does not exist\\n   */\\n  error DropNotFound(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown if a token is being accessed that does not exist in a drop (i.e token index out of the drop range)\\n   * @param dropId The id of the drop being accessed\\n   * @param tokenIndex The index of the token being accessed\\n   */\\n  error TokenNotFoundInDrop(uint256 dropId, uint256 tokenIndex);\\n\\n  /**\\n   * @dev Thrown if a drop is being created that already exists on the drop contract\\n   * @param dropId The id of the drop that already exists\\n   */\\n  error DropAlreadyExists(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown when attempting to modify a date that is not permitted (e.g a date in the past)\\n   * @param date The date that is invalid\\n   */\\n  error InvalidDate(uint256 date);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase a drop which has not started yet\\n   * @param dropId The id of the drop\\n   */\\n  error DropNotStarted(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase a drop which has already finished\\n   * @param dropId The id of the drop\\n   */\\n  error DropFinished(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown if attempting to claim a drop which has not yet finished\\n   * @param dropId The id of the drop\\n   */\\n  error DropInProgress(uint256 dropId);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase or bid on a token with an invalid amount\\n   * @param price The price that was attempted to be paid\\n   */\\n  error InvalidPurchasePrice(uint256 price);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase or claim a token that has already been claimed\\n   * @param dropId The id of the drop\\n   * @param tokenIndex The index of the token in the drop\\n   */\\n  error TokenAlreadyClaimed(uint256 dropId, uint256 tokenIndex);\\n\\n  /**\\n   * @dev Thrown if attempting to purchase or claim a token that has already been claimed or is not claimable by the caller\\n   * @param dropId The id of the drop\\n   * @param tokenIndex The index of the token\\n   * @param claimant The address attempting to claim a token\\n   */\\n  error InvalidClaim(uint256 dropId, uint256 tokenIndex, address claimant);\\n\\n  /**\\n   * @dev Emitted when a drop is extended by a bid extension mechanism\\n   * @param dropId The id of the drop that was extended\\n   * @param newDropLength The new length of the drop\\n   */\\n  event DropExtended(uint256 indexed dropId, uint256 newDropLength);\\n\\n  /**\\n   * @notice Registers a new upcoming drop\\n   * @param _dropId The id of the new drop to create\\n   * @param _drop The parameters for the drop\\n   * @param _data Any additional data that should be passed to the drop contract\\n   */\\n  function createDrop(uint256 _dropId, Drop calldata _drop, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Update an existing drop\\n   * @param _dropId The id of the existing drop\\n   * @param _drop The updated parameters for the drop\\n   * @param _data Any additional data that should be passed to the drop contract\\n   */\\n  function updateDrop(uint256 _dropId, Drop calldata _drop, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Update the royalties for an existing drop\\n   * @param _dropId The id of the existing drop\\n   * @param _royalties The updated royalties for the drop\\n   */\\n  function updateDropRoyalties(uint256 _dropId, Royalties calldata _royalties) external;\\n\\n  /**\\n   * @notice Register a bid (or intent to purchase) a token from PolyOne\\n   * @dev For fixed price drops, the amount must be equal to the starting price, and the token will be transferred instantly.\\n   *      For auction style drops, the amount must be greater than the starting price.\\n   * @param _dropId The id of the drop to place a purchase for\\n   * @param _tokenIndex The index of the token to purchase in this drop\\n   * @param _bidder The address of the bidder\\n   * @param _amount The amount of the purchase intent (in wei)\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * @return instantClaim Whether this should be an instant claim (for fixed priced drop) or not (for auction style drops)\\n   * @return collection The collection address of the new token to be minted (if instant claim is also true)\\n   * @return tokenURI The token URI of the new token to be minted (if instant claim is also true)\\n   * @return royalties The royalties for the new token to be minted (if instant claim is also true)\\n   */\\n  function registerPurchaseIntent(\\n    uint256 _dropId,\\n    uint256 _tokenIndex,\\n    address _bidder,\\n    uint256 _amount,\\n    bytes calldata _data\\n  ) external payable returns (bool instantClaim, address collection, string memory tokenURI, Royalties memory royalties);\\n\\n  /**\\n   * @notice Validates that a token is allowed to be claimed by the claimant based on the status of the drop\\n   * @dev This will always revert for fixed price drops (where the bid increment is zero)\\n   *      This will return the claim data for fixed price drops if the token has been won by the claimaint and the auction has ended\\n   * @param _dropId The id of the drop to claim a token from\\n   * @param _tokenIndex The index of the token to claim\\n   * @param _caller The address of the claimant\\n   * @param _data Any additional data that should be passed to the drop contract\\n   * @return collection The collection address of the new token to be minted\\n   * @return tokenURI The token URI of the new token to be minted\\n   * @return claim The winning claim information (bidder and bid amount)\\n   * @return royalties The royalties for the new token to be minted\\n   */\\n  function validateTokenClaim(\\n    uint256 _dropId,\\n    uint256 _tokenIndex,\\n    address _caller,\\n    bytes calldata _data\\n  ) external returns (address collection, string memory tokenURI, Bid memory claim, Royalties memory royalties);\\n\\n  /**\\n   * @notice Mapping of drop ids to the drop parameters\\n   * @param startingPrice The starting price of the drop\\n   * @param bidIncrement The bid increment of the drop (can be left as zero for fixed-price drops)\\n   * @param qty The quantity of tokens in the drop\\n   * @param startDate The start date of the drop (in seconds)\\n   * @param dropLength The length of the drop (in seconds)\\n   * @param collection The address of the collection that the drop was created for\\n   * @param baseTokenURI The tokenURI that the drop will use for the minted token metadata\\n   * @param royalties THe primary and secondary royalties for the drop\\n   */\\n  function drops(\\n    uint256 _id\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 startingPrice,\\n      uint128 bidIncrement,\\n      uint128 qty,\\n      uint64 startDate,\\n      uint64 dropLength,\\n      address collection,\\n      string memory baseTokenURI,\\n      Royalties memory royalties\\n    );\\n\\n  /**\\n   * @notice Check if there is a currently active listing for a token\\n   * @param _dropId The id of the drop\\n   * @param _tokenIndex The index of the token in the drop\\n   */\\n  function listingActive(uint256 _dropId, uint256 _tokenIndex) external view returns (bool);\\n\\n  /**\\n   * @notice Check if a token was previously listed and it has now ended either due to time or being claimed\\n   * @param _dropId The id of the drop\\n   * @param _tokenIndex The index of the token in the drop\\n   */\\n  function listingEnded(uint256 _dropId, uint256 _tokenIndex) external view returns (bool);\\n\\n  /**\\n   * @notice Check the current claimed status of a listing\\n   * @param _dropId The id of the drop\\n   * @param _tokenIndex The index of the token in the drop\\n   */\\n  function listingClaimed(uint256 _dropId, uint256 _tokenIndex) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PolyOneLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../implementations/PolyOneCreator.sol\\\";\\nimport \\\"../interfaces/IPolyOneDrop.sol\\\";\\n\\n/**\\n * @notice Shared helpers for Poly One contracts\\n */\\nlibrary PolyOneLibrary {\\n  /**\\n   * @dev Thrown whenever a zero-address check fails\\n   * @param field The name of the field on which the zero-address check failed\\n   */\\n  error ZeroAddress(string field);\\n\\n  /**\\n   * @notice Thrown when attempting to validate a collection which is not of the expected ERC721Creator or ERC1155Creator type\\n   */\\n  error InvalidContractType();\\n\\n  /**\\n   * @notice Throw if the caller is not the expected caller\\n   * @param _caller The caller of the function\\n   */\\n  error InvalidCaller(address _caller);\\n\\n  /**\\n   * @notice Thrown if the total sale distribution percentage is not 100\\n   */\\n  error InvalidSaleDistribution();\\n\\n  /**\\n   * @notice Thrown if an array total does not match\\n   */\\n  error ArrayTotalMismatch();\\n\\n  /**\\n   * @notice Check if a field is the zero address, if so revert with the field name\\n   * @param _address The address to check\\n   * @param _field The name of the field to check\\n   */\\n  function checkZeroAddress(address _address, string memory _field) internal pure {\\n    if (_address == address(0)) {\\n      revert ZeroAddress(_field);\\n    }\\n  }\\n\\n  bytes4 constant ERC721_INTERFACE_ID = type(IERC721Metadata).interfaceId;\\n  bytes4 constant ERC1155_INTERFACE_ID = type(IERC1155MetadataURI).interfaceId;\\n  bytes4 constant CREATOR_CORE_INTERFACE_ID = type(ICreatorCore).interfaceId;\\n\\n  /**\\n   * @notice Validate that a contract conforms to the expected standard by validating the interface support of an implementation contract\\n   *         via ERC165 `supportInterface` (see https://eips.ethereum.org/EIPS/eip-165)\\n   * @dev This will throw an unexpected error if the contract does not support ERC165\\n   * @param _contractAddress The address of the contract to validate\\n   * @param _isERC721 Whether the contract is an ERC721 (true) or ERC1155 (false)\\n   */\\n  function validateProxyCreatorContract(address _contractAddress, bool _isERC721) internal view {\\n    bytes4 expectedInterfaceId = _isERC721 ? ERC721_INTERFACE_ID : ERC1155_INTERFACE_ID;\\n    IERC165 implementation = IERC165(IPolyOneCreator(_contractAddress).implementation());\\n    if (!implementation.supportsInterface(expectedInterfaceId) || !implementation.supportsInterface(CREATOR_CORE_INTERFACE_ID)) {\\n      revert InvalidContractType();\\n    }\\n  }\\n\\n  /**\\n   * @notice Validate that a contract implements the IPolyOneDrop interface\\n   * @param _contractAddress The address of the contract to validate\\n   */\\n  function validateDropContract(address _contractAddress) internal view {\\n    IERC165 implementation = IERC165(_contractAddress);\\n    if (!implementation.supportsInterface(type(IPolyOneDrop).interfaceId)) {\\n      revert InvalidContractType();\\n    }\\n  }\\n\\n  /**\\n   * @notice Validate that a caller is the owner of a collection\\n   * @dev The contract address being check must inerit the OpenZeppelin Ownable standard\\n   * @param _contractAddress The address of the collection to validate\\n   * @param _caller The address of the owner to validate\\n   * @return True if the caller is the owner of the contract\\n   */\\n  function validateContractOwner(address _contractAddress, address _caller) internal view returns (bool) {\\n    address owner = Ownable(_contractAddress).owner();\\n    if (owner != _caller) {\\n      revert InvalidCaller(_caller);\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Validate that a caller is the creator of a PolyOneCreator contract\\n   * @param _contractAddress The address of the collection to validate\\n   * @param _caller The address of the caller to validate\\n   * @return True if the caller is the creator of the contract\\n   */\\n  function validateContractCreator(address _contractAddress, address _caller) internal view returns (bool) {\\n    address creator = IPolyOneCreator(_contractAddress).creator();\\n    if (creator != _caller) {\\n      revert InvalidCaller(_caller);\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Check if a date is in the past (before the current block timestamp)\\n   *         If the timestamps are equal, this is considered to be in the past\\n   */\\n  function isDateInPast(uint256 _date) internal view returns (bool) {\\n    return block.timestamp >= _date;\\n  }\\n\\n  /**\\n   * @dev Validate that the sum of all items in a uint array is equal to a given total\\n   * @param _array The array to validate\\n   * @param _total The total to validate against\\n   */\\n  function validateArrayTotal(uint256[] memory _array, uint256 _total) internal pure {\\n    uint256 total = 0;\\n    for (uint i = 0; i < _array.length; i++) {\\n      total += _array[i];\\n    }\\n    if (total != _total) {\\n      revert ArrayTotalMismatch();\\n    }\\n  }\\n\\n  /**\\n   * @dev Convert an address to an array of length 1 with a single address\\n   * @param _address The address to convert\\n   * @return A length 1 array containing _address\\n   */\\n  function addressToAddressArray(address _address) internal pure returns (address[] memory) {\\n    address[] memory array = new address[](1);\\n    array[0] = _address;\\n    return array;\\n  }\\n\\n  /**\\n   * @dev Convert a uint to an array of length 1 with a single address\\n   * @param _uint The uint to convert\\n   * @return A length 1 array containing _uint\\n   */\\n  function uintToUintArray(uint256 _uint) internal pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = _uint;\\n    return array;\\n  }\\n\\n  /**\\n   * @dev Convert a string array to an array of length 1 with a single string\\n   * @param _string The string to convert\\n   * @return A length 1 array containing _string\\n   */\\n  function stringToStringArray(string memory _string) internal pure returns (string[] memory) {\\n    string[] memory array = new string[](1);\\n    array[0] = _string;\\n    return array;\\n  }\\n\\n  /**\\n   * @dev Check if an address is a contract\\n   * @param _address The address to check\\n   */\\n  function isContract(address _address) internal view returns (bool) {\\n    uint32 size;\\n    assembly {\\n      size := extcodesize(_address)\\n    }\\n    return (size > 0);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superUser\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_primaryFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_secondaryFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_requestSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"AddressAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayTotalMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"error\",\"type\":\"bytes\"}],\"name\":\"CallCollectionFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionTypeMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropContract\",\"type\":\"address\"}],\"name\":\"DropContractNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeWalletNotIncluded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEthAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPolyOneFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoyaltySettings\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidExtensionTime\",\"type\":\"uint256\"}],\"name\":\"BidExtensionTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CollectionContractCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"}],\"name\":\"CollectionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"primaryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"secondaryFee\",\"type\":\"uint16\"}],\"name\":\"DefaultFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dropContract\",\"type\":\"address\"}],\"name\":\"DropContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dropContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dropContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"}],\"name\":\"DropUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"name\":\"PrimaryFeeWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dropContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseIntentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RequestSignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"name\":\"SecondaryFeeWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRIMARY_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SECONDARY_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLY_ONE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLY_ONE_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"allowCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidExtensionTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"callCollectionContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dropContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_useAsyncTransfer\",\"type\":\"bool\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dropContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"bidIncrement\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"qty\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dropLength\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"royalties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPolyOneDrop.Drop\",\"name\":\"_drop\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolyOneCore.SignedRequest\",\"name\":\"_signedRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPrimaryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSecondaryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dropContractAddress\",\"type\":\"address\"}],\"name\":\"dropContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"dropTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_existingTokens\",\"type\":\"bool\"}],\"name\":\"mintTokensERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"address payable[]\",\"name\":\"_royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_royaltyBasisPoints\",\"type\":\"uint256[]\"}],\"name\":\"mintTokensERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryFeeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isERC721\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolyOneCore.SignedRequest\",\"name\":\"_signedRequest\",\"type\":\"tuple\"}],\"name\":\"registerCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dropContract\",\"type\":\"address\"}],\"name\":\"registerDropContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dropContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_useAsyncTransfer\",\"type\":\"bool\"}],\"name\":\"registerPurchaseIntent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"revokeCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryFeeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newBidExtensionTime\",\"type\":\"uint64\"}],\"name\":\"setBidExtensionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setDefaultPrimaryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setDefaultSecondaryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setPrimaryFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setRequestSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setSecondaryFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dropContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"bidIncrement\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"qty\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dropLength\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"royalties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPolyOneDrop.Drop\",\"name\":\"_drop\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolyOneCore.SignedRequest\",\"name\":\"_signedRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"updateDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dropContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyBasisPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"saleReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPolyOneDrop.Royalties\",\"name\":\"_royalties\",\"type\":\"tuple\"}],\"name\":\"updateDropRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"usedSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PolyOneCore", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f463294a9b9d05017fcb7bc4db041d61f7e8a80f0000000000000000000000004ae86a5bd9e85352a70f3bff8ff05775beb7125c0000000000000000000000004ae86a5bd9e85352a70f3bff8ff05775beb7125c000000000000000000000000a298795a4b9fbc8c089f8191af48a948d3c64bbc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}