{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Lock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract Stakify is Ownable, IERC20 {\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    string constant _name = \\\"Stakify\\\";\\n    string constant _symbol = \\\"SIFY\\\";\\n    uint8 constant _decimals = 18;\\n\\n    uint256 _totalSupply; // One hundred billions\\n\\n    mapping(address => uint256) _balances;\\n    mapping(address => mapping(address => uint256)) _allowances;\\n\\n    mapping(address => bool) public isFeeExempt;\\n    mapping(address => bool) public isAuthorized;\\n    mapping(address => bool) isMaxWalletExcluded;\\n    mapping(address => bool) isMaxTxExcluded;\\n\\n    address public treasuryWallet;\\n\\n    // Fees\\n    uint256 public buyLiquidityFee;\\n    uint256 public buyTreasuryFee;\\n    uint256 public buyBurnFee;\\n    uint256 public buyStakeFee;\\n    uint256 public buyTotalFee;\\n\\n    uint256 public sellLiquidityFee;\\n    uint256 public sellTreasuryFee;\\n    uint256 public sellStakeFee;\\n    uint256 public sellBurnFee;\\n\\n    uint256 public sellTotalFee;\\n\\n    bool public isRepellentEnabled;\\n\\n    uint256 public repellentSellAutoBurnFee;\\n    uint256 public repellentSellLiquidityFee;\\n    uint256 public repellentSellTreasuryFee;\\n    uint256 public repellentSellStakeFee;\\n    uint256 public repellentSellTotalFee;\\n\\n    uint256 public repellentBuyAutoBurnFee;\\n    uint256 public repellentBuyLiquidityFee;\\n    uint256 public repellentBuyTreasuryFee;\\n    uint256 public repellentBuyStakeFee;\\n    uint256 public repellentBuyTotalFee;\\n\\n    address public stakingWallet;\\n\\n    uint256 public launchtAt;\\n\\n    event RepellentFeeActivated(uint256 activatedAmount);\\n    event RepellentFeeDisabled(uint256 disabledAmount);\\n\\n    address BUSD;\\n\\n    enum LPLevels {\\n        Level1,\\n        Level2,\\n        Level3,\\n        Level4,\\n        Level5\\n    }\\n\\n    LPLevels public currentLpLevel;\\n    bool public isRepellentFee;\\n\\n    uint256 public lastLPCheckedAt;\\n    uint256 public lastLPAmount;\\n    uint256 public lpCheckFrequency;\\n\\n    struct LPRange {\\n        uint256 minLimit;\\n        uint256 maxLimit;\\n        uint256 dropLimit;\\n        uint256 recoverLimit;\\n    }\\n\\n    mapping(LPLevels => LPRange) public lpRanges;\\n\\n    uint256 public repellentFeeActivatedAt;\\n    uint256 public repellentFeeActivatedAmount;\\n    uint256 public repellentFeeRecoverAmount;\\n\\n    uint256 public lastRepellentFeeActivatedAt;\\n    uint256 public lastRepellentFeeRecoveredAt;\\n\\n    IUniswapV2Router02 public router;\\n\\n    address public pair;\\n\\n    bool public getTransferFees;\\n\\n    uint256 public swapThreshold; // 0.001% of supply\\n    uint256 public maxTreansaction;\\n    uint256 public maxWallet;\\n\\n    bool public contractSwapEnabled;\\n    bool public isTradeEnabled;\\n    bool inContractSwap;\\n    modifier swapping() {\\n        inContractSwap = true;\\n        _;\\n        inContractSwap = false;\\n    }\\n\\n    event SetIsFeeExempt(address holder, bool status);\\n    event AddAuthorizedWallet(address holder, bool status);\\n    event SetDoContractSwap(bool status);\\n    event DoContractSwap(uint256 amount, uint256 time);\\n\\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\\n\\n    constructor() {\\n        _totalSupply = 244 * 10 ** 6 * (10 ** _decimals);\\n\\n        buyLiquidityFee = 1;\\n        buyTreasuryFee = 2;\\n        buyBurnFee = 1;\\n        buyStakeFee = 1;\\n        buyTotalFee = 5;\\n\\n        sellLiquidityFee = 1;\\n        sellTreasuryFee = 22;\\n        sellBurnFee = 1;\\n        sellStakeFee = 1;\\n        sellTotalFee = 25;\\n\\n        repellentSellAutoBurnFee = 15;\\n        repellentSellLiquidityFee = 5;\\n        repellentSellTreasuryFee = 10;\\n        repellentSellTotalFee = 30;\\n\\n        repellentBuyAutoBurnFee = 0;\\n        repellentBuyLiquidityFee = 0;\\n        repellentBuyTreasuryFee = 0;\\n        repellentBuyTotalFee = 0;\\n\\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n        _allowances[address(this)][address(router)] = type(uint256).max;\\n\\n        treasuryWallet = 0xdAb6280d5a87c10250F454EE3AD3b3b0C1A274C0;\\n\\n        BUSD = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n        lpCheckFrequency = 24 hours;\\n        getTransferFees = false;\\n        isRepellentEnabled = true;\\n\\n        swapThreshold = (_totalSupply * 1) / 10000; // 0.001% of supply\\n        maxTreansaction = (_totalSupply * 2) / 100;\\n        maxWallet = (_totalSupply * 2) / 100;\\n\\n        contractSwapEnabled = true;\\n        isTradeEnabled = false;\\n\\n        address newOwner = 0x64Ab7F64187AF212007A3EE9fdF990101DE4Bc16;\\n\\n        isFeeExempt[newOwner] = true;\\n        isFeeExempt[address(this)] = true;\\n        isFeeExempt[treasuryWallet] = true;\\n\\n        isAuthorized[newOwner] = true;\\n        isAuthorized[address(this)] = true;\\n        isAuthorized[ZERO] = true;\\n        isAuthorized[DEAD] = true;\\n        isAuthorized[treasuryWallet] = true;\\n\\n        isMaxWalletExcluded[msg.sender] = true;\\n        isMaxTxExcluded[msg.sender] = true;\\n\\n        isMaxWalletExcluded[ZERO] = true;\\n        isMaxTxExcluded[ZERO] = true;\\n\\n        isMaxWalletExcluded[DEAD] = true;\\n        isMaxTxExcluded[DEAD] = true;\\n\\n        lpRanges[LPLevels.Level1].minLimit = 0;\\n        lpRanges[LPLevels.Level1].maxLimit = 100000 * 10 ** 6;\\n        lpRanges[LPLevels.Level1].dropLimit = 1000;\\n        lpRanges[LPLevels.Level1].recoverLimit = 2000;\\n\\n        lpRanges[LPLevels.Level2].minLimit = 100000 * 10 ** 6;\\n        lpRanges[LPLevels.Level2].maxLimit = 200000 * 10 ** 6;\\n        lpRanges[LPLevels.Level2].dropLimit = 750;\\n        lpRanges[LPLevels.Level2].recoverLimit = 1500;\\n\\n        lpRanges[LPLevels.Level3].minLimit = 200000 * 10 ** 6;\\n        lpRanges[LPLevels.Level3].maxLimit = 500000 * 10 ** 6;\\n        lpRanges[LPLevels.Level3].dropLimit = 500;\\n        lpRanges[LPLevels.Level3].recoverLimit = 1000;\\n\\n        lpRanges[LPLevels.Level4].minLimit = 500000 * 10 ** 6;\\n        lpRanges[LPLevels.Level4].maxLimit = 1000000 * 10 ** 6;\\n        lpRanges[LPLevels.Level4].dropLimit = 250;\\n        lpRanges[LPLevels.Level4].recoverLimit = 500;\\n\\n        lpRanges[LPLevels.Level5].minLimit = 1000000 * 10 ** 6;\\n        lpRanges[LPLevels.Level5].maxLimit = 600000 * 10 ** 6;\\n        lpRanges[LPLevels.Level5].dropLimit = 100;\\n        lpRanges[LPLevels.Level5].recoverLimit = 200;\\n\\n        _balances[newOwner] = _totalSupply;\\n        emit Transfer(address(0), newOwner, _totalSupply);\\n\\n        transferOwnership(newOwner);\\n    }\\n\\n    receive() external payable {}\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            require(\\n                _allowances[sender][msg.sender] >= amount,\\n                \\\"Insufficient Allowance\\\"\\n            );\\n            _allowances[sender][msg.sender] =\\n                _allowances[sender][msg.sender] -\\n                amount;\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (!isTradeEnabled) require(isAuthorized[sender], \\\"Trading disabled\\\");\\n        if (inContractSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n        if (!isMaxTxExcluded[sender])\\n            require(amount <= maxTreansaction, \\\"Max transaction exceeded\\\");\\n\\n        if (!isMaxWalletExcluded[recipient] && recipient != pair) {\\n            require(\\n                (_balances[recipient] + amount) <= maxWallet,\\n                \\\"Max wallet exceeded\\\"\\n            );\\n        }\\n\\n        if (\\n            (lastLPCheckedAt + lpCheckFrequency) < block.timestamp &&\\n            !isRepellentFee &&\\n            isTradeEnabled\\n        ) {\\n            uint256 lpBnbBalance = IERC20(router.WETH()).balanceOf(\\n                address(pair)\\n            );\\n            lastLPAmount = getBnbPrice(lpBnbBalance);\\n            lastLPCheckedAt = block.timestamp;\\n        }\\n\\n        if (isTradeEnabled) calculateLPStatus();\\n\\n        if (shouldDoContractSwap()) {\\n            doContractSwap();\\n        }\\n\\n        require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\\n            ? takeFee(sender, recipient, amount)\\n            : amount;\\n        _balances[recipient] = _balances[recipient] + amountReceived;\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n\\n    function shouldDoContractSwap() internal view returns (bool) {\\n        return (msg.sender != pair &&\\n            !inContractSwap &&\\n            contractSwapEnabled &&\\n            sellTotalFee > 0 &&\\n            _balances[address(this)] >= swapThreshold);\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 feeToken;\\n        uint256 burnTokens;\\n        uint256 stakeTokens;\\n\\n        if (isRepellentFee && isRepellentEnabled) {\\n            if (recipient == pair && repellentSellTotalFee > 0) {\\n                feeToken = (amount * repellentSellTotalFee) / 100;\\n\\n                // get burn tokens\\n                if (repellentSellAutoBurnFee > 0)\\n                    burnTokens =\\n                        (feeToken * repellentSellAutoBurnFee) /\\n                        repellentSellTotalFee;\\n\\n                // get sell tokens\\n                if (repellentSellStakeFee > 0)\\n                    stakeTokens =\\n                        (feeToken * repellentSellStakeFee) /\\n                        repellentSellTotalFee;\\n            } else if (repellentBuyTotalFee > 0) {\\n                feeToken = (amount * repellentBuyTotalFee) / 100;\\n                if (repellentBuyAutoBurnFee > 0)\\n                    burnTokens =\\n                        (feeToken * repellentBuyAutoBurnFee) /\\n                        repellentBuyTotalFee;\\n\\n                if (repellentBuyStakeFee > 0)\\n                    stakeTokens =\\n                        (feeToken * repellentBuyStakeFee) /\\n                        repellentSellTotalFee;\\n            }\\n        } else {\\n            if (recipient == pair && sellTotalFee > 0) {\\n                feeToken = (amount * sellTotalFee) / 100;\\n                if (sellBurnFee > 0)\\n                    burnTokens = (feeToken * sellBurnFee) / sellTotalFee;\\n\\n                if (sellStakeFee > 0)\\n                    stakeTokens = (feeToken * sellStakeFee) / sellTotalFee;\\n            } else if (buyTotalFee > 0) {\\n                feeToken = (amount * buyTotalFee) / 100;\\n                if (buyBurnFee > 0)\\n                    burnTokens = (feeToken * buyBurnFee) / buyTotalFee;\\n\\n                if (buyStakeFee > 0)\\n                    stakeTokens = (feeToken * buyStakeFee) / buyTotalFee;\\n            }\\n        }\\n        if (burnTokens > 0) {\\n            _balances[DEAD] = _balances[DEAD] + burnTokens;\\n            emit Transfer(sender, DEAD, burnTokens);\\n        }\\n        if (stakeTokens > 0) {\\n            _balances[stakingWallet] = _balances[stakingWallet] + stakeTokens;\\n            emit Transfer(sender, stakingWallet, stakeTokens);\\n        }\\n\\n        _balances[address(this)] =\\n            _balances[address(this)] +\\n            (feeToken - (burnTokens + stakeTokens));\\n        emit Transfer(\\n            sender,\\n            address(this),\\n            (feeToken - (burnTokens + stakeTokens))\\n        );\\n\\n        return (amount - feeToken);\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function shouldTakeFee(\\n        address sender,\\n        address to\\n    ) internal view returns (bool) {\\n        if (!getTransferFees) {\\n            if (sender != pair && to != pair) return false;\\n        }\\n        if (isFeeExempt[sender] || isFeeExempt[to]) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function isFeeExcluded(address _wallet) public view returns (bool) {\\n        return isFeeExempt[_wallet];\\n    }\\n\\n    function doContractSwap() internal swapping {\\n        uint256 contractTokenBalance = _balances[address(this)];\\n\\n        uint256 tokensToLp = (contractTokenBalance * sellLiquidityFee) /\\n            sellTotalFee;\\n\\n        uint256 marketingFee = contractTokenBalance - tokensToLp;\\n\\n        if (marketingFee > 0) {\\n            swapTokensForEth(marketingFee);\\n\\n            uint256 swappedTokens = address(this).balance;\\n\\n            if (swappedTokens > 0)\\n                payable(treasuryWallet).transfer(swappedTokens);\\n        }\\n\\n        if (tokensToLp > 0) swapAndLiquify(tokensToLp);\\n    }\\n\\n    function swapAndLiquify(uint256 tokens) private {\\n        // split the contract balance into halves\\n        uint256 half = tokens / 2;\\n        uint256 otherHalf = tokens - half;\\n\\n        // capture the contract's current ETH balance.\\n        // this is so that we can capture exactly the amount of ETH that the\\n        // swap creates, and not make the liquidity event include any ETH that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = address(this).balance;\\n\\n        // swap tokens for ETH\\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\n\\n        // how much ETH did we just swap into?\\n        uint256 newBalance = address(this).balance - initialBalance;\\n\\n        // add liquidity to uniswap\\n        addLiquidity(otherHalf, newBalance);\\n\\n        emit AutoLiquify(newBalance, otherHalf);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        _approve(address(this), address(router), tokenAmount);\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        // add the liquidity\\n        router.addLiquidityETH{value: bnbAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            DEAD,\\n            block.timestamp\\n        );\\n    }\\n\\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n\\n        emit SetIsFeeExempt(holder, exempt);\\n    }\\n\\n    function setDoContractSwap(bool _enabled) external onlyOwner {\\n        contractSwapEnabled = _enabled;\\n\\n        emit SetDoContractSwap(_enabled);\\n    }\\n\\n    function changeTreasuryWallet(address _wallet) external onlyOwner {\\n        treasuryWallet = _wallet;\\n    }\\n\\n    function changeBuyFees(\\n        uint256 _liquidityFee,\\n        uint256 _treasuryFee,\\n        uint256 _burnFee,\\n        uint256 _stakeFee\\n    ) external onlyOwner {\\n        buyLiquidityFee = _liquidityFee;\\n        buyTreasuryFee = _treasuryFee;\\n        buyBurnFee = _burnFee;\\n        buyStakeFee = _stakeFee;\\n\\n        buyTotalFee = _liquidityFee + _treasuryFee + _burnFee + _stakeFee;\\n\\n        require(buyTotalFee <= 10, \\\"Total fees can not greater than 10%\\\");\\n    }\\n\\n    function changeSellFees(\\n        uint256 _liquidityFee,\\n        uint256 _treasuryFee,\\n        uint256 _burnFee,\\n        uint256 _stakeFee\\n    ) external onlyOwner {\\n        sellLiquidityFee = _liquidityFee;\\n        sellTreasuryFee = _treasuryFee;\\n        sellBurnFee = _burnFee;\\n        sellStakeFee = _stakeFee;\\n\\n        sellTotalFee = _liquidityFee + _treasuryFee + _burnFee + _stakeFee;\\n\\n        if (isTradeEnabled && (launchtAt + 24 hours) < block.timestamp)\\n            require(sellTotalFee <= 10, \\\"Total fees can not greater than 10%\\\");\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        isTradeEnabled = true;\\n        launchtAt = block.timestamp;\\n    }\\n\\n    function setAuthorizedWallets(\\n        address _wallet,\\n        bool _status\\n    ) external onlyOwner {\\n        isAuthorized[_wallet] = _status;\\n    }\\n\\n    function rescueEth() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No enough ETH to transfer\\\");\\n\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    function changeGetFeesOnTransfer(bool _status) external onlyOwner {\\n        getTransferFees = _status;\\n    }\\n\\n    function changeLpCheckFrequency(uint256 _hours) external onlyOwner {\\n        lpCheckFrequency = _hours;\\n    }\\n\\n    function changeRepellentSellFees(\\n        uint256 _autoBurnFee,\\n        uint256 _liquidityFee,\\n        uint256 _treasuryFee,\\n        uint256 _stakeFee\\n    ) external onlyOwner {\\n        repellentSellAutoBurnFee = _autoBurnFee;\\n        repellentSellLiquidityFee = _liquidityFee;\\n        repellentSellTreasuryFee = _treasuryFee;\\n        repellentSellStakeFee = _stakeFee;\\n\\n        repellentSellTotalFee =\\n            _autoBurnFee +\\n            _liquidityFee +\\n            _treasuryFee +\\n            _stakeFee;\\n\\n        require(repellentSellTotalFee <= 30, \\\"Fees can not be grater than 30%\\\");\\n    }\\n\\n    function changeRepellentBuyFees(\\n        uint256 _autoBurnFee,\\n        uint256 _liquidityFee,\\n        uint256 _treasuryFee,\\n        uint256 _stakeFee\\n    ) external onlyOwner {\\n        repellentBuyAutoBurnFee = _autoBurnFee;\\n        repellentBuyLiquidityFee = _liquidityFee;\\n        repellentBuyTreasuryFee = _treasuryFee;\\n        repellentBuyStakeFee = _stakeFee;\\n\\n        repellentBuyTotalFee =\\n            _autoBurnFee +\\n            _liquidityFee +\\n            _treasuryFee +\\n            _stakeFee;\\n\\n        require(repellentSellTotalFee <= 20, \\\"Fees can not be grater than 20%\\\");\\n    }\\n\\n    function setLpRange(\\n        LPLevels _level,\\n        uint256 _min,\\n        uint256 _max,\\n        uint256 _drop,\\n        uint256 _recover\\n    ) external onlyOwner {\\n        LPRange storage currentRange = lpRanges[_level];\\n\\n        currentRange.minLimit = _min;\\n        currentRange.maxLimit = _max;\\n        currentRange.dropLimit = _drop;\\n        currentRange.recoverLimit = _recover;\\n    }\\n\\n    function calculateLPStatus() internal {\\n        uint256 lpBnbBalance = IERC20(router.WETH()).balanceOf(address(pair));\\n        uint256 lpBalance = getBnbPrice(lpBnbBalance);\\n\\n        if (\\n            lpBalance >= lpRanges[LPLevels.Level1].minLimit &&\\n            lpBalance <= lpRanges[LPLevels.Level1].maxLimit\\n        ) currentLpLevel = LPLevels.Level1;\\n\\n        if (\\n            lpBalance >= lpRanges[LPLevels.Level2].minLimit &&\\n            lpBalance <= lpRanges[LPLevels.Level2].maxLimit\\n        ) currentLpLevel = LPLevels.Level2;\\n\\n        if (\\n            lpBalance >= lpRanges[LPLevels.Level3].minLimit &&\\n            lpBalance <= lpRanges[LPLevels.Level3].maxLimit\\n        ) currentLpLevel = LPLevels.Level3;\\n\\n        if (\\n            lpBalance >= lpRanges[LPLevels.Level4].minLimit &&\\n            lpBalance <= lpRanges[LPLevels.Level4].maxLimit\\n        ) currentLpLevel = LPLevels.Level4;\\n\\n        if (lpBalance >= lpRanges[LPLevels.Level5].minLimit)\\n            currentLpLevel = LPLevels.Level5;\\n\\n        if (lastLPAmount > lpBalance && !isRepellentFee) {\\n            uint256 lpDifference = lastLPAmount - lpBalance;\\n\\n            uint256 differencePercentage = ((lpDifference * 10000) /\\n                lastLPAmount);\\n\\n            if (differencePercentage > lpRanges[currentLpLevel].dropLimit) {\\n                isRepellentFee = true;\\n                repellentFeeActivatedAt = block.timestamp;\\n                lastRepellentFeeActivatedAt = block.timestamp;\\n                repellentFeeActivatedAmount = lpBalance;\\n                repellentFeeRecoverAmount =\\n                    lpBalance +\\n                    ((lpBalance * lpRanges[currentLpLevel].recoverLimit) /\\n                        10000);\\n\\n                emit RepellentFeeActivated(lpBalance);\\n            }\\n        }\\n        if (isRepellentFee && lpBalance > repellentFeeRecoverAmount) {\\n            isRepellentFee = false;\\n            repellentFeeActivatedAt = 0;\\n            repellentFeeActivatedAmount = 0;\\n            repellentFeeRecoverAmount = 0;\\n\\n            lastRepellentFeeRecoveredAt = block.timestamp;\\n\\n            lastLPAmount = lpBalance;\\n\\n            emit RepellentFeeDisabled(lpBalance);\\n        }\\n    }\\n\\n    function getBnbPrice(uint256 _amount) public view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = BUSD;\\n\\n        uint256[] memory amounts = router.getAmountsOut(_amount, path);\\n\\n        return amounts[1];\\n    }\\n\\n    function changeMaxWallet(uint256 _amount) external onlyOwner {\\n        require(\\n            _amount >= ((_totalSupply * 2) / 100),\\n            \\\"Max wallet can not less than 2%\\\"\\n        );\\n\\n        maxWallet = _amount;\\n    }\\n\\n    function changeMaxTx(uint256 _amount) external onlyOwner {\\n        require(\\n            _amount >= ((_totalSupply * 1) / 100),\\n            \\\"Max wallet can not less than 1%\\\"\\n        );\\n\\n        maxTreansaction = _amount;\\n    }\\n\\n    function maxWalletExclude(\\n        address _wallet,\\n        bool _status\\n    ) external onlyOwner {\\n        isMaxWalletExcluded[_wallet] = _status;\\n    }\\n\\n    function maxTxExclude(address _wallet, bool _status) external onlyOwner {\\n        isMaxTxExcluded[_wallet] = _status;\\n    }\\n\\n    function toggleReppelent(bool _status) external onlyOwner {\\n        isRepellentEnabled = _status;\\n    }\\n\\n    function changeStakeAddress(address _stakePool) external onlyOwner {\\n        stakingWallet = _stakePool;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AddAuthorizedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DoContractSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activatedAmount\",\"type\":\"uint256\"}],\"name\":\"RepellentFeeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disabledAmount\",\"type\":\"uint256\"}],\"name\":\"RepellentFeeDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetDoContractSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetIsFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyStakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFee\",\"type\":\"uint256\"}],\"name\":\"changeBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeGetFeesOnTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"changeLpCheckFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_autoBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFee\",\"type\":\"uint256\"}],\"name\":\"changeRepellentBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_autoBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFee\",\"type\":\"uint256\"}],\"name\":\"changeRepellentSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFee\",\"type\":\"uint256\"}],\"name\":\"changeSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakePool\",\"type\":\"address\"}],\"name\":\"changeStakeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLpLevel\",\"outputs\":[{\"internalType\":\"enum Stakify.LPLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBnbPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isFeeExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRepellentEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRepellentFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPCheckedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRepellentFeeActivatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRepellentFeeRecoveredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchtAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpCheckFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Stakify.LPLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lpRanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recoverLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTreansaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"maxTxExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"maxWalletExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyAutoBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyStakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentBuyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentFeeActivatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentFeeActivatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentFeeRecoverAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellAutoBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellStakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repellentSellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellStakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAuthorizedWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDoContractSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Stakify.LPLevels\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_drop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recover\",\"type\":\"uint256\"}],\"name\":\"setLpRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"toggleReppelent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Stakify", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}