{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Claimer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @title Claimer\\n * @author @brougkr\\n * @notice A Smart Contract To Facilitate Draft Pick Claims\\n */\\npragma solidity 0.8.19;\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IMP } from \\\"./IMP.sol\\\";\\ncontract Claimer is Ownable, ReentrancyGuard\\n{\\n    struct Claim\\n    {\\n        address _MintPass;         // [0] -> _MintPass\\n        address _MintedWork;       // [1] -> _MintedWork\\n        address _Operator;         // [2] -> _Operator \\n        uint _StartingTimestamp;   // [3] -> _StartingTimestamp (Unix Start Time)\\n        uint _SecondsPerTokenID;   // [4] -> _SecondsPerTokenID (600 = 10 Minutes For Each TokenID)\\n        uint _SecondsIntermission; // [5] -> _SecondsIntermission (Gap In Seconds To Next Continuation)\\n        uint _MaxPerIntermission;  // [6] -> _MaxPerIntermission (Maximum TokenIDs To Claim Per _SecondsIntermission)\\n        uint _MaxTotalClaim;       // [7] -> _MaxTotalClaim (Maximum Total TokenIDs To Claim)\\n    }\\n\\n    struct UserClaim\\n    {\\n        address _Claimer;     // [0] -> _Claimer\\n        uint _ClaimedTokenID; // [1] -> _ClaimedTokenID\\n        uint _BurnedTokenID;  // [2] -> _BurnedTokenID\\n        uint _Timestamp;      // [3] -> _Timestamp\\n    }\\n\\n    Claim public _Claim;\\n    UserClaim[] private _UserClaims;\\n\\n    event Claimed(address Claimer, uint ClaimedTokenID, uint Timestamp);\\n    event Purchased(address Purchaser, uint[] Tokens, uint Amount);\\n\\n    constructor()\\n    {\\n        _Claim._MintPass = 0x4c909BfAFAe145bf53892136A056FB4B36B450b0;\\n        _Claim._MintedWork = 0x0A1BBD57033F57E7B6743621b79fCB9Eb2CE3676;\\n        _Claim._Operator = 0x5168D59eFEBF8B86513b8728EC3e2D9Aa099BD93;\\n        _Claim._SecondsIntermission = 89400; // 12 Hours + (_Claim._SecondsPerTokenID * 5)\\n        _Claim._SecondsPerTokenID = 600; // 10 Minutes\\n        _Claim._StartingTimestamp = 1697724000 - (_Claim._SecondsPerTokenID * 5); // Starts At 5th TokenID\\n        _Claim._MaxPerIntermission = 55; // 55 Tokens Per Intermission\\n        _Claim._MaxTotalClaim = 100; // 100 Tokens Total\\n    }\\n\\n    /**\\n     * @dev Claims Tokens\\n     */\\n    function ClaimTokens(uint[] calldata BurnTokenIDs, uint[] calldata RedeemTokenIDs) external nonReentrant\\n    {\\n        require(block.timestamp >= _Claim._StartingTimestamp, \\\"Claimer: Claiming Has Not Started Yet\\\");\\n        require(BurnTokenIDs.length == RedeemTokenIDs.length, \\\"Claimer: Invalid Array Input Length\\\");\\n        uint ValidTokenID = ViewValidTokenID(block.timestamp);\\n        for(uint x; x < BurnTokenIDs.length; x++)\\n        {\\n            require(BurnTokenIDs[x] <= ValidTokenID, \\\"Claimer: Invalid Burn Token ID\\\");\\n            (address Recipient, ) = IMP(_Claim._MintPass)._LiveMintBurn(BurnTokenIDs[x]);\\n            require(Recipient == msg.sender, \\\"Claimer: Msg.Sender Is Not Owner Of Input Mint Pass\\\");\\n            IERC721(_Claim._MintedWork).transferFrom(_Claim._Operator, Recipient, RedeemTokenIDs[x]);\\n            _UserClaims.push(UserClaim(msg.sender, RedeemTokenIDs[x], BurnTokenIDs[x], block.timestamp));\\n            emit Claimed(msg.sender, RedeemTokenIDs[x], block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes All Addresses\\n     */\\n    function _ChangeAddresses(address NewMintPass, address NewMintedWork, address Operator) external onlyOwner\\n    {\\n        _Claim._MintPass = NewMintPass;\\n        _Claim._MintedWork = NewMintedWork;\\n        _Claim._Operator = Operator;\\n    }\\n\\n    /**\\n     * @dev Changes Unix Start Time & The Seconds Interval\\n     */\\n    function _ChangeSecondsAndStart(uint StartingTimestamp, uint SecondsInterval) external onlyOwner\\n    {\\n        _Claim._StartingTimestamp = StartingTimestamp;\\n        _Claim._SecondsPerTokenID = SecondsInterval;\\n    }\\n\\n    /**\\n     * @dev Changes The Current Mint Pass Address\\n     */\\n    function _ChangeMintPassAddress(address NewAddress) external onlyOwner { _Claim._MintPass = NewAddress; }\\n\\n    /**\\n     * @dev Changes The Current Minted Work Address\\n     */\\n    function _ChangeMintedWorkAddress(address NewAddress) external onlyOwner { _Claim._MintedWork = NewAddress; }\\n\\n    /**\\n     * @dev Changes The Operator Address\\n     */\\n    function _ChangeOperatorAddress(address NewAddress) external onlyOwner { _Claim._Operator = NewAddress; }\\n\\n    /**\\n     * @dev Changes The Starting Timestamp For Timelocked Draft Pick Merkle Claims\\n     */\\n    function _ChangeStartingTimestamp(uint UnixTimestamp) external onlyOwner { _Claim._StartingTimestamp = UnixTimestamp; }\\n\\n    /**\\n     * @dev Changes The Seconds Per TokenID Claim (600 = 10 minutes Per TokenID)\\n     */\\n    function _ChangeSecondsPerTokenID(uint Seconds) external onlyOwner { _Claim._SecondsPerTokenID = Seconds; }\\n\\n    /**\\n     * @dev Changes The Amount Of Seconds In Each Intermission\\n     */\\n    function _ChangeSecondsIntermission(uint Seconds) external onlyOwner { _Claim._SecondsIntermission = Seconds; }\\n\\n    /**\\n     * @dev Changes The Maximum TokenIDs Available Per Intermission Interval\\n     */\\n    function _ChangeMaxPerIntermission(uint Max) external onlyOwner { _Claim._MaxPerIntermission = Max; }\\n    \\n    /**\\n     * @dev Changes The Max Claimable Tokens For Timelocked Draft Pick Merkle Claims\\n     */\\n    function _ChangeMaxClaim(uint Max) external onlyOwner { _Claim._MaxTotalClaim = Max; }\\n\\n    /**\\n     * @dev Changes The Seconds Interval For Timelocked Draft Pick Merkle Claims\\n     */\\n    function _ChangeSecondsInterval(uint SecondsInterval) external onlyOwner { _Claim._SecondsPerTokenID = SecondsInterval; }\\n\\n    /**\\n     * @dev Executes Arbitrary Transaction(s)\\n     */\\n    function _InitTransaction ( address[] memory Targets, uint[] memory Values, bytes[] memory Datas ) external onlyOwner\\n    {\\n        for(uint x; x < Targets.length; x++) \\n        {\\n            (bool success,) = Targets[x].call{value:(Values[x])}(Datas[x]);\\n            require(success, \\\"i have failed u anakin\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns The Current Eligible TokenID For Timelocked Draft Pick Merkle Claims\\n     */\\n    function ViewFrontend() public view returns ( UserClaim[] memory AllClaims, Claim memory ClaimParams, uint[] memory Timetable, uint ValidTokenID ) \\n    {\\n        ValidTokenID = ViewValidTokenID(block.timestamp);\\n        return (_UserClaims, _Claim, ViewTimetable(), ValidTokenID);\\n    }\\n    \\n    /**\\n     * @dev Returns An Array Of Successful Claims\\n     */\\n    function ViewClaims() public view returns ( UserClaim[] memory AllClaims ) { return _UserClaims; }\\n\\n    /**\\n     * @dev Returns The Timetable Of Unix Timestamps For Given Range Of TokenIDs\\n     */\\n    function ViewTimetable() public view returns ( uint[] memory Timestamps ) \\n    {\\n        Timestamps = new uint[](_Claim._MaxTotalClaim);\\n        for (uint x; x < _Claim._MaxTotalClaim; x++) { Timestamps[x] = ViewTimestampForTokenID(x); }\\n        return Timestamps;\\n    }\\n\\n    /**\\n     * @dev Calculates the Unix Timestamp for a given TokenID\\n     */\\n    function ViewTimestampForTokenID ( uint TokenID ) public view returns ( uint ) \\n    {\\n        uint MaxPerLocalInterval = _Claim._MaxPerIntermission;\\n        uint SecondsIntermission = _Claim._SecondsIntermission;\\n        uint Interval = _Claim._SecondsPerTokenID;\\n        uint fullIntervals = TokenID / MaxPerLocalInterval;\\n        uint currentIntervalIncrements = TokenID % MaxPerLocalInterval;\\n        return _Claim._StartingTimestamp + (fullIntervals * SecondsIntermission) + (currentIntervalIncrements * Interval);\\n    }\\n\\n    /**\\n     * @dev Returns The Current Valid TokenID\\n     */\\n    function ViewValidTokenID ( uint UnixTimestamp ) public view returns ( uint )\\n    { \\n        if(UnixTimestamp < _Claim._StartingTimestamp) { return type(uint).max; }\\n        uint MaxPerLocalInterval = _Claim._MaxPerIntermission;\\n        uint SecondsIntermission = _Claim._SecondsIntermission;\\n        uint elapsedTime = UnixTimestamp - _Claim._StartingTimestamp;\\n        uint fullIntervals = (elapsedTime / SecondsIntermission);\\n        uint halflivescompleted = elapsedTime % SecondsIntermission;\\n        uint currentIntervalIncrements = halflivescompleted / _Claim._SecondsPerTokenID;\\n        if(currentIntervalIncrements >= MaxPerLocalInterval) { currentIntervalIncrements = MaxPerLocalInterval - 1; }\\n        return (fullIntervals * MaxPerLocalInterval) + currentIntervalIncrements;\\n    }\\n}\\n\\ninterface IERC721 { function transferFrom(address from, address to, uint256 tokenId) external; }\"\r\n    },\r\n    \"contracts/IMP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * @dev @brougkr\\n */\\npragma solidity 0.8.19;\\ninterface IMP \\n{ \\n    /**\\n     * @dev { For Instances Where Golden Token Or Artists Have A Bespoke Mint Pass Contract }\\n     */\\n    function _LiveMintBurn(uint TicketID) external returns (address Recipient, uint ArtistID); \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ClaimedTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Tokens\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"RedeemTokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ViewClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_Claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BurnedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Claimer.UserClaim[]\",\"name\":\"AllClaims\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ViewFrontend\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_Claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BurnedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Claimer.UserClaim[]\",\"name\":\"AllClaims\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MintedWork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsPerTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxPerIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxTotalClaim\",\"type\":\"uint256\"}],\"internalType\":\"struct Claimer.Claim\",\"name\":\"ClaimParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"Timetable\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"ValidTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"ViewTimestampForTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ViewTimetable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"Timestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"UnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"ViewValidTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NewMintedWork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"}],\"name\":\"_ChangeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max\",\"type\":\"uint256\"}],\"name\":\"_ChangeMaxClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max\",\"type\":\"uint256\"}],\"name\":\"_ChangeMaxPerIntermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"_ChangeMintPassAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"_ChangeMintedWorkAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"_ChangeOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SecondsInterval\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsAndStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Seconds\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsIntermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SecondsInterval\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Seconds\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsPerTokenID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"UnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"_ChangeStartingTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Claim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MintedWork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsPerTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxPerIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxTotalClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"Datas\",\"type\":\"bytes[]\"}],\"name\":\"_InitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Claimer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}