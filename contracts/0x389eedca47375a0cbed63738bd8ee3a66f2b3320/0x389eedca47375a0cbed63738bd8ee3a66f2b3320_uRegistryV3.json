{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"uRegistryV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/*\\n\\nNOTICE: NO LICENSE GRANTED\\nThis smart contract code and any accompanying documentation (collectively referred to as \\\"the Code\\\") is provided without the grant of any license, whether express or implied. By interacting with, deploying, or using the Code, you (the \\\"User\\\") acknowledge and agree to the following terms:\\n\\n1. Ownership: The Code is owned by the original author or copyright holder, and all intellectual property rights are retained by the respective owner.\\n\\n2. Use at Your Own Risk: The User may use the Code solely at their own risk. The original author and copyright holder disclaim any and all warranties and liabilities, including, but not limited to, fitness for a particular purpose and non-infringement.\\n\\n3. No Modification or Distribution: The User may not modify, sublicense, distribute, or otherwise use the Code for any purpose without explicit written permission from the original author or copyright holder.\\n\\n4. No Support: The original author and copyright holder are under no obligation to provide any support, maintenance, or updates for the Code.\\n\\n5. No Legal or Commercial Relationship: This notice does not create any legal or commercial relationship between the User and the original author or copyright holder. No partnership, agency, or employment relationship is created by this notice.\\n\\nBy interacting with this smart contract, the User accepts all the terms and conditions stated in this notice. Any unauthorized use, reproduction, or distribution of the Code may result in legal consequences. If you do not agree with these terms, do not interact with this smart contract.\\n\\nWebsite: https://20lab.app/\\nE-mail: contact@20lab.app\\n\\n20lab sp. z o.o.\\nDate: 26.10.2023\\n\\n*/\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./IStorageV2.sol\\\";\\nimport \\\"./IToken.sol\\\";\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./UUPSUpgradeable.sol\\\";\\nimport \\\"./ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract uRegistryV3 is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\n\\n    IStorageV2 public Storage;\\n\\n    // Core price vector to change\\n    uint256 public valueUSD;\\n    // Withdrawer\\n    address public receiver;\\n\\n    // These prices now will be provided in USD for easier calculation\\n    uint256[] public deploymentPrices;\\n    uint256[] public customWatermarkPrices;\\n\\n    // Maps contractType to function signatures used in low-level call to check function existance\\n    mapping(uint16 => string) public functionSig;\\n\\n    // ==================\\n    // ===== EVENTS =====\\n    // ==================\\n\\n    event Deployment(address indexed token, address indexed deployer, uint256 featuresMask, string name, string symbol);\\n    event DeploymentPeripheral(address indexed smartContract, address indexed deployer);\\n    event Withdraw(address indexed recipient, uint256 amount);\\n    event CustomWatermarkPurchased(address indexed purchaser, address indexed token);\\n    event CustomWatermarkPurchasedPeripheral(address indexed purchaser, address indexed smartContract);\\n\\n    // ==========================\\n    // ===== INITIALIZATION =====\\n    // ==========================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address storageContract) initializer public {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __UUPSUpgradeable_init();\\n\\n        Storage = IStorageV2(storageContract);\\n\\n        setPriceUSD(0.0006 ether);\\n        setReceiver(owner());\\n    }\\n\\n    // =====================\\n    // ===== MODIFIERS =====\\n    // =====================\\n\\n    modifier deployerOrOwner(address token) virtual {\\n        require(\\n            Storage.tokenToDeployer(token) != address(0) &&\\n            (Storage.tokenToDeployer(token) == msg.sender || Ownable(token).owner() == msg.sender),\\n            \\\"RegistryV3: You are neither deployer nor current owner of the token\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier deployerOrOwner_per(address smartContract) virtual {\\n        require(\\n            Storage.peripheralToDeployer(smartContract) != address(0) &&\\n            (Storage.peripheralToDeployer(smartContract) == msg.sender || Ownable(smartContract).owner() == msg.sender),\\n            \\\"RegistryV3: You are neither deployer nor current owner of the contract\\\"\\n        );\\n        _;\\n    }\\n\\n    // ==============================\\n    // ===== INTERNAL FUNCTIONS =====\\n    // ==============================\\n\\n    function _hash(string memory x) internal pure virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(x));\\n    }\\n\\n    function _inMask(uint16 value, uint256 mask) internal pure virtual returns (bool) {\\n        return mask & (1 << uint256(value)) != 0;\\n    }\\n\\n    function _convertPrice(uint256 x) internal view virtual returns (uint256) {\\n        return x * valueUSD;\\n    }\\n\\n    function _checkPayment(uint256 price) internal view virtual returns (bool) {\\n        return msg.value >= price;\\n    }\\n\\n    function _checkDeployerCodeRule(address deployer, uint8 deployerRule) internal view virtual returns (bool) {\\n        if (deployerRule == 0) return true;\\n\\n        bool deployedToken = Storage.getDeployerInfo_length(deployer) > 0;\\n        bool deployedPer = Storage.getDeployerInfo_peripheral_length(deployer) > 0;\\n\\n        if (deployerRule == 1) return deployedToken;\\n        if (deployerRule == 2) return deployedPer;\\n        if (deployerRule == 3) return deployedToken && deployedPer;\\n\\n        revert(\\\"RegistryV3: deployerRule is malformed\\\");\\n    }\\n\\n    // This check is not sufficient to check presense of features inside bytecode because checksum can be manually calculated\\n    // Changing name, symbol or featuresMask will impact dashboard functionality for a token owner and recognizing it by dapp\\n    function _verifyChecksum(string memory name, string memory symbol, uint256 featuresMask, bytes memory initdata, bytes32 checksum) internal pure virtual returns (bool) {\\n        return keccak256(abi.encodePacked(name, symbol, featuresMask, initdata)) == checksum;\\n    }\\n\\n    function _verifyChecksum_per(uint16 contractType, bytes memory initdata, bytes32 checksum) internal pure virtual returns (bool) {\\n        return keccak256(abi.encodePacked(contractType, initdata)) == checksum;\\n    }\\n\\n    function _beforeDeployment(string memory name, string memory symbol, uint256 featuresMask, bytes memory initdata, bytes32 checksum) internal view virtual {\\n        require(deploymentPrices.length > 0, \\\"RegistryV3: Price not set\\\");\\n        require(_checkPayment(_convertPrice(deploymentPrices[0])), \\\"RegistryV3: Insufficient funds\\\");\\n        require(_verifyChecksum(name, symbol, featuresMask, initdata, checksum), \\\"RegistryV3: Wrong checksum provided\\\");\\n    }\\n\\n    function _beforeDeployment_code(string memory name, string memory symbol, uint256 featuresMask, bytes memory initdata, bytes32 checksum, string memory discountCode) internal virtual {\\n        require(deploymentPrices.length > 0, \\\"RegistryV3: Price not set\\\");\\n        require(validateHash(_hash(discountCode), 0, msg.sender), \\\"RegistryV3: Discount code is not valid for that transaction\\\");\\n        uint256 discount = _redeemCode(discountCode);\\n\\n        uint256 requiredPrice = _convertPrice(deploymentPrices[0]) - (_convertPrice(deploymentPrices[0]) * discount / 1000);\\n\\n        require(_checkPayment(requiredPrice), \\\"RegistryV3: Insufficient funds\\\");\\n        require(_verifyChecksum(name, symbol, featuresMask, initdata, checksum), \\\"RegistryV3: Wrong checksum provided\\\");\\n    }\\n\\n    function _beforeDeployment_per(uint16 contractType, bytes memory initdata, bytes32 checksum) internal view virtual {\\n        require(deploymentPrices.length > contractType, \\\"RegistryV3: Price not set\\\");\\n        require(_checkPayment(_convertPrice(deploymentPrices[contractType])), \\\"RegistryV3: Insufficient funds\\\");\\n        require(_verifyChecksum_per(contractType, initdata, checksum), \\\"RegistryV3: Wrong checksum provided\\\");\\n    }\\n\\n    function _beforeDeployment_per_code(uint16 contractType, bytes memory initdata, bytes32 checksum, string memory discountCode) internal virtual {\\n        require(deploymentPrices.length > contractType, \\\"RegistryV3: Price not set\\\");\\n        require(validateHash(_hash(discountCode), contractType, msg.sender), \\\"RegistryV3: Discount code is not valid for that transaction\\\");\\n        uint256 discount = _redeemCode(discountCode);\\n\\n        uint256 requiredPrice = _convertPrice(deploymentPrices[contractType]) - (_convertPrice(deploymentPrices[contractType]) * discount / 1000);\\n\\n        require(_checkPayment(requiredPrice), \\\"RegistryV3: Insufficient funds\\\");\\n        require(_verifyChecksum_per(contractType, initdata, checksum), \\\"RegistryV3: Wrong checksum provided\\\");\\n    }\\n\\n    function _afterDeployment(address token, uint256 featuresMask, string memory name, string memory symbol, bytes memory initdata) internal virtual {\\n        // Call initializer\\n        if (initdata.length >= 4) {\\n            (bool success,) = token.call(initdata);\\n            require(success, \\\"RegistryV3: Failed to initialize contract\\\");\\n        }\\n\\n        // Function existance check required to use the right function for deployed contractType\\n        require(_hash(IToken(token).name()) == _hash(name), \\\"RegistryV3: Function name() is malformed\\\");\\n        require(_hash(IToken(token).symbol()) == _hash(symbol), \\\"RegistryV3: Function symbol() is malformed\\\");\\n\\n        Storage.setTokenInfo(token, msg.sender, name, symbol, featuresMask);\\n        Storage.addDeployerInfo(msg.sender, token);\\n        Storage.incrementAmountOfTokens();\\n\\n        emit Deployment(token, msg.sender, featuresMask, name, symbol);\\n    }\\n\\n    function _afterDeployment_per(uint16 contractType, address smartContract, bytes memory initdata) internal virtual {\\n        // Immediately call initializer\\n        if (initdata.length >= 4) {\\n            (bool success1,) = smartContract.call(initdata);\\n            require(success1, \\\"RegistryV3: Failed to initialize contract\\\");\\n        }\\n\\n        // Function existance check required to use the right function for deployed contractType\\n        require(bytes(functionSig[contractType]).length > 0, \\\"RegistryV3: Function sig does not exist\\\");\\n        (bool success2,) = smartContract.call(\\n            abi.encodeWithSignature(functionSig[contractType])\\n        );\\n        require(success2, \\\"RegistryV3: Function malformed in deployed contract, existance check failed\\\");\\n\\n        Storage.setPeripheralInfo(contractType, smartContract, msg.sender);\\n        Storage.addDeployerInfo_peripheral(msg.sender, smartContract);\\n        Storage.incrementAmountOfPeripherals();\\n\\n        emit DeploymentPeripheral(smartContract, msg.sender);\\n    }\\n\\n    function _redeemCode(string memory discountCode) internal virtual returns (uint256) {\\n        Storage.decreaseUses(_hash(discountCode));\\n        Storage.increaseUsesPerAddress(_hash(discountCode), msg.sender);\\n\\n        (uint256 discount,,,,,) = Storage.getCodeData(_hash(discountCode));\\n\\n        return discount;\\n    }\\n\\n    // ==========================\\n    // ===== VIEW FUNCTIONS =====\\n    // ==========================\\n\\n    function getDeploymentPrice(uint16 contractType) public view virtual returns(uint256) {\\n        return _convertPrice(deploymentPrices[contractType]);\\n    }\\n\\n    function getCustomWatermarkPrice(uint16 contractType) public view virtual returns(uint256) {\\n        return _convertPrice(customWatermarkPrices[contractType]);\\n    }\\n\\n    function getTokenInfo(address token) public view virtual returns(address deployer, string memory name, string memory symbol, uint256 featuresMask, bool customWatermark) {\\n        return Storage.getTokenInfo(token);\\n    }\\n\\n    function getPeripheralInfo(address smartContract) public view virtual returns(uint16 contractType, address deployer, bool customWatermark) {\\n        return Storage.getPeripheralInfo(smartContract);\\n    }\\n\\n    function getDeployerInfo(address deployer, uint256 index) public view virtual returns(address) {\\n        return Storage.getDeployerInfo(deployer, index);\\n    }\\n\\n    function getDeployerInfo_peripheral(address deployer, uint256 index) public view virtual returns(address) {\\n        return Storage.getDeployerInfo_peripheral(deployer, index);\\n    }\\n\\n    function getAmountOfTokens() public view virtual returns(uint32) {\\n        return Storage.amountOfTokens();\\n    }\\n\\n    function getAmountOfPeripherals() public view virtual returns(uint32) {\\n        return Storage.amountOfPeripherals();\\n    }\\n\\n    function getAddress(bytes memory bytecode, uint salt) public view virtual returns (address) {\\n        bytes32 hash = keccak256(abi.encodePacked(\\n            bytes1(0xff),\\n            address(this),\\n            salt,\\n            keccak256(bytecode)\\n        ));\\n\\n        return address(uint160(uint(hash)));\\n    }\\n\\n    function getOwner(address token) public view virtual returns (address) {\\n        if (Storage.tokenToDeployer(token) == address(0)) return address(0);\\n        else return Ownable(token).owner();\\n    }\\n\\n    function getOwner_per(address smartContract) public view virtual returns (address) {\\n        if (Storage.peripheralToDeployer(smartContract) == address(0)) return address(0);\\n        else return Ownable(smartContract).owner();\\n    }\\n\\n    function validateHash(bytes32 codeHash, uint16 contractType, address deployer) public view virtual returns (bool) {\\n        (, uint16 usesLeft, uint256 expiration, uint16 usesPerAddress, uint256 affectionMask, uint8 deployerRule) = Storage.getCodeData(codeHash);\\n\\n        return\\n            usesLeft > 0 &&\\n            block.timestamp <= expiration &&\\n            Storage.codeHashToAddressToUsesLeft(codeHash, deployer) < usesPerAddress &&\\n            _inMask(contractType, affectionMask) &&\\n            _checkDeployerCodeRule(deployer, deployerRule);\\n    }\\n\\n    function getDeploymentPriceForHash(uint16 contractType, bytes32 codeHash) public view virtual returns (uint256 requiredPrice) {\\n        (uint256 discount,,,,,) = Storage.getCodeData(codeHash);\\n\\n        requiredPrice = _convertPrice(deploymentPrices[contractType]) - (_convertPrice(deploymentPrices[contractType]) * discount / 1000);\\n    }\\n\\n    function getDiscountCodes(bytes32 codeHash) public view virtual returns (uint256 discount, uint16 usesLeft, uint256 expiration, uint16 usesPerAddress, uint256 affectionMask, uint8 deployerRule) {\\n        (discount, usesLeft, expiration, usesPerAddress, affectionMask, deployerRule) = Storage.getCodeData(codeHash);\\n    }\\n\\n    function getCustomWatermarkPriceFor(uint16 contractType, address target) public view virtual returns (uint256 requiredPrice) {\\n        bytes32 codeHash = Storage.getCodeHashUsedFor(target);\\n\\n        if (codeHash > 0) {\\n            (uint256 discount,,,,,) = Storage.getCodeData(codeHash);\\n            requiredPrice = _convertPrice(customWatermarkPrices[contractType]) - (_convertPrice(customWatermarkPrices[contractType]) * discount / 1000);\\n        } else {\\n            requiredPrice = _convertPrice(customWatermarkPrices[contractType]);\\n        }\\n    }\\n\\n    // ============================\\n    // ===== PUBLIC FUNCTIONS =====\\n    // ============================\\n\\n    // Token deployment using bytecode with CREATE2 opcode\\n    function deploy2(string memory name, string memory symbol, uint256 featuresMask, bytes memory bytecode, bytes32 checksum, uint salt, address targetAddress, bytes memory initdata)\\n        external payable nonReentrant virtual returns (address token) {\\n        \\n        _beforeDeployment(name, symbol, featuresMask, initdata, checksum);\\n\\n        require(getAddress(bytecode, salt) == targetAddress, \\\"RegistryV3: Expected address is different for that combination of bytecode and salt\\\");\\n\\n        assembly {\\n            token := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n            if iszero(extcodesize(token)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        _afterDeployment(token, featuresMask, name, symbol, initdata);\\n    }\\n\\n    // Token deployment using bytecode with CREATE2 opcode + promo code\\n    function deploy2_code(string memory name, string memory symbol, uint256 featuresMask, bytes memory bytecode, bytes32 checksum, uint salt, address targetAddress, bytes memory initdata, string memory discountCode)\\n        external payable nonReentrant virtual returns (address token) {\\n        \\n        _beforeDeployment_code(name, symbol, featuresMask, initdata, checksum, discountCode);\\n\\n        require(getAddress(bytecode, salt) == targetAddress, \\\"RegistryV3: Expected address is different for that combination of bytecode and salt\\\");\\n\\n        assembly {\\n            token := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n            if iszero(extcodesize(token)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        Storage.setCodeHashUsedFor(token, _hash(discountCode));\\n\\n        _afterDeployment(token, featuresMask, name, symbol, initdata);\\n    }\\n\\n    // Owner or deployer of the token can purchase custom watermark extension which will be checked and executed before validation on block explorer\\n    function purchaseCustomWatermark(address token) external payable nonReentrant deployerOrOwner(token) virtual {\\n        require(_checkPayment(getCustomWatermarkPriceFor(0, token)), \\\"RegistryV3: Insufficient funds\\\");\\n\\n        Storage.setCustomWatermark(token, true);\\n\\n        emit CustomWatermarkPurchased(msg.sender, token);\\n    }\\n\\n    // Peripheral contract deployment using bytecode with CREATE2 opcode\\n    function deploy2_per(uint16 contractType, bytes memory bytecode, bytes32 checksum, uint salt, address targetAddress, bytes memory initdata)\\n        external payable nonReentrant virtual returns (address smartContract) {\\n        \\n        require(contractType > 0, \\\"RegistryV3: This contractType is reserved for token, use deploy2() instead\\\");\\n        _beforeDeployment_per(contractType, initdata, checksum);\\n\\n        require(getAddress(bytecode, salt) == targetAddress, \\\"RegistryV3: Expected address is different for that combination of bytecode and salt\\\");\\n\\n        assembly {\\n            smartContract := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n            if iszero(extcodesize(smartContract)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        _afterDeployment_per(contractType, smartContract, initdata);\\n    }\\n\\n    // Peripheral contract deployment using bytecode with CREATE2 opcode + promo code\\n    function deploy2_per_code(uint16 contractType, bytes memory bytecode, bytes32 checksum, uint salt, address targetAddress, bytes memory initdata, string memory discountCode)\\n        external payable nonReentrant virtual returns (address smartContract) {\\n        \\n        require(contractType > 0, \\\"RegistryV3: This contractType is reserved for token, use deploy2_code() instead\\\");\\n        _beforeDeployment_per_code(contractType, initdata, checksum, discountCode);\\n\\n        require(getAddress(bytecode, salt) == targetAddress, \\\"RegistryV3: Expected address is different for that combination of bytecode and salt\\\");\\n\\n        assembly {\\n            smartContract := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n            if iszero(extcodesize(smartContract)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        Storage.setCodeHashUsedFor(smartContract, _hash(discountCode));\\n\\n        _afterDeployment_per(contractType, smartContract, initdata);\\n    }\\n\\n    function purchaseCustomWatermark_per(address smartContract) external payable nonReentrant deployerOrOwner_per(smartContract) virtual {\\n        require(_checkPayment(getCustomWatermarkPriceFor(Storage.peripheralToContractType(smartContract), smartContract)), \\\"RegistryV3: Insufficient funds\\\");\\n\\n        Storage.setCustomWatermark_peripheral(smartContract, true);\\n\\n        emit CustomWatermarkPurchasedPeripheral(msg.sender, smartContract);\\n    }\\n    \\n    // ===========================\\n    // ===== OWNER FUNCTIONS =====\\n    // ===========================\\n\\n    function setReceiver(address _receiver) public onlyOwner virtual {\\n        receiver = _receiver;\\n    }\\n\\n    function setPriceUSD(uint256 _valueUSD) public onlyOwner virtual {\\n        valueUSD = _valueUSD;\\n    }\\n\\n    function setPrices(uint256[] memory _deploymentPrices, uint256[] memory _customWatermarkPrices) public onlyOwner virtual {\\n        deploymentPrices = _deploymentPrices;\\n        customWatermarkPrices = _customWatermarkPrices;\\n    }\\n\\n    function withdraw() external onlyOwner virtual {\\n        uint256 amount2Withdraw = address(this).balance;\\n\\n        (bool success,) = payable(receiver).call{value: amount2Withdraw}(\\\"\\\");\\n\\n        if (success) {\\n            emit Withdraw(receiver, amount2Withdraw);\\n        }\\n    }\\n\\n    function manualTokenStore(address token, address deployer, string memory name, string memory symbol, uint256 featuresMask, bool customWatermark) external onlyOwner virtual {\\n        Storage.setTokenInfo(token, deployer, name, symbol, featuresMask);\\n        Storage.addDeployerInfo(deployer, token);\\n        Storage.incrementAmountOfTokens();\\n        Storage.setCustomWatermark(token, customWatermark);\\n    }\\n\\n    function setFunctionSig(uint16 contractType, string memory sig) external onlyOwner virtual {\\n        require(contractType > 0, \\\"RegistryV3: Cannot set function check for token\\\");\\n\\n        functionSig[contractType] = sig;\\n    }\\n\\n    function editCodes(\\n            bytes32[] memory codeHash,\\n            uint256[] memory discount,\\n            uint16[] memory usesLeft,\\n            uint256[] memory expiration,\\n            uint16[] memory usesPerAddress,\\n            uint256[] memory affectionMask,\\n            uint8[] memory deployerRule\\n        ) public onlyOwner virtual {\\n\\n        Storage.editDiscountCodes(codeHash, discount, usesLeft, expiration, usesPerAddress, affectionMask, deployerRule);\\n    }\\n\\n    function removeCodes(bytes32[] memory codeHash) public onlyOwner virtual {\\n        Storage.removeDiscountCodes(codeHash);\\n    }\\n    \\n    function _authorizeUpgrade(address newImplementation) internal onlyOwner override {}\\n}\"\r\n    },\r\n    \"IStorageV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\npragma solidity 0.8.7;\\n\\ninterface IStorageV2 {\\n    \\n    function REGISTRY_ROLE() external view returns (bytes32);\\n\\n    function amountOfTokens() external view returns (uint32);\\n\\n    function tokenToDeployer(address) external view returns (address);\\n    function tokenToName(address) external view returns (string memory);\\n    function tokenToSymbol(address) external view returns (string memory);\\n    function tokenToFeaturesMask(address) external view returns (uint256);\\n    function tokenToCustomWatermark(address) external view returns (bool);\\n\\n    function getDeployerInfo(address, uint256) external view returns (address);\\n\\n    function getTokenInfo(address) external view returns (address deployer, string memory name, string memory symbol, uint256 featuresMask, bool customWatermark);\\n\\n    function setTokenInfo(address token, address deployer, string memory name, string memory symbol, uint256 featuresMask) external;\\n    function setCustomWatermark(address token, bool active) external;\\n    function addDeployerInfo(address deployer, address token) external;\\n    function incrementAmountOfTokens() external;\\n\\n    // V2\\n\\n    function codeHashToAddressToUsesLeft(bytes32, address) external view returns(uint16);\\n    function contractToCodeHash(address) external view returns (bytes32);\\n    function amountOfPeripherals() external view returns (uint32);\\n\\n    function peripheralToDeployer(address) external view returns (address);\\n    function peripheralToContractType(address) external view returns (uint16);\\n    function peripheralToCustomWatermark(address) external view returns (bool);\\n\\n    function getCodeData(bytes32 codeHash) external view returns(uint256 discount, uint16 usesLeft, uint256 expiration, uint16 usesPerAddress, uint256 affectionMask, uint8 deployerRule);\\n    function getCodeHashUsedFor(address token) external view returns(bytes32);\\n    function getPeripheralInfo(address smartContract) external view returns (uint16 contractType, address deployer, bool customWatermark);\\n    function getDeployerInfo_length(address deployer) external view returns (uint256);\\n    function getDeployerInfo_peripheral(address deployer, uint256 index) external view returns(address);\\n    function getDeployerInfo_peripheral_length(address deployer) external view returns(uint256);\\n\\n    function setCodeHashUsedFor(address target, bytes32 codeHash) external;\\n    function decreaseUses(bytes32 codeHash) external;\\n    function increaseUsesPerAddress(bytes32 codeHash, address deployer) external;\\n\\n    function editDiscountCodes(\\n        bytes32[] memory codeHash,\\n        uint256[] memory discount,\\n        uint16[] memory usesLeft,\\n        uint256[] memory expiration,\\n        uint16[] memory usesPerAddress,\\n        uint256[] memory affectionMask,\\n        uint8[] memory deployerRule\\n    ) external;\\n    function removeDiscountCodes(bytes32[] memory codeHash) external;\\n\\n    function setPeripheralInfo(uint16 contractType, address smartContract, address deployer) external;\\n    function setCustomWatermark_peripheral(address smartContract, bool active) external;\\n    function addDeployerInfo_peripheral(address deployer, address smartContract) external;\\n    function incrementAmountOfPeripherals() external;\\n}\"\r\n    },\r\n    \"IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\npragma solidity 0.8.7;\\n\\ninterface IToken {\\n    \\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"./ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IBeaconUpgradeable.sol\\\";\\nimport \\\"./IERC1967Upgradeable.sol\\\";\\nimport \\\"./draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"./StorageSlotUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CustomWatermarkPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"CustomWatermarkPurchasedPeripheral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"featuresMask\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"Deployment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"DeploymentPeripheral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Storage\",\"outputs\":[{\"internalType\":\"contract IStorageV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customWatermarkPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"featuresMask\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initdata\",\"type\":\"bytes\"}],\"name\":\"deploy2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"featuresMask\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initdata\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"discountCode\",\"type\":\"string\"}],\"name\":\"deploy2_code\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initdata\",\"type\":\"bytes\"}],\"name\":\"deploy2_per\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initdata\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"discountCode\",\"type\":\"string\"}],\"name\":\"deploy2_per_code\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deploymentPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"codeHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"discount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"usesLeft\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expiration\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"usesPerAddress\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"affectionMask\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"deployerRule\",\"type\":\"uint8[]\"}],\"name\":\"editCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"functionSig\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountOfPeripherals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountOfTokens\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"}],\"name\":\"getCustomWatermarkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getCustomWatermarkPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDeployerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDeployerInfo_peripheral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"}],\"name\":\"getDeploymentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"getDeploymentPriceForHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"getDiscountCodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"usesLeft\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"usesPerAddress\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"affectionMask\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"deployerRule\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"getOwner_per\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"getPeripheralInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"customWatermark\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"featuresMask\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"customWatermark\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"featuresMask\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"customWatermark\",\"type\":\"bool\"}],\"name\":\"manualTokenStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"purchaseCustomWatermark\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"purchaseCustomWatermark_per\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"codeHash\",\"type\":\"bytes32[]\"}],\"name\":\"removeCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"sig\",\"type\":\"string\"}],\"name\":\"setFunctionSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueUSD\",\"type\":\"uint256\"}],\"name\":\"setPriceUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_deploymentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_customWatermarkPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"contractType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"validateHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "uRegistryV3", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8b7dfaf6fd0d7095091150522fb299c154fb332c0cd1797e9cff81b64213fc95"}