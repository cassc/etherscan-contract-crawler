{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/EnsoShortcutRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { EnsoShortcuts } from \\\"./EnsoShortcuts.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nstruct Token {\\n    IERC20 token;\\n    uint256 amount;\\n}\\n\\ncontract EnsoShortcutRouter {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant _ETH = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    EnsoShortcuts public immutable enso;\\n\\n    error WrongValue(uint256 value, uint256 amount);\\n    error AmountTooLow(address token);\\n    error Duplicate(address token);\\n\\n    constructor(address owner_) {\\n        enso = new EnsoShortcuts(owner_, address(this));\\n    }\\n\\n    // @notice Route a single token via an Enso Shortcut\\n    // @param tokenIn The address of the token to send\\n    // @param amountIn The amount of the token to send\\n    // @param commands An array of bytes32 values that encode calls\\n    // @param state An array of bytes that are used to generate call data for each command\\n    function routeSingle(\\n        IERC20 tokenIn,\\n        uint256 amountIn,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) public payable returns (bytes[] memory returnData) {\\n        if (tokenIn == _ETH) {\\n            if (msg.value != amountIn) revert WrongValue(msg.value, amountIn);\\n        } else {\\n            if (msg.value != 0) revert WrongValue(msg.value, 0);\\n            tokenIn.safeTransferFrom(msg.sender, address(enso), amountIn);\\n        }\\n        returnData = enso.executeShortcut{value: msg.value}(commands, state);\\n    }\\n\\n    // @notice Route multiple tokens via an Enso Shortcut\\n    // @param tokensIn The addresses and amounts of the tokens to send\\n    // @param commands An array of bytes32 values that encode calls\\n    // @param state An array of bytes that are used to generate call data for each command\\n    function routeMulti(\\n        Token[] calldata tokensIn,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) public payable returns (bytes[] memory returnData) {\\n        bool ethFlag;\\n        IERC20 tokenIn;\\n        uint256 amountIn;\\n        for (uint256 i; i < tokensIn.length; ++i) {\\n            tokenIn = tokensIn[i].token;\\n            amountIn = tokensIn[i].amount;\\n            if (tokenIn == _ETH) {\\n                if (ethFlag) revert Duplicate(address(_ETH));\\n                ethFlag = true;\\n                if (msg.value != amountIn) revert WrongValue(msg.value, amountIn);\\n            } else {\\n                tokenIn.safeTransferFrom(msg.sender, address(enso), amountIn);\\n            }\\n        }\\n        if (!ethFlag && msg.value != 0) revert WrongValue(msg.value, 0);\\n        \\n        returnData = enso.executeShortcut{value: msg.value}(commands, state);\\n    }\\n\\n    // @notice Route a single token via an Enso Shortcut and revert if there is insufficient token received\\n    // @param tokenIn The address of the token to send\\n    // @param tokenOut The address of the token to receive\\n    // @param amountIn The amount of the token to send\\n    // @param minAmountOut The minimum amount of the token to receive\\n    // @param receiver The address of the wallet that will receive the tokens\\n    // @param commands An array of bytes32 values that encode calls\\n    // @param state An array of bytes that are used to generate call data for each command\\n    function safeRouteSingle(\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address receiver,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable returns (bytes[] memory returnData) {\\n        uint256 balance = tokenOut == _ETH ? receiver.balance : tokenOut.balanceOf(receiver);\\n        returnData = routeSingle(tokenIn, amountIn, commands, state);\\n        uint256 amountOut;\\n        if (tokenOut == _ETH) {\\n            amountOut = receiver.balance - balance;\\n        } else {\\n            amountOut = tokenOut.balanceOf(receiver) - balance;\\n        }\\n        if (amountOut < minAmountOut) revert AmountTooLow(address(tokenOut));\\n    }\\n\\n    // @notice Route multiple tokens via an Enso Shortcut and revert if there is insufficient tokens received\\n    // @param tokensIn The addresses and amounts of the tokens to send\\n    // @param tokensOut The addresses and minimum amounts of the tokens to receive\\n    // @param receiver The address of the wallet that will receive the tokens\\n    // @param commands An array of bytes32 values that encode calls\\n    // @param state An array of bytes that are used to generate call data for each command\\n    function safeRouteMulti(\\n        Token[] calldata tokensIn,\\n        Token[] calldata tokensOut,\\n        address receiver,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable returns (bytes[] memory returnData) {\\n        uint256 length = tokensOut.length;\\n        uint256[] memory balances = new uint256[](length);\\n\\n        IERC20 tokenOut;\\n        for (uint256 i; i < length; ++i) {\\n            tokenOut = tokensOut[i].token;\\n            balances[i] = tokenOut == _ETH ? receiver.balance : tokenOut.balanceOf(receiver);\\n        }\\n\\n        returnData = routeMulti(tokensIn, commands, state);\\n\\n        uint256 amountOut;\\n        for (uint256 i; i < length; ++i) {\\n            tokenOut = tokensOut[i].token;\\n            if (tokenOut == _ETH) {\\n                amountOut = receiver.balance - balances[i];\\n            } else {\\n                amountOut = tokenOut.balanceOf(receiver) - balances[i];\\n            }\\n            if (amountOut < tokensOut[i].amount) revert AmountTooLow(address(tokenOut));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/EnsoShortcuts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { VM } from \\\"enso-weiroll/VM.sol\\\";\\nimport { MinimalWallet } from \\\"shortcuts-contracts/wallet/MinimalWallet.sol\\\";\\nimport { AccessController } from \\\"shortcuts-contracts/access/AccessController.sol\\\";\\n\\ncontract EnsoShortcuts is VM, MinimalWallet, AccessController {\\n    address public executor;\\n\\n    constructor(address owner_, address executor_) {\\n        _setPermission(OWNER_ROLE, owner_, true);\\n        executor = executor_;\\n    }\\n\\n    // @notice Execute a shortcut\\n    // @param commands An array of bytes32 values that encode calls\\n    // @param state An array of bytes that are used to generate call data for each command\\n    function executeShortcut(\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable returns (bytes[] memory) {\\n        // we could use the AccessController here to check if the msg.sender is the executor address\\n        // but as it's a hot path we do a less gas intensive check\\n        if (msg.sender != executor) revert NotPermitted();\\n        return _execute(commands, state);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/enso-weiroll/contracts/VM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00; // Delegate call not currently supported\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_DATA = 0x20;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\\n\\n    uint256 constant SHORT_COMMAND_FILL =\\n        0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n        internal\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outData;\\n\\n        uint256 commandsLength = commands.length;\\n        uint256 indicesLength;\\n        for (uint256 i; i < commandsLength; i = _uncheckedIncrement(i)) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                i = _uncheckedIncrement(i);\\n                indices = commands[i];\\n                indicesLength = 32;\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n                indicesLength = 6;\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outData) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices,\\n                            indicesLength\\n                        )\\n                        : state[\\n                            uint8(bytes1(indices)) &\\n                            CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .staticcall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices,\\n                                indicesLength\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                bytes memory v = state[\\n                    uint8(bytes1(indices)) &\\n                    CommandBuilder.IDX_VALUE_MASK\\n                ];\\n                require(v.length == 32, \\\"Value must be 32 bytes\\\");\\n                uint256 callEth = uint256(bytes32(v));\\n                (success, outData) = address(uint160(uint256(command))).call{ // target\\n                    value: callEth\\n                }(\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices << 8, // skip value input\\n                            indicesLength - 1 // max indices length reduced by value input\\n                        )\\n                        : state[\\n                            uint8(bytes1(indices << 8)) & // first byte after value input\\n                            CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                string memory message = \\\"Unknown\\\";\\n                if (outData.length > 68) {\\n                    // This might be an error message, parse the outData\\n                    // Estimate the bytes length of the possible error message\\n                    uint256 estimatedLength = _estimateBytesLength(outData, 68);\\n                    // Remove selector. First 32 bytes should be a pointer that indicates the start of data in memory\\n                    assembly {\\n                        outData := add(outData, 4)\\n                    }\\n                    uint256 pointer = uint256(bytes32(outData));\\n                    if (pointer == 32) {\\n                        // Remove pointer. If it is a string, the next 32 bytes will hold the size\\n                        assembly {\\n                            outData := add(outData, 32)\\n                        }\\n                        uint256 size = uint256(bytes32(outData));\\n                        // If the size variable is the same as the estimated bytes length, we can be fairly certain\\n                        // this is a dynamic string, so convert the bytes to a string and emit the message. While an\\n                        // error function with 3 static parameters is capable of producing a similar output, there is\\n                        // low risk of a contract unintentionally emitting a message.\\n                        if (size == estimatedLength) {\\n                            // Remove size. The remaining data should be the string content\\n                            assembly {\\n                                outData := add(outData, 32)\\n                            }\\n                            message = string(outData);\\n                        }\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: flags & FLAG_EXTENDED_COMMAND == 0\\n                        ? i\\n                        : i - 1,\\n                    target: address(uint160(uint256(command))),\\n                    message: message\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outData);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outData);\\n            }\\n        }\\n        return state;\\n    }\\n\\n    function _estimateBytesLength(bytes memory data, uint256 pos) internal pure returns (uint256 estimate) {\\n        uint256 length = data.length;\\n        estimate = length - pos; // Assume length equals alloted space\\n        for (uint256 i = pos; i < length; ) {\\n            if (data[i] == 0) {\\n                // Zero bytes found, adjust estimated length\\n                estimate = i - pos;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _uncheckedIncrement(uint256 i) private pure returns (uint256) {\\n        unchecked {\\n            ++i;\\n        }\\n        return i;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/contracts/wallet/MinimalWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"../access/ACL.sol\\\";\\nimport \\\"../access/Roles.sol\\\";\\n\\ncontract MinimalWallet is ACL, Roles, ERC721Holder, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    enum Protocol {\\n        ETH,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct TransferNote {\\n        Protocol protocol;\\n        address token;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    struct ApprovalNote {\\n        Protocol protocol;\\n        address token;\\n        address[] operators;\\n    }\\n\\n    error WithdrawFailed();\\n    error InvalidArrayLength();\\n\\n    ////////////////////////////////////////////////////\\n    // External functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    // @notice Withdraw an array of assets\\n    // @dev Works for ETH, ERC20s, ERC721s, and ERC1155s\\n    // @param notes A tuple that contains the protocol id, token address, array of ids and amounts\\n    function withdraw(TransferNote[] calldata notes) external isPermitted(OWNER_ROLE) {\\n        TransferNote memory note;\\n        Protocol protocol;\\n        uint256[] memory ids;\\n        uint256[] memory amounts;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ETH) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawETH(amounts[0]);\\n            } else if (protocol == Protocol.ERC20) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawERC20(IERC20(note.token), amounts[0]);\\n            } else if (protocol == Protocol.ERC721) {\\n                ids = note.ids;\\n                _withdrawERC721s(IERC721(note.token), ids);\\n            } else if (protocol == Protocol.ERC1155) {\\n                ids = note.ids;\\n                amounts = note.amounts;\\n                _withdrawERC1155s(IERC1155(note.token), ids, amounts);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Withdraw ETH from this contract to the msg.sender\\n    // @param amount The amount of ETH to be withdrawn\\n    function withdrawETH(uint256 amount) external isPermitted(OWNER_ROLE) {\\n        _withdrawETH(amount);\\n    }\\n\\n    // @notice Withdraw ERC20s\\n    // @param erc20s An array of erc20 addresses\\n    // @param amounts An array of amounts for each erc20\\n    function withdrawERC20s(\\n        IERC20[] calldata erc20s,\\n        uint256[] calldata amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        uint256 length = erc20s.length;\\n        if (amounts.length != length) revert InvalidArrayLength();\\n        for (uint256 i; i < length; ) {\\n            _withdrawERC20(erc20s[i], amounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Withdraw multiple ERC721 ids for a single ERC721 contract\\n    // @param erc721 The address of the ERC721 contract\\n    // @param ids An array of ids that are to be withdrawn\\n    function withdrawERC721s(\\n        IERC721 erc721,\\n        uint256[] calldata ids\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC721s(erc721, ids);\\n    }\\n\\n    // @notice Withdraw multiple ERC1155 ids for a single ERC1155 contract\\n    // @param erc1155 The address of the ERC155 contract\\n    // @param ids An array of ids that are to be withdrawn\\n    // @param amounts An array of amounts per id\\n    function withdrawERC1155s(\\n        IERC1155 erc1155,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC1155s(erc1155, ids, amounts);\\n    }\\n\\n    // @notice Revoke approval on an array of assets and operators\\n    // @dev Works for ERC20s, ERC721s, and ERC1155s\\n    // @param notes A tuple that contains the protocol id, token address, and array of operators\\n    function revokeApprovals(ApprovalNote[] calldata notes) external isPermitted(OWNER_ROLE) {\\n        ApprovalNote memory note;\\n        Protocol protocol;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ERC20) {\\n                _revokeERC20Approvals(IERC20(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC721) {\\n                _revokeERC721Approvals(IERC721(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC1155) {\\n                _revokeERC1155Approvals(IERC1155(note.token), note.operators);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Revoke approval of an ERC20 for an array of operators\\n    // @param erc20 The address of the ERC20 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC20Approvals(\\n        IERC20 erc20,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC20Approvals(erc20, operators);\\n    }\\n\\n    // @notice Revoke approval of an ERC721 for an array of operators\\n    // @param erc721 The address of the ERC721 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC721Approvals(\\n        IERC721 erc721,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC721Approvals(erc721, operators);\\n    }\\n\\n    // @notice Revoke approval of an ERC1155 for an array of operators\\n    // @param erc1155 The address of the ERC1155 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC1155Approvals(\\n        IERC1155 erc1155,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC1155Approvals(erc1155, operators);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Internal functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    function _withdrawETH(uint256 amount) internal {\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n    }\\n\\n    function _withdrawERC20(IERC20 erc20, uint256 amount) internal {\\n        erc20.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _withdrawERC721s(IERC721 erc721, uint256[] memory ids) internal {\\n        uint256 length = ids.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.safeTransferFrom(address(this), msg.sender, ids[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _withdrawERC1155s(IERC1155 erc1155, uint256[] memory ids, uint256[] memory amounts) internal {\\n        // safeBatchTransferFrom will validate the array lengths\\n        erc1155.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    function _revokeERC20Approvals(IERC20 erc20, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc20.safeApprove(operators[i], 0);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _revokeERC721Approvals(IERC721 erc721, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.setApprovalForAll(operators[i], false);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _revokeERC1155Approvals(IERC1155 erc1155, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc1155.setApprovalForAll(operators[i], false);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Fallback functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/contracts/access/AccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"./ACL.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\n// @notice The OWNER_ROLE must be set in the importing contract's constructor or initialize function\\nabstract contract AccessController is ACL, Roles {\\n    using StorageAPI for bytes32;\\n\\n    event PermissionSet(bytes32 role, address account, bool permission);\\n\\n    error UnsafeSetting();\\n    error InvalidAccount();\\n\\n    // @notice Sets user permission over a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @param permission The permission status\\n    function setPermission(\\n        bytes32 role,\\n        address account,\\n        bool permission\\n    ) external isPermitted(OWNER_ROLE) {\\n        if (account == address(0)) revert InvalidAccount();\\n        if (role == OWNER_ROLE && account == msg.sender && permission == false)\\n            revert UnsafeSetting();\\n        _setPermission(role, account, permission);\\n    }\\n\\n    // @notice Internal function to set user permission over a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @param permission The permission status\\n    function _setPermission(bytes32 role, address account, bool permission) internal {\\n        bytes32 key = _getKey(role, account);\\n        key.setBool(permission);\\n        emit PermissionSet(role, account, permission);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/enso-weiroll/contracts/CommandBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.16;\\n\\nlibrary CommandBuilder {\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n    uint256 constant IDX_ARRAY_START = 0xfd;\\n    uint256 constant IDX_TUPLE_START = 0xfc;\\n    uint256 constant IDX_DYNAMIC_END = 0xfb;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices,\\n        uint256 indicesLength\\n    ) internal view returns (bytes memory ret) {\\n        uint256 idx; // The current command index\\n        uint256 offsetIdx; // The index of the current free offset\\n\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        uint256[] memory dynamicLengths = new uint256[](10); // Optionally store the length of all dynamic types (a command cannot fit more than 10 dynamic types)\\n\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < indicesLength; ) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) {\\n                indicesLength = i;\\n                break;\\n            }\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    unchecked {\\n                        count += stateData.length;\\n                    }\\n                } else {\\n                    (dynamicLengths, offsetIdx, count, i) = setupDynamicType(\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        idx,\\n                        offsetIdx,\\n                        count,\\n                        i\\n                    );\\n                }\\n            } else {\\n                count = setupStaticVariable(state, count, idx);\\n            }\\n            unchecked {\\n                free += 32;\\n                ++i;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        offsetIdx = 0;\\n        // Use count to track current memory slot\\n        assembly {\\n            count := add(ret, 36)\\n        }\\n        for (uint256 i; i < indicesLength; ) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(count, free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    unchecked {\\n                        free += stateData.length - 32;\\n                    }\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(count, free)\\n                    }\\n                    (offsetIdx, free, i, ) = encodeDynamicArray(\\n                        ret,\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        offsetIdx,\\n                        free,\\n                        i\\n                    );\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(count, free)\\n                    }\\n                    (offsetIdx, free, i, ) = encodeDynamicTuple(\\n                        ret,\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        offsetIdx,\\n                        free,\\n                        i\\n                    );\\n                } else {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Put a pointer in the current slot and write the data to first free slot\\n                    assembly {\\n                        mstore(count, free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        free += argLen;\\n                    }\\n                }\\n            } else {\\n                // Fixed length data (length previously checked to be 32 bytes)\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write the data to current slot\\n                assembly {\\n                    mstore(count, mload(add(stateVar, 32)))\\n                }\\n            }\\n            unchecked {\\n                count += 32;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setupStaticVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256 newCount) {\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Static state variables must be 32 bytes\\\"\\n        );\\n        unchecked {\\n            newCount = count + 32;\\n        }\\n    }\\n\\n    function setupDynamicVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256 newCount) {\\n        bytes memory arg = state[idx & IDX_VALUE_MASK];\\n        // Validate the length of the data in state is a multiple of 32\\n        uint256 argLen = arg.length;\\n        require(\\n            argLen != 0 && argLen % 32 == 0,\\n            \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n        );\\n        // Add the length of the value, rounded up to the next word boundary, plus space for pointer\\n        unchecked {\\n            newCount = count + argLen + 32;\\n        }\\n    }\\n\\n    function setupDynamicType(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 idx,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 index\\n    ) internal view returns (\\n        uint256[] memory newDynamicLengths,\\n        uint256 newOffsetIdx,\\n        uint256 newCount,\\n        uint256 newIndex\\n    ) {\\n        if (idx == IDX_ARRAY_START) {\\n            (newDynamicLengths, newOffsetIdx, newCount, newIndex) = setupDynamicArray(\\n                state,\\n                indices,\\n                dynamicLengths,\\n                offsetIdx,\\n                count,\\n                index\\n            );\\n        } else if (idx == IDX_TUPLE_START) {\\n            (newDynamicLengths, newOffsetIdx, newCount, newIndex) = setupDynamicTuple(\\n                state,\\n                indices,\\n                dynamicLengths,\\n                offsetIdx,\\n                count,\\n                index\\n            );\\n        } else {\\n            newDynamicLengths = dynamicLengths;\\n            newOffsetIdx = offsetIdx;\\n            newIndex = index;\\n            newCount = setupDynamicVariable(state, count, idx);\\n        }\\n    }\\n\\n    function setupDynamicArray(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 index\\n    ) internal view returns (\\n        uint256[] memory newDynamicLengths,\\n        uint256 newOffsetIdx,\\n        uint256 newCount,\\n        uint256 newIndex\\n    ) {\\n        // Current idx is IDX_ARRAY_START, next idx will contain the array length\\n        unchecked {\\n            newIndex = index + 1;\\n            newCount = count + 32;\\n        }\\n        uint256 idx = uint8(indices[newIndex]);\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Array length must be 32 bytes\\\"\\n        );\\n        (newDynamicLengths, newOffsetIdx, newCount, newIndex) = setupDynamicTuple(\\n            state,\\n            indices,\\n            dynamicLengths,\\n            offsetIdx,\\n            newCount,\\n            newIndex\\n        );\\n    }\\n\\n    function setupDynamicTuple(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 index\\n    ) internal view returns (\\n        uint256[] memory newDynamicLengths,\\n        uint256 newOffsetIdx,\\n        uint256 newCount,\\n        uint256 newIndex\\n    ) {\\n        uint256 idx;\\n        uint256 offset;\\n        newDynamicLengths = dynamicLengths;\\n        // Progress to first index of the data and progress the next offset idx\\n        unchecked {\\n            newIndex = index + 1;\\n            newOffsetIdx = offsetIdx + 1;\\n            newCount = count + 32;\\n        }\\n        while (newIndex < 32) {\\n            idx = uint8(indices[newIndex]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    newDynamicLengths[offsetIdx] = offset;\\n                    // explicit return saves gas \u00af\\\\_(\u30c4)_/\u00af\\n                    return (newDynamicLengths, newOffsetIdx, newCount, newIndex);\\n                } else {\\n                    require(idx != IDX_USE_STATE, \\\"Cannot use state from inside dynamic type\\\");\\n                    (newDynamicLengths, newOffsetIdx, newCount, newIndex) = setupDynamicType(\\n                        state,\\n                        indices,\\n                        newDynamicLengths,\\n                        idx,\\n                        newOffsetIdx,\\n                        newCount,\\n                        newIndex\\n                    );\\n                }\\n            } else {\\n                newCount = setupStaticVariable(state, newCount, idx);\\n            }\\n            unchecked {\\n                offset += 32;\\n                ++newIndex;\\n            }\\n        }\\n        revert(\\\"Dynamic type was not properly closed\\\");\\n    }\\n\\n    function encodeDynamicArray(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 offsetIdx,\\n        uint256 currentSlot,\\n        uint256 index\\n    ) internal view returns (\\n        uint256 newOffsetIdx,\\n        uint256 newSlot,\\n        uint256 newIndex,\\n        uint256 length\\n    ) {\\n        // Progress to array length metadata\\n        unchecked {\\n            newIndex = index + 1;\\n            newSlot = currentSlot + 32;\\n        }\\n        // Encode array length\\n        uint256 idx = uint8(indices[newIndex]);\\n        // Array length value previously checked to be 32 bytes\\n        bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n        assembly {\\n            mstore(add(add(ret, 36), currentSlot), mload(add(stateVar, 32)))\\n        }\\n        (newOffsetIdx, newSlot, newIndex, length) = encodeDynamicTuple(\\n            ret,\\n            state,\\n            indices,\\n            dynamicLengths,\\n            offsetIdx,\\n            newSlot,\\n            newIndex\\n        );\\n        unchecked {\\n            length += 32; // Increase length to account for array length metadata\\n        }\\n    }\\n\\n    function encodeDynamicTuple(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 offsetIdx,\\n        uint256 currentSlot,\\n        uint256 index\\n    ) internal view returns (\\n        uint256 newOffsetIdx,\\n        uint256 newSlot,\\n        uint256 newIndex,\\n        uint256 length\\n    ) {\\n        uint256 idx;\\n        uint256 argLen;\\n        uint256 freePointer = dynamicLengths[offsetIdx]; // The pointer to the next free slot\\n        unchecked {\\n            newSlot = currentSlot + freePointer; // Update the next slot\\n            newOffsetIdx = offsetIdx + 1; // Progress to next offsetIdx\\n            newIndex = index + 1; // Progress to first index of the data\\n        }\\n        // Shift currentSlot to correct location in memory\\n        assembly {\\n            currentSlot := add(add(ret, 36), currentSlot)\\n        }\\n        while (newIndex < 32) {\\n            idx = uint8(indices[newIndex]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    break;\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(currentSlot, freePointer)\\n                    }\\n                    (newOffsetIdx, newSlot, newIndex, argLen) = encodeDynamicArray(\\n                        ret,\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        newOffsetIdx,\\n                        newSlot,\\n                        newIndex\\n                    );\\n                    unchecked {\\n                        freePointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                    }\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(currentSlot, freePointer)\\n                    }\\n                    (newOffsetIdx, newSlot, newIndex, argLen) = encodeDynamicTuple(\\n                        ret,\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        newOffsetIdx,\\n                        newSlot,\\n                        newIndex\\n                    );\\n                    unchecked {\\n                        freePointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                    }\\n                } else  {\\n                    // Variable length data\\n                    argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(currentSlot, freePointer)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        newSlot + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        newSlot += argLen;\\n                        freePointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                    }\\n                }\\n            } else {\\n                // Fixed length data (length previously checked to be 32 bytes)\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write to first free slot\\n                assembly {\\n                    mstore(currentSlot, mload(add(stateVar, 32)))\\n                }\\n                unchecked {\\n                    length += 32;\\n                }\\n            }\\n            unchecked {\\n                currentSlot += 32;\\n                ++newIndex;\\n            }\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                require(idx & IDX_VALUE_MASK < state.length, \\\"Index out-of-bounds\\\");\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argPtr;\\n                assembly {\\n                    argPtr := mload(add(output, 32))\\n                }\\n                require(\\n                    argPtr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            require(idx & IDX_VALUE_MASK < state.length, \\\"Index out-of-bounds\\\");\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx & IDX_VALUE_MASK] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcIdx,\\n        bytes memory dest,\\n        uint256 destIdx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcIdx),\\n                    len,\\n                    add(add(dest, 32), destIdx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/contracts/access/ACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/StorageAPI.sol\\\";\\n\\nabstract contract ACL {\\n    using StorageAPI for bytes32;\\n\\n    error NotPermitted();\\n\\n    modifier isPermitted(bytes32 role) {\\n        bool permitted = _getPermission(role, msg.sender); // TODO: support GSN/Account abstraction\\n        if (!permitted) revert NotPermitted();\\n        _;\\n    }\\n\\n    // @notice Gets user permission for a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The permission status\\n    function getPermission(bytes32 role, address account) external view returns (bool) {\\n        return _getPermission(role, account);\\n    }\\n\\n    // @notice Internal function to get user permission for a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The permission status\\n    function _getPermission(bytes32 role, address account) internal view returns (bool) {\\n        bytes32 key = _getKey(role, account);\\n        return key.getBool();\\n    }\\n\\n    // @notice Internal function to get the key for the storage slot\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The bytes32 storage slot\\n    function _getKey(bytes32 role, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(role, account));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/contracts/access/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nabstract contract Roles {\\n    // Using same slot generation technique as eip-1967 -- https://eips.ethereum.org/EIPS/eip-1967\\n    bytes32 public constant OWNER_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.owner\\\")) - 1);\\n    bytes32 public constant EXECUTOR_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.executor\\\")) - 1);\\n    bytes32 public constant MODULE_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.module\\\")) - 1);\\n}\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/contracts/libraries/StorageAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.16;\\n\\nlibrary StorageAPI {\\n    function setBytes(bytes32 key, bytes memory data) internal {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := mload(data)\\n            switch gt(length, 0x1F)\\n            case 0x00 {\\n                sstore(key, or(mload(add(data, 0x20)), mul(length, 2)))\\n            }\\n            case 0x01 {\\n                sstore(key, add(mul(length, 2), 1))\\n                for {\\n                    let i := 0\\n                } lt(mul(i, 0x20), length) {\\n                    i := add(i, 0x01)\\n                } {\\n                    sstore(add(slot, i), mload(add(data, mul(add(i, 1), 0x20))))\\n                }\\n            }\\n        }\\n    }\\n\\n    function setBytes32(bytes32 key, bytes32 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setAddress(bytes32 key, address a) internal {\\n        assembly {\\n            sstore(key, a)\\n        }\\n    }\\n\\n    function setUint256(bytes32 key, uint256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setInt256(bytes32 key, int256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setBool(bytes32 key, bool val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function getBytes(bytes32 key) internal view returns (bytes memory data) {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := sload(key)\\n            switch and(length, 0x01)\\n            case 0x00 {\\n                let decodedLength := div(and(length, 0xFF), 2)\\n                mstore(data, decodedLength)\\n                mstore(add(data, 0x20), and(length, not(0xFF)))\\n                mstore(0x40, add(data, 0x40))\\n            }\\n            case 0x01 {\\n                let decodedLength := div(length, 2)\\n                let i := 0\\n                mstore(data, decodedLength)\\n                for {\\n\\n                } lt(mul(i, 0x20), decodedLength) {\\n                    i := add(i, 0x01)\\n                } {\\n                    mstore(add(add(data, 0x20), mul(i, 0x20)), sload(add(slot, i)))\\n                }\\n                mstore(0x40, add(data, add(0x20, mul(i, 0x20))))\\n            }\\n        }\\n    }\\n\\n    function getBytes32(bytes32 key) internal view returns (bytes32 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getAddress(bytes32 key) internal view returns (address a) {\\n        assembly {\\n            a := sload(key)\\n        }\\n    }\\n\\n    function getUint256(bytes32 key) internal view returns (uint256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getInt256(bytes32 key) internal view returns (int256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getBool(bytes32 key) internal view returns (bool val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/shortcuts-contracts/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=lib/shortcuts-contracts/node_modules/@ensdomains/\",\r\n      \"@ensofinance/=lib/shortcuts-contracts/node_modules/@ensofinance/\",\r\n      \"@openzeppelin/=lib/shortcuts-contracts/node_modules/@openzeppelin/\",\r\n      \"@rari-capital/=lib/shortcuts-contracts/node_modules/@rari-capital/\",\r\n      \"clones-with-immutable-args/=lib/shortcuts-contracts/node_modules/clones-with-immutable-args/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=lib/shortcuts-contracts/node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=lib/shortcuts-contracts/node_modules/hardhat-deploy/\",\r\n      \"hardhat/=lib/shortcuts-contracts/node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"shortcuts-contracts/=lib/shortcuts-contracts/contracts/\",\r\n      \"@ethereum-waffle/=lib/shortcuts-contracts/node_modules/@ethereum-waffle/\",\r\n      \"enso-weiroll/=lib/enso-weiroll/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AmountTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Duplicate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WrongValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"enso\",\"outputs\":[{\"internalType\":\"contract EnsoShortcuts\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token[]\",\"name\":\"tokensIn\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"routeMulti\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"routeSingle\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token[]\",\"name\":\"tokensIn\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token[]\",\"name\":\"tokensOut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"safeRouteMulti\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"safeRouteSingle\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "EnsoShortcutRouter", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fae0bbFD75307865Dcdf21d9deFEFEDEee718431", "EVMVersion": "paris", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://21bf89a073c3ebc0affee7d2ceaac31d919db775b294891014d2accd020f5394"}