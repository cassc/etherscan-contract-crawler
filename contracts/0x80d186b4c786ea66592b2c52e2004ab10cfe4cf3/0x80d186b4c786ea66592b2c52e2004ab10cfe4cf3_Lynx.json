{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Cast(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nerror LYNX__MaxWalletReached(address wallet, uint triedBalance);\r\nerror LYNX__Blacklisted();\r\nerror LYNX__InvalidThreshold();\r\nerror LYNX__TradingNotEnabled();\r\nerror LYNX__NotAllowed();\r\nerror LYNX__InvalidTaxAmount();\r\nerror LYNX__InvalidMaxWallet();\r\n\r\ncontract Lynx is Ownable, ERC20 {\r\n    //---------------------------------------------------------------------------------\r\n    // Structs\r\n    //---------------------------------------------------------------------------------\r\n    struct SnapshotInfo {\r\n        uint tier1Total; // Tier 1 eligible balance\r\n        uint tier2Total; // Tier 2 eligible balance\r\n        uint snapshotTakenTimestamp; // Timestamp of the snapshot\r\n    }\r\n    //---------------------------------------------------------------------------------\r\n    // State Variables\r\n    //---------------------------------------------------------------------------------\r\n    mapping(address user => mapping(uint snapId => uint amount))\r\n        public snapshotInfo;\r\n    mapping(address user => uint lastSnapshotId) public lastSnapshotId;\r\n    mapping(uint snapId => SnapshotInfo) public snapshots;\r\n    mapping(address wallet => bool excludedStatus) public isExcludedFromTax;\r\n    mapping(address wallet => bool excludedStatus)\r\n        public isExcludedFromMaxWallet;\r\n    mapping(address wallet => bool blacklistedStatus) public isBlacklisted;\r\n    mapping(address wallet => bool dividendExcepmtionStatus)\r\n        public isDividendExempt;\r\n    mapping(address lpAddress => bool) public isLpAddress;\r\n    mapping(address executor => bool isExecutor) public isSnapshotter;\r\n\r\n    uint private constant MAX_SUPPLY = 5_000_000 ether;\r\n    uint private constant TIER_1 = 50_000 ether; // TIER 1 is top TIER\r\n    uint private constant TIER_2 = 1_000 ether; // TIER 2 is middle TIER\r\n    uint private constant TAX_PERCENT = 100;\r\n    IUniswapV2Router02 public router;\r\n\r\n    address public blacklister;\r\n    address public mainPair;\r\n    address private immutable WETH;\r\n    address payable public immutable ADMIN_WALLET;\r\n    uint public currentSnapId = 0;\r\n    uint public taxThreshold;\r\n\r\n    uint public maxWallet;\r\n    uint public buyTax = 5;\r\n    uint public sellTax = 5;\r\n\r\n    bool private isSwapping = false;\r\n    bool public tradingEnabled = false;\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Events\r\n    //---------------------------------------------------------------------------------\r\n\r\n    event WalletExcludedFromTax(address indexed _user, bool excluded);\r\n    event WalletExcludedFromMax(address indexed _user, bool excluded);\r\n    event BlacklistWalletUpdate(address indexed _user, bool blacklisted);\r\n    event BlacklistWalletsUpdate(address[] _users, bool blacklisted);\r\n    event SetAddressAsLp(address indexed _lpAddress, bool isLpAddress);\r\n    event SnapshotTaken(uint indexed snapId, uint timestamp);\r\n    event TradingEnabled(bool isEnabled);\r\n    event UpdateBlacklister(address indexed _blacklister);\r\n    event SetSnapshotterStatus(address indexed _snapshotter, bool status);\r\n    event EditMaxWalletAmount(uint newAmount);\r\n    event EditTax(uint newTax, bool buyTax, bool sellTax);\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Modifiers\r\n    //---------------------------------------------------------------------------------\r\n    modifier adminOrBlacklister() {\r\n        if (msg.sender != owner() && msg.sender != blacklister)\r\n            revert LYNX__NotAllowed();\r\n        _;\r\n    }\r\n\r\n    modifier onlySnapshotter() {\r\n        if (!isSnapshotter[msg.sender]) revert LYNX__NotAllowed();\r\n        _;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Constructor\r\n    //---------------------------------------------------------------------------------\r\n    constructor(address _admin, address _newOwner) ERC20(\"LYNX\", \"LYNX\") {\r\n        _transferOwnership(_newOwner);\r\n        blacklister = 0x89a022f3983Fa81Ae5B02b5A7d471AB1AC0BcC64;\r\n        _mint(_newOwner, MAX_SUPPLY);\r\n\r\n        maxWallet = (MAX_SUPPLY * 1_5) / 100_0; // 1.5% of total supply\r\n        taxThreshold = MAX_SUPPLY / 100_00; // 0.01% of total supply\r\n\r\n        // Ethereum Mainnet UniswapV2 Router\r\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = router.WETH();\r\n        // Create the Pair for this token with WETH\r\n        mainPair = IUniswapV2Factory(router.factory()).createPair(\r\n            address(this),\r\n            WETH\r\n        );\r\n        isLpAddress[mainPair] = true;\r\n\r\n        isExcludedFromMaxWallet[address(this)] = true;\r\n        isExcludedFromMaxWallet[owner()] = true;\r\n        isExcludedFromMaxWallet[address(router)] = true;\r\n        isExcludedFromMaxWallet[address(mainPair)] = true;\r\n\r\n        isExcludedFromTax[owner()] = true;\r\n        isExcludedFromTax[address(this)] = true;\r\n        isExcludedFromTax[address(router)] = true;\r\n\r\n        isDividendExempt[owner()] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(router)] = true;\r\n        isDividendExempt[address(mainPair)] = true;\r\n\r\n        isSnapshotter[owner()] = true;\r\n        ADMIN_WALLET = payable(_admin);\r\n        _approve(address(this), address(router), type(uint).max);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // External & Public Functions\r\n    //---------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Set wether an address is excluded from taxes or NOT.\r\n     * @param _user User which status will be updated\r\n     * @param _excluded The new excluded status. True is Excluded, False is NOT excluded\r\n     */\r\n    function setExcludeFromTax(\r\n        address _user,\r\n        bool _excluded\r\n    ) external onlyOwner {\r\n        isExcludedFromTax[_user] = _excluded;\r\n        emit WalletExcludedFromTax(_user, _excluded);\r\n    }\r\n\r\n    /**\r\n     * Exclude or include a wallet of MAX wallet limit (AntiWhale)\r\n     * @param _user Address which status will be updated\r\n     * @param _excluded The new excluded status. True is Excluded, False is NOT excluded\r\n     */\r\n    function setExcludedFromMaxWallet(\r\n        address _user,\r\n        bool _excluded\r\n    ) external onlyOwner {\r\n        isExcludedFromMaxWallet[_user] = _excluded;\r\n        emit WalletExcludedFromMax(_user, _excluded);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address as Blacklisted\r\n     * @param _user Address which status will be updated\r\n     */\r\n    function blacklistAddress(address _user) external adminOrBlacklister {\r\n        isBlacklisted[_user] = true;\r\n        isDividendExempt[_user] = true;\r\n        _updateSnapDecrease(_user, balanceOf(_user));\r\n        emit BlacklistWalletUpdate(_user, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the addresses as Blacklisted\r\n     * @param _users Addresses which status will be updated\r\n     */\r\n    function blacklistAddresses(\r\n        address[] calldata _users\r\n    ) external adminOrBlacklister {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            isBlacklisted[_users[i]] = true;\r\n            isDividendExempt[_users[i]] = true;\r\n            _updateSnapDecrease(_users[i], balanceOf(_users[i]));\r\n        }\r\n        emit BlacklistWalletsUpdate(_users, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove the address as Blacklisted\r\n     * @param _user Addresses which status will be updated\r\n     */\r\n    function unblacklistAddress(address _user) external adminOrBlacklister {\r\n        isBlacklisted[_user] = false;\r\n        isDividendExempt[_user] = false;\r\n        _updateSnapIncrease(_user, balanceOf(_user));\r\n        emit BlacklistWalletUpdate(_user, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove the addresses as Blacklisted\r\n     * @param _users Addresses which status will be updated\r\n     */\r\n    function unblacklistAddresses(\r\n        address[] calldata _users\r\n    ) external adminOrBlacklister {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            isBlacklisted[_users[i]] = false;\r\n            isDividendExempt[_users[i]] = false;\r\n            _updateSnapIncrease(_users[i], balanceOf(_users[i]));\r\n        }\r\n        emit BlacklistWalletsUpdate(_users, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Set an Address as LP\r\n     * @param _lpAddress Address to set as LP\r\n     * @param _isLpAddress enable or disable address as an LP\r\n     */\r\n    function setLpAddress(\r\n        address _lpAddress,\r\n        bool _isLpAddress\r\n    ) external onlyOwner {\r\n        isLpAddress[_lpAddress] = _isLpAddress;\r\n        isDividendExempt[_lpAddress] = _isLpAddress;\r\n        emit SetAddressAsLp(_lpAddress, _isLpAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Create a snapshot of the current balances\r\n     */\r\n    function takeSnapshot() external onlySnapshotter {\r\n        uint currentSnap = currentSnapId;\r\n        currentSnapId++;\r\n\r\n        SnapshotInfo storage snap = snapshots[currentSnap];\r\n        snap.snapshotTakenTimestamp = block.timestamp;\r\n        // roll over total amounts\r\n        snapshots[currentSnapId] = SnapshotInfo({\r\n            tier1Total: snap.tier1Total,\r\n            tier2Total: snap.tier2Total,\r\n            snapshotTakenTimestamp: 0\r\n        });\r\n\r\n        emit SnapshotTaken(currentSnap, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the new Tax swap threshold\r\n     * @param _taxThreshold New tax threshold\r\n     */\r\n    function setTaxThreshold(uint _taxThreshold) external onlyOwner {\r\n        if (_taxThreshold > MAX_SUPPLY) revert LYNX__InvalidThreshold();\r\n        taxThreshold = _taxThreshold;\r\n    }\r\n\r\n    function setMaxWallet(uint _maxWallet) external onlyOwner {\r\n        if (_maxWallet < MAX_SUPPLY / 100_00) revert LYNX__InvalidMaxWallet();\r\n        maxWallet = _maxWallet;\r\n        emit EditMaxWalletAmount(_maxWallet);\r\n    }\r\n\r\n    /**\r\n     * @notice set trading as enabled\r\n     */\r\n    function enableTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n        emit TradingEnabled(true);\r\n    }\r\n\r\n    /**\r\n     * @notice set trading as disabled\r\n     */\r\n    function pauseTrading() external onlyOwner {\r\n        tradingEnabled = false;\r\n        emit TradingEnabled(false);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the blacklister address\r\n     * @param _blacklister New blacklister address\r\n     */\r\n    function setBlacklister(address _blacklister) external onlyOwner {\r\n        blacklister = _blacklister;\r\n        emit UpdateBlacklister(_blacklister);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the Snapshotter status to an address. These addresses can take snapshots at any time\r\n     * @param _snapshotter Address to set snapshotter status\r\n     * @param _isSnapshotter True to set as snapshotter, false to remove\r\n     */\r\n    function setSnapshotterAddress(\r\n        address _snapshotter,\r\n        bool _isSnapshotter\r\n    ) external onlyOwner {\r\n        isSnapshotter[_snapshotter] = _isSnapshotter;\r\n        emit SetSnapshotterStatus(_snapshotter, _isSnapshotter);\r\n    }\r\n\r\n    /**\r\n     * @notice set the Buy tax to a new value\r\n     * @param _buyTax New buy tax\r\n     * @dev buyTax is a maximimum of 10% so the max acceptable _buyTax is 10\r\n     */\r\n    function setBuyTax(uint _buyTax) external onlyOwner {\r\n        if (_buyTax > 10) revert LYNX__InvalidTaxAmount();\r\n        buyTax = _buyTax;\r\n        emit EditTax(_buyTax, true, false);\r\n    }\r\n\r\n    /**\r\n     * @notice set the Sell tax to a new value\r\n     * @param _sellTax New sell tax\r\n     * @dev sellTax is a maximimum of 10% so the max acceptable _sellTax is 10\r\n     */\r\n    function setSellTax(uint _sellTax) external onlyOwner {\r\n        if (_sellTax > 10) revert LYNX__InvalidTaxAmount();\r\n        sellTax = _sellTax;\r\n        emit EditTax(_sellTax, false, true);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Internal & Private Functions\r\n    //---------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice Underlying transfer of tokens used by `transfer` and `transferFrom` in ERC20 which are public\r\n     * @param from Address that holds the funds\r\n     * @param to Address that receives the funds\r\n     * @param amount Amount of funds to send\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) internal override {\r\n        if (isBlacklisted[from] || isBlacklisted[to])\r\n            revert LYNX__Blacklisted();\r\n\r\n        bool taxExclusion = isExcludedFromTax[from] || isExcludedFromTax[to];\r\n\r\n        if (!tradingEnabled && !taxExclusion) {\r\n            revert LYNX__TradingNotEnabled();\r\n        }\r\n\r\n        _updateSnapDecrease(from, amount);\r\n\r\n        uint currentBalance = balanceOf(address(this));\r\n\r\n        if (\r\n            !isSwapping &&\r\n            currentBalance >= taxThreshold &&\r\n            !taxExclusion &&\r\n            !isLpAddress[from] // Cant do this on buys\r\n        ) {\r\n            _swapTokens();\r\n        }\r\n\r\n        // Check that sender is free of tax or receiver is free of tax\r\n        if (!taxExclusion) {\r\n            uint tax;\r\n            // if not free of tax, check if is buy or sell\r\n            if (isLpAddress[to]) {\r\n                // IS SELL\r\n                tax = (amount * sellTax) / TAX_PERCENT;\r\n            } else if (isLpAddress[from]) {\r\n                // IS BUY\r\n                tax = (amount * buyTax) / TAX_PERCENT;\r\n            }\r\n            if (tax > 0) {\r\n                super._transfer(from, address(this), tax);\r\n                amount -= tax;\r\n            }\r\n        }\r\n\r\n        // check if receiver is free of max wallet\r\n        uint toNEWBalance = balanceOf(to) + amount;\r\n        if (!isExcludedFromMaxWallet[to] && toNEWBalance > maxWallet) {\r\n            revert LYNX__MaxWalletReached(to, toNEWBalance);\r\n        }\r\n        _updateSnapIncrease(to, amount);\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap any tokens the contract has for ETH and send the ETH directly to the Admin Wallet\r\n     */\r\n    function _swapTokens() private {\r\n        isSwapping = true;\r\n        // Get the current amount of tokens stored in the contract\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        // If the contract has tokens\r\n        if (contractTokenBalance > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = WETH;\r\n            // Swap all for ETH and send to Admin Wallet\r\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                contractTokenBalance,\r\n                0, // Accept any amount of ETH\r\n                path,\r\n                ADMIN_WALLET,\r\n                block.timestamp\r\n            );\r\n        }\r\n        isSwapping = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease a wallet's current snapshot balance\r\n     * @param user Wallet to update snapshot info\r\n     * @param amount the difference amount in snapshot\r\n     */\r\n    function _updateSnapDecrease(address user, uint amount) private {\r\n        uint currentSnap = currentSnapId;\r\n        uint currentSnapBalance = snapshotInfo[user][currentSnap];\r\n        uint currentBalance = balanceOf(user);\r\n        uint newBalance = currentBalance - amount;\r\n        SnapshotInfo storage snap = snapshots[currentSnap];\r\n        lastSnapshotId[user] = currentSnap;\r\n        // If user is exempt from dividends, we need to set the snapshot value to 0\r\n        if (isDividendExempt[user]) {\r\n            snapshotInfo[user][currentSnap] = 0;\r\n            // if user is now exempt but used to have funds, we need to decrease the total\r\n            if (currentSnapBalance > 0) {\r\n                if (currentSnapBalance >= TIER_1)\r\n                    snap.tier1Total -= currentSnapBalance;\r\n                else if (currentSnapBalance >= TIER_2)\r\n                    snap.tier2Total -= currentSnapBalance;\r\n            }\r\n        } else {\r\n            snapshotInfo[user][currentSnap] = newBalance;\r\n\r\n            /// FROM TIER 1\r\n            if (currentBalance >= TIER_1) {\r\n                // Decrease TIER 1\r\n                snap.tier1Total -= currentBalance;\r\n                // TO SAME TIER\r\n                if (newBalance >= TIER_1) snap.tier1Total += newBalance;\r\n                // TO TIER 2\r\n                if (newBalance < TIER_1 && newBalance >= TIER_2)\r\n                    snap.tier2Total += newBalance;\r\n                // if to NO tier, just decrease is fine\r\n            }\r\n            // FROM TIER 2\r\n            else if (currentBalance >= TIER_2) {\r\n                snap.tier2Total -= currentBalance;\r\n                // TO SAME TIER\r\n                if (newBalance >= TIER_2) snap.tier2Total += newBalance;\r\n                // TO NO TIER JUST DO NOTHING\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Increase a wallet's current snapshot balance\r\n     * @param user Wallet to update snapshot info\r\n     * @param amount Difference amount\r\n     */\r\n    function _updateSnapIncrease(address user, uint amount) private {\r\n        uint currentSnap = currentSnapId;\r\n        uint currentBalance = balanceOf(user);\r\n        uint currentSnapBalance = snapshotInfo[user][currentSnap];\r\n        SnapshotInfo storage snap = snapshots[currentSnap];\r\n        lastSnapshotId[user] = currentSnap;\r\n        // If user is exempt from dividends, we need to set the snapshot value to 0\r\n        if (isDividendExempt[user]) {\r\n            snapshotInfo[user][currentSnap] = 0;\r\n            // if user is now exempt but used to have funds, we need to decrease the total\r\n            if (currentSnapBalance > 0) {\r\n                if (currentSnapBalance >= TIER_1)\r\n                    snap.tier1Total -= currentSnapBalance;\r\n                else if (currentSnapBalance >= TIER_2)\r\n                    snap.tier2Total -= currentSnapBalance;\r\n            }\r\n        } else {\r\n            snapshotInfo[user][currentSnap] = currentBalance + amount;\r\n            uint newBalance = currentBalance + amount;\r\n            // Check if there is any tier advancement\r\n\r\n            // FROM NO TIER\r\n            if (currentBalance < TIER_2) {\r\n                // TO TIER 1\r\n                if (newBalance >= TIER_1)\r\n                    snap.tier1Total += newBalance;\r\n                    // TO TIER 2\r\n                else if (newBalance >= TIER_2) snap.tier2Total += newBalance;\r\n                // TO NO TIER DO NOTHING\r\n            }\r\n            // FROM TIER 2\r\n            else if (currentBalance >= TIER_2 && currentBalance < TIER_1) {\r\n                // TO TIER 1\r\n                if (newBalance >= TIER_1)\r\n                    snap.tier1Total += newBalance;\r\n\r\n                    // TO SAME TIER\r\n                else if (newBalance >= TIER_2) snap.tier2Total += newBalance;\r\n                snap.tier2Total -= currentBalance;\r\n            }\r\n            // FROM TIER 1\r\n            else if (currentBalance >= TIER_1) {\r\n                // Stay in same tier\r\n                snap.tier1Total += newBalance;\r\n                snap.tier1Total -= currentBalance;\r\n            }\r\n        }\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // External & Public VIEW | PURE Functions\r\n    //---------------------------------------------------------------------------------\r\n\r\n    function getUserSnapshotAt(\r\n        address user,\r\n        uint snapId\r\n    ) external view returns (uint) {\r\n        // If snapshot ID hasn't been taken, return 0\r\n        if (snapId > currentSnapId) return 0;\r\n        uint lastUserSnap = lastSnapshotId[user];\r\n        // if last snapshot is before the requested snapshot, return current balance of the user\r\n        if (snapId > lastUserSnap) return balanceOf(user);\r\n        // else return the snapshot balance\r\n        return snapshotInfo[user][snapId];\r\n    }\r\n\r\n    //---------------------------------------------------------------------------------\r\n    // Internal & Private VIEW | PURE Functions\r\n    //---------------------------------------------------------------------------------\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LYNX__Blacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LYNX__InvalidMaxWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LYNX__InvalidTaxAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LYNX__InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"triedBalance\",\"type\":\"uint256\"}],\"name\":\"LYNX__MaxWalletReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LYNX__NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LYNX__TradingNotEnabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistWalletUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistWalletsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EditMaxWalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"buyTax\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellTax\",\"type\":\"bool\"}],\"name\":\"EditTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLpAddress\",\"type\":\"bool\"}],\"name\":\"SetAddressAsLp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_snapshotter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetSnapshotterStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"snapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_blacklister\",\"type\":\"address\"}],\"name\":\"UpdateBlacklister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"WalletExcludedFromMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"WalletExcludedFromTax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_WALLET\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSnapId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapId\",\"type\":\"uint256\"}],\"name\":\"getUserSnapshotAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"blacklistedStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"dividendExcepmtionStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"excludedStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isExcludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"excludedStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"isLpAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"isSnapshotter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExecutor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lastSnapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastSnapshotId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blacklister\",\"type\":\"address\"}],\"name\":\"setBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLpAddress\",\"type\":\"bool\"}],\"name\":\"setLpAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_snapshotter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSnapshotter\",\"type\":\"bool\"}],\"name\":\"setSnapshotterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxThreshold\",\"type\":\"uint256\"}],\"name\":\"setTaxThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapId\",\"type\":\"uint256\"}],\"name\":\"snapshotInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapId\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier1Total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTakenTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unblacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"unblacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lynx", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a3fd551884d62d6fd6d95d4900beff89cbe45a8d000000000000000000000000d6f758ba6c169f50a6a6eff1e74559b134647b51", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6013a253850af0bc5f0413345c258f0b15cbd1b877c8275d5fa7aece0257a4ff"}