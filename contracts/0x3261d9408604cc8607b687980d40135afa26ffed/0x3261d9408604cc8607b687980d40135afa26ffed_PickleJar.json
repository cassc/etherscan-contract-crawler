{"SourceCode": "// hevm: flattened sources of src/pickle-jar.sol\rpragma solidity >=0.6.0 <0.7.0 >=0.6.7 <0.7.0;\r\r////// src/interfaces/controller.sol\r// SPDX-License-Identifier: MIT\r\r/* pragma solidity ^0.6.0; */\r\rinterface IController {\r    function jars(address) external view returns (address);\r\r    function rewards() external view returns (address);\r\r    function devfund() external view returns (address);\r\r    function treasury() external view returns (address);\r\r    function balanceOf(address) external view returns (uint256);\r\r    function withdraw(address, uint256) external;\r\r    function earn(address, uint256) external;\r}\r\r////// src/lib/context.sol\r// SPDX-License-Identifier: MIT\r\r/* pragma solidity ^0.6.0; */\r\r/*\r * @dev Provides information about the current execution context, including the\r * sender of the transaction and its data. While these are generally available\r * via msg.sender and msg.data, they should not be accessed in such a direct\r * manner, since when dealing with GSN meta-transactions the account sending and\r * paying for execution may not be the actual sender (as far as an application\r * is concerned).\r *\r * This contract is only required for intermediate, library-like contracts.\r */\rabstract contract Context {\r    function _msgSender() internal view virtual returns (address payable) {\r        return msg.sender;\r    }\r\r    function _msgData() internal view virtual returns (bytes memory) {\r        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r        return msg.data;\r    }\r}\r\r////// src/lib/safe-math.sol\r// SPDX-License-Identifier: MIT\r\r/* pragma solidity ^0.6.0; */\r\r/**\r * @dev Wrappers over Solidity's arithmetic operations with added overflow\r * checks.\r *\r * Arithmetic operations in Solidity wrap on overflow. This can easily result\r * in bugs, because programmers usually assume that an overflow raises an\r * error, which is the standard behavior in high level programming languages.\r * `SafeMath` restores this intuition by reverting the transaction when an\r * operation overflows.\r *\r * Using this library instead of the unchecked operations eliminates an entire\r * class of bugs, so it's recommended to use it always.\r */\rlibrary SafeMath {\r    /**\r     * @dev Returns the addition of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `+` operator.\r     *\r     * Requirements:\r     *\r     * - Addition cannot overflow.\r     */\r    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r        uint256 c = a + b;\r        require(c >= a, \"SafeMath: addition overflow\");\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r        return sub(a, b, \"SafeMath: subtraction overflow\");\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b <= a, errorMessage);\r        uint256 c = a - b;\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the multiplication of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `*` operator.\r     *\r     * Requirements:\r     *\r     * - Multiplication cannot overflow.\r     */\r    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r        // benefit is lost if 'b' is also tested.\r        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r        if (a == 0) {\r            return 0;\r        }\r\r        uint256 c = a * b;\r        require(c / a == b, \"SafeMath: multiplication overflow\");\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers. Reverts on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r        return div(a, b, \"SafeMath: division by zero\");\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b > 0, errorMessage);\r        uint256 c = a / b;\r        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * Reverts when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r        return mod(a, b, \"SafeMath: modulo by zero\");\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * Reverts with custom message when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b != 0, errorMessage);\r        return a % b;\r    }\r}\r////// src/lib/erc20.sol\r\r// File: contracts/GSN/Context.sol\r\r// SPDX-License-Identifier: MIT\r\r/* pragma solidity ^0.6.0; */\r\r/* import \"./safe-math.sol\"; */\r/* import \"./context.sol\"; */\r\r// File: contracts/token/ERC20/IERC20.sol\r\r\r/**\r * @dev Interface of the ERC20 standard as defined in the EIP.\r */\rinterface IERC20_1 {\r    /**\r     * @dev Returns the amount of tokens in existence.\r     */\r    function totalSupply() external view returns (uint256);\r\r    /**\r     * @dev Returns the amount of tokens owned by `account`.\r     */\r    function balanceOf(address account) external view returns (uint256);\r\r    /**\r     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transfer(address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Returns the remaining number of tokens that `spender` will be\r     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r     * zero by default.\r     *\r     * This value changes when {approve} or {transferFrom} are called.\r     */\r    function allowance(address owner, address spender) external view returns (uint256);\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r     * that someone may use both the old and the new allowance by unfortunate\r     * transaction ordering. One possible solution to mitigate this race\r     * condition is to first reduce the spender's allowance to 0 and set the\r     * desired value afterwards:\r     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r     *\r     * Emits an {Approval} event.\r     */\r    function approve(address spender, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r     * allowance mechanism. `amount` is then deducted from the caller's\r     * allowance.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r     * another (`to`).\r     *\r     * Note that `value` may be zero.\r     */\r    event Transfer(address indexed from, address indexed to, uint256 value);\r\r    /**\r     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r     * a call to {approve}. `value` is the new allowance.\r     */\r    event Approval(address indexed owner, address indexed spender, uint256 value);\r}\r\r// File: contracts/utils/Address.sol\r\r\r/**\r * @dev Collection of functions related to the address type\r */\rlibrary Address {\r    /**\r     * @dev Returns true if `account` is a contract.\r     *\r     * [IMPORTANT]\r     * ====\r     * It is unsafe to assume that an address for which this function returns\r     * false is an externally-owned account (EOA) and not a contract.\r     *\r     * Among others, `isContract` will return false for the following\r     * types of addresses:\r     *\r     *  - an externally-owned account\r     *  - a contract in construction\r     *  - an address where a contract will be created\r     *  - an address where a contract lived, but was destroyed\r     * ====\r     */\r    function isContract(address account) internal view returns (bool) {\r        // This method relies on extcodesize, which returns 0 for contracts in\r        // construction, since the code is only stored at the end of the\r        // constructor execution.\r\r        uint256 size;\r        // solhint-disable-next-line no-inline-assembly\r        assembly { size := extcodesize(account) }\r        return size > 0;\r    }\r\r    /**\r     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r     * `recipient`, forwarding all available gas and reverting on errors.\r     *\r     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r     * imposed by `transfer`, making them unable to receive funds via\r     * `transfer`. {sendValue} removes this limitation.\r     *\r     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r     *\r     * IMPORTANT: because control is transferred to `recipient`, care must be\r     * taken to not create reentrancy vulnerabilities. Consider using\r     * {ReentrancyGuard} or the\r     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r     */\r    function sendValue(address payable recipient, uint256 amount) internal {\r        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\r        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r        (bool success, ) = recipient.call{ value: amount }(\"\");\r        require(success, \"Address: unable to send value, recipient may have reverted\");\r    }\r\r    /**\r     * @dev Performs a Solidity function call using a low level `call`. A\r     * plain`call` is an unsafe replacement for a function call: use this\r     * function instead.\r     *\r     * If `target` reverts with a revert reason, it is bubbled up by this\r     * function (like regular Solidity function calls).\r     *\r     * Returns the raw returned data. To convert to the expected return value,\r     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r     *\r     * Requirements:\r     *\r     * - `target` must be a contract.\r     * - calling `target` with `data` must not revert.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r      return functionCall(target, data, \"Address: low-level call failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r     * `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r        return _functionCallWithValue(target, data, 0, errorMessage);\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r     * but also transferring `value` wei to `target`.\r     *\r     * Requirements:\r     *\r     * - the calling contract must have an ETH balance of at least `value`.\r     * - the called Solidity function must be `payable`.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r     * with `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r        return _functionCallWithValue(target, data, value, errorMessage);\r    }\r\r    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r        require(isContract(target), \"Address: call to non-contract\");\r\r        // solhint-disable-next-line avoid-low-level-calls\r        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r        if (success) {\r            return returndata;\r        } else {\r            // Look for revert reason and bubble it up if present\r            if (returndata.length > 0) {\r                // The easiest way to bubble the revert reason is using memory via assembly\r\r                // solhint-disable-next-line no-inline-assembly\r                assembly {\r                    let returndata_size := mload(returndata)\r                    revert(add(32, returndata), returndata_size)\r                }\r            } else {\r                revert(errorMessage);\r            }\r        }\r    }\r}\r\r// File: contracts/token/ERC20/ERC20.sol\r\r/**\r * @dev Implementation of the {IERC20} interface.\r *\r * This implementation is agnostic to the way tokens are created. This means\r * that a supply mechanism has to be added in a derived contract using {_mint}.\r * For a generic mechanism see {ERC20PresetMinterPauser}.\r *\r * TIP: For a detailed writeup see our guide\r * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r * to implement supply mechanisms].\r *\r * We have followed general OpenZeppelin guidelines: functions revert instead\r * of returning `false` on failure. This behavior is nonetheless conventional\r * and does not conflict with the expectations of ERC20 applications.\r *\r * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r * This allows applications to reconstruct the allowance for all accounts just\r * by listening to said events. Other implementations of the EIP may not emit\r * these events, as it isn't required by the specification.\r *\r * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r * functions have been added to mitigate the well-known issues around setting\r * allowances. See {IERC20-approve}.\r */\rcontract ERC20 is Context, IERC20_1 {\r    using SafeMath for uint256;\r    using Address for address;\r\r    mapping (address => uint256) private _balances;\r\r    mapping (address => mapping (address => uint256)) private _allowances;\r\r    uint256 private _totalSupply;\r\r    string private _name;\r    string private _symbol;\r    uint8 private _decimals;\r\r    /**\r     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r     * a default value of 18.\r     *\r     * To select a different value for {decimals}, use {_setupDecimals}.\r     *\r     * All three of these values are immutable: they can only be set once during\r     * construction.\r     */\r    constructor (string memory name, string memory symbol) public {\r        _name = name;\r        _symbol = symbol;\r        _decimals = 18;\r    }\r\r    /**\r     * @dev Returns the name of the token.\r     */\r    function name() public view returns (string memory) {\r        return _name;\r    }\r\r    /**\r     * @dev Returns the symbol of the token, usually a shorter version of the\r     * name.\r     */\r    function symbol() public view returns (string memory) {\r        return _symbol;\r    }\r\r    /**\r     * @dev Returns the number of decimals used to get its user representation.\r     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r     *\r     * Tokens usually opt for a value of 18, imitating the relationship between\r     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r     * called.\r     *\r     * NOTE: This information is only used for _display_ purposes: it in\r     * no way affects any of the arithmetic of the contract, including\r     * {IERC20-balanceOf} and {IERC20-transfer}.\r     */\r    function decimals() public view returns (uint8) {\r        return _decimals;\r    }\r\r    /**\r     * @dev See {IERC20-totalSupply}.\r     */\r    function totalSupply() public view override returns (uint256) {\r        return _totalSupply;\r    }\r\r    /**\r     * @dev See {IERC20-balanceOf}.\r     */\r    function balanceOf(address account) public view override returns (uint256) {\r        return _balances[account];\r    }\r\r    /**\r     * @dev See {IERC20-transfer}.\r     *\r     * Requirements:\r     *\r     * - `recipient` cannot be the zero address.\r     * - the caller must have a balance of at least `amount`.\r     */\r    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r        _transfer(_msgSender(), recipient, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-allowance}.\r     */\r    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r        return _allowances[owner][spender];\r    }\r\r    /**\r     * @dev See {IERC20-approve}.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r        _approve(_msgSender(), spender, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-transferFrom}.\r     *\r     * Emits an {Approval} event indicating the updated allowance. This is not\r     * required by the EIP. See the note at the beginning of {ERC20};\r     *\r     * Requirements:\r     * - `sender` and `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     * - the caller must have allowance for ``sender``'s tokens of at least\r     * `amount`.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r        _transfer(sender, recipient, amount);\r        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r        return true;\r    }\r\r    /**\r     * @dev Atomically increases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r        return true;\r    }\r\r    /**\r     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     * - `spender` must have allowance for the caller of at least\r     * `subtractedValue`.\r     */\r    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r        return true;\r    }\r\r    /**\r     * @dev Moves tokens `amount` from `sender` to `recipient`.\r     *\r     * This is internal function is equivalent to {transfer}, and can be used to\r     * e.g. implement automatic token fees, slashing mechanisms, etc.\r     *\r     * Emits a {Transfer} event.\r     *\r     * Requirements:\r     *\r     * - `sender` cannot be the zero address.\r     * - `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     */\r    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r        require(sender != address(0), \"ERC20: transfer from the zero address\");\r        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\r        _beforeTokenTransfer(sender, recipient, amount);\r\r        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r        _balances[recipient] = _balances[recipient].add(amount);\r        emit Transfer(sender, recipient, amount);\r    }\r\r    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r     * the total supply.\r     *\r     * Emits a {Transfer} event with `from` set to the zero address.\r     *\r     * Requirements\r     *\r     * - `to` cannot be the zero address.\r     */\r    function _mint(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: mint to the zero address\");\r\r        _beforeTokenTransfer(address(0), account, amount);\r\r        _totalSupply = _totalSupply.add(amount);\r        _balances[account] = _balances[account].add(amount);\r        emit Transfer(address(0), account, amount);\r    }\r\r    /**\r     * @dev Destroys `amount` tokens from `account`, reducing the\r     * total supply.\r     *\r     * Emits a {Transfer} event with `to` set to the zero address.\r     *\r     * Requirements\r     *\r     * - `account` cannot be the zero address.\r     * - `account` must have at least `amount` tokens.\r     */\r    function _burn(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: burn from the zero address\");\r\r        _beforeTokenTransfer(account, address(0), amount);\r\r        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r        _totalSupply = _totalSupply.sub(amount);\r        emit Transfer(account, address(0), amount);\r    }\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r     *\r     * This internal function is equivalent to `approve`, and can be used to\r     * e.g. set automatic allowances for certain subsystems, etc.\r     *\r     * Emits an {Approval} event.\r     *\r     * Requirements:\r     *\r     * - `owner` cannot be the zero address.\r     * - `spender` cannot be the zero address.\r     */\r    function _approve(address owner, address spender, uint256 amount) internal virtual {\r        require(owner != address(0), \"ERC20: approve from the zero address\");\r        require(spender != address(0), \"ERC20: approve to the zero address\");\r\r        _allowances[owner][spender] = amount;\r        emit Approval(owner, spender, amount);\r    }\r\r    /**\r     * @dev Sets {decimals} to a value other than the default one of 18.\r     *\r     * WARNING: This function should only be called from the constructor. Most\r     * applications that interact with token contracts will not expect\r     * {decimals} to ever change, and may work incorrectly if it does.\r     */\r    function _setupDecimals(uint8 decimals_) internal {\r        _decimals = decimals_;\r    }\r\r    /**\r     * @dev Hook that is called before any transfer of tokens. This includes\r     * minting and burning.\r     *\r     * Calling conditions:\r     *\r     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r     * will be to transferred to `to`.\r     * - when `from` is zero, `amount` tokens will be minted for `to`.\r     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r     * - `from` and `to` are never both zero.\r     *\r     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r     */\r    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r}\r\r/**\r * @title SafeERC20\r * @dev Wrappers around ERC20 operations that throw on failure (when the token\r * contract returns false). Tokens that return no value (and instead revert or\r * throw on failure) are also supported, non-reverting calls are assumed to be\r * successful.\r * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r */\rlibrary SafeERC20 {\r    using SafeMath for uint256;\r    using Address for address;\r\r    function safeTransfer(IERC20_1 token, address to, uint256 value) internal {\r        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r    }\r\r    function safeTransferFrom(IERC20_1 token, address from, address to, uint256 value) internal {\r        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r    }\r\r    /**\r     * @dev Deprecated. This function has issues similar to the ones found in\r     * {IERC20-approve}, and its usage is discouraged.\r     *\r     * Whenever possible, use {safeIncreaseAllowance} and\r     * {safeDecreaseAllowance} instead.\r     */\r    function safeApprove(IERC20_1 token, address spender, uint256 value) internal {\r        // safeApprove should only be called when setting an initial allowance,\r        // or when resetting it to zero. To increase and decrease it, use\r        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r        // solhint-disable-next-line max-line-length\r        require((value == 0) || (token.allowance(address(this), spender) == 0),\r            \"SafeERC20: approve from non-zero to non-zero allowance\"\r        );\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r    }\r\r    function safeIncreaseAllowance(IERC20_1 token, address spender, uint256 value) internal {\r        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r    }\r\r    function safeDecreaseAllowance(IERC20_1 token, address spender, uint256 value) internal {\r        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r    }\r\r    /**\r     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r     * on the return value: the return value is optional (but if data is returned, it must not be false).\r     * @param token The token targeted by the call.\r     * @param data The call data (encoded using abi.encode or one of its variants).\r     */\r    function _callOptionalReturn(IERC20_1 token, bytes memory data) private {\r        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r        // the target address contains contract code and also asserts for success in the low-level call.\r\r        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r        if (returndata.length > 0) { // Return data is optional\r            // solhint-disable-next-line max-line-length\r            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r        }\r    }\r}\r////// src/pickle-jar.sol\r// https://github.com/iearn-finance/vaults/blob/master/contracts/vaults/yVault.sol\r\r/* pragma solidity ^0.6.7; */\r\r/* import \"./interfaces/controller.sol\"; */\r\r/* import \"./lib/erc20.sol\"; */\r/* import \"./lib/safe-math.sol\"; */\r\rcontract PickleJar is ERC20 {\r    using SafeERC20 for IERC20_1;\r    using Address for address;\r    using SafeMath for uint256;\r\r    IERC20_1 public token;\r\r    uint256 public min = 9500;\r    uint256 public constant max = 10000;\r\r    address public governance;\r    address public timelock;\r    address public controller;\r\r    constructor(address _token, address _governance, address _timelock, address _controller)\r        public\r        ERC20(\r            string(abi.encodePacked(\"pickling \", ERC20(_token).name())),\r            string(abi.encodePacked(\"p\", ERC20(_token).symbol()))\r        )\r    {\r        _setupDecimals(ERC20(_token).decimals());\r        token = IERC20_1(_token);\r        governance = _governance;\r        timelock = _timelock;\r        controller = _controller;\r    }\r\r    function balance() public view returns (uint256) {\r        return\r            token.balanceOf(address(this)).add(\r                IController(controller).balanceOf(address(token))\r            );\r    }\r\r    function setMin(uint256 _min) external {\r        require(msg.sender == governance, \"!governance\");\r        require(_min <= max, \"numerator cannot be greater than denominator\");\r        min = _min;\r    }\r\r    function setGovernance(address _governance) public {\r        require(msg.sender == governance, \"!governance\");\r        governance = _governance;\r    }\r\r    function setTimelock(address _timelock) public {\r        require(msg.sender == timelock, \"!timelock\");\r        timelock = _timelock;\r    }\r\r    function setController(address _controller) public {\r        require(msg.sender == timelock, \"!timelock\");\r        controller = _controller;\r    }\r\r    // Custom logic in here for how much the jars allows to be borrowed\r    // Sets minimum required on-hand to keep small withdrawals cheap\r    function available() public view returns (uint256) {\r        return token.balanceOf(address(this)).mul(min).div(max);\r    }\r\r    function earn() public {\r        uint256 _bal = available();\r        token.safeTransfer(controller, _bal);\r        IController(controller).earn(address(token), _bal);\r    }\r\r    function depositAll() external {\r        deposit(token.balanceOf(msg.sender));\r    }\r\r    function deposit(uint256 _amount) public {\r        uint256 _pool = balance();\r        uint256 _before = token.balanceOf(address(this));\r        token.safeTransferFrom(msg.sender, address(this), _amount);\r        uint256 _after = token.balanceOf(address(this));\r        _amount = _after.sub(_before); // Additional check for deflationary tokens\r        uint256 shares = 0;\r        if (totalSupply() == 0) {\r            shares = _amount;\r        } else {\r            shares = (_amount.mul(totalSupply())).div(_pool);\r        }\r        _mint(msg.sender, shares);\r    }\r\r    function withdrawAll() external {\r        withdraw(balanceOf(msg.sender));\r    }\r\r    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\r    function harvest(address reserve, uint256 amount) external {\r        require(msg.sender == controller, \"!controller\");\r        require(reserve != address(token), \"token\");\r        IERC20_1(reserve).safeTransfer(controller, amount);\r    }\r\r    // No rebalance implementation for lower fees and faster swaps\r    function withdraw(uint256 _shares) public {\r        uint256 r = (balance().mul(_shares)).div(totalSupply());\r        _burn(msg.sender, _shares);\r\r        // Check balance\r        uint256 b = token.balanceOf(address(this));\r        if (b < r) {\r            uint256 _withdraw = r.sub(b);\r            IController(controller).withdraw(address(token), _withdraw);\r            uint256 _after = token.balanceOf(address(this));\r            uint256 _diff = _after.sub(b);\r            if (_diff < _withdraw) {\r                r = b.add(_diff);\r            }\r        }\r\r        token.safeTransfer(msg.sender, r);\r    }\r\r    function getRatio() public view returns (uint256) {\r        return balance().mul(1e18).div(totalSupply());\r    }\r}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PickleJar", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "000000000000000000000000088ee5007c98a9677165d78dd2109ae4a3d04d0c000000000000000000000000d92c7faa0ca0e6ae4918f3a83d9832d9caeaa0d3000000000000000000000000d92c7faa0ca0e6ae4918f3a83d9832d9caeaa0d30000000000000000000000006847259b2b3a4c17e7c43c54409810af48ba5210", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}