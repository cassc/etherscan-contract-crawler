{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address  to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address  to, uint256 value) public returns (bool);\r\n    function approve(address  spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    constructor(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    mapping(address => uint256)  balances;\r\n    uint256  _totalSupply;\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0) && _value != 0 &&_value <= balances[msg.sender],\"Please check the amount of transmission error and the amount you send.\");\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract ERC20Token is BasicToken, ERC20 {\r\n    using SafeMath for uint256;\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    mapping (address => mapping (address => uint256))  allowed;\r\n    mapping (address => uint256) public freezeOf;\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        \r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0,\"Please check the amount you want to approve.\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n    mapping (address => bool) public admin;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"I am not the owner of the wallet.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwnerOrAdmin() {\r\n        require(msg.sender == owner || admin[msg.sender] == true,\"It is not the owner or manager wallet address.\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0) && newOwner != owner && admin[newOwner] == true,\"It must be the existing manager wallet, not the existing owner's wallet.\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function setAdmin(address newAdmin) onlyOwner public {\r\n        require(admin[newAdmin] != true && owner != newAdmin,\"It is not an existing administrator wallet, and it must not be the owner wallet of the token.\");\r\n        admin[newAdmin] = true;\r\n    }\r\n    \r\n    function unsetAdmin(address Admin) onlyOwner public {\r\n        require(admin[Admin] != false && owner != Admin,\"This is an existing admin wallet, it must not be a token holder wallet.\");\r\n        admin[Admin] = false;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n    bool public paused = false;\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!paused,\"There is a pause.\");\r\n        _;\r\n    }\r\n    \r\n    modifier whenPaused() {\r\n        require(paused,\"It is not paused.\");\r\n        _;\r\n    }\r\n    \r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    \r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0; }    \r\n        uint256 c = a * b;\r\n        require(c / a == b,\"An error occurred in the calculation process\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b !=0,\"The number you want to divide must be non-zero.\");\r\n        uint256 c = a / b;\r\n        require(c * b == a,\"An error occurred in the calculation process\");\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"There are more to deduct.\");\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a,\"The number did not increase.\");\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract BurnableToken is BasicToken, Ownable {\r\n    \r\n    event Burn(address indexed burner, uint256 amount);\r\n\r\n    function burn(uint256 _value) onlyOwner public {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n\r\n  \r\n}\r\ncontract FreezeToken is BasicToken, Ownable {\r\n    \r\n    event Freezen(address indexed freezer, uint256 amount);\r\n    event UnFreezen(address indexed freezer, uint256 amount);\r\n    mapping (address => uint256) freezeOf;\r\n    \r\n    function freeze(uint256 _value) onlyOwner public {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        freezeOf[msg.sender] = freezeOf[msg.sender].add(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Freezen(msg.sender, _value);\r\n    }\r\n    \r\n    function unfreeze(uint256 _value) onlyOwner public {\r\n        require(freezeOf[msg.sender] >= _value,\"The number to be processed is more than the total amount and the number currently frozen.\");\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        freezeOf[msg.sender] = freezeOf[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.add(_value);\r\n        emit Freezen(msg.sender, _value);\r\n    }\r\n}\r\n\r\n\r\ncontract HydrogenEnergy is BurnableToken,FreezeToken, DetailedERC20, ERC20Token,Pausable{\r\n    using SafeMath for uint256;\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event LockerChanged(address indexed owner, uint256 amount);\r\n    mapping(address => uint) locker;\r\n    \r\n    string  private _symbol = \"HE\";\r\n    string  private _name = \"HydrogenEnergy\";\r\n    uint8  private _decimals = 18;\r\n    uint256 private TOTAL_SUPPLY = 20*(10**8)*(10**uint256(_decimals));\r\n    \r\n    constructor() DetailedERC20(_name, _symbol, _decimals) public {\r\n        _totalSupply = TOTAL_SUPPLY;\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value)  public whenNotPaused returns (bool){\r\n        require(balances[msg.sender].sub(_value) >= locker[msg.sender],\"Attempting to send more than the locked number\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool){\r\n    \r\n        require(_to > address(0) && _from > address(0),\"Please check the address\" );\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value,\"Please check the amount of transmission error and the amount you send.\");\r\n        require(balances[_from].sub(_value) >= locker[_from],\"Attempting to send more than the locked number\" );\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    function lockOf(address _address) public view returns (uint256 _locker) {\r\n        return locker[_address];\r\n    }\r\n    \r\n    function setLock(address _address, uint256 _value) public onlyOwnerOrAdmin {\r\n        require(_value <= _totalSupply &&_address != address(0),\"It is the first wallet or attempted to lock an amount greater than the total holding.\");\r\n        locker[_address] = _value;\r\n        emit LockerChanged(_address, _value);\r\n    }\r\n    function setLockList(address[] _recipients, uint256[] _balances) public onlyOwnerOrAdmin{\r\n        require(_recipients.length == _balances.length,\"The number of wallet arrangements and the number of amounts are different.\");\r\n        \r\n        for (uint i=0; i < _recipients.length; i++) {\r\n            require(_recipients[i] != address(0),'Please check the address');\r\n            \r\n            locker[_recipients[i]] = _balances[i];\r\n            emit LockerChanged(_recipients[i], _balances[i]);\r\n        }\r\n    }\r\n    function transferList(address[] _recipients, uint256[] _balances) public onlyOwnerOrAdmin{\r\n        require(_recipients.length == _balances.length,\"The number of wallet arrangements and the number of amounts are different.\");\r\n        \r\n        for (uint i=0; i < _recipients.length; i++) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_balances[i]);\r\n            balances[_recipients[i]] = balances[_recipients[i]].add(_balances[i]);\r\n            emit Transfer(msg.sender,_recipients[i],_balances[i]);\r\n        }\r\n    }\r\n    \r\n\r\n    function() public payable {\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"setLockList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Admin\",\"type\":\"address\"}],\"name\":\"unsetAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"name\":\"_locker\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"transferList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freezen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnFreezen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "HydrogenEnergy", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e7a8954f3823336975bf750fc2bc452191c67508dbfcf86269e207463a243dd9"}