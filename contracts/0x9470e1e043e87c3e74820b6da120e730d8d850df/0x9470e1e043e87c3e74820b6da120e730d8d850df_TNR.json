{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TNR.sol\": {\r\n      \"content\": \"\\n// TG: https://t.me/thenewroadportal\\n// Twitter: https://twitter.com/TheNewRoad_\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract TNR is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _buyerMap;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    mapping(address => bool) internal _isAdmin;\\n    mapping(address => bool) private _isBot;\\n\\n    address payable private _taxWallet;\\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    uint256 private _initialBuyTax = 50;\\n    uint256 private _initialSellTax = 99;\\n    uint256 public _finalTax = 5;\\n\\n    uint256 private _blockAtLaunch;\\n    uint256 private _blockRemoveLimits = 10;\\n\\n    uint8 private constant _decimals = 18;\\n    uint256 private constant _tTotal = 50_000_000 * 10 ** _decimals;\\n    string private constant _name = unicode\\\"The New Road\\\";\\n    string private constant _symbol = unicode\\\"TNR\\\";\\n    uint256 public _maxWalletSize = (_tTotal * 50) / 10000; // 0.5% of total supply\\n    uint256 public _maxLittleWalletSize = (_tTotal * 20) / 10000; // 0.2% of total supply\\n    uint256 private swapThreshold = (_tTotal * 100) / 10000; // 1% of total supply\\n\\n    IUniswapV2Router02 private router;\\n    address public pair;\\n    bool public tradingOpen = false;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(address[] memory addresses) {\\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\n            address(this),\\n            router.WETH()\\n        );\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _isAdmin[addresses[i]] = true;\\n        }\\n        _isAdmin[owner()] = true;\\n\\n        _taxWallet = payable(_msgSender());\\n        _balances[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    // Launch limits functions\\n\\n    /** @dev Remove wallet cap.\\n     * @notice Can only be called by the current owner.\\n     */\\n    function removeLimits() external onlyOwner {\\n        _maxWalletSize = _tTotal;\\n    }\\n\\n    /** @dev Enable trading.\\n     * @notice Can only be called by the current owner.\\n     * @notice Can only be called once.\\n     */\\n    function openTrading() external onlyOwner {\\n        require(!tradingOpen, \\\"trading is already open\\\");\\n        swapEnabled = true;\\n        tradingOpen = true;\\n        _blockAtLaunch = block.number;\\n    }\\n\\n    function manageBot(address account, bool a) external onlyOwner {\\n        _isBot[account] = a;\\n    }\\n\\n    // Transfer functions\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(!_isBot[msg.sender], \\\"You are a bot\\\");\\n        if (msg.sender == pair) {\\n            return _transferFrom(msg.sender, recipient, amount);\\n        } else {\\n            return _basicTransfer(msg.sender, recipient, amount);\\n        }\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(!_isBot[msg.sender], \\\"You are a bot\\\");\\n        require(\\n            _allowances[sender][_msgSender()] >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _transferFrom(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()] - amount\\n        );\\n\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(\\n            _isExcludedFromFee[sender] ||\\n                _isExcludedFromFee[recipient] ||\\n                _isAdmin[sender] ||\\n                _isAdmin[recipient] ||\\n                tradingOpen,\\n            \\\"Not authorized to trade yet\\\"\\n        );\\n\\n        uint256 blockSinceLaunch = block.number - _blockAtLaunch;\\n        uint256 _limit = _maxWalletSize;\\n\\n        // Checks max transaction limit\\n        if (sender != owner() && recipient != owner() && recipient != DEAD) {\\n            if (recipient != pair) {\\n                if (blockSinceLaunch <= _blockRemoveLimits) {\\n                    _limit = _maxLittleWalletSize;\\n                } else if (\\n                    blockSinceLaunch > _blockRemoveLimits && _blockAtLaunch != 0\\n                ) {\\n                    _limit = _maxWalletSize;\\n                }\\n                require(\\n                    _isExcludedFromFee[recipient] ||\\n                        (_balances[recipient] + amount <= _limit),\\n                    \\\"Transfer amount exceeds the MaxWallet size.\\\"\\n                );\\n            }\\n        }\\n\\n        //shouldSwapBack\\n        if (shouldSwapBack() && recipient == pair) {\\n            swapBack();\\n        }\\n\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        //Check if should Take Fee\\n        uint256 amountReceived = (!shouldTakeFee(sender) ||\\n            !shouldTakeFee(recipient))\\n            ? amount\\n            : takeFee(sender, recipient, amount);\\n        _balances[recipient] = _balances[recipient] + (amountReceived);\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + (amount);\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !_isExcludedFromFee[sender];\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 feeAmount = 0;\\n        uint256 blockSinceLaunch = block.number - _blockAtLaunch;\\n        uint256 tax;\\n\\n        if (blockSinceLaunch >= _blockRemoveLimits) {\\n            tax = _finalTax;\\n        } else {\\n            if (sender == pair && recipient != pair) {\\n                tax = _initialBuyTax;\\n            } else if (sender != pair && recipient == pair) {\\n                tax = _initialSellTax;\\n            }\\n        }\\n\\n        feeAmount = (amount * tax) / 100;\\n\\n        if (feeAmount > 0) {\\n            _balances[address(this)] += feeAmount;\\n            emit Transfer(sender, address(this), feeAmount);\\n        }\\n\\n        return amount - feeAmount;\\n    }\\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return\\n            msg.sender != pair &&\\n            !inSwap &&\\n            swapEnabled &&\\n            balanceOf(address(this)) >= swapThreshold;\\n    }\\n\\n    function swapBack() internal lockTheSwap {\\n        uint256 amountToSwap = swapThreshold;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        _approve(address(this), address(router), amountToSwap);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountETHDev = address(this).balance;\\n\\n        if (amountETHDev > 0) {\\n            bool tmpSuccess;\\n            (tmpSuccess, ) = payable(_taxWallet).call{\\n                value: amountETHDev,\\n                gas: 30000\\n            }(\\\"\\\");\\n        }\\n    }\\n\\n    // Threshold management functions\\n\\n    /** @dev Set a new threshold to trigger swapBack.\\n     * @notice Can only be called by the current owner.\\n     */\\n    function setSwapThreshold(uint256 newTax) external onlyOwner {\\n        swapThreshold = newTax;\\n    }\\n\\n    // Internal functions\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    receive() external payable {}\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_finalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxLittleWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"manageBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TNR", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000660000000000000000000000004bfffe2c5785dd8938a8bee1e28ce1ab22efb8110000000000000000000000003f9becb212d437177fbef73d35c180cc338a095e000000000000000000000000e2632d93557b959ea246842a73f87443e65e44890000000000000000000000004c0986bc29d4196fa3a159429f6f4910ab89a2970000000000000000000000002f6939b9081d599a6c271bc6c8c0091ef7173714000000000000000000000000dc135fc775bbcfd549846d8dcaa8ac793d61c85c00000000000000000000000056714990cef7019a7ee8a5bc0e8e6ad991aa76e500000000000000000000000027d622fb7c62f3cf2b5a081836d41aa168d3c01e00000000000000000000000034c14708f340104e51dd6ac07c05ae5792e06a5d000000000000000000000000101b04dd73eb4ff36e15c5b6af670142bd4b48ff000000000000000000000000ba37b119852b2e35c47c3849fa2b260391eca2cb000000000000000000000000d34bc1e00af0f990a1f5acf699445d0f6a8640890000000000000000000000008cf3b6ffbcf375551b72d65f5cb433807983a706000000000000000000000000724274683c7450509acf668d700d2b969def92770000000000000000000000008d61bf160b3d2412bfb54dd2d1377a700913fffe0000000000000000000000000a9c52dcce024dd72aafeb43c1c253b93ab6ee2c0000000000000000000000002425f7f9e92e8b8709162f244146f4915aff3d2f0000000000000000000000000debc16b09a1c7d7c2ef3067d684878e760ce6bf000000000000000000000000ba8a2e85b5892466033873450c4489b61ead52be0000000000000000000000009fbba87b498d19c0fd405559df32cce4f37f693400000000000000000000000068fe79e8a5b73d2c1124685398dcdc7b335d0b4d0000000000000000000000007d92cacb01b4ba1019fb82ec2bb7055159539a660000000000000000000000004b58eac61893860b43001a58c0b3f1143caefca3000000000000000000000000dc07a4c746efeb15736a3154c00163b45a53189b0000000000000000000000002e97307ac625985910cd135d5bbeb2df5339b0810000000000000000000000006b601039adf1ae544bb793d60f044ee226f49820000000000000000000000000911da057b7f735bc54e9ffbe1143dda363dba6fb000000000000000000000000194c64b4f54347c4c8408adbdaf7b9c1dbabae52000000000000000000000000f04b9dcf2892dd019a8cbc7edb670c41b35a39e8000000000000000000000000df974829f6d977370b21e065ae445390cb9d010c000000000000000000000000fefea9427bef554cc572bc4e887a0b9642fd8f4e000000000000000000000000c06e2866f9a8bac3f60a6a72e0d5fe739f48e1ba0000000000000000000000006bec10571682fab2978ef5f3c0b02554e21085fb000000000000000000000000edd0611ffcf1d16a74a3d7f2a997e6b27fa2c02800000000000000000000000040f4a6e76a90f22fc485fde274bfa6ddb01130cf000000000000000000000000cbb48e6d1594e36c88b5dbd14179f2017530012d00000000000000000000000039fe3d856558e965f67d4c4bef1b472be84ffd4d00000000000000000000000015e4381c0375e4c638b7da15bc751e4443ad95a500000000000000000000000000fdf1e1ed8b5fb86c8fc9bc5f0639820187cb05000000000000000000000000c1a66886acbaa82c39c034e796a1b4fe8d4cdaa6000000000000000000000000815237e10ee00533729dd9fadb1ef454ace6d797000000000000000000000000033b0c58b0fcff1c9c67b8e4ea3eff25c6db7b13000000000000000000000000888777612d133aa229f1ca3499dcd106713bd9e5000000000000000000000000b5dd13fc7998ed4fc8941dbb214419eaf41855220000000000000000000000002db3ab465339e70c19c7cf435b1cc2d7a754af2e0000000000000000000000002596201ea71f76ebfb9fee699b7aed8d7704070000000000000000000000000045674fbbd035e366820bf574200be8d513bdb37700000000000000000000000028acc57fde4950dee5975035e904bb1b810c12270000000000000000000000004aea7010cf06a45cdf36a5cfbf7db510ebce51d400000000000000000000000097d36ee186b949a4db19487cf924fbf6c77318120000000000000000000000001b8a9961621971504e8b006734f2d3effddd7046000000000000000000000000aa61a58830996a2b54902bac0913641ccd362828000000000000000000000000bfac218b44ccf59ddf3b5df0f962421167195111000000000000000000000000690351a47fb762b320c21479c6feb437de53dadf000000000000000000000000c494d2a22d0773f9fdd36edea4b472298ecb866d0000000000000000000000006cdb9179442b59359ffa1801c8958bf62c4323db0000000000000000000000003b3cbbe44d2b2e4bc86bc083465c7f739efb23eb0000000000000000000000007c47c1a30b360e70ec4a26ed66c0143d56bf7cf6000000000000000000000000a4021fbb45d910b06c41f02ba0a5c09b68b4687f0000000000000000000000004d7801ad31ce87789b0e43e47ea6629a675460ab00000000000000000000000033902643a81b87cbcb79e9349ee74ab42136eda3000000000000000000000000fd09c22772d6779d2bf55a9e72f79f4403bd92850000000000000000000000007149b53454a8ca2a1a1c46400e77792fe6b7a9cc000000000000000000000000d5fdf506acf8d34ac3faed155599949e8dded8610000000000000000000000007149b53454a8ca2a1a1c46400e77792fe6b7a9cc000000000000000000000000d5fdf506acf8d34ac3faed155599949e8dded8610000000000000000000000009b29f5195a586760ef925a045ca0c8a620e571a50000000000000000000000002959e35296428d32e337a27a1d9da3c892eb86d10000000000000000000000005d021ac6e73a21c0005625b0f0004ec4b628e0720000000000000000000000005a68ffd6f80d8493269f390ddcf8d287bc0989d800000000000000000000000092356837668881dffebfe77a7372d3ac87362215000000000000000000000000d857be58e1e68bd7612ffafa8e6509905389c22f0000000000000000000000000bdce39c1834289847e5cff52b051254f862004a00000000000000000000000097f249cb6dcec63492253ae50f6fe01daf8b3f0b000000000000000000000000db25bb6006965a155a02baf1f3670fc7c9cfada7000000000000000000000000121fdfc8b5b3c76a5edc9d6f148ee12fcfdcddef0000000000000000000000005dd600e6d4d35ee66fea930e4bc2a330ecc951110000000000000000000000000951821a514797c836dfae9753347aebe37989610000000000000000000000004f9932d8945c9ef345f6495eb417bae0e9268d690000000000000000000000005152bf81e2931062328b608d8d40c8e4930f47e0000000000000000000000000847192d86efbca0f6df958ed2017b8fdf8b6942600000000000000000000000058ef05acc900f631b395597f99f7dbbf2db28793000000000000000000000000d2cd7aee6a5b0bbdfedf58537242d7d73d345f870000000000000000000000001dc6b3880144de41845c3191cb505fef5c12bbc20000000000000000000000004817996d3b4b6e8fb66517e9903a106655cecc41000000000000000000000000cf4b7f921af9b2aa0e6fcf8878323ea5c8b371a1000000000000000000000000da6e7ddd8893f9446ce2b13056bc1fe161e9a411000000000000000000000000efc6bf5512e6791b4294f77a74f70926b6d092cd000000000000000000000000fb434f4dd074abcee11f0db03c134f3671302c850000000000000000000000007a149f8338a13a0a14792aee6f640f46dabd6b9300000000000000000000000081e8fb68e3650a675285340429bbd1625a45709c000000000000000000000000decb9a4f01c3320ed0966db3256b058c329b8c0d000000000000000000000000e720a49c58b9ca4e9a1147ae1007636660d128f6000000000000000000000000b7dc7bf0acaa0f9ad86ec73879aad2d8f9d9d18f000000000000000000000000f220a22161ef78afc0754b0fac3e102d4e0e6f57000000000000000000000000476f818a4e3cd77151d9c3486cbe28c6016f58b000000000000000000000000038bae348d175fdd8f75a704c3860064028f8b89f0000000000000000000000004aac182e301cea579bb53ee0f89be73b654f51110000000000000000000000007e34c4564edb5477f07ecce29b4a1329441a63b5000000000000000000000000238db684e51c39ff2b37ac59aefabf368ee86145000000000000000000000000dd50df750c222f18fac10d47682327e205acffe40000000000000000000000000c8dcf998c9ec0131d17ad505044f7e2061bd4a0", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}