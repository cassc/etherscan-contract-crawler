{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/core/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../utils/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IWhitelist.sol\\\";\\n\\n//TOBE removed\\nimport \\\"truffle/console.sol\\\";\\n\\ncontract INFVault is IVault, ERC20, Ownable, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using Math for uint256;\\n\\n    ERC20 public asset;\\n\\n    string public constant version = \\\"3.0\\\";\\n\\n    address public controller;\\n\\n    uint256 public maxDeposit;\\n\\n    uint256 public maxWithdraw;\\n\\n    address public whitelist;\\n\\n    bool public paused;\\n\\n    uint256[] public priceHistory;\\n\\n    event Deposit(\\n        address indexed asset,\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares,\\n        uint256 fee\\n    );\\n\\n    event SetMaxDeposit(uint256 maxDeposit);\\n\\n    event SetMaxWithdraw(uint256 maxWithdraw);\\n\\n    event SetController(address controller);\\n\\n    event SetWhitelist(address _whitelist);\\n\\n    receive() external payable {}\\n\\n    modifier unPaused() {\\n        require(!paused, \\\"PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(\\n            IController(controller).isSubStrategy(_msgSender()),\\n            \\\"NOT_SUBSTRATEGY\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAllowed() {\\n        require(IWhitelist(whitelist).isWhitelisted(msg.sender), \\\"NON_LISTED\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        asset = _asset;\\n        maxDeposit = type(uint256).max;\\n        maxWithdraw = type(uint256).max;\\n    }\\n\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    )\\n        public\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n        unPaused\\n        onlyAllowed\\n        returns (uint256 shares)\\n    {\\n        require(assets != 0, \\\"ZERO_ASSETS\\\");\\n        require(assets <= maxDeposit, \\\"EXCEED_ONE_TIME_MAX_DEPOSIT\\\");\\n\\n        require(msg.value >= assets, \\\"INSUFFICIENT_TRANSFER\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        TransferHelper.safeTransferETH(address(controller), assets);\\n\\n        // Total Assets amount until now\\n        uint256 totalDeposit = IController(controller).totalAssets();\\n\\n        // Calls Deposit function on controller\\n        uint256 newDeposit = IController(controller).deposit(assets);\\n\\n        require(newDeposit > 0, \\\"INVALID_DEPOSIT_SHARES\\\");\\n\\n        // Calculate share amount to be mint\\n        shares = totalSupply() == 0 || totalDeposit == 0\\n            ? assets.mulDiv(\\n                10 ** decimals(),\\n                10 ** asset.decimals(),\\n                Math.Rounding.Down\\n            )\\n            : newDeposit.mulDiv(\\n                totalSupply(),\\n                totalDeposit,\\n                Math.Rounding.Down\\n            );\\n\\n        // Mint INDEX token to receiver\\n        _mint(receiver, shares);\\n\\n        emit Deposit(address(asset), msg.sender, receiver, assets, shares);\\n    }\\n\\n    function mint(\\n        uint256 amount,\\n        address account\\n    ) external override onlyStrategy {\\n        _mint(account, amount);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver\\n    )\\n        public\\n        virtual\\n        nonReentrant\\n        unPaused\\n        onlyAllowed\\n        returns (uint256 shares)\\n    {\\n        require(assets != 0, \\\"ZERO_ASSETS\\\");\\n        require(assets <= maxWithdraw, \\\"EXCEED_ONE_TIME_MAX_WITHDRAW\\\");\\n        // Calculate share amount to be burnt\\n        shares =\\n            (totalSupply() * assets) /\\n            IController(controller).totalAssets();\\n\\n        require(shares > 0, \\\"INVALID_WITHDRAW_SHARES\\\");\\n        console.log(\\n            \\\"shares %s totalSupply() * assets to %s,totalAssets %s\\\",\\n            shares,\\n            (totalSupply() * assets),\\n            IController(controller).totalAssets()\\n        );\\n        require(balanceOf(msg.sender) >= shares, \\\"EXCEED_TOTAL_DEPOSIT\\\");\\n\\n        _withdraw(assets, shares, receiver);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver\\n    )\\n        public\\n        virtual\\n        nonReentrant\\n        unPaused\\n        onlyAllowed\\n        returns (uint256 assets)\\n    {\\n        require(shares != 0, \\\"ZERO_SHARES\\\");\\n        require(shares <= balanceOf(msg.sender), \\\"EXCEED_TOTAL_BALANCE\\\");\\n\\n        assets =\\n            (shares * IController(controller).totalAssets()) /\\n            totalSupply();\\n\\n        require(assets <= maxWithdraw, \\\"EXCEED_ONE_TIME_MAX_WITHDRAW\\\");\\n\\n        // Withdraw asset\\n        _withdraw(assets, shares, receiver);\\n    }\\n\\n    function totalAssets() public view virtual returns (uint256) {\\n        return IController(controller).totalAssets();\\n    }\\n\\n    function assetsPerShare() public view returns (uint256) {\\n        return IController(controller).totalAssets() / totalSupply();\\n    }\\n\\n    function convertToShares(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply();\\n\\n        return supply == 0 ? assets : (assets * supply) / totalAssets();\\n    }\\n\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply();\\n\\n        return supply == 0 ? shares : (shares * totalAssets()) / supply;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////\\n    //                 SET CONFIGURE LOGIC                       //\\n    ///////////////////////////////////////////////////////////////\\n\\n    function setPriceHistory() public onlyOwner {\\n        uint256 supply = totalSupply();\\n        if (supply != 0) {\\n            priceHistory.push((totalAssets() * 10000) / supply);\\n        }\\n    }\\n\\n    function getPriceHistory() public view returns (uint256[] memory) {\\n        return priceHistory;\\n    }\\n\\n    function setMaxDeposit(uint256 _maxDeposit) public onlyOwner {\\n        require(_maxDeposit > 0, \\\"INVALID_MAX_DEPOSIT\\\");\\n        maxDeposit = _maxDeposit;\\n\\n        emit SetMaxDeposit(maxDeposit);\\n    }\\n\\n    function setMaxWithdraw(uint256 _maxWithdraw) public onlyOwner {\\n        require(_maxWithdraw > 0, \\\"INVALID_MAX_WITHDRAW\\\");\\n        maxWithdraw = _maxWithdraw;\\n\\n        emit SetMaxWithdraw(maxWithdraw);\\n    }\\n\\n    function setController(address _controller) public onlyOwner {\\n        require(_controller != address(0), \\\"INVALID_ZERO_ADDRESS\\\");\\n        controller = _controller;\\n\\n        emit SetController(controller);\\n    }\\n\\n    function setWhitelist(address _whitelist) public onlyOwner {\\n        require(_whitelist != address(0), \\\"INVALID_ZERO_ADDRESS\\\");\\n        whitelist = _whitelist;\\n\\n        emit SetWhitelist(whitelist);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////\\n    //                      PAUSE/RESUME                              //\\n    ////////////////////////////////////////////////////////////////////\\n\\n    function pause() public onlyOwner {\\n        require(!paused, \\\"CURRENTLY_PAUSED\\\");\\n        paused = true;\\n    }\\n\\n    function resume() public onlyOwner {\\n        require(paused, \\\"CURRENTLY_RUNNING\\\");\\n        paused = false;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////\\n    //                      INTERNAL                                  //\\n    ////////////////////////////////////////////////////////////////////\\n\\n    function _withdraw(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver\\n    ) internal {\\n        require(shares != 0, \\\"SHARES_TOO_LOW\\\");\\n        // Calls Withdraw function on controller\\n        (uint256 withdrawn, uint256 fee) = IController(controller).withdraw(\\n            assets,\\n            receiver\\n        );\\n        require(withdrawn > 0, \\\"INVALID_WITHDRAWN_SHARES\\\");\\n\\n        // Burn shares amount\\n        _burn(msg.sender, shares);\\n\\n        emit Withdraw(\\n            address(asset),\\n            msg.sender,\\n            receiver,\\n            assets,\\n            shares,\\n            fee\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"truffle/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let argumentsLength := mload(payload)\\n            let argumentsOffset := add(payload, 32)\\n            pop(staticcall(gas(), consoleAddress, argumentsOffset, argumentsLength, 0, 0))\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logAddress(address value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", value));\\n    }\\n\\n    function logBool(bool value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", value));\\n    }\\n\\n    function logString(string memory value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", value));\\n    }\\n\\n    function logUint256(uint256 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", value));\\n    }\\n\\n    function logUint(uint256 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", value));\\n    }\\n\\n    function logBytes(bytes memory value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", value));\\n    }\\n\\n    function logInt256(int256 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", value));\\n    }\\n\\n    function logInt(int256 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", value));\\n    }\\n\\n    function logBytes1(bytes1 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", value));\\n    }\\n\\n    function logBytes2(bytes2 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", value));\\n    }\\n\\n    function logBytes3(bytes3 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", value));\\n    }\\n\\n    function logBytes4(bytes4 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", value));\\n    }\\n\\n    function logBytes5(bytes5 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", value));\\n    }\\n\\n    function logBytes6(bytes6 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", value));\\n    }\\n\\n    function logBytes7(bytes7 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", value));\\n    }\\n\\n    function logBytes8(bytes8 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", value));\\n    }\\n\\n    function logBytes9(bytes9 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", value));\\n    }\\n\\n    function logBytes10(bytes10 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", value));\\n    }\\n\\n    function logBytes11(bytes11 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", value));\\n    }\\n\\n    function logBytes12(bytes12 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", value));\\n    }\\n\\n    function logBytes13(bytes13 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", value));\\n    }\\n\\n    function logBytes14(bytes14 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", value));\\n    }\\n\\n    function logBytes15(bytes15 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", value));\\n    }\\n\\n    function logBytes16(bytes16 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", value));\\n    }\\n\\n    function logBytes17(bytes17 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", value));\\n    }\\n\\n    function logBytes18(bytes18 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", value));\\n    }\\n\\n    function logBytes19(bytes19 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", value));\\n    }\\n\\n    function logBytes20(bytes20 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", value));\\n    }\\n\\n    function logBytes21(bytes21 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", value));\\n    }\\n\\n    function logBytes22(bytes22 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", value));\\n    }\\n\\n    function logBytes23(bytes23 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", value));\\n    }\\n\\n    function logBytes24(bytes24 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", value));\\n    }\\n\\n    function logBytes25(bytes25 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", value));\\n    }\\n\\n    function logBytes26(bytes26 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", value));\\n    }\\n\\n    function logBytes27(bytes27 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", value));\\n    }\\n\\n    function logBytes28(bytes28 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", value));\\n    }\\n\\n    function logBytes29(bytes29 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", value));\\n    }\\n\\n    function logBytes30(bytes30 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", value));\\n    }\\n\\n    function logBytes31(bytes31 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", value));\\n    }\\n\\n    function logBytes32(bytes32 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", value));\\n    }\\n\\n    function log(address value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", value));\\n    }\\n\\n    function log(bool value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", value));\\n    }\\n\\n    function log(string memory value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", value));\\n    }\\n\\n    function log(uint256 value) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", value));\\n    }\\n\\n    function log(address value1, address value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", value1, value2));\\n    }\\n\\n    function log(address value1, bool value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", value1, value2));\\n    }\\n\\n    function log(address value1, string memory value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", value1, value2));\\n    }\\n\\n    function log(address value1, uint256 value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", value1, value2));\\n    }\\n\\n    function log(bool value1, address value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", value1, value2));\\n    }\\n\\n    function log(bool value1, bool value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", value1, value2));\\n    }\\n\\n    function log(bool value1, string memory value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", value1, value2));\\n    }\\n\\n    function log(bool value1, uint256 value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", value1, value2));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", value1, value2));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", value1, value2));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", value1, value2));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", value1, value2));\\n    }\\n\\n    function log(uint256 value1, address value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", value1, value2));\\n    }\\n\\n    function log(uint256 value1, bool value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", value1, value2));\\n    }\\n\\n    function log(uint256 value1, string memory value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", value1, value2));\\n    }\\n\\n    function log(uint256 value1, uint256 value2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", value1, value2));\\n    }\\n\\n    function log(address value1, address value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, address value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, address value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, address value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, bool value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, bool value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, bool value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, bool value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, string memory value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, string memory value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, string memory value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, string memory value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, uint256 value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, uint256 value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, uint256 value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, uint256 value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, address value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, address value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, address value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, address value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, bool value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, bool value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, bool value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, bool value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, string memory value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, string memory value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, string memory value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, string memory value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, uint256 value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, uint256 value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, uint256 value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(bool value1, uint256 value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", value1, value2, value3));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, address value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, address value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, address value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, address value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, bool value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, bool value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, bool value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, bool value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, string memory value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, string memory value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, string memory value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, string memory value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, address value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, bool value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, string memory value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", value1, value2, value3));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, uint256 value3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", value1, value2, value3));\\n    }\\n\\n    function log(address value1, address value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, address value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, bool value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, string memory value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(address value1, uint256 value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, address value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, bool value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, string memory value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(bool value1, uint256 value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, address value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, bool value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, string memory value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    /**\\n    * Prints to `stdout` with newline. Multiple arguments can be passed, with the\\n    * first used as the primary message and all additional used as substitution\\n    * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html) (the arguments are all passed to `util.format()`).\\n    *\\n    * ```solidity\\n    * uint256 count = 5;\\n    * console.log('count: %d', count);\\n    * // Prints: count: 5, to stdout\\n    * console.log('count:', count);\\n    * // Prints: count: 5, to stdout\\n    * ```\\n    *\\n    * See `util.format()` for more information.\\n    */\\n    function log(string memory value1, uint256 value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, address value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, bool value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, string memory value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, address value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, address value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, address value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, address value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, bool value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, bool value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, bool value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, bool value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, string memory value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, string memory value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, string memory value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, string memory value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, uint256 value3, address value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, uint256 value3, bool value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, uint256 value3, string memory value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", value1, value2, value3, value4));\\n    }\\n\\n    function log(uint256 value1, uint256 value2, uint256 value3, uint256 value4) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", value1, value2, value3, value4));\\n    }\\n}\"\r\n    },\r\n    \"/contracts/utils/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    /**\\n        Transfer Util for both Ether and ERC20\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (address(token) == address(0)) {\\n            safeTransferETH(to, value);\\n        } else {\\n            safeTransferToken(address(token), to, value);\\n        }\\n    }\\n\\n    function safeTransferToken(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWhitelist {\\n    function isWhitelisted(address _addr) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function deposit(uint256 assets, address receiver) external payable returns (uint256 shares);\\n\\n    function mint(uint256 amount, address account) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IController {\\n    function totalAssets() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _receiver) external returns (uint256, uint256);\\n\\n    function isSubStrategy(address addr) external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"}],\"name\":\"SetMaxDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"}],\"name\":\"SetMaxWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"}],\"name\":\"setMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdraw\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPriceHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "INFVault", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000015494e44455820455448205354524154454759204c500000000000000000000000000000000000000000000000000000000000000000000000000000000000000c494e4445585f4554484c45560000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}