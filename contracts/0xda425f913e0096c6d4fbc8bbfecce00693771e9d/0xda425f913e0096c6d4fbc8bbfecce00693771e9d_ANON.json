{"SourceCode": "/*\r\n\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2840\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2808\u2804\u2804\u2804\u2801\u2804\u2801\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u28c0\u28c0\u28e4\u28e4\u28f4\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28e6\u28e4\u28e4\u28c4\u28c0\u2840\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u28f4\u28ff\u28ff\u287f\u28ff\u28bf\u28df\u28ff\u28fb\u28df\u287f\u28df\u28ff\u28df\u287f\u28df\u28ff\u28fb\u28df\u28ff\u28fb\u28bf\u28fb\u287f\u28ff\u28bf\u28f7\u28c6\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2898\u28ff\u28af\u28f7\u287f\u287f\u287f\u28bf\u28bf\u28f7\u28ef\u287f\u28fd\u28de\u28f7\u28fb\u28af\u28f7\u28fb\u28fe\u287f\u287f\u28bf\u28bf\u28bf\u28af\u28df\u28de\u286e\u2840\u2804\u2804\r\n                    \u2804\u2804\u2804\u28b8\u289e\u281f\u2803\u28c9\u2889\u2809\u2809\u2813\u282b\u28bf\u28ff\u28f7\u28b7\u28fb\u28de\u28ff\u28fe\u285f\u283d\u281a\u280a\u2809\u2809\u2809\u2819\u283b\u28de\u28b5\u2802\u2804\u2804\r\n                    \u2804\u2804\u2804\u289c\u28af\u28fa\u28bf\u28fb\u28ff\u28ff\u28f7\u28d4\u2844\u2804\u2808\u281b\u28ff\u28ff\u287e\u280b\u2801\u2804\u2804\u28c4\u28f6\u28fe\u28ff\u287f\u28ff\u2873\u284c\u2857\u2845\u2804\u2804\r\n                    \u2804\u2804\u2804\u28bd\u28b1\u28b3\u28b9\u286a\u285e\u282e\u282f\u28af\u287b\u286c\u2850\u28a8\u28bf\u28ff\u28ff\u2880\u2810\u2865\u28fb\u287b\u282f\u2873\u28b3\u28b9\u289c\u289c\u289c\u288e\u2806\u2804\u2804\r\n                    \u2804\u2804\u2820\u28fb\u288c\u2818\u280c\u2842\u2808\u2801\u2809\u2801\u2818\u2811\u28a7\u28d5\u28ff\u28ff\u28ff\u28a4\u286a\u281a\u2802\u2808\u2801\u2801\u2801\u2802\u2851\u2821\u2848\u28ae\u2805\u2804\u2804\r\n                    \u2804\u2804\u2820\u28f3\u28ff\u28ff\u28fd\u28ed\u28f6\u28f6\u28f6\u28f6\u28f6\u28fa\u28df\u28fe\u28fb\u28ff\u28ef\u28af\u28bf\u28f3\u28f6\u28f6\u28f6\u28d6\u28f6\u28ee\u28ed\u28f7\u28fd\u28d7\u280d\u2804\u2804\r\n                    \u2804\u2804\u2880\u28bb\u287f\u287f\u28df\u28ff\u28fb\u28fd\u28df\u28ff\u28af\u28df\u28de\u2877\u28ff\u28ff\u28ef\u28bf\u28bd\u28af\u28ff\u28fb\u28df\u28ff\u28fb\u28df\u28ff\u28fb\u28bf\u28ff\u2880\u2804\u2804\r\n                    \u2804\u2804\u2804\u2851\u284f\u282f\u286f\u2873\u286f\u28d7\u28af\u289f\u287d\u28d7\u28ef\u28df\u28ff\u28ff\u28fe\u28eb\u28bf\u28fd\u283e\u287d\u28fa\u28b3\u286b\u285e\u2857\u285d\u2895\u2815\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2882\u284e\u2805\u2843\u2887\u2807\u2807\u28c3\u28e7\u287a\u287b\u2873\u286b\u28ff\u287f\u28df\u281e\u283d\u282f\u28a7\u28c5\u28c3\u2823\u2831\u2851\u2851\u2828\u2890\u288c\u2802\u2804\u2804\r\n                    \u2804\u2804\u2804\u2810\u283c\u28e6\u2880\u2804\u28f6\u28ff\u28bf\u28ff\u28e7\u28c4\u284c\u2802\u2822\u2829\u2802\u2811\u28c1\u28c5\u28fe\u28bf\u28df\u28f7\u2826\u2804\u2804\u2864\u2847\u286a\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2828\u28bb\u28e7\u2845\u2848\u281b\u283f\u283f\u283f\u281b\u2801\u2804\u2880\u2840\u2804\u2804\u2818\u283b\u283f\u283f\u282f\u2813\u2801\u28a0\u28f1\u287f\u2891\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2808\u288c\u28bf\u28f7\u2850\u2824\u28c0\u28c0\u28c2\u28c0\u2880\u2880\u2853\u281d\u2842\u2840\u2880\u2880\u2880\u28c0\u28c0\u2824\u288a\u28fc\u285f\u2861\u2841\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2808\u28a2\u281a\u28ff\u28c4\u2808\u2809\u281b\u281b\u281f\u283f\u283f\u281f\u283f\u283b\u283b\u281b\u281b\u2809\u2804\u28e0\u283e\u2891\u2830\u2808\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2811\u288c\u283f\u28e6\u2861\u28f1\u28f8\u28f8\u28c6\u2804\u2804\u2804\u28f0\u28d5\u2894\u2894\u2821\u28fc\u281e\u2861\u2801\u2801\u2804\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2811\u289d\u28b7\u28d5\u2877\u28ff\u287f\u2804\u2804\u2820\u28ff\u28ef\u28ef\u2873\u287d\u284b\u280c\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2819\u28ae\u28ff\u28fd\u28ef\u2804\u2804\u28a8\u28ff\u28ff\u2877\u286b\u2803\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2818\u2819\u281d\u2802\u2804\u2898\u280b\u2803\u2801\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n                    \u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804             \r\n           ___                                                                    \r\n          /   |   ____   ____    ____    __  __   ____ ___   ____   __  __   _____\r\n         / /| |  / __ \\ / __ \\  / __ \\  / / / /  / __ `__ \\ / __ \\ / / / /  / ___/\r\n        / ___ | / / / // /_/ / / / / / / /_/ /  / / / / / // /_/ // /_/ /  (__  ) \r\n       /_/  |_|/_/ /_/ \\____/ /_/ /_/  \\__, /  /_/ /_/ /_/ \\____/ \\__,_/  /____/  \r\n                                      /____/                                      \r\n                                                                                       \r\n                                                                                                                     \r\n-> Telegram: https://t.me/anontokenerc\r\n-> Twitter: https://x.com/anoncoinerc\r\n-> Website: https://anoncoin.app\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier:MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any _account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IDexSwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDexSwapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IDexSwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ncontract ANON is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"anonymous\";\r\n    string private _symbol = \"anon\";\r\n    uint8 private _decimals = 8; \r\n\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public immutable zeroAddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    uint _buyTax = 1;     \r\n    uint _sellTax = 1;     \r\n\r\n    address public developmentWallet = address(0xA60d00A31223F26BE50D2271fFd70B1c4745cbec);\r\n\r\n    uint256 feedenominator = 100;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isMarketPair;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n\r\n    uint256 private _totalSupply = 100_000_000 * 10**_decimals;\r\n\r\n    uint256 public _maxTxAmount =  _totalSupply.mul(15).div(1000);     // 1.5%\r\n    uint256 public _walletMax = _totalSupply.mul(15).div(1000);        // 1.5%\r\n\r\n    uint256 public swapThreshold = 50_000 * 10**_decimals;\r\n\r\n    bool public swapEnabled = true;\r\n    bool public swapbylimit = false;\r\n    bool public EnableTxLimit = true;\r\n    bool public checkWalletLimit = true;\r\n\r\n    IDexSwapRouter public dexRouter;\r\n    address public dexPair;\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    constructor() {\r\n\r\n        address dev = address(0xf54be7946af6e1020e3602be61B3e61C09e7Db0D);\r\n\r\n        IDexSwapRouter _dexRouter = IDexSwapRouter(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        dexPair = IDexSwapFactory(_dexRouter.factory())\r\n            .createPair(address(this), _dexRouter.WETH());\r\n\r\n        dexRouter = _dexRouter;\r\n        \r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[dev] = true;\r\n        isExcludedFromFee[address(dexRouter)] = true;\r\n\r\n        isWalletLimitExempt[dev] = true;\r\n        isWalletLimitExempt[address(dexRouter)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[deadAddress] = true;\r\n        isWalletLimitExempt[zeroAddress] = true;\r\n        \r\n        isTxLimitExempt[deadAddress] = true;\r\n        isTxLimitExempt[zeroAddress] = true;\r\n        isTxLimitExempt[dev] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(dexRouter)] = true;\r\n\r\n        isMarketPair[address(dexPair)] = true;\r\n        isWalletLimitExempt[address(dexPair)] = true;\r\n\r\n        _allowances[address(this)][address(dexPair)] = ~uint256(0);\r\n        _allowances[address(this)][address(dexRouter)] = ~uint256(0);\r\n\r\n        _balances[dev] = _totalSupply;\r\n        emit Transfer(address(0), dev, _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n       return _balances[account];     \r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(deadAddress)).sub(balanceOf(zeroAddress));\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n     //to recieve ETH from Router when swaping\r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: Exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n\r\n        require(sender != address(0));\r\n        require(recipient != address(0));\r\n        require(amount > 0);\r\n    \r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        else {\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool overMinimumTokenBalance = contractTokenBalance >= swapThreshold;\r\n\r\n            if (\r\n                overMinimumTokenBalance && \r\n                !inSwap && \r\n                !isMarketPair[sender] && \r\n                swapEnabled &&\r\n                !isExcludedFromFee[sender] &&\r\n                !isExcludedFromFee[recipient]\r\n                ) {\r\n                swapBack(contractTokenBalance);\r\n            }\r\n\r\n            if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient] && EnableTxLimit) {\r\n                require(amount <= _maxTxAmount, \"Exceeds maxTxAmount\");\r\n            } \r\n            \r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n            uint256 finalAmount = shouldNotTakeFee(sender,recipient) ? amount : takeFee(sender, recipient, amount);\r\n\r\n            if(checkWalletLimit && !isWalletLimitExempt[recipient]) {\r\n                require(balanceOf(recipient).add(finalAmount) <= _walletMax,\"Exceeds Wallet\");\r\n            }\r\n\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function shouldNotTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if(isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\r\n            return true;\r\n        }\r\n        else if (isMarketPair[sender] || isMarketPair[recipient]) {\r\n            return false;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint feeAmount;\r\n\r\n        unchecked {\r\n\r\n            if(isMarketPair[sender]) { \r\n                feeAmount = amount.mul(_buyTax).div(feedenominator);\r\n            } \r\n            else if(isMarketPair[recipient]) { \r\n                feeAmount = amount.mul(_sellTax).div(feedenominator);\r\n            }\r\n\r\n            if(feeAmount > 0) {\r\n                _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n                emit Transfer(sender, address(this), feeAmount);\r\n            }\r\n\r\n            return amount.sub(feeAmount);\r\n        }\r\n        \r\n    }\r\n\r\n    function swapBack(uint contractBalance) internal swapping {\r\n\r\n        if(swapbylimit) contractBalance = swapThreshold;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(contractBalance);\r\n        uint256 amountReceived = address(this).balance.sub(initialBalance);\r\n\r\n        (bool os,) = payable(developmentWallet).call{value: amountReceived}(\"\");\r\n        if(os) {}\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function rescueFunds() external onlyOwner { \r\n        (bool os,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(os,\"Transaction Failed!!\");\r\n    }\r\n\r\n    function rescueTokens(address _token,address recipient,uint _amount) external onlyOwner {\r\n        (bool success, ) = address(_token).call(abi.encodeWithSignature('transfer(address,uint256)',  recipient, _amount));\r\n        require(success, 'Token payment failed');\r\n    }\r\n\r\n    function enableTxLimit(bool _status) external onlyOwner {\r\n        EnableTxLimit = _status;\r\n    }\r\n\r\n    function enableWalletLimit(bool _status) external onlyOwner {\r\n        checkWalletLimit = _status;\r\n    }\r\n\r\n    function excludeFromFee(address _adr,bool _status) external onlyOwner {\r\n        isExcludedFromFee[_adr] = _status;\r\n    }\r\n\r\n    function excludeWalletLimit(address _adr,bool _status) external onlyOwner {\r\n        isWalletLimitExempt[_adr] = _status;\r\n    }\r\n\r\n    function excludeTxLimit(address _adr,bool _status) external onlyOwner {\r\n        isTxLimitExempt[_adr] = _status;\r\n    }\r\n\r\n    function setMaxWalletLimit(uint256 newLimit) external onlyOwner() {\r\n        _walletMax = newLimit;\r\n    }\r\n\r\n    function setTxLimit(uint256 newLimit) external onlyOwner() {\r\n        _maxTxAmount = newLimit;\r\n    }\r\n\r\n    function setMarketPair(address _pair, bool _status) external onlyOwner {\r\n        isMarketPair[_pair] = _status;\r\n        if(_status) {\r\n            isWalletLimitExempt[_pair] = _status;\r\n        }\r\n    }\r\n\r\n    function setDevelopmentWallet(address _addr) external onlyOwner {\r\n        developmentWallet = _addr;\r\n    }\r\n\r\n    function setFee(uint _buy, uint _sell) external onlyOwner {\r\n        _buyTax = _buy;\r\n        _sellTax = _sell;\r\n    }\r\n   \r\n    function setSwapBackSettings(uint _threshold, bool _enabled, bool _limited)\r\n        external\r\n        onlyOwner\r\n    {\r\n        swapEnabled = _enabled;\r\n        swapbylimit = _limited;\r\n        swapThreshold = _threshold;\r\n    }\r\n\r\n    function setManualRouter(address _router) external onlyOwner {\r\n        dexRouter = IDexSwapRouter(_router);\r\n    }\r\n\r\n    function setManualPair(address _pair) external onlyOwner {\r\n        dexPair = _pair;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EnableTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"excludeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"excludeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setManualPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setManualRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMarketPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_limited\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapbylimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ANON", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5a1bae33df3f2b9885c4ad009c2439f2ec77061378ad1719094cb26bbdce8376"}