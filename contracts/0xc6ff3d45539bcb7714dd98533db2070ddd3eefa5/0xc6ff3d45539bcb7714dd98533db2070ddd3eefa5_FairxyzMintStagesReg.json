{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/IFairxyzMintStagesRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\nstruct Stage {\\n    uint40 startTime;\\n    uint40 endTime;\\n    uint40 mintsPerWallet;\\n    uint40 phaseLimit;\\n    uint96 price;\\n    bool signatureReleased;\\n}\\n\\nstruct FairxyzParameters {\\n    address fairxyzSigner;\\n    address fairxyzWithdrawAddress;\\n    uint256 fairxyzFee;\\n}\\n\\ninterface IFairxyzMintStagesRegistry {\\n    error NoActiveStage();\\n    error NoStages();\\n    error NoStagesSpecified();\\n    error PhaseLimitsOverlap();\\n    error SkippedStages();\\n    error StageDoesNotExist();\\n    error StageHasEnded();\\n    error StageHasAlreadyStarted();\\n    error StageLimitAboveMax();\\n    error StageLimitBelowMin();\\n    error StageTimesOverlap();\\n    error TooManyUpcomingStages();\\n    error Unauthorized();\\n\\n    /// @dev Emitted when a range of stages for a schedule are updated.\\n    event ScheduleStagesUpdated(\\n        address indexed registrant,\\n        uint256 indexed scheduleId,\\n        uint256 startIndex,\\n        Stage[] stages\\n    );\\n\\n    /// @dev Emitted when a range of stages for a schedule are cancelled.\\n    event ScheduleStagesCancelled(\\n        address indexed registrant,\\n        uint256 indexed scheduleId,\\n        uint256 startIndex\\n    );\\n\\n    /**\\n     * @dev Cancels all stages from the specified index onwards.\\n     *\\n     * Requirements:\\n     * - `fromIndex` must be less than the total number of stages\\n     *\\n     * @param registrant the address of the registrant the schedule is managed by\\n     * @param scheduleId the id of the schedule to cancel the stages for\\n     * @param fromIndex the index from which to cancel stages\\n     */\\n    function cancelStages(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 fromIndex\\n    ) external;\\n\\n    /**\\n     * @dev Sets the parameters relevant to platform minting on Fair.xyz\\n     *\\n     * Requirements:\\n     * - `msg.sender` must be the contract owner\\n     *\\n     * @param parameters a struct of parameters for Fair.xyz-related platform minting\\n     */\\n    function setFairParameters(FairxyzParameters memory parameters) external;\\n\\n    /**\\n     * @dev Sets a new series of stages, overwriting any existing stages and cancelling any stages after the last new stage.\\n     *\\n     * @param registrant the address of the registrant the schedule is managed by\\n     * @param scheduleId the id of the schedule to update the stages for\\n     * @param firstStageIndex the index from which to update stages\\n     * @param stages array of new stages to add to / overwrite existing stages\\n     * @param minPhaseLimit the minimum phaseLimit for the new stages e.g. current supply of the token the schedule is for\\n     * @param maxPhaseLimit the maximum phaseLimit for the new stages e.g. maximum supply of the token the schedule is for\\n     */\\n    function setStages(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 firstStageIndex,\\n        Stage[] calldata stages,\\n        uint256 minPhaseLimit,\\n        uint256 maxPhaseLimit\\n    ) external;\\n\\n    /**\\n     * @dev Finds the active stage for a schedule based on the current time being between the start and end times.\\n     * @dev Reverts if no active stage is found.\\n     *\\n     * @param scheduleId The id of the schedule to find the active stage for\\n     *\\n     * @return fairxyzParameters the parameters around the Fair.xyz signature, withdrawal address and fees\\n     * @return index The index of the active stage\\n     * @return stage The active stage data\\n     */\\n    function viewActiveStage(\\n        address registrant,\\n        uint256 scheduleId\\n    ) external view returns (FairxyzParameters memory fairxyzParameters, uint256 index, Stage memory stage);\\n\\n    /**\\n     * @dev Finds the final stage for a schedule.\\n     * @dev Does not revert. Instead, it returns an empty Stage if no stages exist for the schedule.\\n     *\\n     * @param scheduleId The id of the schedule to find the final stage for\\n     *\\n     * @return index The index of the final stage\\n     * @return stage The final stage data\\n     */\\n    function viewFinalStage(\\n        address registrant,\\n        uint256 scheduleId\\n    ) external view returns (uint256 index, Stage memory stage);\\n\\n    /**\\n     * @dev Finds the index of the current/upcoming stage which has not yet ended.\\n     * @dev A stage may not exist at the returned index if all existing stages have ended.\\n     *\\n     * @param scheduleId The id of the schedule to find the latest stage index for\\n     *\\n     * @return index\\n     */\\n    function viewLatestStageIndex(\\n        address registrant,\\n        uint256 scheduleId\\n    ) external view returns (uint256 index);\\n\\n    /**\\n     * @dev Returns the stage data for the specified schedule id and stage index.\\n     * @dev Reverts if a stage does not exist or has been deleted at the index.\\n     *\\n     * @param scheduleId The id of the schedule to get the stage from\\n     * @param stageIndex The index of the stage to get\\n     *\\n     * @return stage\\n     */\\n    function viewStage(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 stageIndex\\n    ) external view returns (Stage memory stage);\\n}\\n\"\r\n    },\r\n    \"contracts/v2/MintStages/FairxyzMintStagesRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport {IFairxyzMintStagesRegistry, Stage, FairxyzParameters} from \\\"../interfaces/IFairxyzMintStagesRegistry.sol\\\";\\n\\n/**\\n * @title Fair.xyz Mint Stages Registry\\n * @author Fair.xyz Developers\\n * @notice A registry for scheduling sequential mint stages used by NFT minting contracts.\\n */\\ncontract FairxyzMintStagesRegistry is\\n    Initializable,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    IFairxyzMintStagesRegistry\\n{\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    uint256 internal immutable MAX_UPCOMING_STAGES; // used to limit the number of upcoming stages to prevent gas exhaustion\\n\\n    /// @dev map scheduleId to stages\\n    mapping(address => mapping(uint256 => mapping(uint256 => Stage)))\\n        internal _scheduleStages;\\n\\n    /// @dev map scheduleId to stages count\\n    mapping(address => mapping(uint256 => uint256))\\n        internal _scheduleStagesCount;\\n\\n    \\n    FairxyzParameters public fairxyzParameters;\\n\\n    modifier onlyRegistrant(address registrant) {\\n        if (msg.sender != registrant) revert Unauthorized();\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(uint256 maxUpcomingStages_) {\\n        MAX_UPCOMING_STAGES = maxUpcomingStages_;\\n        _disableInitializers();\\n    }\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    // * PUBLIC * //\\n\\n    /**\\n     * @dev See {IFairxyzMintStagesRegistry-cancelStages}.\\n     */\\n    function cancelStages(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 fromIndex\\n    ) external virtual override onlyRegistrant(registrant) {\\n        uint256 currentTotalStages = _scheduleStagesCount[registrant][\\n            scheduleId\\n        ];\\n\\n        if (fromIndex < currentTotalStages) {\\n            if (\\n                _scheduleStages[registrant][scheduleId][fromIndex].startTime <=\\n                block.timestamp\\n            ) {\\n                revert StageHasAlreadyStarted();\\n            }\\n\\n            _scheduleStagesCount[registrant][scheduleId] = fromIndex;\\n\\n            emit ScheduleStagesCancelled(registrant, scheduleId, fromIndex);\\n        } else {\\n            revert StageDoesNotExist();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzMintStagesRegistry-setFairParameters}.\\n     */\\n    function setFairParameters(FairxyzParameters memory parameters) external override onlyOwner {\\n        fairxyzParameters = parameters;\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzMintStagesRegistry-setStages}.\\n     */\\n    function setStages(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 firstStageIndex,\\n        Stage[] calldata stages,\\n        uint256 minPhaseLimit,\\n        uint256 maxPhaseLimit\\n    ) external virtual override onlyRegistrant(registrant) {\\n        uint256 stagesCount = stages.length;\\n        if (stagesCount == 0) {\\n            revert NoStagesSpecified();\\n        }\\n\\n        uint256 newStagesCount = firstStageIndex + stagesCount;\\n        if (\\n            newStagesCount - viewLatestStageIndex(registrant, scheduleId) >\\n            MAX_UPCOMING_STAGES\\n        ) {\\n            revert TooManyUpcomingStages();\\n        }\\n\\n        Stage memory newStage = stages[0];\\n\\n        // first new stage phaseLimit must be greater than or equal to the specified minimum\\n        if (newStage.phaseLimit > 0) {\\n            if (newStage.phaseLimit < minPhaseLimit)\\n                revert StageLimitBelowMin();\\n        }\\n\\n        _setStage(registrant, scheduleId, firstStageIndex, newStage);\\n\\n        if (stagesCount > 1) {\\n            // validate and store additional stages\\n            newStage = _setAdditionalStages(\\n                registrant,\\n                scheduleId,\\n                firstStageIndex,\\n                stages,\\n                stagesCount\\n            );\\n        }\\n\\n        // last new stage phaseLimit must be less than or equal to the specified maximum\\n        if (\\n            maxPhaseLimit > 0 &&\\n            (newStage.phaseLimit == 0 || newStage.phaseLimit > maxPhaseLimit)\\n        ) revert StageLimitAboveMax();\\n\\n        uint256 originalStagesCount = _scheduleStagesCount[registrant][\\n            scheduleId\\n        ];\\n\\n        _scheduleStagesCount[registrant][scheduleId] = newStagesCount;\\n\\n        emit ScheduleStagesUpdated(\\n            registrant,\\n            scheduleId,\\n            firstStageIndex,\\n            stages\\n        );\\n\\n        if (newStagesCount < originalStagesCount) {\\n            emit ScheduleStagesCancelled(\\n                registrant,\\n                scheduleId,\\n                newStagesCount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzMintStagesRegistry-viewActiveStage}.\\n     */\\n    function viewActiveStage(\\n        address registrant,\\n        uint256 scheduleId\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (FairxyzParameters memory, uint256 index, Stage memory stage)\\n    {\\n        for (\\n            index = _scheduleStagesCount[registrant][scheduleId];\\n            index > 0;\\n\\n        ) {\\n            unchecked {\\n                --index;\\n            }\\n\\n            stage = _scheduleStages[registrant][scheduleId][index];\\n\\n            if (\\n                block.timestamp >= stage.startTime &&\\n                (stage.endTime == 0 || block.timestamp <= stage.endTime)\\n            ) {\\n                return (fairxyzParameters, index, stage);\\n            }\\n        }\\n\\n        revert NoActiveStage();\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzMintStagesRegistry-viewFinalStage}.\\n     */\\n    function viewFinalStage(\\n        address registrant,\\n        uint256 scheduleId\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256 index, Stage memory stage)\\n    {\\n        uint256 scheduleStagesCount = _scheduleStagesCount[registrant][\\n            scheduleId\\n        ];\\n\\n        if (scheduleStagesCount == 0) {\\n            return (0, Stage(0, 0, 0, 0, 0, false));\\n        }\\n\\n        index = scheduleStagesCount - 1;\\n        stage = _scheduleStages[registrant][scheduleId][index];\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzMintStagesRegistry-viewLatestStageIndex}.\\n     */\\n    function viewLatestStageIndex(\\n        address registrant,\\n        uint256 scheduleId\\n    ) public view virtual override returns (uint256 index) {\\n        for (\\n            index = _scheduleStagesCount[registrant][scheduleId];\\n            index > 0;\\n\\n        ) {\\n            unchecked {\\n                --index;\\n            }\\n\\n            if (\\n                block.timestamp >\\n                _scheduleStages[registrant][scheduleId][index].endTime\\n            ) {\\n                return index + 1;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzMintStagesRegistry-viewStage}.\\n     */\\n    function viewStage(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 stageIndex\\n    ) external view virtual override returns (Stage memory stage) {\\n        if (stageIndex < _scheduleStagesCount[registrant][scheduleId]) {\\n            return _scheduleStages[registrant][scheduleId][stageIndex];\\n        }\\n        revert StageDoesNotExist();\\n    }\\n\\n    // * INTERNAL * //\\n\\n    /**\\n     * @dev Check that two stage phase limits do not overlap.\\n     * @dev Reverts if the phase limits overlap.\\n     *\\n     * @param previousStagePhaseLimit the phase limit of the previous stage\\n     * @param nextStagePhaseLimit the phase limit of the next stage which should be greater than or equal to the previous stage phase limit\\n     */\\n    function _phaseLimitsDoNotOverlap(\\n        uint256 previousStagePhaseLimit,\\n        uint256 nextStagePhaseLimit\\n    ) internal pure virtual {\\n        if (previousStagePhaseLimit == 0) {\\n            if (nextStagePhaseLimit != 0) {\\n                revert PhaseLimitsOverlap();\\n            }\\n        } else if (\\n            nextStagePhaseLimit > 0 &&\\n            nextStagePhaseLimit < previousStagePhaseLimit\\n        ) {\\n            revert PhaseLimitsOverlap();\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensures that the given stage times are sequential.\\n     * @dev Reverts if any of the times overlap based on the logic.\\n     *\\n     * @param threshold the minimum time e.g. used for the previous stage end time or current time\\n     * @param startTime the start time of the stage to check\\n     * @param endTime the end time of the stage to check\\n     */\\n    function _timesDoNotOverlap(\\n        uint256 threshold,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) internal pure virtual {\\n        if (threshold == 0 || threshold >= startTime)\\n            revert StageTimesOverlap();\\n\\n        if (endTime != 0 && endTime <= startTime) revert StageTimesOverlap();\\n    }\\n\\n    // * PRIVATE * //\\n\\n    /**\\n     * @dev sets a new stage for a schedule at the index specified\\n     * - if a stage already exists at the index, checks if it can be overwritten\\n     * - if it is not the first stage, checks that it correctly follows the existing previous stage\\n     *\\n     * @param registrant the address of the registrant the schedule is managed by\\n     * @param scheduleId the id of the schedule to set a new stage for\\n     * @param index the index to set the stage at\\n     * @param newStage the new stage data\\n     */\\n    function _setStage(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 index,\\n        Stage memory newStage\\n    ) internal {\\n        uint256 currentTotalStages = _scheduleStagesCount[registrant][\\n            scheduleId\\n        ];\\n\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        // Check if overwriting existing stage is possible\\n        if (index < currentTotalStages) {\\n            Stage memory existingStage = _scheduleStages[registrant][\\n                scheduleId\\n            ][index];\\n\\n            // cannot edit stage that has ended\\n            if (\\n                existingStage.endTime > 0 &&\\n                existingStage.endTime < blockTimestamp\\n            ) revert StageHasEnded();\\n\\n            if (existingStage.startTime <= blockTimestamp) {\\n                // can't edit start time if the existing stage has already started\\n                if (existingStage.startTime != newStage.startTime) {\\n                    revert StageHasAlreadyStarted();\\n                } else {\\n                    _timesDoNotOverlap(\\n                        newStage.startTime - 1,\\n                        newStage.startTime,\\n                        newStage.endTime\\n                    );\\n                }\\n            } else {\\n                _timesDoNotOverlap(\\n                    blockTimestamp,\\n                    newStage.startTime,\\n                    newStage.endTime\\n                );\\n            }\\n        } else {\\n            // the new stage is either after the existing stages, or the first without existing stages\\n            // only the times need to be checked, with start time compared to the block timestamp in this case\\n            _timesDoNotOverlap(\\n                blockTimestamp,\\n                newStage.startTime,\\n                newStage.endTime\\n            );\\n        }\\n\\n        // Compare to existing previous stage\\n        if (index > 0) {\\n            if (index > currentTotalStages) revert SkippedStages();\\n\\n            Stage memory previousStage = _scheduleStages[registrant][\\n                scheduleId\\n            ][index - 1];\\n\\n            if (previousStage.endTime == 0) revert StageTimesOverlap();\\n\\n            if (previousStage.endTime > blockTimestamp) {\\n                _timesDoNotOverlap(\\n                    previousStage.endTime,\\n                    newStage.startTime,\\n                    newStage.endTime\\n                );\\n                _phaseLimitsDoNotOverlap(\\n                    previousStage.phaseLimit,\\n                    newStage.phaseLimit\\n                );\\n            }\\n        }\\n\\n        _scheduleStages[registrant][scheduleId][index] = newStage;\\n    }\\n\\n    /**\\n     * @dev used to validate and store additional stages after the first in a new series of stages\\n     *\\n     * Requirements:\\n     * - the first stage must have already been set using `_setStage()` which has its own validations against existing stages\\n     *\\n     * @param registrant the address of the registrant the schedule is managed by\\n     * @param scheduleId the id of the schedule to set additional stages for\\n     * @param firstStageIndex the index after which to set the stages\\n     * @param stages data for the stages, including the first stage which has already been set\\n     * @param stagesCount the count of the stages (including the first) - this is passed so it doesn't have to be recalculated\\n     *\\n     * @return finalStage returns the last stage after all stages are validated, to be used in further logic in `setStages()`\\n     */\\n    function _setAdditionalStages(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 firstStageIndex,\\n        Stage[] calldata stages,\\n        uint256 stagesCount\\n    ) internal virtual returns (Stage memory finalStage) {\\n        Stage memory previousStage;\\n        Stage memory nextStage;\\n\\n        unchecked {\\n            uint256 i = 1;\\n\\n            do {\\n                previousStage = stages[i - 1];\\n                nextStage = stages[i];\\n\\n                _timesDoNotOverlap(\\n                    previousStage.endTime,\\n                    nextStage.startTime,\\n                    nextStage.endTime\\n                );\\n                _phaseLimitsDoNotOverlap(\\n                    previousStage.phaseLimit,\\n                    nextStage.phaseLimit\\n                );\\n\\n                _scheduleStages[registrant][scheduleId][\\n                    firstStageIndex + i\\n                ] = nextStage;\\n\\n                ++i;\\n            } while (i < stagesCount);\\n        }\\n\\n        return nextStage;\\n    }\\n\\n    /**\\n     * @dev See {UUPSUpgradeable-_authorizeUpgrade}.\\n     */\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal virtual override onlyOwner {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxUpcomingStages_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NoActiveStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStages\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStagesSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PhaseLimitsOverlap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SkippedStages\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageHasAlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageLimitAboveMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageLimitBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageTimesOverlap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyUpcomingStages\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"ScheduleStagesCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"mintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"phaseLimit\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Stage[]\",\"name\":\"stages\",\"type\":\"tuple[]\"}],\"name\":\"ScheduleStagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"}],\"name\":\"cancelStages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fairxyzParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fairxyzSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fairxyzWithdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fairxyzFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fairxyzSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fairxyzWithdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fairxyzFee\",\"type\":\"uint256\"}],\"internalType\":\"struct FairxyzParameters\",\"name\":\"parameters\",\"type\":\"tuple\"}],\"name\":\"setFairParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstStageIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"mintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"phaseLimit\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"}],\"internalType\":\"struct Stage[]\",\"name\":\"stages\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minPhaseLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPhaseLimit\",\"type\":\"uint256\"}],\"name\":\"setStages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"}],\"name\":\"viewActiveStage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fairxyzSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fairxyzWithdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fairxyzFee\",\"type\":\"uint256\"}],\"internalType\":\"struct FairxyzParameters\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"mintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"phaseLimit\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"}],\"internalType\":\"struct Stage\",\"name\":\"stage\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"}],\"name\":\"viewFinalStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"mintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"phaseLimit\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"}],\"internalType\":\"struct Stage\",\"name\":\"stage\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"}],\"name\":\"viewLatestStageIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stageIndex\",\"type\":\"uint256\"}],\"name\":\"viewStage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"mintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"phaseLimit\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"}],\"internalType\":\"struct Stage\",\"name\":\"stage\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FairxyzMintStagesRegistry", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}