{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BorrowerOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Interfaces/IBorrowerOperations.sol\\\";\\r\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\r\\nimport \\\"./Interfaces/ITHUSDToken.sol\\\";\\r\\nimport \\\"./Interfaces/ICollSurplusPool.sol\\\";\\r\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\r\\nimport \\\"./Interfaces/IPCV.sol\\\";\\r\\nimport \\\"./Dependencies/LiquityBase.sol\\\";\\r\\nimport \\\"./Dependencies/Ownable.sol\\\";\\r\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\r\\nimport \\\"./Dependencies/SendCollateral.sol\\\";\\r\\n\\r\\ncontract BorrowerOperations is LiquityBase, Ownable, CheckContract, SendCollateral, IBorrowerOperations {\\r\\n\\r\\n    string constant public NAME = \\\"BorrowerOperations\\\";\\r\\n\\r\\n    // --- Connected contract declarations ---\\r\\n\\r\\n    ITroveManager public troveManager;\\r\\n\\r\\n    address public collateralAddress;\\r\\n    address public gasPoolAddress;\\r\\n    address public pcvAddress;\\r\\n    address public stabilityPoolAddress;\\r\\n\\r\\n    ICollSurplusPool collSurplusPool;\\r\\n\\r\\n    ITHUSDToken public thusdToken;\\r\\n\\r\\n    // A doubly linked list of Troves, sorted by their collateral ratios\\r\\n    ISortedTroves public sortedTroves;\\r\\n\\r\\n    /* --- Variable container structs  ---\\r\\n\\r\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\r\\n    \\\"CompilerError: Stack too deep\\\". */\\r\\n\\r\\n    struct LocalVariables_adjustTrove {\\r\\n        uint256 price;\\r\\n        uint256 collChange;\\r\\n        uint256 netDebtChange;\\r\\n        bool isCollIncrease;\\r\\n        uint256 debt;\\r\\n        uint256 coll;\\r\\n        uint256 oldICR;\\r\\n        uint256 newICR;\\r\\n        uint256 newTCR;\\r\\n        uint256 THUSDFee;\\r\\n        uint256 newDebt;\\r\\n        uint256 newColl;\\r\\n        uint256 stake;\\r\\n    }\\r\\n\\r\\n    struct LocalVariables_openTrove {\\r\\n        uint256 price;\\r\\n        uint256 THUSDFee;\\r\\n        uint256 netDebt;\\r\\n        uint256 compositeDebt;\\r\\n        uint256 ICR;\\r\\n        uint256 NICR;\\r\\n        uint256 stake;\\r\\n        uint256 arrayIndex;\\r\\n    }\\r\\n\\r\\n    struct ContractsCache {\\r\\n        ITroveManager troveManager;\\r\\n        IActivePool activePool;\\r\\n        ITHUSDToken thusdToken;\\r\\n    }\\r\\n\\r\\n    enum BorrowerOperation {\\r\\n        openTrove,\\r\\n        closeTrove,\\r\\n        adjustTrove\\r\\n    }\\r\\n\\r\\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, BorrowerOperation operation);\\r\\n    // --- Dependency setters ---\\r\\n\\r\\n    function setAddresses(\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _defaultPoolAddress,\\r\\n        address _stabilityPoolAddress,\\r\\n        address _gasPoolAddress,\\r\\n        address _collSurplusPoolAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _pcvAddress,\\r\\n        address _collateralAddress\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        // This makes impossible to open a trove with zero withdrawn THUSD\\r\\n        assert(MIN_NET_DEBT > 0);\\r\\n\\r\\n        checkContract(_troveManagerAddress);\\r\\n        checkContract(_activePoolAddress);\\r\\n        checkContract(_defaultPoolAddress);\\r\\n        checkContract(_stabilityPoolAddress);\\r\\n        checkContract(_gasPoolAddress);\\r\\n        checkContract(_collSurplusPoolAddress);\\r\\n        checkContract(_priceFeedAddress);\\r\\n        checkContract(_sortedTrovesAddress);\\r\\n        checkContract(_thusdTokenAddress);\\r\\n        checkContract(_pcvAddress);\\r\\n        if (_collateralAddress != address(0)) {\\r\\n            checkContract(_collateralAddress);\\r\\n        }\\r\\n\\r\\n        troveManager = ITroveManager(_troveManagerAddress);\\r\\n        activePool = IActivePool(_activePoolAddress);\\r\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\r\\n        stabilityPoolAddress = _stabilityPoolAddress;\\r\\n        gasPoolAddress = _gasPoolAddress;\\r\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\r\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\r\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\r\\n        thusdToken = ITHUSDToken(_thusdTokenAddress);\\r\\n        pcvAddress = _pcvAddress;\\r\\n        collateralAddress = _collateralAddress;\\r\\n        \\r\\n        require(\\r\\n            (Ownable(_defaultPoolAddress).owner() != address(0) || \\r\\n            defaultPool.collateralAddress() == _collateralAddress) &&\\r\\n            (Ownable(_activePoolAddress).owner() != address(0) || \\r\\n            activePool.collateralAddress() == _collateralAddress) &&\\r\\n            (Ownable(_stabilityPoolAddress).owner() != address(0) || \\r\\n            IStabilityPool(stabilityPoolAddress).collateralAddress() == _collateralAddress) &&\\r\\n            (Ownable(_collSurplusPoolAddress).owner() != address(0) || \\r\\n            collSurplusPool.collateralAddress() == _collateralAddress) &&\\r\\n            (address(IPCV(pcvAddress).thusdToken()) == address(0) || \\r\\n            address(IPCV(pcvAddress).collateralERC20()) == _collateralAddress),\\r\\n            \\\"The same collateral address must be used for the entire set of contracts\\\"\\r\\n        );\\r\\n\\r\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\r\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\r\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\r\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\r\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\r\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\r\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\r\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\r\\n        emit THUSDTokenAddressChanged(_thusdTokenAddress);\\r\\n        emit PCVAddressChanged(_pcvAddress);\\r\\n        emit CollateralAddressChanged(_collateralAddress);\\r\\n\\r\\n        _renounceOwnership();\\r\\n    }\\r\\n\\r\\n    /// Calls on PCV behalf\\r\\n    function mintBootstrapLoanFromPCV(uint256 _thusdToMint) external {\\r\\n        require(msg.sender == pcvAddress, \\\"BorrowerOperations: caller must be PCV\\\");\\r\\n        thusdToken.mint(pcvAddress, _thusdToMint);\\r\\n    }\\r\\n\\r\\n    function burnDebtFromPCV(uint256 _thusdToBurn) external {\\r\\n        require(msg.sender == pcvAddress, \\\"BorrowerOperations: caller must be PCV\\\");\\r\\n        thusdToken.burn(pcvAddress, _thusdToBurn);\\r\\n    }\\r\\n\\r\\n    // --- Borrower Trove Operations ---\\r\\n\\r\\n    function openTrove(uint256 _maxFeePercentage, uint256 _THUSDAmount, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable override {\\r\\n        ContractsCache memory contractsCache = ContractsCache(troveManager, activePool, thusdToken);\\r\\n        LocalVariables_openTrove memory vars;\\r\\n\\r\\n        vars.price = priceFeed.fetchPrice();\\r\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\r\\n\\r\\n        _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\r\\n        _requireTroveisNotActive(contractsCache.troveManager, msg.sender);\\r\\n\\r\\n        vars.THUSDFee;\\r\\n        vars.netDebt = _THUSDAmount;\\r\\n\\r\\n        if (!isRecoveryMode) {\\r\\n            vars.THUSDFee = _triggerBorrowingFee(contractsCache.troveManager, contractsCache.thusdToken, _THUSDAmount, _maxFeePercentage);\\r\\n            vars.netDebt += vars.THUSDFee;\\r\\n        }\\r\\n\\r\\n        _requireAtLeastMinNetDebt(vars.netDebt);\\r\\n\\r\\n        // ICR is based on the composite debt, i.e. the requested THUSD amount + THUSD borrowing fee + THUSD gas comp.\\r\\n        vars.compositeDebt = _getCompositeDebt(vars.netDebt);\\r\\n        assert(vars.compositeDebt > 0);\\r\\n\\r\\n        // if ETH overwrite the asset value\\r\\n        _assetAmount = getAssetAmount(_assetAmount);\\r\\n        vars.ICR = LiquityMath._computeCR(_assetAmount, vars.compositeDebt, vars.price);\\r\\n        vars.NICR = LiquityMath._computeNominalCR(_assetAmount, vars.compositeDebt);\\r\\n\\r\\n        if (isRecoveryMode) {\\r\\n            _requireICRisAboveCCR(vars.ICR);\\r\\n        } else {\\r\\n            _requireICRisAboveMCR(vars.ICR);\\r\\n            uint256 newTCR = _getNewTCRFromTroveChange(_assetAmount, true, vars.compositeDebt, true, vars.price);  // bools: coll increase, debt increase\\r\\n            _requireNewTCRisAboveCCR(newTCR);\\r\\n        }\\r\\n\\r\\n        // Set the trove struct's properties\\r\\n        contractsCache.troveManager.setTroveStatus(msg.sender, ITroveManager.Status.active);\\r\\n        contractsCache.troveManager.increaseTroveColl(msg.sender, _assetAmount);\\r\\n        contractsCache.troveManager.increaseTroveDebt(msg.sender, vars.compositeDebt);\\r\\n\\r\\n        contractsCache.troveManager.updateTroveRewardSnapshots(msg.sender);\\r\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(msg.sender);\\r\\n\\r\\n        sortedTroves.insert(msg.sender, vars.NICR, _upperHint, _lowerHint);\\r\\n        vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(msg.sender);\\r\\n        emit TroveCreated(msg.sender, vars.arrayIndex);\\r\\n\\r\\n        /*\\r\\n         * Move the collateral to the Active Pool, and mint the THUSDAmount to the borrower\\r\\n         * If the user has insuffient tokens to do the transfer to the Active Pool an error will cause the transaction to revert.\\r\\n         */\\r\\n        _activePoolAddColl(contractsCache.activePool, _assetAmount);\\r\\n        _withdrawTHUSD(contractsCache.activePool, contractsCache.thusdToken, msg.sender, _THUSDAmount, vars.netDebt);\\r\\n        // Move the THUSD gas compensation to the Gas Pool\\r\\n        _withdrawTHUSD(contractsCache.activePool, contractsCache.thusdToken, gasPoolAddress, THUSD_GAS_COMPENSATION, THUSD_GAS_COMPENSATION);\\r\\n\\r\\n        emit TroveUpdated(msg.sender, vars.compositeDebt, _assetAmount, vars.stake, BorrowerOperation.openTrove);\\r\\n        emit THUSDBorrowingFeePaid(msg.sender, vars.THUSDFee);\\r\\n    }\\r\\n\\r\\n    // Send collateral to a trove\\r\\n    function addColl(uint256 _assetAmount, address _upperHint, address _lowerHint) external payable override {\\r\\n        _assetAmount = getAssetAmount(_assetAmount);\\r\\n        _adjustTrove(msg.sender, 0, 0, false, _assetAmount, _upperHint, _lowerHint, 0);\\r\\n    }\\r\\n\\r\\n    // Send collateral to a trove. Called by only the Stability Pool.\\r\\n    function moveCollateralGainToTrove(address _borrower, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable override {\\r\\n        _requireCallerIsStabilityPool();\\r\\n        _assetAmount = getAssetAmount(_assetAmount);\\r\\n        _adjustTrove(_borrower, 0, 0, false, _assetAmount, _upperHint, _lowerHint, 0);\\r\\n    }\\r\\n\\r\\n    function getAssetAmount(uint256 _assetAmount) internal view returns (uint256) {\\r\\n        if (collateralAddress == address(0)) {\\r\\n            return msg.value;\\r\\n        }\\r\\n\\r\\n        require(msg.value == 0, \\\"BorrowerOperations: ERC20 collateral needed, not ETH\\\");\\r\\n        return _assetAmount;\\r\\n    }\\r\\n\\r\\n    // Withdraw collateral from a trove\\r\\n    function withdrawColl(uint256 _collWithdrawal, address _upperHint, address _lowerHint) external override {\\r\\n        _adjustTrove(msg.sender, _collWithdrawal, 0, false, 0, _upperHint, _lowerHint, 0);\\r\\n    }\\r\\n\\r\\n    // Withdraw THUSD tokens from a trove: mint new THUSD tokens to the owner, and increase the trove's debt accordingly\\r\\n    function withdrawTHUSD(uint256 _maxFeePercentage, uint256 _THUSDAmount, address _upperHint, address _lowerHint) external override {\\r\\n        _adjustTrove(msg.sender, 0, _THUSDAmount, true, 0, _upperHint, _lowerHint, _maxFeePercentage);\\r\\n    }\\r\\n\\r\\n    // Repay THUSD tokens to a Trove: Burn the repaid THUSD tokens, and reduce the trove's debt accordingly\\r\\n    function repayTHUSD(uint256 _THUSDAmount, address _upperHint, address _lowerHint) external override {\\r\\n        _adjustTrove(msg.sender, 0, _THUSDAmount, false, 0, _upperHint, _lowerHint, 0);\\r\\n    }\\r\\n\\r\\n    function adjustTrove(uint256 _maxFeePercentage, uint256 _collWithdrawal, uint256 _THUSDChange, bool _isDebtIncrease, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable override {\\r\\n        _assetAmount = getAssetAmount(_assetAmount);\\r\\n        _adjustTrove(msg.sender, _collWithdrawal, _THUSDChange, _isDebtIncrease, _assetAmount, _upperHint, _lowerHint, _maxFeePercentage);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * _adjustTrove(): Alongside a debt change, this function can perform either a collateral top-up or a collateral withdrawal.\\r\\n    *\\r\\n    * It therefore expects either a positive msg.value, or a positive _collWithdrawal argument.\\r\\n    *\\r\\n    * If both are positive, it will revert.\\r\\n    */\\r\\n    function _adjustTrove(address _borrower, uint256 _collWithdrawal, uint256 _THUSDChange, bool _isDebtIncrease, uint256 _assetAmount, address _upperHint, address _lowerHint, uint256 _maxFeePercentage) internal {\\r\\n        ContractsCache memory contractsCache = ContractsCache(troveManager, activePool, thusdToken);\\r\\n        LocalVariables_adjustTrove memory vars;\\r\\n\\r\\n        vars.price = priceFeed.fetchPrice();\\r\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\r\\n\\r\\n        if (_isDebtIncrease) {\\r\\n            _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\r\\n            _requireNonZeroDebtChange(_THUSDChange);\\r\\n        }\\r\\n        _requireSingularCollChange(_collWithdrawal, _assetAmount);\\r\\n        _requireNonZeroAdjustment(_collWithdrawal, _THUSDChange, _assetAmount);\\r\\n        _requireTroveisActive(contractsCache.troveManager, _borrower);\\r\\n\\r\\n        // Confirm the operation is either a borrower adjusting their own trove, or a pure collateral transfer from the Stability Pool to a trove\\r\\n        assert(msg.sender == _borrower || (msg.sender == stabilityPoolAddress && _assetAmount > 0 && _THUSDChange == 0));\\r\\n\\r\\n        contractsCache.troveManager.applyPendingRewards(_borrower);\\r\\n\\r\\n        // Get the collChange based on whether or not collateral was sent in the transaction\\r\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(_assetAmount, _collWithdrawal);\\r\\n\\r\\n        vars.netDebtChange = _THUSDChange;\\r\\n\\r\\n        // If the adjustment incorporates a debt increase and system is in Normal Mode, then trigger a borrowing fee\\r\\n        if (_isDebtIncrease && !isRecoveryMode) {\\r\\n            vars.THUSDFee = _triggerBorrowingFee(contractsCache.troveManager, contractsCache.thusdToken, _THUSDChange, _maxFeePercentage);\\r\\n            vars.netDebtChange += vars.THUSDFee; // The raw debt change includes the fee\\r\\n        }\\r\\n\\r\\n        vars.debt = contractsCache.troveManager.getTroveDebt(_borrower);\\r\\n        vars.coll = contractsCache.troveManager.getTroveColl(_borrower);\\r\\n\\r\\n        // Get the trove's old ICR before the adjustment, and what its new ICR will be after the adjustment\\r\\n        vars.oldICR = LiquityMath._computeCR(vars.coll, vars.debt, vars.price);\\r\\n        vars.newICR = _getNewICRFromTroveChange(vars.coll, vars.debt, vars.collChange, vars.isCollIncrease, vars.netDebtChange, _isDebtIncrease, vars.price);\\r\\n        assert(_collWithdrawal <= vars.coll);\\r\\n\\r\\n        // Check the adjustment satisfies all conditions for the current system mode\\r\\n        _requireValidAdjustmentInCurrentMode(isRecoveryMode, _collWithdrawal, _isDebtIncrease, vars);\\r\\n\\r\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough THUSD\\r\\n        if (!_isDebtIncrease && _THUSDChange > 0) {\\r\\n            _requireAtLeastMinNetDebt(_getNetDebt(vars.debt) - vars.netDebtChange);\\r\\n            _requireValidTHUSDRepayment(vars.debt, vars.netDebtChange);\\r\\n            _requireSufficientTHUSDBalance(contractsCache.thusdToken, _borrower, vars.netDebtChange);\\r\\n        }\\r\\n\\r\\n        (vars.newColl, vars.newDebt) = _updateTroveFromAdjustment(contractsCache.troveManager, _borrower, vars.collChange, vars.isCollIncrease, vars.netDebtChange, _isDebtIncrease);\\r\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(_borrower);\\r\\n\\r\\n        // Re-insert trove in to the sorted list\\r\\n        uint256 newNICR = _getNewNominalICRFromTroveChange(vars.coll, vars.debt, vars.collChange, vars.isCollIncrease, vars.netDebtChange, _isDebtIncrease);\\r\\n        sortedTroves.reInsert(_borrower, newNICR, _upperHint, _lowerHint);\\r\\n\\r\\n        emit TroveUpdated(_borrower, vars.newDebt, vars.newColl, vars.stake, BorrowerOperation.adjustTrove);\\r\\n        emit THUSDBorrowingFeePaid(msg.sender,  vars.THUSDFee);\\r\\n\\r\\n        // Use the unmodified _THUSDChange here, as we don't send the fee to the user\\r\\n        _moveTokensAndCollateralfromAdjustment(\\r\\n            contractsCache.activePool,\\r\\n            contractsCache.thusdToken,\\r\\n            msg.sender,\\r\\n            vars.collChange,\\r\\n            vars.isCollIncrease,\\r\\n            _THUSDChange,\\r\\n            _isDebtIncrease,\\r\\n            vars.netDebtChange\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function closeTrove() external override {\\r\\n        ITroveManager troveManagerCached = troveManager;\\r\\n        IActivePool activePoolCached = activePool;\\r\\n        ITHUSDToken thusdTokenCached = thusdToken;\\r\\n        bool canMint = thusdTokenCached.mintList(address(this));\\r\\n\\r\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\r\\n        uint256 price = priceFeed.fetchPrice();\\r\\n        if (canMint) {\\r\\n            _requireNotInRecoveryMode(price);\\r\\n        }\\r\\n\\r\\n        troveManagerCached.applyPendingRewards(msg.sender);\\r\\n\\r\\n        uint256 coll = troveManagerCached.getTroveColl(msg.sender);\\r\\n        uint256 debt = troveManagerCached.getTroveDebt(msg.sender);\\r\\n\\r\\n        _requireSufficientTHUSDBalance(thusdTokenCached, msg.sender, debt - THUSD_GAS_COMPENSATION);\\r\\n        if (canMint) {\\r\\n            uint256 newTCR = _getNewTCRFromTroveChange(coll, false, debt, false, price);\\r\\n            _requireNewTCRisAboveCCR(newTCR);\\r\\n        }\\r\\n\\r\\n        troveManagerCached.removeStake(msg.sender);\\r\\n        troveManagerCached.closeTrove(msg.sender);\\r\\n\\r\\n        emit TroveUpdated(msg.sender, 0, 0, 0, BorrowerOperation.closeTrove);\\r\\n\\r\\n        // Burn the repaid THUSD from the user's balance and the gas compensation from the Gas Pool\\r\\n        _repayTHUSD(activePoolCached, thusdTokenCached, msg.sender, debt - THUSD_GAS_COMPENSATION);\\r\\n        _repayTHUSD(activePoolCached, thusdTokenCached, gasPoolAddress, THUSD_GAS_COMPENSATION);\\r\\n\\r\\n        // Send the collateral back to the user\\r\\n        activePoolCached.sendCollateral(msg.sender, coll);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\r\\n     */\\r\\n    function claimCollateral() external override {\\r\\n        // send collateral from CollSurplus Pool to owner\\r\\n        collSurplusPool.claimColl(msg.sender);\\r\\n    }\\r\\n\\r\\n    // --- Helper functions ---\\r\\n\\r\\n    function _triggerBorrowingFee(ITroveManager _troveManager, ITHUSDToken _thusdToken, uint256 _THUSDAmount, uint256 _maxFeePercentage) internal returns (uint) {\\r\\n        _troveManager.decayBaseRateFromBorrowing(); // decay the baseRate state variable\\r\\n        uint256 THUSDFee = _troveManager.getBorrowingFee(_THUSDAmount);\\r\\n\\r\\n        _requireUserAcceptsFee(THUSDFee, _THUSDAmount, _maxFeePercentage);\\r\\n\\r\\n        // Send fee to PCV contract\\r\\n        _thusdToken.mint(pcvAddress, THUSDFee);\\r\\n        return THUSDFee;\\r\\n    }\\r\\n\\r\\n    function _getUSDValue(uint256 _coll, uint256 _price) internal pure returns (uint) {\\r\\n        uint256 usdValue = _price * _coll / DECIMAL_PRECISION;\\r\\n\\r\\n        return usdValue;\\r\\n    }\\r\\n\\r\\n    function _getCollChange(\\r\\n        uint256 _collReceived,\\r\\n        uint256 _requestedCollWithdrawal\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns(uint256 collChange, bool isCollIncrease)\\r\\n    {\\r\\n        if (_collReceived != 0) {\\r\\n            collChange = _collReceived;\\r\\n            isCollIncrease = true;\\r\\n        } else {\\r\\n            collChange = _requestedCollWithdrawal;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update trove's coll and debt based on whether they increase or decrease\\r\\n    function _updateTroveFromAdjustment\\r\\n    (\\r\\n        ITroveManager _troveManager,\\r\\n        address _borrower,\\r\\n        uint256 _collChange,\\r\\n        bool _isCollIncrease,\\r\\n        uint256 _debtChange,\\r\\n        bool _isDebtIncrease\\r\\n    )\\r\\n        internal\\r\\n        returns (uint, uint)\\r\\n    {\\r\\n        uint256 newColl = (_isCollIncrease) ? _troveManager.increaseTroveColl(_borrower, _collChange)\\r\\n                                        : _troveManager.decreaseTroveColl(_borrower, _collChange);\\r\\n        uint256 newDebt = (_isDebtIncrease) ? _troveManager.increaseTroveDebt(_borrower, _debtChange)\\r\\n                                        : _troveManager.decreaseTroveDebt(_borrower, _debtChange);\\r\\n\\r\\n        return (newColl, newDebt);\\r\\n    }\\r\\n\\r\\n    function _moveTokensAndCollateralfromAdjustment\\r\\n    (\\r\\n        IActivePool _activePool,\\r\\n        ITHUSDToken _thusdToken,\\r\\n        address _borrower,\\r\\n        uint256 _collChange,\\r\\n        bool _isCollIncrease,\\r\\n        uint256 _THUSDChange,\\r\\n        bool _isDebtIncrease,\\r\\n        uint256 _netDebtChange\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        if (_isDebtIncrease) {\\r\\n            _withdrawTHUSD(_activePool, _thusdToken, _borrower, _THUSDChange, _netDebtChange);\\r\\n        } else {\\r\\n            _repayTHUSD(_activePool, _thusdToken, _borrower, _THUSDChange);\\r\\n        }\\r\\n\\r\\n        if (_isCollIncrease) {\\r\\n            _activePoolAddColl(_activePool, _collChange);\\r\\n        } else {\\r\\n            _activePool.sendCollateral(_borrower, _collChange);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Send collateral to Active Pool and increase its recorded collateral balance\\r\\n    function _activePoolAddColl(IActivePool _activePool, uint256 _amount) internal {\\r\\n        sendCollateralFrom(IERC20(collateralAddress), msg.sender, address(_activePool), _amount);\\r\\n\\r\\n        if (collateralAddress == address(0)) {\\r\\n            return;\\r\\n        }\\r\\n        _activePool.updateCollateralBalance(_amount);\\r\\n    }\\r\\n\\r\\n    // Issue the specified amount of THUSD to _account and increases the total active debt (_netDebtIncrease potentially includes a THUSDFee)\\r\\n    function _withdrawTHUSD(IActivePool _activePool, ITHUSDToken _thusdToken, address _account, uint256 _THUSDAmount, uint256 _netDebtIncrease) internal {\\r\\n        _activePool.increaseTHUSDDebt(_netDebtIncrease);\\r\\n        _thusdToken.mint(_account, _THUSDAmount);\\r\\n    }\\r\\n\\r\\n    // Burn the specified amount of THUSD from _account and decreases the total active debt\\r\\n    function _repayTHUSD(IActivePool _activePool, ITHUSDToken _thusdToken, address _account, uint256 _THUSD) internal {\\r\\n        _activePool.decreaseTHUSDDebt(_THUSD);\\r\\n        _thusdToken.burn(_account, _THUSD);\\r\\n    }\\r\\n\\r\\n    // --- 'Require' wrapper functions ---\\r\\n\\r\\n    function _requireSingularCollChange(uint256 _collWithdrawal, uint256 _assetAmount) internal pure {\\r\\n        require(_assetAmount == 0 || _collWithdrawal == 0, \\\"BorrowerOperations: Cannot withdraw and add coll\\\");\\r\\n    }\\r\\n\\r\\n    function _requireCallerIsBorrower(address _borrower) internal view {\\r\\n        require(msg.sender == _borrower, \\\"BorrowerOps: Caller must be the borrower for a withdrawal\\\");\\r\\n    }\\r\\n\\r\\n    function _requireNonZeroAdjustment(uint256 _collWithdrawal, uint256 _THUSDChange, uint256 _assetAmount) internal pure {\\r\\n        require(_assetAmount != 0 || _collWithdrawal != 0 || _THUSDChange != 0, \\\"BorrowerOps: There must be either a collateral change or a debt change\\\");\\r\\n    }\\r\\n\\r\\n    function _requireTroveisActive(ITroveManager _troveManager, address _borrower) internal view {\\r\\n        ITroveManager.Status status = _troveManager.getTroveStatus(_borrower);\\r\\n        require(status == ITroveManager.Status.active, \\\"BorrowerOps: Trove does not exist or is closed\\\");\\r\\n    }\\r\\n\\r\\n    function _requireTroveisNotActive(ITroveManager _troveManager, address _borrower) internal view {\\r\\n        ITroveManager.Status status = _troveManager.getTroveStatus(_borrower);\\r\\n        require(status != ITroveManager.Status.active, \\\"BorrowerOps: Trove is active\\\");\\r\\n    }\\r\\n\\r\\n    function _requireNonZeroDebtChange(uint256 _THUSDChange) internal pure {\\r\\n        require(_THUSDChange > 0, \\\"BorrowerOps: Debt increase requires non-zero debtChange\\\");\\r\\n    }\\r\\n\\r\\n    function _requireNotInRecoveryMode(uint256 _price) internal view {\\r\\n        require(!_checkRecoveryMode(_price), \\\"BorrowerOps: Operation not permitted during Recovery Mode\\\");\\r\\n    }\\r\\n\\r\\n    function _requireNoCollWithdrawal(uint256 _collWithdrawal) internal pure {\\r\\n        require(_collWithdrawal == 0, \\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\");\\r\\n    }\\r\\n\\r\\n    function _requireValidAdjustmentInCurrentMode\\r\\n    (\\r\\n        bool _isRecoveryMode,\\r\\n        uint256 _collWithdrawal,\\r\\n        bool _isDebtIncrease,\\r\\n        LocalVariables_adjustTrove memory _vars\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n    {\\r\\n        /*\\r\\n         *In Recovery Mode, only allow:\\r\\n         *\\r\\n         * - Pure collateral top-up\\r\\n         * - Pure debt repayment\\r\\n         * - Collateral top-up with debt repayment\\r\\n         * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and improves the ICR (and by extension improves the TCR).\\r\\n         *\\r\\n         * In Normal Mode, ensure:\\r\\n         *\\r\\n         * - The new ICR is above MCR\\r\\n         * - The adjustment won't pull the TCR below CCR\\r\\n         */\\r\\n        if (_isRecoveryMode) {\\r\\n            _requireNoCollWithdrawal(_collWithdrawal);\\r\\n            if (_isDebtIncrease) {\\r\\n                _requireICRisAboveCCR(_vars.newICR);\\r\\n                _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\r\\n            }\\r\\n        } else { // if Normal Mode\\r\\n            _requireICRisAboveMCR(_vars.newICR);\\r\\n            _vars.newTCR = _getNewTCRFromTroveChange(_vars.collChange, _vars.isCollIncrease, _vars.netDebtChange, _isDebtIncrease, _vars.price);\\r\\n            _requireNewTCRisAboveCCR(_vars.newTCR);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireICRisAboveMCR(uint256 _newICR) internal pure {\\r\\n        require(_newICR >= MCR, \\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\");\\r\\n    }\\r\\n\\r\\n    function _requireICRisAboveCCR(uint256 _newICR) internal pure {\\r\\n        require(_newICR >= CCR, \\\"BorrowerOps: Operation must leave trove with ICR >= CCR\\\");\\r\\n    }\\r\\n\\r\\n    function _requireNewICRisAboveOldICR(uint256 _newICR, uint256 _oldICR) internal pure {\\r\\n        require(_newICR >= _oldICR, \\\"BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\\");\\r\\n    }\\r\\n\\r\\n    function _requireNewTCRisAboveCCR(uint256 _newTCR) internal pure {\\r\\n        require(_newTCR >= CCR, \\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\");\\r\\n    }\\r\\n\\r\\n    function _requireAtLeastMinNetDebt(uint256 _netDebt) internal pure {\\r\\n        require (_netDebt >= MIN_NET_DEBT, \\\"BorrowerOps: Trove's net debt must be greater than minimum\\\");\\r\\n    }\\r\\n\\r\\n    function _requireValidTHUSDRepayment(uint256 _currentDebt, uint256 _debtRepayment) internal pure {\\r\\n        require(_debtRepayment <= _currentDebt - THUSD_GAS_COMPENSATION, \\\"BorrowerOps: Amount repaid must not be larger than the Trove's debt\\\");\\r\\n    }\\r\\n\\r\\n    function _requireCallerIsStabilityPool() internal view {\\r\\n        require(msg.sender == stabilityPoolAddress, \\\"BorrowerOps: Caller is not Stability Pool\\\");\\r\\n    }\\r\\n\\r\\n     function _requireSufficientTHUSDBalance(ITHUSDToken _thusdToken, address _borrower, uint256 _debtRepayment) internal view {\\r\\n        require(_thusdToken.balanceOf(_borrower) >= _debtRepayment, \\\"BorrowerOps: Caller doesnt have enough THUSD to make repayment\\\");\\r\\n    }\\r\\n\\r\\n    function _requireValidMaxFeePercentage(uint256 _maxFeePercentage, bool _isRecoveryMode) internal pure {\\r\\n        if (_isRecoveryMode) {\\r\\n            require(_maxFeePercentage <= DECIMAL_PRECISION,\\r\\n                \\\"Max fee percentage must less than or equal to 100%\\\");\\r\\n        } else {\\r\\n            require(_maxFeePercentage >= BORROWING_FEE_FLOOR && _maxFeePercentage <= DECIMAL_PRECISION,\\r\\n                \\\"Max fee percentage must be between 0.5% and 100%\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- ICR and TCR getters ---\\r\\n\\r\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\r\\n    function _getNewNominalICRFromTroveChange\\r\\n    (\\r\\n        uint256 _coll,\\r\\n        uint256 _debt,\\r\\n        uint256 _collChange,\\r\\n        bool _isCollIncrease,\\r\\n        uint256 _debtChange,\\r\\n        bool _isDebtIncrease\\r\\n    )\\r\\n        pure\\r\\n        internal\\r\\n        returns (uint)\\r\\n    {\\r\\n        (uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(_coll, _debt, _collChange, _isCollIncrease, _debtChange, _isDebtIncrease);\\r\\n\\r\\n        uint256 newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\r\\n        return newNICR;\\r\\n    }\\r\\n\\r\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\r\\n    function _getNewICRFromTroveChange\\r\\n    (\\r\\n        uint256 _coll,\\r\\n        uint256 _debt,\\r\\n        uint256 _collChange,\\r\\n        bool _isCollIncrease,\\r\\n        uint256 _debtChange,\\r\\n        bool _isDebtIncrease,\\r\\n        uint256 _price\\r\\n    )\\r\\n        pure\\r\\n        internal\\r\\n        returns (uint)\\r\\n    {\\r\\n        (uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(_coll, _debt, _collChange, _isCollIncrease, _debtChange, _isDebtIncrease);\\r\\n\\r\\n        uint256 newICR = LiquityMath._computeCR(newColl, newDebt, _price);\\r\\n        return newICR;\\r\\n    }\\r\\n\\r\\n    function _getNewTroveAmounts(\\r\\n        uint256 _coll,\\r\\n        uint256 _debt,\\r\\n        uint256 _collChange,\\r\\n        bool _isCollIncrease,\\r\\n        uint256 _debtChange,\\r\\n        bool _isDebtIncrease\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint, uint)\\r\\n    {\\r\\n        uint256 newColl = _coll;\\r\\n        uint256 newDebt = _debt;\\r\\n\\r\\n        newColl = _isCollIncrease ? _coll + _collChange :  _coll - _collChange;\\r\\n        newDebt = _isDebtIncrease ? _debt + _debtChange : _debt - _debtChange;\\r\\n\\r\\n        return (newColl, newDebt);\\r\\n    }\\r\\n\\r\\n    function _getNewTCRFromTroveChange\\r\\n    (\\r\\n        uint256 _collChange,\\r\\n        bool _isCollIncrease,\\r\\n        uint256 _debtChange,\\r\\n        bool _isDebtIncrease,\\r\\n        uint256 _price\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint256 totalColl = getEntireSystemColl();\\r\\n        uint256 totalDebt = getEntireSystemDebt();\\r\\n\\r\\n        totalColl = _isCollIncrease ? totalColl + _collChange : totalColl - _collChange;\\r\\n        totalDebt = _isDebtIncrease ? totalDebt + _debtChange : totalDebt - _debtChange;\\r\\n\\r\\n        uint256 newTCR = LiquityMath._computeCR(totalColl, totalDebt, _price);\\r\\n        return newTCR;\\r\\n    }\\r\\n\\r\\n    function getCompositeDebt(uint256 _debt) external pure override returns (uint) {\\r\\n        return _getCompositeDebt(_debt);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/BaseMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\ncontract BaseMath {\\r\\n    uint256 constant public DECIMAL_PRECISION = 1e18;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/CheckContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\ncontract CheckContract {\\r\\n    /**\\r\\n     * Check that the account is an already deployed non-destroyed contract.\\r\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\r\\n     */\\r\\n    function checkContract(address _account) internal view {\\r\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(_account) }\\r\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/IERC2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change one's\\r\\n * {IERC20-allowance} without having to send a transaction, by signing a\\r\\n * message. This allows users to spend tokens without having to hold Ether.\\r\\n *\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\r\\n * \\r\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\r\\n */\\r\\ninterface IERC2612 {\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\r\\n     * given `owner`'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(address owner, address spender, uint256 amount, \\r\\n                    uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     *\\r\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to \\r\\n     * a value in the near future. The deadline argument can be set to uint(-1) to \\r\\n     * create Permits that effectively never expire.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n    \\r\\n    function version() external view returns (string memory);\\r\\n    function permitTypeHash() external view returns (bytes32);\\r\\n    function domainSeparator() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/LiquityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./BaseMath.sol\\\";\\r\\nimport \\\"./LiquityMath.sol\\\";\\r\\nimport \\\"../Interfaces/IActivePool.sol\\\";\\r\\nimport \\\"../Interfaces/IDefaultPool.sol\\\";\\r\\nimport \\\"../Interfaces/IPriceFeed.sol\\\";\\r\\nimport \\\"../Interfaces/ILiquityBase.sol\\\";\\r\\n\\r\\n/*\\r\\n* Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\r\\n* common functions.\\r\\n*/\\r\\ncontract LiquityBase is BaseMath, ILiquityBase {\\r\\n\\r\\n    uint256 constant public _100pct = 1e18; // 1e18 == 100%\\r\\n\\r\\n    // Minimum collateral ratio for individual troves\\r\\n    uint256 constant public MCR = 1.1e18; // 110%\\r\\n\\r\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\r\\n    uint256 constant public CCR = 1.5e18; // 150%\\r\\n\\r\\n    // Amount of THUSD to be locked in gas pool on opening troves\\r\\n    uint256 constant public THUSD_GAS_COMPENSATION = 200e18;\\r\\n\\r\\n    // Minimum amount of net THUSD debt a trove must have\\r\\n    uint256 constant public MIN_NET_DEBT = 1800e18;\\r\\n    // uint256 constant public MIN_NET_DEBT = 0;\\r\\n\\r\\n    uint256 constant public PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\r\\n\\r\\n    uint256 constant public BORROWING_FEE_FLOOR = DECIMAL_PRECISION / 1000 * 5; // 0.5%\\r\\n\\r\\n    IActivePool public activePool;\\r\\n\\r\\n    IDefaultPool public defaultPool;\\r\\n\\r\\n    IPriceFeed public override priceFeed;\\r\\n\\r\\n    // --- Gas compensation functions ---\\r\\n\\r\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\r\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint) {\\r\\n        return _debt + THUSD_GAS_COMPENSATION;\\r\\n    }\\r\\n\\r\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint) {\\r\\n        return _debt - THUSD_GAS_COMPENSATION;\\r\\n    }\\r\\n\\r\\n    // Return the amount of collateral to be drawn from a trove's collateral and sent as gas compensation.\\r\\n    function _getCollGasCompensation(uint256 _entireColl) internal pure returns (uint) {\\r\\n        return _entireColl / PERCENT_DIVISOR;\\r\\n    }\\r\\n\\r\\n    function getEntireSystemColl() public view returns (uint256 entireSystemColl) {\\r\\n        uint256 activeColl = activePool.getCollateralBalance();\\r\\n        uint256 liquidatedColl = defaultPool.getCollateralBalance();\\r\\n\\r\\n        return activeColl + liquidatedColl;\\r\\n    }\\r\\n\\r\\n    function getEntireSystemDebt() public view returns (uint256 entireSystemDebt) {\\r\\n        uint256 activeDebt = activePool.getTHUSDDebt();\\r\\n        uint256 closedDebt = defaultPool.getTHUSDDebt();\\r\\n\\r\\n        return activeDebt + closedDebt;\\r\\n    }\\r\\n\\r\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\r\\n        uint256 entireSystemColl = getEntireSystemColl();\\r\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\r\\n\\r\\n        TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\r\\n        return TCR;\\r\\n    }\\r\\n\\r\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\r\\n        uint256 TCR = _getTCR(_price);\\r\\n        return TCR < CCR;\\r\\n    }\\r\\n\\r\\n    function _requireUserAcceptsFee(uint256 _fee, uint256 _amount, uint256 _maxFeePercentage) internal pure {\\r\\n        uint256 feePercentage = _fee * DECIMAL_PRECISION / _amount;\\r\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/LiquityMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nlibrary LiquityMath {\\r\\n\\r\\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\\r\\n\\r\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\r\\n     *\\r\\n     * - Making it \u201ctoo high\u201d could lead to overflows.\\r\\n     * - Making it \u201ctoo low\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\r\\n     *\\r\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\r\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\r\\n     *\\r\\n     */\\r\\n    uint256 internal constant NICR_PRECISION = 1e20;\\r\\n\\r\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint) {\\r\\n        return (_a < _b) ? _a : _b;\\r\\n    }\\r\\n\\r\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint) {\\r\\n        return (_a >= _b) ? _a : _b;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * Multiply two decimal numbers and use normal rounding rules:\\r\\n    * -round product up if 19'th mantissa digit >= 5\\r\\n    * -round product down if 19'th mantissa digit < 5\\r\\n    *\\r\\n    * Used only inside the exponentiation, _decPow().\\r\\n    */\\r\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\r\\n        uint256 prod_xy = x * y;\\r\\n\\r\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\r\\n    *\\r\\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\r\\n    *\\r\\n    * Called by one function that represent time in units of minutes:\\r\\n    * 1) TroveManager._calcDecayedBaseRate\\r\\n    *\\r\\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\r\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\r\\n    *\\r\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\r\\n    * negligibly different from just passing the cap, since:\\r\\n    *\\r\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\r\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\r\\n    */\\r\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint) {\\r\\n\\r\\n        if (_minutes > 525600000) {_minutes = 525600000;}  // cap to avoid overflow\\r\\n\\r\\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\r\\n\\r\\n        uint256 y = DECIMAL_PRECISION;\\r\\n        uint256 x = _base;\\r\\n        uint256 n = _minutes;\\r\\n\\r\\n        // Exponentiation-by-squaring\\r\\n        while (n > 1) {\\r\\n            if (n % 2 == 0) {\\r\\n                x = decMul(x, x);\\r\\n                n = n / 2;\\r\\n            } else { // if (n % 2 != 0)\\r\\n                y = decMul(x, y);\\r\\n                x = decMul(x, x);\\r\\n                n = (n - 1) / 2;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return decMul(x, y);\\r\\n  }\\r\\n\\r\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint) {\\r\\n        return (_a >= _b) ? _a - _b : _b - _a;\\r\\n    }\\r\\n\\r\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint) {\\r\\n        if (_debt > 0) {\\r\\n            return _coll * NICR_PRECISION / _debt;\\r\\n        }\\r\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\r\\n        else { // if (_debt == 0)\\r\\n            return type(uint256).max;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _computeCR(uint256 _coll, uint256 _debt, uint256 _price) internal pure returns (uint) {\\r\\n        if (_debt > 0) {\\r\\n            uint256 newCollRatio = _coll * _price / _debt;\\r\\n\\r\\n            return newCollRatio;\\r\\n        }\\r\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\r\\n        else { // if (_debt == 0)\\r\\n            return type(uint256).max;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * Based on OpenZeppelin's Ownable contract:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n *\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     *\\r\\n     * NOTE: This function is not safe, as it doesn\u2019t check owner is calling it.\\r\\n     * Make sure you check it before calling it.\\r\\n     */\\r\\n    function _renounceOwnership() internal {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/SendCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n\\r\\ncontract SendCollateral {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * Sends collateral to recipient\\r\\n     */\\r\\n    function sendCollateral(IERC20 _collateralERC20, address _recipient, uint256 _amount) internal {\\r\\n        if (address(_collateralERC20) == address(0)) {\\r\\n            // ETH\\r\\n            // require(_amount <= address(this).balance, \\\"Not enough ETH\\\");\\r\\n            (bool success, ) = _recipient.call{ value: _amount }(\\\"\\\"); // re-entry is fine here\\r\\n            require(success, \\\"Sending ETH failed\\\");\\r\\n        } else {\\r\\n            // ERC20\\r\\n            // require(_amount <= _collateralERC20.balanceOf(address(this)), \\\"Not enough collateral\\\");\\r\\n            _collateralERC20.safeTransfer(_recipient, _amount); \\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Sends collateral to recipient\\r\\n     */\\r\\n    function sendCollateralFrom(IERC20 _collateralERC20, address _from, address _recipient, uint256 _amount) internal {\\r\\n        if (address(_collateralERC20) == address(0)) {\\r\\n            // ETH\\r\\n            // require(_amount <= address(this).balance, \\\"Not enough ETH\\\");\\r\\n            (bool success, ) = _recipient.call{ value: _amount }(\\\"\\\"); // re-entry is fine here\\r\\n            require(success, \\\"Sending ETH failed\\\");\\r\\n        } else {\\r\\n            // ERC20\\r\\n            // require(_amount <= _collateralERC20.balanceOf(address(this)), \\\"Not enough collateral\\\");\\r\\n            _collateralERC20.safeTransferFrom(_from, _recipient, _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IActivePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\n\\r\\ninterface IActivePool is IPool {\\r\\n    // --- Events ---\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolTHUSDDebtUpdated(uint256 _THUSDDebt);\\r\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function sendCollateral(address _account, uint256 _amount) external;\\r\\n    function updateCollateralBalance(uint256 _amount) external;\\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IBorrowerOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// Common interface for the Trove Manager.\\r\\ninterface IBorrowerOperations {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\r\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\r\\n    event PriceFeedAddressChanged(address  _newPriceFeedAddress);\\r\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\r\\n    event THUSDTokenAddressChanged(address _thusdTokenAddress);\\r\\n    event PCVAddressChanged(address _pcvAddress);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n\\r\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\r\\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, uint8 operation);\\r\\n    event THUSDBorrowingFeePaid(address indexed _borrower, uint256 _THUSDFee);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function setAddresses(\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _defaultPoolAddress,\\r\\n        address _stabilityPoolAddress,\\r\\n        address _gasPoolAddress,\\r\\n        address _collSurplusPoolAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _pcvAddress,\\r\\n        address _collateralAddress\\r\\n\\r\\n    ) external;\\r\\n\\r\\n    function openTrove(uint256 _maxFee, uint256 _THUSDAmount, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable;\\r\\n\\r\\n    function addColl(uint256 _assetAmount, address _upperHint, address _lowerHint) external payable;\\r\\n\\r\\n    function moveCollateralGainToTrove(address _user, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable;\\r\\n\\r\\n    function withdrawColl(uint256 _amount, address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    function withdrawTHUSD(uint256 _maxFee, uint256 _amount, address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    function repayTHUSD(uint256 _amount, address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    function closeTrove() external;\\r\\n\\r\\n    function adjustTrove(uint256 _maxFee, uint256 _collWithdrawal, uint256 _debtChange, bool isDebtIncrease, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable;\\r\\n\\r\\n    function claimCollateral() external;\\r\\n\\r\\n    function getCompositeDebt(uint256 _debt) external pure returns (uint);\\r\\n\\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ICollSurplusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\ninterface ICollSurplusPool {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n\\r\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\r\\n    event CollateralSent(address _to, uint256 _amount);\\r\\n\\r\\n    // --- Contract setters ---\\r\\n\\r\\n    function setAddresses(\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _collateralAddress\\r\\n    ) external;\\r\\n\\r\\n    function getCollateralBalance() external view returns (uint);\\r\\n\\r\\n    function getCollateral(address _account) external view returns (uint);\\r\\n\\r\\n    function accountSurplus(address _account, uint256 _amount) external;\\r\\n\\r\\n    function claimColl(address _account) external;\\r\\n\\r\\n    function updateCollateralBalance(uint256 _amount) external;\\r\\n    \\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IDefaultPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\n\\r\\ninterface IDefaultPool is IPool {\\r\\n    // --- Events ---\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event DefaultPoolTHUSDDebtUpdated(uint256 _THUSDDebt);\\r\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function sendCollateralToActivePool(uint256 _amount) external;\\r\\n    function updateCollateralBalance(uint256 _amount) external;\\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ILiquityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./IPriceFeed.sol\\\";\\r\\n\\r\\n\\r\\ninterface ILiquityBase {\\r\\n    function priceFeed() external view returns (IPriceFeed);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPCV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./ITHUSDToken.sol\\\";\\r\\n\\r\\ninterface IPCV {\\r\\n\\r\\n    // --- Events --\\r\\n    event THUSDTokenAddressSet(address _thusdTokenAddress);\\r\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\r\\n    event CollateralAddressSet(address _collateralAddress);\\r\\n    event BAMMAddressSet(address _bammAddress);\\r\\n    event RolesSet(address _council, address _treasury);\\r\\n\\r\\n    event BAMMDeposit(uint256 _thusdAmount);\\r\\n    event BAMMWithdraw(uint256 _numShares);\\r\\n    event THUSDWithdraw(address _recipient, uint256 _thusdAmount);\\r\\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\\r\\n\\r\\n    event PCVDebtPaid(uint256 _paidDebt);\\r\\n    \\r\\n    event RecipientAdded(address _recipient);\\r\\n    event RecipientRemoved(address _recipient);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function debtToPay() external returns(uint256);\\r\\n    function payDebt(uint256 _thusdToBurn) external;\\r\\n\\r\\n    function setAddresses(\\r\\n        address _thusdTokenAddress, \\r\\n        address _borrowerOperations, \\r\\n        address payable _bammAddress,\\r\\n        address _collateralERC20\\r\\n    ) external;\\r\\n    function initialize() external;\\r\\n\\r\\n    function depositToBAMM(uint256 _thusdAmount) external;\\r\\n    function withdrawFromBAMM(uint256 _numShares) external;\\r\\n    function withdrawTHUSD(address _recipient, uint256 _thusdAmount) external;\\r\\n    function withdrawCollateral(address _recipient, uint256 _collateralAmount) external;\\r\\n\\r\\n    function addRecipientToWhitelist(address _recipient) external;\\r\\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\\r\\n    function removeRecipientFromWhitelist(address _recipient) external;\\r\\n    function removeRecipientsFromWhitelist(address[] calldata _recipients) external;\\r\\n\\r\\n    function startChangingRoles(address _council, address _treasury) external;\\r\\n    function cancelChangingRoles() external;\\r\\n    function finalizeChangingRoles() external;\\r\\n    \\r\\n    function collateralERC20() external view returns(IERC20);\\r\\n    function thusdToken() external view returns(ITHUSDToken);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// Common interface for the Pools.\\r\\ninterface IPool {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\r\\n    event THUSDBalanceUpdated(uint256 _newBalance);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\r\\n    event CollateralSent(address _to, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function getCollateralBalance() external view returns (uint);\\r\\n\\r\\n    function getTHUSDDebt() external view returns (uint);\\r\\n\\r\\n    function increaseTHUSDDebt(uint256 _amount) external;\\r\\n\\r\\n    function decreaseTHUSDDebt(uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n\\r\\n    // --- Events ---\\r\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\r\\n   \\r\\n    // --- Function ---\\r\\n    function fetchPrice() external returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ISortedTroves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// Common interface for the SortedTroves Doubly Linked List.\\r\\ninterface ISortedTroves {\\r\\n\\r\\n    // --- Events ---\\r\\n    \\r\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\r\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\r\\n    event NodeAdded(address _id, uint256 _NICR);\\r\\n    event NodeRemoved(address _id);\\r\\n\\r\\n    // --- Functions ---\\r\\n    \\r\\n    function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;\\r\\n\\r\\n    function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;\\r\\n\\r\\n    function remove(address _id) external;\\r\\n\\r\\n    function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;\\r\\n\\r\\n    function contains(address _id) external view returns (bool);\\r\\n\\r\\n    function isFull() external view returns (bool);\\r\\n\\r\\n    function isEmpty() external view returns (bool);\\r\\n\\r\\n    function getSize() external view returns (uint256);\\r\\n\\r\\n    function getMaxSize() external view returns (uint256);\\r\\n\\r\\n    function getFirst() external view returns (address);\\r\\n\\r\\n    function getLast() external view returns (address);\\r\\n\\r\\n    function getNext(address _id) external view returns (address);\\r\\n\\r\\n    function getPrev(address _id) external view returns (address);\\r\\n\\r\\n    function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);\\r\\n\\r\\n    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IStabilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/*\\r\\n * The Stability Pool holds THUSD tokens deposited by Stability Pool depositors.\\r\\n *\\r\\n * When a trove is liquidated, then depending on system conditions, some of its THUSD debt gets offset with\\r\\n * THUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of THUSD tokens in the Stability Pool is burned.\\r\\n *\\r\\n * Thus, a liquidation causes each depositor to receive a THUSD loss, in proportion to their deposit as a share of total deposits.\\r\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors,\\r\\n * in the same proportion.\\r\\n *\\r\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\r\\n * of the total THUSD in the Stability Pool, depletes 40% of each deposit.\\r\\n *\\r\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\r\\n * multiplying it by some factor in range ]0,1[\\r\\n *\\r\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\r\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\r\\n *\\r\\n */\\r\\ninterface IStabilityPool {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\r\\n    event StabilityPoolTHUSDBalanceUpdated(uint256 _newBalance);\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\r\\n    event THUSDTokenAddressChanged(address _newTHUSDTokenAddress);\\r\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n\\r\\n    event P_Updated(uint256 _P);\\r\\n    event S_Updated(uint256 _S, uint128 _epoch, uint128 _scale);\\r\\n    event EpochUpdated(uint128 _currentEpoch);\\r\\n    event ScaleUpdated(uint128 _currentScale);\\r\\n\\r\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _S);\\r\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\r\\n\\r\\n    event CollateralGainWithdrawn(address indexed _depositor, uint256 _collateral, uint256 _THUSDLoss);\\r\\n    event CollateralSent(address _to, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /*\\r\\n     * Called only once on init, to set addresses of other Liquity contracts\\r\\n     * Callable only by owner, renounces ownership at the end\\r\\n     */\\r\\n    function setAddresses(\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _collateralAddress\\r\\n    ) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - _amount is not zero\\r\\n     * ---\\r\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\r\\n     */\\r\\n    function provideToSP(uint256 _amount) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - _amount is zero or there are no under collateralized troves left in the system\\r\\n     * - User has a non zero deposit\\r\\n     * ---\\r\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\r\\n     * - Decreases deposit stake, and takes new snapshot.\\r\\n     *\\r\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\r\\n     */\\r\\n    function withdrawFromSP(uint256 _amount) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - User has a non zero deposit\\r\\n     * - User has an open trove\\r\\n     * - User has some collateral gain\\r\\n     * ---\\r\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\r\\n     * - Leaves their compounded deposit in the Stability Pool\\r\\n     * - Updates snapshots for deposit\\r\\n     */\\r\\n    function withdrawCollateralGainToTrove(address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - Caller is TroveManager\\r\\n     * ---\\r\\n     * Cancels out the specified debt against the THUSD contained in the Stability Pool (as far as possible)\\r\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\r\\n     * Only called by liquidation functions in the TroveManager.\\r\\n     */\\r\\n    function offset(uint256 _debt, uint256 _coll) external;\\r\\n\\r\\n    /*\\r\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\r\\n     * to exclude edge cases like collateral received from a self-destruct.\\r\\n     */\\r\\n    function getCollateralBalance() external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Returns THUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\r\\n     */\\r\\n    function getTotalTHUSDDeposits() external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\r\\n     */\\r\\n    function getDepositorCollateralGain(address _depositor) external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Return the user's compounded deposit.\\r\\n     */\\r\\n    function getCompoundedTHUSDDeposit(address _depositor) external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Only callable by Active Pool, updates ERC20 tokens recieved\\r\\n     */\\r\\n    function updateCollateralBalance(uint256 _amount) external;\\r\\n    /*\\r\\n     * Fallback function\\r\\n     * Only callable by Active Pool, it just accounts for ETH received\\r\\n     * receive() external payable;\\r\\n     */\\r\\n    \\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITHUSDToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\r\\n\\r\\ninterface ITHUSDToken is IERC20Metadata, IERC2612 {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\r\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\r\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\r\\n\\r\\n    event THUSDTokenBalanceUpdated(address _user, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function mintList(address contractAddress) external view returns (bool);\\r\\n    function burnList(address contractAddress) external view returns (bool);\\r\\n\\r\\n    function mint(address _account, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external;\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITroveManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./ILiquityBase.sol\\\";\\r\\nimport \\\"./IStabilityPool.sol\\\";\\r\\nimport \\\"./ITHUSDToken.sol\\\";\\r\\nimport \\\"./IPCV.sol\\\";\\r\\n\\r\\n\\r\\n// Common interface for the Trove Manager.\\r\\ninterface ITroveManager is ILiquityBase {\\r\\n\\r\\n    enum Status {\\r\\n        nonExistent,\\r\\n        active,\\r\\n        closedByOwner,\\r\\n        closedByLiquidation,\\r\\n        closedByRedemption\\r\\n    }\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event THUSDTokenAddressChanged(address _newTHUSDTokenAddress);\\r\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\r\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\r\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\r\\n    event PCVAddressChanged(address _pcvAddress);\\r\\n\\r\\n    event Liquidation(uint256 _liquidatedDebt, uint256 _liquidatedColl, uint256 _collGasCompensation, uint256 _THUSDGasCompensation);\\r\\n    event Redemption(uint256 _attemptedTHUSDAmount, uint256 _actualTHUSDAmount, uint256 _collateralSent, uint256 _collateralFee);\\r\\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, uint8 operation);\\r\\n    event TroveLiquidated(address indexed _borrower, uint256 _debt, uint256 _coll, uint8 operation);\\r\\n    event BaseRateUpdated(uint256 _baseRate);\\r\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\r\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\r\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\r\\n    event LTermsUpdated(uint256 _L_Collateral, uint256 _L_THUSDDebt);\\r\\n    event TroveSnapshotsUpdated(uint256 _L_Collateral, uint256 _L_THUSDDebt);\\r\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function setAddresses(\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _defaultPoolAddress,\\r\\n        address _stabilityPoolAddress,\\r\\n        address _gasPoolAddress,\\r\\n        address _collSurplusPoolAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _pcvAddress\\r\\n    ) external;\\r\\n\\r\\n    function stabilityPool() external view returns (IStabilityPool);\\r\\n    function thusdToken() external view returns (ITHUSDToken);\\r\\n    function pcv() external view returns (IPCV);\\r\\n\\r\\n    function getTroveOwnersCount() external view returns (uint);\\r\\n\\r\\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\r\\n\\r\\n    function getNominalICR(address _borrower) external view returns (uint);\\r\\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint);\\r\\n\\r\\n    function liquidate(address _borrower) external;\\r\\n\\r\\n    function liquidateTroves(uint256 _n) external;\\r\\n\\r\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\r\\n\\r\\n    function redeemCollateral(\\r\\n        uint256 _THUSDAmount,\\r\\n        address _firstRedemptionHint,\\r\\n        address _upperPartialRedemptionHint,\\r\\n        address _lowerPartialRedemptionHint,\\r\\n        uint256 _partialRedemptionHintNICR,\\r\\n        uint256 _maxIterations,\\r\\n        uint256 _maxFee\\r\\n    ) external;\\r\\n\\r\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint);\\r\\n\\r\\n    function updateTroveRewardSnapshots(address _borrower) external;\\r\\n\\r\\n    function addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\r\\n\\r\\n    function applyPendingRewards(address _borrower) external;\\r\\n\\r\\n    function getPendingCollateralReward(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getPendingTHUSDDebtReward(address _borrower) external view returns (uint);\\r\\n\\r\\n     function hasPendingRewards(address _borrower) external view returns (bool);\\r\\n\\r\\n    function getEntireDebtAndColl(address _borrower) external view returns (\\r\\n        uint256 debt,\\r\\n        uint256 coll,\\r\\n        uint256 pendingTHUSDDebtReward,\\r\\n        uint256 pendingCollateralReward\\r\\n    );\\r\\n\\r\\n    function closeTrove(address _borrower) external;\\r\\n\\r\\n    function removeStake(address _borrower) external;\\r\\n\\r\\n    function getRedemptionRate() external view returns (uint);\\r\\n    function getRedemptionRateWithDecay() external view returns (uint);\\r\\n\\r\\n    function getRedemptionFeeWithDecay(uint256 _collateralDrawn) external view returns (uint);\\r\\n\\r\\n    function getBorrowingRate() external view returns (uint);\\r\\n    function getBorrowingRateWithDecay() external view returns (uint);\\r\\n\\r\\n    function getBorrowingFee(uint256 THUSDDebt) external view returns (uint);\\r\\n    function getBorrowingFeeWithDecay(uint256 _THUSDDebt) external view returns (uint);\\r\\n\\r\\n    function decayBaseRateFromBorrowing() external;\\r\\n\\r\\n    function getTroveStatus(address _borrower) external view returns (Status);\\r\\n\\r\\n    function getTroveStake(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getTroveDebt(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getTroveColl(address _borrower) external view returns (uint);\\r\\n\\r\\n    function setTroveStatus(address _borrower, Status _status) external;\\r\\n\\r\\n    function increaseTroveColl(address _borrower, uint256 _collIncrease) external returns (uint);\\r\\n\\r\\n    function decreaseTroveColl(address _borrower, uint256 _collDecrease) external returns (uint);\\r\\n\\r\\n    function increaseTroveDebt(address _borrower, uint256 _debtIncrease) external returns (uint);\\r\\n\\r\\n    function decreaseTroveDebt(address _borrower, uint256 _collDecrease) external returns (uint);\\r\\n\\r\\n    function getTCR(uint256 _price) external view returns (uint);\\r\\n\\r\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCollateralAddress\",\"type\":\"address\"}],\"name\":\"CollateralAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pcvAddress\",\"type\":\"address\"}],\"name\":\"PCVAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_THUSDFee\",\"type\":\"uint256\"}],\"name\":\"THUSDBorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_thusdTokenAddress\",\"type\":\"address\"}],\"name\":\"THUSDTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TroveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BorrowerOperations.BorrowerOperation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_THUSDChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"adjustTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thusdToBurn\",\"type\":\"uint256\"}],\"name\":\"burnDebtFromPCV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getCompositeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thusdToMint\",\"type\":\"uint256\"}],\"name\":\"mintBootstrapLoanFromPCV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"moveCollateralGainToTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_THUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"openTrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcvAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_THUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayTHUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thusdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pcvAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thusdToken\",\"outputs\":[{\"internalType\":\"contract ITHUSDToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_THUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawTHUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BorrowerOperations", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}