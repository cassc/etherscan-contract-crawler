{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/InscriptionV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./libs/Logarithm.sol\\\";\\nimport \\\"./libs/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IWhitelist.sol\\\";\\nimport \\\"./interfaces/IInitialFairOffering.sol\\\";\\nimport \\\"./interfaces/IInscription.sol\\\";\\nimport \\\"./interfaces/ICustomizedCondition.sol\\\";\\nimport \\\"./interfaces/ICustomizedVesting.sol\\\";\\n\\n// This is common token interface, get balance of owner's token by ERC20/ERC721/ERC1155.\\ninterface ICommonToken {\\n    function balanceOf(address owner) external returns(uint256);\\n}\\n\\n// This contract is extended from ERC20\\ncontract Inscription is ERC20 {\\n    using Logarithm for int256;\\n\\n    IInscription.FERC20 private ferc20;\\n\\n    mapping(address => uint256) private lastMintTimestamp;   // record the last mint timestamp of account\\n    mapping(address => uint256) private lastMintFee;           // record the last mint fee\\n\\n    uint96 public totalRollups;\\n    event Mint(address sender, address to, uint amount, bool isVesting);\\n    event Burn(address sender, address to, uint amount);\\n\\n    constructor(\\n        string memory   _name,            // token name\\n        string memory   _tick,            // token tick, same as symbol. must be 4 characters.\\n        uint128         _cap,                   // Max amount\\n        uint128         _limitPerMint,          // Limitaion of each mint\\n        uint64          _inscriptionId,         // Inscription Id\\n        uint32          _maxMintSize,           // max mint size, that means the max mint quantity is: maxMintSize * limitPerMint. This is only availabe for non-frozen time token.\\n        uint40          _freezeTime,            // The frozen time (interval) between two mints is a fixed number of seconds. You can mint, but you will need to pay an additional mint fee, and this fee will be double for each mint.\\n        address         _onlyContractAddress,   // Only addresses that hold these assets can mint\\n        uint128         _onlyMinQuantity,       // Only addresses that the quantity of assets hold more than this amount can mint\\n        uint96         _baseFee,               // base fee of the second mint after frozen interval. The first mint after frozen time is free.\\n        uint16          _fundingCommission,     // commission rate of fund raising, 100 means 1%\\n        uint128         _crowdFundingRate,      // rate of crowdfunding\\n        address         _whitelist,              // whitelist contract\\n        bool            _isIFOMode,              // receiving fee of crowdfunding\\n        uint16          _liquidityTokenPercent,\\n        address payable _ifoContractAddress,\\n        address payable _inscriptionFactory,\\n        uint96          _maxRollups,\\n        address         _customizedConditionContractAddress,\\n        address         _customizedVestingContractAddress\\n    ) ERC20(_name, _tick) {\\n        require(_cap >= _limitPerMint, \\\"Limit per mint exceed cap\\\");\\n        ferc20.cap = _cap;\\n        ferc20.limitPerMint = _limitPerMint;\\n        ferc20.inscriptionId = _inscriptionId;\\n        ferc20.maxMintSize = _maxMintSize;\\n        ferc20.freezeTime = _freezeTime;\\n        ferc20.onlyContractAddress = _onlyContractAddress;\\n        ferc20.onlyMinQuantity = _onlyMinQuantity;\\n        ferc20.baseFee = _baseFee;\\n        ferc20.fundingCommission = _fundingCommission;\\n        ferc20.crowdFundingRate = _crowdFundingRate;\\n        ferc20.whitelist = _whitelist;\\n        ferc20.isIFOMode = _isIFOMode;\\n        ferc20.ifoContractAddress = _ifoContractAddress;\\n        ferc20.inscriptionFactory = _inscriptionFactory;\\n        ferc20.liquidityTokenPercent = _liquidityTokenPercent;\\n        ferc20.maxRollups = _maxRollups;\\n        ferc20.customizedConditionContractAddress = ICustomizedCondition(_customizedConditionContractAddress);\\n        ferc20.customizedVestingContractAddress = ICustomizedVesting(_customizedVestingContractAddress);\\n    }\\n\\n    function mint(address _to) payable public {\\n        // Check if the quantity after mint will exceed the cap\\n        require(totalRollups + 1 <= ferc20.maxRollups, \\\"Touched cap\\\");\\n        // Check if the assets in the msg.sender is satisfied\\n        require(ferc20.onlyContractAddress == address(0x0) \\n            || ICommonToken(ferc20.onlyContractAddress).balanceOf(msg.sender) >= ferc20.onlyMinQuantity, \\\"You don't have required assets\\\");\\n        require(ferc20.whitelist == address(0x0) \\n            || IWhitelist(ferc20.whitelist).getStatus(address(this), msg.sender), \\\"You are not in whitelist\\\");\\n        require(address(ferc20.customizedConditionContractAddress) == address(0x0) \\n            || ferc20.customizedConditionContractAddress.getStatus(address(this), msg.sender), \\\"Customized condition not satisfied\\\");\\n        require(lastMintTimestamp[msg.sender] < block.timestamp, \\\"Timestamp fail\\\"); // The only line added on V2\\n        \\n        uint256 tokenForInitialLiquidity = ferc20.isIFOMode ? ferc20.limitPerMint * ferc20.liquidityTokenPercent / (10000 - ferc20.liquidityTokenPercent) : 0;\\n\\n        if(lastMintTimestamp[msg.sender] + ferc20.freezeTime > block.timestamp) {\\n            // The min extra tip is double of last mint fee\\n            lastMintFee[msg.sender] = lastMintFee[msg.sender] == 0 ? ferc20.baseFee : lastMintFee[msg.sender] * 2;\\n            // Check if the tip is high than the min extra fee\\n            require(msg.value >= ferc20.crowdFundingRate + lastMintFee[msg.sender], \\\"Send ETH as fee and crowdfunding\\\");\\n            // Transfer the fee to the crowdfunding address\\n            if(ferc20.crowdFundingRate > 0) _dispatchFunding(_to, ferc20.crowdFundingRate, ferc20.limitPerMint, tokenForInitialLiquidity);\\n            // Transfer the tip to InscriptionFactory smart contract\\n            if(msg.value - ferc20.crowdFundingRate > 0) TransferHelper.safeTransferETH(ferc20.inscriptionFactory, msg.value - ferc20.crowdFundingRate);\\n        } else {\\n            // Transfer the fee to the crowdfunding address\\n            if(ferc20.crowdFundingRate > 0) {\\n                require(msg.value >= ferc20.crowdFundingRate, \\\"Send ETH as crowdfunding\\\");\\n                if(msg.value - ferc20.crowdFundingRate > 0) TransferHelper.safeTransferETH(ferc20.inscriptionFactory, msg.value - ferc20.crowdFundingRate);\\n                _dispatchFunding(_to, ferc20.crowdFundingRate, ferc20.limitPerMint, tokenForInitialLiquidity);\\n            }\\n            // Out of frozen time, free mint. Reset the timestamp and mint times.\\n            lastMintFee[msg.sender] = 0;\\n            lastMintTimestamp[msg.sender] = block.timestamp;\\n        }\\n\\n        // Do mint for the participant\\n        if(address(ferc20.customizedVestingContractAddress) == address(0x0)) {\\n            _mint(_to, ferc20.limitPerMint);\\n            emit Mint(msg.sender, _to, ferc20.limitPerMint, false);\\n        } else {\\n            _mint(address(ferc20.customizedVestingContractAddress), ferc20.limitPerMint);\\n            emit Mint(msg.sender, address(ferc20.customizedVestingContractAddress), ferc20.limitPerMint, true);\\n            ferc20.customizedVestingContractAddress.addAllocation(_to, ferc20.limitPerMint);\\n        }\\n\\n        // Mint for initial liquidity\\n        if(tokenForInitialLiquidity > 0) _mint(ferc20.ifoContractAddress, tokenForInitialLiquidity);\\n        totalRollups++;\\n    }\\n\\n    // batch mint is only available for non-frozen-time tokens\\n    function batchMint(address _to, uint32 _num) payable public {\\n        require(_num <= ferc20.maxMintSize, \\\"exceed max mint size\\\");\\n        require(totalRollups + _num <= ferc20.maxRollups, \\\"Touch cap\\\");\\n        require(ferc20.freezeTime == 0, \\\"Batch mint only for non-frozen token\\\");\\n        require(ferc20.onlyContractAddress == address(0x0) \\n            || ICommonToken(ferc20.onlyContractAddress).balanceOf(msg.sender) >= ferc20.onlyMinQuantity, \\\"You don't have required assets\\\");\\n        require(ferc20.whitelist == address(0x0) \\n            || IWhitelist(ferc20.whitelist).getStatus(address(this), msg.sender), \\\"You are not in whitelist\\\");\\n        require(address(ferc20.customizedConditionContractAddress) == address(0x0) \\n            || ferc20.customizedConditionContractAddress.getStatus(address(this), msg.sender), \\\"Customized condition not satisfied\\\");\\n\\n        uint256 tokenForInitialLiquidity = ferc20.isIFOMode ? ferc20.limitPerMint * ferc20.liquidityTokenPercent / (10000 - ferc20.liquidityTokenPercent) : 0;\\n\\n        if(ferc20.crowdFundingRate > 0) {\\n            require(msg.value >= ferc20.crowdFundingRate * _num, \\\"Crowdfunding ETH not enough\\\");\\n            if(msg.value - ferc20.crowdFundingRate * _num > 0) TransferHelper.safeTransferETH(ferc20.inscriptionFactory, msg.value - ferc20.crowdFundingRate * _num);\\n            _dispatchFunding(_to, ferc20.crowdFundingRate * _num , ferc20.limitPerMint * _num, tokenForInitialLiquidity * _num);\\n        }\\n        \\n        for(uint256 i = 0; i < _num; i++) {\\n            // The reason for using for and repeat the operation is to let the average gas cost of batch mint same as single mint\\n            if(address(ferc20.customizedVestingContractAddress) == address(0x0)) {\\n                _mint(_to, ferc20.limitPerMint);\\n                emit Mint(msg.sender, _to, ferc20.limitPerMint, false);\\n            } else {\\n                _mint(address(ferc20.customizedVestingContractAddress), ferc20.limitPerMint);\\n                emit Mint(msg.sender, address(ferc20.customizedVestingContractAddress), ferc20.limitPerMint, true);\\n                ferc20.customizedVestingContractAddress.addAllocation(_to, ferc20.limitPerMint);\\n            }\\n            // Mint for initial liquidity\\n            if(tokenForInitialLiquidity > 0) {\\n                _mint(ferc20.ifoContractAddress, tokenForInitialLiquidity);\\n            }\\n        }\\n        totalRollups = totalRollups + _num;\\n    }\\n\\n    function getMintFee(address _addr) public view returns(uint256 mintedTimes, uint256 nextMintFee) {\\n        if(lastMintTimestamp[_addr] + ferc20.freezeTime > block.timestamp) {\\n            int256 scale = 1e18;\\n            int256 halfScale = 5e17;\\n            // times = log_2(lastMintFee / baseFee) + 1 (if lastMintFee > 0)\\n            nextMintFee = lastMintFee[_addr] == 0 ? ferc20.baseFee : lastMintFee[_addr] * 2;\\n            mintedTimes = uint256((Logarithm.log2(int256(nextMintFee / ferc20.baseFee) * scale, scale, halfScale) + 1) / scale) + 1;\\n        }\\n    }\\n\\n    function getFerc20Data() public view returns(IInscription.FERC20 memory) {\\n        return ferc20;\\n    }\\n\\n    function getLastMintTimestamp(address _addr) public view returns(uint256) {\\n        return lastMintTimestamp[_addr];\\n    }\\n\\n    function getLastMintFee(address _addr) public view returns(uint256) {\\n        return lastMintFee[_addr];\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        require(!ferc20.isIFOMode || IInitialFairOffering(ferc20.ifoContractAddress).liquidityAdded(), \\n            \\\"Only workable after public liquidity added\\\");\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        require(!ferc20.isIFOMode || IInitialFairOffering(ferc20.ifoContractAddress).liquidityAdded(), \\n            \\\"Only workable after public liquidity added\\\");\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        require(account == msg.sender, \\\"only owner can burn\\\");\\n        require(balanceOf(account) >= amount, \\\"balance not enough\\\");\\n        _burn(account, amount);\\n        emit Burn(msg.sender, account, amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public {\\n        uint256 currentAllowance = allowance(account, msg.sender);\\n        require(currentAllowance != type(uint256).max, \\\"allowance exceed max\\\");\\n        require(currentAllowance >= amount, \\\"allowance less than amount\\\");\\n        _approve(account, msg.sender, currentAllowance - amount);\\n        _burn(account, amount);\\n        emit Burn(msg.sender, account, amount);\\n    }\\n\\n    function _dispatchFunding(address _to, uint256 _ethAmount, uint256 _tokenAmount, uint256 _tokenForLiquidity) private {\\n        require(ferc20.ifoContractAddress > address(0x0), \\\"ifo address zero\\\");\\n\\n        uint256 commission = _ethAmount * ferc20.fundingCommission / 10000;\\n        TransferHelper.safeTransferETH(ferc20.ifoContractAddress, _ethAmount - commission); \\n        if(commission > 0) TransferHelper.safeTransferETH(ferc20.inscriptionFactory, commission);\\n\\n        IInitialFairOffering(ferc20.ifoContractAddress).setMintData(\\n            _to,\\n            uint128(_ethAmount - commission),\\n            uint128(_tokenAmount), \\n            uint128(_tokenForLiquidity)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICustomizedCondition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICustomizedCondition {\\n    function getStatus(address _tokenAddress, address _sender) external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICustomizedVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICustomizedVesting {\\n    function addAllocation(address recipient, uint amount) external;\\n    function removeAllocation(address recipient, uint amount) external;\\n    function claim() external;\\n    function available(address address_) external view returns (uint);\\n    function released(address address_) external view returns (uint);\\n    function outstanding(address address_) external view returns (uint);\\n    function setTokenAddress(address _tokenAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitialFairOffering.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IInscriptionFactory.sol\\\";\\n\\ninterface IInitialFairOffering {\\n    function initialize(IInscriptionFactory.Token memory _token) external;\\n    function setMintData(address _addr, uint128 _ethAmount, uint128 _tokenAmount, uint128 _tokenLiquidity) external;\\n    function liquidityAdded() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInscription.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./ICustomizedCondition.sol\\\";\\nimport \\\"./ICustomizedVesting.sol\\\";\\n\\ninterface IInscription {\\n    struct FERC20 {\\n        uint128 cap;                                            // Max amount\\n        uint128 limitPerMint;                                   // Limitaion of each mint\\n\\n        address onlyContractAddress;                            // Only addresses that hold these assets can mint\\n        uint32  maxMintSize;                                    // max mint size, that means the max mint quantity is: maxMintSize * limitPerMint\\n        uint64  inscriptionId;                                  // Inscription Id\\n        \\n        uint128 onlyMinQuantity;                                // Only addresses that the quantity of assets hold more than this amount can mint\\n        uint128 crowdFundingRate;                               // rate of crowdfunding\\n\\n        address whitelist;                                      // whitelist contract\\n        uint40  freezeTime;                                     // The frozen time (interval) between two mints is a fixed number of seconds. You can mint, but you will need to pay an additional mint fee, and this fee will be double for each mint.\\n        uint16  fundingCommission;                              // commission rate of fund raising, 1000 means 10%\\n        uint16  liquidityTokenPercent;\\n        bool    isIFOMode;                                      // receiving fee of crowdfunding\\n\\n        address payable inscriptionFactory;                     // Inscription factory contract address\\n        uint128 baseFee;                                        // base fee of the second mint after frozen interval. The first mint after frozen time is free.\\n\\n        address payable ifoContractAddress;                     // Initial fair offering contract\\n        uint96  maxRollups;                                     // Max rollups\\n\\n        ICustomizedCondition customizedConditionContractAddress;// Customized condition for mint\\n        ICustomizedVesting customizedVestingContractAddress;    // Customized vesting contract\\n    }\\n\\n    function mint(address _to) payable external;\\n    function getFerc20Data() external view returns(FERC20 memory);\\n    function balanceOf(address owner) external view returns(uint256);\\n    function totalSupply() external view returns(uint256);\\n    function allowance(address owner, address spender) external view returns(uint256);\\n    function totalRollups() external view returns(uint256);\\n    function burn(address account, uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IInscriptionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInscriptionFactory {\\n    struct Token {\\n        uint128         cap;                                // Hard cap of token\\n        uint128         limitPerMint;                       // Limitation per mint\\n\\n        address         onlyContractAddress;\\n        uint32          maxMintSize;                        // max mint size, that means the max mint quantity is: maxMintSize * limitPerMint\\n        uint64          inscriptionId;                      // Inscription id\\n\\n        uint128         onlyMinQuantity;\\n        uint128         crowdFundingRate;\\n\\t\\t\\t\\t\\n        address         addr;                               // Contract address of inscribed token\\n        uint40          freezeTime;\\n        uint40          timestamp;                          // Inscribe timestamp\\n        uint16          liquidityTokenPercent;              // 10000 is 100%\\n\\n        address         ifoContractAddress;                 // Initial fair offerting contract\\n        uint16          refundFee;                          // To avoid the refund attack, deploy sets this fee rate\\n        uint40          startTime;\\n        uint40          duration;\\n\\n        address         customizedConditionContractAddress; // Customized condition for mint\\n        uint96          maxRollups;                         // max rollups\\n\\n        address         deployer;                           // Deployer\\n        string          tick;                               // same as symbol in ERC20, max 5 chars, 10 bytes(80)\\n        uint16          liquidityEtherPercent;\\n        \\n        string          name;                               // full name of token, max 16 chars, 32 bytes(256)\\n\\n        address         customizedVestingContractAddress;   // Customized contract for token vesting\\n        bool            isIFOMode;                          // is ifo mode\\n        bool            isWhitelist;                        // is whitelst condition\\n        bool            isVesting;\\n        bool            isVoted;\\n        \\n        string          logoUrl;                            // logo url, ifpfs cid, 64 chars, 128 bytes, 4 slots, ex.QmPK1s3pNYLi9ERiq3BDxKa4XosgWwFRQUydHUtz4YgpqB\\n    }\\n\\n    function deploy(\\n        string memory _name,\\n        string memory _tick,\\n        uint256 _cap,\\n        uint256 _limitPerMint,\\n        uint256 _maxMintSize, // The max lots of each mint\\n        uint256 _freezeTime, // Freeze seconds between two mint, during this freezing period, the mint fee will be increased\\n        address _onlyContractAddress, // Only the holder of this asset can mint, optional\\n        uint256 _onlyMinQuantity, // The min quantity of asset for mint, optional\\n        uint256 _crowdFundingRate,\\n        address _crowdFundingAddress\\n    ) external returns (address _inscriptionAddress);\\n\\n    function updateStockTick(string memory _tick, bool _status) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function getIncriptionIdByAddress(address _addr) external view returns(uint256);\\n\\n    function getIncriptionByAddress(address _addr) external view returns(Token memory tokens, uint256 totalSupplies, uint256 totalRollups);\\n\\n    function fundingCommission() external view returns(uint16);\\n\\n    function isExisting(string memory _tick) external view returns(bool);\\n\\n    function isLiquidityAdded(address _addr) external view returns(bool);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWhitelist {\\n    function getStatus(address _tokenAddress, address _participant) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/libs/Logarithm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Logarithm {\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) public pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last digit, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x, int256 scale, int256 halfScale) public pure returns (int256 result) {\\n        require(x > 0);\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= scale) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = mostSignificantBit(uint256(x / scale));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * scale;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == scale) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(halfScale); delta > 0; delta >>= 1) {\\n                y = (y * y) / scale;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * scale) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libs/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libs/Logarithm.sol\": {\r\n        \"Logarithm\": \"0x16882fd345b2ed4e6578f538d7141af5702e6d4a\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tick\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"_cap\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_limitPerMint\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_inscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxMintSize\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"_freezeTime\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"_onlyContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_onlyMinQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"_baseFee\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"_fundingCommission\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_crowdFundingRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isIFOMode\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_liquidityTokenPercent\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"_ifoContractAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_inscriptionFactory\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_maxRollups\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_customizedConditionContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customizedVestingContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVesting\",\"type\":\"bool\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_num\",\"type\":\"uint32\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFerc20Data\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"cap\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"limitPerMint\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"onlyContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"maxMintSize\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"inscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"onlyMinQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"crowdFundingRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"freezeTime\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"fundingCommission\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityTokenPercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isIFOMode\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"inscriptionFactory\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"baseFee\",\"type\":\"uint128\"},{\"internalType\":\"address payable\",\"name\":\"ifoContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"maxRollups\",\"type\":\"uint96\"},{\"internalType\":\"contract ICustomizedCondition\",\"name\":\"customizedConditionContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract ICustomizedVesting\",\"name\":\"customizedVestingContractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IInscription.FERC20\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLastMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLastMintTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextMintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRollups\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Inscription", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000af000000000000000000000000062700ea68b3df1bff05c596734f976f0ad901a4e00000000000000000000000017fe21fab4784ecae27c7bb43d3d3cf3b73e7aa70000000000000000000000000000000000000000000000000000000000001c20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007466169724265740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046662657400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}