{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LockedFarming.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {SafeERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport {Context} from \\\"lib/openzeppelin-contracts/contracts/utils/Context.sol\\\";\\nimport {Ownable} from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Farming\\n * @notice Seedify's farming contract: stake LP token and earn rewards.\\n * @custom:audit This contract is NOT made to be used with deflationary tokens at all.\\n */\\ncontract SMD_v5 is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant SECONDS_PER_HOUR = 3600; // 60 * 60\\n\\n    /// @notice LP token address to deposit to earn rewards.\\n    address public tokenAddress;\\n    /// @notice token address to in which rewards will be paid in.\\n    address public rewardTokenAddress;\\n    /// @notice total amount of {tokenAddress} staked in the contract over its whole existence.\\n    uint256 public totalStaked;\\n    /**\\n     * @notice current amount of {tokenAddress} staked in the contract accross all periods. Use to\\n     *         calculate lost LP tokens.\\n     */\\n    uint256 public currentStakedBalance;\\n    /// @notice amount of {tokenAddress} staked in the contract for the current period.\\n    uint256 public stakedBalanceCurrPeriod;\\n    /// @notice should be the amount of rewards available in the contract accross all periods.\\n    uint256 public rewardBalance;\\n    /// @notice should be the amount of rewards for current period.\\n    uint256 public totalReward;\\n\\n    /**\\n     * @notice start date of current period.\\n     * @dev expressed in UNIX timestamp. Will be compareed to block.timestamp.\\n     */\\n    uint256 public startingDate;\\n    /**\\n     * @notice end date of current period.\\n     * @dev expressed in UNIX timestamp. Will be compareed to block.timestamp.\\n     */\\n    uint256 public endingDate;\\n    /**\\n     * @notice periodCounter is used to keep track of the farming periods, which allow participants to\\n     *         earn a certain amount of rewards by staking their LP for a certain period of time. Then,\\n     *         a new period can be opened with a different or equal amount to earn.\\n     * @dev counts the amount of farming periods.\\n     */\\n    uint256 public periodCounter;\\n    /**\\n     * @notice should be the amount of rewards per wei of deposited LP token {tokenAddress} for current\\n     *         period.\\n     */\\n    uint256 public accShare;\\n    /// @notice timestamp of at which shares have been updated at last, expressed in UNIX timestamp.\\n    uint256 public lastSharesUpdateTime;\\n    /**\\n     * @notice amount of participant in current period.\\n     * @dev {setNewPeriod} will reset this value to 0.\\n     */\\n    uint256 public totalParticipants;\\n    /// @dev expressed in hours, e.g. 7 days = 24 * 7 = 168.\\n    uint256 public lockDuration;\\n    /**\\n     * @notice whether prevent or not, wallets from staking, renewing staking, viewing old rewards,\\n     *         claiming rewards (old and current period) and withdrawing. Only admin functions are allowed.\\n     */\\n    bool public isPaused;\\n\\n    /// @notice should be the last transfered token which is either {tokenAddress} or {rewardTokenAddress}.\\n    IERC20 internal _erc20Interface;\\n\\n    /**\\n     * @notice struct which represent deposits made by a wallet based on a specific period. Each period has\\n     *         its own deposit data.\\n     *\\n     * @param amount amount of LP {tokenAddress} deposited accross all period.\\n     * @param latestStakeAt timestamp at which the latest stake has been made by the wallet for current\\n     *        period. Maturity date will be re-calculated from this timestamp which means each time the\\n     *        wallet stakes a new amount it has to wait for `lockDuration` before being able to withdraw.\\n     * @param latestClaimAt latest timestamp at which the wallet claimed their rewards.\\n     * @param userAccShare should be the amount of rewards per wei of deposited LP token {tokenAddress}\\n     *        accross all periods.\\n     * @param currentPeriod should be the lastest periodCounter at which the wallet participated.\\n     */\\n    struct Deposits {\\n        uint256 amount;\\n        uint256 latestStakeAt;\\n        uint256 latestClaimAt;\\n        uint256 userAccShare;\\n        uint256 currentPeriod;\\n    }\\n\\n    /**\\n     * @notice struct which should represent the details of ended periods.\\n     * @dev period 0 should contain nullish values.\\n     *\\n     * @param periodCounter counter to track the period id.\\n     * @param accShare should be the amount of rewards per wei of deposited LP token {tokenAddress} for\\n                       this ended period.\\n     * @param rewPerSecond should be the amount of rewards per second for this ended period.\\n     * @param startingDate should be the start date of this ended period.\\n     * @param endingDate should be the end date of this ended period.\\n     * @param rewards should be the total amount of rewards left until this ended period, which might\\n     *        include previous rewards from previous closed periods.\\n     */\\n    struct PeriodDetails {\\n        uint256 periodCounter;\\n        uint256 accShare;\\n        uint256 rewPerSecond;\\n        uint256 startingDate;\\n        uint256 endingDate;\\n        uint256 rewards;\\n    }\\n\\n    /// @notice should be the deposit data made by a wallet for accorss period if the wallet called {renew}.\\n    mapping(address => Deposits) private deposits;\\n\\n    /// @notice whether a wallet has staked or not.\\n    mapping(address => bool) public isPaid;\\n    /// @notice whether a wallet has staked some LP {tokenAddress} or not.\\n    mapping(address => bool) public hasStaked;\\n    /// @notice should be the details of ended periods.\\n    mapping(uint256 => PeriodDetails) public endAccShare;\\n\\n    event NewPeriodSet(\\n        uint256 periodCounter,\\n        uint256 startDate,\\n        uint256 endDate,\\n        uint256 lockDuration,\\n        uint256 rewardAmount\\n    );\\n    event Paused(\\n        uint256 indexed periodCounter,\\n        uint256 indexed totalParticipants,\\n        uint256 indexed currentStakedBalance,\\n        uint256 totalReward\\n    );\\n    event UnPaused(\\n        uint256 indexed periodCounter,\\n        uint256 indexed totalParticipants,\\n        uint256 indexed currentStakedBalance,\\n        uint256 totalReward\\n    );\\n    event PeriodExtended(\\n        uint256 periodCounter,\\n        uint256 endDate,\\n        uint256 rewards\\n    );\\n    event Staked(\\n        address indexed token,\\n        address indexed staker_,\\n        uint256 stakedAmount_\\n    );\\n    event PaidOut(\\n        address indexed token,\\n        address indexed rewardToken,\\n        address indexed staker_,\\n        uint256 amount_,\\n        uint256 reward_\\n    );\\n\\n    /**\\n     * @notice by default the contract is paused, so the owner can set the first period without anyone\\n     *         staking before it opens.\\n     * @param _tokenAddress LP token address to deposit to earn rewards.\\n     * @param _rewardTokenAddress token address into which rewards will be paid in.\\n     */\\n    constructor(address _tokenAddress, address _rewardTokenAddress) Ownable() {\\n        require(_tokenAddress != address(0), \\\"Zero token address\\\");\\n        tokenAddress = _tokenAddress;\\n        require(\\n            _rewardTokenAddress != address(0),\\n            \\\"Zero reward token address\\\"\\n        );\\n        rewardTokenAddress = _rewardTokenAddress;\\n        isPaused = true;\\n    }\\n\\n    /**\\n     * @notice Config new period details according to {setNewPeriod} parameters.\\n     *\\n     * @param _start Seconds at which the period starts - in UNIX timestamp.\\n     * @param _end Seconds at which the period ends - in UNIX timestamp.\\n     * @param _lockDuration Duration in hours to wait before being able to withdraw staked LP.\\n     */\\n    function __configNewPeriod(\\n        uint256 _start,\\n        uint256 _end,\\n        uint256 _lockDuration\\n    ) private {\\n        require(totalReward > 0, \\\"Add rewards for this periodCounter\\\");\\n        startingDate = _start;\\n        endingDate = _end;\\n        lockDuration = _lockDuration;\\n        periodCounter++;\\n        lastSharesUpdateTime = _start;\\n    }\\n\\n    /// @notice Add rewards to the contract and transfer them in it.\\n    function __addReward(\\n        uint256 _rewardAmount\\n    )\\n        private\\n        hasAllowance(msg.sender, _rewardAmount, rewardTokenAddress)\\n        returns (bool)\\n    {\\n        totalReward = totalReward.add(_rewardAmount);\\n        rewardBalance = rewardBalance.add(_rewardAmount);\\n        if (!__payMe(msg.sender, _rewardAmount, rewardTokenAddress)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /// save the details of the last ended period.\\n    function __saveOldPeriod() private {\\n        // only save old period if it has not been saved before\\n        if (endAccShare[periodCounter].startingDate == 0) {\\n            endAccShare[periodCounter] = PeriodDetails(\\n                periodCounter,\\n                accShare,\\n                rewPerSecond(),\\n                startingDate,\\n                endingDate,\\n                rewardBalance\\n            );\\n        }\\n    }\\n\\n    /// reset contracts's deposit data at the end of period and pause it.\\n    function __reset() private {\\n        totalReward = 0;\\n        stakedBalanceCurrPeriod = 0;\\n        totalParticipants = 0;\\n    }\\n\\n    /**\\n     * @notice set the start and end timestamp for the new period and add rewards to be\\n     *         earned within this period. Previous period must have ended, otherwise use\\n     *         {extendCurrentPeriod} to update current period.\\n     *         also calls {__addReward} to add rewards to this contract so be sure to approve this contract\\n     *         to spend your ERC20 before calling this function.\\n     *\\n     * @param _rewardAmount Amount of rewards to be earned within this period.\\n     * @param _start Seconds at which the period starts - in UNIX timestamp.\\n     * @param _end Seconds at which the period ends - in UNIX timestamp.\\n     * @param _lockDuration Duration in hours to wait before being able to withdraw staked LP.\\n     */\\n    function setNewPeriod(\\n        uint256 _rewardAmount,\\n        uint256 _start,\\n        uint256 _end,\\n        uint256 _lockDuration\\n    ) external onlyOwner returns (bool) {\\n        require(\\n            _start > block.timestamp,\\n            \\\"Start should be more than block.timestamp\\\"\\n        );\\n        require(_end > _start, \\\"End block should be greater than start\\\");\\n        require(_rewardAmount > 0, \\\"Reward must be positive\\\");\\n        require(block.timestamp > endingDate, \\\"Wait till end of this period\\\");\\n\\n        __updateShare();\\n        __saveOldPeriod();\\n\\n        __reset();\\n        bool rewardAdded = __addReward(_rewardAmount);\\n\\n        require(rewardAdded, \\\"Rewards error\\\");\\n\\n        __configNewPeriod(_start, _end, _lockDuration);\\n\\n        emit NewPeriodSet(\\n            periodCounter,\\n            _start,\\n            _end,\\n            _lockDuration,\\n            _rewardAmount\\n        );\\n\\n        isPaused = false;\\n\\n        return true;\\n    }\\n\\n    function pause() external onlyOwner {\\n        isPaused = true;\\n\\n        emit Paused(\\n            periodCounter,\\n            totalParticipants,\\n            currentStakedBalance,\\n            totalReward\\n        );\\n    }\\n\\n    function unPause() external onlyOwner {\\n        isPaused = false;\\n\\n        emit UnPaused(\\n            periodCounter,\\n            totalParticipants,\\n            currentStakedBalance,\\n            totalReward\\n        );\\n    }\\n\\n    /// @notice update {accShare} and {lastSharesUpdateTime} for current period.\\n    function __updateShare() private {\\n        if (block.timestamp <= lastSharesUpdateTime) {\\n            return;\\n        }\\n        if (stakedBalanceCurrPeriod == 0) {\\n            lastSharesUpdateTime = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 secSinceLastPeriod;\\n\\n        if (block.timestamp >= endingDate) {\\n            secSinceLastPeriod = endingDate.sub(lastSharesUpdateTime);\\n        } else {\\n            secSinceLastPeriod = block.timestamp.sub(lastSharesUpdateTime);\\n        }\\n\\n        uint256 rewards = secSinceLastPeriod.mul(rewPerSecond());\\n\\n        accShare = accShare.add(\\n            (rewards.mul(1e6).div(stakedBalanceCurrPeriod))\\n        );\\n        if (block.timestamp >= endingDate) {\\n            lastSharesUpdateTime = endingDate;\\n        } else {\\n            lastSharesUpdateTime = block.timestamp;\\n        }\\n    }\\n\\n    /// @notice calculate rewards to get per second for current period.\\n    function rewPerSecond() public view returns (uint256) {\\n        if (totalReward == 0 || rewardBalance == 0) return 0;\\n        uint256 rewardPerSecond = totalReward.div(\\n            (endingDate.sub(startingDate))\\n        );\\n        return (rewardPerSecond);\\n    }\\n\\n    function stake(\\n        uint256 amount\\n    ) external hasAllowance(msg.sender, amount, tokenAddress) returns (bool) {\\n        require(!isPaused, \\\"Contract is paused\\\");\\n        require(\\n            block.timestamp >= startingDate && block.timestamp < endingDate,\\n            \\\"No active pool (time)\\\"\\n        );\\n        require(amount > 0, \\\"Can't stake 0 amount\\\");\\n        return (__stake(msg.sender, amount));\\n    }\\n\\n    function __stake(address from, uint256 amount) private returns (bool) {\\n        __updateShare();\\n        // if never staked, create new deposit\\n        if (!hasStaked[from]) {\\n            deposits[from] = Deposits({\\n                amount: amount,\\n                latestStakeAt: block.timestamp,\\n                latestClaimAt: block.timestamp,\\n                userAccShare: accShare,\\n                currentPeriod: periodCounter\\n            });\\n            totalParticipants = totalParticipants.add(1);\\n            hasStaked[from] = true;\\n        }\\n        // otherwise update deposit details and claim pending rewards\\n        else {\\n            // if user has staked in previous period, renew and claim rewards from previous period\\n            if (deposits[from].currentPeriod != periodCounter) {\\n                bool renew_ = __renew(from);\\n                require(renew_, \\\"Error renewing\\\");\\n            }\\n            // otherwise on each new stake claim pending rewards of current period\\n            else {\\n                bool claim = __claimRewards(from);\\n                require(claim, \\\"Error paying rewards\\\");\\n            }\\n\\n            uint256 userAmount = deposits[from].amount;\\n\\n            deposits[from] = Deposits({\\n                amount: userAmount.add(amount),\\n                latestStakeAt: block.timestamp,\\n                latestClaimAt: block.timestamp,\\n                userAccShare: accShare,\\n                currentPeriod: periodCounter\\n            });\\n        }\\n        stakedBalanceCurrPeriod = stakedBalanceCurrPeriod.add(amount);\\n        totalStaked = totalStaked.add(amount);\\n        currentStakedBalance += amount;\\n        if (!__payMe(from, amount, tokenAddress)) {\\n            return false;\\n        }\\n        emit Staked(tokenAddress, from, amount);\\n        return true;\\n    }\\n\\n    /// @notice get user deposit details\\n    function userDeposits(\\n        address from\\n    ) external view returns (Deposits memory deposit) {\\n        return deposits[from];\\n    }\\n\\n    /// @custom:audit seems like a duplicate of {hasStaked}.\\n    function fetchUserShare(address from) public view returns (uint256) {\\n        require(hasStaked[from], \\\"No stakes found for user\\\");\\n        if (stakedBalanceCurrPeriod == 0) {\\n            return 0;\\n        }\\n        require(\\n            deposits[from].currentPeriod == periodCounter,\\n            \\\"Please renew in the active valid periodCounter\\\"\\n        );\\n        uint256 userAmount = deposits[from].amount;\\n        require(userAmount > 0, \\\"No stakes available for user\\\"); //extra check\\n        return 1;\\n    }\\n\\n    /// @dev claim pending rewards of current period.\\n    function claimRewards() public returns (bool) {\\n        require(!isPaused, \\\"Contract paused\\\");\\n        require(fetchUserShare(msg.sender) > 0, \\\"No stakes found for user\\\");\\n        return (__claimRewards(msg.sender));\\n    }\\n\\n    function __claimRewards(address from) private returns (bool) {\\n        uint256 userAccShare = deposits[from].userAccShare;\\n        __updateShare();\\n        uint256 amount = deposits[from].amount;\\n        uint256 rewDebt = amount.mul(userAccShare).div(1e6);\\n        uint256 rew = (amount.mul(accShare).div(1e6)).sub(rewDebt);\\n        require(rew > 0, \\\"No rewards generated\\\");\\n        require(rew <= rewardBalance, \\\"Not enough rewards in the contract\\\");\\n        deposits[from].userAccShare = accShare;\\n        deposits[from].latestClaimAt = block.timestamp;\\n        rewardBalance = rewardBalance.sub(rew);\\n        bool payRewards = __payDirect(from, rew, rewardTokenAddress);\\n        require(payRewards, \\\"Rewards transfer failed\\\");\\n        emit PaidOut(tokenAddress, rewardTokenAddress, from, amount, rew);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Should take into account farming rewards and LP staked from previous periods into the new\\n     *         current period.\\n     */\\n    function renew() public returns (bool) {\\n        require(!isPaused, \\\"Contract paused\\\");\\n        require(hasStaked[msg.sender], \\\"No stakings found, please stake\\\");\\n        require(\\n            deposits[msg.sender].currentPeriod != periodCounter,\\n            \\\"Already renewed\\\"\\n        );\\n        require(\\n            block.timestamp > startingDate && block.timestamp < endingDate,\\n            \\\"Wrong time\\\"\\n        );\\n        return (__renew(msg.sender));\\n    }\\n\\n    function __renew(address from) private returns (bool) {\\n        __updateShare();\\n        if (_viewOldRewards(from) > 0) {\\n            bool claimed = claimOldRewards();\\n            require(claimed, \\\"Error paying old rewards\\\");\\n        }\\n        deposits[from].currentPeriod = periodCounter;\\n        deposits[from].latestStakeAt = block.timestamp;\\n        deposits[from].latestClaimAt = block.timestamp;\\n        deposits[from].userAccShare = accShare;\\n        stakedBalanceCurrPeriod = stakedBalanceCurrPeriod.add(\\n            deposits[from].amount\\n        );\\n        totalParticipants = totalParticipants.add(1);\\n        return true;\\n    }\\n\\n    /// @notice get rewards from previous periods for `from` wallet.\\n    function viewOldRewards(address from) public view returns (uint256) {\\n        require(!isPaused, \\\"Contract paused\\\");\\n        require(hasStaked[from], \\\"No stakings found, please stake\\\");\\n\\n        return _viewOldRewards(from);\\n    }\\n\\n    function _viewOldRewards(address from) internal view returns (uint256) {\\n        if (deposits[from].currentPeriod == periodCounter) {\\n            return 0;\\n        }\\n\\n        uint256 userPeriod = deposits[from].currentPeriod;\\n\\n        uint256 accShare1 = endAccShare[userPeriod].accShare;\\n        uint256 userAccShare = deposits[from].userAccShare;\\n\\n        if (deposits[from].latestClaimAt >= endAccShare[userPeriod].endingDate)\\n            return 0;\\n        uint256 amount = deposits[from].amount;\\n        uint256 rewDebt = amount.mul(userAccShare).div(1e6);\\n        uint256 rew = (amount.mul(accShare1).div(1e6)).sub(rewDebt);\\n\\n        require(rew <= rewardBalance, \\\"Not enough rewards\\\");\\n\\n        return (rew);\\n    }\\n\\n    /// @notice save old period details and claim pending rewards from previous periods.\\n    function claimOldRewards() public returns (bool) {\\n        require(!isPaused, \\\"Contract paused\\\");\\n        require(hasStaked[msg.sender], \\\"No stakings found, please stake\\\");\\n        require(\\n            deposits[msg.sender].currentPeriod != periodCounter,\\n            \\\"Already renewed\\\"\\n        );\\n\\n        __saveOldPeriod();\\n\\n        uint256 userPeriod = deposits[msg.sender].currentPeriod;\\n\\n        uint256 accShare1 = endAccShare[userPeriod].accShare;\\n        uint256 userAccShare = deposits[msg.sender].userAccShare;\\n\\n        require(\\n            deposits[msg.sender].latestClaimAt <\\n                endAccShare[userPeriod].endingDate,\\n            \\\"Already claimed old rewards\\\"\\n        );\\n        uint256 amount = deposits[msg.sender].amount;\\n        uint256 rewDebt = amount.mul(userAccShare).div(1e6);\\n        uint256 rew = (amount.mul(accShare1).div(1e6)).sub(rewDebt);\\n\\n        require(rew <= rewardBalance, \\\"Not enough rewards\\\");\\n        deposits[msg.sender].latestClaimAt = endAccShare[userPeriod]\\n            .endingDate;\\n        rewardBalance = rewardBalance.sub(rew);\\n        bool paidOldRewards = __payDirect(msg.sender, rew, rewardTokenAddress);\\n        require(paidOldRewards, \\\"Error paying\\\");\\n        emit PaidOut(\\n            tokenAddress,\\n            rewardTokenAddress,\\n            msg.sender,\\n            amount,\\n            rew\\n        );\\n        return true;\\n    }\\n\\n    /// @notice should calculate current pending rewards for `from` wallet for current period.\\n    function calculate(address from) public view returns (uint256) {\\n        if (fetchUserShare(from) == 0) return 0;\\n        return (__calculate(from));\\n    }\\n\\n    function __calculate(address from) private view returns (uint256) {\\n        uint256 userAccShare = deposits[from].userAccShare;\\n        uint256 currentAccShare = accShare;\\n        //Simulating __updateShare() to calculate rewards\\n        if (block.timestamp <= lastSharesUpdateTime) {\\n            return 0;\\n        }\\n        if (stakedBalanceCurrPeriod == 0) {\\n            return 0;\\n        }\\n\\n        uint256 secSinceLastPeriod;\\n\\n        if (block.timestamp >= endingDate) {\\n            secSinceLastPeriod = endingDate.sub(lastSharesUpdateTime);\\n        } else {\\n            secSinceLastPeriod = block.timestamp.sub(lastSharesUpdateTime);\\n        }\\n\\n        uint256 rewards = secSinceLastPeriod.mul(rewPerSecond());\\n\\n        uint256 newAccShare = currentAccShare.add(\\n            (rewards.mul(1e6).div(stakedBalanceCurrPeriod))\\n        );\\n        uint256 amount = deposits[from].amount;\\n        uint256 rewDebt = amount.mul(userAccShare).div(1e6);\\n        uint256 rew = (amount.mul(newAccShare).div(1e6)).sub(rewDebt);\\n        return (rew);\\n    }\\n\\n    function emergencyWithdraw() external returns (bool) {\\n        require(\\n            block.timestamp >\\n                deposits[msg.sender].latestStakeAt.add(\\n                    lockDuration.mul(SECONDS_PER_HOUR)\\n                ),\\n            \\\"Can't withdraw before lock duration\\\"\\n        );\\n        require(hasStaked[msg.sender], \\\"No stakes available for user\\\");\\n        require(!isPaid[msg.sender], \\\"Already Paid\\\");\\n        return (__withdraw(msg.sender, deposits[msg.sender].amount));\\n    }\\n\\n    function __withdraw(address from, uint256 amount) private returns (bool) {\\n        __updateShare();\\n        deposits[from].amount = deposits[from].amount.sub(amount);\\n        if (deposits[from].currentPeriod == periodCounter) {\\n            stakedBalanceCurrPeriod -= amount;\\n        }\\n        bool paid = __payDirect(from, amount, tokenAddress);\\n        require(paid, \\\"Error during withdraw\\\");\\n        if (deposits[from].amount == 0) {\\n            isPaid[from] = true;\\n            hasStaked[from] = false;\\n            if (deposits[from].currentPeriod == periodCounter) {\\n                totalParticipants = totalParticipants.sub(1);\\n            }\\n            delete deposits[from];\\n        }\\n\\n        currentStakedBalance -= amount;\\n\\n        return true;\\n    }\\n\\n    /// Withdraw `amount` deposited LP token after lock duration.\\n    function withdraw(uint256 amount) external returns (bool) {\\n        require(!isPaused, \\\"Contract paused\\\");\\n        require(\\n            block.timestamp >\\n                deposits[msg.sender].latestStakeAt.add(\\n                    lockDuration.mul(SECONDS_PER_HOUR)\\n                ),\\n            \\\"Can't withdraw before lock duration\\\"\\n        );\\n        require(amount <= deposits[msg.sender].amount, \\\"Wrong value\\\");\\n        if (deposits[msg.sender].currentPeriod == periodCounter) {\\n            if (calculate(msg.sender) > 0) {\\n                bool rewardsPaid = claimRewards();\\n                require(rewardsPaid, \\\"Error paying rewards\\\");\\n            }\\n        }\\n\\n        if (_viewOldRewards(msg.sender) > 0) {\\n            bool oldRewardsPaid = claimOldRewards();\\n            require(oldRewardsPaid, \\\"Error paying old rewards\\\");\\n        }\\n        return (__withdraw(msg.sender, amount));\\n    }\\n\\n    /**\\n     * @notice add rewards to current period and extend its runing time.\\n     * @dev running should be updated based on the amount of rewards added and current rewards per second,\\n     *      e.g.: 1000 rewards per second, then if we add 1000 rewards then we increase running time by\\n     *      1 second.\\n     */\\n    function extendCurrentPeriod(\\n        uint256 rewardsToBeAdded\\n    ) external onlyOwner returns (bool) {\\n        require(\\n            block.timestamp > startingDate && block.timestamp < endingDate,\\n            \\\"No active pool (time)\\\"\\n        );\\n        require(rewardsToBeAdded > 0, \\\"Zero rewards\\\");\\n        bool addedRewards = __payMe(\\n            msg.sender,\\n            rewardsToBeAdded,\\n            rewardTokenAddress\\n        );\\n        require(addedRewards, \\\"Error adding rewards\\\");\\n        endingDate = endingDate.add(rewardsToBeAdded.div(rewPerSecond()));\\n        totalReward = totalReward.add(rewardsToBeAdded);\\n        rewardBalance = rewardBalance.add(rewardsToBeAdded);\\n        emit PeriodExtended(periodCounter, endingDate, rewardsToBeAdded);\\n        return true;\\n    }\\n\\n    /// @notice deposit rewards to this farming contract.\\n    function __payMe(\\n        address payer,\\n        uint256 amount,\\n        address token\\n    ) private returns (bool) {\\n        return __payTo(payer, address(this), amount, token);\\n    }\\n\\n    /// @notice should transfer rewards to farming contract.\\n    function __payTo(\\n        address allower,\\n        address receiver,\\n        uint256 amount,\\n        address token\\n    ) private returns (bool) {\\n        // Request to transfer amount from the contract to receiver.\\n        // contract does not own the funds, so the allower must have added allowance to the contract\\n        // Allower is the original owner.\\n        _erc20Interface = IERC20(token);\\n        _erc20Interface.safeTransferFrom(allower, receiver, amount);\\n        return true;\\n    }\\n\\n    /// @notice should pay rewards to `to` wallet and in certain case withdraw deposited LP token.\\n    function __payDirect(\\n        address to,\\n        uint256 amount,\\n        address token\\n    ) private returns (bool) {\\n        require(\\n            token == tokenAddress || token == rewardTokenAddress,\\n            \\\"Invalid token address\\\"\\n        );\\n        _erc20Interface = IERC20(token);\\n        _erc20Interface.safeTransfer(to, amount);\\n        return true;\\n    }\\n\\n    /// @notice check whether `allower` has approved this contract to spend at least `amount` of `token`.\\n    modifier hasAllowance(\\n        address allower,\\n        uint256 amount,\\n        address token\\n    ) {\\n        // Make sure the allower has provided the right allowance.\\n        require(\\n            token == tokenAddress || token == rewardTokenAddress,\\n            \\\"Invalid token address\\\"\\n        );\\n        _erc20Interface = IERC20(token);\\n        uint256 ourAllowance = _erc20Interface.allowance(\\n            allower,\\n            address(this)\\n        );\\n        require(amount <= ourAllowance, \\\"Make sure to add enough allowance\\\");\\n        _;\\n    }\\n\\n    function recoverLostERC20(address token, address to) external onlyOwner {\\n        if (token == address(0)) revert(\\\"Token_Zero_Address\\\");\\n        if (to == address(0)) revert(\\\"To_Zero_Address\\\");\\n\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\n\\n        // only retrieve lost {rewardTokenAddress}\\n        if (token == rewardTokenAddress) amount -= rewardBalance;\\n        // only retrieve lost LP tokens\\n        if (token == tokenAddress) amount -= currentStakedBalance;\\n\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/Token_Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport {ERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Token_Mock is ERC20 {\\n    constructor() ERC20(\\\"MockToken\\\", \\\"MCKT\\\") {}\\n\\n    function mint(address to, uint256 amount) public {\\n        _mint(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"NewPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentStakedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"PeriodExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount_\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentStakedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"UnPaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SECONDS_PER_HOUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOldRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endAccShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endingDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsToBeAdded\",\"type\":\"uint256\"}],\"name\":\"extendCurrentPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"fetchUserShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSharesUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverLostERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renew\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"setNewPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalanceCurrPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestStakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAccShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct SMD_v5.Deposits\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"viewOldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SMD_v5", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "0000000000000000000000008fb8e9921922d2ffb529a95d28a0d06d275d7a59000000000000000000000000560363bda52bc6a44ca6c8c9b4a5fadbda32fa60", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}