{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IWormhole.sol\": {\r\n      \"content\": \"// contracts/Messages.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport './WormholeStructs.sol';\\n\\ninterface IWormhole is WormholeStructs {\\n    event LogMessagePublished(\\n        address indexed sender,\\n        uint64 sequence,\\n        uint32 nonce,\\n        bytes payload,\\n        uint8 consistencyLevel\\n    );\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM)\\n        external\\n        view\\n        returns (\\n            WormholeStructs.VM memory vm,\\n            bool valid,\\n            string memory reason\\n        );\\n\\n    function verifyVM(WormholeStructs.VM memory vm)\\n        external\\n        view\\n        returns (bool valid, string memory reason);\\n\\n    function verifySignatures(\\n        bytes32 hash,\\n        WormholeStructs.Signature[] memory signatures,\\n        WormholeStructs.GuardianSet memory guardianSet\\n    ) external pure returns (bool valid, string memory reason);\\n\\n    function parseVM(bytes memory encodedVM)\\n        external\\n        pure\\n        returns (WormholeStructs.VM memory vm);\\n\\n    function getGuardianSet(uint32 index)\\n        external\\n        view\\n        returns (WormholeStructs.GuardianSet memory);\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n    function getGuardianSetExpiry() external view returns (uint32);\\n\\n    function governanceActionIsConsumed(bytes32 hash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/WormholeStructs.sol\": {\r\n      \"content\": \"// contracts/Structs.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ninterface WormholeStructs {\\n    struct Provider {\\n        uint16 chainId;\\n        uint16 governanceChainId;\\n        bytes32 governanceContract;\\n    }\\n\\n    struct GuardianSet {\\n        address[] keys;\\n        uint32 expirationTime;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n        bytes32 hash;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHashflowPool.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC1271.sol';\\n\\nimport './IQuote.sol';\\n\\n/// @title IHashflowPool\\n/// @author Victor Ionescu\\n/**\\n * Pool contract used for trading. The Pool can either hold funds or\\n * rely on external accounts. External accounts are used in order to preserve\\n * Capital Efficiency on the Market Maker side. This way, a Market Maker can\\n * make markets using funds that are also used on other venues.\\n */\\ninterface IHashflowPool is IQuote, IERC1271 {\\n    /// @notice Specifies a HashflowPool on a foreign chain.\\n    struct AuthorizedXChainPool {\\n        uint16 chainId;\\n        bytes32 pool;\\n    }\\n\\n    /// @notice Contains a signer verification address, and whether trading is enabled.\\n    struct SignerConfiguration {\\n        address signer;\\n        bool enabled;\\n    }\\n\\n    /// @notice Emitted when the authorization status of a withdrawal account changes.\\n    /// @param account The account for which the status changes.\\n    /// @param authorized The new authorization status.\\n    event UpdateWithdrawalAccount(address account, bool authorized);\\n\\n    /// @notice Emitted when the signer key used for the pool has changed.\\n    /// @param signer The new signer key.\\n    /// @param prevSigner The old signer key.\\n    event UpdateSigner(address signer, address prevSigner);\\n\\n    /// @notice Emitted when liquidity is withdrawn from the pool.\\n    /// @param token Token being withdrawn.\\n    /// @param recipient Address receiving the token.\\n    /// @param withdrawAmount Amount being withdrawn.\\n    event RemoveLiquidity(\\n        address token,\\n        address recipient,\\n        uint256 withdrawAmount\\n    );\\n\\n    /// @notice Emitted when an intra-chain trade happens.\\n    /// @param trader The trader.\\n    /// @param effectiveTrader The effective Trader.\\n    /// @param txid The txid of the quote.\\n    /// @param baseToken The token the trader sold.\\n    /// @param quoteToken The token the trader bought.\\n    /// @param baseTokenAmount The amount of baseToken sold.\\n    /// @param quoteTokenAmount The amount of quoteToken bought.\\n    event Trade(\\n        address trader,\\n        address effectiveTrader,\\n        bytes32 txid,\\n        address baseToken,\\n        address quoteToken,\\n        uint256 baseTokenAmount,\\n        uint256 quoteTokenAmount\\n    );\\n\\n    /// @notice Emitted when a cross-chain trade happens.\\n    /// @param dstChainId The Hashflow Chain ID for the destination chain.\\n    /// @param dstPool The pool address on the destination chain.\\n    /// @param trader The trader address.\\n    /// @param txid The txid of the quote.\\n    /// @param baseToken The token the trader sold.\\n    /// @param quoteToken The token the trader bought.\\n    /// @param baseTokenAmount The amount of baseToken sold.\\n    /// @param quoteTokenAmount The amount of quoteToken bought.\\n    event XChainTrade(\\n        uint16 dstChainId,\\n        bytes32 dstPool,\\n        address trader,\\n        bytes32 dstTrader,\\n        bytes32 txid,\\n        address baseToken,\\n        bytes32 quoteToken,\\n        uint256 baseTokenAmount,\\n        uint256 quoteTokenAmount\\n    );\\n\\n    /// @notice Emitted when a cross-chain trade is filled.\\n    /// @param txid The txid identified the quote that was filled.\\n    event XChainTradeFill(bytes32 txid);\\n\\n    /// @notice Main initializer.\\n    /// @param name Name of the pool.\\n    /// @param signer Signer key used for quote / deposit verification.\\n    /// @param operations Operations key that governs the pool.\\n    /// @param router Address of the HashflowRouter contract.\\n    function initialize(\\n        string calldata name,\\n        address signer,\\n        address operations,\\n        address router\\n    ) external;\\n\\n    /// @notice Returns the pool name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the signer address and whether the pool is enabled.\\n    function signerConfiguration() external view returns (address, bool);\\n\\n    /// @notice Returns the Operations address of this pool.\\n    function operations() external view returns (address);\\n\\n    /// @notice Returns the Router contract address.\\n    function router() external view returns (address);\\n\\n    /// @notice Returns the current nonce for a trader.\\n    function nonces(address trader) external view returns (uint256);\\n\\n    /// @notice Removes liquidity from the pool.\\n    /// @param token Token to withdraw.\\n    /// @param recipient Address to send token to.\\n    /// @param amount Amount to withdraw.\\n    function removeLiquidity(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Execute an RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    function tradeRFQT(RFQTQuote memory quote) external payable;\\n\\n    /// @notice Execute an RFQ-M trade.\\n    /// @param quote The quote to be executed.\\n    function tradeRFQM(RFQMQuote memory quote) external;\\n\\n    /// @notice Execute a cross-chain RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    /// @param trader The account that sends baseToken on this chain.\\n    function tradeXChainRFQT(XChainRFQTQuote memory quote, address trader)\\n        external\\n        payable;\\n\\n    /// @notice Execute a cross-chain RFQ-M trade.\\n    /// @param quote The quote to be executed.\\n    function tradeXChainRFQM(XChainRFQMQuote memory quote) external;\\n\\n    /// @notice Changes authorization for a set of pools to send X-Chain messages.\\n    /// @param pools The pools to change authorization status for.\\n    /// @param authorized The new authorization status.\\n    function updateXChainPoolAuthorization(\\n        AuthorizedXChainPool[] calldata pools,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Changes authorization for an X-Chain Messenger app.\\n    /// @param xChainMessenger The address of the Messenger app.\\n    /// @param authorized The new authorization status.\\n    function updateXChainMessengerAuthorization(\\n        address xChainMessenger,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Fills an x-chain order that completed on the source chain.\\n    /// @param externalAccount The external account to fill from, if any.\\n    /// @param txid The txid of the quote.\\n    /// @param trader The trader to receive the funds.\\n    /// @param quoteToken The token to be sent.\\n    /// @param quoteTokenAmount The amount of quoteToken to be sent.\\n    function fillXChain(\\n        address externalAccount,\\n        bytes32 txid,\\n        address trader,\\n        address quoteToken,\\n        uint256 quoteTokenAmount\\n    ) external;\\n\\n    /// @notice Updates withdrawal account authorization.\\n    /// @param withdrawalAccounts the accounts for which to update authorization status.\\n    /// @param authorized The new authorization status.\\n    function updateWithdrawalAccount(\\n        address[] memory withdrawalAccounts,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the signer key.\\n    /// @param signer The new signer key.\\n    function updateSigner(address signer) external;\\n\\n    /// @notice Used by the router to disable pool actions (Trade, Withdraw, Deposit)\\n    function killswitchOperations(bool enabled) external;\\n\\n    /// @notice Returns the token reserves for this pool.\\n    /// @param token The token to check reserves for.\\n    function getReserves(address token) external view returns (uint256);\\n\\n    /// @notice Approves a token for spend. Used for 1inch RFQ protocol.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param spender The spender address (typically the 1inch RFQ order router)\\n    /// @param amount The approval amount.\\n    function approveToken(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Increases allowance for a token. Used for 1inch RFQ protocol.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param spender The spender address (typically the 1inch RFQ order router).\\n    /// @param amount The approval amount.\\n    function increaseTokenAllowance(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Decreases allowance for a token. Used for 1inch RFQ protocol.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param spender The spender address (typically the 1inch RFQ order router)\\n    /// @param amount The approval amount.\\n    function decreaseTokenAllowance(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHashflowRouter.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\nimport './IQuote.sol';\\n\\n/// @title IHashflowRouter\\n/// @author Victor Ionescu\\n/**\\n * @notice In terms of user-facing functionality, the Router is responsible for:\\n * - orchestrating trades\\n * - managing cross-chain permissions\\n *\\n * Every trade requires consent from two parties: the Trader and the Market Maker.\\n * However, there are two models to establish consent:\\n * - RFQ-T: in this model, the Market Maker provides an EIP-191 signature for the quote,\\n *   while the Trader signs the transaction and submits it on-chain\\n * - RFQ-M: in this model, the Trader provides an EIP-712 signature for the quote,\\n *   the Market Maker provides an EIP-191 signature, and a 3rd party relays the trade.\\n *   The 3rd party can be the Market Maker itself.\\n *\\n * In terms of Hashflow internals, the Router maintains a set of authorized pool\\n * contracts that are allowed to be used for trading. This allowlist creates\\n * guarantees against malicious behavior, as documented in specific places.\\n *\\n * The Router contract is not upgradeable. In order to change functionality, a new\\n * Router has to be deployed, and new HashflowPool contracts have to be deployed\\n * by the Market Makers.\\n */\\n/// @dev Trade / liquidity events are emitted at the HashflowPool level, rather than the router.\\ninterface IHashflowRouter is IQuote {\\n    /**\\n     * @notice X-Chain message received from an X-Chain Messenger. This is used by the\\n     * Router to communicate a fill to a HashflowPool.\\n     */\\n    struct XChainFillMessage {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcHashflowChainId;\\n        /// @notice The address of the HashflowPool on the source chain.\\n        bytes32 srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        address dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        address dstExternalAccount;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        address dstTrader;\\n        /// @notice The token that the trader buys on the destination chain.\\n        address quoteToken;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice The caller of the trade function on the source chain.\\n        bytes32 srcCaller;\\n        /// @notice The contract to call, if any.\\n        address dstContract;\\n        /// @notice The calldata for the contract.\\n        bytes dstContractCalldata;\\n    }\\n\\n    /// @notice Emitted when the authorization status of a pool changes.\\n    /// @param pool The pool whose status changed.\\n    /// @param authorized The new auth status.\\n    event UpdatePoolAuthorizaton(address pool, bool authorized);\\n\\n    /// @notice Emitted when a sender pool authorization changes.\\n    /// @param pool Pool address on this chain.\\n    /// @param otherHashflowChainId Hashflow Chain ID of the other chain.\\n    /// @param otherChainPool Pool address on the other chain.\\n    /// @param authorized Whether the pool is authorized.\\n    event UpdateXChainPoolAuthorization(\\n        address indexed pool,\\n        uint16 otherHashflowChainId,\\n        bytes32 otherChainPool,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorization of an x-caller changes.\\n    /// @param pool Pool address on this chain.\\n    /// @param otherHashflowChainId Hashflow Chain ID of the other chain.\\n    /// @param caller Caller address on the other chain.\\n    /// @param authorized Whether the caller is authorized.\\n    event UpdateXChainCallerAuthorization(\\n        address indexed pool,\\n        uint16 otherHashflowChainId,\\n        bytes32 caller,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorization status of an X-Chain Messenger changes for a pool.\\n    /// @param pool Pool address for which the Messenger authorization changes.\\n    /// @param xChainMessenger Address of the Messenger.\\n    /// @param authorized Whether the X-Chain Messenger is authorized.\\n    event UpdateXChainMessengerAuthorization(\\n        address indexed pool,\\n        address xChainMessenger,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorized status of an X-Chain Messenger changes for a callee.\\n    /// @param callee Address of the callee.\\n    /// @param xChainMessenger Address of the Messenger.\\n    /// @param authorized Whether the X-Chain Messenger is authorized.\\n    event UpdateXChainMessengerCallerAuthorization(\\n        address indexed callee,\\n        address xChainMessenger,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the Limit Order Guardian address is updated.\\n    /// @param guardian The new Guardian address.\\n    event UpdateLimitOrderGuardian(address guardian);\\n\\n    /// @notice Initializes the Router. Called one time.\\n    /// @param factory The address of the HashflowFactory contract.\\n    function initialize(address factory) external;\\n\\n    /// @notice Returns the address of the associated HashflowFactor contract.\\n    function factory() external view returns (address);\\n\\n    function authorizedXChainPools(\\n        bytes32 dstPool,\\n        uint16 srcHChainId,\\n        bytes32 srcPool\\n    ) external view returns (bool);\\n\\n    function authorizedXChainCallers(\\n        address dstContract,\\n        uint16 srcHashflowChainId,\\n        bytes32 caller\\n    ) external view returns (bool);\\n\\n    function authorizedXChainMessengersByPool(address pool, address messenger)\\n        external\\n        view\\n        returns (bool);\\n\\n    function authorizedXChainMessengersByCallee(\\n        address callee,\\n        address messenger\\n    ) external view returns (bool);\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote data to be executed.\\n    function tradeRFQT(RFQTQuote memory quote) external payable;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote data to be executed.\\n    /// @dev Does not support native tokens for the baseToken.\\n    function tradeRFQTWithPermit(\\n        RFQTQuote memory quote,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    function tradeRFQM(RFQMQuote memory quote) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeRFQMWithPermit(\\n        RFQMQuote memory quote,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    /// @param guardianSignature A signature issued by the Limit Order Guardian.\\n    function tradeRFQMLimitOrder(\\n        RFQMQuote memory quote,\\n        bytes memory guardianSignature\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param guardianSignature A signature issued by the Limit Order Guardian.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeRFQMLimitOrderWithPermit(\\n        RFQMQuote memory quote,\\n        bytes memory guardianSignature,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an RFQ-T cross-chain trade.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    function tradeXChainRFQT(\\n        XChainRFQTQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) external payable;\\n\\n    /// @notice Executes an RFQ-T cross-chain trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeXChainRFQTWithPermit(\\n        XChainRFQTQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external payable;\\n\\n    /// @notice Executes an RFQ-M cross-chain trade.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    function tradeXChainRFQM(\\n        XChainRFQMQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) external payable;\\n\\n    /// @notice Similar to tradeXChainRFQm, but includes a spend permit for the baseToken.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount to approve.\\n    function tradeXChainRFQMWithPermit(\\n        XChainRFQMQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external payable;\\n\\n    /// @notice Completes the second leg of a cross-chain trade.\\n    /// @param fillMessage Payload containing information necessary to complete the trade.\\n    function fillXChain(XChainFillMessage memory fillMessage) external;\\n\\n    /// @notice Returns whether the pool is authorized for trading.\\n    /// @param pool The address of the HashflowPool.\\n    function authorizedPools(address pool) external view returns (bool);\\n\\n    /// @notice Allows the owner to unauthorize a potentially compromised pool. Cannot be reverted.\\n    /// @param pool The address of the HashflowPool.\\n    function forceUnauthorizePool(address pool) external;\\n\\n    /// @notice Authorizes a HashflowPool for trading.\\n    /// @dev Can only be called by the HashflowFactory or the admin.\\n    function updatePoolAuthorization(address pool, bool authorized) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain pool pair.\\n    /// @param otherHashflowChainId The Hashflow Chain ID of the peer chain.\\n    /// @param otherPool The 32-byte representation of the Pool address on the peer chain.\\n    /// @param authorized Whether the pool is authorized to communicate with the sender pool.\\n    function updateXChainPoolAuthorization(\\n        uint16 otherHashflowChainId,\\n        bytes32 otherPool,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain caller.\\n    /// @param otherHashflowChainId The Hashflow Chain ID of the peer chain.\\n    /// @param caller The caller address.\\n    /// @param authorized Whether the caller is authorized to send an x-call to the sender pool.\\n    function updateXChainCallerAuthorization(\\n        uint16 otherHashflowChainId,\\n        bytes32 caller,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain Messenger app.\\n    /// @param xChainMessenger The address of the Messenger App.\\n    /// @param authorized The new authorization status.\\n    function updateXChainMessengerAuthorization(\\n        address xChainMessenger,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain Messenger app.\\n    /// @param xChainMessenger The address of the Messenger App.\\n    /// @param authorized The new authorization status.\\n    function updateXChainMessengerCallerAuthorization(\\n        address xChainMessenger,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Used to stop all operations on a pool, in case of an emergency.\\n    /// @param pool The address of the HashflowPool.\\n    /// @param enabled Whether the pool is enabled.\\n    function killswitchPool(address pool, bool enabled) external;\\n\\n    /// @notice Used to update the Limit Order Guardian.\\n    /// @param guardian The address of the new Guardian.\\n    function updateLimitOrderGuardian(address guardian) external;\\n\\n    /// @notice Allows the owner to withdraw excess funds from the Router.\\n    /// @dev Under normal operations, the Router should not have excess funds.\\n    function withdrawFunds(address token) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IQuote.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\n/// @title IQuote\\n/// @author Victor Ionescu\\n/**\\n * @notice Interface for quote structs used for trading. There are two major types of trades:\\n * - intra-chain: atomic transactions within one chain\\n * - cross-chain: multi-leg transactions between two chains, which utilize interoperability protocols\\n *                such as Wormhole.\\n *\\n * Separately, there are two trading modes:\\n * - RFQ-T: the trader signs the transaction, the market maker signs the quote\\n * - RFQ-M: both the trader and Market Maker sign the quote, any relayer can sign the transaction\\n */\\ninterface IQuote {\\n    /// @notice Used for intra-chain RFQ-T trades.\\n    struct RFQTQuote {\\n        /// @notice The address of the HashflowPool to trade against.\\n        address pool;\\n        /**\\n         * @notice The external account linked to the HashflowPool.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address externalAccount;\\n        /// @notice The recipient of the quoteToken at the end of the trade.\\n        address trader;\\n        /**\\n         * @notice The account \\\"effectively\\\" making the trade (ultimately receiving the funds).\\n         * This is commonly used by aggregators, where a proxy contract (the 'trader')\\n         * receives the quoteToken, and the effective trader is the user initiating the call.\\n         *\\n         * This field DOES NOT influence movement of funds. However, it is used to check against\\n         * quote replay.\\n         */\\n        address effectiveTrader;\\n        /// @notice The token that the trader sells.\\n        address baseToken;\\n        /// @notice The token that the trader buys.\\n        address quoteToken;\\n        /**\\n         * @notice The amount of baseToken sold in this trade. The exchange rate\\n         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.\\n         *\\n         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.\\n         */\\n        uint256 effectiveBaseTokenAmount;\\n        /// @notice The max amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought when baseTokenAmount is sold.\\n        uint256 quoteTokenAmount;\\n        /// @notice The Unix timestamp (in seconds) when the quote expires.\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice The nonce used by this effectiveTrader. Nonces are used to protect against replay.\\n        uint256 nonce;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes signature;\\n    }\\n\\n    /// @notice Used for intra-chain RFQ-M trades.\\n    struct RFQMQuote {\\n        /// @notice The address of the HashflowPool to trade against.\\n        address pool;\\n        /**\\n         * @notice The external account linked to the HashflowPool.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address externalAccount;\\n        /// @notice The account that will be debited baseToken / credited quoteToken.\\n        address trader;\\n        /// @notice The token that the trader sells.\\n        address baseToken;\\n        /// @notice The token that the trader buys.\\n        address quoteToken;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /// @notice The Unix timestamp (in seconds) when the quote expires.\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice Signature provided by the trader (EIP-712).\\n        bytes takerSignature;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes makerSignature;\\n    }\\n\\n    /// @notice Used for cross-chain RFQ-T trades.\\n    struct XChainRFQTQuote {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcChainId;\\n        /// @notice The Hashflow Chain ID of the destination chain.\\n        uint16 dstChainId;\\n        /// @notice The address of the HashflowPool to trade against on the source chain.\\n        address srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        /// @dev This is bytes32 in order to anticipate non-EVM chains.\\n        bytes32 dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the source chain.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address srcExternalAccount;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        bytes32 dstExternalAccount;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        bytes32 dstTrader;\\n        /// @notice The token that the trader sells on the source chain.\\n        address baseToken;\\n        /// @notice The token that the trader buys on the destination chain.\\n        bytes32 quoteToken;\\n        /**\\n         * @notice The amount of baseToken sold in this trade. The exchange rate\\n         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.\\n         *\\n         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.\\n         */\\n        uint256 effectiveBaseTokenAmount;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /**\\n         * @notice The Unix timestamp (in seconds) when the quote expire. Only enforced\\n         * on the source chain.\\n         */\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice The nonce used by this trader.\\n        uint256 nonce;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /**\\n         * @notice The address of the IHashflowXChainMessenger contract used for\\n         * cross-chain communication.\\n         */\\n        address xChainMessenger;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes signature;\\n    }\\n\\n    /// @notice Used for Cross-Chain RFQ-M trades.\\n    struct XChainRFQMQuote {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcChainId;\\n        /// @notice The Hashflow Chain ID of the destination chain.\\n        uint16 dstChainId;\\n        /// @notice The address of the HashflowPool to trade against on the source chain.\\n        address srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        /// @dev This is bytes32 in order to anticipate non-EVM chains.\\n        bytes32 dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the source chain.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address srcExternalAccount;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        bytes32 dstExternalAccount;\\n        /// @notice The account that will be debited baseToken on the source chain.\\n        address trader;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        bytes32 dstTrader;\\n        /// @notice The token that the trader sells on the source chain.\\n        address baseToken;\\n        /// @notice The token that the trader buys on the destination chain.\\n        bytes32 quoteToken;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /**\\n         * @notice The Unix timestamp (in seconds) when the quote expire. Only enforced\\n         * on the source chain.\\n         */\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /**\\n         * @notice The address of the IHashflowXChainMessenger contract used for\\n         * cross-chain communication.\\n         */\\n        address xChainMessenger;\\n        /// @notice Signature provided by the trader (EIP-712).\\n        bytes takerSignature;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes makerSignature;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/xchain/IHashflowWormholeMessenger.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\nimport './IHashflowXChainMessenger.sol';\\n\\ninterface IHashflowWormholeMessenger is IHashflowXChainMessenger {\\n    /// @notice Emitted when the Wormhole endpoint is updated.\\n    /// @param wormholeEndpoint The new Wormhole endpoint.\\n    /// @param prevWormholeEndpoint The old Wormhole endpoint.\\n    event UpdateWormholeEndpoint(\\n        address wormholeEndpoint,\\n        address prevWormholeEndpoint\\n    );\\n\\n    /// @notice Emitted when the Wormhole consistency level is updated.\\n    /// @param consistencyLevel The new consistencyLevel.\\n    event UpdateWormholeConsistencyLevel(uint256 consistencyLevel);\\n\\n    /// @notice Emitted when the Wormhole fast consistency level is updated.\\n    /// @param consistencyLevel The new consistencyLevel.\\n    event UpdateWormholeConsistencyLevelFast(uint256 consistencyLevel);\\n\\n    /// @notice Emitted when a Wormhole Chain ID is updated.\\n    /// @param hChainId The Hashflow Chain ID.\\n    /// @param wormholeChainId The Wormhole Chain ID.\\n    event UpdateWormholeChainId(uint256 hChainId, uint256 wormholeChainId);\\n\\n    event UpdatePermissionedRelayer(uint16 hChainId, bytes32 relayer);\\n\\n    /// @notice Emitted when a message is sent via Wormhole.\\n    /// @dev The sequence is used offline by the Relayer to fetch the VAA.\\n    event WormholeSend(bytes32 txid, uint256 value, uint256 sequence);\\n\\n    /// @notice Emitted when a message is sent with fast consistency level.\\n    event WormholeSendFast(bytes32 txid, uint256 value, uint256 sequence);\\n\\n    /// @notice Emitted when a Wormhole message is successfully received.\\n    event WormholeReceive(bytes32 txid);\\n\\n    /// @notice Returns the currently set Wormhole endpoint.\\n    function wormholeEndpoint() external view returns (address);\\n\\n    /// @notice Returns the currently set consistency level for Wormhole.\\n    function wormholeConsistencyLevel() external view returns (uint8);\\n\\n    /// @notice Returns the currently set consistency level for Wormhole fast messages.\\n    function wormholeConsistencyLevelFast() external view returns (uint8);\\n\\n    /// @notice Returns the associated Hashflow Chain ID to a Wormhole Chain ID.\\n    /// @param wormholeChainId The Wormhole Chain ID.\\n    function wormholeChainIdToHChainId(uint16 wormholeChainId)\\n        external\\n        view\\n        returns (uint16);\\n\\n    /// @notice Returns the associated Wormhole Chain ID to a Hashflow Chain ID.\\n    /// @param hChainId The Hashflow Chain Id.\\n    function hChainIdToWormholeChainId(uint16 hChainId)\\n        external\\n        view\\n        returns (uint16);\\n\\n    /// @notice Returns the currently set permissioned Relayer for a Hashflow Chain.\\n    /// @param hChainId The Hashflow Chain ID.\\n    function permissionedRelayers(uint16 hChainId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /// @notice Updates the Wormhole bridge endpoint.\\n    /// @param wormhole The new Wormhole bridge endpoint.\\n    function updateWormhole(address wormhole) external;\\n\\n    /// @notice Updates the Wormhole consistency level.\\n    /// @param consistencyLevel The new consistency level.\\n    function updateWormholeConsistencyLevel(uint8 consistencyLevel) external;\\n\\n    /// @notice Updates the Wormhole fast consistency level.\\n    /// @param consistencyLevel The new fast consistency level.\\n    function updateWormholeConsistencyLevelFast(uint8 consistencyLevel)\\n        external;\\n\\n    /// @notice Updates the permissioned Relayer for a hashflow chain ID.\\n    /// @param hChainId The Hashflow Chain ID.\\n    /// @param relayer The permissioned Relayer.\\n    function updatePermissionedRelayer(uint16 hChainId, bytes32 relayer)\\n        external;\\n\\n    /// @notice Receives a message sent via Wormhole.\\n    /// @param encodedVM the encoded Wormhole VAA.\\n    function wormholeReceive(bytes memory encodedVM) external;\\n\\n    /// @notice Sets the Wormhole Chain ID for a Hashflow Chain ID.\\n    /// @param hChainId The Hashflow Chain ID.\\n    /// @param wormholeChainId The Wormhole Chain ID.\\n    function updateWormholeChainIdForHashflowChainId(\\n        uint16 hChainId,\\n        uint16 wormholeChainId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/xchain/IHashflowXChainMessenger.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\n/// @title IHashflowMessenger\\n/// @author Victor Ionescu\\n/**\\n * @notice This interface should be implemented by any contract\\n * that is to be used for X-Chain Message passing.\\n */\\ninterface IHashflowXChainMessenger {\\n    struct XChainQuote {\\n        uint16 srcChainId;\\n        uint16 dstChainId;\\n        address srcPool;\\n        bytes32 dstPool;\\n        address srcExternalAccount;\\n        bytes32 dstExternalAccount;\\n        address trader;\\n        bytes32 dstTrader;\\n        address baseToken;\\n        bytes32 quoteToken;\\n        uint256 baseTokenAmount;\\n        uint256 quoteTokenAmount;\\n        bytes32 txid;\\n    }\\n\\n    struct XChainTradePayload {\\n        uint16 dstChainId;\\n        bytes32 txid;\\n        bytes32 srcPool;\\n        bytes32 dstPool;\\n        bytes32 dstExternalAccount;\\n        bytes32 quoteToken;\\n        bytes32 dstTrader;\\n        uint256 quoteTokenAmount;\\n        bytes32 permissionedRelayer;\\n        bytes32 srcCaller;\\n        bytes32 dstContract;\\n        bytes dstContractCalldata;\\n    }\\n\\n    /// @notice Emitted when an associated IHashflowMessenger on a source chain changes.\\n    /// @param chainId The Hashflow Chain ID.\\n    /// @param remoteAddress The address of the remote, pre-padded to 32 bytes.\\n    event UpdateXChainRemoteAddress(uint16 chainId, bytes remoteAddress);\\n\\n    /// @notice The Hashflow Chain ID for this chain.\\n    function hChainId() external view returns (uint16);\\n\\n    /// @notice Returns the Hashflow Router.\\n    function router() external view returns (address);\\n\\n    /// @notice Returns the registered remote for a Hashflow Chain ID.\\n    /// @param hChainId The foreign Hashflow Chain ID.\\n    function xChainRemotes(uint16 hChainId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    /// @notice Send X-Chain trade fill message.\\n    /// @param xChainQuote Quote object.\\n    /// @param caller The caller of the X-Chain trade.\\n    /// @param dstContract The contract to call on the destination chain.\\n    /// @param dstCalldata The calldata to pass to the contract.\\n    function tradeXChain(\\n        XChainQuote memory xChainQuote,\\n        address caller,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) external payable;\\n\\n    /// @notice Updates the associated IHashflowMessenger address on a different chain.\\n    /// @param hChainId The Hashflow Chain ID of the peer chain.\\n    /// @param remoteAddress The address of the IHashflowMessenger on the peer chain.\\n    function updateXChainRemoteAddress(\\n        uint16 hChainId,\\n        bytes calldata remoteAddress\\n    ) external;\\n\\n    /// @notice Withdraws excess fees to the owner.\\n    function withdrawFunds() external;\\n}\\n\"\r\n    },\r\n    \"contracts/xchain/HashflowWormholeMessenger.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.8.18;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/external/IWormhole.sol';\\nimport '../interfaces/xchain/IHashflowWormholeMessenger.sol';\\nimport '../interfaces/IHashflowPool.sol';\\nimport '../interfaces/IHashflowRouter.sol';\\n\\nimport './HashflowXChainMessengerBase.sol';\\n\\ncontract HashflowWormholeMessenger is\\n    HashflowXChainMessengerBase,\\n    IHashflowWormholeMessenger,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    address public wormholeEndpoint;\\n\\n    uint8 public wormholeConsistencyLevel;\\n    uint8 public wormholeConsistencyLevelFast;\\n\\n    // These mappings manage H-Chain ID <-> Wormhole Chain ID links.\\n    mapping(uint16 => uint16) public hChainIdToWormholeChainId;\\n    mapping(uint16 => uint16) public wormholeChainIdToHChainId;\\n\\n    mapping(uint16 => bytes32) public permissionedRelayers;\\n\\n    receive() external payable {}\\n\\n    constructor(uint16 _hChainId, address _router)\\n        HashflowXChainMessengerBase(_hChainId, _router)\\n    {}\\n\\n    /// @inheritdoc IHashflowWormholeMessenger\\n    function updateWormhole(address wormhole) external override onlyOwner {\\n        require(\\n            wormhole.isContract(),\\n            'HashflowWormholeMessenger::updateWormhole Wormhole endpoint must be a contract.'\\n        );\\n        emit UpdateWormholeEndpoint(wormhole, wormholeEndpoint);\\n        wormholeEndpoint = wormhole;\\n    }\\n\\n    /// @inheritdoc IHashflowWormholeMessenger\\n    function updateWormholeConsistencyLevel(uint8 consistencyLevel)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            consistencyLevel != 0,\\n            'HashflowWormholeMessenger::updateWormholeConsistencyLevel Consistency level cannot be 0.'\\n        );\\n        wormholeConsistencyLevel = consistencyLevel;\\n        emit UpdateWormholeConsistencyLevel(wormholeConsistencyLevel);\\n    }\\n\\n    /// @inheritdoc IHashflowWormholeMessenger\\n    function updateWormholeConsistencyLevelFast(uint8 consistencyLevel)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            consistencyLevel != 0,\\n            'HashflowWormholeMessenger::updateWormholeConsistencyLevelFast Consistency level cannot be 0.'\\n        );\\n        wormholeConsistencyLevelFast = consistencyLevel;\\n        emit UpdateWormholeConsistencyLevelFast(wormholeConsistencyLevelFast);\\n    }\\n\\n    /// @inheritdoc IHashflowWormholeMessenger\\n    function updatePermissionedRelayer(uint16 _hChainId, bytes32 relayer)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            _hChainId != hChainId,\\n            'HashflowWormholeMessenger::updatePermissionedRelayer Cannot update relayer for same chain.'\\n        );\\n        require(\\n            relayer != bytes32(0),\\n            'HashflowWormholeMessenger::updatePermissionedRelayer Relayer address cannot be 0.'\\n        );\\n\\n        permissionedRelayers[_hChainId] = relayer;\\n        emit UpdatePermissionedRelayer(_hChainId, relayer);\\n    }\\n\\n    /// @inheritdoc IHashflowXChainMessenger\\n    function tradeXChain(\\n        XChainQuote memory quote,\\n        address caller,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) external payable {\\n        require(\\n            _msgSender() == router,\\n            'HashflowWormholeMessenger::tradeXChain Sender must be router.'\\n        );\\n        require(\\n            quote.srcChainId == hChainId,\\n            'HashflowWormholeMessenger::tradeXChain Incorrect srcChainId.'\\n        );\\n\\n        _wormholeSend(quote, caller, dstContract, dstCalldata);\\n    }\\n\\n    /// @dev Send message via Wormhole.\\n    function _wormholeSend(\\n        XChainQuote memory quote,\\n        address caller,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) private {\\n        uint256 wormholeMessageFee = IWormhole(wormholeEndpoint).messageFee();\\n        uint256 totalWormholeMessageFee = wormholeMessageFee;\\n\\n        // We double the fee for fast relays.\\n        if (\\n            wormholeConsistencyLevelFast != 0 &&\\n            permissionedRelayers[quote.dstChainId] != bytes32(0)\\n        ) {\\n            totalWormholeMessageFee = totalWormholeMessageFee * 2;\\n        }\\n\\n        require(\\n            msg.value >= totalWormholeMessageFee,\\n            'HashflowWormholeMessenger::_wormholeSend Insufficient Wormhole fees.'\\n        );\\n        uint16 wormholeDstChainId = hChainIdToWormholeChainId[quote.dstChainId];\\n        require(\\n            wormholeDstChainId != 0 &&\\n                xChainRemotes[quote.dstChainId].length > 0,\\n            'HashflowWormholeMessenger::_wormholeSend Wormhole destination chain ID not configured'\\n        );\\n        require(\\n            wormholeConsistencyLevel != 0,\\n            'HashflowWormholeMessenger::_wormholeSend Consistency level not set.'\\n        );\\n\\n        {\\n            bytes memory payload = _generateTradePayload(\\n                quote,\\n                caller,\\n                bytes32(0),\\n                dstContract,\\n                dstCalldata\\n            );\\n            uint256 sequence = IWormhole(wormholeEndpoint).publishMessage{\\n                value: wormholeMessageFee\\n            }(\\n                0, // Nonce.\\n                payload,\\n                wormholeConsistencyLevel\\n            );\\n            emit WormholeSend(\\n                quote.txid,\\n                msg.value - totalWormholeMessageFee,\\n                sequence\\n            );\\n        }\\n\\n        if (\\n            wormholeConsistencyLevelFast != 0 &&\\n            permissionedRelayers[quote.dstChainId] != bytes32(0)\\n        ) {\\n            bytes memory payload = _generateTradePayload(\\n                quote,\\n                caller,\\n                permissionedRelayers[quote.dstChainId],\\n                dstContract,\\n                dstCalldata\\n            );\\n            uint256 sequence = IWormhole(wormholeEndpoint).publishMessage{\\n                value: wormholeMessageFee\\n            }(\\n                0, // Nonce.\\n                payload,\\n                wormholeConsistencyLevelFast\\n            );\\n            emit WormholeSendFast(\\n                quote.txid,\\n                msg.value - totalWormholeMessageFee,\\n                sequence\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IHashflowWormholeMessenger\\n    function wormholeReceive(bytes memory encodedVM)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        (\\n            WormholeStructs.VM memory vm,\\n            bool valid,\\n            string memory reason\\n        ) = IWormhole(wormholeEndpoint).parseAndVerifyVM(encodedVM);\\n\\n        // We make sure the message is valid and has been signed by\\n        // Guardians.\\n        require(valid, reason);\\n\\n        // We check that the emitter chain has been properly configured.\\n        // It is OK to revert if not -- the message can be retried later on.\\n        // Wormhole VAAs are non-blocking.\\n        uint16 srcHChainId = wormholeChainIdToHChainId[vm.emitterChainId];\\n        require(\\n            srcHChainId != 0,\\n            'HashflowWormholeMessenger::wormholeReceive Invalid source chain.'\\n        );\\n\\n        // We ensure that the sender of the message is a valid Hashflow contract.\\n        bytes32 authorizedRemote = bytes32(\\n            uint256(bytes32(xChainRemotes[srcHChainId])) >>\\n                ((32 - xChainRemotes[srcHChainId].length) * 8)\\n        );\\n        require(\\n            authorizedRemote == vm.emitterAddress,\\n            'HashflowWormholeMessenger::wormholeReceive Unauthorized remote.'\\n        );\\n\\n        XChainTradePayload memory tradePayload = abi.decode(\\n            vm.payload,\\n            (XChainTradePayload)\\n        );\\n\\n        IHashflowRouter.XChainFillMessage memory fillMessage;\\n        // We need to check that this is the intended receiving chain.\\n        require(\\n            tradePayload.dstChainId == hChainId,\\n            'HashflowWormholeMessenger::wormholeReceive Incorrect destination chain.'\\n        );\\n        if (tradePayload.permissionedRelayer != bytes32(0)) {\\n            require(\\n                bytes32(\\n                    uint256(uint160(uint256(tradePayload.permissionedRelayer)))\\n                ) == tradePayload.permissionedRelayer,\\n                'HashflowWormholeMessenger::wormholeReceive permissionedRelayer is not EVM address.'\\n            );\\n            require(\\n                address(uint160(uint256(tradePayload.permissionedRelayer))) ==\\n                    _msgSender(),\\n                'HashflowWormholeMessenger::wormholeReceive Relayer not authorized.'\\n            );\\n        }\\n\\n        require(\\n            bytes32(uint256(uint160(uint256(tradePayload.dstPool)))) ==\\n                tradePayload.dstPool,\\n            'HashflowWormholeMessenger::wormholeReceive dstPool is not EVM address.'\\n        );\\n        require(\\n            bytes32(\\n                uint256(uint160(uint256(tradePayload.dstExternalAccount)))\\n            ) == tradePayload.dstExternalAccount,\\n            'HashflowWormholeMessenger::wormholeReceive dstExternalAccount is not EVM address.'\\n        );\\n        require(\\n            bytes32(uint256(uint160(uint256(tradePayload.dstTrader)))) ==\\n                tradePayload.dstTrader,\\n            'HashflowWormholeMessenger::wormholeReceive dstTrader is not EVM address.'\\n        );\\n        require(\\n            bytes32(uint256(uint160(uint256(tradePayload.quoteToken)))) ==\\n                tradePayload.quoteToken,\\n            'HashflowWormholeMessenger::wormholeReceive quoteToken is not EVM address.'\\n        );\\n\\n        fillMessage.srcHashflowChainId = srcHChainId;\\n        fillMessage.srcPool = tradePayload.srcPool;\\n        fillMessage.dstPool = address(uint160(uint256(tradePayload.dstPool)));\\n        fillMessage.dstExternalAccount = address(\\n            uint160(uint256(tradePayload.dstExternalAccount))\\n        );\\n        fillMessage.dstTrader = address(\\n            uint160(uint256(tradePayload.dstTrader))\\n        );\\n        fillMessage.quoteToken = address(\\n            uint160(uint256(tradePayload.quoteToken))\\n        );\\n        fillMessage.quoteTokenAmount = tradePayload.quoteTokenAmount;\\n        fillMessage.txid = tradePayload.txid;\\n        fillMessage.srcCaller = tradePayload.srcCaller;\\n\\n        if (tradePayload.dstContract != bytes32(0)) {\\n            require(\\n                bytes32(uint256(uint160(uint256(tradePayload.dstContract)))) ==\\n                    tradePayload.dstContract,\\n                'HashflowWormholeMessenger::wormholeReceive dstContract is not EVM address.'\\n            );\\n            fillMessage.dstContract = address(\\n                uint160(uint256(tradePayload.dstContract))\\n            );\\n            fillMessage.dstContractCalldata = tradePayload.dstContractCalldata;\\n        }\\n\\n        IHashflowRouter(router).fillXChain(fillMessage);\\n\\n        emit WormholeReceive(fillMessage.txid);\\n    }\\n\\n    /// @inheritdoc IHashflowWormholeMessenger\\n    function updateWormholeChainIdForHashflowChainId(\\n        uint16 hashflowChainId,\\n        uint16 wormholeChainId\\n    ) external override onlyOwner {\\n        require(\\n            hashflowChainId != 0 && wormholeChainId != 0,\\n            'HashflowWormholeMessenger::updateWormholeChainIdForHashflowChainId chainId cannot be 0.'\\n        );\\n\\n        // If this wormhole Chain ID is already assigned, we need to unassign it first.\\n        require(\\n            wormholeChainIdToHChainId[wormholeChainId] == 0,\\n            'HashflowWormholeMessenger::updateWormholeChainIdForHashflowChainId Wormhole Chain ID already assigned.'\\n        );\\n\\n        uint16 previouslyAssignedWormholeChainId = hChainIdToWormholeChainId[\\n            hashflowChainId\\n        ];\\n\\n        // We free up the previously assigned ID.\\n        if (previouslyAssignedWormholeChainId != 0) {\\n            wormholeChainIdToHChainId[previouslyAssignedWormholeChainId] = 0;\\n        }\\n\\n        hChainIdToWormholeChainId[hashflowChainId] = wormholeChainId;\\n        wormholeChainIdToHChainId[wormholeChainId] = hashflowChainId;\\n\\n        emit UpdateWormholeChainId(hashflowChainId, wormholeChainId);\\n    }\\n\\n    /// @dev We do not allow the owner to renounce ownership.\\n    function renounceOwnership() public view override onlyOwner {\\n        revert(\\n            'HashflowWormholeMessenger::renounceOwnership Renouncing ownership not allowed.'\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/xchain/HashflowXChainMessengerBase.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.8.18;\\n\\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '../interfaces/xchain/IHashflowXChainMessenger.sol';\\n\\nabstract contract HashflowXChainMessengerBase is\\n    IHashflowXChainMessenger,\\n    Ownable2Step\\n{\\n    using Address for address payable;\\n\\n    uint16 public immutable hChainId;\\n\\n    address public immutable router;\\n\\n    mapping(uint16 => bytes) public xChainRemotes;\\n\\n    constructor(uint16 _hChainId, address _router) {\\n        require(\\n            _hChainId != 0,\\n            'HashflowXChainMessengerBase::constructor Hashflow Chain ID cannot be 0.'\\n        );\\n\\n        require(\\n            _router != address(0),\\n            'HashflowXChainMessengerBase::constructor Router cannot be 0 address.'\\n        );\\n\\n        hChainId = _hChainId;\\n        router = _router;\\n    }\\n\\n    /// @inheritdoc IHashflowXChainMessenger\\n    function updateXChainRemoteAddress(\\n        uint16 _hChainId,\\n        bytes calldata remoteAddress\\n    ) external override onlyOwner {\\n        xChainRemotes[_hChainId] = remoteAddress;\\n\\n        emit UpdateXChainRemoteAddress(_hChainId, remoteAddress);\\n    }\\n\\n    /// @inheritdoc IHashflowXChainMessenger\\n    function withdrawFunds() external onlyOwner {\\n        payable(_msgSender()).sendValue(address(this).balance);\\n    }\\n\\n    function _generateTradePayload(\\n        XChainQuote memory quote,\\n        address caller,\\n        bytes32 permissionedRelayer,\\n        bytes32 dstContract,\\n        bytes memory dstContractCalldata\\n    ) internal pure returns (bytes memory) {\\n        XChainTradePayload memory pld;\\n        pld.dstChainId = quote.dstChainId;\\n        pld.txid = quote.txid;\\n        pld.srcPool = bytes32(uint256(uint160(quote.srcPool)));\\n        pld.dstPool = quote.dstPool;\\n        pld.dstExternalAccount = quote.dstExternalAccount;\\n        pld.quoteToken = quote.quoteToken;\\n        pld.dstTrader = quote.dstTrader;\\n        pld.quoteTokenAmount = quote.quoteTokenAmount;\\n        pld.permissionedRelayer = permissionedRelayer;\\n        pld.srcCaller = bytes32(uint256(uint160(caller)));\\n        pld.dstContract = dstContract;\\n        pld.dstContractCalldata = dstContractCalldata;\\n\\n        return abi.encode(pld);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_hChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"hChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"relayer\",\"type\":\"bytes32\"}],\"name\":\"UpdatePermissionedRelayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wormholeChainId\",\"type\":\"uint256\"}],\"name\":\"UpdateWormholeChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"consistencyLevel\",\"type\":\"uint256\"}],\"name\":\"UpdateWormholeConsistencyLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"consistencyLevel\",\"type\":\"uint256\"}],\"name\":\"UpdateWormholeConsistencyLevelFast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wormholeEndpoint\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevWormholeEndpoint\",\"type\":\"address\"}],\"name\":\"UpdateWormholeEndpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"remoteAddress\",\"type\":\"bytes\"}],\"name\":\"UpdateXChainRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"WormholeReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sequence\",\"type\":\"uint256\"}],\"name\":\"WormholeSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sequence\",\"type\":\"uint256\"}],\"name\":\"WormholeSendFast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"hChainIdToWormholeChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"permissionedRelayers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"srcPool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dstPool\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"srcExternalAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dstExternalAccount\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dstTrader\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"quoteToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"internalType\":\"struct IHashflowXChainMessenger.XChainQuote\",\"name\":\"quote\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dstContract\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dstCalldata\",\"type\":\"bytes\"}],\"name\":\"tradeXChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_hChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"relayer\",\"type\":\"bytes32\"}],\"name\":\"updatePermissionedRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wormhole\",\"type\":\"address\"}],\"name\":\"updateWormhole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"hashflowChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"wormholeChainId\",\"type\":\"uint16\"}],\"name\":\"updateWormholeChainIdForHashflowChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"updateWormholeConsistencyLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"updateWormholeConsistencyLevelFast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_hChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"remoteAddress\",\"type\":\"bytes\"}],\"name\":\"updateXChainRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"wormholeChainIdToHChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeConsistencyLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeConsistencyLevelFast\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeEndpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVM\",\"type\":\"bytes\"}],\"name\":\"wormholeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"xChainRemotes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HashflowWormholeMessenger", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000055084ee0fef03f14a305cd24286359a35d735151", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}