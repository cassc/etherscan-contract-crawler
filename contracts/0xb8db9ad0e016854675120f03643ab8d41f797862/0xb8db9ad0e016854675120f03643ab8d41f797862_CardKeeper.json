{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface RMU {\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n}\r\n\r\ninterface Hope {\r\n    function totalSupply() external view returns (uint256);\r\n    function totalClaimed() external view returns (uint256);\r\n    function addClaimed(uint256 _amount) external;\r\n    function setClaimed(uint256 _amount) external;\r\n    function transfer(address receiver, uint numTokens) external returns (bool);\r\n    function transferFrom(address owner, address buyer, uint numTokens) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burn(address _account, uint256 value) external;\r\n}\r\n\r\ninterface HopeBooster {\r\n    function getMultiplier(uint256 ropeAmount) external view returns (uint256);\r\n    function getMultiplierOfAddress(address _addr) external view returns (uint256);\r\n    function pendingHope(address _user) external view returns (uint256);\r\n    function hopePerDayOfAddress(address _addr) external view returns (uint256);\r\n    function addClaimed(uint256 _amount) external;\r\n}\r\n\r\ncontract CardKeeper is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct CardSet {\r\n        uint256[] cardIds;\r\n        uint256 hopePerDayPerCard;\r\n        uint256 bonusHopeMultiplier; // 100% bonus = 1e5\r\n        bool isRemoved;\r\n    }\r\n\r\n    RMU public ropeMaker;\r\n    Hope public hope;\r\n    HopeBooster public hopeBooster;\r\n    address public treasuryAddr;\r\n\r\n    uint256[] public cardSetList;\r\n    uint256 public highestCardId;\r\n    mapping (uint256 => CardSet) public cardSets;\r\n    mapping (uint256 => uint256) public cardToSetMap;\r\n\r\n    mapping (address => mapping(uint256 => bool)) public userCards;\r\n    mapping (address => uint256) public userLastUpdate;\r\n\r\n    event Stake(address indexed user, uint256[] cardIds);\r\n    event Unstake(address indexed user, uint256[] cardIds);\r\n    event Harvest(address indexed user, uint256 amount);\r\n\r\n    constructor(RMU _ropeMakerAddr, Hope _hopeAddr, HopeBooster _hopeBoosterAddr, address _treasuryAddr) public {\r\n        ropeMaker = _ropeMakerAddr;\r\n        hope = _hopeAddr;\r\n        hopeBooster = _hopeBoosterAddr;\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n    // Utility function to check if a value is inside an array\r\n    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns(bool) {\r\n        uint256 length = _array.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            if (_array[i] == _value) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Index of the value in the return array is the cardId, value is whether card is staked or not\r\n    function getCardsStakedOfAddress(address _user) public view returns(bool[] memory) {\r\n        bool[] memory cardsStaked = new bool[](highestCardId + 1);\r\n\r\n        for (uint256 i = 0; i < highestCardId + 1; ++i) {\r\n            cardsStaked[i] = userCards[_user][i];\r\n        }\r\n\r\n        return cardsStaked;\r\n    }\r\n\r\n    // Returns the list of cardIds which are part of a set\r\n    function getCardIdListOfSet(uint256 _setId) external view returns(uint256[] memory) {\r\n        return cardSets[_setId].cardIds;\r\n    }\r\n\r\n    function getFullSetsOfAddress(address _user) public view returns(bool[] memory) {\r\n        uint256 length = cardSetList.length;\r\n\r\n        bool[] memory isFullSet = new bool[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 setId = cardSetList[i];\r\n\r\n            if (cardSets[setId].isRemoved) {\r\n                isFullSet[i] = false;\r\n                continue;\r\n            }\r\n\r\n            bool _fullSet = true;\r\n\r\n            uint256[] memory _cardIds = cardSets[setId].cardIds;\r\n            for (uint256 j = 0; j < _cardIds.length; ++j) {\r\n                if (userCards[_user][_cardIds[j]] == false) {\r\n                    _fullSet = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            isFullSet[i] = _fullSet;\r\n        }\r\n\r\n        return isFullSet;\r\n    }\r\n\r\n    // Returns the amount of nft staked by an address for a given set\r\n    function getNbSetNftStakedOfAddress(address _user, uint256 _setId) public view returns(uint256) {\r\n        uint256 nbStaked = 0;\r\n\r\n        if (cardSets[_setId].isRemoved) return 0;\r\n\r\n        uint256 length = cardSets[_setId].cardIds.length;\r\n        for (uint256 j = 0; j < length; ++j) {\r\n            uint256 cardId = cardSets[_setId].cardIds[j];\r\n            if (userCards[_user][cardId] == true) {\r\n                nbStaked = nbStaked.add(1);\r\n            }\r\n        }\r\n\r\n        return nbStaked;\r\n    }\r\n\r\n    // Returns the total amount of nft staked by an address across all sets\r\n    function getNbNftStakedOfAddress(address _user) public view returns(uint256) {\r\n        uint256 nbStaked = 0;\r\n\r\n        for (uint256 i = 0; i < cardSetList.length; ++i) {\r\n            nbStaked = nbStaked.add(getNbSetNftStakedOfAddress(_user, cardSetList[i]));\r\n        }\r\n\r\n        return nbStaked;\r\n    }\r\n\r\n\r\n    // Returns the total hope pending for a given address\r\n    // Can include the bonus from hopeBooster or not\r\n    function totalPendingHopeOfAddress(address _user, bool _includeHopeBooster) public view returns (uint256) {\r\n        uint256 totalHopePerDay = 0;\r\n\r\n        uint256 length = cardSetList.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 setId = cardSetList[i];\r\n            CardSet storage set = cardSets[setId];\r\n\r\n            if (set.isRemoved) continue;\r\n\r\n            // bool isFullSet = fullSets[i];\r\n\r\n            uint256 cardLength = set.cardIds.length;\r\n\r\n            bool isFullSet = true;\r\n            uint256 setHopePerDay = 0;\r\n            for (uint256 j = 0; j < cardLength; ++j) {\r\n                if (userCards[_user][set.cardIds[j]] == false) {\r\n                    isFullSet = false;\r\n                    continue;\r\n                }\r\n\r\n                setHopePerDay = setHopePerDay.add(set.hopePerDayPerCard);\r\n            }\r\n\r\n            if (isFullSet) {\r\n                setHopePerDay = setHopePerDay.mul(set.bonusHopeMultiplier).div(1e5);\r\n            }\r\n\r\n            totalHopePerDay = totalHopePerDay.add(setHopePerDay);\r\n        }\r\n\r\n        // Apply hopeBooster bonus\r\n        if (_includeHopeBooster) {\r\n            uint256 toAdd = totalHopePerDay.mul(hopeBooster.getMultiplierOfAddress(_user)).div(1e5);\r\n            totalHopePerDay = totalHopePerDay.add(toAdd);\r\n        }\r\n\r\n        uint256 lastUpdate = userLastUpdate[_user];\r\n        uint256 blockTime = block.timestamp;\r\n        return blockTime.sub(lastUpdate).mul(totalHopePerDay.div(86400));\r\n    }\r\n\r\n    // Returns the pending hope coming from the bonus generated by HopeBooster\r\n    function totalPendingHopeOfAddressFromBooster(address _user) external view returns (uint256) {\r\n        uint256 totalPending = totalPendingHopeOfAddress(_user, false);\r\n        return totalPending.mul(hopeBooster.getMultiplierOfAddress(_user)).div(1e5);\r\n    }\r\n\r\n    //////////////////////////////\r\n    //////////////////////////////\r\n    //////////////////////////////\r\n\r\n    // Set manually the highestCardId, in case there has been a mistake while adding a set\r\n    // (This value is used to know the range in which iterate to get the list of staked cards for an address)\r\n    function setHighestCardId(uint256 _highestId) public onlyOwner {\r\n        require(_highestId > 0);\r\n        highestCardId = _highestId;\r\n    }\r\n\r\n    function addCardSet(uint256 _setId, uint256[] memory _cardIds, uint256 _bonusHopeMultiplier, uint256 _hopePerDayPerCard) public onlyOwner {\r\n        removeCardSet(_setId);\r\n\r\n        uint256 length = _cardIds.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n\r\n            if (cardId > highestCardId) {\r\n                highestCardId = cardId;\r\n            }\r\n\r\n            // Check all cards to assign arent already part of another set\r\n            require(cardToSetMap[cardId] == 0, \"Card already assigned to a set\");\r\n\r\n            // Assign to set\r\n            cardToSetMap[cardId] = _setId;\r\n        }\r\n\r\n        if (_isInArray(_setId, cardSetList) == false) {\r\n            cardSetList.push(_setId);\r\n        }\r\n\r\n        cardSets[_setId] = CardSet({\r\n        cardIds: _cardIds,\r\n        bonusHopeMultiplier: _bonusHopeMultiplier,\r\n        hopePerDayPerCard: _hopePerDayPerCard,\r\n        isRemoved: false\r\n        });\r\n    }\r\n\r\n    // Set the hopePerDayPerCard value for a list of sets\r\n    function setHopeRateOfSets(uint256[] memory _setIds, uint256[] memory _hopePerDayPerCard) public onlyOwner {\r\n        require(_setIds.length == _hopePerDayPerCard.length, \"_setId and _hopePerDayPerCard have different length\");\r\n\r\n        for (uint256 i = 0; i < _setIds.length; ++i) {\r\n            require(cardSets[_setIds[i]].cardIds.length > 0, \"Set is empty\");\r\n            cardSets[_setIds[i]].hopePerDayPerCard = _hopePerDayPerCard[i];\r\n        }\r\n    }\r\n\r\n    // Set the bonusHopeMultiplier value for a list of sets\r\n    function setBonusHopeMultiplierOfSets(uint256[] memory _setIds, uint256[] memory _bonusHopeMultiplier) public onlyOwner {\r\n        require(_setIds.length == _bonusHopeMultiplier.length, \"_setId and _hopePerDayPerCard have different length\");\r\n\r\n        for (uint256 i = 0; i < _setIds.length; ++i) {\r\n            require(cardSets[_setIds[i]].cardIds.length > 0, \"Set is empty\");\r\n            cardSets[_setIds[i]].bonusHopeMultiplier = _bonusHopeMultiplier[i];\r\n        }\r\n    }\r\n\r\n    function removeCardSet(uint256 _setId) public onlyOwner {\r\n        uint256 length = cardSets[_setId].cardIds.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = cardSets[_setId].cardIds[i];\r\n            cardToSetMap[cardId] = 0;\r\n        }\r\n\r\n        delete cardSets[_setId].cardIds;\r\n        cardSets[_setId].isRemoved = true;\r\n    }\r\n\r\n    function harvest() public {\r\n        uint256 pendingHope = totalPendingHopeOfAddress(msg.sender, true);\r\n        userLastUpdate[msg.sender] = block.timestamp;\r\n\r\n        if (pendingHope > 0) {\r\n            hope.mint(treasuryAddr, pendingHope.div(40)); // 2.5% HOPE for the treasury (Usable to purchase NFTs)\r\n            hope.mint(msg.sender, pendingHope);\r\n            hope.addClaimed(pendingHope);\r\n        }\r\n\r\n        emit Harvest(msg.sender, pendingHope);\r\n    }\r\n\r\n    function stake(uint256[] memory _cardIds) public {\r\n        require(_cardIds.length > 0, \"_cardIds array empty\");\r\n\r\n        harvest();\r\n\r\n        // Check no card will end up above max stake\r\n        uint256 length = _cardIds.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n            require(userCards[msg.sender][cardId] == false, \"Card already staked\");\r\n            require(cardToSetMap[cardId] != 0, \"Card is not part of any set\");\r\n        }\r\n\r\n        // 1 of each card\r\n        uint256[] memory amounts = new uint256[](_cardIds.length);\r\n        for (uint256 i = 0; i < _cardIds.length; ++i) {\r\n            amounts[i] = 1;\r\n        }\r\n\r\n        ropeMaker.safeBatchTransferFrom(msg.sender, address(this), _cardIds, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n\r\n            userCards[msg.sender][cardId] = true;\r\n        }\r\n\r\n        emit Stake(msg.sender, _cardIds);\r\n    }\r\n\r\n    function unstake(uint256[] memory _cardIds) public {\r\n        require(_cardIds.length > 0, \"_cardIds array empty\");\r\n\r\n        harvest();\r\n\r\n        uint256 length = _cardIds.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n\r\n            require(userCards[msg.sender][cardId] == true, \"Card not staked\");\r\n            userCards[msg.sender][cardId] = false;\r\n        }\r\n\r\n        // 1 of each card\r\n        uint256[] memory amounts = new uint256[](_cardIds.length);\r\n        for (uint256 i = 0; i < _cardIds.length; ++i) {\r\n            amounts[i] = 1;\r\n        }\r\n\r\n        ropeMaker.safeBatchTransferFrom(address(this), msg.sender, _cardIds, amounts, \"\");\r\n\r\n        emit Unstake(msg.sender, _cardIds);\r\n    }\r\n\r\n    // Withdraw without rewards\r\n    function emergencyUnstake(uint256[] memory _cardIds) public {\r\n        userLastUpdate[msg.sender] = block.timestamp;\r\n\r\n        uint256 length = _cardIds.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 cardId = _cardIds[i];\r\n\r\n            require(userCards[msg.sender][cardId] == true, \"Card not staked\");\r\n            userCards[msg.sender][cardId] = false;\r\n        }\r\n\r\n        // 1 of each card\r\n        uint256[] memory amounts = new uint256[](_cardIds.length);\r\n        for (uint256 i = 0; i < _cardIds.length; ++i) {\r\n            amounts[i] = 1;\r\n        }\r\n\r\n        ropeMaker.safeBatchTransferFrom(address(this), msg.sender, _cardIds, amounts, \"\");\r\n    }\r\n\r\n    // Update treasury address by the previous treasury.\r\n    function treasury(address _treasuryAddr) public {\r\n        require(msg.sender == treasuryAddr, \"Must be called from current treasury address\");\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n    /////////\r\n    /////////\r\n    /////////\r\n\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value MUST result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _id        The id of the token being transferred\r\n     * @param _amount    The amount of tokens being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4) {\r\n        return 0xf23a6e61;\r\n    }\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value WILL result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _ids       An array containing ids of each token being transferred\r\n     * @param _amounts   An array containing amounts of each token being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4) {\r\n        return 0xbc197c81;\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n     *      This function MUST NOT consume more than 5,000 gas.\r\n     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\r\n        interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract RMU\",\"name\":\"_ropeMakerAddr\",\"type\":\"address\"},{\"internalType\":\"contract Hope\",\"name\":\"_hopeAddr\",\"type\":\"address\"},{\"internalType\":\"contract HopeBooster\",\"name\":\"_hopeBoosterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"cardIds\",\"type\":\"uint256[]\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_bonusHopeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hopePerDayPerCard\",\"type\":\"uint256\"}],\"name\":\"addCardSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardSetList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardSets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hopePerDayPerCard\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusHopeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardToSetMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"getCardIdListOfSet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCardsStakedOfAddress\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFullSetsOfAddress\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNbNftStakedOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"getNbSetNftStakedOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestCardId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hope\",\"outputs\":[{\"internalType\":\"contract Hope\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hopeBooster\",\"outputs\":[{\"internalType\":\"contract HopeBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"removeCardSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ropeMaker\",\"outputs\":[{\"internalType\":\"contract RMU\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_setIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bonusHopeMultiplier\",\"type\":\"uint256[]\"}],\"name\":\"setBonusHopeMultiplierOfSets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestId\",\"type\":\"uint256\"}],\"name\":\"setHighestCardId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_setIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_hopePerDayPerCard\",\"type\":\"uint256[]\"}],\"name\":\"setHopeRateOfSets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includeHopeBooster\",\"type\":\"bool\"}],\"name\":\"totalPendingHopeOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalPendingHopeOfAddressFromBooster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"treasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CardKeeper", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000db68df0e86bc7c6176e6a2255a5365f51113bce80000000000000000000000001eadc903341cfdb3406a04506239f52d076b170b0000000000000000000000002bb489aa8efe8ab95abc994e1e64b0dc228957390000000000000000000000007fcb8aaea5f30620aa69d1978f1dc814cf0502ad", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://508e265c5d8e7ac3afe0d2facfc853337dab5ffa27f4fb7dad9844d6ecb07100"}