{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Owned {\r\n\taddress private Owner;\r\n\t\r\n\tfunction Owned() public{\r\n\t    \r\n\t    Owner = msg.sender;\r\n\t}\r\n    \r\n\tfunction IsOwner(address addr) view public returns(bool)\r\n\t{\r\n\t    return Owner == addr;\r\n\t}\r\n\t\r\n\tfunction TransferOwner(address newOwner) public onlyOwner\r\n\t{\r\n\t    Owner = newOwner;\r\n\t}\r\n\t\r\n\tfunction Terminate() public onlyOwner\r\n\t{\r\n\t    selfdestruct(Owner);\r\n\t}\r\n\t\r\n\tmodifier onlyOwner(){\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract EMPR is Owned {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"empowr\";\r\n    string public constant symbol = \"EMPR\";\r\n    uint256 public constant decimals = 18;  // 18 is the most common number of decimal places\r\n    bool private tradeable;\r\n    uint256 private currentSupply;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address=> uint256)) private allowed;\r\n    mapping(address => bool) private lockedAccounts;  \r\n\t\r\n\t/*\r\n\t\tIncoming Ether\r\n\t*/\t\r\n    event ReceivedEth(address indexed _from, uint256 _value);\r\n\t//this is the fallback\r\n\tfunction () payable public {\r\n\t\temit ReceivedEth(msg.sender, msg.value);\t\t\r\n\t}\r\n\t\r\n\tevent TransferredEth(address indexed _to, uint256 _value);\r\n\tfunction FoundationTransfer(address _to, uint256 amtEth, uint256 amtToken) public onlyOwner\r\n\t{\r\n\t\trequire(address(this).balance >= amtEth && balances[this] >= amtToken );\r\n\t\t\r\n\t\tif(amtEth >0)\r\n\t\t{\r\n\t\t\t_to.transfer(amtEth);\r\n\t\t\temit TransferredEth(_to, amtEth);\r\n\t\t}\r\n\t\t\r\n\t\tif(amtToken > 0)\r\n\t\t{\r\n\t\t\trequire(balances[_to] + amtToken > balances[_to]);\r\n\t\t\tbalances[this] -= amtToken;\r\n\t\t\tbalances[_to] += amtToken;\r\n\t\t\temit Transfer(this, _to, amtToken);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\t\r\n\t/*\r\n\t\tEnd Incoming Ether\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n    function EMPR( ) public\r\n    {\r\n        uint256 initialTotalSupply = 500000000;\r\n        balances[this] = initialTotalSupply * (10**decimals);\r\n        \r\n        currentSupply =  initialTotalSupply * (10**decimals);\r\n\t    emit Transfer(address(0), this, currentSupply);\r\n        \r\n    }\r\n  \r\n\tuint256 constant startTime = 1525132800; // Date.UTC(2018, 4, 1) as seconds\r\n\tuint256 constant startAmt = 95000000;\r\n\tuint256 _lastDayPaid = 0;\r\n\tuint256 _currentMonth = 0;\r\n\tuint256 factor = 10000000;\r\n\t\r\n    event DayMinted(uint256 day,uint256 val, uint256 now);\r\n    function DailyMint() public {\r\n        uint256 day = (now-startTime)/(60*60*24);\r\n        require(startTime <= now);\r\n        require(day >= _lastDayPaid);\r\n        uint256 month = _lastDayPaid/30;\r\n        if(month > _currentMonth){\r\n            _currentMonth += 1;\r\n            factor = (factor * 99)/100;\r\n        }\r\n        uint256 todaysPayout = (((factor * startAmt )/10000000)/30)* (10**decimals);\r\n        balances[this] +=todaysPayout;\r\n        currentSupply += todaysPayout;\r\n        emit Transfer(address(0), this, todaysPayout);\r\n        emit DayMinted(_lastDayPaid, todaysPayout, now);\r\n        _lastDayPaid+=1;\r\n\t\r\n    }\r\n    function lastDayPaid() public view returns(uint256){\r\n        return _lastDayPaid;\r\n    }\r\n    \r\n\r\n    \r\n    \r\n\tfunction MintToken(uint256 amt) public onlyOwner {\r\n\t    currentSupply += amt;\r\n\t    balances[this] += amt;\r\n\t    emit Transfer(address(0), this, amt);\r\n\t}\r\n\t\r\n\tfunction DestroyToken(uint256 amt) public onlyOwner {\r\n\t    require ( balances[this] >= amt);\r\n\t    currentSupply -= amt;\r\n\t    balances[this] -= amt;\r\n\t    emit Transfer(this,address(0), amt);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n    event SoldToken(address _buyer, uint256 _value, string note);\r\n    function BuyToken(address _buyer, uint256 _value, string note) public onlyOwner\r\n    {\r\n\t\trequire(balances[this] >= _value && balances[_buyer] + _value > balances[_buyer]);\r\n\t\t\r\n        emit SoldToken( _buyer,  _value,  note);\r\n        balances[this] -= _value;\r\n        balances[_buyer] += _value;\r\n        emit Transfer(this, _buyer, _value);\r\n    }\r\n    \r\n    function LockAccount(address toLock) public onlyOwner\r\n    {\r\n        lockedAccounts[toLock] = true;\r\n    }\r\n    function UnlockAccount(address toUnlock) public onlyOwner\r\n    {\r\n        delete lockedAccounts[toUnlock];\r\n    }\r\n    \r\n    function SetTradeable(bool t) public onlyOwner\r\n    {\r\n        tradeable = t;\r\n    }\r\n    function IsTradeable() public view returns(bool)\r\n    {\r\n        return tradeable;\r\n    }\r\n    \r\n    \r\n    function totalSupply() constant public returns (uint256)\r\n    {\r\n        return currentSupply;\r\n    }\r\n    function balanceOf(address _owner) constant public returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n    function transfer(address _to, uint256 _value) public notLocked returns (bool success) {\r\n        require(tradeable);\r\n         if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n             emit Transfer( msg.sender, _to,  _value);\r\n             balances[msg.sender] -= _value;\r\n             balances[_to] += _value;\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n    function transferFrom(address _from, address _to, uint _value)public notLocked returns (bool success) {\r\n        require(!lockedAccounts[_from] && !lockedAccounts[_to]);\r\n\t\trequire(tradeable);\r\n        if (balances[_from] >= _value\r\n            && allowed[_from][msg.sender] >= _value\r\n            && balances[_to] + _value > balances[_to]) {\r\n                \r\n            emit Transfer( _from, _to,  _value);\r\n                \r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n     /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n   \r\n   modifier notLocked(){\r\n       require (!lockedAccounts[msg.sender]);\r\n       _;\r\n   }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amtEth\",\"type\":\"uint256\"},{\"name\":\"amtToken\",\"type\":\"uint256\"}],\"name\":\"FoundationTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toLock\",\"type\":\"address\"}],\"name\":\"LockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"BuyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"DestroyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsTradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"t\",\"type\":\"bool\"}],\"name\":\"SetTradeable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toUnlock\",\"type\":\"address\"}],\"name\":\"UnlockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DailyMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IsOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDayPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceivedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferredEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"DayMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"SoldToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "EMPR", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6d651396edf616eb5aaa5868411fa8f4427c55c8eab3b171ea9d50143add980a"}