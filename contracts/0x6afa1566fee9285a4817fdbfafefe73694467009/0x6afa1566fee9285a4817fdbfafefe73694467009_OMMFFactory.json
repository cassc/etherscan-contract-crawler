{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Proxy.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TokenProxy is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address _admin,\\n    bytes memory _data\\n  ) TransparentUpgradeableProxy(_logic, _admin, _data) {}\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is\\n  Initializable,\\n  IAccessControlEnumerableUpgradeable,\\n  AccessControlUpgradeable\\n{\\n  function __AccessControlEnumerable_init() internal onlyInitializing {}\\n\\n  function __AccessControlEnumerable_init_unchained()\\n    internal\\n    onlyInitializing\\n  {}\\n\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ERC165Upgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  IAccessControlUpgradeable,\\n  ERC165Upgradeable\\n{\\n  function __AccessControl_init() internal onlyInitializing {}\\n\\n  function __AccessControl_init_unchained() internal onlyInitializing {}\\n\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role);\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\\n   *\\n   * Format of the revert message is described in {_checkRole}.\\n   *\\n   * _Available since v4.6._\\n   */\\n  function _checkRole(bytes32 role) internal view virtual {\\n    _checkRole(role, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            StringsUpgradeable.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            StringsUpgradeable.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   *\\n   * May emit a {RoleGranted} event.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * May emit a {RoleGranted} event.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   *\\n   * May emit a {RoleGranted} event.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint8 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(uint8 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) ||\\n        (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint8 version) {\\n    require(\\n      !_initializing && _initialized < version,\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n    if (_initialized < type(uint8).max) {\\n      _initialized = type(uint8).max;\\n      emit Initialized(type(uint8).max);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event Paused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event Unpaused(address account);\\n\\n  bool private _paused;\\n\\n  /**\\n   * @dev Initializes the contract in unpaused state.\\n   */\\n  function __Pausable_init() internal onlyInitializing {\\n    __Pausable_init_unchained();\\n  }\\n\\n  function __Pausable_init_unchained() internal onlyInitializing {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  modifier whenNotPaused() {\\n    _requireNotPaused();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  modifier whenPaused() {\\n    _requirePaused();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view virtual returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @dev Throws if the contract is paused.\\n   */\\n  function _requireNotPaused() internal view virtual {\\n    require(!paused(), \\\"Pausable: paused\\\");\\n  }\\n\\n  /**\\n   * @dev Throws if the contract is not paused.\\n   */\\n  function _requirePaused() internal view virtual {\\n    require(paused(), \\\"Pausable: not paused\\\");\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns to normal state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n  function __Context_init() internal onlyInitializing {}\\n\\n  function __Context_init_unchained() internal onlyInitializing {}\\n\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/utils/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/IERC165Upgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n  function __ERC165_init() internal onlyInitializing {}\\n\\n  function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165Upgradeable).interfaceId;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/utils/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/proxy/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n  constructor(address _logic, bytes memory _data) payable {\\n    assert(\\n      _IMPLEMENTATION_SLOT ==\\n        bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1)\\n    );\\n    _upgradeToAndCall(_logic, _data, false);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation()\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (address impl)\\n  {\\n    return ERC1967Upgrade._getImplementation();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/proxy/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/IBeacon.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/draft-IERC1822.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 private constant _ROLLBACK_SLOT =\\n    0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT =\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _getImplementation() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    require(\\n      Address.isContract(newImplementation),\\n      \\\"ERC1967: new implementation is not a contract\\\"\\n    );\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      Address.functionDelegateCall(newImplementation, data);\\n    }\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n    } else {\\n      try IERC1822Proxiable(newImplementation).proxiableUUID() returns (\\n        bytes32 slot\\n      ) {\\n        require(\\n          slot == _IMPLEMENTATION_SLOT,\\n          \\\"ERC1967Upgrade: unsupported proxiableUUID\\\"\\n        );\\n      } catch {\\n        revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n      }\\n      _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT =\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Returns the current admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setAdmin(address newAdmin) private {\\n    require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   *\\n   * Emits an {AdminChanged} event.\\n   */\\n  function _changeAdmin(address newAdmin) internal {\\n    emit AdminChanged(_getAdmin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT =\\n    0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Emitted when the beacon is upgraded.\\n   */\\n  event BeaconUpgraded(address indexed beacon);\\n\\n  /**\\n   * @dev Returns the current beacon.\\n   */\\n  function _getBeacon() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new beacon in the EIP1967 beacon slot.\\n   */\\n  function _setBeacon(address newBeacon) private {\\n    require(\\n      Address.isContract(newBeacon),\\n      \\\"ERC1967: new beacon is not a contract\\\"\\n    );\\n    require(\\n      Address.isContract(IBeacon(newBeacon).implementation()),\\n      \\\"ERC1967: beacon implementation is not a contract\\\"\\n    );\\n    StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n  }\\n\\n  /**\\n   * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n   * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n   *\\n   * Emits a {BeaconUpgraded} event.\\n   */\\n  function _upgradeBeaconToAndCall(\\n    address newBeacon,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal {\\n    _setBeacon(newBeacon);\\n    emit BeaconUpgraded(newBeacon);\\n    if (data.length > 0 || forceCall) {\\n      Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/proxy/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n  /**\\n   * @dev Must return an address that can be used as a delegate call target.\\n   *\\n   * {BeaconProxy} will check that this address is a contract.\\n   */\\n  function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n        // delegatecall returns 0 on error.\\n        case 0 {\\n          revert(0, returndatasize())\\n        }\\n        default {\\n          return(0, returndatasize())\\n        }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internall call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overriden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/proxy/ProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n  /**\\n   * @dev Returns the current implementation of `proxy`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function getProxyImplementation(TransparentUpgradeableProxy proxy)\\n    public\\n    view\\n    virtual\\n    returns (address)\\n  {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool success, bytes memory returndata) =\\n      address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `proxy`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function getProxyAdmin(TransparentUpgradeableProxy proxy)\\n    public\\n    view\\n    virtual\\n    returns (address)\\n  {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool success, bytes memory returndata) =\\n      address(proxy).staticcall(hex\\\"f851a440\\\");\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the current admin of `proxy`.\\n   */\\n  function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin)\\n    public\\n    virtual\\n    onlyOwner\\n  {\\n    proxy.changeAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function upgrade(TransparentUpgradeableProxy proxy, address implementation)\\n    public\\n    virtual\\n    onlyOwner\\n  {\\n    proxy.upgradeTo(implementation);\\n  }\\n\\n  /**\\n   * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n   * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function upgradeAndCall(\\n    TransparentUpgradeableProxy proxy,\\n    address implementation,\\n    bytes memory data\\n  ) public payable virtual onlyOwner {\\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n  /**\\n   * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n   * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n   */\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable ERC1967Proxy(_logic, _data) {\\n    assert(\\n      _ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1)\\n    );\\n    _changeAdmin(admin_);\\n  }\\n\\n  /**\\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _getAdmin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n   *\\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n   * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n   */\\n  function admin() external ifAdmin returns (address admin_) {\\n    admin_ = _getAdmin();\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n   *\\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n   * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n   */\\n  function implementation() external ifAdmin returns (address implementation_) {\\n    implementation_ = _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   *\\n   * Emits an {AdminChanged} event.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n   */\\n  function changeAdmin(address newAdmin) external virtual ifAdmin {\\n    _changeAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the implementation of the proxy.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n  }\\n\\n  /**\\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n   * proxied contract.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\\n    external\\n    payable\\n    ifAdmin\\n  {\\n    _upgradeToAndCall(newImplementation, data, true);\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.\\n   */\\n  function _admin() internal view virtual returns (address) {\\n    return _getAdmin();\\n  }\\n\\n  /**\\n   * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n   */\\n  function _beforeFallback() internal virtual override {\\n    require(\\n      msg.sender != _getAdmin(),\\n      \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\"\\n    );\\n    super._beforeFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/proxy/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot)\\n    internal\\n    pure\\n    returns (AddressSlot storage r)\\n  {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot)\\n    internal\\n    pure\\n    returns (BooleanSlot storage r)\\n  {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot)\\n    internal\\n    pure\\n    returns (Bytes32Slot storage r)\\n  {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot)\\n    internal\\n    pure\\n    returns (Uint256Slot storage r)\\n  {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMulticall.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IMulticall\\n * @author Ondo Finance\\n * @notice This interface dictates the required external functions for Ondo's\\n *         multicall contract.\\n */\\ninterface IMulticall {\\n  /// @dev External call data structure\\n  struct ExCallData {\\n    // The contract we intend to call\\n    address target;\\n    // The encoded function data for the call\\n    bytes data;\\n    // The ether value to be sent in the call\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Batches multiple function calls to different target contracts\\n   *         and returns the resulting data provided all calls were successful\\n   *\\n   * @dev The `msg.sender` is always the contract from which this function\\n   *      is being called\\n   *\\n   * @param exdata The ExCallData struct array containing the information\\n   *               regarding which contract to call, what data to call with,\\n   *               and what ether value to send along with the call\\n   *\\n   * @return results The resulting data returned from each call made\\n   */\\n  function multiexcall(\\n    ExCallData[] calldata exdata\\n  ) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"contracts/kyc/IKYCRegistry.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IKYCRegistry\\n * @author Ondo Finance\\n * @notice The interface for Ondo's KYC Registry contract\\n */\\ninterface IKYCRegistry {\\n  /**\\n   * @notice Retrieves KYC status of an account\\n   *\\n   * @param kycRequirementGroup The KYC group for which we wish to check\\n   * @param account             The account we wish to retrieve KYC status for\\n   *\\n   * @return bool Whether the `account` is KYC'd\\n   */\\n  function getKYCStatus(\\n    uint256 kycRequirementGroup,\\n    address account\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice View function for the public nested mapping of kycState\\n   *\\n   * @param kycRequirementGroup The KYC group to view\\n   * @param account             The account to check if KYC'd\\n   */\\n  function kycState(\\n    uint256 kycRequirementGroup,\\n    address account\\n  ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/kyc/IKYCRegistryClient.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/kyc/IKYCRegistry.sol\\\";\\n\\n/**\\n * @title IKYCRegistryClient\\n * @author Ondo Finance\\n * @notice The client interface Ondo's KYC Registry contract.\\n */\\ninterface IKYCRegistryClient {\\n  /// @notice Returns what KYC group this client checks accounts for\\n  function kycRequirementGroup() external view returns (uint256);\\n\\n  /// @notice Returns reference to the KYC registry that this client queries\\n  function kycRegistry() external view returns (IKYCRegistry);\\n\\n  /// @notice Sets the KYC group\\n  function setKYCRequirementGroup(uint256 group) external;\\n\\n  /// @notice Sets the KYC registry reference\\n  function setKYCRegistry(address registry) external;\\n\\n  /// @notice Error for when caller attempts to set the KYC registry refernce\\n  ///         to the zero address.\\n  error RegistryZeroAddress();\\n\\n  /**\\n   * @dev Event for when the KYC registry reference is set\\n   *\\n   * @param oldRegistry The old registry\\n   * @param newRegistry The new registry\\n   */\\n  event KYCRegistrySet(address oldRegistry, address newRegistry);\\n\\n  /**\\n   * @dev Event for when the KYC group for this client is set\\n   *\\n   * @param oldRequirementGroup The old KYC group\\n   * @param newRequirementGroup The new KYC group\\n   */\\n  event KYCRequirementGroupSet(\\n    uint256 oldRequirementGroup,\\n    uint256 newRequirementGroup\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/kyc/KYCRegistryClientUpgradeable.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/kyc/IKYCRegistry.sol\\\";\\nimport \\\"contracts/kyc/IKYCRegistryClient.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @title KYCRegistryClientInitializable\\n * @author Ondo Finance\\n * @notice This abstract contract manages state required for clients\\n *         of the KYC registry.\\n */\\nabstract contract KYCRegistryClientUpgradeable is\\n  Initializable,\\n  IKYCRegistryClient\\n{\\n  // KYC Registry address\\n  IKYCRegistry public override kycRegistry;\\n  // KYC requirement group\\n  uint256 public override kycRequirementGroup;\\n\\n  /**\\n   * @notice Initialize the contract by setting registry variable\\n   *\\n   * @param _kycRegistry         Address of the registry contract\\n   * @param _kycRequirementGroup KYC requirement group associated with this\\n   *                             client\\n   *\\n   * @dev Function should be called by the inheriting contract on\\n   *      initialization\\n   */\\n  function __KYCRegistryClientInitializable_init(\\n    address _kycRegistry,\\n    uint256 _kycRequirementGroup\\n  ) internal onlyInitializing {\\n    __KYCRegistryClientInitializable_init_unchained(\\n      _kycRegistry,\\n      _kycRequirementGroup\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal function to future-proof parent linearization. Matches OZ\\n   *      upgradeable suggestions\\n   */\\n  function __KYCRegistryClientInitializable_init_unchained(\\n    address _kycRegistry,\\n    uint256 _kycRequirementGroup\\n  ) internal onlyInitializing {\\n    _setKYCRegistry(_kycRegistry);\\n    _setKYCRequirementGroup(_kycRequirementGroup);\\n  }\\n\\n  /**\\n   * @notice Sets the KYC registry address for this client\\n   *\\n   * @param _kycRegistry The new KYC registry address\\n   */\\n  function _setKYCRegistry(address _kycRegistry) internal {\\n    if (_kycRegistry == address(0)) {\\n      revert RegistryZeroAddress();\\n    }\\n    address oldKYCRegistry = address(kycRegistry);\\n    kycRegistry = IKYCRegistry(_kycRegistry);\\n    emit KYCRegistrySet(oldKYCRegistry, _kycRegistry);\\n  }\\n\\n  /**\\n   * @notice Sets the KYC registry requirement group for this\\n   *         client to check kyc status for\\n   *\\n   * @param _kycRequirementGroup The new KYC group\\n   */\\n  function _setKYCRequirementGroup(uint256 _kycRequirementGroup) internal {\\n    uint256 oldKYCLevel = kycRequirementGroup;\\n    kycRequirementGroup = _kycRequirementGroup;\\n    emit KYCRequirementGroupSet(oldKYCLevel, _kycRequirementGroup);\\n  }\\n\\n  /**\\n   * @notice Checks whether an address has been KYC'd\\n   *\\n   * @param account The address to check\\n   */\\n  function _getKYCStatus(address account) internal view returns (bool) {\\n    return kycRegistry.getKYCStatus(kycRequirementGroup, account);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/ommf/ommf_token/ommf.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"contracts/kyc/KYCRegistryClientUpgradeable.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for OMMF.\\n *\\n * OMMF balances are dynamic and represent the holder's share in the total amount\\n * of Cash controlled by the protocol. Account shares aren't normalized, so the\\n * contract also stores the sum of all shares to calculate each account's token balance\\n * which equals to:\\n *\\n *   shares[account] * depositedCash() / _getTotalShares()\\n *\\n * For example, assume that we have:\\n *\\n *   depositedCash() -> 10 USDC underlying OMMF\\n *   sharesOf(user1) -> 100\\n *   sharesOf(user2) -> 400\\n *\\n * Therefore:\\n *\\n *   balanceOf(user1) -> 2 tokens which corresponds 2 OMMF\\n *   balanceOf(user2) -> 8 tokens which corresponds 8 OMMF\\n *\\n * Since balances of all token holders change when the amount of total pooled Cash\\n * changes, this token cannot fully implement ERC20 standard: it only emits `Transfer`\\n * events upon explicit transfer between holders. In contrast, when total amount of\\n * pooled Cash increases, no `Transfer` events are generated: doing so would require\\n * emitting an event for each token holder and thus running an unbounded loop.\\n *\\n */\\n\\ncontract OMMF is\\n  Initializable,\\n  ContextUpgradeable,\\n  PausableUpgradeable,\\n  AccessControlEnumerableUpgradeable,\\n  KYCRegistryClientUpgradeable,\\n  IERC20Upgradeable,\\n  IERC20MetadataUpgradeable\\n{\\n  /**\\n   * @dev OMMF balances are dynamic and are calculated based on the accounts' shares\\n   * and the total amount of Cash controlled by the protocol. Account shares aren't\\n   * normalized, so the contract also stores the sum of all shares to calculate\\n   * each account's token balance which equals to:\\n   *\\n   *   shares[account] * depositedCash() / _getTotalShares()\\n   */\\n  mapping(address => uint256) private shares;\\n\\n  /// @dev Allowances are nominated in tokens, not token shares.\\n  mapping(address => mapping(address => uint256)) private allowances;\\n\\n  // Total shares in existence\\n  uint256 private totalShares;\\n\\n  // Total cash in fund\\n  uint256 public depositedCash;\\n\\n  // Address of the oracle that updates `depositedCash`\\n  address public oracle;\\n\\n  /// @dev Role based access control roles\\n  bytes32 public constant OMMF_MANAGER_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n  bytes32 public constant BURNER_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n  bytes32 public constant KYC_CONFIGURER_ROLE =\\n    keccak256(\\\"KYC_CONFIGURER_ROLE\\\");\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(\\n    address admin,\\n    address kycRegistry,\\n    uint256 requirementGroup\\n  ) public virtual initializer {\\n    __OMMF_init(admin, kycRegistry, requirementGroup);\\n  }\\n\\n  function __OMMF_init(\\n    address admin,\\n    address kycRegistry,\\n    uint256 requirementGroup\\n  ) internal onlyInitializing {\\n    __Pausable_init_unchained();\\n    __KYCRegistryClientInitializable_init_unchained(\\n      kycRegistry,\\n      requirementGroup\\n    );\\n    __OMMF_init_unchained(admin);\\n  }\\n\\n  function __OMMF_init_unchained(address admin) internal onlyInitializing {\\n    _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    _grantRole(OMMF_MANAGER_ROLE, admin);\\n    _grantRole(PAUSER_ROLE, admin);\\n    _grantRole(BURNER_ROLE, admin);\\n    _grantRole(KYC_CONFIGURER_ROLE, admin);\\n  }\\n\\n  /**\\n   * @notice An executed shares transfer from `sender` to `recipient`.\\n   *\\n   * @dev emitted in pair with an ERC20-defined `Transfer` event.\\n   */\\n  event TransferShares(\\n    address indexed from,\\n    address indexed to,\\n    uint256 sharesValue\\n  );\\n\\n  /**\\n   * @notice Emitted when an oracle report (rebase) is executed\\n   *\\n   * @param oldDepositedCash The old NAV value.\\n   * @param newDepositedCash The new NAV value.\\n   */\\n  event OracleReportHandled(uint256 oldDepositedCash, uint256 newDepositedCash);\\n\\n  /**\\n   * @return the name of the token.\\n   */\\n  function name() public pure returns (string memory) {\\n    return \\\"Ondo US Money Markets\\\";\\n  }\\n\\n  /**\\n   * @return the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public pure returns (string memory) {\\n    return \\\"OMMF\\\";\\n  }\\n\\n  /**\\n   * @return the number of decimals for getting user representation of a token amount.\\n   */\\n  function decimals() public pure returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @return the amount of tokens in existence.\\n   *\\n   * @dev Always equals to `depositedCash()` since token amount\\n   * is pegged to the total amount of OMMF controlled by the protocol.\\n   */\\n  function totalSupply() public view returns (uint256) {\\n    return depositedCash;\\n  }\\n\\n  /**\\n   * @return the amount of tokens owned by the `_account`.\\n   *\\n   * @dev Balances are dynamic and equal the `_account`'s share in the amount of the\\n   * total Cash controlled by the protocol. See `sharesOf`.\\n   */\\n  function balanceOf(address _account) public view returns (uint256) {\\n    return getBalanceOfByShares(_sharesOf(_account));\\n  }\\n\\n  /**\\n   * @notice Moves `_amount` tokens from the caller's account to the `_recipient` account.\\n   *\\n   * @return a boolean value indicating whether the operation succeeded.\\n   * Emits a `Transfer` event.\\n   * Emits a `TransferShares` event.\\n   *\\n   * Requirements:\\n   *\\n   * - `_recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `_amount`.\\n   * - the contract must not be paused.\\n   *\\n   * @dev The `_amount` argument is the amount of tokens, not shares.\\n   */\\n  function transfer(address _recipient, uint256 _amount) public returns (bool) {\\n    _transfer(msg.sender, _recipient, _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @return the remaining number of tokens that `_spender` is allowed to spend\\n   * on behalf of `_owner` through `transferFrom`. This is zero by default.\\n   *\\n   * @dev This value changes when `approve` or `transferFrom` is called.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n  ) public view returns (uint256) {\\n    return allowances[_owner][_spender];\\n  }\\n\\n  /**\\n   * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n   *\\n   * @return a boolean value indicating whether the operation succeeded.\\n   * Emits an `Approval` event.\\n   *\\n   * Requirements:\\n   *\\n   * - `_spender` cannot be the zero address.\\n   * - the contract must not be paused.\\n   *\\n   * @dev The `_amount` argument is the amount of tokens, not shares.\\n   */\\n  function approve(address _spender, uint256 _amount) public returns (bool) {\\n    _approve(msg.sender, _spender, _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Moves `_amount` tokens from `_sender` to `_recipient` using the\\n   * allowance mechanism. `_amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * @return a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a `Transfer` event.\\n   * Emits a `TransferShares` event.\\n   * Emits an `Approval` event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `_sender` and `_recipient` cannot be the zero addresses.\\n   * - `_sender` must have a balance of at least `_amount`.\\n   * - the caller must have allowance for `_sender`'s tokens of at least `_amount`.\\n   * - the contract must not be paused.\\n   *\\n   * @dev The `_amount` argument is the amount of tokens, not shares.\\n   */\\n  function transferFrom(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) public returns (bool) {\\n    uint256 currentAllowance = allowances[_sender][msg.sender];\\n    require(currentAllowance >= _amount, \\\"TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE\\\");\\n\\n    _transfer(_sender, _recipient, _amount);\\n    _approve(_sender, msg.sender, currentAllowance - _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\\n   *\\n   * This is an alternative to `approve` that can be used as a mitigation for\\n   * problems described in:\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n   * Emits an `Approval` event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `_spender` cannot be the the zero address.\\n   * - the contract must not be paused.\\n   */\\n  function increaseAllowance(\\n    address _spender,\\n    uint256 _addedValue\\n  ) public returns (bool) {\\n    _approve(\\n      msg.sender,\\n      _spender,\\n      allowances[msg.sender][_spender] + _addedValue\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\\n   *\\n   * This is an alternative to `approve` that can be used as a mitigation for\\n   * problems described in:\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n   * Emits an `Approval` event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `_spender` cannot be the zero address.\\n   * - `_spender` must have allowance for the caller of at least `_subtractedValue`.\\n   * - the contract must not be paused.\\n   */\\n  function decreaseAllowance(\\n    address _spender,\\n    uint256 _subtractedValue\\n  ) public returns (bool) {\\n    uint256 currentAllowance = allowances[msg.sender][_spender];\\n    require(\\n      currentAllowance >= _subtractedValue,\\n      \\\"DECREASED_ALLOWANCE_BELOW_ZERO\\\"\\n    );\\n    _approve(msg.sender, _spender, currentAllowance - _subtractedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @return the total amount of shares in existence.\\n   *\\n   * @dev The sum of all accounts' shares can be an arbitrary number, therefore\\n   * it is necessary to store it in order to calculate each account's relative share.\\n   */\\n  function getTotalShares() public view returns (uint256) {\\n    return totalShares;\\n  }\\n\\n  /**\\n   * @return the amount of shares owned by `_account`.\\n   */\\n  function sharesOf(address _account) public view returns (uint256) {\\n    return _sharesOf(_account);\\n  }\\n\\n  /**\\n   * @return the amount of shares that corresponds to `cashAmount` protocol-controlled Cash.\\n   */\\n  function getSharesByPooledCash(\\n    uint256 _cashAmount\\n  ) public view returns (uint256) {\\n    uint256 totalPooledCash = depositedCash;\\n    if (totalPooledCash == 0) {\\n      return 0;\\n    } else {\\n      return (_cashAmount * totalShares) / totalPooledCash;\\n    }\\n  }\\n\\n  /**\\n   * @return the amount of OMMF that corresponds to `_sharesAmount` token shares.\\n   */\\n  function getBalanceOfByShares(\\n    uint256 _sharesAmount\\n  ) public view returns (uint256) {\\n    if (totalShares == 0) {\\n      return 0;\\n    } else {\\n      return (_sharesAmount * depositedCash) / totalShares;\\n    }\\n  }\\n\\n  /**\\n   * @notice Moves `_amount` tokens from `_sender` to `_recipient`.\\n   * Emits a `Transfer` event.\\n   * Emits a `TransferShares` event.\\n   */\\n  function _transfer(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) internal {\\n    uint256 _sharesToTransfer = getSharesByPooledCash(_amount);\\n    _transferShares(_sender, _recipient, _sharesToTransfer);\\n    emit Transfer(_sender, _recipient, _amount);\\n  }\\n\\n  /**\\n   * @notice Sets `_amount` as the allowance of `_spender` over the `_owner` s tokens.\\n   *\\n   * Emits an `Approval` event.\\n   *\\n   * Requirements:\\n   *\\n   * - `_owner` cannot be the zero address.\\n   * - `_spender` cannot be the zero address.\\n   * - the contract must not be paused.\\n   */\\n  function _approve(\\n    address _owner,\\n    address _spender,\\n    uint256 _amount\\n  ) internal whenNotPaused {\\n    require(_owner != address(0), \\\"APPROVE_FROM_ZERO_ADDRESS\\\");\\n    require(_spender != address(0), \\\"APPROVE_TO_ZERO_ADDRESS\\\");\\n\\n    allowances[_owner][_spender] = _amount;\\n    emit Approval(_owner, _spender, _amount);\\n  }\\n\\n  /**\\n   * @return the amount of shares owned by `_account`.\\n   */\\n  function _sharesOf(address _account) internal view returns (uint256) {\\n    return shares[_account];\\n  }\\n\\n  /**\\n   * @notice Moves `_sharesAmount` shares from `_sender` to `_recipient`.\\n   *\\n   * Requirements:\\n   *\\n   * - `_sender` cannot be the zero address.\\n   * - `_recipient` cannot be the zero address.\\n   * - `_sender` must hold at least `_sharesAmount` shares.\\n   * - the contract must not be paused.\\n   */\\n  function _transferShares(\\n    address _sender,\\n    address _recipient,\\n    uint256 _sharesAmount\\n  ) internal whenNotPaused {\\n    require(_sender != address(0), \\\"TRANSFER_FROM_THE_ZERO_ADDRESS\\\");\\n    require(_recipient != address(0), \\\"TRANSFER_TO_THE_ZERO_ADDRESS\\\");\\n\\n    _beforeTokenTransfer(_sender, _recipient, _sharesAmount);\\n\\n    uint256 currentSenderShares = shares[_sender];\\n    require(\\n      _sharesAmount <= currentSenderShares,\\n      \\\"TRANSFER_AMOUNT_EXCEEDS_BALANCE\\\"\\n    );\\n\\n    shares[_sender] = currentSenderShares - _sharesAmount;\\n    shares[_recipient] = shares[_recipient] + _sharesAmount;\\n    emit TransferShares(_sender, _recipient, _sharesAmount);\\n  }\\n\\n  /**\\n   * @notice Creates `_sharesAmount` shares and assigns them to `_recipient`, increasing the total amount of shares.\\n   * @dev This doesn't increase the token total supply.\\n   *\\n   * Requirements:\\n   *\\n   * - `_recipient` cannot be the zero address.\\n   * - the contract must not be paused.\\n   */\\n  function _mintShares(\\n    address _recipient,\\n    uint256 _sharesAmount\\n  ) internal whenNotPaused returns (uint256) {\\n    require(_recipient != address(0), \\\"MINT_TO_THE_ZERO_ADDRESS\\\");\\n\\n    _beforeTokenTransfer(address(0), _recipient, _sharesAmount);\\n\\n    totalShares += _sharesAmount;\\n\\n    shares[_recipient] = shares[_recipient] + _sharesAmount;\\n\\n    return totalShares;\\n  }\\n\\n  /**\\n   * @notice Destroys `_sharesAmount` shares from `_account`'s holdings, decreasing the total amount of shares.\\n   * @dev This doesn't decrease the token total supply.\\n   *\\n   * Requirements:\\n   *\\n   * - `_account` cannot be the zero address.\\n   * - `_account` must hold at least `_sharesAmount` shares.\\n   * - the contract must not be paused.\\n   */\\n  function _burnShares(\\n    address _account,\\n    uint256 _sharesAmount\\n  ) internal whenNotPaused returns (uint256) {\\n    require(_account != address(0), \\\"BURN_FROM_THE_ZERO_ADDRESS\\\");\\n\\n    _beforeTokenTransfer(_account, address(0), _sharesAmount);\\n\\n    uint256 accountShares = shares[_account];\\n    require(_sharesAmount <= accountShares, \\\"BURN_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n    totalShares -= _sharesAmount;\\n\\n    shares[_account] = accountShares - _sharesAmount;\\n\\n    return totalShares;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256\\n  ) internal virtual {\\n    if (from != _msgSender() && to != _msgSender()) {\\n      require(\\n        _getKYCStatus(_msgSender()),\\n        \\\"OMMF: must be KYC'd to initiate transfer\\\"\\n      );\\n    }\\n\\n    if (from != address(0)) {\\n      // Only check KYC if not minting\\n      require(\\n        _getKYCStatus(from),\\n        \\\"OMMF: `from` address must be KYC'd to send tokens\\\"\\n      );\\n    }\\n\\n    if (to != address(0)) {\\n      // Only check KYC if not burning\\n      require(\\n        _getKYCStatus(to),\\n        \\\"OMMF: `to` address must be KYC'd to receive tokens\\\"\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Updates underlying cash in fund\\n   * @dev periodically called by the Oracle contract\\n   * @param _depositedCash Total cash in fund\\n   */\\n  function handleOracleReport(uint256 _depositedCash) external whenNotPaused {\\n    require(msg.sender == oracle, \\\"OMMF: not oracle\\\");\\n    uint256 oldDepositedCash = depositedCash;\\n    depositedCash = _depositedCash;\\n    emit OracleReportHandled(oldDepositedCash, _depositedCash);\\n  }\\n\\n  /**\\n   * @notice Sets the Oracle address\\n   * @dev The new oracle can call `handleOracleReport` for rebases\\n   * @param _oracle Address of the new oracle\\n   */\\n  function setOracle(address _oracle) external onlyRole(OMMF_MANAGER_ROLE) {\\n    oracle = _oracle;\\n  }\\n\\n  /**\\n   * @notice Send funds to the pool\\n   * @return Amount of OMMF shares generated\\n   */\\n  function mint(\\n    address user,\\n    uint256 depositAmount\\n  ) external onlyRole(MINTER_ROLE) returns (uint256) {\\n    require(depositAmount > 0, \\\"OMMF: zero deposit amount\\\");\\n\\n    uint256 sharesAmount = getSharesByPooledCash(depositAmount);\\n    if (sharesAmount == 0) {\\n      // totalControlledCash is 0: first-ever deposit\\n      // assume that shares correspond to Cash 1-to-1\\n      sharesAmount = depositAmount;\\n    }\\n\\n    _mintShares(user, sharesAmount);\\n\\n    depositedCash += depositAmount;\\n\\n    emit TransferShares(address(0), user, sharesAmount);\\n    emit Transfer(address(0), user, getBalanceOfByShares(sharesAmount));\\n    return sharesAmount;\\n  }\\n\\n  /**\\n   * @notice Admin burn function to burn OMMF tokens from any account\\n   * @param _account The account to burn tokens from\\n   * @param _amount  The amount of OMMF tokens to burn\\n   */\\n  function adminBurn(\\n    address _account,\\n    uint256 _amount\\n  ) external onlyRole(BURNER_ROLE) {\\n    uint256 sharesAmount = getSharesByPooledCash(_amount);\\n\\n    _burnShares(_account, sharesAmount);\\n    depositedCash -= _amount; // OMMF corresponds to deposited collateral 1:1\\n    emit TransferShares(_account, address(0), sharesAmount);\\n    emit Transfer(_account, address(0), _amount);\\n  }\\n\\n  /**\\n   * @notice Burns `_amount` of OMMF tokens from msg.sender's holdings\\n   * @param _amount The amount of OMMF tokens to burn\\n   */\\n  function burn(uint256 _amount) external {\\n    require(\\n      getBalanceOfByShares(_sharesOf(msg.sender)) >= _amount,\\n      \\\"BURN_AMOUNT_EXCEEDS_BALANCE\\\"\\n    );\\n    uint256 sharesAmount = getSharesByPooledCash(_amount);\\n    _burnShares(msg.sender, sharesAmount);\\n    depositedCash -= _amount;\\n\\n    emit TransferShares(msg.sender, address(0), sharesAmount);\\n    emit Transfer(msg.sender, address(0), _amount);\\n  }\\n\\n  /**\\n   * @notice Burns `_amount` of OMMF tokens from `_account`'s holdings,\\n   *         deducting from the caller's allowance\\n   * @param _account Account to burn tokens from\\n   * @param _amount  Amount of tokens to burn\\n   * @dev Decrements shares as well as `depositedAmount`\\n   */\\n  function burnFrom(address _account, uint256 _amount) external {\\n    uint256 currentAllowance = allowances[_account][msg.sender];\\n    require(currentAllowance >= _amount, \\\"BURN_AMOUNT_EXCEEDS_ALLOWANCE\\\");\\n\\n    uint256 sharesAmount = getSharesByPooledCash(_amount);\\n\\n    _burnShares(_account, sharesAmount);\\n    depositedCash -= _amount; // OMMF corresponds to deposited collateral 1:1\\n\\n    _approve(_account, msg.sender, currentAllowance - _amount);\\n\\n    emit TransferShares(_account, address(0), sharesAmount);\\n    emit Transfer(_account, address(0), _amount);\\n  }\\n\\n  function pause() external onlyRole(PAUSER_ROLE) {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyRole(OMMF_MANAGER_ROLE) {\\n    _unpause();\\n  }\\n\\n  function setKYCRequirementGroup(\\n    uint256 group\\n  ) external override onlyRole(KYC_CONFIGURER_ROLE) {\\n    _setKYCRequirementGroup(group);\\n  }\\n\\n  function setKYCRegistry(\\n    address registry\\n  ) external override onlyRole(KYC_CONFIGURER_ROLE) {\\n    _setKYCRegistry(registry);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ommf/ommf_token/ommf_factory.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\n// Proxy admin contract used in OZ upgrades plugin\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/ProxyAdmin.sol\\\";\\nimport \\\"contracts/Proxy.sol\\\";\\nimport \\\"contracts/ommf/ommf_token/ommf.sol\\\";\\nimport \\\"contracts/interfaces/IMulticall.sol\\\";\\n\\n/**\\n * @title ommfFactory\\n * @author Ondo Finance\\n * @notice This contract serves as a Factory for the upgradable OMMF token contract.\\n *         Upon calling `deployOMMF` the `guardian` address (set in constructor) will\\n *         deploy the following:\\n *         1) OMMF - The implementation contract, ERC20 contract with the initializer disabled\\n *         2) ProxyAdmin - OZ ProxyAdmin contract, used to upgrade the proxy instance.\\n *                         @notice Owner is set to `guardian` address.\\n *         3) TransparentUpgradeableProxy - OZ, proxy contract. Admin is set to `address(proxyAdmin)`.\\n *                                          `_logic' is set to `address(OMMF)`.\\n *\\n *         Following the above mentioned deployment, the address of the OMMFFactory contract will:\\n *         i) Grant the `DEFAULT_ADMIN_ROLE` & PAUSER_ROLE to the `guardian` address\\n *         ii) Revoke the `MINTER_ROLE`, `PAUSER_ROLE` & `DEFAULT_ADMIN_ROLE` from address(this).\\n *         iii) Transfer ownership of the ProxyAdmin to that of the `guardian` address.\\n *\\n * @notice `guardian` address in constructor is a msig.\\n */\\ncontract OMMFFactory is IMulticall {\\n  address internal immutable guardian;\\n  OMMF public ommfImplementation;\\n  ProxyAdmin public ommfProxyAdmin;\\n  TokenProxy public ommfProxy;\\n\\n  constructor(address _guardian) {\\n    guardian = _guardian;\\n  }\\n\\n  /**\\n   * @dev This function will deploy an upgradable instance of OMMF\\n   *\\n   * @param registry         The address of the KYC Registry\\n   * @param requirementGroup The Requirement group of the Registry\\n   *\\n   * @return address The address of the proxy contract.\\n   * @return address The address of the proxyAdmin contract.\\n   * @return address The address of the implementation contract.\\n   *\\n   * @notice 1) Will automatically revoke all deployer roles granted to\\n   *            address(this).\\n   *         2) Will grant DEFAULT_ADMIN & PAUSER_ROLE(S) to `guardian`\\n   *            address specified in constructor.\\n   *         3) Will transfer ownership of the proxyAdmin to guardian\\n   *            address.\\n   *\\n   */\\n  function deployOMMF(\\n    address registry,\\n    uint256 requirementGroup\\n  ) external onlyGuardian returns (address, address, address) {\\n    ommfImplementation = new OMMF();\\n    ommfProxyAdmin = new ProxyAdmin();\\n    ommfProxy = new TokenProxy(\\n      address(ommfImplementation),\\n      address(ommfProxyAdmin),\\n      \\\"\\\"\\n    );\\n    OMMF ommfProxied = OMMF(address(ommfProxy));\\n    ommfProxied.initialize(guardian, registry, requirementGroup);\\n\\n    ommfProxyAdmin.transferOwnership(guardian);\\n    assert(ommfProxyAdmin.owner() == guardian);\\n    emit OMMFDeployed(\\n      address(ommfProxy),\\n      address(ommfProxyAdmin),\\n      address(ommfImplementation),\\n      ommfImplementation.name(),\\n      ommfImplementation.symbol()\\n    );\\n    return (\\n      address(ommfProxy),\\n      address(ommfProxyAdmin),\\n      address(ommfImplementation)\\n    );\\n  }\\n\\n  /**\\n   * @notice Allows for arbitrary batched calls\\n   *\\n   * @dev All external calls made through this function will\\n   *      msg.sender == contract address\\n   *\\n   * @param exCallData Struct consisting of\\n   *       1) target - contract to call\\n   *       2) data - data to call target with\\n   *       3) value - eth value to call target with\\n   */\\n  function multiexcall(\\n    ExCallData[] calldata exCallData\\n  ) external payable override onlyGuardian returns (bytes[] memory results) {\\n    results = new bytes[](exCallData.length);\\n    for (uint256 i = 0; i < exCallData.length; ++i) {\\n      (bool success, bytes memory ret) = address(exCallData[i].target).call{\\n        value: exCallData[i].value\\n      }(exCallData[i].data);\\n      require(success, \\\"Call Failed\\\");\\n      results[i] = ret;\\n    }\\n  }\\n\\n  /**\\n   * @dev Event emitted when upgradable OMMF is deployed\\n   *\\n   * @param proxy             The address for the proxy contract\\n   * @param proxyAdmin        The address for the proxy admin contract\\n   * @param implementation    The address for the implementation contract\\n   */\\n  event OMMFDeployed(\\n    address proxy,\\n    address proxyAdmin,\\n    address implementation,\\n    string name,\\n    string ticker\\n  );\\n\\n  modifier onlyGuardian() {\\n    require(msg.sender == guardian, \\\"ommfFactory: You are not the Guardian\\\");\\n    _;\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"OMMFDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requirementGroup\",\"type\":\"uint256\"}],\"name\":\"deployOMMF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IMulticall.ExCallData[]\",\"name\":\"exCallData\",\"type\":\"tuple[]\"}],\"name\":\"multiexcall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ommfImplementation\",\"outputs\":[{\"internalType\":\"contract OMMF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ommfProxy\",\"outputs\":[{\"internalType\":\"contract TokenProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ommfProxyAdmin\",\"outputs\":[{\"internalType\":\"contract ProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OMMFFactory", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000aed4caf2e535d964165b4392342f71bac77e8367", "EVMVersion": "london", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}