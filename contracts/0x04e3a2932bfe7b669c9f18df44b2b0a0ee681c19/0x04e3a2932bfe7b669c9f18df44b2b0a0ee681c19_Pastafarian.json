{"SourceCode": "//Pastafarian Coin\r\n/*\r\nhttps://t.me/PastafarianCoin\r\nhttps://twitter.com/PastafarianCoin\r\nhttps://www.instagram.com/pastafariancoin/\r\nhttps://www.tiktok.com/@pastafariancoin\r\nhttps://www.youtube.com/@PastafarianCoin\r\nhttps://www.facebook.com/PastafarianCoin/\r\nhttps://www.reddit.com/r/PastafarianCoin/\r\nhttps://www.threads.net/@pastafariancoin\r\nhttps://medium.com/@pastafariancoin\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface ISigner{\r\n    function signed(address signer) external returns(bool signed) ;\r\n}\r\ninterface IUniswapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n   \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.18;\r\ncontract Pastafarian is IERC20, Ownable\r\n{\r\n  \r\n    mapping (address => uint) private _balances;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n    mapping(address => bool)  _excludedFromFees;\r\n\r\n    string public constant name = 'Pastafarian';\r\n    string public constant symbol = 'PASTA';\r\n    uint8 public constant decimals = 18;\r\n    uint public constant totalSupply= 420420420420 * 10**decimals;\r\n\r\n\r\n    address private constant UniswapRouter=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\r\n    //MainNet\r\n    address private constant USDAddress=0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address private constant USDPair=0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc;\r\n    ISigner whitelist=ISigner(0x29Bd5718F5Af4E01889c02c11A6478EA2D4cf633);\r\n    //Testnet\r\n    //address private constant USDAddress=0x07865c6E87B9F70255377e024ace6630C1Eaa37F;\r\n    //address private USDPair=0x647595535c370F6092C6daE9D05a7Ce9A8819F37;\r\n    //ISigner whitelist=ISigner(0x264c66A00bd05Daf39E6F6b9Ed9dAdcD8a05AD51);\r\n\r\n    address private _UniswapPairAddress; \r\n    IUniswapRouter private  _UniswapRouter;\r\n    \r\n    \r\n    address public marketingWallet;\r\n    address public liquidityWallet;\r\n    //Only marketingWallet can change marketingWallet\r\n    function ChangeMarketingWallet(address newWallet) public{\r\n        require(msg.sender==marketingWallet);\r\n        marketingWallet=newWallet;\r\n    }\r\n    function ChangeLiquidityWallet(address newWallet) public onlyOwner{\r\n        liquidityWallet=newWallet;\r\n    }\r\n    function ChangeSigner(address newWallet) public onlyOwner{\r\n        whitelist=ISigner(newWallet);\r\n    }\r\n\r\n\r\n\r\n    constructor () {\r\n        \r\n        _balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n        _UniswapRouter = IUniswapRouter(UniswapRouter);\r\n        _UniswapPairAddress = IUniswapFactory(_UniswapRouter.factory()).createPair(address(this), _UniswapRouter.WETH());\r\n        marketingWallet=msg.sender;\r\n        _excludedFromFees[msg.sender]=true;\r\n        _excludedFromFees[UniswapRouter]=true;\r\n        _excludedFromFees[address(this)]=true;\r\n    }\r\n  \r\n    function _transfer(address sender, address recipient, uint amount) private{\r\n\r\n        if(_excludedFromFees[sender] || _excludedFromFees[recipient])\r\n            _feelessTransfer(sender, recipient, amount);\r\n        else{ \r\n            require(block.timestamp>=LaunchTimestamp,\"trading not yet enabled\");\r\n            _taxedTransfer(sender,recipient,amount);                  \r\n        }\r\n    }\r\n    function _taxedTransfer(address sender, address recipient, uint amount) private{\r\n        uint senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n\r\n        bool isBuy=_UniswapPairAddress==sender;\r\n        \r\n        if(isBuy){\r\n            require((_balances[recipient]+amount)<=(totalSupply*2/100),\"Max Wallet\");\r\n            if(block.timestamp<LaunchTimestamp+195 minutes)\r\n                    require(whitelist.signed(recipient),\"Not whitelisted\");\r\n\r\n        }\r\n        \r\n\r\n        if((sender!=_UniswapPairAddress)&&(!_isSwappingContractModifier))\r\n            _swapContractToken();\r\n\r\n        unchecked{\r\n            uint contractToken= amount/100;\r\n            uint taxedAmount=amount-contractToken;\r\n            _balances[sender]-=amount;\r\n            _balances[address(this)] += contractToken;\r\n            _balances[recipient]+=taxedAmount;\r\n        }\r\n\r\n        \r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n\r\n    function _feelessTransfer(address sender, address recipient, uint amount) private{\r\n        uint senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        unchecked\r\n        {\r\n            _balances[sender]-=amount;\r\n            _balances[recipient]+=amount; \r\n        }\r\n     \r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n\r\n    bool private _isSwappingContractModifier;\r\n    modifier lockTheSwap {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }\r\n\r\n    bool public reachedTarget;\r\n    function LiquidityValue() public view returns(uint value){\r\n        IERC20 WETH=IERC20(_UniswapRouter.WETH());\r\n        IERC20 USDC=IERC20(USDAddress);\r\n        uint balance=WETH.balanceOf(_UniswapPairAddress);\r\n        value=balance*USDC.balanceOf(USDPair)/WETH.balanceOf(USDPair);\r\n    }\r\n    function checkTarget() private{\r\n        if(LiquidityValue()>(6900000*10**6))\r\n            reachedTarget=true;\r\n    } \r\n    function Swapback() external onlyOwner{\r\n\r\n        _swapContractToken();\r\n    }\r\n    function _swapContractToken() private lockTheSwap{\r\n        uint contractBalance=_balances[address(this)];\r\n        if(contractBalance<totalSupply/10000) return;\r\n\r\n        uint halfBalance=contractBalance/2;\r\n        uint LiqTokens=0;\r\n        if(reachedTarget){\r\n            _feelessTransfer(address(this),address(0xdead),halfBalance);\r\n        }\r\n        else{\r\n            LiqTokens=halfBalance;\r\n            checkTarget();\r\n        }\r\n\r\n        uint swapToken=halfBalance+LiqTokens/2;\r\n\r\n        _swapTokenForETH(swapToken);\r\n\r\n        if(LiqTokens>0)\r\n            _addLiquidity(_balances[address(this)], address(this).balance/3);\r\n        //Sends all the marketing ETH to the marketingWallet\r\n        (bool sent,)=marketingWallet.call{value:address(this).balance}(\"\");\r\n        sent=true;\r\n    }\r\n    //swaps tokens on the contract for ETH\r\n    function _swapTokenForETH(uint amount) private {\r\n        _approve(address(this), address(_UniswapRouter), amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _UniswapRouter.WETH();\r\n\r\n        _UniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint tokenamount, uint ETHamount) private {\r\n        _approve(address(this), address(_UniswapRouter), tokenamount);\r\n        _UniswapRouter.addLiquidityETH{value: ETHamount}(\r\n            address(this),\r\n            tokenamount,\r\n            0,\r\n            0,\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    uint public LaunchTimestamp=type(uint).max;\r\n    function EnableTrading() public onlyOwner{\r\n        require(block.timestamp<LaunchTimestamp,\"AlreadyLaunched\");\r\n        LaunchTimestamp=block.timestamp;\r\n    }\r\n    function SetLaunchTimestamp(uint Timestamp) public onlyOwner{\r\n        require(block.timestamp<LaunchTimestamp,\"AlreadyLaunched\");\r\n        LaunchTimestamp=Timestamp;\r\n    }\r\n    receive() external payable {}\r\n\r\n    function balanceOf(address account) external view override returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) external view override returns (uint) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint amount) private {\r\n        require(owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    // IERC20 - Helpers\r\n\r\n    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\r\n        uint currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"ChangeLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"ChangeMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"ChangeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LaunchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"SetLaunchTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Swapback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reachedTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pastafarian", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a7f67e86770d1dd6bae61448c6b037f4192492c9128fd7ec0895f60495827a8c"}