{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Castle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./interfaces/Interfaces.sol\\\";\\r\\n\\r\\n/// @dev A simple contract to orchestrate comings and going from the OrcsPortal\\r\\ncontract Castle {\\r\\n\\r\\n    address implementation_;\\r\\n    address public admin;\\r\\n    \\r\\n    address public portal;\\r\\n    address public allies;\\r\\n    address public orcs;\\r\\n    address public zug;\\r\\n    address public shr;\\r\\n\\r\\n    mapping (address => address) public reflection;\\r\\n    mapping (uint256 => address) public orcOwner;\\r\\n    mapping (uint256 => address) public allyOwner;\\r\\n\\r\\n    function initialize(address portal_, address orc_, address zug_, address shr_) external {\\r\\n        require(msg.sender == admin);\\r\\n        portal = portal_;\\r\\n        orcs   = orc_;\\r\\n        zug = zug_;\\r\\n        shr = shr_;\\r\\n    }\\r\\n\\r\\n    function setAdmin(address admin_) external {\\r\\n        require(msg.sender == admin);\\r\\n        admin = admin_;\\r\\n    }\\r\\n\\r\\n    function setAllies(address a_) external {\\r\\n        require(msg.sender == admin);\\r\\n        allies = a_;\\r\\n    }\\r\\n\\r\\n    function setReflection(address key_, address reflection_) external {\\r\\n        require(msg.sender == admin);\\r\\n        reflection[key_] = reflection_;\\r\\n        reflection[reflection_] = key_;\\r\\n    }\\r\\n\\r\\n    /// @dev Send Orcs, allies and tokens to PolyLand\\r\\n    function travel(uint256[] calldata orcIds, uint256[] calldata alliesIds, uint256 zugAmount, uint256 shrAmount) external {\\r\\n        address target = reflection[address(this)];\\r\\n\\r\\n        uint256 orcsLen   = orcIds.length;\\r\\n        uint256 allieslen = alliesIds.length;\\r\\n        uint256 currIndex = 0;\\r\\n\\r\\n        bytes[] memory calls = new bytes[]((orcsLen > 0 ? orcsLen + 1 : 0) + (allieslen > 0 ? allieslen + 1 : 0) + (zugAmount > 0 ? 1 : 0) + (shrAmount > 0 ? 1 : 0));\\r\\n\\r\\n\\r\\n        if (orcsLen > 0) {\\r\\n            _pullIds(orcs, orcIds);\\r\\n\\r\\n            // This will create orcs exactly as they exist in this chain\\r\\n            for (uint256 i = 0; i < orcIds.length; i++) {\\r\\n                calls[i] = _buildData(orcIds[i]);\\r\\n            }\\r\\n\\r\\n            calls[orcsLen] = abi.encodeWithSelector(this.unstakeMany.selector,reflection[orcs], msg.sender,  orcIds);\\r\\n            currIndex += orcsLen + 1;\\r\\n        }\\r\\n\\r\\n        if (allieslen > 0) {\\r\\n            _pullIds(allies, alliesIds);\\r\\n\\r\\n            // This will create orcs exactly as they exist in this chain\\r\\n            for (uint256 i = 0; i < alliesIds.length; i++) {\\r\\n                calls[currIndex + i] = _buildDataAllies(alliesIds[i]);\\r\\n            }\\r\\n\\r\\n            calls[currIndex + allieslen] = abi.encodeWithSelector(this.unstakeMany.selector, reflection[allies], msg.sender,  alliesIds);\\r\\n            currIndex = currIndex + allieslen + 1;\\r\\n        }\\r\\n\\r\\n        if (zugAmount > 0) {\\r\\n            ERC20Like(zug).burn(msg.sender, zugAmount);\\r\\n            calls[currIndex] = abi.encodeWithSelector(this.mintToken.selector, reflection[address(zug)], msg.sender, zugAmount);\\r\\n            currIndex++;\\r\\n        }\\r\\n\\r\\n        if (shrAmount > 0) {\\r\\n            ERC20Like(shr).burn(msg.sender, shrAmount);\\r\\n            calls[currIndex] = abi.encodeWithSelector(this.mintToken.selector, reflection[address(shr)], msg.sender, shrAmount);\\r\\n        }\\r\\n\\r\\n        PortalLike(portal).sendMessage(abi.encode(target, calls));\\r\\n    }\\r\\n\\r\\n    function callOrcs(bytes calldata data) external {\\r\\n        _onlyPortal();\\r\\n\\r\\n        (bool succ, ) = orcs.call(data);\\r\\n        require(succ);\\r\\n    }\\r\\n\\r\\n    function callAllies(bytes calldata data) external {\\r\\n        _onlyPortal();\\r\\n        \\r\\n        (bool succ, ) = allies.call(data);\\r\\n        require(succ);\\r\\n    }\\r\\n\\r\\n    function unstakeMany(address token, address owner, uint256[] calldata ids) external {\\r\\n        _onlyPortal();\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; i++) {  \\r\\n            if (token == orcs)   delete orcOwner[ids[i]];\\r\\n            if (token == allies) delete allyOwner[ids[i]];\\r\\n            ERC721Like(token).transfer(owner, ids[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintToken(address token, address to, uint256 amount) external { \\r\\n        _onlyPortal();\\r\\n\\r\\n        ERC20Like(token).mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function _pullIds(address token, uint256[] calldata ids) internal {\\r\\n        // The ownership will be checked to the token contract\\r\\n        OrcishLike(token).pull(msg.sender, ids);\\r\\n    }\\r\\n\\r\\n    function pullCallback(address owner, uint256[] calldata ids) external {\\r\\n        require(msg.sender == orcs || msg.sender == allies);\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            _stake(msg.sender, ids[i], owner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _buildData(uint256 id) internal view returns (bytes memory data) {\\r\\n        (uint8 b, uint8 h, uint8 m, uint8 o, uint16 l, uint16 zM, uint32 lP) = OrcishLike(orcs).orcs(id);\\r\\n        data = abi.encodeWithSelector(this.callOrcs.selector, abi.encodeWithSelector(OrcishLike.manuallyAdjustOrc.selector,id, b, h, m, o, l, zM, lP));   \\r\\n    }\\r\\n\\r\\n    function _buildDataAllies(uint256 id) internal view returns (bytes memory data) {\\r\\n        (uint8 cl, uint16 l, uint32 lP, uint16 modF, uint8 sc, bytes22 d) = OrcishLike(allies).allies(id);\\r\\n        data = abi.encodeWithSelector(this.callAllies.selector, abi.encodeWithSelector(OrcishLike.adjustAlly.selector,id,cl,l,lP,modF,sc,d));   \\r\\n    }\\r\\n\\r\\n    function _stake(address token, uint256 id, address owner) internal {\\r\\n        require((token == orcs ? orcOwner[id] : allyOwner[id]) == address(0), \\\"already staked\\\");\\r\\n        require(msg.sender == token, \\\"not orcs contract\\\");\\r\\n        require(ERC721Like(token).ownerOf(id) == address(this), \\\"orc not transferred\\\");\\r\\n\\r\\n        if (token == orcs)   orcOwner[id]  = owner;\\r\\n        if (token == allies) allyOwner[id] = owner;\\r\\n    }\\r\\n\\r\\n    function _onlyPortal() view internal {\\r\\n        require(msg.sender == portal, \\\"not portal\\\");\\r\\n    } \\r\\n\\r\\n}\"\r\n    },\r\n    \"src/interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface OrcishLike {\\r\\n    function pull(address owner, uint256[] calldata ids) external;\\r\\n    function manuallyAdjustOrc(uint256 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier, uint32 lvlProgress) external;\\r\\n    function transfer(address to, uint256 tokenId) external;\\r\\n    function orcs(uint256 id) external view returns(uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier, uint32 lvlProgress);\\r\\n    function allies(uint256 id) external view returns (uint8 class, uint16 level, uint32 lvlProgress, uint16 modF, uint8 skillCredits, bytes22 details);\\r\\n    function adjustAlly(uint256 id, uint8 class_, uint16 level_, uint32 lvlProgress_, uint16 modF_, uint8 skillCredits_, bytes22 details_) external;\\r\\n    function ogres(uint256 id) external view returns(uint16 level, uint32 lvlProgress, uint16 modF, uint8 skillCredits, uint8 body, uint8 mouth, uint8 nose, uint8 eyes, uint8 armor, uint8 mainhand, uint8 offhand);\\r\\n    function claim(uint256[] calldata ids) external;\\r\\n    function rogue(bytes22 details) external pure returns(uint8 body, uint8 face, uint8 boots, uint8 pants,uint8 shirt,uint8 hair ,uint8 armor ,uint8 mainhand,uint8 offhand);\\r\\n}\\r\\n\\r\\n\\r\\n        \\r\\n\\r\\ninterface PortalLike {\\r\\n    function sendMessage(bytes calldata message_) external;\\r\\n}\\r\\n\\r\\ninterface OracleLike {\\r\\n    function request() external returns (uint64 key);\\r\\n    function getRandom(uint64 id) external view returns(uint256 rand);\\r\\n}\\r\\n\\r\\ninterface MetadataHandlerLike {\\r\\n    function getTokenURI(uint16 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface MetadataHandlerAllies {\\r\\n    function getTokenURI(uint256 id_, uint256 class_, uint256 level_, uint256 modF_, uint256 skillCredits_, bytes22 details_) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface RaidsLike {\\r\\n    function stakeManyAndStartCampaign(uint256[] calldata ids_, address owner_, uint256 location_, bool double_) external;\\r\\n    function startCampaignWithMany(uint256[] calldata ids, uint256 location_, bool double_) external;\\r\\n    function commanders(uint256 id) external returns(address);\\r\\n    function unstake(uint256 id) external;\\r\\n}\\r\\n\\r\\ninterface RaidsLikePoly {\\r\\n    function stakeManyAndStartCampaign(uint256[] calldata ids_, address owner_, uint256 location_, bool double_, uint256[] calldata potions_, uint256[] calldata runes_) external;\\r\\n    function startCampaignWithMany(uint256[] calldata ids, uint256 location_, bool double_,  uint256[] calldata potions_, uint256[] calldata runes_) external;\\r\\n    function commanders(uint256 id) external returns(address);\\r\\n    function unstake(uint256 id) external;\\r\\n}\\r\\n\\r\\ninterface CastleLike {\\r\\n    function pullCallback(address owner, uint256[] calldata ids) external;\\r\\n}\\r\\n\\r\\ninterface EtherOrcsLike {\\r\\n    function ownerOf(uint256 id) external view returns (address owner_);\\r\\n    function activities(uint256 id) external view returns (address owner, uint88 timestamp, uint8 action);\\r\\n    function orcs(uint256 orcId) external view returns (uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier, uint32 lvlProgress);\\r\\n}\\r\\n\\r\\ninterface ERC20Like {\\r\\n    function balanceOf(address from) external view returns(uint256 balance);\\r\\n    function burn(address from, uint256 amount) external;\\r\\n    function mint(address from, uint256 amount) external;\\r\\n    function transfer(address to, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface ERC1155Like {\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n    function mint(address to, uint256 id, uint256 amount) external;\\r\\n    function burn(address from, uint256 id, uint256 amount) external;\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data) external;\\r\\n}\\r\\n\\r\\ninterface ERC721Like {\\r\\n    function transferFrom(address from, address to, uint256 id) external;   \\r\\n    function transfer(address to, uint256 id) external;\\r\\n    function ownerOf(uint256 id) external returns (address owner);\\r\\n    function mint(address to, uint256 tokenid) external;\\r\\n}\\r\\n\\r\\ninterface HallOfChampionsLike {\\r\\n    function joined(uint256 orcId) external view returns (uint256 joinDate);\\r\\n} \\r\\n\\r\\ninterface AlliesLike {\\r\\n    function allies(uint256 id) external view returns (uint8 class, uint16 level, uint32 lvlProgress, uint16 modF, uint8 skillCredits, bytes22 details);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAllies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callOrcs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"portal_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orc_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zug_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shr_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orcOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orcs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"pullCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reflection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a_\",\"type\":\"address\"}],\"name\":\"setAllies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reflection_\",\"type\":\"address\"}],\"name\":\"setReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"alliesIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"zugAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shrAmount\",\"type\":\"uint256\"}],\"name\":\"travel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Castle", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}