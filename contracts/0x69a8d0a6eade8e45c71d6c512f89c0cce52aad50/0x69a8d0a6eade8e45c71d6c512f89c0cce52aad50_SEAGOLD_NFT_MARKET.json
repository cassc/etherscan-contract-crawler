{"SourceCode": "// SPDX-License-Identifier: NO LICENSE\r\n\r\n\r\n\r\n// SEAGOLD - The Next Generation Meta. A Treasure from The Deep Sea\r\n\r\n// Digital Marketplace For Crypto Collectibles And Non Fungible Tokens\r\n\r\n// Create, Collect, Trade, Lend, Borrow, Stake, Watch, Listen, Earn, Play\r\n\r\n// Identity\r\n\r\n// Metaverses\r\n\r\n// SocialFi\r\n\r\n// Games\r\n\r\n\r\n\r\n\r\n// Soft Launch - AirDrop for All Traders ( For both Buyers and Sellers )\r\n\r\n// 0% Trading Fee During Soft Launch\r\n\r\n\r\n\r\n\r\n// Full Launch - Instant Trading Rewards For All Traders ( For both Buyers and Sellers )\r\n\r\n\r\n\r\n\r\n// We Respect Creator Economy And Hence We Honor 100% Creator Royalties\r\n\r\n// Royalties Are Enforced Directly On Chain Using Universal Royalty Registry Contract Maintained At -\r\n\r\n// https://etherscan.io/address/0x1399c7e03b321f5f17a9222ee0077d66690f3874\r\n\r\n\r\n\r\n\r\n// Website: https://seagold.io\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function withdraw(uint256 wad) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed account,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:ERC1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:ERC1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface RoyaltyRegistry {\r\n    function getRoyaltyInfo(address _contractAddress)\r\n        external\r\n        view\r\n        returns \r\n        (bool,bool,address,uint256);\r\n}\r\n\r\ncontract SEAGOLD_NFT_MARKET is Ownable {\r\n   using SafeMath for uint256;\r\n\r\n    error TradeErro(bytes23 msgVal);\r\n    error BalErro(bytes23 msgVal);\r\n    error OwnErro(bytes23 msgVal);\r\n    error QtyErro(bytes23 msgVal);\r\n    error AmtErro(bytes23 msgVal);\r\n    error SignErro(bytes23 msgVal);\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n\r\n    bool public airDropEnabled;\r\n\r\n    bool public buyBackEnabled;\r\n\r\n    bool public tradingOpen;\r\n\r\n    address public wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    address public royaltyRegistry = 0x1399C7e03b321f5f17A9222eE0077d66690F3874;\r\n    \r\n    address public tokenAddress;\r\n\r\n    address public teamAddress;\r\n\r\n    uint256 public buyBackPercent = 100;\r\n\r\n    uint256 public feePercent = 0;\r\n\r\n    uint256 private rewardK;\r\n\r\n    uint256 private buyerShare;\r\n\r\n    uint256 private sellerShare;\r\n\r\n    constructor(\r\n    ) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapV2Router = _uniswapV2Router;\r\n        teamAddress = msg.sender;\r\n    }\r\n\r\n    receive () external payable {}\r\n\r\n    function distributeFee() private {\r\n            uint256 wWethBalance = IERC20(wETH).balanceOf(address(this));\r\n            if (wWethBalance > 1 ether){\r\n                IERC20(wETH).withdraw(wWethBalance);\r\n            }\r\n            if (!buyBackEnabled) {\r\n                payable(address(teamAddress)).transfer(address(this).balance);\r\n            } else {\r\n                uint256 _balance = (address(this).balance);\r\n                uint256 forBuyBack = (_balance * buyBackPercent) / 100;\r\n                uint256 forTeam = _balance - forBuyBack;\r\n                if (forTeam > 0){\r\n                    payable(address(teamAddress)).transfer(forTeam);\r\n                }\r\n                if (forBuyBack > 0){\r\n                    buyBack(forBuyBack);\r\n                }\r\n            }\r\n    }\r\n\r\n    function buyBack(uint256 amount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = wETH;\r\n        path[1] = tokenAddress;\r\n\r\n      // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            address(this),\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    struct saleStruct {\r\n        address adress;\r\n        address conAddr;\r\n        uint64 nftType;\r\n        uint64 tokenId;\r\n        uint64 nooftoken;\r\n        uint256 amount;\r\n    }\r\n\r\n    function enableTrading(bool value) public onlyOwner {\r\n        tradingOpen = value;\r\n    }\r\n\r\n    function updateAirDropEnabled(bool value) public onlyOwner {\r\n        airDropEnabled = value;\r\n    }\r\n\r\n    function updateBuyBackEnabled(bool value) public onlyOwner {\r\n        buyBackEnabled = value;\r\n    }\r\n\r\n    function updateBuyBackPercent(uint256 _buyBackPercent) public onlyOwner {\r\n        require(_buyBackPercent < 101, \"Max BuyBack 100%\");\r\n        buyBackPercent = _buyBackPercent;\r\n    }\r\n\r\n    function updatefeePercent(uint256 _feePercent) public onlyOwner {\r\n        require(_feePercent < 201, \"Max Fee 2%\");\r\n        feePercent = _feePercent;\r\n    }\r\n\r\n    function setBuyerShare(uint256 _buyerShare) public onlyOwner {\r\n        require(_buyerShare < 6, \"Value to be less than 6\");\r\n        buyerShare = _buyerShare * 1e30;\r\n    }\r\n\r\n    function setSellerShare(uint256 _sellerShare) public onlyOwner {\r\n        require(_sellerShare < 6, \"Value to be less than 6\");\r\n        sellerShare = _sellerShare;\r\n    }\r\n\r\n    function setRewardK(uint256 _rewardK) public onlyOwner {\r\n        rewardK = _rewardK * 1e30;\r\n    }\r\n\r\n    function updateRoyaltyRegistry(address newRoyaltyRegistry) public onlyOwner {\r\n        royaltyRegistry = newRoyaltyRegistry;\r\n    }\r\n\r\n    function updateTokenAddress(address newTokenAddress) public onlyOwner {\r\n        tokenAddress = newTokenAddress;\r\n    }\r\n\r\n    function updateUniswapV2Pair(address newUniswapV2Pair) public onlyOwner {\r\n        uniswapV2Pair = newUniswapV2Pair;\r\n    }\r\n\r\n    function updateTeamAddress(address newTeamAddress) public onlyOwner {\r\n        teamAddress = newTeamAddress;\r\n    }\r\n\r\n    function acceptBId(\r\n        address[] memory bidaddr,\r\n        address[] memory conAddr,\r\n        uint64[] memory nftType,\r\n        uint64[] memory tokenId,\r\n        uint64[] memory nooftoken,\r\n        uint256[] memory amount\r\n    ) public {\r\n\r\n        if(!tradingOpen){\r\n            revert TradeErro(\"Trading Not Open Yet\");\r\n        }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 2 ether) {\r\n            distributeFee();\r\n        }\r\n\r\n        uint256 totalSellerRewards;\r\n\r\n        uint256 rewardC;\r\n\r\n        if (airDropEnabled){\r\n            rewardC = rewardK;\r\n        } else{\r\n            uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(uniswapV2Pair));\r\n            uint256 wethBalance = IERC20(wETH).balanceOf(address(uniswapV2Pair));\r\n            uint256 rewardKs = (tokenBalance * 1e28) / wethBalance;\r\n            if (rewardKs > rewardK) {\r\n                rewardC = rewardK;\r\n            } else {\r\n                rewardC = rewardKs;\r\n            }\r\n        }\r\n\r\n        for (uint256 i; i < bidaddr.length;) {\r\n            saleStruct memory salestruct;\r\n            salestruct.adress = bidaddr[i];\r\n            salestruct.conAddr = conAddr[i];\r\n            salestruct.nftType = nftType[i];\r\n            salestruct.tokenId = tokenId[i];\r\n            salestruct.nooftoken = nooftoken[i];\r\n            salestruct.amount = amount[i];\r\n\r\n        if(IERC20(wETH).allowance(salestruct.adress, address(this)) < salestruct.amount || IERC20(wETH).balanceOf(salestruct.adress) < salestruct.amount){\r\n            revert BalErro(\"balError\");\r\n        }\r\n\r\n        if (salestruct.nftType == 721) {\r\n            if(IERC721(salestruct.conAddr).ownerOf(salestruct.tokenId) != msg.sender){\r\n                revert OwnErro(\"OwnErr\");\r\n            }\r\n            IERC721(salestruct.conAddr).safeTransferFrom(msg.sender, salestruct.adress, salestruct.tokenId);\r\n        } else {\r\n            if(IERC1155(salestruct.conAddr).balanceOf(msg.sender,salestruct.tokenId) < salestruct.nooftoken){\r\n               revert  QtyErro(\"InsuffQty\");\r\n            }\r\n            IERC1155(salestruct.conAddr).safeTransferFrom(msg.sender,salestruct.adress,salestruct.tokenId,salestruct.nooftoken,\"\");\r\n        }\r\n\r\n        RoyaltyRegistry royReg = RoyaltyRegistry(royaltyRegistry);\r\n        (,,address royAddress, uint256 royPercentage) = royReg.getRoyaltyInfo(salestruct.conAddr);\r\n\r\n        uint256 fee = ( salestruct.amount * feePercent ) / 10000;\r\n        uint256 royalty = ( salestruct.amount * royPercentage ) / 1e20;\r\n        uint256 netAmount = salestruct.amount - (fee + royalty);\r\n        \r\n        if (fee > 0){\r\n            IERC20(wETH).transferFrom(salestruct.adress, address(this), fee);\r\n        }\r\n        IERC20(wETH).transferFrom(salestruct.adress, msg.sender, netAmount);\r\n        if (royalty > 0) {\r\n            IERC20(wETH).transferFrom(salestruct.adress, royAddress, royalty);\r\n        }\r\n        \r\n        uint256 buyerRewards = (salestruct.amount * rewardC) / buyerShare;\r\n        uint256 sellerRewards = buyerRewards * sellerShare;\r\n\r\n        if (IERC20(tokenAddress).balanceOf(address(this)) > (sellerRewards + buyerRewards)) {\r\n            IERC20(tokenAddress).transfer(salestruct.adress, buyerRewards);\r\n            totalSellerRewards = totalSellerRewards + sellerRewards;\r\n            }\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        IERC20(tokenAddress).transfer(msg.sender, totalSellerRewards);\r\n    }\r\n\r\n    function buyToken(\r\n        address[] memory seller,\r\n        address[] memory conAddr,\r\n        uint64[] memory nftType,\r\n        uint64[] memory tokenId,\r\n        uint64[] memory nooftoken,\r\n        uint256[] memory amount,\r\n        bytes[] memory signature,\r\n        uint256[] memory nonce,\r\n        uint256 totalamount\r\n    ) public payable {\r\n\r\n        if(!tradingOpen){\r\n            revert TradeErro(\"Trading Not Open Yet\");\r\n        }\r\n\r\n        if(msg.value < totalamount){\r\n           revert  AmtErro(\"AmtErr\");\r\n        }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 2 ether) {\r\n            distributeFee();\r\n        }\r\n\r\n        uint256 totalBuyerRewards;\r\n\r\n        uint256 rewardC;\r\n\r\n        if (airDropEnabled){\r\n            rewardC = rewardK;\r\n        } else{\r\n            uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(uniswapV2Pair));\r\n            uint256 wethBalance = IERC20(wETH).balanceOf(address(uniswapV2Pair));\r\n            uint256 rewardKs = (tokenBalance * 1e28) / wethBalance;\r\n            if (rewardKs > rewardK) {\r\n                rewardC = rewardK;\r\n            } else {\r\n                rewardC = rewardKs;\r\n            }\r\n        }\r\n\r\n        for (uint256 i; i < seller.length;) {\r\n            saleStruct memory salestruct;\r\n            salestruct.adress = seller[i];\r\n            salestruct.conAddr = conAddr[i];\r\n            salestruct.nftType = nftType[i];\r\n            salestruct.tokenId = tokenId[i];\r\n            salestruct.nooftoken = nooftoken[i];\r\n            salestruct.amount = amount[i];\r\n            \r\n            bytes32 message = prefixed(keccak256(abi.encodePacked(salestruct.adress, nonce[i])));\r\n             if(recoverSigner(message, signature[i]) != salestruct.adress){\r\n                revert  SignErro(\"SigWrn\");\r\n            }\r\n            \r\n            RoyaltyRegistry royReg = RoyaltyRegistry(royaltyRegistry);\r\n            (,,address royAddress, uint256 royPercentage) = royReg.getRoyaltyInfo(salestruct.conAddr);\r\n\r\n            uint256 fee = ( salestruct.amount * feePercent ) / 10000;\r\n            uint256 royalty = ( salestruct.amount * royPercentage ) / 1e20;\r\n            uint256 netAmount = salestruct.amount - (fee + royalty);\r\n\r\n            if (fee > 0){\r\n            payable(address(this)).transfer(fee);\r\n            }\r\n            payable(salestruct.adress).transfer(netAmount);\r\n            if (royalty > 0) {\r\n                payable(royAddress).transfer(royalty);\r\n            }\r\n\r\n            if (salestruct.nftType == 721) {\r\n                if(IERC721(salestruct.conAddr).ownerOf(salestruct.tokenId) != salestruct.adress){\r\n                    revert OwnErro(\"OwnErr\");\r\n                }\r\n                IERC721(salestruct.conAddr).safeTransferFrom(salestruct.adress, msg.sender, salestruct.tokenId);\r\n            } else {\r\n                if(IERC1155(salestruct.conAddr).balanceOf(salestruct.adress,salestruct.tokenId) < salestruct.nooftoken){\r\n                    revert  QtyErro(\"InsuffQty\");\r\n                }\r\n                IERC1155(salestruct.conAddr).safeTransferFrom(salestruct.adress,msg.sender,salestruct.tokenId,salestruct.nooftoken,\"\");\r\n            }\r\n\r\n            uint256 buyerRewards = (salestruct.amount * rewardC) / buyerShare;\r\n            uint256 sellerRewards = buyerRewards * sellerShare;\r\n\r\n            if (IERC20(tokenAddress).balanceOf(address(this)) > (sellerRewards + buyerRewards)) {\r\n            IERC20(tokenAddress).transfer(salestruct.adress, sellerRewards);\r\n            totalBuyerRewards = totalBuyerRewards + buyerRewards;\r\n            }\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        IERC20(tokenAddress).transfer(msg.sender, totalBuyerRewards);\r\n    }\r\n\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\r\n            );\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        (v, r, s) = splitSignature(sig);\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint8,\r\n            bytes32,\r\n            bytes32\r\n        )\r\n    {\r\n        require(sig.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        return (v, r, s);\r\n    }\r\n\r\n    function withdrawStuckETH(address payable _address, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_amount > 0, \"Zero Amount\");\r\n        require(_amount <= address(this).balance, \"Amount exceeds balance\");\r\n        _address.transfer(_amount);\r\n    }\r\n\r\n    function withdrawStuckERC20(address _token, address _address, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_amount > 0, \"Zero Amount\");\r\n        uint256 _amountB = IERC20(_token).balanceOf(address(this));\r\n        require(_amount <= _amountB, \"Amount exceeds balance\");\r\n        IERC20(_token).transfer(_address, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"msgVal\",\"type\":\"bytes23\"}],\"name\":\"AmtErro\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"msgVal\",\"type\":\"bytes23\"}],\"name\":\"BalErro\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"msgVal\",\"type\":\"bytes23\"}],\"name\":\"OwnErro\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"msgVal\",\"type\":\"bytes23\"}],\"name\":\"QtyErro\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"msgVal\",\"type\":\"bytes23\"}],\"name\":\"SignErro\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes23\",\"name\":\"msgVal\",\"type\":\"bytes23\"}],\"name\":\"TradeErro\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bidaddr\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"conAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"nftType\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"tokenId\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"nooftoken\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"acceptBId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"seller\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"conAddr\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"nftType\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"tokenId\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"nooftoken\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signature\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonce\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyerShare\",\"type\":\"uint256\"}],\"name\":\"setBuyerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardK\",\"type\":\"uint256\"}],\"name\":\"setRewardK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellerShare\",\"type\":\"uint256\"}],\"name\":\"setSellerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateAirDropEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateBuyBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackPercent\",\"type\":\"uint256\"}],\"name\":\"updateBuyBackPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoyaltyRegistry\",\"type\":\"address\"}],\"name\":\"updateRoyaltyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUniswapV2Pair\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"updatefeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SEAGOLD_NFT_MARKET", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "2000000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40de58325e6e548dedf1c7ae02b8a8dc14023014a755df254dcb235cad5bce3a"}