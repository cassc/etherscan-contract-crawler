{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lending/interfaces/INFTLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @notice NFTLending Interface\\ninterface INFTLending {\\n    /// @notice Loan Details struct\\n    /// @param borrowAmount Borrow amount\\n    /// @param repayAmount Repay amount\\n    /// @param loanExpiration Loan expiration\\n    struct LoanDetails {\\n        uint256 borrowAmount;\\n        uint256 repayAmount;\\n        uint256 loanExpiration;\\n        address nftAddress;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Get loan details for given loan id\\n    /// @param _loanId The loan id\\n    function getLoanDetails(\\n        uint256 _loanId\\n    ) external view returns (LoanDetails memory);\\n\\n    /// @notice Borrow WETH from the protocol\\n    /// @param _inputData Encoded input parameters\\n    /// @return _loanId The loan id\\n    function borrow(\\n        bytes calldata _inputData\\n    ) external payable returns (uint256 _loanId);\\n\\n    /// @notice Repay the loan\\n    /// @param _loanId The loan id to repay\\n    /// @param _receiver The user address to receive collateral NFT\\n    function repay(uint256 _loanId, address _receiver) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/lending/teller/CollateralManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface CollateralManager {\\n    struct Collateral {\\n        CollateralType _collateralType;\\n        uint256 _amount;\\n        uint256 _tokenId;\\n        address _collateralAddress;\\n    }\\n\\n    enum CollateralType {\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    function getCollateralInfo(uint256 _bidId) external view returns (Collateral[] memory infos_);\\n}\"\r\n    },\r\n    \"contracts/lending/teller/IMarketRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IMarketRegistry {\\n    function getMarketplaceFee(uint256 _marketId) external view returns (uint16);\\n}\"\r\n    },\r\n    \"contracts/lending/teller/ITellerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ITellerV2 {\\n    struct LoanDetails {\\n        address lendingToken;\\n        uint256 principal;\\n        Payment totalRepaid;\\n        uint32 timestamp;\\n        uint32 acceptedTimestamp;\\n        uint32 lastRepaidTimestamp;\\n        uint32 loanDuration;\\n    }\\n\\n    struct Terms {\\n        uint256 paymentCycleAmount;\\n        uint32 paymentCycle;\\n        uint16 APR;\\n    }\\n\\n    struct Payment {\\n        uint256 principal;\\n        uint256 interest;\\n    }\\n\\n    function approveMarketForwarder(uint256 _marketId, address _forwarder)\\n        external;\\n\\n    function calculateAmountOwed(uint256 _bidId, uint256 _timestamp)\\n        external\\n        view\\n        returns (Payment memory owed);\\n\\n    function calculateNextDueDate(uint256 _bidId)\\n        external\\n        view\\n        returns (uint32 dueDate_);\\n\\n    function collateralManager() external view returns (address);\\n\\n    function hasApprovedMarketForwarder(\\n        uint256 _marketId,\\n        address _forwarder,\\n        address _account\\n    ) external view returns (bool);\\n\\n    function lenderCommitmentForwarder() external view returns (address);\\n\\n    function marketRegistry() external view returns (address);\\n\\n    function protocolFee() external view returns (uint16);\\n\\n    function repayLoanFull(uint256 _bidId) external;\\n}\"\r\n    },\r\n    \"contracts/lending/teller/LenderCommitmentForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface LenderCommitmentForwarder {\\n    /**\\n     * @notice Accept the commitment to submitBid and acceptBid using the funds\\n     * @dev LoanDuration must be longer than the market payment cycle\\n     * @param _commitmentId The id of the commitment being accepted.\\n     * @param _principalAmount The amount of currency to borrow for the loan.\\n     * @param _collateralAmount The amount of collateral to use for the loan.\\n     * @param _collateralTokenId The tokenId of collateral to use for the loan if ERC721 or ERC1155.\\n     * @param _collateralTokenAddress The contract address to use for the loan collateral tokens.\\n     * @param _interestRate The interest rate APY to use for the loan in basis points.\\n     * @param _loanDuration The overall duration for the loan.  Must be longer than market payment cycle duration.\\n     * @return bidId The ID of the loan that was created on TellerV2\\n     */\\n    function acceptCommitment(\\n        uint256 _commitmentId,\\n        uint256 _principalAmount,\\n        uint256 _collateralAmount,\\n        uint256 _collateralTokenId,\\n        address _collateralTokenAddress,\\n        uint16 _interestRate,\\n        uint32 _loanDuration\\n    ) external returns (uint256 bidId);\\n\\n    /**\\n     * @notice Accept the commitment to submitBid and acceptBid using the funds\\n     * @dev LoanDuration must be longer than the market payment cycle\\n     * @param _commitmentId The id of the commitment being accepted.\\n     * @param _principalAmount The amount of currency to borrow for the loan.\\n     * @param _collateralAmount The amount of collateral to use for the loan.\\n     * @param _collateralTokenId The tokenId of collateral to use for the loan if ERC721 or ERC1155.\\n     * @param _collateralTokenAddress The contract address to use for the loan collateral tokens.\\n     * @param _interestRate The interest rate APY to use for the loan in basis points.\\n     * @param _loanDuration The overall duration for the loan.  Must be longer than market payment cycle duration.\\n     * @param _merkleProof An array of bytes32 which are the roots down the merkle tree, the merkle proof.\\n     * @return bidId The ID of the loan that was created on TellerV2\\n     */\\n    function acceptCommitmentWithProof(\\n        uint256 _commitmentId,\\n        uint256 _principalAmount,\\n        uint256 _collateralAmount,\\n        uint256 _collateralTokenId,\\n        address _collateralTokenAddress,\\n        uint16 _interestRate,\\n        uint32 _loanDuration,\\n        bytes32[] calldata _merkleProof\\n    ) external returns (uint256 bidId);\\n}\"\r\n    },\r\n    \"contracts/lending/teller/TellerLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../IWETH.sol\\\";\\nimport \\\"../interfaces/INFTLending.sol\\\";\\nimport \\\"./LenderCommitmentForwarder.sol\\\";\\nimport \\\"./CollateralManager.sol\\\";\\nimport \\\"./ITellerV2.sol\\\";\\nimport \\\"./IMarketRegistry.sol\\\";\\n\\ncontract TellerLending is INFTLending {\\n\\n    IWETH public immutable weth;\\n    ITellerV2 public immutable loansCore;\\n\\n    constructor(IWETH _weth, ITellerV2 _loansCore) {\\n        weth = _weth;\\n        loansCore = _loansCore;\\n    }\\n\\n    /// @inheritdoc INFTLending\\n    function getLoanDetails(\\n        uint256 _loanId\\n    ) external view returns (LoanDetails memory loanDetails) {\\n        CollateralManager.Collateral memory collateral = CollateralManager(loansCore.collateralManager()).getCollateralInfo(_loanId)[0];\\n        uint32 expiry = loansCore.calculateNextDueDate(_loanId);\\n        ITellerV2.Payment memory payment = loansCore.calculateAmountOwed(_loanId, expiry);\\n\\n        loanDetails = LoanDetails(\\n            payment.principal,\\n            payment.principal + payment.interest,\\n            expiry,\\n            collateral._collateralAddress,\\n            collateral._tokenId\\n        );\\n    }\\n\\n    /// @inheritdoc INFTLending\\n    function borrow(\\n        bytes calldata _inputData\\n    ) external payable returns (uint256 loanId) {\\n        address lenderCommitmentForwarder = loansCore.lenderCommitmentForwarder();\\n        address collateralManager = loansCore.collateralManager();\\n\\n        // 1. Decode\\n        (\\n            uint256 _commitmentId,\\n            uint256 _principalAmount,\\n            uint256 _collateralAmount,\\n            uint256 _collateralTokenId,\\n            address _collateralTokenAddress,\\n            uint16 _interestRate,\\n            uint32 _loanDuration,\\n            uint256 _marketplaceId,\\n            bytes32[] memory _merkleProof\\n        ) = abi.decode(\\n            _inputData,\\n            (uint256, uint256, uint256, uint256, address, uint16, uint32, uint256, bytes32[]));\\n\\n        // 2. Approve NFT Transfer\\n        IERC721 nft = IERC721(_collateralTokenAddress);\\n        if (!nft.isApprovedForAll(address(this), collateralManager)) {\\n            nft.setApprovalForAll(collateralManager, true);\\n        }\\n\\n        // 3. Approve market forwarder\\n        if (!loansCore.hasApprovedMarketForwarder(_marketplaceId, lenderCommitmentForwarder, address(this))) {\\n            loansCore.approveMarketForwarder(_marketplaceId, lenderCommitmentForwarder);\\n        }\\n\\n        // 4. Take out loan\\n        if (_merkleProof.length > 0) {\\n            loanId = LenderCommitmentForwarder(lenderCommitmentForwarder).acceptCommitmentWithProof(\\n                _commitmentId,\\n                _principalAmount,\\n                _collateralAmount,\\n                _collateralTokenId,\\n                _collateralTokenAddress,\\n                _interestRate,\\n                _loanDuration, \\n                _merkleProof\\n            );\\n        } else {\\n            loanId = LenderCommitmentForwarder(lenderCommitmentForwarder).acceptCommitment(\\n                _commitmentId,\\n                _principalAmount,\\n                _collateralAmount,\\n                _collateralTokenId,\\n                _collateralTokenAddress,\\n                _interestRate,\\n                _loanDuration\\n            );\\n        }\\n\\n        // 5. Unwrap WETH into ETH\\n        uint256 amountToBorrower = calculateAmountToBorrower(_principalAmount, _marketplaceId);\\n        weth.withdraw(amountToBorrower);\\n    }\\n\\n    /// @inheritdoc INFTLending\\n    function repay(uint256 _loanId, address _receiver) external payable {\\n        address collateralManager = loansCore.collateralManager();\\n        // 1. Calculate amount\\n        ITellerV2.Payment memory payment = loansCore.calculateAmountOwed(_loanId, block.timestamp);\\n        uint256 repayAmount = payment.interest + payment.principal;\\n        CollateralManager.Collateral memory collateral = CollateralManager(collateralManager).getCollateralInfo(_loanId)[0];\\n\\n        // 2. Deposit and approve WETH\\n        weth.deposit{value: repayAmount}();\\n        weth.approve(collateralManager, repayAmount);\\n\\n        // 3. Repay loan\\n        loansCore.repayLoanFull(_loanId);\\n\\n        // 4. Transfer collateral NFT to the user\\n        if (_receiver != address(this)) {\\n            IERC721(collateral._collateralAddress).safeTransferFrom(\\n                address(this),\\n                _receiver,\\n                collateral._tokenId\\n            );\\n        }\\n    }\\n\\n    /// @notice Calculates the fee paid to the protocol upfront\\n    /// @param _principal the loan principal\\n    /// @param _marketId the market id\\n    function calculateTellerFees(uint256 _principal, uint256 _marketId) view public returns(uint256 totalFees) {\\n        uint256 amountToProtocol = percent(_principal, loansCore.protocolFee());\\n        uint256 amountToMarketplace = percent(_principal, IMarketRegistry(loansCore.marketRegistry()).getMarketplaceFee(_marketId));\\n        totalFees = amountToProtocol + amountToMarketplace;\\n    }\\n\\n    /// @notice Calculates the amount received by a protocol\\n    /// @param _principal the loan principal\\n    /// @param _marketId the market id\\n    function calculateAmountToBorrower(uint256 _principal, uint256 _marketId) view public returns(uint256 amountToBorrower) {\\n        amountToBorrower = _principal - calculateTellerFees(_principal, _marketId);\\n    }\\n\\n    function percent(uint256 value, uint16 percentage) pure internal returns (uint256) {\\n        return value * percentage / 10_000;\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ITellerV2\",\"name\":\"_loansCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_inputData\",\"type\":\"bytes\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"calculateAmountToBorrower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToBorrower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"calculateTellerFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanExpiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTLending.LoanDetails\",\"name\":\"loanDetails\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loansCore\",\"outputs\":[{\"internalType\":\"contract ITellerV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TellerLending", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000182fdb0b880ee24d428e3cc39383717677c37e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}