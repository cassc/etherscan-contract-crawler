{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/facets/UpdateFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/***************************************************************\\\\\\n .    . . . . . . .... .. ...................... . . . .  .   .+\\n   ..  .   . .. . ............................ ... ....  . .. .+\\n .   .  .. .. ....... ..;@@@@@@@@@@@@@@@@@@@;........ ... .  . +\\n  .   .  .. ...........X 8@8X8X8X8X8X8X8X8X@ 8  ....... .. .. .+\\n.  .. . . ... ... .:..% 8 88@ 888888888888@%..8  .:...... . .  +\\n .  . ... . ........:t:88888888@88888@8@888 ;  @......... .. ..+\\n.  . . . ........::.% 8 888@888888X888888  .   88:;:.:....... .+\\n.   . .. . .....:.:; 88888888@8888888@88      S.88:.:........ .+\\n . . .. .......:.:;88 @8@8@888888@@88888.   .888 88;.:..:..... +\\n.  .. .......:..:; 8888888888888@88888X :  :Xt8 8 :S:.:........+\\n .  .......:..:.;:8 8888888%8888888888 :. .888 8 88:;::::..... +\\n . .. .......:::tS8@8888888@88%88888X ;. .@.S 8  %:  8:..:.....+\\n. .........:..::8888@S888S8888888888 ;. :88SS 8t8.    @::......+\\n . . .....:.::.8@ 88 @88 @8 88@ 88 @::  8.8 8 8@     88:.:.....v\\n. . .......:.:;t8 :8 8 88.8 8:8.:8 t8..88 8 8 @ 8   88;::.:....+\\n.. .......:.:::;.%8 @ 8 @ .8:@.8 ;8;8t8:X@ 8:8X    88t::::.....+\\n. .. ......:..:::t88 8 8 8 t8 %88 88.@8 @ 888 X 8 XX;::::.::...+\\n..........:::::::;:X:8 :8 8 ;8.8.8 @ :88 8:@ @   8X;::::::.:...+\\n  . .......:.:::::; 8 8.:8 8 t8:8 8 8.;88 XX  8 88t;:::::......+\\n.. .......:.:.:::::; @:8.;8 8.t8 8 tt8.%8@. 8  88t;:;::::.:....+\\n ... ....:.:.:.::;::; 8:8 ;8 8 t8 8:8 8.t8S. 888;;:;::::.:..:..+\\n.  ........::::::::;:;.t 8 ;8 8 ;88:;8.8 ;88 88S:::::::.:.:....+\\n .. .. .....:.:.:::::;; 888X8S8 X@XSSS88 888X:t;;;::::::.:.....+\\n .. ........:..:::::;::;%;:   .t. ;ttS:;t. .  :;;:;:::.::......+\\n . . ......:.:..::::::;;;t;;:;;;;;;;;t;;;;;:: :;:;:::.:........+\\n/***************************************************************/\\n\\nimport { LibDiamond, Modifiers } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { LibUpdates } from \\\"../libraries/LibUpdates.sol\\\";\\nimport { Strings } from \\\"../libraries/Strings.sol\\\";\\n\\n/**\\n * @title UpdateFacet\\n * @dev This contract allows to store token updates logs on chain. We will differentiate two types of updates - standard\\n * and layered.\\n *\\n * NOTE: Update functions are protected by modifiers to allow execution only for admin or token holders.\\n */\\n\\ncontract UpdateFacet is Modifiers {\\n\\n  uint8 public constant STANDARD_UPDATE = 1;\\n  uint8 public constant LAYERED_UPDATE = 2;  \\n\\n  /**\\n   * @dev emits `Update` event with given parameters.\\n   * `sender`, `contractAddress` and `updateType` are indexed to allow on chain filtering\\n   */\\n  event Update(address indexed sender, address indexed contractAddress, uint8 indexed updateType, string updateId, string collectionId, string tokenOrGroupId);\\n\\n  /**\\n  * @dev Emits `Update` event to store update log.\\n  * It takes:\\n  * - `collectionId` and `tokenId` to  identify specific token data within CAKE\\n  * - `updateId` to identify update data\\n  * - `updateType` to keep information which typo of update was performed\\n  */\\n  function emitUpdate(address from, string memory updateId, string memory collectionId, string memory tokenOrGroupId, uint8 updateType) internal {\\n    emit Update(from, address(this), updateType, updateId, collectionId, tokenOrGroupId);\\n  }\\n\\n  /**\\n  * @dev Triggers standard update with given params\\n  * available only for cake admin\\n  */\\n  function standardUpdate(address from, string memory updateId, string memory collectionId, string memory groupId) external onlyOwner() {\\n    emitUpdate(from, updateId, collectionId, groupId, STANDARD_UPDATE);\\n  }\\n\\n/**\\n  * @dev Triggers layered update with given params\\n  * available only for cake admin\\n  */\\n  function layeredUpdate(address from, string memory updateId, string memory collectionId, uint256 tokenId, bytes calldata signature, bytes32 messageHash) external {\\n    address CAKE_WALLET = 0x29c6a598a3447F69ff52b9b96dadf630750886FD;\\n    LibUpdates.Layout storage layout = LibUpdates.layout();\\n    bytes32 _message = LibUpdates.getMessageHash(updateId, collectionId, Strings.toString(tokenId), LAYERED_UPDATE);\\n    \\n    require( _message == messageHash, 'invalid update parameters.');\\n    require(LibUpdates.verify(CAKE_WALLET, updateId, collectionId, Strings.toString(tokenId), LAYERED_UPDATE, signature) == true, 'signature not verified.');\\n    require(bytes(LibUpdates.checkTokenIdOwnership(from, tokenId)).length == 0, 'not token owner');\\n    require(layout.claimedSignatures[messageHash] == 0, 'update already claimed.');\\n\\n    layout.claimedSignatures[messageHash] = 1;\\n    emitUpdate(from, updateId, collectionId, Strings.toString(tokenId), LAYERED_UPDATE);\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/***************************************************************\\\\\\n\u00a0.\u00a0\u00a0\u00a0\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0....\u00a0..\u00a0......................\u00a0.\u00a0.\u00a0.\u00a0.\u00a0\u00a0.\u00a0\u00a0\u00a0.+\\n\u00a0\u00a0\u00a0..\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0............................\u00a0...\u00a0....\u00a0\u00a0.\u00a0..\u00a0.+\\n\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0..\u00a0.......\u00a0..;@@@@@@@@@@@@@@@@@@@;........\u00a0...\u00a0.\u00a0\u00a0.\u00a0+\\n\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0...........X\u00a08@8X8X8X8X8X8X8X8X@\u00a08\u00a0\u00a0.......\u00a0..\u00a0..\u00a0.+\\n.\u00a0\u00a0..\u00a0.\u00a0.\u00a0...\u00a0...\u00a0.:..%\u00a08\u00a088@\u00a0888888888888@%..8\u00a0\u00a0.:......\u00a0.\u00a0.\u00a0\u00a0+\\n\u00a0.\u00a0\u00a0.\u00a0...\u00a0.\u00a0........:t:88888888@88888@8@888\u00a0;\u00a0\u00a0@.........\u00a0..\u00a0..+\\n.\u00a0\u00a0.\u00a0.\u00a0.\u00a0........::.%\u00a08\u00a0888@888888X888888\u00a0\u00a0.\u00a0\u00a0\u00a088:;:.:.......\u00a0.+\\n.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0.....:.:;\u00a088888888@8888888@88\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S.88:.:........\u00a0.+\\n\u00a0.\u00a0.\u00a0..\u00a0.......:.:;88\u00a0@8@8@888888@@88888.\u00a0\u00a0\u00a0.888\u00a088;.:..:.....\u00a0+\\n.\u00a0\u00a0..\u00a0.......:..:;\u00a08888888888888@88888X\u00a0:\u00a0\u00a0:Xt8\u00a08\u00a0:S:.:........+\\n\u00a0.\u00a0\u00a0.......:..:.;:8\u00a08888888%8888888888\u00a0:.\u00a0.888\u00a08\u00a088:;::::.....\u00a0+\\n\u00a0.\u00a0..\u00a0.......:::tS8@8888888@88%88888X\u00a0;.\u00a0.@.S\u00a08\u00a0\u00a0%:\u00a0\u00a08:..:.....+\\n.\u00a0.........:..::8888@S888S8888888888\u00a0;.\u00a0:88SS\u00a08t8.\u00a0\u00a0\u00a0\u00a0@::......+\\n\u00a0.\u00a0.\u00a0.....:.::.8@\u00a088\u00a0@88\u00a0@8\u00a088@\u00a088\u00a0@::\u00a0\u00a08.8\u00a08\u00a08@\u00a0\u00a0\u00a0\u00a0\u00a088:.:.....v\\n.\u00a0.\u00a0.......:.:;t8\u00a0:8\u00a08\u00a088.8\u00a08:8.:8\u00a0t8..88\u00a08\u00a08\u00a0@\u00a08\u00a0\u00a0\u00a088;::.:....+\\n..\u00a0.......:.:::;.%8\u00a0@\u00a08\u00a0@\u00a0.8:@.8\u00a0;8;8t8:X@\u00a08:8X\u00a0\u00a0\u00a0\u00a088t::::.....+\\n.\u00a0..\u00a0......:..:::t88\u00a08\u00a08\u00a08\u00a0t8\u00a0%88\u00a088.@8\u00a0@\u00a0888\u00a0X\u00a08\u00a0XX;::::.::...+\\n..........:::::::;:X:8\u00a0:8\u00a08\u00a0;8.8.8\u00a0@\u00a0:88\u00a08:@\u00a0@\u00a0\u00a0\u00a08X;::::::.:...+\\n\u00a0\u00a0.\u00a0.......:.:::::;\u00a08\u00a08.:8\u00a08\u00a0t8:8\u00a08\u00a08.;88\u00a0XX\u00a0\u00a08\u00a088t;:::::......+\\n..\u00a0.......:.:.:::::;\u00a0@:8.;8\u00a08.t8\u00a08\u00a0tt8.%8@.\u00a08\u00a0\u00a088t;:;::::.:....+\\n\u00a0...\u00a0....:.:.:.::;::;\u00a08:8\u00a0;8\u00a08\u00a0t8\u00a08:8\u00a08.t8S.\u00a0888;;:;::::.:..:..+\\n.\u00a0\u00a0........::::::::;:;.t\u00a08\u00a0;8\u00a08\u00a0;88:;8.8\u00a0;88\u00a088S:::::::.:.:....+\\n\u00a0..\u00a0..\u00a0.....:.:.:::::;;\u00a0888X8S8\u00a0X@XSSS88\u00a0888X:t;;;::::::.:.....+\\n\u00a0..\u00a0........:..:::::;::;%;:\u00a0\u00a0\u00a0.t.\u00a0;ttS:;t.\u00a0.\u00a0\u00a0:;;:;:::.::......+\\n\u00a0.\u00a0.\u00a0......:.:..::::::;;;t;;:;;;;;;;;t;;;;;::\u00a0:;:;:::.:........+\\n/***************************************************************/\\n\\ninterface IDiamond {\\n  enum FacetCutAction {Add, Replace, Remove}\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/***************************************************************\\\\\\n\u00a0.\u00a0\u00a0\u00a0\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0....\u00a0..\u00a0......................\u00a0.\u00a0.\u00a0.\u00a0.\u00a0\u00a0.\u00a0\u00a0\u00a0.+\\n\u00a0\u00a0\u00a0..\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0............................\u00a0...\u00a0....\u00a0\u00a0.\u00a0..\u00a0.+\\n\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0..\u00a0.......\u00a0..;@@@@@@@@@@@@@@@@@@@;........\u00a0...\u00a0.\u00a0\u00a0.\u00a0+\\n\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0...........X\u00a08@8X8X8X8X8X8X8X8X@\u00a08\u00a0\u00a0.......\u00a0..\u00a0..\u00a0.+\\n.\u00a0\u00a0..\u00a0.\u00a0.\u00a0...\u00a0...\u00a0.:..%\u00a08\u00a088@\u00a0888888888888@%..8\u00a0\u00a0.:......\u00a0.\u00a0.\u00a0\u00a0+\\n\u00a0.\u00a0\u00a0.\u00a0...\u00a0.\u00a0........:t:88888888@88888@8@888\u00a0;\u00a0\u00a0@.........\u00a0..\u00a0..+\\n.\u00a0\u00a0.\u00a0.\u00a0.\u00a0........::.%\u00a08\u00a0888@888888X888888\u00a0\u00a0.\u00a0\u00a0\u00a088:;:.:.......\u00a0.+\\n.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0.....:.:;\u00a088888888@8888888@88\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S.88:.:........\u00a0.+\\n\u00a0.\u00a0.\u00a0..\u00a0.......:.:;88\u00a0@8@8@888888@@88888.\u00a0\u00a0\u00a0.888\u00a088;.:..:.....\u00a0+\\n.\u00a0\u00a0..\u00a0.......:..:;\u00a08888888888888@88888X\u00a0:\u00a0\u00a0:Xt8\u00a08\u00a0:S:.:........+\\n\u00a0.\u00a0\u00a0.......:..:.;:8\u00a08888888%8888888888\u00a0:.\u00a0.888\u00a08\u00a088:;::::.....\u00a0+\\n\u00a0.\u00a0..\u00a0.......:::tS8@8888888@88%88888X\u00a0;.\u00a0.@.S\u00a08\u00a0\u00a0%:\u00a0\u00a08:..:.....+\\n.\u00a0.........:..::8888@S888S8888888888\u00a0;.\u00a0:88SS\u00a08t8.\u00a0\u00a0\u00a0\u00a0@::......+\\n\u00a0.\u00a0.\u00a0.....:.::.8@\u00a088\u00a0@88\u00a0@8\u00a088@\u00a088\u00a0@::\u00a0\u00a08.8\u00a08\u00a08@\u00a0\u00a0\u00a0\u00a0\u00a088:.:.....v\\n.\u00a0.\u00a0.......:.:;t8\u00a0:8\u00a08\u00a088.8\u00a08:8.:8\u00a0t8..88\u00a08\u00a08\u00a0@\u00a08\u00a0\u00a0\u00a088;::.:....+\\n..\u00a0.......:.:::;.%8\u00a0@\u00a08\u00a0@\u00a0.8:@.8\u00a0;8;8t8:X@\u00a08:8X\u00a0\u00a0\u00a0\u00a088t::::.....+\\n.\u00a0..\u00a0......:..:::t88\u00a08\u00a08\u00a08\u00a0t8\u00a0%88\u00a088.@8\u00a0@\u00a0888\u00a0X\u00a08\u00a0XX;::::.::...+\\n..........:::::::;:X:8\u00a0:8\u00a08\u00a0;8.8.8\u00a0@\u00a0:88\u00a08:@\u00a0@\u00a0\u00a0\u00a08X;::::::.:...+\\n\u00a0\u00a0.\u00a0.......:.:::::;\u00a08\u00a08.:8\u00a08\u00a0t8:8\u00a08\u00a08.;88\u00a0XX\u00a0\u00a08\u00a088t;:::::......+\\n..\u00a0.......:.:.:::::;\u00a0@:8.;8\u00a08.t8\u00a08\u00a0tt8.%8@.\u00a08\u00a0\u00a088t;:;::::.:....+\\n\u00a0...\u00a0....:.:.:.::;::;\u00a08:8\u00a0;8\u00a08\u00a0t8\u00a08:8\u00a08.t8S.\u00a0888;;:;::::.:..:..+\\n.\u00a0\u00a0........::::::::;:;.t\u00a08\u00a0;8\u00a08\u00a0;88:;8.8\u00a0;88\u00a088S:::::::.:.:....+\\n\u00a0..\u00a0..\u00a0.....:.:.:::::;;\u00a0888X8S8\u00a0X@XSSS88\u00a0888X:t;;;::::::.:.....+\\n\u00a0..\u00a0........:..:::::;::;%;:\u00a0\u00a0\u00a0.t.\u00a0;ttS:;t.\u00a0.\u00a0\u00a0:;;:;:::.::......+\\n\u00a0.\u00a0.\u00a0......:.:..::::::;;;t;;:;;;;;;;;t;;;;;::\u00a0:;:;:::.:........+\\n/***************************************************************/\\n\\nimport { IDiamond } from \\\"./IDiamond.sol\\\";\\n\\ninterface IDiamondCut is IDiamond {    \\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;    \\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/***************************************************************\\\\\\n\u00a0.\u00a0\u00a0\u00a0\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0....\u00a0..\u00a0......................\u00a0.\u00a0.\u00a0.\u00a0.\u00a0\u00a0.\u00a0\u00a0\u00a0.+\\n\u00a0\u00a0\u00a0..\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0............................\u00a0...\u00a0....\u00a0\u00a0.\u00a0..\u00a0.+\\n\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0..\u00a0.......\u00a0..;@@@@@@@@@@@@@@@@@@@;........\u00a0...\u00a0.\u00a0\u00a0.\u00a0+\\n\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0...........X\u00a08@8X8X8X8X8X8X8X8X@\u00a08\u00a0\u00a0.......\u00a0..\u00a0..\u00a0.+\\n.\u00a0\u00a0..\u00a0.\u00a0.\u00a0...\u00a0...\u00a0.:..%\u00a08\u00a088@\u00a0888888888888@%..8\u00a0\u00a0.:......\u00a0.\u00a0.\u00a0\u00a0+\\n\u00a0.\u00a0\u00a0.\u00a0...\u00a0.\u00a0........:t:88888888@88888@8@888\u00a0;\u00a0\u00a0@.........\u00a0..\u00a0..+\\n.\u00a0\u00a0.\u00a0.\u00a0.\u00a0........::.%\u00a08\u00a0888@888888X888888\u00a0\u00a0.\u00a0\u00a0\u00a088:;:.:.......\u00a0.+\\n.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0.....:.:;\u00a088888888@8888888@88\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S.88:.:........\u00a0.+\\n\u00a0.\u00a0.\u00a0..\u00a0.......:.:;88\u00a0@8@8@888888@@88888.\u00a0\u00a0\u00a0.888\u00a088;.:..:.....\u00a0+\\n.\u00a0\u00a0..\u00a0.......:..:;\u00a08888888888888@88888X\u00a0:\u00a0\u00a0:Xt8\u00a08\u00a0:S:.:........+\\n\u00a0.\u00a0\u00a0.......:..:.;:8\u00a08888888%8888888888\u00a0:.\u00a0.888\u00a08\u00a088:;::::.....\u00a0+\\n\u00a0.\u00a0..\u00a0.......:::tS8@8888888@88%88888X\u00a0;.\u00a0.@.S\u00a08\u00a0\u00a0%:\u00a0\u00a08:..:.....+\\n.\u00a0.........:..::8888@S888S8888888888\u00a0;.\u00a0:88SS\u00a08t8.\u00a0\u00a0\u00a0\u00a0@::......+\\n\u00a0.\u00a0.\u00a0.....:.::.8@\u00a088\u00a0@88\u00a0@8\u00a088@\u00a088\u00a0@::\u00a0\u00a08.8\u00a08\u00a08@\u00a0\u00a0\u00a0\u00a0\u00a088:.:.....v\\n.\u00a0.\u00a0.......:.:;t8\u00a0:8\u00a08\u00a088.8\u00a08:8.:8\u00a0t8..88\u00a08\u00a08\u00a0@\u00a08\u00a0\u00a0\u00a088;::.:....+\\n..\u00a0.......:.:::;.%8\u00a0@\u00a08\u00a0@\u00a0.8:@.8\u00a0;8;8t8:X@\u00a08:8X\u00a0\u00a0\u00a0\u00a088t::::.....+\\n.\u00a0..\u00a0......:..:::t88\u00a08\u00a08\u00a08\u00a0t8\u00a0%88\u00a088.@8\u00a0@\u00a0888\u00a0X\u00a08\u00a0XX;::::.::...+\\n..........:::::::;:X:8\u00a0:8\u00a08\u00a0;8.8.8\u00a0@\u00a0:88\u00a08:@\u00a0@\u00a0\u00a0\u00a08X;::::::.:...+\\n\u00a0\u00a0.\u00a0.......:.:::::;\u00a08\u00a08.:8\u00a08\u00a0t8:8\u00a08\u00a08.;88\u00a0XX\u00a0\u00a08\u00a088t;:::::......+\\n..\u00a0.......:.:.:::::;\u00a0@:8.;8\u00a08.t8\u00a08\u00a0tt8.%8@.\u00a08\u00a0\u00a088t;:;::::.:....+\\n\u00a0...\u00a0....:.:.:.::;::;\u00a08:8\u00a0;8\u00a08\u00a0t8\u00a08:8\u00a08.t8S.\u00a0888;;:;::::.:..:..+\\n.\u00a0\u00a0........::::::::;:;.t\u00a08\u00a0;8\u00a08\u00a0;88:;8.8\u00a0;88\u00a088S:::::::.:.:....+\\n\u00a0..\u00a0..\u00a0.....:.:.:::::;;\u00a0888X8S8\u00a0X@XSSS88\u00a0888X:t;;;::::::.:.....+\\n\u00a0..\u00a0........:..:::::;::;%;:\u00a0\u00a0\u00a0.t.\u00a0;ttS:;t.\u00a0.\u00a0\u00a0:;;:;:::.::......+\\n\u00a0.\u00a0.\u00a0......:.:..::::::;;;t;;:;;;;;;;;t;;;;;::\u00a0:;:;:::.:........+\\n/***************************************************************/\\n\\nimport { IDiamond } from \\\"../interfaces/IDiamond.sol\\\";\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nerror NoSelectorsGivenToAdd();\\nerror NotContractOwner(address _user, address _contractOwner);\\nerror NoSelectorsProvidedForFacetForCut(address _facetAddress);\\nerror CannotAddSelectorsToZeroAddress(bytes4[] _selectors);\\nerror NoBytecodeAtAddress(address _contractAddress, string _message);\\nerror IncorrectFacetCutAction(uint8 _action);\\nerror CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector);\\nerror CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors);\\nerror CannotReplaceImmutableFunction(bytes4 _selector);\\nerror CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector);\\nerror CannotReplaceFunctionThatDoesNotExists(bytes4 _selector);\\nerror RemoveFacetAddressMustBeZeroAddress(address _facetAddress);\\nerror CannotRemoveFunctionThatDoesNotExist(bytes4 _selector);\\nerror CannotRemoveImmutableFunction(bytes4 _selector);\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n  uint8 constant INNER_STRUCT = 0;\\n\\n  struct FacetAddressAndSelectorPosition {\\n    address facetAddress;\\n    uint16 selectorPosition;\\n  }\\n\\n  struct ProjectConfig {\\n    string name;    \\n    string symbol;    \\n    uint256 maxSupply;    \\n    uint256 price;    \\n    uint256 maxTotalMints;    \\n    uint256 maxMintTxns;    \\n    uint256 privateSaleTimestamp;     \\n    uint256 publicSaleTimestamp;             \\n    address superAdmin;    \\n    address[] primaryDistRecipients;    \\n    uint256[] primaryDistShares;    \\n    address royaltyReceiver;    \\n    uint96 royaltyFraction;    \\n    bytes32 merkleroot;            \\n    string _baseURI;    \\n    uint256 closeDate;    \\n    uint256 minMint;\\n    uint256 startingIndex;\\n    address vrfCoordinator;\\n    uint64 s_subscriptionId;\\n    bytes32 keyHash;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    string provenanceHash;        \\n    uint256 lastRequestId;\\n  }\\n\\n  struct VRFRequest {    \\n    bool fulfilled;\\n    bool exists;\\n    bool isOffset;\\n    uint256[] randomRange;\\n    uint256[] randomWords;\\n  }\\n\\n  struct DiamondStorage {\\n    // function selector => facet address and selector position in selectors array\\n    mapping(bytes4 => FacetAddressAndSelectorPosition) facetAddressAndSelectorPosition;\\n    bytes4[] selectors;\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;  \\n    // mapping constant for avoiding future issues when adding new ProjectConfig vars\\n    uint8 INNER_STRUCT;\\n    mapping(uint8 => ProjectConfig) project;\\n    mapping(uint256 => VRFRequest) vrfRequest;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    address previousOwner = ds.contractOwner;\\n    ds.contractOwner = _newOwner;\\n    emit OwnershipTransferred(previousOwner, _newOwner);\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    if(msg.sender != diamondStorage().contractOwner && msg.sender != diamondStorage().project[INNER_STRUCT].superAdmin) {\\n      revert NotContractOwner(msg.sender, diamondStorage().contractOwner);\\n    }        \\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  // Internal function version of diamondCut\\n  function diamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n      bytes4[] memory functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n      address facetAddress = _diamondCut[facetIndex].facetAddress;\\n      if(functionSelectors.length == 0) {\\n        revert NoSelectorsProvidedForFacetForCut(facetAddress);\\n      }\\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == IDiamond.FacetCutAction.Add) {\\n        addFunctions(facetAddress, functionSelectors);\\n      } else if (action == IDiamond.FacetCutAction.Replace) {\\n        replaceFunctions(facetAddress, functionSelectors);\\n      } else if (action == IDiamond.FacetCutAction.Remove) {\\n        removeFunctions(facetAddress, functionSelectors);\\n      } else {\\n        revert IncorrectFacetCutAction(uint8(action));\\n      }\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n    if(_facetAddress == address(0)) {\\n      revert CannotAddSelectorsToZeroAddress(_functionSelectors);\\n    }\\n    DiamondStorage storage ds = diamondStorage();\\n    uint16 selectorCount = uint16(ds.selectors.length);                \\n    enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\\n      if(oldFacetAddress != address(0)) {\\n        revert CannotAddFunctionToDiamondThatAlreadyExists(selector);\\n      }            \\n      ds.facetAddressAndSelectorPosition[selector] = FacetAddressAndSelectorPosition(_facetAddress, selectorCount);\\n      ds.selectors.push(selector);\\n      selectorCount++;\\n    }\\n  }\\n\\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n    DiamondStorage storage ds = diamondStorage();\\n    if(_facetAddress == address(0)) {\\n      revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);\\n    }\\n    enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\\n      // can't replace immutable functions -- functions defined directly in the diamond in this case\\n      if(oldFacetAddress == address(this)) {\\n        revert CannotReplaceImmutableFunction(selector);\\n      }\\n      if(oldFacetAddress == _facetAddress) {\\n        revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);\\n      }\\n      if(oldFacetAddress == address(0)) {\\n        revert CannotReplaceFunctionThatDoesNotExists(selector);\\n      }\\n      // replace old facet address\\n      ds.facetAddressAndSelectorPosition[selector].facetAddress = _facetAddress;\\n    }\\n  }\\n\\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n    DiamondStorage storage ds = diamondStorage();\\n    uint256 selectorCount = ds.selectors.length;\\n    if(_facetAddress != address(0)) {\\n      revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);\\n    }        \\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      FacetAddressAndSelectorPosition memory oldFacetAddressAndSelectorPosition = ds.facetAddressAndSelectorPosition[selector];\\n      if(oldFacetAddressAndSelectorPosition.facetAddress == address(0)) {\\n        revert CannotRemoveFunctionThatDoesNotExist(selector);\\n      }            \\n      // can't remove immutable functions -- functions defined directly in the diamond\\n      if(oldFacetAddressAndSelectorPosition.facetAddress == address(this)) {\\n        revert CannotRemoveImmutableFunction(selector);\\n      }\\n      // replace selector with last selector\\n      selectorCount--;\\n      if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\\n        bytes4 lastSelector = ds.selectors[selectorCount];\\n        ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\\n        ds.facetAddressAndSelectorPosition[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition;\\n      }\\n      // delete last selector\\n      ds.selectors.pop();\\n      delete ds.facetAddressAndSelectorPosition[selector];\\n    }\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n      // bubble up error\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(error)\\n        revert(add(32, error), returndata_size)\\n      }\\n    } else {      \\n      revert InitializationFunctionReverted(_init, _calldata);\\n    }\\n    }        \\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    uint256 contractSize;\\n    assembly {\\n      contractSize := extcodesize(_contract)\\n    }\\n    if(contractSize == 0) {\\n      revert NoBytecodeAtAddress(_contract, _errorMessage);\\n    }        \\n  }    \\n}\\n\\ncontract Modifiers {     \\n\\n  modifier onlyOwner() {\\n    LibDiamond.enforceIsContractOwner();\\n    _;\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/LibSignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/***************************************************************\\\\\\n\u00a0.\u00a0\u00a0\u00a0\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0....\u00a0..\u00a0......................\u00a0.\u00a0.\u00a0.\u00a0.\u00a0\u00a0.\u00a0\u00a0\u00a0.+\\n\u00a0\u00a0\u00a0..\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0............................\u00a0...\u00a0....\u00a0\u00a0.\u00a0..\u00a0.+\\n\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0..\u00a0.......\u00a0..;@@@@@@@@@@@@@@@@@@@;........\u00a0...\u00a0.\u00a0\u00a0.\u00a0+\\n\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0...........X\u00a08@8X8X8X8X8X8X8X8X@\u00a08\u00a0\u00a0.......\u00a0..\u00a0..\u00a0.+\\n.\u00a0\u00a0..\u00a0.\u00a0.\u00a0...\u00a0...\u00a0.:..%\u00a08\u00a088@\u00a0888888888888@%..8\u00a0\u00a0.:......\u00a0.\u00a0.\u00a0\u00a0+\\n\u00a0.\u00a0\u00a0.\u00a0...\u00a0.\u00a0........:t:88888888@88888@8@888\u00a0;\u00a0\u00a0@.........\u00a0..\u00a0..+\\n.\u00a0\u00a0.\u00a0.\u00a0.\u00a0........::.%\u00a08\u00a0888@888888X888888\u00a0\u00a0.\u00a0\u00a0\u00a088:;:.:.......\u00a0.+\\n.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0.....:.:;\u00a088888888@8888888@88\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S.88:.:........\u00a0.+\\n\u00a0.\u00a0.\u00a0..\u00a0.......:.:;88\u00a0@8@8@888888@@88888.\u00a0\u00a0\u00a0.888\u00a088;.:..:.....\u00a0+\\n.\u00a0\u00a0..\u00a0.......:..:;\u00a08888888888888@88888X\u00a0:\u00a0\u00a0:Xt8\u00a08\u00a0:S:.:........+\\n\u00a0.\u00a0\u00a0.......:..:.;:8\u00a08888888%8888888888\u00a0:.\u00a0.888\u00a08\u00a088:;::::.....\u00a0+\\n\u00a0.\u00a0..\u00a0.......:::tS8@8888888@88%88888X\u00a0;.\u00a0.@.S\u00a08\u00a0\u00a0%:\u00a0\u00a08:..:.....+\\n.\u00a0.........:..::8888@S888S8888888888\u00a0;.\u00a0:88SS\u00a08t8.\u00a0\u00a0\u00a0\u00a0@::......+\\n\u00a0.\u00a0.\u00a0.....:.::.8@\u00a088\u00a0@88\u00a0@8\u00a088@\u00a088\u00a0@::\u00a0\u00a08.8\u00a08\u00a08@\u00a0\u00a0\u00a0\u00a0\u00a088:.:.....v\\n.\u00a0.\u00a0.......:.:;t8\u00a0:8\u00a08\u00a088.8\u00a08:8.:8\u00a0t8..88\u00a08\u00a08\u00a0@\u00a08\u00a0\u00a0\u00a088;::.:....+\\n..\u00a0.......:.:::;.%8\u00a0@\u00a08\u00a0@\u00a0.8:@.8\u00a0;8;8t8:X@\u00a08:8X\u00a0\u00a0\u00a0\u00a088t::::.....+\\n.\u00a0..\u00a0......:..:::t88\u00a08\u00a08\u00a08\u00a0t8\u00a0%88\u00a088.@8\u00a0@\u00a0888\u00a0X\u00a08\u00a0XX;::::.::...+\\n..........:::::::;:X:8\u00a0:8\u00a08\u00a0;8.8.8\u00a0@\u00a0:88\u00a08:@\u00a0@\u00a0\u00a0\u00a08X;::::::.:...+\\n\u00a0\u00a0.\u00a0.......:.:::::;\u00a08\u00a08.:8\u00a08\u00a0t8:8\u00a08\u00a08.;88\u00a0XX\u00a0\u00a08\u00a088t;:::::......+\\n..\u00a0.......:.:.:::::;\u00a0@:8.;8\u00a08.t8\u00a08\u00a0tt8.%8@.\u00a08\u00a0\u00a088t;:;::::.:....+\\n\u00a0...\u00a0....:.:.:.::;::;\u00a08:8\u00a0;8\u00a08\u00a0t8\u00a08:8\u00a08.t8S.\u00a0888;;:;::::.:..:..+\\n.\u00a0\u00a0........::::::::;:;.t\u00a08\u00a0;8\u00a08\u00a0;88:;8.8\u00a0;88\u00a088S:::::::.:.:....+\\n\u00a0..\u00a0..\u00a0.....:.:.:::::;;\u00a0888X8S8\u00a0X@XSSS88\u00a0888X:t;;;::::::.:.....+\\n\u00a0..\u00a0........:..:::::;::;%;:\u00a0\u00a0\u00a0.t.\u00a0;ttS:;t.\u00a0.\u00a0\u00a0:;;:;:::.::......+\\n\u00a0.\u00a0.\u00a0......:.:..::::::;;;t;;:;;;;;;;;t;;;;;::\u00a0:;:;:::.:........+\\n/***************************************************************/\\n\\nlibrary LibSignature {\\n\\n  function recoverSigner(\\n    bytes32 _ethSignedMessageHash,\\n    bytes memory _signature\\n  ) internal pure returns (address) {        \\n    (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);    \\n    return ecrecover(_ethSignedMessageHash, v, r, s);\\n  }\\n\\n  function splitSignature(\\n    bytes memory sig\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n    require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n    assembly {\\n      /*\\n      First 32 bytes stores the length of the signature\\n\\n      add(sig, 32) = pointer of sig + 32\\n      effectively, skips first 32 bytes of signature\\n\\n      mload(p) loads next 32 bytes starting at the memory address p into memory\\n      */\\n\\n      // first 32 bytes, after the length prefix\\n      r := mload(add(sig, 32))\\n      // second 32 bytes\\n      s := mload(add(sig, 64))\\n      // final byte (first byte of the next 32 bytes)\\n      v := byte(0, mload(add(sig, 96)))\\n    }\\n\\n    // implicitly return (r, s, v)\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/LibUpdates.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/***************************************************************\\\\\\n\u00a0.\u00a0\u00a0\u00a0\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0.\u00a0....\u00a0..\u00a0......................\u00a0.\u00a0.\u00a0.\u00a0.\u00a0\u00a0.\u00a0\u00a0\u00a0.+\\n\u00a0\u00a0\u00a0..\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0............................\u00a0...\u00a0....\u00a0\u00a0.\u00a0..\u00a0.+\\n\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0..\u00a0.......\u00a0..;@@@@@@@@@@@@@@@@@@@;........\u00a0...\u00a0.\u00a0\u00a0.\u00a0+\\n\u00a0\u00a0.\u00a0\u00a0\u00a0.\u00a0\u00a0..\u00a0...........X\u00a08@8X8X8X8X8X8X8X8X@\u00a08\u00a0\u00a0.......\u00a0..\u00a0..\u00a0.+\\n.\u00a0\u00a0..\u00a0.\u00a0.\u00a0...\u00a0...\u00a0.:..%\u00a08\u00a088@\u00a0888888888888@%..8\u00a0\u00a0.:......\u00a0.\u00a0.\u00a0\u00a0+\\n\u00a0.\u00a0\u00a0.\u00a0...\u00a0.\u00a0........:t:88888888@88888@8@888\u00a0;\u00a0\u00a0@.........\u00a0..\u00a0..+\\n.\u00a0\u00a0.\u00a0.\u00a0.\u00a0........::.%\u00a08\u00a0888@888888X888888\u00a0\u00a0.\u00a0\u00a0\u00a088:;:.:.......\u00a0.+\\n.\u00a0\u00a0\u00a0.\u00a0..\u00a0.\u00a0.....:.:;\u00a088888888@8888888@88\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S.88:.:........\u00a0.+\\n\u00a0.\u00a0.\u00a0..\u00a0.......:.:;88\u00a0@8@8@888888@@88888.\u00a0\u00a0\u00a0.888\u00a088;.:..:.....\u00a0+\\n.\u00a0\u00a0..\u00a0.......:..:;\u00a08888888888888@88888X\u00a0:\u00a0\u00a0:Xt8\u00a08\u00a0:S:.:........+\\n\u00a0.\u00a0\u00a0.......:..:.;:8\u00a08888888%8888888888\u00a0:.\u00a0.888\u00a08\u00a088:;::::.....\u00a0+\\n\u00a0.\u00a0..\u00a0.......:::tS8@8888888@88%88888X\u00a0;.\u00a0.@.S\u00a08\u00a0\u00a0%:\u00a0\u00a08:..:.....+\\n.\u00a0.........:..::8888@S888S8888888888\u00a0;.\u00a0:88SS\u00a08t8.\u00a0\u00a0\u00a0\u00a0@::......+\\n\u00a0.\u00a0.\u00a0.....:.::.8@\u00a088\u00a0@88\u00a0@8\u00a088@\u00a088\u00a0@::\u00a0\u00a08.8\u00a08\u00a08@\u00a0\u00a0\u00a0\u00a0\u00a088:.:.....v\\n.\u00a0.\u00a0.......:.:;t8\u00a0:8\u00a08\u00a088.8\u00a08:8.:8\u00a0t8..88\u00a08\u00a08\u00a0@\u00a08\u00a0\u00a0\u00a088;::.:....+\\n..\u00a0.......:.:::;.%8\u00a0@\u00a08\u00a0@\u00a0.8:@.8\u00a0;8;8t8:X@\u00a08:8X\u00a0\u00a0\u00a0\u00a088t::::.....+\\n.\u00a0..\u00a0......:..:::t88\u00a08\u00a08\u00a08\u00a0t8\u00a0%88\u00a088.@8\u00a0@\u00a0888\u00a0X\u00a08\u00a0XX;::::.::...+\\n..........:::::::;:X:8\u00a0:8\u00a08\u00a0;8.8.8\u00a0@\u00a0:88\u00a08:@\u00a0@\u00a0\u00a0\u00a08X;::::::.:...+\\n\u00a0\u00a0.\u00a0.......:.:::::;\u00a08\u00a08.:8\u00a08\u00a0t8:8\u00a08\u00a08.;88\u00a0XX\u00a0\u00a08\u00a088t;:::::......+\\n..\u00a0.......:.:.:::::;\u00a0@:8.;8\u00a08.t8\u00a08\u00a0tt8.%8@.\u00a08\u00a0\u00a088t;:;::::.:....+\\n\u00a0...\u00a0....:.:.:.::;::;\u00a08:8\u00a0;8\u00a08\u00a0t8\u00a08:8\u00a08.t8S.\u00a0888;;:;::::.:..:..+\\n.\u00a0\u00a0........::::::::;:;.t\u00a08\u00a0;8\u00a08\u00a0;88:;8.8\u00a0;88\u00a088S:::::::.:.:....+\\n\u00a0..\u00a0..\u00a0.....:.:.:::::;;\u00a0888X8S8\u00a0X@XSSS88\u00a0888X:t;;;::::::.:.....+\\n\u00a0..\u00a0........:..:::::;::;%;:\u00a0\u00a0\u00a0.t.\u00a0;ttS:;t.\u00a0.\u00a0\u00a0:;;:;:::.::......+\\n\u00a0.\u00a0.\u00a0......:.:..::::::;;;t;;:;;;;;;;;t;;;;;::\u00a0:;:;:::.:........+\\n/***************************************************************/\\n\\nimport { LibDiamond } from \\\"./LibDiamond.sol\\\";\\nimport { LibSignature } from \\\"./LibSignature.sol\\\";\\n\\nlibrary LibUpdates {\\n  \\n  bytes32 constant STORAGE_SLOT = keccak256(\\\"diamond.standard.diamond.updates\\\");      \\n\\n  struct Layout {    \\n    mapping(bytes32 => uint256) claimedSignatures;\\n  }            \\n\\n  function layout() internal pure returns (Layout storage l) {\\n    bytes32 position = STORAGE_SLOT;\\n    assembly {\\n      l.slot := position\\n    }\\n  }\\n\\n  function getMessageHash(\\n    string memory updateId, \\n    string memory collectionId, \\n    string memory id,\\n    uint8 updateType\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(updateId, collectionId, id, updateType));\\n  }\\n\\n  function getEthSignedMessageHash(\\n    bytes32 _messageHash\\n  ) internal pure returns (bytes32) {\\n    /*\\n    Signature is produced by signing a keccak256 hash with the following format:\\n    \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n    */\\n    return\\n      keccak256(\\n        abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\n      );\\n    }\\n  \\n  function verify(\\n    address _signer,\\n    string memory updateId, \\n    string memory collectionId, \\n    string memory id,\\n    uint8 updateType,\\n    bytes memory signature\\n  ) internal returns (bool) {    \\n    bytes32 messageHash = getMessageHash(updateId, collectionId, id, updateType);\\n    bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);     \\n    return LibSignature.recoverSigner(ethSignedMessageHash, signature) == _signer;\\n  }\\n\\n  function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n    assembly {\\n      addr := mload(add(bys,32))\\n    } \\n  }\\n\\n  function checkTokenIdOwnership(address owner, uint256 tokenId) internal returns (string memory){\\n    LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n    bytes4 functionSelector = bytes4(keccak256(\\\"ownerOf(uint256)\\\"));        \\n    LibDiamond.FacetAddressAndSelectorPosition  memory facet = ds.facetAddressAndSelectorPosition[functionSelector];     \\n    bytes memory functionCall = abi.encodeWithSelector(functionSelector, tokenId);    \\n    (bool success, bytes memory result) = address(facet.facetAddress).delegatecall(functionCall);\\n    require(success == true, \\\"function failed\\\");     \\n    require(bytesToAddress(result) == owner, \\\"not token owner\\\"); \\n    return '';\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\nimport {SignedMath} from \\\"./SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"updateType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"updateId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenOrGroupId\",\"type\":\"string\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LAYERED_UPDATE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STANDARD_UPDATE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"updateId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"layeredUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"updateId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"}],\"name\":\"standardUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UpdateFacet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}