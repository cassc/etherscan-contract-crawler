{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Proposal_230906_01_Scoring_Update.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport {IMasterVault} from \\\"src/interfaces/IMasterVault.sol\\\";\\nimport {IProposal} from \\\"src/interfaces/IProposal.sol\\\";\\n\\n/// @title This proposal sets new scores for all networks and rebalances 5% of total TVL from Ethereum to Polygon\\ncontract Proposal_230906_01_Scoring_Update is IProposal\\n{\\n\\tfunction execute() external\\n\\t{\\n\\t\\tIMasterVault masterVault = IMasterVault(0x66A3188a218c4fA5a151FE6cDefe7ffE59606304);\\n\\n\\t\\t// Set new score for Arbitrum network.\\n\\t\\tuint256[] memory chainIds = new uint256[](4);\\n\\t\\tuint256[] memory scores = new uint256[](4);\\n\\t\\tchainIds[0] = 1;\\n\\t\\tscores[0] = 300;\\n\\t\\tchainIds[1] = 137;\\n\\t\\tscores[1] = 300;\\n\\t\\tchainIds[2] = 1284;\\n\\t\\tscores[2] = 250;\\n\\t\\tchainIds[3] = 42161;\\n\\t\\tscores[3] = 150;\\n\\n\\t\\tmasterVault.updateScores(chainIds, scores);\\n\\n\\t\\t// Current share of Ethereum is 35%, 5%/35%=14.3%\\n\\t\\tmasterVault.rebalance(1, 137, 143, 1);\\n\\t}\\n}\"\r\n    },\r\n    \"src/interfaces/IMasterVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface IMasterVault {\\n    event ActionCompleted();\\n    event ActionQueued(uint256 amountIn, uint8 actionType);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Deposit(\\n        address indexed who,\\n        address indexed receiver,\\n        address indexed asset,\\n        uint256 numberOfAssets,\\n        uint256 numberOfShares,\\n        uint256 pricePerToken,\\n        uint256 opId\\n    );\\n    event OperationCompleted(uint256 opId);\\n    event OperationQueued(uint256 opId);\\n    event OperationStarted(uint256 opId);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event ScoringUpdated(uint256 chainId, uint256 score);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Withdrawal(\\n        address indexed who,\\n        address indexed receiver,\\n        address indexed asset,\\n        uint256 numberOfAssets,\\n        uint256 numberOfShares,\\n        uint256 pricePerToken,\\n        uint256 opId\\n    );\\n\\n    struct RootVaultAction {\\n        uint8 actionType;\\n        uint8 slippage;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n    }\\n\\n    struct CallData {\\n        address to;\\n        bytes data;\\n        uint256 value;\\n    }\\n\\n    function addChain(uint256 chainId, uint16 lzChainId, address remoteVaultAddress) external;\\n    function addToken(address token) external;\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function assetConverter() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function bridgeAdapterToChainId(address) external view returns (uint256);\\n    function bridgeAdapters(uint256) external view returns (address);\\n    function burn(uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n    function call(CallData[] memory calls) external;\\n    function canNewOperationBeProcessedInstantly() external view returns (bool);\\n    function chainIdToLzChainId(uint256) external view returns (uint16);\\n    function currentAction() external view returns (RootVaultAction memory);\\n    function decimals() external view returns (uint8);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function deposit(address asset, uint256 value, address beneficiary, uint8 slippage) external;\\n    function dropCurrentAction(bool finalize) external;\\n    function dropCurrentOperation() external;\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function isActionInProgress() external view returns (bool);\\n    function isQueueBusy() external view returns (bool);\\n    function isQueueEmpty() external view returns (bool);\\n    function isTransferExpected(bytes32) external view returns (bool);\\n    function lzEndpoint() external view returns (address);\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) external;\\n    function mainAsset() external view returns (address);\\n    function minSlippageProvider() external view returns (address);\\n    function name() external view returns (string memory);\\n    function operations(uint256) external view returns (uint8 opType, bytes memory params, bool isInitialized);\\n    function operationsQueue() external view returns (uint256 nextOperation, uint256 currentOperation);\\n    function owner() external view returns (address);\\n    function portfolioScore(uint256) external view returns (uint256);\\n    function processAction(uint256 amountToProcess) external returns (bool isExecutedCompletly);\\n    function rebalance(uint256 srcChainId, uint256 dstChainId, uint256 shareToRebalance, uint8 slippage) external;\\n    function rebalancer() external view returns (address);\\n    function redeem(address asset, uint256 shares, address beneficiary, uint8 slippage) external payable;\\n    function redeemIdToAssetsTransferred(uint256) external view returns (uint256);\\n    function removeChain(uint256 chainId) external;\\n    function removeToken(address token) external;\\n    function renounceOwnership() external;\\n    function rootVault() external view returns (address);\\n    function setNewMinSlippageProvider(address newProvider) external;\\n    function setNewNextOperation(uint256 newNextOperation) external;\\n    function setNewRebalancer(address newRebalancer) external;\\n    function startNextOperation() external payable;\\n    function symbol() external view returns (string memory);\\n    function totalAssets() external view returns (uint256 assets);\\n    function totalAssetsAfterDeposit(uint256) external view returns (uint256);\\n    function totalAssetsBeforeDeposit(uint256) external view returns (uint256);\\n    function totalPortfolioScore() external view returns (uint256 score);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferCompleted(bytes32 transferId, uint256 value, uint8 slippage) external;\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function transferOwnership(address newOwner) external;\\n    function trustedRemotes(uint16) external view returns (bytes memory);\\n    function updateBridgeAdapter(uint256 chainId, address bridgeAdapter) external;\\n    function updateScores(uint256[] memory chains, uint256[] memory scores) external;\\n}\"\r\n    },\r\n    \"src/interfaces/IProposal.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface IProposal {\\n    function execute() external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Proposal_230906_01_Scoring_Update", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}