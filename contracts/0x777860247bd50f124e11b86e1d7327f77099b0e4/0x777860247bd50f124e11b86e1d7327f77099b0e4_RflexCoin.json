{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard Burnable Token\r\n * @dev Adds burnFrom method to ERC20 implementations\r\n */\r\n\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _burn(_from, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n/**\r\n * @title RflexCoin token\r\n **/\r\n contract RflexCoin is StandardBurnableToken, PausableToken {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"Rflexcoin\";\r\n    string public constant symbol = \"RFC\";\r\n    uint8 public constant decimals = 8;\r\n    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals));\r\n\r\n    struct lockedUserInfo{\r\n        address lockedUserAddress;\r\n        uint firstUnlockTime;\r\n        uint secondUnlockTime;\r\n        uint thirdUnlockTime;\r\n        uint256 firstUnlockValue;\r\n        uint256 secondUnlockValue;\r\n        uint256 thirdUnlockValue;\r\n    }\r\n\r\n    mapping(address => lockedUserInfo) private lockedUserEntity;\r\n    mapping(address => bool) private supervisorEntity;\r\n    mapping(address => bool) private lockedWalletEntity;\r\n\r\n    modifier onlySupervisor() {\r\n        require(owner == msg.sender || supervisorEntity[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    event Unlock(\r\n        address indexed lockedUser,\r\n        uint lockPeriod,\r\n        uint256 firstUnlockValue,\r\n        uint256 secondUnlockValueUnlockValue,\r\n        uint256 thirdUnlockValue\r\n    );\r\n\r\n    event PrintLog(\r\n        address indexed sender,\r\n        string _logName,\r\n        uint256 _value\r\n    );\r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {\r\n        require(!isLockedWalletEntity(msg.sender));\r\n        require(msg.sender != _to,\"Check your address!!\");\r\n\r\n        uint256 availableValue = getAvailableWithdrawableCount(msg.sender, _value);\r\n        emit PrintLog(_to, \"availableResultValue\", availableValue);\r\n        require(availableValue > 0);\r\n\r\n        return super.transfer(_to, availableValue);\r\n    }\r\n\r\n    function burn(uint256 _value) onlySupervisor public {\r\n        super._burn(msg.sender, _value);\r\n    }\r\n\r\n    function transferToLockedBalance(\r\n        address _to,\r\n        uint _firstUnlockTime,\r\n        uint256 _firstUnlockValue,\r\n        uint _secondUnlockTime,\r\n        uint256 _secondUnlockValue,\r\n        uint _thirdUnlockTime,\r\n        uint256 _thirdUnlockValue\r\n    ) onlySupervisor whenNotPaused public returns (bool) {\r\n        require(msg.sender != _to,\"Check your address!!\");\r\n        require(_firstUnlockTime > now && _firstUnlockValue > 0, \"Check your First input values!!;\");\r\n\r\n        uint256 totalLockSendCount = totalLockSendCount.add(_firstUnlockValue);\r\n\r\n        if(_secondUnlockTime > now && _secondUnlockValue > 0){\r\n            require(_secondUnlockTime > _firstUnlockTime, \"Second Unlock time must be greater than First Unlock Time!!\");\r\n\r\n            totalLockSendCount = totalLockSendCount.add(_secondUnlockValue);\r\n        }\r\n\r\n        if(_thirdUnlockTime > now && _thirdUnlockValue > 0){\r\n            require(_thirdUnlockTime > _secondUnlockTime && _secondUnlockTime > now &&  _secondUnlockValue > 0,\r\n                    \"Check your third Unlock Time or Second input values!!\");\r\n            totalLockSendCount = totalLockSendCount.add(_thirdUnlockValue);\r\n        }\r\n\r\n        if (transfer(_to, totalLockSendCount)) {\r\n            lockedUserEntity[_to].lockedUserAddress = _to;\r\n            lockedUserEntity[_to].firstUnlockTime = _firstUnlockTime;\r\n            lockedUserEntity[_to].firstUnlockValue = _firstUnlockValue;\r\n\r\n            if(_secondUnlockTime > now && _secondUnlockValue > 0){\r\n                lockedUserEntity[_to].secondUnlockTime = _secondUnlockTime;\r\n                lockedUserEntity[_to].secondUnlockValue = _secondUnlockValue;\r\n            }\r\n\r\n            if(_thirdUnlockTime > now && _thirdUnlockValue > 0){\r\n                lockedUserEntity[_to].thirdUnlockTime  = _thirdUnlockTime;\r\n                lockedUserEntity[_to].thirdUnlockValue = _thirdUnlockValue;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function setLockTime(address _to, uint _time, uint256 _lockTime) onlySupervisor public returns(bool){\r\n        require(_to !=address(0) && _time > 0 && _time < 4 && _lockTime > now);\r\n\r\n        (   uint firstUnlockTime,\r\n            uint secondUnlockTime,\r\n            uint thirdUnlockTime\r\n        ) = getLockedTimeUserInfo(_to);\r\n\r\n        if(_time == 1 && firstUnlockTime !=0){\r\n            if(secondUnlockTime ==0 || _lockTime < secondUnlockTime){\r\n                lockedUserEntity[_to].firstUnlockTime = _lockTime;\r\n                return true;\r\n            }\r\n        }else if(_time == 2 && secondUnlockTime !=0){\r\n            if(_lockTime > firstUnlockTime && (thirdUnlockTime ==0 || _lockTime < thirdUnlockTime)){\r\n                lockedUserEntity[_to].secondUnlockTime = _lockTime;\r\n                return true;\r\n            }\r\n        }else if(_time == 3 && thirdUnlockTime !=0 && _lockTime > secondUnlockTime){\r\n            lockedUserEntity[_to].thirdUnlockTime = _lockTime;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getLockedUserInfo(address _address) view public returns (uint,uint256,uint,uint256,uint,uint256){\r\n        require(msg.sender == _address || msg.sender == owner || supervisorEntity[msg.sender]);\r\n        return (\r\n                    lockedUserEntity[_address].firstUnlockTime,\r\n                    lockedUserEntity[_address].firstUnlockValue,\r\n                    lockedUserEntity[_address].secondUnlockTime,\r\n                    lockedUserEntity[_address].secondUnlockValue,\r\n                    lockedUserEntity[_address].thirdUnlockTime,\r\n                    lockedUserEntity[_address].thirdUnlockValue\r\n                );\r\n    }\r\n\r\n    function setSupervisor(address _address) onlyOwner public returns (bool){\r\n        require(_address !=address(0) && !supervisorEntity[_address]);\r\n        supervisorEntity[_address] = true;\r\n        emit PrintLog(_address, \"isSupervisor\",  1);\r\n        return true;\r\n    }\r\n\r\n    function removeSupervisor(address _address) onlyOwner public returns (bool){\r\n        require(_address !=address(0) && supervisorEntity[_address]);\r\n        delete supervisorEntity[_address];\r\n        emit PrintLog(_address, \"isSupervisor\",  0);\r\n        return true;\r\n    }\r\n\r\n    function setLockedWalletEntity(address _address) onlySupervisor public returns (bool){\r\n        require(_address !=address(0) && !lockedWalletEntity[_address]);\r\n        lockedWalletEntity[_address] = true;\r\n        emit PrintLog(_address, \"isLockedWalletEntity\",  1);\r\n        return true;\r\n    }\r\n\r\n    function removeLockedWalletEntity(address _address) onlySupervisor public returns (bool){\r\n        require(_address !=address(0) && lockedWalletEntity[_address]);\r\n        delete lockedWalletEntity[_address];\r\n        emit PrintLog(_address, \"isLockedWalletEntity\",  0);\r\n        return true;\r\n    }\r\n\r\n    function getLockedTimeUserInfo(address _address) view private returns (uint,uint,uint){\r\n        require(msg.sender == _address || msg.sender == owner || supervisorEntity[msg.sender]);\r\n        return (\r\n                    lockedUserEntity[_address].firstUnlockTime,\r\n                    lockedUserEntity[_address].secondUnlockTime,\r\n                    lockedUserEntity[_address].thirdUnlockTime\r\n                );\r\n    }\r\n\r\n    function isSupervisor() view onlyOwner private returns (bool){\r\n        return supervisorEntity[msg.sender];\r\n    }\r\n\r\n    function isLockedWalletEntity(address _from) view private returns (bool){\r\n        return lockedWalletEntity[_from];\r\n    }\r\n\r\n    function getAvailableWithdrawableCount( address _from , uint256 _sendOrgValue) private returns (uint256) {\r\n        uint256 availableValue = 0;\r\n\r\n        if(lockedUserEntity[_from].lockedUserAddress == address(0)){\r\n            availableValue = _sendOrgValue;\r\n        }else{\r\n                (\r\n                    uint firstUnlockTime, uint256 firstUnlockValue,\r\n                    uint secondUnlockTime, uint256 secondUnlockValue,\r\n                    uint thirdUnlockTime, uint256 thirdUnlockValue\r\n                ) = getLockedUserInfo(_from);\r\n\r\n                if(now < firstUnlockTime) {\r\n                    availableValue = balances[_from].sub(firstUnlockValue.add(secondUnlockValue).add(thirdUnlockValue));\r\n                    if(_sendOrgValue > availableValue){\r\n                        availableValue = 0;\r\n                    }else{\r\n                        availableValue = _sendOrgValue;\r\n                    }\r\n                }else if(firstUnlockTime <= now && secondUnlockTime ==0){\r\n                    availableValue = balances[_from];\r\n                    if(_sendOrgValue > availableValue){\r\n                        availableValue = 0;\r\n                    }else{\r\n                        availableValue = _sendOrgValue;\r\n                        delete lockedUserEntity[_from];\r\n                        emit Unlock(_from, 1, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\r\n                    }\r\n                }else if(firstUnlockTime <= now && secondUnlockTime !=0 && now < secondUnlockTime){\r\n                    availableValue = balances[_from].sub(secondUnlockValue.add(thirdUnlockValue));\r\n                    if(_sendOrgValue > availableValue){\r\n                        availableValue = 0;\r\n                    }else{\r\n                        availableValue = _sendOrgValue;\r\n                        lockedUserEntity[_from].firstUnlockValue = 0;\r\n                        emit Unlock(_from, 1, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\r\n                    }\r\n                }else if(secondUnlockTime !=0 && secondUnlockTime <= now && thirdUnlockTime ==0){\r\n                    availableValue = balances[_from];\r\n                    if(_sendOrgValue > availableValue){\r\n                        availableValue = 0;\r\n                    }else{\r\n                        availableValue =_sendOrgValue;\r\n                        delete lockedUserEntity[_from];\r\n                        emit Unlock(_from, 2, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\r\n                    }\r\n                }else if(secondUnlockTime !=0 && secondUnlockTime <= now && thirdUnlockTime !=0 && now < thirdUnlockTime){\r\n                    availableValue = balances[_from].sub(thirdUnlockValue);\r\n                    if(_sendOrgValue > availableValue){\r\n                        availableValue = 0;\r\n                    }else{\r\n                        availableValue = _sendOrgValue;\r\n                        lockedUserEntity[_from].firstUnlockValue = 0;\r\n                        lockedUserEntity[_from].secondUnlockValue = 0;\r\n                        emit Unlock(_from, 2, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\r\n                    }\r\n                }else if(thirdUnlockTime !=0 && thirdUnlockTime <= now){\r\n                    availableValue = balances[_from];\r\n                    if(_sendOrgValue > availableValue){\r\n                        availableValue = 0;\r\n                    }else if(_sendOrgValue <= availableValue){\r\n                        availableValue = _sendOrgValue;\r\n                        delete lockedUserEntity[_from];\r\n                        emit Unlock(_from, 3, firstUnlockValue, secondUnlockValue, thirdUnlockValue);\r\n                    }\r\n                }\r\n        }\r\n        return availableValue;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSupervisor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockedUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupervisor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeLockedWalletEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLockedWalletEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_firstUnlockTime\",\"type\":\"uint256\"},{\"name\":\"_firstUnlockValue\",\"type\":\"uint256\"},{\"name\":\"_secondUnlockTime\",\"type\":\"uint256\"},{\"name\":\"_secondUnlockValue\",\"type\":\"uint256\"},{\"name\":\"_thirdUnlockTime\",\"type\":\"uint256\"},{\"name\":\"_thirdUnlockValue\",\"type\":\"uint256\"}],\"name\":\"transferToLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"firstUnlockValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"secondUnlockValueUnlockValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"thirdUnlockValue\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_logName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PrintLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "RflexCoin", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8e1d171ab16be4f9f1baddb1f94ba0c53418ac8fb372277670430812f5fd1076"}