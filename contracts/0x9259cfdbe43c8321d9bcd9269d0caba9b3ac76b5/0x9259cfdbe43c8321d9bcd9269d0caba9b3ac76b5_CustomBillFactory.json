{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@ape.swap/contracts/contracts/v0.8/access/PendingOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PendingOwnable is Ownable {\\n    address private _pendingOwner;\\n\\n    event SetPendingOwner(address indexed pendingOwner);\\n\\n    constructor() Ownable() {}\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev This function is disabled to in place of setPendingOwner()\\n     */\\n    function transferOwnership(\\n        address /*newOwner*/\\n    ) public view override onlyOwner {\\n        revert(\\\"PendingOwnable: MUST setPendingOwner()\\\");\\n    }\\n\\n    /**\\n     * @dev Sets an account as the pending owner (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setPendingOwner(address newPendingOwner) public virtual onlyOwner {\\n        _pendingOwner = newPendingOwner;\\n        emit SetPendingOwner(_pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership to the pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(msg.sender == _pendingOwner, \\\"PendingOwnable: MUST be pendingOwner\\\");\\n        _pendingOwner = address(0);\\n        _transferOwnership(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CustomBillFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/*\\n  ______                       _______                             __ \\n /      \\\\                     |       \\\\                           |  \\\\\\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  ______    ______  | \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\\  ______   _______    ____| \u2593\u2593\\n| \u2593\u2593__| \u2593\u2593 /      \\\\  /      \\\\ | \u2593\u2593__/ \u2593\u2593 /      \\\\ |       \\\\  /      \u2593\u2593\\n| \u2593\u2593    \u2593\u2593|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\| \u2593\u2593    \u2593\u2593|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\\|  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593| \u2593\u2593  | \u2593\u2593| \u2593\u2593    \u2593\u2593| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\\| \u2593\u2593  | \u2593\u2593| \u2593\u2593  | \u2593\u2593| \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593| \u2593\u2593__/ \u2593\u2593| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593| \u2593\u2593__/ \u2593\u2593| \u2593\u2593__/ \u2593\u2593| \u2593\u2593  | \u2593\u2593| \u2593\u2593__| \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593| \u2593\u2593    \u2593\u2593 \\\\\u2593\u2593     \\\\| \u2593\u2593    \u2593\u2593 \\\\\u2593\u2593    \u2593\u2593| \u2593\u2593  | \u2593\u2593 \\\\\u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593| \u2593\u2593\u2593\u2593\u2593\u2593\u2593   \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593   \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593   \\\\\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n          | \u2593\u2593                                                        \\n          | \u2593\u2593                                                        \\n           \\\\\u2593\u2593                                                         \\n * App:             https://Ape.Bond\\n * Medium:          https://ApeBond.medium.com\\n * Twitter:         https://twitter.com/ApeBond\\n * Telegram:        https://t.me/ape_bond\\n * Announcements:   https://t.me/ApeBond_news\\n * Discord:         https://ApeBond.click/discord\\n * Reddit:          https://ApeBond.click/reddit\\n * Instagram:       https://instagram.com/ape.bond\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"./CustomBillFactoryBase.sol\\\";\\n\\ncontract CustomBillFactory is CustomBillFactoryBase {\\n    constructor(\\n        BillDefaultConfig memory _billDefaultConfig,\\n        ICustomBill.BillAccounts memory _defaultBillAccounts,\\n        address _factoryStorage,\\n        address _billImplementationAddress,\\n        address _treasuryImplementationAddress,\\n        address[] memory _billCreators\\n    )\\n        CustomBillFactoryBase(\\n            _billDefaultConfig,\\n            _defaultBillAccounts,\\n            _factoryStorage,\\n            _billImplementationAddress,\\n            _treasuryImplementationAddress,\\n            _billCreators\\n        )\\n    {}\\n\\n    /* ======== FACTORY FUNCTIONS ======== */\\n\\n    /**\\n        @notice deploys ICustomTreasury and ICustomBill contracts and returns address of both\\n        @param _billCreationDetails ICustomBill.BillCreationDetails\\n        @param _billTerms ICustomBill.BillTerms\\n     */\\n    function createBillAndTreasury(\\n        ICustomBill.BillCreationDetails calldata _billCreationDetails,\\n        ICustomBill.BillTerms calldata _billTerms\\n    )\\n        external\\n        onlyRole(BILL_CREATOR_ROLE)\\n        returns (ICustomTreasury _customTreasury, ICustomBill _bill)\\n    {\\n        _customTreasury = _createTreasuryWithDefaults(\\n            _billCreationDetails.payoutToken,\\n            _billCreationDetails.initialOwner\\n        );\\n\\n        return\\n            _createBillWithDefaults(\\n                _billCreationDetails,\\n                _billTerms,\\n                _customTreasury\\n            );\\n    }\\n\\n    /**\\n        @notice deploys ICustomBill contract\\n        @param _billCreationDetails ICustomBill.BillCreationDetails\\n        @param _billTerms ICustomBill.BillTerms\\n        @param _customTreasury address of ICustomTreasury linked to this bill\\n     */\\n    function createBill(\\n        ICustomBill.BillCreationDetails calldata _billCreationDetails,\\n        ICustomBill.BillTerms calldata _billTerms,\\n        ICustomTreasury _customTreasury\\n    )\\n        external\\n        onlyRole(BILL_CREATOR_ROLE)\\n        returns (ICustomTreasury _treasury, ICustomBill _bill)\\n    {\\n        return\\n            _createBillWithDefaults(\\n                _billCreationDetails,\\n                _billTerms,\\n                _customTreasury\\n            );\\n    }\\n\\n    /**\\n        @notice deploys ICustomTreasury and ICustomBill contracts\\n        @param _billCreationDetails ICustomBill.BillCreationDetails\\n        @param _billTerms ICustomBill.BillTerms\\n        @param _payoutAddress account which receives deposited tokens\\n        @param _billRefillers accounts allowed to refill the Treasury Bill contract with payout tokens\\n     */\\n    function createBillAndTreasury_CustomConfig(\\n        ICustomBill.BillCreationDetails calldata _billCreationDetails,\\n        ICustomBill.BillTerms calldata _billTerms,\\n        ICustomBill.BillAccounts calldata _billAccounts,\\n        address _payoutAddress,\\n        address[] calldata _billRefillers\\n    )\\n        external\\n        onlyRole(BILL_CREATOR_ROLE)\\n        returns (ICustomTreasury _customTreasury, ICustomBill _bill)\\n    {\\n        _customTreasury = _createTreasury(\\n            _billCreationDetails.payoutToken,\\n            _billCreationDetails.initialOwner,\\n            _payoutAddress\\n        );\\n\\n        return\\n            _createBill(\\n                _billCreationDetails,\\n                _billTerms,\\n                _billAccounts,\\n                _customTreasury,\\n                _billRefillers\\n            );\\n    }\\n\\n    /**\\n        @notice deploys ICustomBill contract\\n        @param _billCreationDetails ICustomBill.BillCreationDetails\\n        @param _billTerms ICustomBill.BillTerms\\n        @param _customTreasury address of ICustomTreasury linked to this bill\\n        @param _billRefillers accounts allowed to refill the Treasury Bill contract with payout tokens\\n     */\\n    function createBill_CustomConfig(\\n        ICustomBill.BillCreationDetails calldata _billCreationDetails,\\n        ICustomBill.BillTerms calldata _billTerms,\\n        ICustomBill.BillAccounts calldata _billAccounts,\\n        ICustomTreasury _customTreasury,\\n        address[] calldata _billRefillers\\n    )\\n        external\\n        onlyRole(BILL_CREATOR_ROLE)\\n        returns (ICustomTreasury _treasury, ICustomBill _bill)\\n    {\\n        return\\n            _createBill(\\n                _billCreationDetails,\\n                _billTerms,\\n                _billAccounts,\\n                _customTreasury,\\n                _billRefillers\\n            );\\n    }\\n\\n    /**\\n        @notice deploys ICustomTreasury contract\\n     */\\n    function createTreasury_CustomConfig(\\n        address _payoutToken,\\n        address _initialOwner,\\n        address _payoutAddress\\n    )\\n        external\\n        onlyRole(BILL_CREATOR_ROLE)\\n        returns (ICustomTreasury _customTreasury)\\n    {\\n        return _createTreasury(_payoutToken, _initialOwner, _payoutAddress);\\n    }\\n\\n    /* ======== MANUAL FUNCTIONS ======== */\\n\\n    /**\\n        @notice deploys ICustomTreasury and ICustomBill contracts and returns address of both\\n     */\\n    function createBillAndTreasury_Explorer(\\n        address _payoutToken,\\n        address _principalToken,\\n        address _initialOwner,\\n        IVestingCurve _vestingCurve,\\n        uint256[] calldata _tierCeilings,\\n        uint256[] calldata _fees,\\n        uint256 _startVestingTimestamp,\\n        bool _feeInPayout,\\n        ICustomBill.BillTerms calldata _billTerms\\n    )\\n        external\\n        onlyRole(BILL_CREATOR_ROLE)\\n        returns (ICustomTreasury _customTreasury, ICustomBill _bill)\\n    {\\n        ICustomBill.BillCreationDetails\\n            memory billCreationDetails = getBillCreationDetails(\\n                _payoutToken,\\n                _principalToken,\\n                _initialOwner,\\n                _vestingCurve,\\n                _tierCeilings,\\n                _fees,\\n                _startVestingTimestamp,\\n                _feeInPayout\\n            );\\n\\n        _customTreasury = _createTreasuryWithDefaults(\\n            billCreationDetails.payoutToken,\\n            billCreationDetails.initialOwner\\n        );\\n        return\\n            _createBillWithDefaults(\\n                billCreationDetails,\\n                _billTerms,\\n                _customTreasury\\n            );\\n    }\\n\\n    /**\\n        @notice deploys ICustomBill contract\\n     */\\n    function createBill_Explorer(\\n        address _payoutToken,\\n        address _principalToken,\\n        address _initialOwner,\\n        IVestingCurve _vestingCurve,\\n        uint256[] calldata _tierCeilings,\\n        uint256[] calldata _fees,\\n        uint256 _startVestingTimestamp,\\n        bool _feeInPayout,\\n        ICustomBill.BillTerms calldata _billTerms,\\n        ICustomTreasury _customTreasury\\n    )\\n        external\\n        onlyRole(BILL_CREATOR_ROLE)\\n        returns (ICustomTreasury _treasury, ICustomBill _bill)\\n    {\\n        ICustomBill.BillCreationDetails\\n            memory billCreationDetails = getBillCreationDetails(\\n                _payoutToken,\\n                _principalToken,\\n                _initialOwner,\\n                _vestingCurve,\\n                _tierCeilings,\\n                _fees,\\n                _startVestingTimestamp,\\n                _feeInPayout\\n            );\\n\\n        return\\n            _createBillWithDefaults(\\n                billCreationDetails,\\n                _billTerms,\\n                _customTreasury\\n            );\\n    }\\n\\n    /* ======== HELPER FUNCTIONS ======== */\\n\\n    /**\\n     * @notice helper function to create an ICustomBill.BillCreationDetails tuple for CustomTreasury and CustomBill deployments\\n     */\\n    function getBillCreationDetails(\\n        address _payoutToken,\\n        address _principalToken,\\n        address _initialOwner,\\n        IVestingCurve _vestingCurve,\\n        uint256[] calldata _tierCeilings,\\n        uint256[] calldata _fees,\\n        uint256 _startVestingTimestamp,\\n        bool _feeInPayout\\n    ) public pure returns (ICustomBill.BillCreationDetails memory) {\\n        return\\n            ICustomBill.BillCreationDetails({\\n                payoutToken: _payoutToken,\\n                principalToken: _principalToken,\\n                initialOwner: _initialOwner,\\n                vestingCurve: _vestingCurve,\\n                tierCeilings: _tierCeilings,\\n                fees: _fees,\\n                startVestingTimestamp: _startVestingTimestamp,\\n                feeInPayout: _feeInPayout\\n            });\\n    }\\n\\n    /**\\n     * @notice helper function to create an ICustomBill.BillTerms tuple for CustomTreasury and CustomBill deployments\\n     */\\n    function getBillTerms(\\n        uint256 _controlVariable,\\n        uint256 _vestingTerm,\\n        uint256 _minimumPrice,\\n        uint256 _maxPayout,\\n        uint256 _maxDebt,\\n        uint256 _maxTotalPayout,\\n        uint256 _initialDebt\\n    ) public pure returns (ICustomBill.BillTerms memory) {\\n        return\\n            ICustomBill.BillTerms({\\n                controlVariable: _controlVariable,\\n                vestingTerm: _vestingTerm,\\n                minimumPrice: _minimumPrice,\\n                maxPayout: _maxPayout,\\n                maxDebt: _maxDebt,\\n                maxTotalPayout: _maxTotalPayout,\\n                initialDebt: _initialDebt\\n            });\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CustomBillFactoryBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/*\\n  ______                       _______                             __ \\n /      \\\\                     |       \\\\                           |  \\\\\\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  ______    ______  | \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\\  ______   _______    ____| \u2593\u2593\\n| \u2593\u2593__| \u2593\u2593 /      \\\\  /      \\\\ | \u2593\u2593__/ \u2593\u2593 /      \\\\ |       \\\\  /      \u2593\u2593\\n| \u2593\u2593    \u2593\u2593|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\| \u2593\u2593    \u2593\u2593|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\\|  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593| \u2593\u2593  | \u2593\u2593| \u2593\u2593    \u2593\u2593| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\\\\| \u2593\u2593  | \u2593\u2593| \u2593\u2593  | \u2593\u2593| \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593| \u2593\u2593__/ \u2593\u2593| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593| \u2593\u2593__/ \u2593\u2593| \u2593\u2593__/ \u2593\u2593| \u2593\u2593  | \u2593\u2593| \u2593\u2593__| \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593| \u2593\u2593    \u2593\u2593 \\\\\u2593\u2593     \\\\| \u2593\u2593    \u2593\u2593 \\\\\u2593\u2593    \u2593\u2593| \u2593\u2593  | \u2593\u2593 \\\\\u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593| \u2593\u2593\u2593\u2593\u2593\u2593\u2593   \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593   \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593   \\\\\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n          | \u2593\u2593                                                        \\n          | \u2593\u2593                                                        \\n           \\\\\u2593\u2593                                                         \\n * App:             https://Ape.Bond\\n * Medium:          https://ApeBond.medium.com\\n * Twitter:         https://twitter.com/ApeBond\\n * Telegram:        https://t.me/ape_bond\\n * Announcements:   https://t.me/ApeBond_news\\n * Discord:         https://ApeBond.click/discord\\n * Reddit:          https://ApeBond.click/reddit\\n * Instagram:       https://instagram.com/ape.bond\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@ape.swap/contracts/contracts/v0.8/access/PendingOwnable.sol\\\";\\nimport \\\"./interfaces/IFactoryStorage.sol\\\";\\nimport \\\"./interfaces/ICustomBillRefillable.sol\\\";\\nimport \\\"./interfaces/ICustomTreasury.sol\\\";\\nimport \\\"./interfaces/IBillNft.sol\\\";\\n\\ncontract CustomBillFactoryBase is PendingOwnable, AccessControlEnumerable {\\n    /* ======== STATE VARIABLES ======== */\\n\\n    struct BillDefaultConfig {\\n        address treasuryPayoutAddress; // Account which receives Treasury Bill deposits\\n        address[] billRefillers;\\n    }\\n\\n    BillDefaultConfig public billDefaultConfig;\\n    ICustomBill.BillAccounts public getBillDefaultAccounts;\\n\\n    IFactoryStorage public immutable factoryStorage;\\n    ICustomBill public billImplementationAddress;\\n    ICustomTreasury public treasuryImplementationAddress;\\n    ICustomBill[] public deployedBills;\\n    ICustomTreasury[] public deployedTreasuries;\\n\\n    bytes32 public constant BILL_CREATOR_ROLE = keccak256(\\\"BILL_CREATOR_ROLE\\\");\\n\\n    event CreatedTreasury(\\n        ICustomTreasury customTreasury,\\n        address payoutToken,\\n        address owner,\\n        address payoutAddress\\n    );\\n\\n    event CreatedBill(\\n        ICustomBill.BillCreationDetails billCreationDetails,\\n        ICustomTreasury customTreasury,\\n        ICustomBill bill,\\n        address billNft\\n    );\\n\\n    event SetFeeTo(address newFeeTo);\\n    event SetTreasuryPayout(address newTreasuryPayout);\\n    event SetDao(address newDao);\\n    event SetBillNft(address newBillNftAddress);\\n    event SetBillImplementation(ICustomBill newBillImplementation);\\n    event SetTreasuryImplementation(ICustomTreasury newTreasuryImplementation);\\n\\n    /* ======== CONSTRUCTION ======== */\\n\\n    constructor(\\n        BillDefaultConfig memory _billDefaultConfig,\\n        ICustomBill.BillAccounts memory _defaultBillAccounts,\\n        address _factoryStorage,\\n        address _billImplementationAddress,\\n        address _treasuryImplementationAddress,\\n        address[] memory _billCreators\\n    ) {\\n        _transferOwnership(msg.sender);\\n        require(\\n            _defaultBillAccounts.feeTo != address(0),\\n            \\\"Treasury cannot be zero address\\\"\\n        );\\n        require(\\n            address(_defaultBillAccounts.billNft) != address(0),\\n            \\\"billNft cannot be zero address\\\"\\n        );\\n        require(\\n            _defaultBillAccounts.DAO != address(0),\\n            \\\"DAO cannot be zero address\\\"\\n        );\\n        getBillDefaultAccounts = _defaultBillAccounts;\\n\\n        require(\\n            _billDefaultConfig.treasuryPayoutAddress != address(0),\\n            \\\"payoutAddress not zero address\\\"\\n        );\\n        billDefaultConfig = _billDefaultConfig;\\n\\n        require(\\n            _factoryStorage != address(0),\\n            \\\"factoryStorage not zero address\\\"\\n        );\\n        factoryStorage = IFactoryStorage(_factoryStorage);\\n        require(\\n            _billImplementationAddress != address(0),\\n            \\\"billImpleme not zero address\\\"\\n        );\\n        billImplementationAddress = ICustomBill(_billImplementationAddress);\\n        require(\\n            _treasuryImplementationAddress != address(0),\\n            \\\"treasuryImpleme not zero address\\\"\\n        );\\n        treasuryImplementationAddress = ICustomTreasury(\\n            _treasuryImplementationAddress\\n        );\\n\\n        for (uint i = 0; i < _billCreators.length; i++) {\\n            _grantRole(BILL_CREATOR_ROLE, _billCreators[i]);\\n        }\\n    }\\n\\n    function totalDeployed()\\n        external\\n        view\\n        returns (uint256 _billsDeployed, uint256 _treasuriesDeployed)\\n    {\\n        return (deployedBills.length, deployedTreasuries.length);\\n    }\\n\\n    function getBillDefaultConfig()\\n        external\\n        view\\n        returns (\\n            address _treasuryPayoutAddress,\\n            address _billFeeTo,\\n            address _billDAO,\\n            address _billNft,\\n            address[] memory _billRefillers\\n        )\\n    {\\n        _treasuryPayoutAddress = billDefaultConfig.treasuryPayoutAddress;\\n        _billRefillers = billDefaultConfig.billRefillers;\\n        _billFeeTo = getBillDefaultAccounts.feeTo;\\n        _billDAO = getBillDefaultAccounts.DAO;\\n        _billNft = getBillDefaultAccounts.billNft;\\n    }\\n\\n    /* ======== OWNER CONFIGURATIONS ======== */\\n    function setDao(address _DAO) external onlyOwner {\\n        require(_DAO != address(0), \\\"DAO cannot be zero address\\\");\\n        getBillDefaultAccounts.DAO = _DAO;\\n        emit SetDao(_DAO);\\n    }\\n\\n    function setBillNft(IBillNft _billNft) external onlyOwner {\\n        require(\\n            address(_billNft) != address(0),\\n            \\\"billNft cannot be zero address\\\"\\n        );\\n        getBillDefaultAccounts.billNft = address(_billNft);\\n        emit SetBillNft(address(_billNft));\\n    }\\n\\n    function setFeeTo(address _feeTo) external onlyOwner {\\n        require(_feeTo != address(0), \\\"feeTo cannot be zero address\\\");\\n        getBillDefaultAccounts.feeTo = _feeTo;\\n        emit SetFeeTo(_feeTo);\\n    }\\n\\n    function setTreasuryPayoutAddress(\\n        address _treasuryPayoutAddress\\n    ) external onlyOwner {\\n        require(\\n            _treasuryPayoutAddress != address(0),\\n            \\\"treasuryPayout not zero address\\\"\\n        );\\n        billDefaultConfig.treasuryPayoutAddress = _treasuryPayoutAddress;\\n        emit SetTreasuryPayout(_treasuryPayoutAddress);\\n    }\\n\\n    /**\\n     * @notice Set the CustomBill implementation address\\n     * @param _billImplementation Implementation of CustomBill\\n     */\\n    function setBillImplementation(\\n        ICustomBill _billImplementation\\n    ) external onlyOwner {\\n        billImplementationAddress = _billImplementation;\\n        emit SetBillImplementation(billImplementationAddress);\\n    }\\n\\n    /**\\n     * @notice Set the CustomTreasury implementation address\\n     * @param _treasuryImplementation Implementation of CustomTreasury\\n     */\\n    function setTreasuryImplementation(\\n        ICustomTreasury _treasuryImplementation\\n    ) external onlyOwner {\\n        treasuryImplementationAddress = _treasuryImplementation;\\n        emit SetTreasuryImplementation(treasuryImplementationAddress);\\n    }\\n\\n    /**\\n     * @notice Replace the default accounts which are added as Bill Refillers when new bills are created\\n     * @param _billRefillers Array of addresses to replace\\n     */\\n    function setBillRefillers(\\n        address[] memory _billRefillers\\n    ) external onlyOwner {\\n        billDefaultConfig.billRefillers = _billRefillers;\\n    }\\n\\n    /**\\n     * @notice Grant the ability to create Treasury Bills\\n     * @param _billCreators Array of addresses to whitelist as bill creators\\n     */\\n    function grantBillCreatorRole(\\n        address[] calldata _billCreators\\n    ) external onlyOwner {\\n        for (uint i = 0; i < _billCreators.length; i++) {\\n            _grantRole(BILL_CREATOR_ROLE, _billCreators[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Revoke the ability to create Treasury Bills\\n     * @param _billCreators Array of addresses to revoke as bill creators\\n     */\\n    function revokeBillCreatorRole(\\n        address[] calldata _billCreators\\n    ) external onlyOwner {\\n        for (uint i = 0; i < _billCreators.length; i++) {\\n            _revokeRole(BILL_CREATOR_ROLE, _billCreators[i]);\\n        }\\n    }\\n\\n    /* ======== INTERNAL FUNCTIONS ======== */\\n\\n    function _createTreasuryWithDefaults(\\n        address _payoutToken,\\n        address _owner\\n    ) internal returns (ICustomTreasury _customTreasury) {\\n        return\\n            _createTreasury(\\n                _payoutToken,\\n                _owner,\\n                billDefaultConfig.treasuryPayoutAddress\\n            );\\n    }\\n\\n    function _createTreasury(\\n        address _payoutToken,\\n        address _owner,\\n        address _payoutAddress\\n    ) internal returns (ICustomTreasury _customTreasury) {\\n        _customTreasury = ICustomTreasury(\\n            Clones.clone(address(treasuryImplementationAddress))\\n        );\\n        _customTreasury.initialize(_payoutToken, _owner, _payoutAddress);\\n\\n        deployedTreasuries.push(_customTreasury);\\n        emit CreatedTreasury(\\n            _customTreasury,\\n            _payoutToken,\\n            _owner,\\n            _payoutAddress\\n        );\\n    }\\n\\n    /**\\n        @notice deploys custom bill contract and returns address of the bill and its treasury\\n        @param _billCreationDetails BillCreationDetails\\n        @param _customTreasury address\\n     */\\n    function _createBillWithDefaults(\\n        ICustomBill.BillCreationDetails memory _billCreationDetails,\\n        ICustomBill.BillTerms memory _billTerms,\\n        ICustomTreasury _customTreasury\\n    ) internal returns (ICustomTreasury _treasury, ICustomBill _bill) {\\n        return\\n            _createBill(\\n                _billCreationDetails,\\n                _billTerms,\\n                getBillDefaultAccounts,\\n                _customTreasury,\\n                billDefaultConfig.billRefillers\\n            );\\n    }\\n\\n    /**\\n        @notice deploys custom bill contract and returns address of the bill and its treasury\\n        @param _billCreationDetails BillCreationDetails\\n        @param _customTreasury address\\n     */\\n    function _createBill(\\n        ICustomBill.BillCreationDetails memory _billCreationDetails,\\n        ICustomBill.BillTerms memory _billTerms,\\n        ICustomBill.BillAccounts memory _billAccounts,\\n        ICustomTreasury _customTreasury,\\n        address[] memory _billRefillers\\n    ) internal returns (ICustomTreasury _treasury, ICustomBill _bill) {\\n        require(\\n            _customTreasury.payoutToken() == _billCreationDetails.payoutToken,\\n            \\\"payout token mismatch\\\"\\n        );\\n        ICustomBillRefillable bill = ICustomBillRefillable(\\n            Clones.clone(address(billImplementationAddress))\\n        );\\n        bill.initialize(\\n            _customTreasury,\\n            _billCreationDetails,\\n            _billTerms,\\n            _billAccounts,\\n            _billRefillers\\n        );\\n\\n        IBillNft(_billAccounts.billNft).addMinter(address(bill));\\n        deployedBills.push(bill);\\n\\n        emit CreatedBill(\\n            _billCreationDetails,\\n            _customTreasury,\\n            bill,\\n            _billAccounts.billNft\\n        );\\n\\n        IFactoryStorage(factoryStorage).pushBill(\\n            _billCreationDetails,\\n            address(_customTreasury),\\n            address(bill),\\n            _billAccounts.billNft\\n        );\\n\\n        return (_customTreasury, ICustomBill(bill));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBillNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"./IERC5725.sol\\\";\\n\\ninterface IBillNft is IERC5725, IERC721EnumerableUpgradeable {\\n    struct TokenData {\\n        uint256 tokenId;\\n        address billAddress;\\n    }\\n\\n    function addMinter(address minter) external;\\n\\n    function mint(address to, address billAddress) external returns (uint256);\\n\\n    function mintMany(uint256 amount, address to, address billAddress) external;\\n\\n    function lockURI() external;\\n\\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) external;\\n\\n    function claimMany(uint256[] calldata _tokenIds) external;\\n\\n    function pendingPayout(uint256 tokenId) external view returns (uint256 pendingPayoutAmount);\\n\\n    function pendingVesting(uint256 tokenId) external view returns (uint256 pendingSeconds);\\n\\n    function allTokensDataOfOwner(address owner) external view returns (TokenData[] memory);\\n\\n    function getTokensOfOwnerByIndexes(address owner, uint256 start, uint256 end) external view returns (TokenData[] memory);\\n\\n    function tokenDataOfOwnerByIndex(address owner, uint256 index) external view returns (TokenData memory tokenData);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICustomBill.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"./ICustomTreasury.sol\\\";\\nimport \\\"./IVestingCurve.sol\\\";\\n\\ninterface ICustomBill {\\n    /// @notice Info for bill holder\\n    /// @param payout Total payout value\\n    /// @param payoutClaimed Amount of payout claimed\\n    /// @param vesting Seconds left until vesting is complete\\n    /// @param vestingTerm Length of vesting in seconds\\n    /// @param vestingStartTimestamp Timestamp at start of vesting\\n    /// @param lastClaimTimestamp Last timestamp interaction\\n    /// @param truePricePaid Price paid (principal tokens per payout token) in ten-millionths - 4000000 = 0.4\\n    struct Bill {\\n        uint256 payout; \\n        uint256 payoutClaimed;\\n        uint256 vesting;\\n        uint256 vestingTerm; \\n        uint256 vestingStartTimestamp;\\n        uint256 lastClaimTimestamp; \\n        uint256 truePricePaid; \\n    }\\n\\n    struct BillCreationDetails {\\n        address payoutToken;\\n        address principalToken;\\n        address initialOwner;\\n        IVestingCurve vestingCurve;\\n        uint256[] tierCeilings;\\n        uint256[] fees;\\n        uint256 startVestingTimestamp;\\n        bool feeInPayout;\\n    }\\n\\n    struct BillTerms {\\n        uint256 controlVariable;\\n        uint256 vestingTerm;\\n        uint256 minimumPrice;\\n        uint256 maxPayout;\\n        uint256 maxDebt;\\n        uint256 maxTotalPayout;\\n        uint256 initialDebt;\\n    }\\n\\n    /// @notice Important accounts related to a CustomBill \\n    /// @param feeTo Account which receives the bill fees\\n    /// @param DAO Account used to change the treasury address\\n    /// @param billNft BillNFT contract which mints the NFTs\\n    struct BillAccounts {\\n        address feeTo;\\n        address DAO;\\n        address billNft;\\n    }\\n\\n    function initialize(\\n        ICustomTreasury _customTreasury,\\n        BillCreationDetails memory _billCreationDetails,\\n        BillTerms memory _billTerms,\\n        BillAccounts memory _billAccounts\\n    ) external;\\n\\n    function customTreasury() external returns (ICustomTreasury);\\n\\n    function claim(uint256 billId) external returns (uint256);\\n\\n    function pendingVesting(uint256 billId) external view returns (uint256);\\n\\n    function pendingPayout(uint256 billId) external view returns (uint256);\\n\\n    function vestingPeriod(uint256 billId) external view returns (uint256 vestingStart_, uint256 vestingEnd_);\\n\\n    function vestingPayout(uint256 billId) external view returns (uint256 vestingPayout_);\\n\\n    function vestedPayoutAtTime(uint256 billId, uint256 timestamp) external view returns (uint256 vestedPayout_);\\n\\n    function claimablePayout(uint256 billId) external view returns (uint256 claimablePayout_);\\n\\n    function payoutToken() external view returns (IERC20MetadataUpgradeable);\\n    \\n    function principalToken() external view returns (IERC20MetadataUpgradeable);\\n\\n    function getBillInfo(uint256 billId) external view returns (Bill memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICustomBillRefillable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./ICustomBill.sol\\\";\\n\\ninterface ICustomBillRefillable is ICustomBill {\\n    function initialize(\\n        ICustomTreasury _customTreasury,\\n        BillCreationDetails memory _billCreationDetails,\\n        BillTerms memory _billTerms,\\n        BillAccounts memory _billAccounts,\\n        address[] memory _billRefillers\\n    ) external;\\n\\n    function refillPayoutToken(uint256 _refillAmount) external;\\n\\n    function grantRefillRole(address[] calldata _billRefillers) external;\\n\\n    function revokeRefillRole(address[] calldata _billRefillers) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICustomTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface ICustomTreasury {\\n    function deposit(\\n        address _principalTokenAddress,\\n        uint256 _amountPrincipalToken,\\n        uint256 _amountPayoutToken\\n    ) external;\\n\\n    function deposit_FeeInPayout(\\n        address _principalTokenAddress,\\n        uint256 _amountPrincipalToken,\\n        uint256 _amountPayoutToken,\\n        uint256 _feePayoutToken,\\n        address _feeReceiver\\n    ) external;\\n\\n    function initialize(address _payoutToken, address _initialOwner, address _payoutAddress) external;\\n\\n    function valueOfToken(address _principalTokenAddress, uint256 _amount)\\n        external\\n        view\\n        returns (uint256 value_);\\n\\n   function payoutToken()\\n        external\\n        view\\n        returns (address token);\\n    \\n    function sendPayoutTokens(uint _amountPayoutToken) external;\\n\\n    function billContract(address _billContract) external returns (bool _isEnabled);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC5725.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Non-Fungible Vesting Token Standard\\n * @notice A non-fungible token standard used to vest ERC-20 tokens over a vesting release curve\\n *  scheduled using timestamps.\\n * @dev Because this standard relies on timestamps for the vesting schedule, it's important to keep track of the\\n *  tokens claimed per Vesting NFT so that a user cannot withdraw more tokens than alloted for a specific Vesting NFT.\\n */\\ninterface IERC5725 {\\n    /**\\n     *  This event is emitted when the payout is claimed through the claim function\\n     *  @param tokenId the NFT tokenId of the assets being claimed.\\n     *  @param recipient The address which is receiving the payout.\\n     *  @param claimAmount The amount of tokens being claimed.\\n     */\\n    event PayoutClaimed(uint256 indexed tokenId, address indexed recipient, uint256 claimAmount);\\n\\n    /**\\n     * @notice Claim the pending payout for the NFT\\n     * @dev MUST grant the claimablePayout value at the time of claim being called\\n     * MUST revert if not called by the token owner or approved users\\n     * MUST emit PayoutClaimed\\n     * SHOULD revert if there is nothing to claim\\n     * @param tokenId The NFT token id\\n     */\\n    function claim(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Number of tokens for the NFT which have been claimed at the current timestamp\\n     * @param tokenId The NFT token id\\n     * @return payout The total amount of payout tokens claimed for this NFT\\n     */\\n    function claimedPayout(uint256 tokenId) external view returns (uint256 payout);\\n\\n    /**\\n     * @notice Number of tokens for the NFT which can be claimed at the current timestamp\\n     * @dev It is RECOMMENDED that this is calculated as the `vestedPayout()` subtracted from `payoutClaimed()`.\\n     * @param tokenId The NFT token id\\n     * @return payout The amount of unlocked payout tokens for the NFT which have not yet been claimed\\n     */\\n    function claimablePayout(uint256 tokenId) external view returns (uint256 payout);\\n\\n    /**\\n     * @notice Total amount of tokens which have been vested at the current timestamp.\\n     *   This number also includes vested tokens which have been claimed.\\n     * @dev It is RECOMMENDED that this function calls `vestedPayoutAtTime` with\\n     *   `block.timestamp` as the `timestamp` parameter.\\n     * @param tokenId The NFT token id\\n     * @return payout Total amount of tokens which have been vested at the current timestamp.\\n     */\\n    function vestedPayout(uint256 tokenId) external view returns (uint256 payout);\\n\\n    /**\\n     * @notice Total amount of vested tokens at the provided timestamp.\\n     *   This number also includes vested tokens which have been claimed.\\n     * @dev `timestamp` MAY be both in the future and in the past.\\n     * Zero MUST be returned if the timestamp is before the token was minted.\\n     * @param tokenId The NFT token id\\n     * @param timestamp The timestamp to check on, can be both in the past and the future\\n     * @return payout Total amount of tokens which have been vested at the provided timestamp\\n     */\\n    function vestedPayoutAtTime(uint256 tokenId, uint256 timestamp) external view returns (uint256 payout);\\n\\n    /**\\n     * @notice Number of tokens for an NFT which are currently vesting.\\n     * @dev The sum of vestedPayout and vestingPayout SHOULD always be the total payout.\\n     * @param tokenId The NFT token id\\n     * @return payout The number of tokens for the NFT which are vesting until a future date.\\n     */\\n    function vestingPayout(uint256 tokenId) external view returns (uint256 payout);\\n\\n    /**\\n     * @notice The start and end timestamps for the vesting of the provided NFT\\n     * MUST return the timestamp where no further increase in vestedPayout occurs for `vestingEnd`.\\n     * @param tokenId The NFT token id\\n     * @return vestingStart The beginning of the vesting as a unix timestamp\\n     * @return vestingEnd The ending of the vesting as a unix timestamp\\n     */\\n    function vestingPeriod(uint256 tokenId) external view returns (uint256 vestingStart, uint256 vestingEnd);\\n\\n    /**\\n     * @notice Token which is used to pay out the vesting claims\\n     * @param tokenId The NFT token id\\n     * @return token The token which is used to pay out the vesting claims\\n     */\\n    function payoutToken(uint256 tokenId) external view returns (address token);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactoryStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./ICustomBill.sol\\\";\\n\\ninterface IFactoryStorage {\\n    struct BillDetails {\\n        address payoutToken;\\n        address principalToken;\\n        address treasuryAddress;\\n        address billAddress;\\n        address billNft;\\n        uint256[] tierCeilings;\\n        uint256[] fees;\\n    }\\n\\n    function totalBills() external view returns(uint);\\n\\n    function getBillDetails(uint256 index) external returns (BillDetails memory);\\n\\n    function pushBill(\\n        ICustomBill.BillCreationDetails calldata _billCreationDetails,\\n        address _customTreasury,\\n        address billAddress,\\n        address billNft\\n    ) external returns (address _treasury, address _bill);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVestingCurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/// @notice VestingCurve interface to allow for simple updates of vesting release schedules.\\ninterface IVestingCurve {\\n    /**\\n     * @notice Returns the vested token amount given the inputs below.\\n     * @param totalPayout Total payout vested once the vestingTerm is up\\n     * @param vestingTerm Length of time in seconds that tokens are vesting for\\n     * @param startTimestamp The timestamp of when vesting starts\\n     * @param checkTimestamp The timestamp to calculate vested tokens\\n     * @return vestedPayout Total payoutTokens vested at checkTimestamp\\n     *\\n     * Requirements\\n     * - MUST return 0 if checkTimestamp is less than startTimestamp\\n     * - MUST return totalPayout if checkTimestamp is greater than startTimestamp + vestingTerm,\\n     * - MUST return a value including or between 0 and totalPayout\\n     */\\n    function getVestedPayoutAtTime(\\n        uint256 totalPayout,\\n        uint256 vestingTerm,\\n        uint256 startTimestamp,\\n        uint256 checkTimestamp\\n    ) external view returns (uint256 vestedPayout);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"treasuryPayoutAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"billRefillers\",\"type\":\"address[]\"}],\"internalType\":\"struct CustomBillFactoryBase.BillDefaultConfig\",\"name\":\"_billDefaultConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"billNft\",\"type\":\"address\"}],\"internalType\":\"struct ICustomBill.BillAccounts\",\"name\":\"_defaultBillAccounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_factoryStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_billImplementationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryImplementationAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_billCreators\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeInPayout\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ICustomBill.BillCreationDetails\",\"name\":\"billCreationDetails\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"contract ICustomTreasury\",\"name\":\"customTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"billNft\",\"type\":\"address\"}],\"name\":\"CreatedBill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICustomTreasury\",\"name\":\"customTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"CreatedTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICustomBill\",\"name\":\"newBillImplementation\",\"type\":\"address\"}],\"name\":\"SetBillImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBillNftAddress\",\"type\":\"address\"}],\"name\":\"SetBillNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"SetDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"SetPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICustomTreasury\",\"name\":\"newTreasuryImplementation\",\"type\":\"address\"}],\"name\":\"SetTreasuryImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryPayout\",\"type\":\"address\"}],\"name\":\"SetTreasuryPayout\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BILL_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billDefaultConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"treasuryPayoutAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billImplementationAddress\",\"outputs\":[{\"internalType\":\"contract ICustomBill\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeInPayout\",\"type\":\"bool\"}],\"internalType\":\"struct ICustomBill.BillCreationDetails\",\"name\":\"_billCreationDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICustomBill.BillTerms\",\"name\":\"_billTerms\",\"type\":\"tuple\"},{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_customTreasury\",\"type\":\"address\"}],\"name\":\"createBill\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"_bill\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeInPayout\",\"type\":\"bool\"}],\"internalType\":\"struct ICustomBill.BillCreationDetails\",\"name\":\"_billCreationDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICustomBill.BillTerms\",\"name\":\"_billTerms\",\"type\":\"tuple\"}],\"name\":\"createBillAndTreasury\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"_bill\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeInPayout\",\"type\":\"bool\"}],\"internalType\":\"struct ICustomBill.BillCreationDetails\",\"name\":\"_billCreationDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICustomBill.BillTerms\",\"name\":\"_billTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"billNft\",\"type\":\"address\"}],\"internalType\":\"struct ICustomBill.BillAccounts\",\"name\":\"_billAccounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_billRefillers\",\"type\":\"address[]\"}],\"name\":\"createBillAndTreasury_CustomConfig\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"_bill\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"_vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_feeInPayout\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICustomBill.BillTerms\",\"name\":\"_billTerms\",\"type\":\"tuple\"}],\"name\":\"createBillAndTreasury_Explorer\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"_bill\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeInPayout\",\"type\":\"bool\"}],\"internalType\":\"struct ICustomBill.BillCreationDetails\",\"name\":\"_billCreationDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICustomBill.BillTerms\",\"name\":\"_billTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"billNft\",\"type\":\"address\"}],\"internalType\":\"struct ICustomBill.BillAccounts\",\"name\":\"_billAccounts\",\"type\":\"tuple\"},{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_billRefillers\",\"type\":\"address[]\"}],\"name\":\"createBill_CustomConfig\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"_bill\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"_vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_feeInPayout\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICustomBill.BillTerms\",\"name\":\"_billTerms\",\"type\":\"tuple\"},{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_customTreasury\",\"type\":\"address\"}],\"name\":\"createBill_Explorer\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"_bill\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"createTreasury_CustomConfig\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_customTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedBills\",\"outputs\":[{\"internalType\":\"contract ICustomBill\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedTreasuries\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryStorage\",\"outputs\":[{\"internalType\":\"contract IFactoryStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"_vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_feeInPayout\",\"type\":\"bool\"}],\"name\":\"getBillCreationDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IVestingCurve\",\"name\":\"vestingCurve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeInPayout\",\"type\":\"bool\"}],\"internalType\":\"struct ICustomBill.BillCreationDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBillDefaultAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"billNft\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBillDefaultConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryPayoutAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_billFeeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_billDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_billNft\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_billRefillers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"}],\"name\":\"getBillTerms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICustomBill.BillTerms\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_billCreators\",\"type\":\"address[]\"}],\"name\":\"grantBillCreatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_billCreators\",\"type\":\"address[]\"}],\"name\":\"revokeBillCreatorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICustomBill\",\"name\":\"_billImplementation\",\"type\":\"address\"}],\"name\":\"setBillImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBillNft\",\"name\":\"_billNft\",\"type\":\"address\"}],\"name\":\"setBillNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_billRefillers\",\"type\":\"address[]\"}],\"name\":\"setBillRefillers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"_treasuryImplementation\",\"type\":\"address\"}],\"name\":\"setTreasuryImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryPayoutAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_billsDeployed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuriesDeployed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryImplementationAddress\",\"outputs\":[{\"internalType\":\"contract ICustomTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CustomBillFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000003f5bedd3baef93aa4f8aa1891967a8027b82b7f5000000000000000000000000a50d2f756692acbf9b9c0f22b98a6ba02fa8ad80000000000000000000000000499b654b0a7f9979cc315190c09ca2633809b8df00000000000000000000000072d400591719bbd601637d8748e6a161e1bae182000000000000000000000000f1e3f8f589949cbfccb7a902a99f71b634278f1f0000000000000000000000004999b56248767b8553c111db250b8c3a8546515c00000000000000000000000000000000000000000000000000000000000002600000000000000000000000003f5bedd3baef93aa4f8aa1891967a8027b82b7f5000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000080000000000000000000000003924e7edd1990f4a769722cb212e2db3693af59300000000000000000000000081ae4fa3992a945576e8fdfb0c5be7e1a47e560900000000000000000000000073798ebdec73d902fb3ad80be71ef40dbdd99ebb0000000000000000000000000341242eb1995a9407f1bf632e8da206858fbb3a00000000000000000000000050cf6cde8f63316b2bd6aacd0f5581aef5dd235d0000000000000000000000006c905b4108a87499ced1e0498721f2b831c6ab13000000000000000000000000c0ecb64bd291fcae47858209c295c2bcec92dc06000000000000000000000000838bfad757a0905eea2758da48c3df53b9812df800000000000000000000000000000000000000000000000000000000000000080000000000000000000000003924e7edd1990f4a769722cb212e2db3693af59300000000000000000000000081ae4fa3992a945576e8fdfb0c5be7e1a47e560900000000000000000000000073798ebdec73d902fb3ad80be71ef40dbdd99ebb0000000000000000000000000341242eb1995a9407f1bf632e8da206858fbb3a00000000000000000000000050cf6cde8f63316b2bd6aacd0f5581aef5dd235d0000000000000000000000006c905b4108a87499ced1e0498721f2b831c6ab13000000000000000000000000c0ecb64bd291fcae47858209c295c2bcec92dc06000000000000000000000000838bfad757a0905eea2758da48c3df53b9812df8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}