{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ConfigManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n/**\\r\\n\\r\\n    _____________\\r\\n   /  ::  K  ::  \\\\\\r\\n   [] ::  A  :: []\\r\\n   [] ::::R:::: []\\r\\n   [] ::::R:::: []\\r\\n   [] ::::O:::: []\\r\\n   [] ::::T:::: []\\r\\n   [_____________]\\r\\n       I     I\\r\\n       I_   _I\\r\\n        /   \\\\\\r\\n        \\\\   /\\r\\n        (   )   \\r\\n        /   \\\\\\r\\n        \\\\___/\\r\\n\\r\\n   ____     ____        __      _   _________    _____      _____   \\r\\n  / ___)   / __ \\\\      /  \\\\    / ) (_   _____)  (_   _)    / ___ \\\\  \\r\\n / /      / /  \\\\ \\\\    / /\\\\ \\\\  / /    ) (___       | |     / /   \\\\_) \\r\\n( (      ( ()  () )   ) ) ) ) ) )   (   ___)      | |    ( (  ____  \\r\\n( (      ( ()  () )  ( ( ( ( ( (     ) (          | |    ( ( (__  ) \\r\\n \\\\ \\\\___   \\\\ \\\\__/ /   / /  \\\\ \\\\/ /    (   )        _| |__   \\\\ \\\\__/ /  \\r\\n  \\\\____)   \\\\____/   (_/    \\\\__/      \\\\_/        /_____(    \\\\____/   \\r\\n                                                                \\r\\n\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IAttackRewardCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IKarrotsToken.sol\\\";\\r\\nimport \\\"./interfaces/IRabbit.sol\\\";\\r\\nimport \\\"./interfaces/IStolenPool.sol\\\";\\r\\nimport \\\"./interfaces/IDexInterfacer.sol\\\";\\r\\nimport \\\"./interfaces/IKarrotChef.sol\\\";\\r\\nimport \\\"./interfaces/IFullProtec.sol\\\";\\r\\n\\r\\n/**\\r\\nManager for config variables\\r\\n\\r\\nNotes:\\r\\n- once operation is stable, timelock will be set as owner\\r\\n- openKarrotChefDeposits: first stolen pool epoch (epoch 0) starts at the same time as the karrot chef deposits open\\r\\n */\\r\\n\\r\\n\\r\\ncontract ConfigManager is Ownable {\\r\\n    //======================================================================================\\r\\n    // setup\\r\\n    //======================================================================================\\r\\n\\r\\n    IRabbit public rabbit;\\r\\n    IKarrotsToken public karrots;\\r\\n    IStolenPool public stolenPool;\\r\\n    IAttackRewardCalculator public rewardCalculator;\\r\\n    IDexInterfacer public dexInterfacer;\\r\\n    IKarrotChef public karrotChef;\\r\\n    IFullProtec public karrotFullProtec;\\r\\n\\r\\n    address public treasuryAddress; \\r\\n    address public uniswapFactoryAddress; \\r\\n    address public uniswapRouterAddress; \\r\\n    address public karrotsPoolAddress;\\r\\n    address public timelockControllerAddress;\\r\\n    address public karrotsAddress;\\r\\n    address public karrotChefAddress;\\r\\n    address public karrotFullProtecAddress;\\r\\n    address public karrotStolenPoolAddress;\\r\\n    address public rabbitAddress;\\r\\n    address public randomizerAddress; \\r\\n    address public attackRewardCalculatorAddress;\\r\\n    address public dexInterfacerAddress;\\r\\n    address public presaleDistributorAddress; \\r\\n    address public airdropDistributorAddress;\\r\\n\\r\\n    constructor(\\r\\n        address _treasuryAddress,\\r\\n        address _uniswapFactoryAddress,\\r\\n        address _uniswapRouterAddress,\\r\\n        address _randomizerAddress,\\r\\n        address _presaleDistributorAddress,\\r\\n        address _airdropDistributorAddress\\r\\n    ) {\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n        uniswapFactoryAddress = _uniswapFactoryAddress;\\r\\n        uniswapRouterAddress = _uniswapRouterAddress;\\r\\n        randomizerAddress = _randomizerAddress;\\r\\n        presaleDistributorAddress = _presaleDistributorAddress;\\r\\n        airdropDistributorAddress = _airdropDistributorAddress;\\r\\n    }\\r\\n\\r\\n    function transferOwnershipToTimelock() external onlyOwner {\\r\\n        transferOwnership(timelockControllerAddress);\\r\\n    }\\r\\n\\r\\n    //======================================================================================\\r\\n    // include setters for each \\\"global\\\" parameter --> gated by onlyOwner\\r\\n    //======================================================================================\\r\\n\\r\\n    function setTreasuryAddress(address _treasuryAddress) external onlyOwner {\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n    }\\r\\n\\r\\n    function setUniswapFactoryAddress(address _uniswapFactoryAddress) external onlyOwner {\\r\\n        uniswapFactoryAddress = _uniswapFactoryAddress;        \\r\\n    }\\r\\n\\r\\n    function setUniswapRouterAddress(address _uniswapRouterAddress) external onlyOwner {\\r\\n        uniswapRouterAddress = _uniswapRouterAddress;        \\r\\n    }\\r\\n\\r\\n    function setKarrotsPoolAddress(address _karrotsPoolAddress) external onlyOwner {\\r\\n        karrotsPoolAddress = _karrotsPoolAddress;        \\r\\n    }\\r\\n\\r\\n    function setTimelockControllerAddress(address _timelockControllerAddress) external onlyOwner {\\r\\n        timelockControllerAddress = _timelockControllerAddress;       \\r\\n    }\\r\\n\\r\\n    function setKarrotTokenAddress(address _karrotTokenAddress) external onlyOwner {\\r\\n        karrotsAddress = _karrotTokenAddress;\\r\\n        karrots = IKarrotsToken(_karrotTokenAddress);    \\r\\n    }\\r\\n\\r\\n    function setKarrotChefAddress(address _karrotChefAddress) external onlyOwner {\\r\\n        karrotChefAddress = _karrotChefAddress;\\r\\n        karrotChef = IKarrotChef(_karrotChefAddress);       \\r\\n    }\\r\\n\\r\\n    function setKarrotFullProtecAddress(address _fullProtecAddress) external onlyOwner {\\r\\n        karrotFullProtecAddress = _fullProtecAddress;\\r\\n        karrotFullProtec = IFullProtec(_fullProtecAddress);      \\r\\n    }\\r\\n\\r\\n    function setKarrotStolenPoolAddress(address _stolenPoolAddress) external onlyOwner {\\r\\n        karrotStolenPoolAddress = _stolenPoolAddress;\\r\\n        stolenPool = IStolenPool(_stolenPoolAddress);   \\r\\n    }\\r\\n\\r\\n    function setRabbitAddress(address _rabbitAddress) external onlyOwner {\\r\\n        rabbitAddress = _rabbitAddress;\\r\\n        rabbit = IRabbit(_rabbitAddress);       \\r\\n    }\\r\\n\\r\\n    function setRandomizerAddress(address _randomizerRequesterAddress) external onlyOwner {\\r\\n        randomizerAddress = _randomizerRequesterAddress;        \\r\\n    }\\r\\n\\r\\n    function setRewardCalculatorAddress(address _rewardCalculatorAddress) external onlyOwner {\\r\\n        attackRewardCalculatorAddress = _rewardCalculatorAddress;\\r\\n        rewardCalculator = IAttackRewardCalculator(_rewardCalculatorAddress);       \\r\\n    }\\r\\n\\r\\n    function setDexInterfacerAddress(address _dexInterfacerAddress) external onlyOwner {\\r\\n        dexInterfacerAddress = _dexInterfacerAddress;\\r\\n        dexInterfacer = IDexInterfacer(_dexInterfacerAddress);      \\r\\n    }\\r\\n\\r\\n    function setPresaleDistributorAddress(address _presaleClaimContractAddress) external onlyOwner {\\r\\n        presaleDistributorAddress = _presaleClaimContractAddress;      \\r\\n    }\\r\\n\\r\\n    //======================================================================================\\r\\n    // NEW SETTERS FOR KARROTS CONFIG (CALLS FUNCTIONS ON KARROTS)\\r\\n    //======================================================================================\\r\\n\\r\\n    function setBuyTaxRate(uint16 _buyTaxRate) external onlyOwner {\\r\\n        karrots.setBuyTaxRate(_buyTaxRate);\\r\\n    }\\r\\n\\r\\n    function setSellTaxRate(uint16 _sellTaxRate) external onlyOwner {\\r\\n        karrots.setSellTaxRate(_sellTaxRate);\\r\\n    }\\r\\n\\r\\n    function addDexAddress(address _dexAddress) external onlyOwner {\\r\\n        karrots.addDexAddress(_dexAddress);\\r\\n    }\\r\\n\\r\\n    function removeDexAddress(address _dexAddress) external onlyOwner {\\r\\n        karrots.removeDexAddress(_dexAddress);\\r\\n    }\\r\\n\\r\\n    function setMaxScaleFactorDecreasePercentagePerDebase(uint256 _maxScaleFactorDecreasePercentagePerDebase) external onlyOwner {\\r\\n        karrots.setMaxScaleFactorDecreasePercentagePerDebase(_maxScaleFactorDecreasePercentagePerDebase);\\r\\n    }\\r\\n\\r\\n    function setTaxSwapAmountThreshold(uint256 _taxSwapAmountThreshold) external onlyOwner {\\r\\n        karrots.setTaxSwapAmountThreshold(_taxSwapAmountThreshold);\\r\\n    }\\r\\n\\r\\n    function setDivertTaxToStolenPoolRate(uint256 _divertRate) external onlyOwner {\\r\\n        karrots.setDivertTaxToStolenPoolRate(_divertRate);\\r\\n    }\\r\\n\\r\\n    //======================================================================================\\r\\n    // NEW SETTERS FOR RABBIT (CALLS FUNCTIONS ON RABBIT)\\r\\n    //======================================================================================\\r\\n\\r\\n    function setRabbitMintIsOpen(bool _rabbitMintIsOpen) external onlyOwner {\\r\\n        rabbit.setRabbitMintIsOpen(_rabbitMintIsOpen);\\r\\n    }\\r\\n\\r\\n    function setRabbitBatchSize(uint16 _rabbitBatchSize) external onlyOwner {\\r\\n        rabbit.setRabbitBatchSize(_rabbitBatchSize);\\r\\n    }\\r\\n\\r\\n    function setRabbitMintSecondsBetweenBatches(uint32 _rabbitMintSecondsBetweenBatches) external onlyOwner {\\r\\n        rabbit.setRabbitMintSecondsBetweenBatches(_rabbitMintSecondsBetweenBatches);\\r\\n    }\\r\\n\\r\\n    function setRabbitMaxPerWallet(uint8 _rabbitMaxPerWallet) external onlyOwner {\\r\\n        rabbit.setRabbitMaxPerWallet(_rabbitMaxPerWallet);\\r\\n    }\\r\\n\\r\\n    function setRabbitMintPriceInKarrots(uint128 _rabbitMintPriceInKarrots) external onlyOwner {\\r\\n        rabbit.setRabbitMintPriceInKarrots(_rabbitMintPriceInKarrots);\\r\\n    }\\r\\n\\r\\n    function setRabbitMintKarrotFeePercentageToBurn(uint16 _rabbitMintKarrotFeePercentageToBurn) external onlyOwner {\\r\\n        rabbit.setRabbitMintKarrotFeePercentageToBurn(_rabbitMintKarrotFeePercentageToBurn);\\r\\n    }\\r\\n\\r\\n    function setRabbitMintKarrotFeePercentageToStolenPool(uint16 _rabbitMintKarrotFeePercentageToStolenPool) external onlyOwner {\\r\\n        rabbit.setRabbitMintKarrotFeePercentageToStolenPool(_rabbitMintKarrotFeePercentageToStolenPool);\\r\\n    }\\r\\n\\r\\n    function setRabbitMintTier1Threshold(uint16 _rabbitMintTier1Threshold) external onlyOwner {\\r\\n        rabbit.setRabbitMintTier1Threshold(_rabbitMintTier1Threshold);\\r\\n    }\\r\\n\\r\\n    function setRabbitMintTier2Threshold(uint16 _rabbitMintTier2Threshold) external onlyOwner {\\r\\n        rabbit.setRabbitMintTier2Threshold(_rabbitMintTier2Threshold);\\r\\n    }\\r\\n\\r\\n    function setRabbitHP(uint8 _rabbitHP) external onlyOwner {\\r\\n        rabbit.setRabbitHP(_rabbitHP);\\r\\n    }\\r\\n\\r\\n    function setRabbitHitRate(uint16 _rabbitHitRate) external onlyOwner {\\r\\n        rabbit.setRabbitHitRate(_rabbitHitRate);\\r\\n    }\\r\\n\\r\\n    function setRabbitAttackIsOpen(bool _isOpen) external onlyOwner {\\r\\n        stolenPool.setStolenPoolAttackIsOpen(_isOpen);\\r\\n        rabbit.setRabbitAttackIsOpen(_isOpen);\\r\\n    }\\r\\n\\r\\n    function setAttackCooldownSeconds(uint32 _attackCooldownSeconds) external onlyOwner {\\r\\n        rabbit.setAttackCooldownSeconds(_attackCooldownSeconds);\\r\\n    }\\r\\n\\r\\n    function setAttackHPDeductionAmount(uint8 _attackHPDeductionAmount) external onlyOwner {\\r\\n        rabbit.setAttackHPDeductionAmount(_attackHPDeductionAmount);\\r\\n    }\\r\\n\\r\\n    function setAttackHPDeductionThreshold(uint16 _attackHPDeductionThreshold) external onlyOwner {\\r\\n        rabbit.setAttackHPDeductionThreshold(_attackHPDeductionThreshold);\\r\\n    }\\r\\n\\r\\n\\r\\n    //======================================================================================\\r\\n    // NEW SETTERS FOR KARROT CHEF (CALLS FUNCTIONS ON KARROT CHEF)\\r\\n    //======================================================================================\\r\\n\\r\\n    function setKarrotChefPoolAllocPoints(uint256 _pid, uint128 _allocPoints, bool _withUpdate) external onlyOwner {\\r\\n        karrotChef.setAllocationPoint(_pid, _allocPoints, _withUpdate);\\r\\n    }\\r\\n\\r\\n    function setKarrotChefLockDuration(uint256 _pid, uint256 _lockDuration) external onlyOwner {\\r\\n        karrotChef.setLockDuration(_pid, _lockDuration);\\r\\n    }\\r\\n\\r\\n    function updateKarrotChefRewardPerBlock(uint88 _karrotChefRewardPerBlock) external onlyOwner {\\r\\n        karrotChef.updateRewardPerBlock(_karrotChefRewardPerBlock);\\r\\n    }\\r\\n\\r\\n    function setKarrotChefDebaseMultiplier(uint48 _debaseMultiplier) external onlyOwner {\\r\\n        karrotChef.setDebaseMultiplier(_debaseMultiplier);\\r\\n    }\\r\\n\\r\\n    function openKarrotChefDeposits() external onlyOwner {\\r\\n        karrotChef.openKarrotChefDeposits();\\r\\n        stolenPool.setStolenPoolOpenTimestamp();\\r\\n    }\\r\\n\\r\\n    function setDepositIsPaused(bool _depositIsPaused) external onlyOwner {\\r\\n        karrotChef.setDepositIsPaused(_depositIsPaused);\\r\\n    }\\r\\n\\r\\n    function setClaimTaxRate(uint16 _maxClaimTaxRate) external onlyOwner {\\r\\n        karrotChef.setClaimTaxRate(_maxClaimTaxRate);\\r\\n    }\\r\\n\\r\\n    function setFullProtecLiquidityProportion(uint16 _fullProtecLiquidityProportion) external onlyOwner {\\r\\n        karrotChef.setFullProtecLiquidityProportion(_fullProtecLiquidityProportion);\\r\\n    }\\r\\n\\r\\n    //======================================================================================\\r\\n    // NEW SETTERS FOR FULL PROTEC\\r\\n    //======================================================================================\\r\\n\\r\\n    function openFullProtecDeposits() external onlyOwner {\\r\\n        karrotFullProtec.openFullProtecDeposits();\\r\\n    }\\r\\n\\r\\n    function setFullProtecLockDuration(uint32 _lockDuration) external onlyOwner {\\r\\n        karrotFullProtec.setFullProtecLockDuration(_lockDuration);\\r\\n    }\\r\\n\\r\\n    function setThresholdFullProtecKarrotBalance(uint224 _thresholdFullProtecKarrotBalance) external onlyOwner {\\r\\n        karrotFullProtec.setThresholdFullProtecKarrotBalance(_thresholdFullProtecKarrotBalance);\\r\\n    }\\r\\n\\r\\n    //======================================================================================\\r\\n    // NEW SETTERS FOR STOLEN POOL \\r\\n    //======================================================================================\\r\\n\\r\\n    function setAttackBurnPercentage(uint16 _attackBurnPercentage) external onlyOwner {\\r\\n        stolenPool.setAttackBurnPercentage(_attackBurnPercentage);\\r\\n    }\\r\\n\\r\\n    function setIsApprovedStolenPoolDepositor(address _depositor, bool _isApproved) external onlyOwner {\\r\\n        stolenPool.setIsApprovedDepositor(_depositor, _isApproved);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAttackRewardCalculator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAttackRewardCalculator {\\r\\n    function calculateRewardPerAttackByTier(\\r\\n        uint256 tier1Attacks,\\r\\n        uint256 tier2Attacks,\\r\\n        uint256 tier3Attacks,\\r\\n        uint256 tier1Weight,\\r\\n        uint256 tier2Weight,\\r\\n        uint256 tier3Weight,\\r\\n        uint256 totalKarrotsDepositedThisEpoch\\r\\n    ) external view returns (uint256[] memory);\\r\\n}\"\r\n    },\r\n    \"src/interfaces/IKarrotsToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IKarrotsToken {\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function addDexAddress(address _dexAddress) external;\\r\\n    function removeDexAddress(address _dexAddress) external;\\r\\n    function mint(address to, uint256 amount) external;\\r\\n    function burn(uint256 amount) external;\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n    function rebase(uint256 epoch, uint256 indexDelta, bool positive) external returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function transferUnderlying(address to, uint256 value) external returns (bool);\\r\\n    function fragmentToKarrots(uint256 value) external view returns (uint256);\\r\\n    function karrotsToFragment(uint256 karrots) external view returns (uint256);\\r\\n    function balanceOfUnderlying(address who) external view returns (uint256);\\r\\n    function setSellTaxRate(uint16 _sellTaxRate) external;\\r\\n    function setBuyTaxRate(uint16 _buyTaxRate) external;\\r\\n    function setMaxScaleFactorDecreasePercentagePerDebase(uint256 _maxScaleFactorDecreasePercentagePerDebase) external;\\r\\n    function setTaxSwapAmountThreshold(uint256 _taxSwapAmountThreshold) external;\\r\\n    function setDivertTaxToStolenPoolRate(uint256 _divertRate) external;\\r\\n}\"\r\n    },\r\n    \"src/interfaces/IRabbit.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IRabbit {\\r\\n    function getRabbitSupply() external view returns (uint256);\\r\\n    function getRabbitIdsByOwner(address _owner) external view returns (uint256[] memory);\\r\\n    function setRabbitMintIsOpen(bool _isOpen) external;\\r\\n    function setRabbitBatchSize(uint16 _batchSize) external;\\r\\n    function setRabbitMintSecondsBetweenBatches(uint32 _secondsBetweenBatches) external;\\r\\n    function setRabbitMaxPerWallet(uint8 _maxPerWallet) external;\\r\\n    function setRabbitMintPriceInKarrots(uint128 _priceInKarrots) external;\\r\\n    function setRabbitMintKarrotFeePercentageToBurn(uint16 _rabbitMintKarrotFeePercentageToBurn) external;\\r\\n    function setRabbitMintKarrotFeePercentageToStolenPool(uint16 _rabbitMintKarrotFeePercentageToStolenPool) external;\\r\\n    function setRabbitMintTier1Threshold(uint16 _tier1Threshold) external;\\r\\n    function setRabbitMintTier2Threshold(uint16 _tier2Threshold) external;\\r\\n    function setRabbitHP(uint8 _HP) external;\\r\\n    function setRabbitHitRate(uint16 _hitRate) external;\\r\\n    function setRabbitAttackIsOpen(bool _isOpen) external;\\r\\n    function setAttackCooldownSeconds(uint32 _attackCooldownSeconds) external;\\r\\n    function setAttackHPDeductionAmount(uint8 _attackHPDeductionAmount) external;\\r\\n    function setAttackHPDeductionThreshold(uint16 _attackHPDeductionThreshold) external;\\r\\n}\"\r\n    },\r\n    \"src/interfaces/IStolenPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IStolenPool {\\r\\n    function virtualDeposit(uint256 _amount) external;\\r\\n    function attack(address _sender, uint256 _rabbitTier, uint256 _rabbitId) external;\\r\\n    function updateConfig() external;\\r\\n    function setStolenPoolOpenTimestamp() external;\\r\\n    function setStolenPoolAttackIsOpen(bool _isOpen) external;\\r\\n    function setAttackBurnPercentage(uint16 _attackBurnPercentage) external;\\r\\n    function setIsApprovedDepositor(address _depositor, bool _isApproved) external;\\r\\n}\"\r\n    },\r\n    \"src/interfaces/IDexInterfacer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IDexInterfacer {\\r\\n    function updateConfig() external;\\r\\n    function depositEth() external payable;\\r\\n    function depositErc20(uint256 _amount) external;\\r\\n    function getPoolIsCreated() external view returns (bool);\\r\\n    function getPoolIsFunded() external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"src/interfaces/IKarrotChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IKarrotChef {\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\r\\n    function claim(uint256 _pid) external;\\r\\n    function attack() external;\\r\\n    function getUserStakedAmount(address _user) external view returns (uint256);\\r\\n    function getTotalStakedAmount() external view returns (uint256);\\r\\n    function setAllocationPoint(uint256 _pid, uint128 _allocPoint, bool _withUpdatePools) external;\\r\\n    function setLockDuration(uint256 _pid, uint256 _lockDuration) external;\\r\\n    function updateRewardPerBlock(uint88 _rewardPerBlock) external;\\r\\n    function setDebaseMultiplier(uint48 _debaseMultiplier) external;\\r\\n    function openKarrotChefDeposits() external;\\r\\n    function setDepositIsPaused(bool _isPaused) external;\\r\\n    function setThresholdFullProtecKarrotBalance(uint256 _thresholdFullProtecKarrotBalance) external;\\r\\n    function setClaimTaxRate(uint16 _maxTaxRate) external;\\r\\n    function setFullProtecLiquidityProportion(uint16 _fullProtecLiquidityProportion) external;\\r\\n    function getFullToChefRatio(address _user) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"src/interfaces/IFullProtec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IFullProtec {\\r\\n    function getUserStakedAmount(address _user) external view returns (uint256);\\r\\n    function getTotalStakedAmount() external view returns (uint256);\\r\\n    function getIsUserAboveThresholdToAvoidClaimTax(address _user) external view returns (bool);\\r\\n    function updateConfig() external;\\r\\n    function openFullProtecDeposits() external;\\r\\n    function setFullProtecLockDuration(uint32 _lockDuration) external;\\r\\n    function setThresholdFullProtecKarrotBalance(uint224 _thresholdFullProtecKarrotBalance) external;\\r\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/contracts/=lib/chainlink/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"foundry-devops/=lib/foundry-devops/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true,\r\n          \"optimizerSteps\": \"dhfoDgvulfnTUtnIf\"\r\n        }\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"lib/foundry-devops/src/DevOpsTools.sol\": {\r\n        \"DevOpsTools\": \"0x3fd2b64a587cc58117db334fbd51c58d256adac5\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presaleDistributorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdropDistributorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexAddress\",\"type\":\"address\"}],\"name\":\"addDexAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropDistributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attackRewardCalculatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexInterfacer\",\"outputs\":[{\"internalType\":\"contract IDexInterfacer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexInterfacerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karrotChef\",\"outputs\":[{\"internalType\":\"contract IKarrotChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karrotChefAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karrotFullProtec\",\"outputs\":[{\"internalType\":\"contract IFullProtec\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karrotFullProtecAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karrotStolenPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karrots\",\"outputs\":[{\"internalType\":\"contract IKarrotsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karrotsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karrotsPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openFullProtecDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openKarrotChefDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleDistributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rabbit\",\"outputs\":[{\"internalType\":\"contract IRabbit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rabbitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexAddress\",\"type\":\"address\"}],\"name\":\"removeDexAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCalculator\",\"outputs\":[{\"internalType\":\"contract IAttackRewardCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_attackBurnPercentage\",\"type\":\"uint16\"}],\"name\":\"setAttackBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_attackCooldownSeconds\",\"type\":\"uint32\"}],\"name\":\"setAttackCooldownSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_attackHPDeductionAmount\",\"type\":\"uint8\"}],\"name\":\"setAttackHPDeductionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_attackHPDeductionThreshold\",\"type\":\"uint16\"}],\"name\":\"setAttackHPDeductionThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_buyTaxRate\",\"type\":\"uint16\"}],\"name\":\"setBuyTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxClaimTaxRate\",\"type\":\"uint16\"}],\"name\":\"setClaimTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_depositIsPaused\",\"type\":\"bool\"}],\"name\":\"setDepositIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexInterfacerAddress\",\"type\":\"address\"}],\"name\":\"setDexInterfacerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_divertRate\",\"type\":\"uint256\"}],\"name\":\"setDivertTaxToStolenPoolRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fullProtecLiquidityProportion\",\"type\":\"uint16\"}],\"name\":\"setFullProtecLiquidityProportion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_lockDuration\",\"type\":\"uint32\"}],\"name\":\"setFullProtecLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isApproved\",\"type\":\"bool\"}],\"name\":\"setIsApprovedStolenPoolDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_karrotChefAddress\",\"type\":\"address\"}],\"name\":\"setKarrotChefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_debaseMultiplier\",\"type\":\"uint48\"}],\"name\":\"setKarrotChefDebaseMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"setKarrotChefLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoints\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setKarrotChefPoolAllocPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fullProtecAddress\",\"type\":\"address\"}],\"name\":\"setKarrotFullProtecAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stolenPoolAddress\",\"type\":\"address\"}],\"name\":\"setKarrotStolenPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_karrotTokenAddress\",\"type\":\"address\"}],\"name\":\"setKarrotTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_karrotsPoolAddress\",\"type\":\"address\"}],\"name\":\"setKarrotsPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxScaleFactorDecreasePercentagePerDebase\",\"type\":\"uint256\"}],\"name\":\"setMaxScaleFactorDecreasePercentagePerDebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleClaimContractAddress\",\"type\":\"address\"}],\"name\":\"setPresaleDistributorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rabbitAddress\",\"type\":\"address\"}],\"name\":\"setRabbitAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"setRabbitAttackIsOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rabbitBatchSize\",\"type\":\"uint16\"}],\"name\":\"setRabbitBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rabbitHP\",\"type\":\"uint8\"}],\"name\":\"setRabbitHP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rabbitHitRate\",\"type\":\"uint16\"}],\"name\":\"setRabbitHitRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rabbitMaxPerWallet\",\"type\":\"uint8\"}],\"name\":\"setRabbitMaxPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_rabbitMintIsOpen\",\"type\":\"bool\"}],\"name\":\"setRabbitMintIsOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rabbitMintKarrotFeePercentageToBurn\",\"type\":\"uint16\"}],\"name\":\"setRabbitMintKarrotFeePercentageToBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rabbitMintKarrotFeePercentageToStolenPool\",\"type\":\"uint16\"}],\"name\":\"setRabbitMintKarrotFeePercentageToStolenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_rabbitMintPriceInKarrots\",\"type\":\"uint128\"}],\"name\":\"setRabbitMintPriceInKarrots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rabbitMintSecondsBetweenBatches\",\"type\":\"uint32\"}],\"name\":\"setRabbitMintSecondsBetweenBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rabbitMintTier1Threshold\",\"type\":\"uint16\"}],\"name\":\"setRabbitMintTier1Threshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rabbitMintTier2Threshold\",\"type\":\"uint16\"}],\"name\":\"setRabbitMintTier2Threshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomizerRequesterAddress\",\"type\":\"address\"}],\"name\":\"setRandomizerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardCalculatorAddress\",\"type\":\"address\"}],\"name\":\"setRewardCalculatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellTaxRate\",\"type\":\"uint16\"}],\"name\":\"setSellTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxSwapAmountThreshold\",\"type\":\"uint256\"}],\"name\":\"setTaxSwapAmountThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint224\",\"name\":\"_thresholdFullProtecKarrotBalance\",\"type\":\"uint224\"}],\"name\":\"setThresholdFullProtecKarrotBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelockControllerAddress\",\"type\":\"address\"}],\"name\":\"setTimelockControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapFactoryAddress\",\"type\":\"address\"}],\"name\":\"setUniswapFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stolenPool\",\"outputs\":[{\"internalType\":\"contract IStolenPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOwnershipToTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"_karrotChefRewardPerBlock\",\"type\":\"uint88\"}],\"name\":\"updateKarrotChefRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConfigManager", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d7d4da7332b7d993b7910a54b2815a171bc665190000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000ca950518fd178b64567a1a29190a24b857ace8ed0000000000000000000000003654714ea55d57ebe46ed2c5e2d6234a5b73cc770000000000000000000000003654714ea55d57ebe46ed2c5e2d6234a5b73cc77", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}