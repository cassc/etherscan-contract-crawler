{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function burn(address account, uint256 amount) external;\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract ETHPool {\\r\\n    struct Depositor {\\r\\n        uint256 firstDepositTime;\\r\\n        uint256 totalDeposited;\\r\\n        bool refunded;\\r\\n        bool winner;\\r\\n    }\\r\\n\\r\\n    IERC20 public prizeToken;\\r\\n    address public admin;\\r\\n    bytes32 public commitment;\\r\\n    address public winner;\\r\\n    uint256 public prizeValue;\\r\\n    uint256 public prizeDrawStartTime;  // New variable\\r\\n\\r\\n    string public prizeName;\\r\\n    string public prizeDescription;\\r\\n    uint256 public prizeDrawEndTime;\\r\\n    uint256 public totalPrizePool;\\r\\n    uint256 public uniqueDepositorsCount;\\r\\n    uint256 public burnedPRIZE;\\r\\n\\r\\n    mapping(address => Depositor) public depositors;\\r\\n    mapping(address => bool) private uniqueDepositors;\\r\\n\\r\\n    address[] public participants;\\r\\n\\r\\n    event Deposited(address indexed user, uint256 amount);\\r\\n    event WinnerSet(address winner);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyAdminOrSpecialAddress() {\\r\\n        require(msg.sender == admin || msg.sender == 0xFcbEB96e56088Bc5909FFF14C59eEAaA87C7204f, \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier beforeDraw() {\\r\\n        require(block.timestamp < prizeDrawEndTime, \\\"Draw has ended\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier afterDrawStart() {\\r\\n        require(block.timestamp >= prizeDrawStartTime, \\\"Draw hasn't started yet\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPrizeToken() {\\r\\n        require(msg.sender == address(prizeToken), \\\"Only prizeToken can call this\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory _prizeName,\\r\\n        string memory _prizeDescription,\\r\\n        uint256 _prizeDrawStartTime,    // New parameter\\r\\n        uint256 _prizeDrawEndTime,\\r\\n        IERC20 _prizeToken,\\r\\n        bytes32 _commitment,\\r\\n        uint256 _prizeValue\\r\\n    ) {\\r\\n        prizeName = _prizeName;\\r\\n        prizeDescription = _prizeDescription;\\r\\n        prizeDrawStartTime = _prizeDrawStartTime;   // Set the new variable\\r\\n        prizeDrawEndTime = _prizeDrawEndTime;\\r\\n        prizeToken = _prizeToken;\\r\\n        commitment = _commitment;\\r\\n        admin = msg.sender;\\r\\n        prizeValue = _prizeValue;\\r\\n    }\\r\\n\\r\\n    function deposit(address depositor, uint256 amount) external onlyPrizeToken beforeDraw afterDrawStart {\\r\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\r\\n        \\r\\n        // Update depositor info\\r\\n        depositors[depositor].totalDeposited += amount;\\r\\n        totalPrizePool += amount;\\r\\n\\r\\n        if (!uniqueDepositors[depositor]) {\\r\\n            uniqueDepositors[depositor] = true;\\r\\n            depositors[depositor].firstDepositTime = block.timestamp;\\r\\n            uniqueDepositorsCount++;\\r\\n            participants.push(depositor);\\r\\n        }\\r\\n        \\r\\n        emit Deposited(depositor, amount);\\r\\n    }\\r\\n\\r\\n    function setWinner(address _winner) external onlyAdminOrSpecialAddress {\\r\\n        require(winner == address(0), \\\"Winner already set\\\");\\r\\n        winner = _winner;\\r\\n        \\r\\n        depositors[winner].winner = true;\\r\\n\\r\\n        // Transfer prize to the winner\\r\\n        payable(winner).transfer(address(this).balance);\\r\\n        \\r\\n        uint256 amountToBurn = depositors[winner].totalDeposited;\\r\\n        burnedPRIZE = amountToBurn;\\r\\n        prizeToken.transfer(0x000000000000000000000000000000000000dEaD, amountToBurn);\\r\\n\\r\\n        emit WinnerSet(winner);\\r\\n    }\\r\\n\\r\\n    function claimRefund() external {\\r\\n        require(winner != address(0), \\\"Winner not yet set\\\");\\r\\n        require(msg.sender != winner, \\\"Winner cannot claim refund\\\");\\r\\n        require(depositors[msg.sender].totalDeposited > 0, \\\"No deposit found\\\");\\r\\n        require(!depositors[msg.sender].refunded, \\\"Refund already claimed\\\");\\r\\n        \\r\\n        uint256 refundAmount = depositors[msg.sender].totalDeposited;\\r\\n        depositors[msg.sender].totalDeposited = 0;\\r\\n        depositors[msg.sender].refunded = true;\\r\\n\\r\\n        prizeToken.transfer(msg.sender, refundAmount);\\r\\n    }\\r\\n\\r\\n    function getAllParticipants() external view returns (address[] memory) {\\r\\n        return participants;\\r\\n    }\\r\\n\\r\\n    function revealSecretAndVerify(bytes32 secret, string memory knownComponent) view  external onlyAdmin {\\r\\n        require(keccak256(abi.encodePacked(secret, knownComponent)) == commitment, \\\"Invalid reveal\\\");\\r\\n    }\\r\\n\\r\\n    // Allows the admin to deposit ETH as the prize\\r\\n    function depositPrize() external payable onlyAdmin {}\\r\\n\\r\\n    // Checks the balance of ETH in the contract\\r\\n    function checkPrizeBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_prizeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_prizeDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_prizeDrawStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prizeDrawEndTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_prizeToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_prizeValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedPRIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPrizeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPrize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstDepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeDrawEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeDrawStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"knownComponent\",\"type\":\"string\"}],\"name\":\"revealSecretAndVerify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"setWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueDepositorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ETHPool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000064e80a300000000000000000000000000000000000000000000000000000000064e80b98000000000000000000000000ff9b4539fe3cd5fbddc07d1d1bb12cce5b649acf4dfccbc5f0f5942812a685a824b7ae89861e1d4cbc296a8cce12ed069b1f0172000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000076c6173746f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c46470000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}