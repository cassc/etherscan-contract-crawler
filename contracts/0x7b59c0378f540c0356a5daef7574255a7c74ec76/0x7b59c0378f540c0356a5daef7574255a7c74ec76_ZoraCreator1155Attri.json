{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/delegation/ZoraCreator1155Attribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IMinter1155} from \\\"../interfaces/IMinter1155.sol\\\";\\nimport {IZoraCreator1155} from \\\"../interfaces/IZoraCreator1155.sol\\\";\\nimport {ICreatorRoyaltiesControl} from \\\"../interfaces/ICreatorRoyaltiesControl.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {ZoraCreatorFixedPriceSaleStrategy} from \\\"../minters/fixed-price/ZoraCreatorFixedPriceSaleStrategy.sol\\\";\\n\\nstruct ContractCreationConfig {\\n    // Creator/admin of the created contract.  Must match the account that signed the message\\n    address contractAdmin;\\n    // Metadata URI for the created contract\\n    string contractURI;\\n    // Name of the created contract\\n    string contractName;\\n}\\n\\nstruct TokenCreationConfig {\\n    // Metadata URI for the created token\\n    string tokenURI;\\n    // Max supply of the created token\\n    uint256 maxSupply;\\n    // Max tokens that can be minted for an address, 0 if unlimited\\n    uint64 maxTokensPerAddress;\\n    // Price per token in eth wei. 0 for a free mint.\\n    uint96 pricePerToken;\\n    // The start time of the mint, 0 for immediate.  Prevents signatures from being used until the start time.\\n    uint64 mintStart;\\n    // The duration of the mint, starting from the first mint of this token. 0 for infinite\\n    uint64 mintDuration;\\n    // RoyaltyMintSchedule for created tokens. Every nth token will go to the royalty recipient.\\n    uint32 royaltyMintSchedule;\\n    // RoyaltyBPS for created tokens. The royalty amount in basis points for secondary sales.\\n    uint32 royaltyBPS;\\n    // RoyaltyRecipient for created tokens. The address that will receive the royalty payments.\\n    address royaltyRecipient;\\n    // Fixed price minter address\\n    address fixedPriceMinter;\\n}\\n\\nstruct PremintConfig {\\n    // The config for the token to be created\\n    TokenCreationConfig tokenConfig;\\n    // Unique id of the token, used to ensure that multiple signatures can't be used to create the same intended token.\\n    // only one signature per token id, scoped to the contract hash can be executed.\\n    uint32 uid;\\n    // Version of this premint, scoped to the uid and contract.  Not used for logic in the contract, but used externally to track the newest version\\n    uint32 version;\\n    // If executing this signature results in preventing any signature with this uid from being minted.\\n    bool deleted;\\n}\\n\\n/// @title Library for enables a creator to signal intent to create a Zora erc1155 contract or new token on that\\n/// contract by signing a transaction but not paying gas, and have a third party/collector pay the gas\\n/// by executing the transaction.  Functions are exposed as external to allow contracts to import this lib and not increase their\\n/// size.\\n/// @author @oveddan\\nlibrary ZoraCreator1155Attribution {\\n    /* start eip712 functionality */\\n    string internal constant NAME = \\\"Preminter\\\";\\n    string internal constant VERSION = \\\"1\\\";\\n    bytes32 internal constant HASHED_NAME = keccak256(bytes(NAME));\\n    bytes32 internal constant HASHED_VERSION = keccak256(bytes(VERSION));\\n    bytes32 internal constant TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /**\\n     * @dev Returns the domain separator for the specified chain.\\n     */\\n    function _domainSeparatorV4(uint256 chainId, address verifyingContract) internal pure returns (bytes32) {\\n        return _buildDomainSeparator(HASHED_NAME, HASHED_VERSION, verifyingContract, chainId);\\n    }\\n\\n    function _buildDomainSeparator(bytes32 nameHash, bytes32 versionHash, address verifyingContract, uint256 chainId) private pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, nameHash, versionHash, chainId, verifyingContract));\\n    }\\n\\n    function _hashTypedDataV4(bytes32 structHash, address verifyingContract, uint256 chainId) private pure returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(chainId, verifyingContract), structHash);\\n    }\\n\\n    /* end eip712 functionality */\\n\\n    function recoverSigner(\\n        PremintConfig calldata premintConfig,\\n        bytes calldata signature,\\n        address erc1155Contract,\\n        uint256 chainId\\n    ) internal pure returns (address signatory) {\\n        // first validate the signature - the creator must match the signer of the message\\n        return recoverSignerHashed(hashPremint(premintConfig), signature, erc1155Contract, chainId);\\n    }\\n\\n    function recoverSignerHashed(\\n        bytes32 hashedPremintConfig,\\n        bytes calldata signature,\\n        address erc1155Contract,\\n        uint256 chainId\\n    ) public pure returns (address signatory) {\\n        // first validate the signature - the creator must match the signer of the message\\n        bytes32 digest = _hashTypedDataV4(\\n            hashedPremintConfig,\\n            // here we pass the current contract and chain id, ensuring that the message\\n            // only works for the current chain and contract id\\n            erc1155Contract,\\n            chainId\\n        );\\n\\n        signatory = ECDSAUpgradeable.recover(digest, signature);\\n    }\\n\\n    /// Gets hash data to sign for a premint.  Allows specifying a different chain id and contract address so that the signature\\n    /// can be verified on a different chain.\\n    /// @param erc1155Contract Contract address that signature is to be verified against\\n    /// @param chainId Chain id that signature is to be verified on\\n    function premintHashedTypeDataV4(PremintConfig calldata premintConfig, address erc1155Contract, uint256 chainId) external pure returns (bytes32) {\\n        // build the struct hash to be signed\\n        // here we pass the chain id, allowing the message to be signed for another chain\\n        return _hashTypedDataV4(hashPremint(premintConfig), erc1155Contract, chainId);\\n    }\\n\\n    bytes32 constant ATTRIBUTION_DOMAIN =\\n        keccak256(\\n            \\\"CreatorAttribution(TokenCreationConfig tokenConfig,uint32 uid,uint32 version,bool deleted)TokenCreationConfig(string tokenURI,uint256 maxSupply,uint64 maxTokensPerAddress,uint96 pricePerToken,uint64 mintStart,uint64 mintDuration,uint32 royaltyMintSchedule,uint32 royaltyBPS,address royaltyRecipient,address fixedPriceMinter)\\\"\\n        );\\n\\n    function hashPremint(PremintConfig calldata premintConfig) public pure returns (bytes32) {\\n        return\\n            keccak256(abi.encode(ATTRIBUTION_DOMAIN, _hashToken(premintConfig.tokenConfig), premintConfig.uid, premintConfig.version, premintConfig.deleted));\\n    }\\n\\n    bytes32 constant TOKEN_DOMAIN =\\n        keccak256(\\n            \\\"TokenCreationConfig(string tokenURI,uint256 maxSupply,uint64 maxTokensPerAddress,uint96 pricePerToken,uint64 mintStart,uint64 mintDuration,uint32 royaltyMintSchedule,uint32 royaltyBPS,address royaltyRecipient,address fixedPriceMinter)\\\"\\n        );\\n\\n    function _hashToken(TokenCreationConfig calldata tokenConfig) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    TOKEN_DOMAIN,\\n                    _stringHash(tokenConfig.tokenURI),\\n                    tokenConfig.maxSupply,\\n                    tokenConfig.maxTokensPerAddress,\\n                    tokenConfig.pricePerToken,\\n                    tokenConfig.mintStart,\\n                    tokenConfig.mintDuration,\\n                    tokenConfig.royaltyMintSchedule,\\n                    tokenConfig.royaltyBPS,\\n                    tokenConfig.royaltyRecipient,\\n                    tokenConfig.fixedPriceMinter\\n                )\\n            );\\n    }\\n\\n    function _stringHash(string calldata value) private pure returns (bytes32) {\\n        return keccak256(bytes(value));\\n    }\\n}\\n\\n/// @notice Utilitiy library to setup tokens created via premint.  Functions exposed as external to not increase contract size in calling contract.\\n/// @author oveddan\\nlibrary PremintTokenSetup {\\n    uint256 constant PERMISSION_BIT_MINTER = 2 ** 2;\\n\\n    function makeSetupNewTokenCalls(\\n        uint256 newTokenId,\\n        address contractAdmin,\\n        TokenCreationConfig calldata tokenConfig\\n    ) external view returns (bytes[] memory calls) {\\n        calls = new bytes[](3);\\n\\n        address fixedPriceMinterAddress = tokenConfig.fixedPriceMinter;\\n        // build array of the calls to make\\n        // get setup actions and invoke them\\n        // set up the sales strategy\\n        // first, grant the fixed price sale strategy minting capabilities on the token\\n        // tokenContract.addPermission(newTokenId, address(fixedPriceMinter), PERMISSION_BIT_MINTER);\\n        calls[0] = abi.encodeWithSelector(IZoraCreator1155.addPermission.selector, newTokenId, fixedPriceMinterAddress, PERMISSION_BIT_MINTER);\\n\\n        // set the sales config on that token\\n        calls[1] = abi.encodeWithSelector(\\n            IZoraCreator1155.callSale.selector,\\n            newTokenId,\\n            IMinter1155(fixedPriceMinterAddress),\\n            abi.encodeWithSelector(\\n                ZoraCreatorFixedPriceSaleStrategy.setSale.selector,\\n                newTokenId,\\n                _buildNewSalesConfig(contractAdmin, tokenConfig.pricePerToken, tokenConfig.maxTokensPerAddress, tokenConfig.mintDuration)\\n            )\\n        );\\n\\n        // set the royalty config on that token:\\n        calls[2] = abi.encodeWithSelector(\\n            IZoraCreator1155.updateRoyaltiesForToken.selector,\\n            newTokenId,\\n            ICreatorRoyaltiesControl.RoyaltyConfiguration({\\n                royaltyBPS: tokenConfig.royaltyBPS,\\n                royaltyRecipient: tokenConfig.royaltyRecipient,\\n                royaltyMintSchedule: tokenConfig.royaltyMintSchedule\\n            })\\n        );\\n    }\\n\\n    function _buildNewSalesConfig(\\n        address creator,\\n        uint96 pricePerToken,\\n        uint64 maxTokensPerAddress,\\n        uint64 duration\\n    ) private view returns (ZoraCreatorFixedPriceSaleStrategy.SalesConfig memory) {\\n        uint64 saleStart = uint64(block.timestamp);\\n        uint64 saleEnd = duration == 0 ? type(uint64).max : saleStart + duration;\\n\\n        return\\n            ZoraCreatorFixedPriceSaleStrategy.SalesConfig({\\n                pricePerToken: pricePerToken,\\n                saleStart: saleStart,\\n                saleEnd: saleEnd,\\n                maxTokensPerAddress: maxTokensPerAddress,\\n                fundsRecipient: creator\\n            });\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMinter1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC165Upgradeable} from \\\"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\\\";\\nimport {ICreatorCommands} from \\\"./ICreatorCommands.sol\\\";\\n\\n/// @notice Minter standard interface\\n/// @dev Minters need to confirm to the ERC165 selector of type(IMinter1155).interfaceId\\ninterface IMinter1155 is IERC165Upgradeable {\\n    function requestMint(\\n        address sender,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 ethValueSent,\\n        bytes calldata minterArguments\\n    ) external returns (ICreatorCommands.CommandSet memory commands);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IZoraCreator1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC165Upgradeable} from \\\"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\\\";\\nimport {IERC1155MetadataURIUpgradeable} from \\\"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport {IZoraCreator1155TypesV1} from \\\"../nft/IZoraCreator1155TypesV1.sol\\\";\\nimport {IZoraCreator1155Errors} from \\\"./IZoraCreator1155Errors.sol\\\";\\nimport {IRenderer1155} from \\\"../interfaces/IRenderer1155.sol\\\";\\nimport {IMinter1155} from \\\"../interfaces/IMinter1155.sol\\\";\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\nimport {IVersionedContract} from \\\"./IVersionedContract.sol\\\";\\nimport {ICreatorRoyaltiesControl} from \\\"../interfaces/ICreatorRoyaltiesControl.sol\\\";\\nimport {PremintConfig} from \\\"../delegation/ZoraCreator1155Attribution.sol\\\";\\n\\n/*\\n\\n\\n             \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591              \\n        \u2591\u2591\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \\n      \u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591      \\n    \u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n   \u2591\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n   \u2591\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n    \u2591\u2591\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n    \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591    \\n      \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591      \\n          \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2591\u2591\u2591          \\n\\n               OURS TRULY,\\n\\n */\\n\\n/// @notice Main interface for the ZoraCreator1155 contract\\n/// @author @iainnash / @tbtstl\\ninterface IZoraCreator1155 is IZoraCreator1155TypesV1, IZoraCreator1155Errors, IVersionedContract, IOwnable, IERC1155MetadataURIUpgradeable {\\n    function PERMISSION_BIT_ADMIN() external returns (uint256);\\n\\n    function PERMISSION_BIT_MINTER() external returns (uint256);\\n\\n    function PERMISSION_BIT_SALES() external returns (uint256);\\n\\n    function PERMISSION_BIT_METADATA() external returns (uint256);\\n\\n    /// @notice Used to label the configuration update type\\n    enum ConfigUpdate {\\n        OWNER,\\n        FUNDS_RECIPIENT,\\n        TRANSFER_HOOK\\n    }\\n    event ConfigUpdated(address indexed updater, ConfigUpdate indexed updateType, ContractConfig newConfig);\\n\\n    event UpdatedToken(address indexed from, uint256 indexed tokenId, TokenData tokenData);\\n    event SetupNewToken(uint256 indexed tokenId, address indexed sender, string newURI, uint256 maxSupply);\\n\\n    function setOwner(address newOwner) external;\\n\\n    event ContractRendererUpdated(IRenderer1155 renderer);\\n    event ContractMetadataUpdated(address indexed updater, string uri, string name);\\n    event Purchased(address indexed sender, address indexed minter, uint256 indexed tokenId, uint256 quantity, uint256 value);\\n    event CreatorAttribution(bytes32 structHash, string domainName, string version, address creator, bytes signature);\\n\\n    /// @notice Only allow minting one token id at time\\n    /// @dev Mint contract function that calls the underlying sales function for commands\\n    /// @param minter Address for the minter\\n    /// @param tokenId tokenId to mint, set to 0 for new tokenId\\n    /// @param quantity to mint\\n    /// @param minterArguments calldata for the minter contracts\\n    function mint(IMinter1155 minter, uint256 tokenId, uint256 quantity, bytes calldata minterArguments) external payable;\\n\\n    function adminMint(address recipient, uint256 tokenId, uint256 quantity, bytes memory data) external;\\n\\n    function adminMintBatch(address recipient, uint256[] memory tokenIds, uint256[] memory quantities, bytes memory data) external;\\n\\n    function burnBatch(address user, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /// @notice Contract call to setupNewToken\\n    /// @param tokenURI URI for the token\\n    /// @param maxSupply maxSupply for the token, set to 0 for open edition\\n    function setupNewToken(string memory tokenURI, uint256 maxSupply) external returns (uint256 tokenId);\\n\\n    function delegateSetupNewToken(PremintConfig calldata premintConfig, bytes calldata signature, address sender) external returns (uint256 newTokenId);\\n\\n    function updateTokenURI(uint256 tokenId, string memory _newURI) external;\\n\\n    function updateContractMetadata(string memory _newURI, string memory _newName) external;\\n\\n    // Public interface for `setTokenMetadataRenderer(uint256, address) has been deprecated.\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function assumeLastTokenIdMatches(uint256 tokenId) external;\\n\\n    function updateRoyaltiesForToken(uint256 tokenId, ICreatorRoyaltiesControl.RoyaltyConfiguration memory royaltyConfiguration) external;\\n\\n    function addPermission(uint256 tokenId, address user, uint256 permissionBits) external;\\n\\n    function removePermission(uint256 tokenId, address user, uint256 permissionBits) external;\\n\\n    function isAdminOrRole(address user, uint256 tokenId, uint256 role) external view returns (bool);\\n\\n    function getTokenInfo(uint256 tokenId) external view returns (TokenData memory);\\n\\n    function callRenderer(uint256 tokenId, bytes memory data) external;\\n\\n    function callSale(uint256 tokenId, IMinter1155 salesConfig, bytes memory data) external;\\n\\n    function mintFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICreatorRoyaltiesControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface ICreatorRoyaltiesControl is IERC2981 {\\n    /// @notice The RoyaltyConfiguration struct is used to store the royalty configuration for a given token.\\n    /// @param royaltyMintSchedule Every nth token will go to the royalty recipient.\\n    /// @param royaltyBPS The royalty amount in basis points for secondary sales.\\n    /// @param royaltyRecipient The address that will receive the royalty payments.\\n    struct RoyaltyConfiguration {\\n        uint32 royaltyMintSchedule;\\n        uint32 royaltyBPS;\\n        address royaltyRecipient;\\n    }\\n\\n    /// @notice Thrown when a user tries to have 100% supply royalties\\n    error InvalidMintSchedule();\\n\\n    /// @notice Event emitted when royalties are updated\\n    event UpdatedRoyalties(uint256 indexed tokenId, address indexed user, RoyaltyConfiguration configuration);\\n\\n    /// @notice External data getter to get royalties for a token\\n    /// @param tokenId tokenId to get royalties configuration for\\n    function getRoyalties(uint256 tokenId) external view returns (RoyaltyConfiguration memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/minters/fixed-price/ZoraCreatorFixedPriceSaleStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {Enjoy} from \\\"_imagine/mint/Enjoy.sol\\\";\\nimport {IMinter1155} from \\\"../../interfaces/IMinter1155.sol\\\";\\nimport {ICreatorCommands} from \\\"../../interfaces/ICreatorCommands.sol\\\";\\nimport {SaleStrategy} from \\\"../SaleStrategy.sol\\\";\\nimport {SaleCommandHelper} from \\\"../utils/SaleCommandHelper.sol\\\";\\nimport {LimitedMintPerAddress} from \\\"../utils/LimitedMintPerAddress.sol\\\";\\n\\n/*\\n\\n\\n             \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591              \\n        \u2591\u2591\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \\n      \u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591      \\n    \u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n   \u2591\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n   \u2591\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n    \u2591\u2591\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n    \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591    \\n      \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591      \\n          \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2591\u2591\u2591          \\n\\n               OURS TRULY,\\n\\n\\n    github.com/ourzora/zora-1155-contracts\\n\\n*/\\n\\n/// @title ZoraCreatorFixedPriceSaleStrategy\\n/// @notice A sale strategy for ZoraCreator that allows for fixed price sales over a given time period\\n/// @author @iainnash / @tbtstl\\ncontract ZoraCreatorFixedPriceSaleStrategy is Enjoy, SaleStrategy, LimitedMintPerAddress {\\n    struct SalesConfig {\\n        /// @notice Unix timestamp for the sale start\\n        uint64 saleStart;\\n        /// @notice Unix timestamp for the sale end\\n        uint64 saleEnd;\\n        /// @notice Max tokens that can be minted for an address, 0 if unlimited\\n        uint64 maxTokensPerAddress;\\n        /// @notice Price per token in eth wei\\n        uint96 pricePerToken;\\n        /// @notice Funds recipient (0 if no different funds recipient than the contract global)\\n        address fundsRecipient;\\n    }\\n\\n    // target -> tokenId -> settings\\n    mapping(address => mapping(uint256 => SalesConfig)) internal salesConfigs;\\n\\n    using SaleCommandHelper for ICreatorCommands.CommandSet;\\n\\n    function contractURI() external pure override returns (string memory) {\\n        return \\\"https://github.com/ourzora/zora-1155-contracts/\\\";\\n    }\\n\\n    /// @notice The name of the sale strategy\\n    function contractName() external pure override returns (string memory) {\\n        return \\\"Fixed Price Sale Strategy\\\";\\n    }\\n\\n    /// @notice The version of the sale strategy\\n    function contractVersion() external pure override returns (string memory) {\\n        return \\\"1.1.0\\\";\\n    }\\n\\n    error WrongValueSent();\\n    error SaleEnded();\\n    error SaleHasNotStarted();\\n\\n    event SaleSet(address indexed mediaContract, uint256 indexed tokenId, SalesConfig salesConfig);\\n    event MintComment(address indexed sender, address indexed tokenContract, uint256 indexed tokenId, uint256 quantity, string comment);\\n\\n    /// @notice Compiles and returns the commands needed to mint a token using this sales strategy\\n    /// @param tokenId The token ID to mint\\n    /// @param quantity The quantity of tokens to mint\\n    /// @param ethValueSent The amount of ETH sent with the transaction\\n    /// @param minterArguments The arguments passed to the minter, which should be the address to mint to\\n    function requestMint(\\n        address,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 ethValueSent,\\n        bytes calldata minterArguments\\n    ) external returns (ICreatorCommands.CommandSet memory commands) {\\n        address mintTo;\\n        string memory comment = \\\"\\\";\\n        if (minterArguments.length == 32) {\\n            mintTo = abi.decode(minterArguments, (address));\\n        } else {\\n            (mintTo, comment) = abi.decode(minterArguments, (address, string));\\n        }\\n\\n        SalesConfig storage config = salesConfigs[msg.sender][tokenId];\\n\\n        // If sales config does not exist this first check will always fail.\\n\\n        // Check sale end\\n        if (block.timestamp > config.saleEnd) {\\n            revert SaleEnded();\\n        }\\n\\n        // Check sale start\\n        if (block.timestamp < config.saleStart) {\\n            revert SaleHasNotStarted();\\n        }\\n\\n        // Check value sent\\n        if (config.pricePerToken * quantity != ethValueSent) {\\n            revert WrongValueSent();\\n        }\\n\\n        // Check minted per address limit\\n        if (config.maxTokensPerAddress > 0) {\\n            _requireMintNotOverLimitAndUpdate(config.maxTokensPerAddress, quantity, msg.sender, tokenId, mintTo);\\n        }\\n\\n        bool shouldTransferFunds = config.fundsRecipient != address(0);\\n        commands.setSize(shouldTransferFunds ? 2 : 1);\\n\\n        // Mint command\\n        commands.mint(mintTo, tokenId, quantity);\\n\\n        if (bytes(comment).length > 0) {\\n            emit MintComment(mintTo, msg.sender, tokenId, quantity, comment);\\n        }\\n\\n        // Should transfer funds if funds recipient is set to a non-default address\\n        if (shouldTransferFunds) {\\n            commands.transfer(config.fundsRecipient, ethValueSent);\\n        }\\n    }\\n\\n    /// @notice Sets the sale config for a given token\\n    function setSale(uint256 tokenId, SalesConfig memory salesConfig) external {\\n        salesConfigs[msg.sender][tokenId] = salesConfig;\\n\\n        // Emit event\\n        emit SaleSet(msg.sender, tokenId, salesConfig);\\n    }\\n\\n    /// @notice Deletes the sale config for a given token\\n    function resetSale(uint256 tokenId) external override {\\n        delete salesConfigs[msg.sender][tokenId];\\n\\n        // Deleted sale emit event\\n        emit SaleSet(msg.sender, tokenId, salesConfigs[msg.sender][tokenId]);\\n    }\\n\\n    /// @notice Returns the sale config for a given token\\n    function sale(address tokenContract, uint256 tokenId) external view returns (SalesConfig memory) {\\n        return salesConfigs[tokenContract][tokenId];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual override(LimitedMintPerAddress, SaleStrategy) returns (bool) {\\n        return super.supportsInterface(interfaceId) || LimitedMintPerAddress.supportsInterface(interfaceId) || SaleStrategy.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"src/interfaces/ICreatorCommands.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice Creator Commands used by minter modules passed back to the main modules\\ninterface ICreatorCommands {\\n    /// @notice This enum is used to define supported creator action types.\\n    /// This can change in the future\\n    enum CreatorActions {\\n        // No operation - also the default for mintings that may not return a command\\n        NO_OP,\\n        // Send ether\\n        SEND_ETH,\\n        // Mint operation\\n        MINT\\n    }\\n\\n    /// @notice This command is for\\n    struct Command {\\n        // Method for operation\\n        CreatorActions method;\\n        // Arguments used for this operation\\n        bytes args;\\n    }\\n\\n    /// @notice This command set is returned from the minter back to the user\\n    struct CommandSet {\\n        Command[] commands;\\n        uint256 at;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"src/nft/IZoraCreator1155TypesV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ITransferHookReceiver} from \\\"../interfaces/ITransferHookReceiver.sol\\\";\\n\\n/*\\n\\n\\n             \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591              \\n        \u2591\u2591\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \\n      \u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591      \\n    \u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n   \u2591\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n   \u2591\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n    \u2591\u2591\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n    \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591    \\n      \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591      \\n          \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2591\u2591\u2591          \\n\\n               OURS TRULY,\\n\\n */\\n\\n/// Imagine. Mint. Enjoy.\\n/// @notice Interface for types used across the ZoraCreator1155 contract\\n/// @author @iainnash / @tbtstl\\ninterface IZoraCreator1155TypesV1 {\\n    /// @notice Used to store individual token data\\n    struct TokenData {\\n        string uri;\\n        uint256 maxSupply;\\n        uint256 totalMinted;\\n    }\\n\\n    /// @notice Used to store contract-level configuration\\n    struct ContractConfig {\\n        address owner;\\n        uint96 __gap1;\\n        address payable fundsRecipient;\\n        uint96 __gap2;\\n        ITransferHookReceiver transferHook;\\n        uint96 __gap3;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IZoraCreator1155Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IZoraCreator1155Errors {\\n    error Call_TokenIdMismatch();\\n    error TokenIdMismatch(uint256 expected, uint256 actual);\\n    error UserMissingRoleForToken(address user, uint256 tokenId, uint256 role);\\n\\n    error Config_TransferHookNotSupported(address proposedAddress);\\n\\n    error Mint_InsolventSaleTransfer();\\n    error Mint_ValueTransferFail();\\n    error Mint_TokenIDMintNotAllowed();\\n    error Mint_UnknownCommand();\\n\\n    error Burn_NotOwnerOrApproved(address operator, address user);\\n\\n    error NewOwnerNeedsToBeAdmin();\\n\\n    error Sale_CannotCallNonSalesContract(address targetContract);\\n\\n    error CallFailed(bytes reason);\\n    error Renderer_NotValidRendererContract();\\n\\n    error ETHWithdrawFailed(address recipient, uint256 amount);\\n    error FundsWithdrawInsolvent(uint256 amount, uint256 contractValue);\\n    error ProtocolRewardsWithdrawFailed(address caller, address recipient, uint256 amount);\\n\\n    error CannotMintMoreTokens(uint256 tokenId, uint256 quantity, uint256 totalMinted, uint256 maxSupply);\\n\\n    error MintNotYetStarted();\\n    error PremintDeleted();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRenderer1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC165Upgradeable} from \\\"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\\\";\\n\\n/// @dev IERC165 type required\\ninterface IRenderer1155 is IERC165Upgradeable {\\n    /// @notice Called for assigned tokenId, or when token id is globally set to a renderer\\n    /// @dev contract target is assumed to be msg.sender\\n    /// @param tokenId token id to get uri for\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    /// @notice Only called for tokenId == 0\\n    /// @dev contract target is assumed to be msg.sender\\n    function contractURI() external view returns (string memory);\\n\\n    /// @notice Sets up renderer from contract\\n    /// @param initData data to setup renderer with\\n    /// @dev contract target is assumed to be msg.sender\\n    function setup(bytes memory initData) external;\\n\\n    // IERC165 type required \u2013\u00a0set in base helper\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IOwnable {\\n    function owner() external returns (address);\\n\\n    event OwnershipTransferred(address lastOwner, address newOwner);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVersionedContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IVersionedContract {\\n    function contractVersion() external returns (string memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"_imagine/mint/Enjoy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/*\\n\\n\\n\\n\\n\\n             \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591              \\n        \u2591\u2591\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \\n      \u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591      \\n    \u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n   \u2591\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n  \u2591\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n   \u2591\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \\n    \u2591\u2591\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \\n    \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591    \\n      \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591      \\n          \u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2591\u2591\u2591          \\n\\n               OURS TRULY,\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n */\\n\\ninterface Enjoy {\\n\\n}\\n\"\r\n    },\r\n    \"src/minters/SaleStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC165Upgradeable} from \\\"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\\\";\\nimport {IMinter1155} from \\\"../interfaces/IMinter1155.sol\\\";\\nimport {IContractMetadata} from \\\"../interfaces/IContractMetadata.sol\\\";\\nimport {IVersionedContract} from \\\"../interfaces/IVersionedContract.sol\\\";\\n\\n/// @notice Sales Strategy Helper contract template on top of IMinter1155\\n/// @author @iainnash / @tbtstl\\nabstract contract SaleStrategy is IMinter1155, IVersionedContract, IContractMetadata {\\n    /// @notice This function resets the sales configuration for a given tokenId and contract.\\n    /// @dev This function is intentioned to be called directly from the affected sales contract\\n    function resetSale(uint256 tokenId) external virtual;\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return interfaceId == type(IMinter1155).interfaceId || interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/minters/utils/SaleCommandHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ICreatorCommands} from \\\"../../interfaces/ICreatorCommands.sol\\\";\\n\\n/// @title SaleCommandHelper\\n/// @notice Helper library for creating commands for the sale contract\\n/// @author @iainnash / @tbtstl\\nlibrary SaleCommandHelper {\\n    /// @notice Sets the size of commands and initializes command array. Empty entries are skipped by the resolver.\\n    /// @dev Beware: this removes all previous command entries from memory\\n    /// @param commandSet command set struct storage.\\n    /// @param size size to set for the new struct\\n    function setSize(ICreatorCommands.CommandSet memory commandSet, uint256 size) internal pure {\\n        commandSet.commands = new ICreatorCommands.Command[](size);\\n    }\\n\\n    /// @notice Creates a command to mint a token\\n    /// @param commandSet The command set to add the command to\\n    /// @param to The address to mint to\\n    /// @param tokenId The token ID to mint\\n    /// @param quantity The quantity of tokens to mint\\n    function mint(ICreatorCommands.CommandSet memory commandSet, address to, uint256 tokenId, uint256 quantity) internal pure {\\n        unchecked {\\n            commandSet.commands[commandSet.at++] = ICreatorCommands.Command({\\n                method: ICreatorCommands.CreatorActions.MINT,\\n                args: abi.encode(to, tokenId, quantity)\\n            });\\n        }\\n    }\\n\\n    /// @notice Creates a command to transfer ETH\\n    /// @param commandSet The command set to add the command to\\n    /// @param to The address to transfer to\\n    /// @param amount The amount of ETH to transfer\\n    function transfer(ICreatorCommands.CommandSet memory commandSet, address to, uint256 amount) internal pure {\\n        unchecked {\\n            commandSet.commands[commandSet.at++] = ICreatorCommands.Command({method: ICreatorCommands.CreatorActions.SEND_ETH, args: abi.encode(to, amount)});\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/minters/utils/LimitedMintPerAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ILimitedMintPerAddress} from \\\"../../interfaces/ILimitedMintPerAddress.sol\\\";\\n\\ncontract LimitedMintPerAddress is ILimitedMintPerAddress {\\n    /// @notice Storage for slot to check user mints\\n    /// @notice target contract -> tokenId -> minter user -> numberMinted\\n    /// @dev No gap or stroage interface since this is used within non-upgradeable contracts\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) internal mintedPerAddress;\\n\\n    function getMintedPerWallet(address tokenContract, uint256 tokenId, address wallet) external view returns (uint256) {\\n        return mintedPerAddress[tokenContract][tokenId][wallet];\\n    }\\n\\n    function _requireMintNotOverLimitAndUpdate(uint256 limit, uint256 numRequestedMint, address tokenContract, uint256 tokenId, address wallet) internal {\\n        mintedPerAddress[tokenContract][tokenId][wallet] += numRequestedMint;\\n        if (mintedPerAddress[tokenContract][tokenId][wallet] > limit) {\\n            revert UserExceedsMintLimit(wallet, limit, mintedPerAddress[tokenContract][tokenId][wallet]);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n        return interfaceId == type(ILimitedMintPerAddress).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITransferHookReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC165Upgradeable} from \\\"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\\\";\\n\\ninterface ITransferHookReceiver is IERC165Upgradeable {\\n    /// @notice Token transfer batch callback\\n    /// @param target target contract for transfer\\n    /// @param operator operator address for transfer\\n    /// @param from user address for amount transferred\\n    /// @param to user address for amount transferred\\n    /// @param ids list of token ids transferred\\n    /// @param amounts list of values transferred\\n    /// @param data data as perscribed by 1155 standard\\n    function onTokenTransferBatch(\\n        address target,\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    /// @notice Token transfer batch callback\\n    /// @param target target contract for transfer\\n    /// @param operator operator address for transfer\\n    /// @param from user address for amount transferred\\n    /// @param to user address for amount transferred\\n    /// @param id token id transferred\\n    /// @param amount value transferred\\n    /// @param data data as perscribed by 1155 standard\\n    function onTokenTransfer(address target, address operator, address from, address to, uint256 id, uint256 amount, bytes memory data) external;\\n    // IERC165 type required\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IHasContractName {\\n    /// @notice Contract name returns the pretty contract name\\n    function contractName() external returns (string memory);\\n}\\n\\ninterface IContractMetadata is IHasContractName {\\n    /// @notice Contract URI returns the uri for more information about the given contract\\n    function contractURI() external returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILimitedMintPerAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC165Upgradeable} from \\\"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\\\";\\n\\ninterface ILimitedMintPerAddress is IERC165Upgradeable {\\n    error UserExceedsMintLimit(address user, uint256 limit, uint256 requestedAmount);\\n\\n    function getMintedPerWallet(address token, uint256 tokenId, address wallet) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=node_modules/ds-test/src/\",\r\n      \"forge-std/=node_modules/forge-std/src/\",\r\n      \"@zoralabs/openzeppelin-contracts-upgradeable/=node_modules/@zoralabs/openzeppelin-contracts-upgradeable/\",\r\n      \"@zoralabs/protocol-rewards/src/=node_modules/@zoralabs/protocol-rewards/src/\",\r\n      \"@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\r\n      \"_imagine/=_imagine/\",\r\n      \"solemate/=/node_modules/solemate/src/\",\r\n      \"solady/=node_modules/solady/src/\",\r\n      \"mint/=_imagine/mint/\",\r\n      \"solmate/=node_modules/solmate/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {\r\n      \"src/delegation/ZoraCreator1155Attribution.sol\": {\r\n        \"PremintTokenSetup\": \"0xf4bf58f869c42d99d7f7ac3868b606239a634526\",\r\n        \"ZoraCreator1155Attribution\": \"0x584bde6b1442aa6c572368d206fe656c01ff1f1f\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensPerAddress\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"pricePerToken\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"mintStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mintDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"royaltyMintSchedule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"royaltyBPS\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fixedPriceMinter\",\"type\":\"address\"}],\"internalType\":\"struct TokenCreationConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"}],\"internalType\":\"struct PremintConfig\",\"name\":\"premintConfig\",\"type\":\"tuple\"}],\"name\":\"hashPremint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensPerAddress\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"pricePerToken\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"mintStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mintDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"royaltyMintSchedule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"royaltyBPS\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fixedPriceMinter\",\"type\":\"address\"}],\"internalType\":\"struct TokenCreationConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"}],\"internalType\":\"struct PremintConfig\",\"name\":\"premintConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"premintHashedTypeDataV4\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedPremintConfig\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"recoverSignerHashed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signatory\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ZoraCreator1155Attribution", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}