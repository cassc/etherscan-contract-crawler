{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\n/**\r\n  * @title ERC20Basic\r\n  * @dev Simpler version of ERC20 interface\r\n  * @dev see https://github.com/ethereum/EIPs/issues/179\r\n  */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address who) public view returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/**\r\n  * @title ERC20 interface\r\n  * @dev see https://github.com/ethereum/EIPs/issues/20\r\n  */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n  * @title Ownable\r\n  * @dev Owner validator\r\n  */\r\ncontract Ownable {\r\n  address private _owner;\r\n  address[] private _operator;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event OperatorAdded(address indexed newOperator);\r\n  event OperatorRemoved(address indexed previousOperator);\r\n\r\n  /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n    _operator.push(msg.sender);\r\n\r\n    emit OwnershipTransferred(address(0), _owner);\r\n    emit OperatorAdded(_owner);\r\n  }\r\n\r\n  /**\r\n    * @return the address of the owner.\r\n    */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n \r\n  /**\r\n    *  @return the address of the operator matched index\r\n    */\r\n  function operator(uint index) public view returns (address) {\r\n    require(_operator.length > index);\r\n    return _operator[index];\r\n  }\r\n\r\n  /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Throws if called by any account other than the owner or operator.\r\n    */\r\n  modifier onlyOwnerOrOperator() {\r\n    require(isOwner() || isOperator());\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n    * @return true if `msg.sender` is the owner of the contract.\r\n    */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n    * @return true if `msg.sender` is the operator of the contract.\r\n    */\r\n  function isOperator() public view returns (bool) {\r\n    return _isOperator(msg.sender);\r\n  }\r\n \r\n  /**\r\n    * @return true if address `granted` is the operator of the contract.\r\n    */\r\n  function _isOperator(address granted) internal view returns (bool) {\r\n    for(uint i = 0; i < _operator.length; i++) {\r\n        if(_operator[i] == granted) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  /**\r\n    * @dev Add newOperator.\r\n    * @param newOperator The address to operate additonally.\r\n    */\r\n  function addOperator(address newOperator) public onlyOwner {\r\n    require(newOperator != address(0));\r\n    require(!_isOperator(newOperator));\r\n\r\n    _operator.push(newOperator);\r\n    emit OperatorAdded(newOperator);\r\n  }\r\n\r\n  /**\r\n    * @dev Remove Operator.\r\n    * @param noMoreOperator The address not to operate anymore.\r\n    */\r\n  function removeOperator(address noMoreOperator) public onlyOwner {\r\n    require(noMoreOperator != address(0));\r\n    require(_isOperator(noMoreOperator));\r\n\r\n    uint len = _operator.length;\r\n    uint index = len;\r\n    for(uint i = 0; i < len; i++) {\r\n        if (_operator[i] == noMoreOperator) {\r\n            index = i;\r\n        }\r\n    }\r\n   \r\n    if(index != len){\r\n        if (len == 1) {\r\n          delete _operator[len - 1];\r\n        } else {\r\n          _operator[index] = _operator[len - 1];\r\n          delete _operator[len - 1];\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n  * @title Pausable\r\n  * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n  */\r\ncontract Pausable is Ownable {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor () internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n    * @return True if the contract is paused, false otherwise.\r\n    */\r\n  function paused() public view returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Called by a pauser to pause, triggers stopped state.\r\n    */\r\n  function pause() public onlyOwnerOrOperator whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @dev Called by a pauser to unpause, returns to normal state.\r\n    */\r\n  function unpause() public onlyOwnerOrOperator whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n/**\r\n  * @title SafeMath\r\n  * @dev Unsigned math operations with safety checks that revert on error.\r\n  */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    uint c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n  function mod(uint a, uint b) internal pure returns (uint) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n  * @title StandardToken\r\n  * @dev Base Of token\r\n  */\r\ncontract StandardToken is ERC20, Pausable {\r\n  using SafeMath for uint;\r\n\r\n  mapping (address => uint) private _balances;\r\n\r\n  mapping (address => mapping (address => uint)) private _allowed;\r\n\r\n  uint private _totalSupply;\r\n\r\n  /**\r\n    * @dev Total number of tokens in existence.\r\n    */\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return A uint representing the amount owned by the passed address.\r\n    */\r\n  function balanceOf(address owner) public view returns (uint) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint specifying the amount of tokens still available for the spender.\r\n    */\r\n  function allowance(address owner, address spender) public view returns (uint) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer token to a specified address.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n  function transfer(address to, uint value) public whenNotPaused returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n  function approve(address spender, uint value) public whenNotPaused returns (bool) {\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer tokens from one address to another.\r\n    * Note that while this function emits an Approval event, this is not required as per the specification,\r\n    * and other compliant implementations may not emit the event.\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint the amount of tokens to be transferred\r\n    */\r\n  function transferFrom(address from, address to, uint value) public whenNotPaused returns (bool) {\r\n    _transferFrom(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * Emits an Approval event.\r\n    * @param spender The address which will spend the funds.\r\n    * @param addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n  function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\r\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * Emits an Approval event.\r\n    * @param spender The address which will spend the funds.\r\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n  function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\r\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer token for a specified addresses.\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n  function _transfer(address from, address to, uint value) internal {\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer tokens from one address to another.\r\n    * Note that while this function emits an Approval event, this is not required as per the specification,\r\n    * and other compliant implementations may not emit the event.\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint the amount of tokens to be transferred\r\n    */\r\n  function _transferFrom(address from, address to, uint value) internal {\r\n    _transfer(from, to, value);\r\n    _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n  }\r\n\r\n  /**\r\n    * @dev Internal function that mints an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param account The account that will receive the created tokens.\r\n    * @param value The amount that will be created.\r\n    */\r\n  function _mint(address account, uint value) internal {\r\n    require(account != address(0));\r\n\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n    * @dev Internal function that burns an amount of the token of the owner\r\n    * account.\r\n    * @param value The amount that will be burnt.\r\n    */\r\n  function _burn(uint value) internal {\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    emit Transfer(msg.sender, address(0), value);\r\n  }\r\n\r\n  /**\r\n    * @dev Approve an address to spend another addresses' tokens.\r\n    * @param owner The address that owns the tokens.\r\n    * @param spender The address that will spend the tokens.\r\n    * @param value The number of tokens that can be spent.\r\n    */\r\n  function _approve(address owner, address spender, uint value) internal {\r\n    require(spender != address(0));\r\n    require(owner != address(0));\r\n\r\n    _allowed[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n}\r\n\r\n/**\r\n  * @title MintableToken\r\n  * @dev Minting of total balance\r\n  */\r\ncontract MintableToken is StandardToken {\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Function to mint tokens\r\n    * @param to The address that will receive the minted tokens.\r\n    * @param amount The amount of tokens to mint\r\n    * @return A boolean that indicated if the operation was successful.\r\n    */\r\n  function mint(address to, uint amount) public whenNotPaused onlyOwner canMint returns (bool) {\r\n    _mint(to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n  function finishMinting() public whenNotPaused onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n  * @title Burnable Token\r\n  * @dev Token that can be irreversibly burned (destroyed).\r\n  */\r\ncontract BurnableToken is MintableToken {\r\n  /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param value The amount of token to be burned.\r\n    */\r\n  function burn(uint value) public whenNotPaused onlyOwner returns (bool) {\r\n    _burn(value);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n  * @title LockableToken\r\n  * @dev locking of granted balance\r\n  */\r\ncontract LockableToken is BurnableToken {\r\n\r\n  using SafeMath for uint;\r\n\r\n  /**\r\n    * @dev Lock defines a lock of token\r\n    */\r\n  struct Lock {\r\n    uint amount;\r\n    uint expiresAt;\r\n  }\r\n\r\n  mapping (address => Lock[]) public grantedLocks;\r\n\r\n  /**\r\n    * @dev Transfer tokens to another\r\n    * @param to address the address which you want to transfer to\r\n    * @param value uint the amount of tokens to be transferred\r\n    */\r\n  function transfer(address to, uint value) public whenNotPaused returns (bool) {\r\n    _verifyTransferLock(msg.sender, value);\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address the address which you want to transfer to\r\n    * @param value uint the amount of tokens to be transferred\r\n    */\r\n  function transferFrom(address from, address to, uint value) public whenNotPaused returns (bool) {\r\n    _verifyTransferLock(from, value);\r\n    _transferFrom(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Function to add lock\r\n    * @param granted The address that will be locked.\r\n    * @param amount The amount of tokens to be locked\r\n    * @param expiresAt The expired date as unix timestamp\r\n    */\r\n  function addLock(address granted, uint amount, uint expiresAt) public onlyOwnerOrOperator {\r\n    require(amount > 0);\r\n    require(expiresAt > now);\r\n\r\n    grantedLocks[granted].push(Lock(amount, expiresAt));\r\n  }\r\n\r\n  /**\r\n    * @dev Function to delete lock\r\n    * @param granted The address that was locked\r\n    * @param index The index of lock\r\n    */\r\n  function deleteLock(address granted, uint8 index) public onlyOwnerOrOperator {\r\n    require(grantedLocks[granted].length > index);\r\n\r\n    uint len = grantedLocks[granted].length;\r\n    if (len == 1) {\r\n      delete grantedLocks[granted];\r\n    } else {\r\n      if (len - 1 != index) {\r\n        grantedLocks[granted][index] = grantedLocks[granted][len - 1];\r\n      }\r\n      delete grantedLocks[granted][len - 1];\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @dev Verify transfer is possible\r\n    * @param from - granted\r\n    * @param value - amount of transfer\r\n    */\r\n  function _verifyTransferLock(address from, uint value) internal view {\r\n    uint lockedAmount = getLockedAmount(from);\r\n    uint balanceAmount = balanceOf(from);\r\n\r\n    require(balanceAmount.sub(lockedAmount) >= value);\r\n  }\r\n\r\n  /**\r\n    * @dev get locked amount of address\r\n    * @param granted The address want to know the lock state.\r\n    * @return locked amount\r\n    */\r\n  function getLockedAmount(address granted) public view returns(uint) {\r\n    uint lockedAmount = 0;\r\n\r\n    uint len = grantedLocks[granted].length;\r\n    for (uint i = 0; i < len; i++) {\r\n      if (now < grantedLocks[granted][i].expiresAt) {\r\n        lockedAmount = lockedAmount.add(grantedLocks[granted][i].amount);\r\n      }\r\n    }\r\n    return lockedAmount;\r\n  }\r\n}\r\n\r\n/**\r\n  * @title Be Gaming Coin Token\r\n  * @dev ERC20 Token\r\n  */\r\ncontract BGCToken is LockableToken {\r\n\r\n  string public constant name = \"Be Gaming Coin\";\r\n  string public constant symbol = \"BGC\";\r\n  uint32 public constant decimals = 18;\r\n\r\n  uint public constant INITIAL_SUPPLY = 3000000000e18;\r\n\r\n  /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n  constructor() public {\r\n    _mint(msg.sender, INITIAL_SUPPLY);\r\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n  }\r\n \r\n  function lockTransfer(address granted, uint value) public onlyOwnerOrOperator {\r\n      bool lock_flag = false;\r\n      uint unit_lock_amount = SafeMath.div(value, 10);\r\n      uint total_lock_amount = SafeMath.mul(unit_lock_amount, 4);\r\n      uint unlock_amount = SafeMath.sub(value, total_lock_amount);\r\n      require(value == total_lock_amount + unlock_amount);\r\n      uint moment = now;\r\n     \r\n      uint locktime = SafeMath.add(moment, 2 * 30 days);\r\n      addLock(granted, unit_lock_amount, locktime);   // + 2 momths\r\n      locktime = SafeMath.add(moment, 4 * 30 days);\r\n      addLock(granted, unit_lock_amount, locktime);   // + 2 momths\r\n      locktime = SafeMath.add(moment, 6 * 30 days);\r\n      addLock(granted, unit_lock_amount, locktime);   // + 2 momths\r\n      locktime = SafeMath.add(moment, 8 * 30 days);\r\n      addLock(granted, unit_lock_amount, locktime);   // + 2 momths\r\n      lock_flag = true;\r\n      if(lock_flag){\r\n        transfer(granted, value);\r\n      }\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"granted\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"addLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"granted\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"deleteLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"granted\",\"type\":\"address\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grantedLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"granted\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"lockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"noMoreOperator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BGCToken", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://754ad8978f4ea4cd1f467713c083eb78174d65f4910f30711b15008cef84c76a"}