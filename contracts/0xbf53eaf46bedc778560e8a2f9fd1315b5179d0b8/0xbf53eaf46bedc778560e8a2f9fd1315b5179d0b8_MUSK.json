{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                \"Address: low-level call failed\"\r\n            );\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20Permit {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(\r\n            nonceAfter == nonceBefore + 1,\r\n            \"SafeERC20: permit did not succeed\"\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Auth {\r\n    address public owner;\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    function authorize(address adr) public authorized {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public authorized {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public authorized {\r\n        require(adr != address(0), \"Zero Address\");\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    function renounceOwnership() external authorized {\r\n        emit OwnershipTransferred(address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n}\r\n\r\ncontract MUSK is IERC20, Auth {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    string private constant _name = \"MUSK\";\r\n    string private constant _symbol = \"MUSK\";\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 100_000_000_000_000_000;\r\n\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) _isBot;\r\n    mapping(address => bool) isWhitelisted;\r\n    mapping(address => bool) isBlacklisted;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public _maxTxAmount = (_totalSupply * 10000) / 10000;\r\n    uint256 public _maxWalletAmount = (_totalSupply * 10000) / 10000;\r\n\r\n    IRouter public immutable router;\r\n    address public immutable pair;\r\n    bool tradingEnabled = false;\r\n    uint256 startedTime;\r\n\r\n    uint256 constant feeDenominator = 10000;\r\n\r\n    struct Fee {\r\n        uint256 marketingFee;\r\n        uint256 burnFee;\r\n        uint256 liquidFee;\r\n        uint256 totalFee;\r\n    }\r\n\r\n    enum TransactionType {\r\n        BUY,\r\n        SELL,\r\n        TRANSFER\r\n    }\r\n\r\n    mapping(TransactionType => Fee) public fees;\r\n\r\n    bool swapAndLiquifyEnabled = false;\r\n    uint256 swapTimes;\r\n    uint256 minTransactionsBeforeSwap = 7;\r\n    bool swapping;\r\n    bool antiBotEnabled = true;\r\n\r\n    uint256 swapThreshold = (_totalSupply * 300) / 100000;\r\n    uint256 _minTokenAmount = (_totalSupply * 15) / 100000;\r\n\r\n    uint256 marketing_divisor = 0;\r\n    uint256 liquidity_divisor = 100;\r\n    uint256 total_divisor = 100;\r\n\r\n    address liquidity_receiver;\r\n    address staking_receiver;\r\n    address marketing_receiver;\r\n\r\n    event FeesUpdated(\r\n        TransactionType indexed transactionType,\r\n        uint256 burnFee,\r\n        uint256 marketingFee,\r\n        uint256 swapAndLiquifyFee\r\n    );\r\n    event FeesAddressesUpdated(\r\n        address marketing,\r\n        address liquidity,\r\n        address staking\r\n    );\r\n    event ForceAdjustedLP(bool indexed musk, uint256 amount, bool indexed add);\r\n    event TokensAirdroped(\r\n        address indexed sender,\r\n        uint256 length,\r\n        uint256 airdropedAmount\r\n    );\r\n    event WhitelistUpdated(address indexed account, bool indexed whitelisted);\r\n    event BotUpdated(address indexed account, bool indexed isBot);\r\n    event BlacklistedUpdated(address indexed account, bool indexed blacklisted);\r\n    event AntiBotStateUpdated(bool indexed enabled);\r\n    event TradingEnabled();\r\n    event TradingDisabled();\r\n    event SwapBackSettingsUpdated(\r\n        bool indexed enabled,\r\n        uint256 threshold,\r\n        uint256 minLimit,\r\n        uint256 _minTransactions\r\n    );\r\n    event MaxLimitsUpdated(uint256 maxTxAmount, uint256 maxWalletAmount);\r\n    event UnsupportedTokensRecoverd(\r\n        address indexed token,\r\n        address receiver,\r\n        uint256 amount\r\n    );\r\n    event DivisorsUpdated(uint256 liquidity, uint256 marketing);\r\n\r\n    modifier lockTheSwap() {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor() Auth(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // eth - 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        address _pair = IFactory(_router.factory()).createPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n        router = _router;\r\n        pair = _pair;\r\n\r\n        // initilasing Fees\r\n        fees[TransactionType.SELL] = Fee(200, 0, 0, 0);\r\n        fees[TransactionType.BUY] = Fee(200, 0, 0, 0);\r\n        fees[TransactionType.TRANSFER] = Fee(0, 0, 0, 0);\r\n\r\n        isBlacklisted[address(0)] = true;\r\n\r\n        isWhitelisted[msg.sender] = true;\r\n        isWhitelisted[address(this)] = true;\r\n\r\n        liquidity_receiver = address(this);\r\n        staking_receiver = msg.sender;\r\n        marketing_receiver = msg.sender;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function isBot(address _address) public view returns (bool) {\r\n        return _isBot[_address];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD));\r\n    }\r\n\r\n    function whitelistAddress(\r\n        address _address,\r\n        bool _whitelist\r\n    ) external authorized {\r\n        require(isWhitelisted[_address] != _whitelist, \"Already set\");\r\n        isWhitelisted[_address] = _whitelist;\r\n\r\n        emit WhitelistUpdated(_address, _whitelist);\r\n    }\r\n\r\n    function blacklistAddress(\r\n        address _address,\r\n        bool _blacklist\r\n    ) external authorized {\r\n        require(isBlacklisted[_address] != _blacklist, \"Already set\");\r\n        isBlacklisted[_address] = _blacklist;\r\n\r\n        emit BlacklistedUpdated(_address, _blacklist);\r\n    }\r\n\r\n    function updateBot(address _address, bool isBot_) external authorized {\r\n        require(_isBot[_address] != isBot_, \"Already set\");\r\n        _isBot[_address] = isBot_;\r\n\r\n        emit BotUpdated(_address, isBot_);\r\n    }\r\n\r\n    function enableAntiBot(bool _enable) external authorized {\r\n        require(antiBotEnabled != _enable, \"Already set\");\r\n        antiBotEnabled = _enable;\r\n\r\n        emit AntiBotStateUpdated(_enable);\r\n    }\r\n\r\n    function enableTrading(uint256 _input) external authorized {\r\n        require(!tradingEnabled, \"Already Enabled!\");\r\n        tradingEnabled = true;\r\n        if (startedTime == 0)\r\n            // initialise only once\r\n            startedTime = block.timestamp.add(_input);\r\n\r\n        emit TradingEnabled();\r\n    }\r\n\r\n    function updateSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _threshold,\r\n        uint256 _minLimit,\r\n        uint256 _minTransactionsBeforeSwap\r\n    ) external authorized {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        swapThreshold = _threshold;\r\n        _minTokenAmount = _minLimit;\r\n        minTransactionsBeforeSwap = _minTransactionsBeforeSwap;\r\n\r\n        emit SwapBackSettingsUpdated(\r\n            _enabled,\r\n            _threshold,\r\n            _minLimit,\r\n            _minTransactionsBeforeSwap\r\n        );\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowance(msg.sender, spender) + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = allowance(msg.sender, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        preTxCheck(sender, recipient, amount);\r\n\r\n        bool takeFee = true;\r\n        if (isWhitelisted[sender] || isWhitelisted[recipient]) {\r\n            takeFee = false;\r\n        } else {\r\n            require(tradingEnabled, \"Trading is Paused\");\r\n            require(\r\n                amount <= _maxTxAmount,\r\n                \"Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n            if (recipient != pair) {\r\n                require(\r\n                    _balances[recipient] + amount <= _maxWalletAmount,\r\n                    \"Wallet amount exceeds limit\"\r\n                );\r\n            }\r\n        }\r\n\r\n        TransactionType transactionType;\r\n\r\n        if (sender == pair) {\r\n            transactionType = TransactionType.BUY;\r\n            if (\r\n                recipient != address(router) && block.timestamp <= startedTime\r\n            ) {\r\n                _isBot[recipient] = true;\r\n            }\r\n        } else if (recipient == pair) {\r\n            transactionType = TransactionType.SELL;\r\n        } else {\r\n            transactionType = TransactionType.TRANSFER;\r\n        }\r\n\r\n        swapTimes = swapTimes.add(1);\r\n        if (shouldSwapBack(sender, amount)) {\r\n            swapAndLiquify(swapThreshold);\r\n            swapTimes = 0;\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = takeFee\r\n            ? takeTotalFee(sender, amount, transactionType)\r\n            : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function preTxCheck(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        require(!isBlacklisted[sender], \"Blackisted\");\r\n        require(!isBlacklisted[recipient], \"Blackisted\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(\r\n            amount <= balanceOf(sender),\r\n            \"You are trying to transfer more than your balance\"\r\n        );\r\n    }\r\n\r\n    function takeTotalFee(\r\n        address sender,\r\n        uint256 amount,\r\n        TransactionType transactionType\r\n    ) internal returns (uint256) {\r\n        Fee memory fee = fees[transactionType];\r\n        uint256 totalFees = _isBot[sender] && antiBotEnabled\r\n            ? (feeDenominator - 100)\r\n            : fee.totalFee; // 99% fees if bot\r\n        if (totalFees == 0) {\r\n            return amount;\r\n        }\r\n        uint256 feeAmount = (amount.mul(totalFees)).div(feeDenominator);\r\n        uint256 burnAmount = (feeAmount.mul(fee.burnFee)).div(totalFees);\r\n        uint256 marketingAmount = (feeAmount.mul(fee.marketingFee)).div(\r\n            totalFees\r\n        );\r\n\r\n        uint256 liquidAmount = feeAmount.sub(burnAmount).sub(marketingAmount);\r\n\r\n        if (burnAmount > 0) {\r\n            _balances[address(DEAD)] = _balances[address(DEAD)].add(burnAmount);\r\n            emit Transfer(sender, address(DEAD), burnAmount);\r\n        }\r\n        if (marketingAmount > 0) {\r\n            _balances[address(staking_receiver)] = _balances[\r\n                address(staking_receiver)\r\n            ].add(marketingAmount);\r\n            emit Transfer(sender, address(staking_receiver), marketingAmount);\r\n        }\r\n        if (liquidAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(\r\n                liquidAmount\r\n            );\r\n            emit Transfer(sender, address(this), liquidAmount);\r\n        }\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function updateMaxLimits(\r\n        uint256 _transaction,\r\n        uint256 _wallet\r\n    ) external authorized {\r\n        require(\r\n            _transaction >= 1,\r\n            \"Max txn limit cannot be less than 0.00001%\"\r\n        );\r\n        require(_wallet >= 500000, \"Max Wallet limit cannot be less than 5%\");\r\n        uint256 newTxLimit = (_totalSupply * _transaction) / 10000000;\r\n        uint256 newWalletLimit = (_totalSupply * _wallet) / 10000000;\r\n        _maxTxAmount = newTxLimit;\r\n        _maxWalletAmount = newWalletLimit;\r\n\r\n        emit MaxLimitsUpdated(_maxTxAmount, _maxWalletAmount);\r\n    }\r\n\r\n    function updateFee(\r\n        TransactionType transactionType,\r\n        uint256 _burnFee,\r\n        uint256 _marketingFee,\r\n        uint256 _swapAndLiquifyFee\r\n    ) external authorized {\r\n        require(\r\n            _burnFee.add(_marketingFee).add(_swapAndLiquifyFee) <=\r\n                feeDenominator.mul(3).div(20),\r\n            \"Tax cannot be more than 15%\"\r\n        );\r\n        Fee storage fee = fees[transactionType];\r\n        fee.burnFee = _burnFee;\r\n        fee.marketingFee = _marketingFee;\r\n        fee.liquidFee = _swapAndLiquifyFee;\r\n        fee.totalFee = _burnFee.add(_marketingFee).add(_swapAndLiquifyFee);\r\n\r\n        emit FeesUpdated(\r\n            transactionType,\r\n            _burnFee,\r\n            _marketingFee,\r\n            _swapAndLiquifyFee\r\n        );\r\n    }\r\n\r\n    function updateFeesAddresses(\r\n        address _marketing,\r\n        address _liquidity,\r\n        address _staking\r\n    ) external authorized {\r\n        require(_marketing != address(0), \"Zero Address\");\r\n        require(_liquidity != address(0), \"Zero Address\");\r\n        require(_staking != address(0), \"Zero Address\");\r\n        marketing_receiver = _marketing;\r\n        liquidity_receiver = _liquidity;\r\n        staking_receiver = _staking;\r\n\r\n        emit FeesAddressesUpdated(_marketing, _liquidity, _staking);\r\n    }\r\n\r\n    function shouldSwapBack(\r\n        address sender,\r\n        uint256 amount\r\n    ) internal view returns (bool) {\r\n        bool aboveMin = amount >= _minTokenAmount;\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n        return\r\n            !swapping &&\r\n            swapAndLiquifyEnabled &&\r\n            aboveMin &&\r\n            swapTimes >= minTransactionsBeforeSwap &&\r\n            aboveThreshold &&\r\n            sender != pair;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 amountToLiquify = tokens\r\n            .mul(liquidity_divisor)\r\n            .div(total_divisor)\r\n            .div(2);\r\n        uint256 amountToSwap = tokens.sub(amountToLiquify);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(amountToSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 totalETHFee = total_divisor.sub(liquidity_divisor.div(2));\r\n\r\n        if (amountToLiquify > 0) {\r\n            addLiquidity(\r\n                amountToLiquify,\r\n                deltaBalance.mul(liquidity_divisor).div(totalETHFee).div(2)\r\n            );\r\n        }\r\n        // transfer ETH to marketing, teamFunds stay in contract for future distribution.\r\n        transferETH(\r\n            marketing_receiver,\r\n            deltaBalance.mul(marketing_divisor).div(totalETHFee)\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidity_receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function transferETH(address recipient, uint256 amount) private {\r\n        if (amount == 0) return;\r\n        (bool success, ) = payable(recipient).call{value: amount}(\"\");\r\n        require(success, \"Unable to send ETH\");\r\n    }\r\n\r\n    function airdropTokens(\r\n        address[] calldata accounts,\r\n        uint256[] calldata amounts\r\n    ) external authorized {\r\n        uint256 length = accounts.length;\r\n        require(length == amounts.length, \"array length mismatched\");\r\n        uint256 airdropAmount = 0;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            // updating balance directly instead of calling transfer to save gas\r\n            _balances[accounts[i]] += amounts[i];\r\n            airdropAmount += amounts[i];\r\n            emit Transfer(msg.sender, accounts[i], amounts[i]);\r\n        }\r\n        _balances[msg.sender] -= airdropAmount;\r\n\r\n        emit TokensAirdroped(msg.sender, length, airdropAmount);\r\n    }\r\n\r\n    function AdjustLP(\r\n        bool musk,\r\n        uint256 amount,\r\n        bool add\r\n    ) external payable authorized {\r\n        if (!musk) {\r\n            require(add, \"Cant withdraw bnb from pool\");\r\n            amount = msg.value;\r\n            IWeth(router.WETH()).deposit{value: amount}();\r\n            IERC20(router.WETH()).safeTransfer(pair, amount);\r\n        } else {\r\n            if (add) {\r\n                _balances[msg.sender] -= amount;\r\n                _balances[pair] += amount;\r\n                emit Transfer(msg.sender, pair, amount);\r\n            } else {\r\n                _balances[pair] -= amount;\r\n                _balances[msg.sender] += amount;\r\n                emit Transfer(pair, msg.sender, amount);\r\n            }\r\n        }\r\n        IPair(pair).sync();\r\n        emit ForceAdjustedLP(musk, amount, add);\r\n    }\r\n\r\n    function recoverUnsupportedTokens(\r\n        address _token,\r\n        address _receiver,\r\n        uint256 _percentage\r\n    ) external authorized {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        uint256 amountToWithdraw = amount.mul(_percentage).div(10000);\r\n        IERC20(_token).safeTransfer(_receiver, amountToWithdraw);\r\n\r\n        emit UnsupportedTokensRecoverd(_token, _receiver, amountToWithdraw);\r\n    }\r\n\r\n    function updateDivisors(\r\n        uint256 _liquidity,\r\n        uint256 _marketing\r\n    ) external authorized {\r\n        liquidity_divisor = _liquidity;\r\n        marketing_divisor = _marketing;\r\n        total_divisor = _liquidity.add(_marketing);\r\n\r\n        emit DivisorsUpdated(_liquidity, _marketing);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AntiBotStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isBot\",\"type\":\"bool\"}],\"name\":\"BotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"DivisorsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"FeesAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum MUSK.TransactionType\",\"name\":\"transactionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAndLiquifyFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"musk\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"ForceAdjustedLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"MaxLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minTransactions\",\"type\":\"uint256\"}],\"name\":\"SwapBackSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"airdropedAmount\",\"type\":\"uint256\"}],\"name\":\"TokensAirdroped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnsupportedTokensRecoverd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"musk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"AdjustLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blacklist\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MUSK.TransactionType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"recoverUnsupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBot_\",\"type\":\"bool\"}],\"name\":\"updateBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"}],\"name\":\"updateDivisors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MUSK.TransactionType\",\"name\":\"transactionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapAndLiquifyFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"updateFeesAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTransactionsBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"updateSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MUSK", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://314d39271e362c03e8c7e69ee8d2591461027f10aa2aa48388c60c2683eb8415"}