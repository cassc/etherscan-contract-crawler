{"SourceCode": "// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: BokkyPooBahsRedBlackTreeLibrary/contracts/BokkyPooBahsRedBlackTreeLibrary.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\r\n//\r\n// A Solidity Red-Black Tree binary search library to store and access a sorted\r\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\r\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\nlibrary BokkyPooBahsRedBlackTreeLibrary {\r\n\r\n    struct Node {\r\n        uint parent;\r\n        uint left;\r\n        uint right;\r\n        bool red;\r\n    }\r\n\r\n    struct Tree {\r\n        uint root;\r\n        mapping(uint => Node) nodes;\r\n    }\r\n\r\n    uint private constant EMPTY = 0;\r\n\r\n    function first(Tree storage self) internal view returns (uint _key) {\r\n        _key = self.root;\r\n        if (_key != EMPTY) {\r\n            while (self.nodes[_key].left != EMPTY) {\r\n                _key = self.nodes[_key].left;\r\n            }\r\n        }\r\n    }\r\n    function last(Tree storage self) internal view returns (uint _key) {\r\n        _key = self.root;\r\n        if (_key != EMPTY) {\r\n            while (self.nodes[_key].right != EMPTY) {\r\n                _key = self.nodes[_key].right;\r\n            }\r\n        }\r\n    }\r\n    function next(Tree storage self, uint target) internal view returns (uint cursor) {\r\n        require(target != EMPTY);\r\n        if (self.nodes[target].right != EMPTY) {\r\n            cursor = treeMinimum(self, self.nodes[target].right);\r\n        } else {\r\n            cursor = self.nodes[target].parent;\r\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\r\n                target = cursor;\r\n                cursor = self.nodes[cursor].parent;\r\n            }\r\n        }\r\n    }\r\n    function prev(Tree storage self, uint target) internal view returns (uint cursor) {\r\n        require(target != EMPTY);\r\n        if (self.nodes[target].left != EMPTY) {\r\n            cursor = treeMaximum(self, self.nodes[target].left);\r\n        } else {\r\n            cursor = self.nodes[target].parent;\r\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\r\n                target = cursor;\r\n                cursor = self.nodes[cursor].parent;\r\n            }\r\n        }\r\n    }\r\n    function exists(Tree storage self, uint key) internal view returns (bool) {\r\n        return (key != EMPTY) && ((key == self.root) || (self.nodes[key].parent != EMPTY));\r\n    }\r\n    function isEmpty(uint key) internal pure returns (bool) {\r\n        return key == EMPTY;\r\n    }\r\n    function getEmpty() internal pure returns (uint) {\r\n        return EMPTY;\r\n    }\r\n    function getNode(Tree storage self, uint key) internal view returns (uint _returnKey, uint _parent, uint _left, uint _right, bool _red) {\r\n        require(exists(self, key));\r\n        return(key, self.nodes[key].parent, self.nodes[key].left, self.nodes[key].right, self.nodes[key].red);\r\n    }\r\n\r\n    function insert(Tree storage self, uint key) internal {\r\n        require(key != EMPTY);\r\n        require(!exists(self, key));\r\n        uint cursor = EMPTY;\r\n        uint probe = self.root;\r\n        while (probe != EMPTY) {\r\n            cursor = probe;\r\n            if (key < probe) {\r\n                probe = self.nodes[probe].left;\r\n            } else {\r\n                probe = self.nodes[probe].right;\r\n            }\r\n        }\r\n        self.nodes[key] = Node({parent: cursor, left: EMPTY, right: EMPTY, red: true});\r\n        if (cursor == EMPTY) {\r\n            self.root = key;\r\n        } else if (key < cursor) {\r\n            self.nodes[cursor].left = key;\r\n        } else {\r\n            self.nodes[cursor].right = key;\r\n        }\r\n        insertFixup(self, key);\r\n    }\r\n    function remove(Tree storage self, uint key) internal {\r\n        require(key != EMPTY);\r\n        require(exists(self, key));\r\n        uint probe;\r\n        uint cursor;\r\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\r\n            cursor = key;\r\n        } else {\r\n            cursor = self.nodes[key].right;\r\n            while (self.nodes[cursor].left != EMPTY) {\r\n                cursor = self.nodes[cursor].left;\r\n            }\r\n        }\r\n        if (self.nodes[cursor].left != EMPTY) {\r\n            probe = self.nodes[cursor].left;\r\n        } else {\r\n            probe = self.nodes[cursor].right;\r\n        }\r\n        uint yParent = self.nodes[cursor].parent;\r\n        self.nodes[probe].parent = yParent;\r\n        if (yParent != EMPTY) {\r\n            if (cursor == self.nodes[yParent].left) {\r\n                self.nodes[yParent].left = probe;\r\n            } else {\r\n                self.nodes[yParent].right = probe;\r\n            }\r\n        } else {\r\n            self.root = probe;\r\n        }\r\n        bool doFixup = !self.nodes[cursor].red;\r\n        if (cursor != key) {\r\n            replaceParent(self, cursor, key);\r\n            self.nodes[cursor].left = self.nodes[key].left;\r\n            self.nodes[self.nodes[cursor].left].parent = cursor;\r\n            self.nodes[cursor].right = self.nodes[key].right;\r\n            self.nodes[self.nodes[cursor].right].parent = cursor;\r\n            self.nodes[cursor].red = self.nodes[key].red;\r\n            (cursor, key) = (key, cursor);\r\n        }\r\n        if (doFixup) {\r\n            removeFixup(self, probe);\r\n        }\r\n        delete self.nodes[cursor];\r\n    }\r\n\r\n    function treeMinimum(Tree storage self, uint key) private view returns (uint) {\r\n        while (self.nodes[key].left != EMPTY) {\r\n            key = self.nodes[key].left;\r\n        }\r\n        return key;\r\n    }\r\n    function treeMaximum(Tree storage self, uint key) private view returns (uint) {\r\n        while (self.nodes[key].right != EMPTY) {\r\n            key = self.nodes[key].right;\r\n        }\r\n        return key;\r\n    }\r\n\r\n    function rotateLeft(Tree storage self, uint key) private {\r\n        uint cursor = self.nodes[key].right;\r\n        uint keyParent = self.nodes[key].parent;\r\n        uint cursorLeft = self.nodes[cursor].left;\r\n        self.nodes[key].right = cursorLeft;\r\n        if (cursorLeft != EMPTY) {\r\n            self.nodes[cursorLeft].parent = key;\r\n        }\r\n        self.nodes[cursor].parent = keyParent;\r\n        if (keyParent == EMPTY) {\r\n            self.root = cursor;\r\n        } else if (key == self.nodes[keyParent].left) {\r\n            self.nodes[keyParent].left = cursor;\r\n        } else {\r\n            self.nodes[keyParent].right = cursor;\r\n        }\r\n        self.nodes[cursor].left = key;\r\n        self.nodes[key].parent = cursor;\r\n    }\r\n    function rotateRight(Tree storage self, uint key) private {\r\n        uint cursor = self.nodes[key].left;\r\n        uint keyParent = self.nodes[key].parent;\r\n        uint cursorRight = self.nodes[cursor].right;\r\n        self.nodes[key].left = cursorRight;\r\n        if (cursorRight != EMPTY) {\r\n            self.nodes[cursorRight].parent = key;\r\n        }\r\n        self.nodes[cursor].parent = keyParent;\r\n        if (keyParent == EMPTY) {\r\n            self.root = cursor;\r\n        } else if (key == self.nodes[keyParent].right) {\r\n            self.nodes[keyParent].right = cursor;\r\n        } else {\r\n            self.nodes[keyParent].left = cursor;\r\n        }\r\n        self.nodes[cursor].right = key;\r\n        self.nodes[key].parent = cursor;\r\n    }\r\n\r\n    function insertFixup(Tree storage self, uint key) private {\r\n        uint cursor;\r\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\r\n            uint keyParent = self.nodes[key].parent;\r\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\r\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\r\n                if (self.nodes[cursor].red) {\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[cursor].red = false;\r\n                    self.nodes[self.nodes[keyParent].parent].red = true;\r\n                    key = self.nodes[keyParent].parent;\r\n                } else {\r\n                    if (key == self.nodes[keyParent].right) {\r\n                      key = keyParent;\r\n                      rotateLeft(self, key);\r\n                    }\r\n                    keyParent = self.nodes[key].parent;\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[self.nodes[keyParent].parent].red = true;\r\n                    rotateRight(self, self.nodes[keyParent].parent);\r\n                }\r\n            } else {\r\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\r\n                if (self.nodes[cursor].red) {\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[cursor].red = false;\r\n                    self.nodes[self.nodes[keyParent].parent].red = true;\r\n                    key = self.nodes[keyParent].parent;\r\n                } else {\r\n                    if (key == self.nodes[keyParent].left) {\r\n                      key = keyParent;\r\n                      rotateRight(self, key);\r\n                    }\r\n                    keyParent = self.nodes[key].parent;\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[self.nodes[keyParent].parent].red = true;\r\n                    rotateLeft(self, self.nodes[keyParent].parent);\r\n                }\r\n            }\r\n        }\r\n        self.nodes[self.root].red = false;\r\n    }\r\n\r\n    function replaceParent(Tree storage self, uint a, uint b) private {\r\n        uint bParent = self.nodes[b].parent;\r\n        self.nodes[a].parent = bParent;\r\n        if (bParent == EMPTY) {\r\n            self.root = a;\r\n        } else {\r\n            if (b == self.nodes[bParent].left) {\r\n                self.nodes[bParent].left = a;\r\n            } else {\r\n                self.nodes[bParent].right = a;\r\n            }\r\n        }\r\n    }\r\n    function removeFixup(Tree storage self, uint key) private {\r\n        uint cursor;\r\n        while (key != self.root && !self.nodes[key].red) {\r\n            uint keyParent = self.nodes[key].parent;\r\n            if (key == self.nodes[keyParent].left) {\r\n                cursor = self.nodes[keyParent].right;\r\n                if (self.nodes[cursor].red) {\r\n                    self.nodes[cursor].red = false;\r\n                    self.nodes[keyParent].red = true;\r\n                    rotateLeft(self, keyParent);\r\n                    cursor = self.nodes[keyParent].right;\r\n                }\r\n                if (!self.nodes[self.nodes[cursor].left].red && !self.nodes[self.nodes[cursor].right].red) {\r\n                    self.nodes[cursor].red = true;\r\n                    key = keyParent;\r\n                } else {\r\n                    if (!self.nodes[self.nodes[cursor].right].red) {\r\n                        self.nodes[self.nodes[cursor].left].red = false;\r\n                        self.nodes[cursor].red = true;\r\n                        rotateRight(self, cursor);\r\n                        cursor = self.nodes[keyParent].right;\r\n                    }\r\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[self.nodes[cursor].right].red = false;\r\n                    rotateLeft(self, keyParent);\r\n                    key = self.root;\r\n                }\r\n            } else {\r\n                cursor = self.nodes[keyParent].left;\r\n                if (self.nodes[cursor].red) {\r\n                    self.nodes[cursor].red = false;\r\n                    self.nodes[keyParent].red = true;\r\n                    rotateRight(self, keyParent);\r\n                    cursor = self.nodes[keyParent].left;\r\n                }\r\n                if (!self.nodes[self.nodes[cursor].right].red && !self.nodes[self.nodes[cursor].left].red) {\r\n                    self.nodes[cursor].red = true;\r\n                    key = keyParent;\r\n                } else {\r\n                    if (!self.nodes[self.nodes[cursor].left].red) {\r\n                        self.nodes[self.nodes[cursor].right].red = false;\r\n                        self.nodes[cursor].red = true;\r\n                        rotateLeft(self, cursor);\r\n                        cursor = self.nodes[keyParent].left;\r\n                    }\r\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[self.nodes[cursor].left].red = false;\r\n                    rotateRight(self, keyParent);\r\n                    key = self.root;\r\n                }\r\n            }\r\n        }\r\n        self.nodes[key].red = false;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// End - BokkyPooBah's Red-Black Tree Library\r\n// ----------------------------------------------------------------------------\r\n\r\n// File: contracts/Interfaces.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface ESTokenInterface {\r\n    function isESToken() external pure returns (bool);\r\n    function parentReferral(address user) external view returns (address);\r\n    function setParentReferral(address user, address parent, uint256 reward) external;\r\n}\r\n\r\ninterface ExchangeInterface {\r\n    function isExchange() external pure  returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ninterface IERC20USDTCOMPATIBLE {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external;\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function approve(address spender, uint256 value) external;\r\n    function decimals() external view returns (uint256);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/Exchange.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Exchange is ExchangeInterface, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using BokkyPooBahsRedBlackTreeLibrary for BokkyPooBahsRedBlackTreeLibrary.Tree;\r\n\r\n    struct Order {\r\n        // 32 bits for user, 8 bits for type, 186 for order uid (0x<186><8><32>)\r\n        uint256 uid;\r\n        address trader;\r\n        uint256 srcAmount;\r\n        uint256 destAmount;\r\n        uint256 filled;\r\n    }\r\n\r\n    struct MemoryOrder {\r\n        address trader;\r\n        address src;\r\n        uint256 srcAmount;\r\n        address dest;\r\n        uint256 destAmount;\r\n        uint256 filled;\r\n    }\r\n\r\n    struct TokenEntity {\r\n        uint256 reservedBalance;\r\n        Order[] orders;\r\n        mapping(uint256 => uint256) ids; // uid -> index\r\n    }\r\n\r\n    struct OrderBook {\r\n        // price tree\r\n        BokkyPooBahsRedBlackTreeLibrary.Tree tree;\r\n        // price -> [order uids]\r\n        mapping(uint256 => uint256[]) uids;\r\n    }\r\n\r\n    address constant private RESERVE_ADDRESS = 0x0000000000000000000000000000000000000001;\r\n    uint8 constant private ESTT_2_USDT = 1;\r\n    uint8 constant private USDT_2_ESTT = 2;\r\n    uint256 private _referralBonus;\r\n    uint256 private _exchangeFee;\r\n    uint256 private _minESTTPrice;\r\n    mapping(address => OrderBook) private _orderBooks; // srcToken -> OrderBook\r\n    mapping(uint256 => address) private _usersAddresses; // uint32(address) -> address\r\n    mapping(address => mapping(address => TokenEntity)) private _ledger; // user, ESTT/USDT pair => TokenEntity\r\n\r\n    IERC20 private _ESTT;\r\n    IERC20USDTCOMPATIBLE private _USDT;\r\n    uint256 private _ESTTDecimals;\r\n    uint256 private _USDTDecimals;\r\n    address private _ESTTAddress;\r\n    address private _USDTAddress;\r\n\r\n    uint192 private _lastUid;\r\n\r\n    constructor (address esttAddress, address usdtAddress) public {\r\n        ESTokenInterface potentialESTT = ESTokenInterface(esttAddress);\r\n        require(potentialESTT.isESToken(), \"address doesn't match to ESTT\");\r\n        _ESTT = IERC20(esttAddress);\r\n        _ESTTDecimals = 10 ** uint256(_ESTT.decimals());\r\n        _ESTTAddress = esttAddress;\r\n        IERC20USDTCOMPATIBLE potentialUSDT = IERC20USDTCOMPATIBLE(usdtAddress);\r\n        _USDTDecimals = potentialUSDT.decimals();\r\n        require(_USDTDecimals == 6, \"address doesn't match to USDT\");\r\n        _USDT = potentialUSDT;\r\n        _USDTAddress = usdtAddress;\r\n        _USDTDecimals = 10 ** _USDTDecimals;\r\n        _referralBonus = 500_000_000_000_000; // +0.05%\r\n        _exchangeFee = 8_000_000_000_000_000; // 0.8% fee from estt->usdt tx\r\n        _minESTTPrice = _ESTTDecimals;\r\n    }\r\n\r\n    function isExchange() pure external override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function setReferralBonus(uint256 newReferralBonus) external onlyOwner {\r\n        require(newReferralBonus >= 10 ** 18, \"negative referral bonus\");\r\n        _referralBonus = newReferralBonus.sub(10 ** 18);\r\n    }\r\n\r\n    function referralBonus() external view returns (uint256) {\r\n        return _referralBonus.add(10 ** 18);\r\n    }\r\n\r\n    function setExchangeFee(uint256 newExchangeFee) external onlyOwner {\r\n        require(newExchangeFee >= 10 ** 18, \"negative exchange fee\");\r\n        _exchangeFee = newExchangeFee.sub(10 ** 18);\r\n    }\r\n\r\n    function exchangeFee() external view returns (uint256) {\r\n        return _exchangeFee.add(10 ** 18);\r\n    }\r\n\r\n    function setMinPrice(uint256 newMinPrice) external onlyOwner {\r\n        require(newMinPrice >= 1000000, \"min possible price not in range [1, 9999]\");\r\n        require(newMinPrice < 10000000000, \"min possible price not in range [1, 9999]\");\r\n        _minESTTPrice = _USDTDecimals.mul(_ESTTDecimals).div(newMinPrice);\r\n    }\r\n\r\n    function minPrice() external view returns (uint256) {\r\n        return _ESTTDecimals.mul(_USDTDecimals).div(_minESTTPrice);\r\n    }\r\n\r\n    function getNextPrice (address tokenSrc, uint256 price) external view returns (uint256) {\r\n        return price == 0 ? _orderBooks[tokenSrc].tree.first() : _orderBooks[tokenSrc].tree.next(price);\r\n    }\r\n\r\n    function getUidsByPrice (address tokenSrc, uint256 price) external view returns (uint256[] memory) {\r\n        return _orderBooks[tokenSrc].uids[price];\r\n    }\r\n\r\n    function getMyOrders () external view returns (uint256[] memory) {\r\n        uint256 lengthESTT = _ledger[_msgSender()][_ESTTAddress].orders.length;\r\n        uint256 lengthUSDT = _ledger[_msgSender()][_USDTAddress].orders.length;\r\n        uint256[] memory myOrderUids = new uint256[](lengthESTT + lengthUSDT);\r\n        for (uint256 i = 0; i < lengthESTT; ++i) {\r\n            myOrderUids[i] = _ledger[_msgSender()][_ESTTAddress].orders[i].uid;\r\n        }\r\n        for (uint256 i = 0; i < lengthUSDT; ++i) {\r\n            myOrderUids[i + lengthESTT] = _ledger[_msgSender()][_USDTAddress].orders[i].uid;\r\n        }\r\n        return myOrderUids;\r\n    }\r\n\r\n    function getOrderByUid (uint256 uid) external view returns (uint256, address, uint256, uint256, uint256) {\r\n        (address srcAddress, address user, uint256 index) = _unpackUid(uid);\r\n        Order memory o = _ledger[user][srcAddress].orders[index];\r\n        return (o.uid, o.trader, o.srcAmount, o.destAmount, o.filled);\r\n    }\r\n\r\n    function trade (\r\n        address src,\r\n        uint256 srcAmount,\r\n        address dest,\r\n        uint256 destAmount,\r\n        address referral\r\n    ) external {\r\n        uint32 userId = uint32(_msgSender());\r\n        if (_usersAddresses[userId] == address(0)) {\r\n            _usersAddresses[userId] = _msgSender();\r\n        }\r\n        require(_usersAddresses[userId] == _msgSender(), \"user address already exist\");\r\n        MemoryOrder memory order = MemoryOrder(\r\n            _msgSender(),\r\n            src,\r\n            srcAmount,\r\n            dest,\r\n            destAmount,\r\n            0\r\n        );\r\n        _orderCheck(order);\r\n        _ledger[_msgSender()][src].reservedBalance = _ledger[_msgSender()][src].reservedBalance.add(srcAmount);\r\n        // less than 10 wei\r\n        if(_trade(order) > 10) {\r\n            _insertOrder(order, src);\r\n        }\r\n        ESTokenInterface esttInerface = ESTokenInterface(_ESTTAddress);\r\n        if (referral != address(0) &&\r\n            esttInerface.parentReferral(_msgSender()) == address(0) &&\r\n            src == _USDTAddress\r\n        ) {\r\n            uint256 price = _getPriceInverted(order);\r\n            uint256 orderBonus = order.filled.mul(price).div(_USDTDecimals);\r\n            esttInerface.setParentReferral(_msgSender(), referral, orderBonus.mul(_referralBonus).div(10 ** 18));\r\n        }\r\n    }\r\n\r\n    function continueTrade (uint256 uid) external {\r\n        (address tokenSrcAddress, address user, uint256 index) = _unpackUid(uid);\r\n        Order memory storageOrder = _ledger[user][tokenSrcAddress].orders[index];\r\n        require(_msgSender() == storageOrder.trader, \"has no rights to continue trade\");\r\n        MemoryOrder memory order = MemoryOrder(\r\n            storageOrder.trader,\r\n            tokenSrcAddress,\r\n            storageOrder.srcAmount,\r\n            tokenSrcAddress == _ESTTAddress ? _USDTAddress : _ESTTAddress,\r\n            storageOrder.destAmount,\r\n            storageOrder.filled\r\n        );\r\n        if(_trade(order) == 0) {\r\n            _removeOrder(uid, order.src, order.trader);\r\n            uint256 price = _getPriceInverted(order);\r\n            _removeOrderFromOrderBook(uid, order.src, price);\r\n        } else {\r\n            _ledger[user][tokenSrcAddress].orders[index].filled = order.filled;\r\n        }\r\n    }\r\n\r\n    function cancel (uint256 uid) external {\r\n        (address tokenSrcAddress, address user, uint256 index) = _unpackUid(uid);\r\n        Order memory storageOrder = _ledger[user][tokenSrcAddress].orders[index];\r\n        MemoryOrder memory order = MemoryOrder(\r\n            storageOrder.trader,\r\n            tokenSrcAddress,\r\n            storageOrder.srcAmount,\r\n            tokenSrcAddress == _ESTTAddress ? _USDTAddress : _ESTTAddress,\r\n            storageOrder.destAmount,\r\n            storageOrder.filled\r\n        );\r\n        require(_msgSender() == order.trader, \"doesn't have rights to cancel order\");\r\n        uint256 restAmount = order.srcAmount.sub(order.filled);\r\n        _ledger[order.trader][order.src].reservedBalance = _ledger[order.trader][order.src].reservedBalance.sub(restAmount);\r\n        _removeOrder(uid, order.src, order.trader);\r\n        uint256 price = _getPriceInverted(order);\r\n        _removeOrderFromOrderBook(uid, order.src, price);\r\n    }\r\n\r\n    // place limit order\r\n    // if price more than market - order will be matched with market price\r\n    function _trade (MemoryOrder memory order) internal returns (uint256) {\r\n        OrderBook storage destOrderBook = _orderBooks[order.dest];\r\n        uint256 maxPrice = _getPrice(order);\r\n        uint256 destKey = destOrderBook.tree.first();\r\n\r\n        while (destKey != 0) {\r\n            // key can be deleted, so next will not be available in that case\r\n            uint256 nextKey = 0;\r\n            if (maxPrice >= destKey) {\r\n                while (destOrderBook.uids[destKey].length != 0) {\r\n                    uint256 uid = destOrderBook.uids[destKey][0];\r\n                    (address src, address user, uint256 index) = _unpackUid(uid);\r\n                    Order memory opposite = _ledger[user][src].orders[index];\r\n                    (bool badOpposite, uint256 filledOpposite) = _match(order, opposite, destKey);\r\n                    opposite.filled = opposite.filled.add(filledOpposite);\r\n                    if (opposite.srcAmount.sub(opposite.filled) < 10 || !badOpposite) {\r\n                        nextKey = destOrderBook.tree.next(destKey);\r\n                        _removeOrder(destOrderBook.uids[destKey][0], order.dest, opposite.trader);\r\n                        _removeOrderFromPriceIndex(destOrderBook, 0, destKey);\r\n                    } else {\r\n                        _ledger[user][src].orders[index].filled = opposite.filled;\r\n                    }\r\n                    if (order.filled == order.srcAmount || gasleft() < 600000) {\r\n                        return order.srcAmount.sub(order.filled);\r\n                    }\r\n                }\r\n            }\r\n            if (order.filled == order.srcAmount || gasleft() < 600000) {\r\n                return order.srcAmount.sub(order.filled);\r\n            }\r\n            if (nextKey > 0)\r\n                destKey = nextKey;\r\n            else\r\n                destKey = destOrderBook.tree.next(destKey);\r\n        }\r\n\r\n        if (\r\n            (order.src == _ESTTAddress && maxPrice == _minESTTPrice)\r\n            ||\r\n            (order.src == _USDTAddress && maxPrice == _ESTTDecimals.mul(_USDTDecimals).div(_minESTTPrice))\r\n        ) {\r\n            _match(order, Order(0, address(0), 0, 0, 0), maxPrice);\r\n        }\r\n        return order.srcAmount.sub(order.filled);\r\n    }\r\n\r\n    function _insertOrder (MemoryOrder memory order, address src) internal {\r\n        _lastUid++;\r\n        Order memory storageOrder = Order(\r\n            _packUid(_lastUid, src, _msgSender()),\r\n            order.trader,\r\n            order.srcAmount,\r\n            order.destAmount,\r\n            order.filled\r\n        );\r\n        _ledger[order.trader][src].orders.push(storageOrder);\r\n        uint256 length = _ledger[order.trader][src].orders.length;\r\n        _ledger[order.trader][src].ids[storageOrder.uid] = length;\r\n        uint256 price = _getPriceInverted(order);\r\n        _insertOrderToPriceIndex(_orderBooks[src], storageOrder.uid, price);\r\n    }\r\n\r\n    function _removeOrder (uint256 uid, address src, address user) internal {\r\n        uint256 index = _ledger[user][src].ids[uid];\r\n        uint256 length = _ledger[user][src].orders.length;\r\n        if (index != length) {\r\n            _ledger[user][src].orders[index.sub(1)] = _ledger[user][src].orders[length.sub(1)];\r\n            uint256 lastOrderUid = _ledger[user][src].orders[length.sub(1)].uid;\r\n            _ledger[user][src].ids[lastOrderUid] = index;\r\n        }\r\n        _ledger[user][src].orders.pop();\r\n        delete  _ledger[user][src].ids[uid];\r\n    }\r\n\r\n    function _removeOrderFromOrderBook (uint256 uid, address srcToken, uint256 price) internal {\r\n        uint256[] storage uids = _orderBooks[srcToken].uids[price];\r\n        for (uint256 i = 0; i < uids.length; ++i) {\r\n            if (uids[i] == uid) {\r\n                _removeOrderFromPriceIndex(_orderBooks[srcToken], i, price);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _insertOrderToPriceIndex (OrderBook storage orderBook, uint256 uid, uint256 key) internal {\r\n        if (!orderBook.tree.exists(key)) {\r\n            orderBook.tree.insert(key);\r\n        }\r\n        orderBook.uids[key].push(uid);\r\n    }\r\n\r\n    function _removeOrderFromPriceIndex (OrderBook storage orderBook, uint256 index, uint256 key) internal {\r\n        orderBook.uids[key][index] = orderBook.uids[key][orderBook.uids[key].length.sub(1)];\r\n        orderBook.uids[key].pop();\r\n        if (orderBook.uids[key].length == 0) {\r\n            orderBook.tree.remove(key);\r\n            delete orderBook.uids[key];\r\n        }\r\n    }\r\n\r\n    // TODO remove require\r\n    function _orderCheck (MemoryOrder memory order) internal view {\r\n        uint256 price = _getPrice(order);\r\n        if (order.src == _ESTTAddress) {\r\n            require(order.dest == _USDTAddress, \"wrong dest\");\r\n            require(price <= _minESTTPrice, \"ESTT can't be cheaper USDT\");\r\n        } else if (order.src == _USDTAddress) {\r\n            require(order.dest == _ESTTAddress, \"wrong dest\");\r\n            require(price >= _ESTTDecimals.mul(_USDTDecimals).div(_minESTTPrice), \"ESTT can't be cheaper USDT\");\r\n        } else {\r\n            revert(\"wrong src\");\r\n        }\r\n        require(order.srcAmount > 0, \"wrong src amount\");\r\n        require(order.destAmount > 0, \"wrong dest amount\");\r\n        uint256 totalAllowance = _ledger[order.trader][order.src].reservedBalance.add(order.srcAmount);\r\n        IERC20 ierc20 = IERC20(order.src);\r\n        require(ierc20.allowance(order.trader, address(this)) >= totalAllowance, \"not enough balance\");\r\n    }\r\n\r\n    function _match (MemoryOrder memory order, Order memory opposite, uint256 price) internal returns (bool, uint256) {\r\n        uint256 availableOpposite;\r\n        IERC20 erc20dest = IERC20(order.dest);\r\n        if (opposite.uid != 0) {\r\n            availableOpposite = (opposite.srcAmount.sub(opposite.filled)).mul(price).div(_decimals(order.dest));\r\n        } else {\r\n            availableOpposite = (erc20dest.balanceOf(address(this))).mul(price).div(_decimals(order.dest));\r\n        }\r\n        (uint256 needed, uint256 fee, uint256 neededOpposite, uint256 feeOpposite) = _calcMatch(order, opposite, availableOpposite, price);\r\n\r\n        IERC20 erc20src = IERC20(order.src);\r\n        require(erc20src.allowance(order.trader, address(this)) >= needed.add(fee), \"src not enough balance\");\r\n        if (opposite.uid != 0 && erc20dest.allowance(opposite.trader, address(this)) < neededOpposite) {\r\n            return (false, 0);\r\n        }\r\n\r\n        _ledger[order.trader][order.src].reservedBalance = _ledger[order.trader][order.src].reservedBalance.sub(needed.add(fee));\r\n        if (opposite.uid != 0) {\r\n            _ledger[opposite.trader][order.dest].reservedBalance = _ledger[opposite.trader][order.dest].reservedBalance.sub(neededOpposite.add(feeOpposite));\r\n        }\r\n\r\n        if (order.src == _ESTTAddress) {\r\n            if (opposite.uid != 0) {\r\n                _ESTT.transferFrom(order.trader, opposite.trader, needed);\r\n                _USDT.transferFrom(opposite.trader, order.trader, neededOpposite);\r\n            } else {\r\n                _ESTT.transferFrom(order.trader, address(this), needed);\r\n                _USDT.transfer(order.trader, neededOpposite);\r\n            }\r\n            if (fee > 0) {\r\n                _ESTT.transferFrom(order.trader, RESERVE_ADDRESS, fee);\r\n            }\r\n        } else {\r\n            if (opposite.uid != 0) {\r\n                _USDT.transferFrom(order.trader, opposite.trader, needed);\r\n                _ESTT.transferFrom(opposite.trader, order.trader, neededOpposite);\r\n            } else {\r\n                _USDT.transferFrom(order.trader, address(this), needed);\r\n                _ESTT.transfer(order.trader, neededOpposite);\r\n            }\r\n            if (feeOpposite > 0) {\r\n                _ESTT.transferFrom(opposite.trader, RESERVE_ADDRESS, feeOpposite);\r\n            }\r\n        }\r\n\r\n        order.filled = order.filled.add(needed.add(fee));\r\n\r\n        return (true, neededOpposite.add(feeOpposite));\r\n    }\r\n\r\n    function _calcMatch (MemoryOrder memory order, Order memory opposite, uint256 availableOpposite, uint256 price) internal view returns\r\n    (\r\n        uint256 needed,\r\n        uint256 fee,\r\n        uint256 neededOpposite,\r\n        uint256 feeOpposite\r\n    ) {\r\n        needed = order.srcAmount.sub(order.filled);\r\n        uint256 available = needed;\r\n        if (needed > availableOpposite) {\r\n            needed = availableOpposite;\r\n        }\r\n        neededOpposite = needed.mul(_decimals(order.dest)).div(price);\r\n        if (order.src == _ESTTAddress && order.trader != address(this)) {\r\n            fee = needed.mul(_exchangeFee).div(10 ** 18);\r\n            if (needed.add(fee) > available) {\r\n                fee = available.mul(_exchangeFee).div(10 ** 18);\r\n                needed = available.sub(fee);\r\n                neededOpposite = needed.mul(_decimals(order.dest)).div(price);\r\n            } else {\r\n                neededOpposite = needed.mul(_decimals(order.dest)).div(price);\r\n            }\r\n        } else if (order.src == _USDTAddress && opposite.uid > 0 && opposite.trader != address(this)) {\r\n            feeOpposite = neededOpposite.mul(_exchangeFee).div(10 ** 18);\r\n            availableOpposite = availableOpposite.mul(_decimals(order.dest)).div(price);\r\n            if (neededOpposite.add(feeOpposite) > availableOpposite) {\r\n                feeOpposite = availableOpposite.mul(_exchangeFee).div(10 ** 18);\r\n                neededOpposite = availableOpposite.sub(feeOpposite);\r\n                needed = neededOpposite.mul(price).div(_decimals(order.dest));\r\n            } else {\r\n                needed = neededOpposite.mul(price).div(_decimals(order.dest));\r\n            }\r\n        }\r\n        return (needed, fee, neededOpposite, feeOpposite);\r\n    }\r\n\r\n    function _packUid (uint256 index, address tokenSrc, address userAddress) internal view returns (uint256) {\r\n        uint8 tradeType = tokenSrc == _ESTTAddress ? ESTT_2_USDT : USDT_2_ESTT;\r\n        return index << 40 | (uint64(tradeType) << 32) | uint32(userAddress);\r\n    }\r\n\r\n    function _unpackUid (uint256 uid) internal view returns (address, address, uint256) {\r\n        uint8 tradeType = uint8(uid >> 32);\r\n        address tokenSrc;\r\n        if (tradeType == ESTT_2_USDT)\r\n            tokenSrc = _ESTTAddress;\r\n        else if (tradeType == USDT_2_ESTT)\r\n            tokenSrc = _USDTAddress;\r\n        else\r\n            revert(\"wrong token type\");\r\n        address userAddress = _usersAddresses[uint32(uid)];\r\n        uint256 index = _ledger[userAddress][tokenSrc].ids[uid];\r\n        // not needed sub has needed require\r\n        // require(index > 0, \"wrong uid\");\r\n        return (tokenSrc, userAddress, index.sub(1));\r\n    }\r\n\r\n    function _getPrice (MemoryOrder memory order) internal view returns (uint256) {\r\n        uint256 decimals = order.src == _ESTTAddress ? _USDTDecimals : _ESTTDecimals;\r\n        return order.srcAmount.mul(decimals).div(order.destAmount);\r\n    }\r\n\r\n    function _getPriceInverted (MemoryOrder memory order) internal view returns (uint256) {\r\n        uint256 decimals = order.src == _ESTTAddress ? _ESTTDecimals : _USDTDecimals;\r\n        return order.destAmount.mul(decimals).div(order.srcAmount);\r\n    }\r\n\r\n    function _decimals (address tokenAddress) internal view returns (uint256) {\r\n        if (tokenAddress == _ESTTAddress) {\r\n            return _ESTTDecimals;\r\n        }\r\n        return _USDTDecimals;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // mapping (address => uint256) private _balances;  // @openzeppelin\r\n    mapping (address => uint256) internal _balances;    // custom code\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    // function balanceOf(address account) public view override returns (uint256) {         // @openzeppelin\r\n    function balanceOf(address account) public view override virtual returns (uint256) {    // custom code\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/ESToken.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ESToken is ESTokenInterface, Context, ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    struct Referral {\r\n        address user;\r\n        uint256 expIndex;\r\n    }\r\n\r\n    struct ParentRef {\r\n        address user;\r\n        uint256 index;\r\n    }\r\n\r\n    address constant private RESERVE_ADDRESS = 0x0000000000000000000000000000000000000001;\r\n    address private _reserveAddress;\r\n    address private _exchangeAddress;\r\n\r\n    uint256 private _dailyInterest;\r\n    uint256 private _referralInterest;\r\n    uint256 private _accrualTimestamp;\r\n    uint256 private _expIndex;\r\n    uint256 private _expReferralIndex;\r\n    uint256 private _holdersCounter;\r\n\r\n    mapping (address => uint256) private _holderIndex;\r\n    mapping (address => ParentRef) private _parentRef;\r\n    mapping (address => Referral[]) private _referrals;\r\n\r\n    modifier onlyExchange () {\r\n        require(_msgSender() == address(_exchangeAddress), \"caller is not allowed to do some\");\r\n        _;\r\n    }\r\n\r\n    constructor () public ERC20(\"ESToken\", \"ESTT\") {\r\n        _setupDecimals(6);\r\n        _dailyInterest = 300_000_000_000_000; // +0.03%\r\n        _referralInterest = 150_000_000_000_000; // +0.015%\r\n        _expIndex = 10 ** 18;\r\n        _expReferralIndex = 10 ** 18;\r\n        _accrualTimestamp = block.timestamp;\r\n    }\r\n\r\n    function init(address newExchangeAddress) external onlyOwner {\r\n        ExchangeInterface exchangeI = ExchangeInterface(newExchangeAddress);\r\n        require(exchangeI.isExchange(), \"ESToken: newExchangeAddress does not match the exchange\");\r\n        require(_reserveAddress == address(0), \"ESToken: re-initialization\");\r\n        _reserveAddress = RESERVE_ADDRESS;\r\n        _exchangeAddress = newExchangeAddress;\r\n        _mint(_exchangeAddress, 70_000_000 * 10 ** uint256(decimals()));\r\n        _mint(_reserveAddress, 25_000_000 * 10 ** uint256(decimals()));\r\n        _mint(_msgSender(), 5_000_000 * 10 ** uint256(decimals()));\r\n    }\r\n\r\n    function isESToken() pure external override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function setDailyInterest(uint256 newDailyInterest) external onlyOwner {\r\n        require(newDailyInterest >= 10 ** 18, \"ESToken: negative daily interest\");\r\n        _dailyInterest = newDailyInterest.sub(10 ** 18);\r\n    }\r\n\r\n    function reserveAddress() external view returns (address) {\r\n        return _reserveAddress;\r\n    }\r\n\r\n    function exchangeAddress() external view returns (address) {\r\n        return _exchangeAddress;\r\n    }\r\n\r\n    function dailyInterest() external view returns (uint256) {\r\n        return _dailyInterest.add(10 ** 18);\r\n    }\r\n\r\n    function setReferralInterest(uint256 newReferralInterest) external onlyOwner {\r\n        require(newReferralInterest >= 10 ** 18, \"ESToken: negative referral interest\");\r\n        _referralInterest = newReferralInterest.sub(10 ** 18);\r\n    }\r\n\r\n    function referralInterest() external view returns (uint256) {\r\n        return _referralInterest.add(10 ** 18);\r\n    }\r\n\r\n    function parentReferral(address user) external view override returns (address) {\r\n        return _parentRef[user].user;\r\n    }\r\n\r\n    function holdersCounter() external view returns (uint256) {\r\n        return _holdersCounter;\r\n    }\r\n\r\n    function setParentReferral(address user, address parent, uint256 reward) external override onlyExchange {\r\n        require(parent != _reserveAddress &&\r\n                parent != _exchangeAddress &&\r\n                parent != owner(), \"Wrong referral\");\r\n        _updateBalance(parent);\r\n        _parentRef[user].user = parent;\r\n        _parentRef[user].index = _referrals[parent].length;\r\n        Referral memory referral = Referral(user, _expReferralIndex);\r\n        _referrals[parent].push(referral);\r\n        if (_balances[_reserveAddress] < reward) {\r\n            reward = _balances[_reserveAddress];\r\n        }\r\n        _balances[parent] = _balances[parent].add(reward);\r\n        _balances[_reserveAddress] = _balances[_reserveAddress].sub(reward);\r\n    }\r\n\r\n    function getMyReferrals() public view returns (address[] memory) {\r\n        uint256 length = _referrals[_msgSender()].length;\r\n        address[] memory addresses = new address[](length);\r\n        for (uint i = 0; i < length; ++i) {\r\n            addresses[i] = _referrals[_msgSender()][i].user;\r\n        }\r\n        return addresses;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balanceByTime(account, block.timestamp);\r\n    }\r\n\r\n    function balanceByTime(address account, uint256 timestamp) public view returns (uint256) {\r\n        if (account == _reserveAddress ||\r\n            account == owner() ||\r\n            account == _exchangeAddress) {\r\n            return super.balanceOf(account);\r\n        }\r\n        uint256 bonus = 0;\r\n        for(uint256 i = 0; i < _referrals[account].length; ++i) {\r\n            uint256 newExpReferralIndex = _calculateInterest(timestamp, _referralInterest, _expReferralIndex);\r\n            Referral memory referral = _referrals[account][i];\r\n            if (referral.expIndex < (10 ** 18) || _holderIndex[referral.user] < (10 ** 18)) {\r\n                continue;\r\n            }\r\n            uint256 newBalanceOfPartner = _balances[referral.user].mul(_expIndex).div(_holderIndex[referral.user]);\r\n            uint256 bonusBalance = newBalanceOfPartner.mul(newExpReferralIndex).div(referral.expIndex);\r\n            uint256 partnerBonus = bonusBalance.sub(newBalanceOfPartner);\r\n            bonus = bonus.add(partnerBonus);\r\n        }\r\n        if (_balances[account] > 0 && _holderIndex[account] > 0) {\r\n            uint256 newExpIndex = _calculateInterest(timestamp, _dailyInterest, _expIndex);\r\n            return _balances[account].mul(newExpIndex).div(_holderIndex[account]).add(bonus); // (balance * newExpIndex / holderIndex) + ref.bonus\r\n        }\r\n        return super.balanceOf(account).add(bonus);\r\n    }\r\n\r\n    function accrueInterest() public {\r\n        _expIndex = _calculateInterest(block.timestamp, _dailyInterest, _expIndex);\r\n        _expReferralIndex = _calculateInterest(block.timestamp, _referralInterest, _expReferralIndex);\r\n        _accrualTimestamp = block.timestamp;\r\n    }\r\n\r\n    function _calculateInterest(uint256 timestampNow, uint256 interest, uint256 prevIndex) internal view returns (uint256) {\r\n        uint256 period = timestampNow.sub(_accrualTimestamp);\r\n        if (period < 60) {\r\n            return prevIndex;\r\n        }\r\n        uint256 interestFactor = interest.mul(period);\r\n        uint newExpIndex = (interestFactor.mul(prevIndex).div(10 ** 18).div(86400)).add(prevIndex);\r\n        return newExpIndex;\r\n    }\r\n\r\n    function _updateBalance(address account) internal {\r\n        if (account == _reserveAddress ||\r\n            account == owner() ||\r\n            account == _exchangeAddress) {\r\n            return ;\r\n        }\r\n        if (_holderIndex[account] > 0) {\r\n            uint256 newBalance = _balances[account].mul(_expIndex).div(_holderIndex[account]); // balance * expIndex / holderIndex\r\n            uint256 delta = newBalance.sub(_balances[account]);\r\n            for(uint256 i = 0; i < _referrals[account].length; ++i) {\r\n                Referral storage referral = _referrals[account][i];\r\n                if (referral.expIndex < (10 ** 18) || _holderIndex[referral.user] < (10 ** 18)) {\r\n                    continue;\r\n                }\r\n                uint256 newBalanceOfPartner = _balances[referral.user].mul(_expIndex).div(_holderIndex[referral.user]);\r\n                uint256 bonusBalance = newBalanceOfPartner.mul(_expReferralIndex).div(referral.expIndex);\r\n                uint256 partnerBonus = bonusBalance.sub(newBalanceOfPartner);\r\n                newBalance = newBalance.add(partnerBonus);\r\n                delta = delta.add(partnerBonus);\r\n                referral.expIndex = _expReferralIndex;\r\n            }\r\n            if (delta != 0 && _balances[_reserveAddress] >= delta) {\r\n                if (_balances[account] == 0) {\r\n                    _holdersCounter++;\r\n                }\r\n                _balances[account] = newBalance;\r\n                _balances[_reserveAddress] = _balances[_reserveAddress].sub(delta);\r\n                if (_parentRef[account].user != address(0)) {\r\n                    _referrals[_parentRef[account].user][_parentRef[account].index].expIndex = _expReferralIndex;\r\n                }\r\n            }\r\n        }\r\n        _holderIndex[account] = _expIndex;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\r\n        accrueInterest();\r\n        if (from != address(0)) {\r\n            _updateBalance(from);\r\n            _updateBalance(to);\r\n        }\r\n        if (_balances[from] == amount) {\r\n            _holdersCounter--;\r\n        }\r\n        if (_balances[to] == 0) {\r\n            _holdersCounter++;\r\n        }\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"balanceByTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newExchangeAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isESToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"parentReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDailyInterest\",\"type\":\"uint256\"}],\"name\":\"setDailyInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setParentReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReferralInterest\",\"type\":\"uint256\"}],\"name\":\"setReferralInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ESToken", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://442a54ff84dd7bd84d72206691e41772ff01179b31ce67ec1583e61d77d54e27"}