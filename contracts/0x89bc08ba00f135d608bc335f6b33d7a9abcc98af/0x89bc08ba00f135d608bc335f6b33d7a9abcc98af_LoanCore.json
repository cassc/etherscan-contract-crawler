{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LoanCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./interfaces/ILoanCore.sol\\\";\\nimport \\\"./interfaces/ICallDelegator.sol\\\";\\nimport \\\"./interfaces/IPromissoryNote.sol\\\";\\n\\nimport \\\"./PromissoryNote.sol\\\";\\nimport \\\"./libraries/InterestCalculator.sol\\\";\\nimport \\\"./vault/OwnableERC721.sol\\\";\\nimport {\\n    LC_ZeroAddress,\\n    LC_ReusedNote,\\n    LC_CannotSettle,\\n    LC_CannotWithdraw,\\n    LC_ZeroAmount,\\n    LC_ArrayLengthMismatch,\\n    LC_OverMaxSplit,\\n    LC_CollateralInUse,\\n    LC_InvalidState,\\n    LC_NotExpired,\\n    LC_NonceUsed,\\n    LC_AffiliateCodeAlreadySet,\\n    LC_CallerNotLoanCore,\\n    LC_NoReceipt,\\n    LC_Shutdown\\n} from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title LoanCore\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * The LoanCore lending contract is the heart of the Arcade.xyz lending protocol.\\n * It stores and maintains loan state, enforces loan lifecycle invariants, takes\\n * escrow of assets during an active loans, governs the release of collateral on\\n * repayment or default, and tracks signature nonces for loan consent.\\n *\\n * Also contains logic for approving Asset Vault calls using the\\n * ICallDelegator interface.\\n */\\ncontract LoanCore is\\n    ILoanCore,\\n    InterestCalculator,\\n    AccessControlEnumerable,\\n    Pausable,\\n    ReentrancyGuard,\\n    ICallDelegator\\n{\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================ STATE ==============================================\\n\\n    // =================== Constants =====================\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant ORIGINATOR_ROLE = keccak256(\\\"ORIGINATOR\\\");\\n    bytes32 public constant REPAYER_ROLE = keccak256(\\\"REPAYER\\\");\\n    bytes32 public constant AFFILIATE_MANAGER_ROLE = keccak256(\\\"AFFILIATE_MANAGER\\\");\\n    bytes32 public constant FEE_CLAIMER_ROLE = keccak256(\\\"FEE_CLAIMER\\\");\\n    bytes32 public constant SHUTDOWN_ROLE = keccak256(\\\"SHUTDOWN\\\");\\n\\n    /// @dev Max split any affiliate can earn.\\n    uint96 private constant MAX_AFFILIATE_SPLIT = 50_00;\\n\\n    /// @dev Grace period for repaying a loan after loan duration.\\n    uint256 public constant GRACE_PERIOD = 10 minutes;\\n\\n    // =============== Contract References ================\\n\\n    IPromissoryNote public immutable override borrowerNote;\\n    IPromissoryNote public immutable override lenderNote;\\n\\n    // =================== Loan State =====================\\n\\n    /// @dev Counter for serial IDs of all loans created.\\n    Counters.Counter private loanIdTracker;\\n\\n    /// @dev Lookup table storing loan data structure.\\n    mapping(uint256 => LoanLibrary.LoanData) private loans;\\n\\n    /// @dev Lookup table showing what collateral is currently being escrowed.\\n    ///      Key is hash of (collateralAddress, collateralId).\\n    mapping(bytes32 => bool) private collateralInUse;\\n\\n    /// @dev Lookup table showing for which user, which nonces have been used.\\n    ///      user => nonce => isUsed\\n    mapping(address => mapping(uint160 => bool)) public usedNonces;\\n\\n    // =================== Fee Management =====================\\n\\n    /// @dev affiliate code => affiliate split\\n    ///      split contains payout address and a feeShare in bps\\n    mapping(bytes32 => AffiliateSplit) public affiliateSplits;\\n\\n    /// @dev token => user => amount fees\\n    mapping(address => mapping(address => uint256)) public feesWithdrawable;\\n\\n    /// @dev tokenId => {token, amount}\\n    ///      can be withdrawn by burning LenderNote of matching tokenId\\n    mapping(uint256 => NoteReceipt) public noteReceipts;\\n\\n    // ========================================== CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @notice Deploys the loan core contract, by setting up roles and external\\n     *         contract references.\\n     *\\n     * @param _borrowerNote       The address of the PromissoryNote contract representing borrower obligation.\\n     * @param _lenderNote         The address of the PromissoryNote contract representing lender obligation.\\n     */\\n    constructor(IPromissoryNote _borrowerNote, IPromissoryNote _lenderNote) {\\n        if (address(_borrowerNote) == address(0)) revert LC_ZeroAddress(\\\"borrowerNote\\\");\\n        if (address(_lenderNote) == address(0)) revert LC_ZeroAddress(\\\"lenderNote\\\");\\n        if (address(_borrowerNote) == address(_lenderNote)) revert LC_ReusedNote();\\n\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(ORIGINATOR_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(REPAYER_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(FEE_CLAIMER_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(AFFILIATE_MANAGER_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(SHUTDOWN_ROLE, ADMIN_ROLE);\\n\\n        /// @dev Although using references for both promissory notes, these\\n        ///      must be fresh versions and cannot be re-used across multiple\\n        ///      loanCore instances, to ensure loanId <> tokenID parity. This is\\n        ///      enforced via deployment processes.\\n        borrowerNote = _borrowerNote;\\n        lenderNote = _lenderNote;\\n\\n        // Avoid having loanId = 0\\n        loanIdTracker.increment();\\n    }\\n\\n    // ====================================== LIFECYCLE OPERATIONS ======================================\\n\\n    /**\\n     * @notice Start a loan, matching a set of terms, with a given\\n     *         lender and borrower. Collects collateral and distributes\\n     *         principal, along with collecting an origination fee for the\\n     *         protocol and/or affiliate. Can only be called by OriginationController.\\n     *\\n     * @param lender                The lender for the loan.\\n     * @param borrower              The borrower for the loan.\\n     * @param terms                 The terms of the loan.\\n     * @param _amountFromLender     The amount of principal to be collected from the lender.\\n     * @param _amountToBorrower     The amount of principal to be distributed to the borrower (net after fees).\\n     *\\n     * @return loanId               The ID of the newly created loan.\\n     */\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _amountFromLender,\\n        uint256 _amountToBorrower,\\n        LoanLibrary.FeeSnapshot calldata _feeSnapshot\\n    ) external override whenNotPaused onlyRole(ORIGINATOR_ROLE) nonReentrant returns (uint256 loanId) {\\n        // Check collateral is not already used in a loan\\n        bytes32 collateralKey = keccak256(abi.encode(terms.collateralAddress, terms.collateralId));\\n        if (collateralInUse[collateralKey]) revert LC_CollateralInUse(terms.collateralAddress, terms.collateralId);\\n\\n        // Check that we will not net lose tokens\\n        if (_amountToBorrower > _amountFromLender) revert LC_CannotSettle(_amountToBorrower, _amountFromLender);\\n\\n        // Mark collateral as escrowed\\n        collateralInUse[collateralKey] = true;\\n\\n        // Assign fees for withdrawal\\n        uint256 feesEarned;\\n        unchecked { feesEarned = _amountFromLender - _amountToBorrower; }\\n        (uint256 protocolFee, uint256 affiliateFee, address affiliate) =\\n            _getAffiliateSplit(feesEarned, terms.affiliateCode);\\n\\n        if (protocolFee > 0) feesWithdrawable[terms.payableCurrency][address(this)] += protocolFee;\\n        if (affiliateFee > 0) feesWithdrawable[terms.payableCurrency][affiliate] += affiliateFee;\\n\\n        // Get current loanId and increment for next function call\\n        loanId = loanIdTracker.current();\\n        loanIdTracker.increment();\\n\\n        // Initiate loan state\\n        loans[loanId] = LoanLibrary.LoanData({\\n            terms: terms,\\n            startDate: uint160(block.timestamp),\\n            state: LoanLibrary.LoanState.Active,\\n            feeSnapshot: _feeSnapshot\\n        });\\n\\n        // Distribute notes and principal\\n        _mintLoanNotes(loanId, borrower, lender);\\n\\n        // Collect collateral from borrower\\n        IERC721(terms.collateralAddress).transferFrom(borrower, address(this), terms.collateralId);\\n\\n        // Collect principal from lender and send net (minus fees) amount to borrower\\n        _collectIfNonzero(IERC20(terms.payableCurrency), lender, _amountFromLender);\\n        _transferIfNonzero(IERC20(terms.payableCurrency), borrower, _amountToBorrower);\\n\\n        emit LoanStarted(loanId, lender, borrower);\\n    }\\n\\n    /**\\n     * @notice Repay the given loan. Can only be called by RepaymentController,\\n     *         which verifies repayment conditions. This method will collect\\n     *         the total interest due from the borrower  and redistribute\\n     *         principal + interest to the lender, and collateral to the borrower.\\n     *         All promissory notes will be burned and the loan will be marked as complete.\\n     *\\n     * @param loanId                The ID of the loan to repay.\\n     * @param payer                 The party repaying the loan.\\n     * @param _amountFromPayer      The amount of tokens to be collected from the repayer.\\n     * @param _amountToLender       The amount of tokens to be distributed to the lender (net after fees).\\n     */\\n    function repay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external override onlyRole(REPAYER_ROLE) nonReentrant {\\n        LoanLibrary.LoanData memory data = _handleRepay(loanId, _amountFromPayer, _amountToLender);\\n\\n        // Get promissory notes from two parties involved, then burn\\n        address lender = lenderNote.ownerOf(loanId);\\n        address borrower = borrowerNote.ownerOf(loanId);\\n        _burnLoanNotes(loanId);\\n\\n        // Send collected principal + interest, less fees, to lender\\n        _collectIfNonzero(IERC20(data.terms.payableCurrency), payer, _amountFromPayer);\\n        _transferIfNonzero(IERC20(data.terms.payableCurrency), lender, _amountToLender);\\n\\n        // Redistribute collateral\\n        IERC721(data.terms.collateralAddress).safeTransferFrom(address(this), borrower, data.terms.collateralId);\\n\\n        emit LoanRepaid(loanId);\\n    }\\n\\n    /**\\n     * @notice Let the borrower repay the given loan, but do not release principal to the lender:\\n     *         instead, make it available for withdrawal. Should be used in cases where the borrower wants\\n     *         to fulfill loan obligations but the lender cannot receive tokens (due to malicious or\\n     *         accidental behavior, token blacklisting etc).\\n     *\\n     * @param loanId                The ID of the loan to repay.\\n     * @param payer                 The party repaying the loan.\\n     * @param _amountFromPayer      The amount of tokens to be collected from the repayer.\\n     * @param _amountToLender       The amount of tokens to be distributed to the lender (net after fees).\\n     */\\n    function forceRepay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external override onlyRole(REPAYER_ROLE) nonReentrant {\\n        LoanLibrary.LoanData memory data = _handleRepay(loanId, _amountFromPayer, _amountToLender);\\n\\n        // Do not send collected principal, but make it available for withdrawal by a holder of the lender note\\n        noteReceipts[loanId] = NoteReceipt({\\n            token: data.terms.payableCurrency,\\n            amount: _amountToLender\\n        });\\n\\n        // Get promissory notes from two parties involved, then burn\\n        // borrower note _only_ - do not burn lender note until receipt\\n        // is redeemed\\n        address borrower = borrowerNote.ownerOf(loanId);\\n        borrowerNote.burn(loanId);\\n\\n        // Collect from borrower and redistribute collateral\\n        _collectIfNonzero(IERC20(data.terms.payableCurrency), payer, _amountFromPayer);\\n        IERC721(data.terms.collateralAddress).safeTransferFrom(address(this), borrower, data.terms.collateralId);\\n\\n        emit LoanRepaid(loanId);\\n        emit ForceRepay(loanId);\\n    }\\n\\n    /**\\n     * @notice Claim collateral on a given loan. Can only be called by RepaymentController,\\n     *         which verifies claim conditions. This method validates that the loan's due\\n     *         date has passed, and the grace period of 10 mins has also passed. Then it distributes\\n     *         collateral to the lender. All promissory notes will be burned and the loan\\n     *         will be marked as complete.\\n     *\\n     * @param loanId                              The ID of the loan to claim.\\n     * @param _amountFromLender                   Any claiming fees to be collected from the lender.\\n     */\\n    function claim(uint256 loanId, uint256 _amountFromLender)\\n        external\\n        override\\n        whenNotPaused\\n        onlyRole(REPAYER_ROLE)\\n        nonReentrant\\n    {\\n        LoanLibrary.LoanData memory data = loans[loanId];\\n        // Ensure valid initial loan state when claiming loan\\n        if (data.state != LoanLibrary.LoanState.Active) revert LC_InvalidState(data.state);\\n\\n        // First check if the call is being made after the due date plus 10 min grace period.\\n        uint256 dueDate = data.startDate + data.terms.durationSecs + GRACE_PERIOD;\\n        if (dueDate >= block.timestamp) revert LC_NotExpired(dueDate);\\n\\n        // State changes and cleanup\\n        loans[loanId].state = LoanLibrary.LoanState.Defaulted;\\n        collateralInUse[keccak256(abi.encode(data.terms.collateralAddress, data.terms.collateralId))] = false;\\n\\n        if (_amountFromLender > 0) {\\n            // Assign fees for withdrawal\\n            (uint256 protocolFee, uint256 affiliateFee, address affiliate) =\\n                _getAffiliateSplit(_amountFromLender, data.terms.affiliateCode);\\n\\n            mapping(address => uint256) storage _feesWithdrawable = feesWithdrawable[data.terms.payableCurrency];\\n            if (protocolFee > 0) _feesWithdrawable[address(this)] += protocolFee;\\n            if (affiliateFee > 0) _feesWithdrawable[affiliate] += affiliateFee;\\n        }\\n\\n        // Get promissory notes from two parties involved, then burn\\n        address lender = lenderNote.ownerOf(loanId);\\n        _burnLoanNotes(loanId);\\n\\n        // Collateral redistribution\\n        IERC721(data.terms.collateralAddress).safeTransferFrom(address(this), lender, data.terms.collateralId);\\n\\n        // Collect claim fee from lender\\n        _collectIfNonzero(IERC20(data.terms.payableCurrency), lender, _amountFromLender);\\n\\n        emit LoanClaimed(loanId);\\n    }\\n\\n    /**\\n     * @notice Burn a lender note, for an already-completed loan, in order to receive\\n     *         held tokens already paid back by the borrower. Can only be called by the\\n     *         owner of the note.\\n     *\\n     * @param loanId                    The ID of the lender note to redeem.\\n     * @param _amountFromLender         Any redemption fees to be collected from the lender.\\n     * @param to                        The address to receive the held tokens.\\n     */\\n    function redeemNote(\\n        uint256 loanId,\\n        uint256 _amountFromLender,\\n        address to\\n    ) external override onlyRole(REPAYER_ROLE) nonReentrant {\\n        NoteReceipt memory receipt = noteReceipts[loanId];\\n        (address token, uint256 amount) = (receipt.token, receipt.amount);\\n        if (token == address(0) || amount == 0) revert LC_NoReceipt(loanId);\\n\\n        // Deduct the redeem fee from the amount and assign for withdrawal\\n        amount -= _amountFromLender;\\n\\n        // Assign fees for withdrawal\\n        (uint256 protocolFee, uint256 affiliateFee, address affiliate) =\\n            _getAffiliateSplit(_amountFromLender, loans[loanId].terms.affiliateCode);\\n\\n        mapping(address => uint256) storage _feesWithdrawable = feesWithdrawable[token];\\n        if (protocolFee > 0) _feesWithdrawable[address(this)] += protocolFee;\\n        if (affiliateFee > 0) _feesWithdrawable[affiliate] += affiliateFee;\\n\\n        // Delete the receipt\\n        delete noteReceipts[loanId];\\n\\n        // Burn the note\\n        address lender = lenderNote.ownerOf(loanId);\\n        lenderNote.burn(loanId);\\n\\n        // Transfer the held tokens to the lender-specified address\\n        _transferIfNonzero(IERC20(token), to, amount);\\n\\n        emit NoteRedeemed(token, lender, to, loanId, amount);\\n    }\\n\\n    /**\\n     * @notice Roll over a loan, atomically closing one and re-opening a new one with the\\n     *         same collateral. Instead of full repayment, only net payments from each\\n     *         party are required. Each rolled-over loan is marked as complete, and the new\\n     *         loan is given a new unique ID and notes. At the time of calling, any needed\\n     *         net payments have been collected by the RepaymentController for withdrawal.\\n     *\\n     * @param oldLoanId             The ID of the old loan.\\n     * @param borrower              The borrower for the loan.\\n     * @param lender                The lender for the old loan.\\n     * @param terms                 The terms of the new loan.\\n     * @param _settledAmount        The amount LoanCore needs to withdraw to settle.\\n     * @param _amountToOldLender    The payment to the old lender (if lenders are changing).\\n     * @param _amountToLender       The payment to the lender (if same as old lender).\\n     * @param _amountToBorrower     The payment to the borrower (in the case of leftover principal).\\n     *\\n     * @return newLoanId            The ID of the new loan.\\n     */\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external override whenNotPaused onlyRole(ORIGINATOR_ROLE) nonReentrant returns (uint256 newLoanId) {\\n        LoanLibrary.LoanData storage data = loans[oldLoanId];\\n        // Ensure valid loan state for old loan\\n        if (data.state != LoanLibrary.LoanState.Active) revert LC_InvalidState(data.state);\\n\\n        // State change for old loan\\n        data.state = LoanLibrary.LoanState.Repaid;\\n\\n        address oldLender = lenderNote.ownerOf(oldLoanId);\\n        IERC20 payableCurrency = IERC20(data.terms.payableCurrency);\\n\\n        // Check that contract will not net lose tokens\\n        if (_amountToOldLender + _amountToLender + _amountToBorrower > _settledAmount)\\n            revert LC_CannotSettle(_amountToOldLender + _amountToLender + _amountToBorrower, _settledAmount);\\n        {\\n            // Assign fees for withdrawal\\n            uint256 feesEarned;\\n            unchecked { feesEarned = _settledAmount - _amountToOldLender - _amountToLender - _amountToBorrower; }\\n\\n            // Make sure split goes to affiliate code from _new_ terms\\n            (uint256 protocolFee, uint256 affiliateFee, address affiliate) =\\n                _getAffiliateSplit(feesEarned, terms.affiliateCode);\\n\\n            // Assign fees for withdrawal\\n            mapping(address => uint256) storage _feesWithdrawable = feesWithdrawable[address(payableCurrency)];\\n            if (protocolFee > 0) _feesWithdrawable[address(this)] += protocolFee;\\n            if (affiliateFee > 0) _feesWithdrawable[affiliate] += affiliateFee;\\n        }\\n\\n        // Set up new loan\\n        newLoanId = loanIdTracker.current();\\n        loanIdTracker.increment();\\n\\n        loans[newLoanId] = LoanLibrary.LoanData({\\n            terms: terms,\\n            state: LoanLibrary.LoanState.Active,\\n            startDate: uint160(block.timestamp),\\n            feeSnapshot: data.feeSnapshot\\n        });\\n\\n        // Burn old notes\\n        _burnLoanNotes(oldLoanId);\\n\\n        // Mint new notes\\n        _mintLoanNotes(newLoanId, borrower, lender);\\n\\n        // Perform net settlement operations\\n        _collectIfNonzero(payableCurrency, msg.sender, _settledAmount);\\n        _transferIfNonzero(payableCurrency, oldLender, _amountToOldLender);\\n        _transferIfNonzero(payableCurrency, lender, _amountToLender);\\n        _transferIfNonzero(payableCurrency, borrower, _amountToBorrower);\\n\\n        emit LoanRepaid(oldLoanId);\\n        emit LoanStarted(newLoanId, lender, borrower);\\n        emit LoanRolledOver(oldLoanId, newLoanId);\\n    }\\n\\n    // ======================================== NONCE MANAGEMENT ========================================\\n\\n    /**\\n     * @notice Mark a nonce as used in the context of starting a loan. Reverts if\\n     *         nonce has already been used. Can only be called by Origination Controller.\\n     *\\n     * @param user                  The user for whom to consume a nonce.\\n     * @param nonce                 The nonce to consume.\\n     */\\n    function consumeNonce(address user, uint160 nonce) external override whenNotPaused onlyRole(ORIGINATOR_ROLE) {\\n        _useNonce(user, nonce);\\n    }\\n\\n    /**\\n     * @notice Mark a nonce as used in order to invalidate signatures with the nonce.\\n     *         Does not allow specifying the user, and automatically consumes the nonce\\n     *         of the caller.\\n     *\\n     * @param nonce                 The nonce to consume.\\n     */\\n    function cancelNonce(uint160 nonce) external override {\\n        _useNonce(msg.sender, nonce);\\n    }\\n\\n    // ========================================= VIEW FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Returns the LoanData struct for the specified loan ID.\\n     *\\n     * @param loanId                The ID of the given loan.\\n     *\\n     * @return loanData             The struct containing loan state and terms.\\n     */\\n    function getLoan(uint256 loanId) external view override returns (LoanLibrary.LoanData memory loanData) {\\n        return loans[loanId];\\n    }\\n\\n    /**\\n     * @notice Returns the note receipt data for a given loan ID. Does\\n     *         not revert, returns 0 if no receipt.\\n     *\\n     * @param loanId                The ID of the given loan.\\n     *\\n     * @return token                The address of the token for the note.\\n     * @return amount               The amount of the note.\\n     */\\n    function getNoteReceipt(uint256 loanId) external view override returns (address, uint256) {\\n        NoteReceipt storage receipt = noteReceipts[loanId];\\n        return (receipt.token, receipt.amount);\\n    }\\n\\n    /**\\n     * @notice Reports if the caller is allowed to call functions on the given vault.\\n     *         Determined by if they are the borrower for the loan, defined by ownership\\n     *         of the relevant BorrowerNote.\\n     *\\n     * @dev Implemented as part of the ICallDelegator interface.\\n     *\\n     * @param caller                The user that wants to call a function.\\n     * @param vault                 The vault that the caller wants to call a function on.\\n     *\\n     * @return allowed              True if the caller is allowed to call on the vault.\\n     */\\n    function canCallOn(address caller, address vault) external view override whenNotPaused returns (bool) {\\n        // if the collateral is not currently being used in a loan, disallow\\n        if (!collateralInUse[keccak256(abi.encode(OwnableERC721(vault).ownershipToken(), uint256(uint160(vault))))]) {\\n            return false;\\n        }\\n\\n        uint256 noteCount = borrowerNote.balanceOf(caller);\\n        for (uint256 i = 0; i < noteCount;) {\\n            uint256 loanId = borrowerNote.tokenOfOwnerByIndex(caller, i);\\n            LoanLibrary.LoanTerms storage terms = loans[loanId].terms;\\n\\n            // if the borrower is currently borrowing against this vault,\\n            // return true\\n            if (\\n                terms.collateralAddress == OwnableERC721(vault).ownershipToken() &&\\n                terms.collateralId == uint256(uint160(vault))\\n            ) {\\n                return true;\\n            }\\n\\n            // Can never overflow bc balanceOf is bounded by uint256\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Reports whether the given nonce has been previously used by a user. Returning\\n     *         false does not mean that the nonce will not clash with another potential off-chain\\n     *         signature that is stored somewhere.\\n     *\\n     * @param user                  The user to check the nonce for.\\n     * @param nonce                 The nonce to check.\\n     *\\n     * @return used                 Whether the nonce has been used.\\n     */\\n    function isNonceUsed(address user, uint160 nonce) external view override returns (bool) {\\n        return usedNonces[user][nonce];\\n    }\\n\\n    // ========================================= FEE MANAGEMENT =========================================\\n\\n    /**\\n     * @notice Claim any feesWithdrawable balance pending for the caller, as specified by token.\\n     *         This may accumulate from either affiliate fee shares or borrower forced repayments.\\n     *\\n     * @param token                 The contract address of the token to claim tokens for.\\n     * @param amount                The amount of tokens to claim.\\n     * @param to                    The address to send the tokens to.\\n     */\\n    function withdraw(address token, uint256 amount, address to) external override nonReentrant {\\n        if (token == address(0)) revert LC_ZeroAddress(\\\"token\\\");\\n        if (amount == 0) revert LC_ZeroAmount();\\n        if (to == address(0)) revert LC_ZeroAddress(\\\"to\\\");\\n\\n        // any token balances remaining on this contract are fees owned by the protocol\\n        mapping(address => uint256) storage _feesWithdrawable = feesWithdrawable[token];\\n\\n        uint256 available = _feesWithdrawable[msg.sender];\\n        if (amount > available) revert LC_CannotWithdraw(amount, available);\\n\\n        unchecked { _feesWithdrawable[msg.sender] -= amount; }\\n\\n        _transferIfNonzero(IERC20(token), to, amount);\\n\\n        emit FeesWithdrawn(token, msg.sender, to, amount);\\n    }\\n\\n    /**\\n     * @notice Claim the protocol fees for the given token. Any token used as principal\\n     *         for a loan will have accumulated fees. Must be called by contract owner.\\n     *\\n     * @param token                     The contract address of the token to claim fees for.\\n     * @param to                        The address to send the fees to.\\n     */\\n    function withdrawProtocolFees(address token, address to) external override nonReentrant onlyRole(FEE_CLAIMER_ROLE) {\\n        if (token == address(0)) revert LC_ZeroAddress(\\\"token\\\");\\n        if (to == address(0)) revert LC_ZeroAddress(\\\"to\\\");\\n\\n        // any token balances remaining on this contract are fees owned by the protocol\\n        mapping(address => uint256) storage _feesWithdrawable = feesWithdrawable[token];\\n        uint256 amount = _feesWithdrawable[address(this)];\\n        _feesWithdrawable[address(this)] = 0;\\n\\n        _transferIfNonzero(IERC20(token), to, amount);\\n\\n        emit FeesWithdrawn(token, msg.sender, to, amount);\\n    }\\n\\n    // ======================================== ADMIN FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Set the affiliate fee splits for the batch of affiliate codes. Codes and splits should\\n     *         be matched index-wise. Can only be called by protocol admin.\\n     *\\n     * @param codes                     The affiliate code to set the split for.\\n     * @param splits                    The splits to set for the given codes.\\n     */\\n    function setAffiliateSplits(\\n        bytes32[] calldata codes,\\n        AffiliateSplit[] calldata splits\\n    ) external override onlyRole(AFFILIATE_MANAGER_ROLE) {\\n        if (codes.length != splits.length) revert LC_ArrayLengthMismatch();\\n\\n        for (uint256 i = 0; i < codes.length;) {\\n            if (splits[i].splitBps > MAX_AFFILIATE_SPLIT)\\n                revert LC_OverMaxSplit(splits[i].splitBps, MAX_AFFILIATE_SPLIT);\\n\\n            if (affiliateSplits[codes[i]].affiliate != address(0))\\n                revert LC_AffiliateCodeAlreadySet(codes[i]);\\n\\n            affiliateSplits[codes[i]] = splits[i];\\n            emit AffiliateSet(codes[i], splits[i].affiliate, splits[i].splitBps);\\n\\n            // codes is calldata, overflow is impossible bc of calldata\\n            // size limits vis-a-vis gas\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Shuts down the contract, callable by a designated role. Irreversible.\\n     *         When the contract is shutdown, loans can only be repaid.\\n     *         New loans cannot be started, defaults cannot be claimed,\\n     *         loans cannot be rolled over, and vault utility cannot be\\n     *         employed. This is an emergency recovery feature.\\n     */\\n    function shutdown() external onlyRole(SHUTDOWN_ROLE) {\\n        _pause();\\n    }\\n\\n    // ============================================= HELPERS ============================================\\n\\n\\n    /**\\n     * @dev Perform shared logic across repay operations repay and forceRepay - all \\\"checks\\\" and \\\"effects\\\".\\n     *      Will validate loan state, perform accounting calculations, update storage and burn loan notes.\\n     *      Transfers should occur in the calling function.\\n     *\\n     * @param loanId                The ID of the loan to repay.\\n     * @param _amountFromPayer      The amount of tokens to be collected from the repayer.\\n     * @param _amountToLender       The amount of tokens to be distributed to the lender (net after fees).\\n     *\\n     * @return data                 The loan data for the repay operation.\\n     */\\n    function _handleRepay(\\n        uint256 loanId,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) internal returns (LoanLibrary.LoanData memory data) {\\n        data = loans[loanId];\\n        // Ensure valid initial loan state when repaying loan\\n        if (data.state != LoanLibrary.LoanState.Active) revert LC_InvalidState(data.state);\\n\\n        // Check that we will not net lose tokens.\\n        if (_amountToLender > _amountFromPayer) revert LC_CannotSettle(_amountToLender, _amountFromPayer);\\n\\n        uint256 feesEarned;\\n        unchecked { feesEarned = _amountFromPayer - _amountToLender; }\\n\\n        (uint256 protocolFee, uint256 affiliateFee, address affiliate) =\\n            _getAffiliateSplit(feesEarned, data.terms.affiliateCode);\\n\\n        // Assign fees for withdrawal\\n        mapping(address => uint256) storage _feesWithdrawable = feesWithdrawable[data.terms.payableCurrency];\\n        if (protocolFee > 0) _feesWithdrawable[address(this)] += protocolFee;\\n        if (affiliateFee > 0) _feesWithdrawable[affiliate] += affiliateFee;\\n\\n        // State changes and cleanup\\n        loans[loanId].state = LoanLibrary.LoanState.Repaid;\\n        collateralInUse[keccak256(abi.encode(data.terms.collateralAddress, data.terms.collateralId))] = false;\\n    }\\n\\n    /**\\n     * @dev Lookup the submitted affiliateCode for a split value, and return the amount\\n     *      going to protocol and the amount going to the affiliate, along with destination.\\n     *\\n     * @param amount                The amount to split.\\n     * @param affiliateCode         The affiliate code to lookup.\\n     *\\n     * @return protocolFee          The amount going to protocol.\\n     * @return affiliateFee         The amount going to the affiliate.\\n     * @return affiliate            The address of the affiliate.\\n     */\\n    function _getAffiliateSplit(\\n        uint256 amount,\\n        bytes32 affiliateCode\\n    ) internal view returns (uint256 protocolFee, uint256 affiliateFee, address affiliate) {\\n        AffiliateSplit memory split = affiliateSplits[affiliateCode];\\n\\n        if (split.affiliate == address(0)) {\\n            return (amount, 0, address(0));\\n        }\\n\\n        affiliate = split.affiliate;\\n        affiliateFee = amount * split.splitBps / BASIS_POINTS_DENOMINATOR;\\n        unchecked { protocolFee = amount - affiliateFee; }\\n    }\\n\\n    /**\\n     * @dev Consume a nonce, by marking it as used for that user. Reverts if the nonce\\n     *      has already been used.\\n     *\\n     * @param user                  The user for whom to consume a nonce.\\n     * @param nonce                 The nonce to consume.\\n     */\\n    function _useNonce(address user, uint160 nonce) internal {\\n        mapping(uint160 => bool) storage _usedNonces = usedNonces[user];\\n\\n        if (_usedNonces[nonce]) revert LC_NonceUsed(user, nonce);\\n        // set nonce to used\\n        _usedNonces[nonce] = true;\\n\\n        emit NonceUsed(user, nonce);\\n    }\\n\\n    /**\\n     * @dev Mint a borrower and lender note together - easier to make sure\\n     *      they are synchronized.\\n     *\\n     * @param loanId                The token ID to mint.\\n     * @param borrower              The address of the recipient of the borrower note.\\n     * @param lender                The address of the recipient of the lender note.\\n     */\\n    function _mintLoanNotes(\\n        uint256 loanId,\\n        address borrower,\\n        address lender\\n    ) internal {\\n        borrowerNote.mint(borrower, loanId);\\n        lenderNote.mint(lender, loanId);\\n    }\\n\\n    /**\\n     * @dev Burn a borrower and lender note together - easier to make sure\\n     *      they are synchronized.\\n     *\\n     * @param loanId                The token ID to burn.\\n     */\\n    function _burnLoanNotes(uint256 loanId) internal {\\n        lenderNote.burn(loanId);\\n        borrowerNote.burn(loanId);\\n    }\\n\\n    /**\\n     * @dev Perform an ERC20 transfer, if the specified amount is nonzero - else no-op.\\n     *\\n     * @param token                 The token to transfer.\\n     * @param to                    The address receiving the tokens.\\n     * @param amount                The amount of tokens to transfer.\\n     */\\n    function _transferIfNonzero(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) token.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev Perform an ERC20 transferFrom, if the specified amount is nonzero - else no-op.\\n     *\\n     * @param token                 The token to transfer.\\n     * @param from                  The address sending the tokens.\\n     * @param amount                The amount of tokens to transfer.\\n     */\\n    function _collectIfNonzero(\\n        IERC20 token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) token.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    /**\\n     * @dev Blocks the contract from unpausing once paused.\\n     */\\n    function _unpause() internal override whenPaused {\\n        revert LC_Shutdown();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoanCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\nimport \\\"./IPromissoryNote.sol\\\";\\n\\ninterface ILoanCore {\\n\\n    // ================ Data Types =================\\n\\n    struct AffiliateSplit {\\n        address affiliate;\\n        uint96 splitBps;\\n    }\\n\\n    struct NoteReceipt {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    // ================ Events =================\\n\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event ForceRepay(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event LoanClaimed(uint256 loanId);\\n    event NoteRedeemed(address indexed token, address indexed caller, address indexed to, uint256 tokenId, uint256 amount);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    event FeesWithdrawn(address indexed token, address indexed caller, address indexed to, uint256 amount);\\n    event AffiliateSet(bytes32 indexed code, address indexed affiliate, uint96 splitBps);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _amountFromLender,\\n        uint256 _amountToBorrower,\\n        LoanLibrary.FeeSnapshot calldata feeSnapshot\\n    ) external returns (uint256 loanId);\\n\\n    function repay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external;\\n\\n    function forceRepay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external;\\n\\n    function claim(\\n        uint256 loanId,\\n        uint256 _amountFromLender\\n    ) external;\\n\\n    function redeemNote(\\n        uint256 loanId,\\n        uint256 _amountFromLender,\\n        address to\\n    ) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== Fee Management ==============\\n\\n    function withdraw(address token, uint256 amount, address to) external;\\n\\n    function withdrawProtocolFees(address token, address to) external;\\n\\n    // ============== Admin Operations ==============\\n\\n    function setAffiliateSplits(bytes32[] calldata codes, AffiliateSplit[] calldata splits) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibrary.LoanData calldata loanData);\\n\\n    function getNoteReceipt(uint256 loanId) external view returns (address token, uint256 amount);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external view returns (IPromissoryNote);\\n\\n    function lenderNote() external view returns (IPromissoryNote);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICallDelegator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface ICallDelegator {\\n    // ============== View Functions ==============\\n\\n    function canCallOn(address caller, address vault) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPromissoryNote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport \\\"./INFTWithDescriptor.sol\\\";\\n\\ninterface IPromissoryNote is INFTWithDescriptor, IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\\n\"\r\n    },\r\n    \"contracts/PromissoryNote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./interfaces/IPromissoryNote.sol\\\";\\nimport \\\"./interfaces/ILoanCore.sol\\\";\\nimport \\\"./interfaces/INFTDescriptor.sol\\\";\\nimport \\\"./nft/ERC721Permit.sol\\\";\\n\\nimport {\\n    PN_ZeroAddress,\\n    PN_MintingRole,\\n    PN_BurningRole,\\n    PN_DoesNotExist\\n} from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title PromissoryNote\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Built off Openzeppelin's ERC721Enumerable. Used for\\n * representing rights and obligations in the context of a loan - the\\n * right to claim collateral for lenders (instantiated as LenderNote),\\n * and the right to recover collateral upon repayment for borrowers\\n * (instantiated as BorrowerNote).\\n *\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControlEnumerable} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract PromissoryNote is\\n    Context,\\n    AccessControlEnumerable,\\n    ERC721Enumerable,\\n    ERC721Permit,\\n    IPromissoryNote\\n{\\n    using Counters for Counters.Counter;\\n\\n    // ============================================ STATE ==============================================\\n\\n    // =================== Constants =====================\\n\\n    /// @dev After loanCore initialization, admin role is permanently revoked.\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant MINT_BURN_ROLE = keccak256(\\\"MINT/BURN\\\");\\n    bytes32 public constant RESOURCE_MANAGER_ROLE = keccak256(\\\"RESOURCE_MANAGER\\\");\\n\\n    // ================= State Variables ==================\\n\\n    /// @dev Contract for returning tokenURI resources.\\n    INFTDescriptor public descriptor;\\n\\n    // ========================================= CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @dev Creates the promissory note contract, granting minter, burner\\n     *      and pauser roles to the specified owner address (which in practice\\n     *      will be LoanCore).\\n     *\\n     * @param name                  The name of the token (see ERC721).\\n     * @param symbol                The symbol of the token (see ERC721).\\n     * @param _descriptor           The resource descriptor contract.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address _descriptor\\n    ) ERC721(name, symbol) ERC721Permit(name) {\\n        if (_descriptor == address(0)) revert PN_ZeroAddress(\\\"descriptor\\\");\\n\\n        descriptor = INFTDescriptor(_descriptor);\\n\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setupRole(RESOURCE_MANAGER_ROLE, msg.sender);\\n\\n        // Allow admin to set mint/burn role, which they will do\\n        // during initialize. After initialize, admin role is\\n        // permanently revoked, so mint/burn role becomes immutable\\n        // and initialize cannot be called again.\\n        // Do not set role admin for admin role.\\n        _setRoleAdmin(MINT_BURN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(RESOURCE_MANAGER_ROLE, RESOURCE_MANAGER_ROLE);\\n    }\\n\\n    /**\\n     * @notice Grants mint/burn access to the specified address, which should be an\\n     *         instance of LoanCore. Once role is set, it is immutable,\\n     *         and cannot be set again.\\n     *\\n     * @param loanCore              The address of the admin.\\n     */\\n    function initialize(address loanCore) external onlyRole(ADMIN_ROLE) {\\n        // Grant mint/burn role to loanCore\\n        _setupRole(MINT_BURN_ROLE, loanCore);\\n\\n        // Revoke admin role from msg.sender. Since there is no ROLE_ADMIN,\\n        // nobody can ever get ADMIN_ROLE again.\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ======================================= TOKEN OPERATIONS =========================================\\n\\n    /**\\n     * @notice Create a new token and assign it to a specified owner. The token ID\\n     *         should match the loan ID, and can only be called by the minter. Also\\n     *         updates the mapping to lookup loan IDs by note IDs.\\n     *\\n     * @dev See {ERC721-_safeMint}.\\n     *\\n     * @param to                    The owner of the minted token.\\n     * @param loanId                The ID of the token to mint, should match a loan.\\n     *\\n     * @return tokenId              The newly minted token ID.\\n     */\\n    function mint(address to, uint256 loanId) external override returns (uint256) {\\n        if (!hasRole(MINT_BURN_ROLE, msg.sender)) revert PN_MintingRole(msg.sender);\\n\\n        _safeMint(to, loanId);\\n\\n        return loanId;\\n    }\\n\\n    /**\\n     * @notice Burn a token assigned to a specified owner. The token ID should match a loan ID,\\n     *         and can only be called by a burner - in practice LoanCore, which burns notes when\\n     *         a loan ends.\\n     *\\n     * @dev See {ERC721-_burn}.\\n     *\\n     * @param tokenId               The ID of the token to burn, should match a loan.\\n     */\\n    function burn(uint256 tokenId) external override {\\n        if (!hasRole(MINT_BURN_ROLE, msg.sender)) revert PN_BurningRole(msg.sender);\\n        _burn(tokenId);\\n    }\\n\\n    // ===================================== ERC721 UTILITIES ============================================\\n\\n    /**\\n     * @notice Getter of specific URI for an ERC721 token ID.\\n     *\\n     * @param tokenId               The ID of the token to get the URI for.\\n     *\\n     * @return                      The token ID's URI.\\n     */\\n    function tokenURI(uint256 tokenId) public view override(INFTWithDescriptor, ERC721) returns (string memory) {\\n        if (!_exists(tokenId)) revert PN_DoesNotExist(tokenId);\\n\\n        return descriptor.tokenURI(address(this), tokenId);\\n    }\\n\\n    /**\\n     * @notice Changes the descriptor contract for reporting tokenURI\\n     *         resources. Can only be called by a resource manager.\\n     *\\n     * @param _descriptor           The new descriptor contract.\\n     */\\n    function setDescriptor(address _descriptor) external onlyRole(RESOURCE_MANAGER_ROLE) {\\n        if (_descriptor == address(0)) revert PN_ZeroAddress(\\\"descriptor\\\");\\n\\n        descriptor = INFTDescriptor(_descriptor);\\n\\n        emit SetDescriptor(msg.sender, _descriptor);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer.\\n     *      This notifies the promissory note about the ownership transfer.\\n     *\\n     * @param from                  The previous owner of the token.\\n     * @param to                    The owner of the token after transfer.\\n     * @param tokenId               The token ID.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/InterestCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title InterestCalculator\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Interface for calculating the interest amount\\n * given an interest rate and principal amount. Assumes\\n * that the interestRate is already expressed over the desired\\n * time period.\\n */\\nabstract contract InterestCalculator {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The units of precision equal to the minimum interest of 1 basis point.\\n    uint256 public constant INTEREST_RATE_DENOMINATOR = 1e18;\\n\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 1e4;\\n\\n    // ======================================== CALCULATIONS ===========================================\\n\\n    /**\\n     * @notice Calculate the interest due over a full term.\\n     *\\n     * @dev Interest and principal must be entered with 18 units of\\n     *      precision from the basis point unit (e.g. 1e18 == 0.01%)\\n     *\\n     * @param principal                             Principal amount in the loan terms.\\n     * @param proratedInterestRate                  Interest rate in the loan terms, prorated over loan duration.\\n     *\\n     * @return interest                             The amount of interest due.\\n     */\\n    function getInterestAmount(uint256 principal, uint256 proratedInterestRate) public pure returns (uint256) {\\n        return principal * proratedInterestRate / (INTEREST_RATE_DENOMINATOR * BASIS_POINTS_DENOMINATOR);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vault/OwnableERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport { OERC721_CallerNotOwner } from \\\"../errors/Vault.sol\\\";\\n\\n/**\\n * @title OwnableERC721\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Uses ERC721 ownership for access control to a set of contracts.\\n * Ownership of underlying contract determined by ownership of a token ID,\\n * where the token ID converts to an on-chain address.\\n */\\nabstract contract OwnableERC721 {\\n    event SetOwnershipToken(address indexed caller, address indexed ownershipToken);\\n\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The ERC721 token that contract owners should have ownership of.\\n    address public ownershipToken;\\n\\n    // ========================================= VIEW FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Specifies the owner of the underlying token ID, derived\\n     *         from the contract address of the contract implementing.\\n     *\\n     * @return ownerAddress         The owner of the underlying token derived from\\n     *                              the calling address.\\n     */\\n    function owner() public view virtual returns (address ownerAddress) {\\n        return IERC721(ownershipToken).ownerOf(uint256(uint160(address(this))));\\n    }\\n\\n    // ============================================ HELPERS =============================================\\n\\n    /**\\n     * @dev Set the ownership token - the ERC721 that specified who controls\\n     *      defined addresses.\\n     *\\n     * @param _ownershipToken       The address of the ERC721 token that defines ownership.\\n     */\\n    function _setNFT(address _ownershipToken) internal {\\n        ownershipToken = _ownershipToken;\\n\\n        emit SetOwnershipToken(msg.sender, _ownershipToken);\\n    }\\n\\n    /**\\n     * @dev Similar to Ownable - checks the method is being called by the owner,\\n     *      where the owner is defined by the token ID in the ownership token which\\n     *      maps to the calling contract address.\\n     */\\n    modifier onlyOwner() {\\n        if (owner() != msg.sender) revert OERC721_CallerNotOwner(msg.sender);\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/errors/Lending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for the core lending protocol contracts, with errors\\n * prefixed by the contract that throws them (e.g., \\\"OC_\\\" for OriginationController).\\n * Errors located in one place to make it possible to holistically look at all\\n * protocol failure cases.\\n */\\n\\n// ==================================== ORIGINATION CONTROLLER ======================================\\n/// @notice All errors prefixed with OC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror OC_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror OC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration must be greater than 1hr and less than 3yrs.\\n *\\n * @param durationSecs                 Total amount of time in seconds.\\n */\\nerror OC_LoanDuration(uint256 durationSecs);\\n\\n/**\\n * @notice Interest must be greater than 0.01% and less than 10,000%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror OC_InterestRate(uint256 interestRate);\\n\\n/**\\n * @notice One of the predicates for item verification failed.\\n *\\n * @param borrower                      The address of the borrower.\\n * @param lender                        The address of the lender.\\n * @param verifier                      The address of the verifier contract.\\n * @param collateralAddress             The address of the collateral token.\\n * @param collateralId                  The token ID of the collateral.\\n * @param data                          The verification data (to be parsed by verifier).\\n */\\nerror OC_PredicateFailed(\\n    address borrower,\\n    address lender,\\n    address verifier,\\n    address collateralAddress,\\n    uint256 collateralId,\\n    bytes data\\n);\\n\\n/**\\n * @notice The predicates array is empty.\\n */\\nerror OC_PredicatesArrayEmpty();\\n\\n/**\\n * @notice A caller attempted to approve themselves.\\n *\\n * @param caller                        The caller of the approve function.\\n */\\nerror OC_SelfApprove(address caller);\\n\\n/**\\n * @notice A caller attempted to originate a loan with their own signature.\\n *\\n * @param caller                        The caller of the approve function, who was also the signer.\\n */\\nerror OC_ApprovedOwnLoan(address caller);\\n\\n/**\\n * @notice The signature could not be recovered to the counterparty or approved party.\\n *\\n * @param target                        The target party of the signature, which should either be the signer,\\n *                                      or someone who has approved the signer.\\n * @param signer                        The signer determined from ECDSA.recover.\\n */\\nerror OC_InvalidSignature(address target, address signer);\\n\\n/**\\n * @notice The verifier contract specified in a predicate has not been whitelisted.\\n *\\n * @param verifier                      The verifier the caller attempted to use.\\n */\\nerror OC_InvalidVerifier(address verifier);\\n\\n/**\\n * @notice The function caller was neither borrower or lender, and was not approved by either.\\n *\\n * @param caller                        The unapproved function caller.\\n */\\nerror OC_CallerNotParticipant(address caller);\\n\\n/**\\n * @notice Signer is attempting to take the wrong side of the loan.\\n *\\n * @param signer                       The address of the external signer.\\n */\\nerror OC_SideMismatch(address signer);\\n\\n/**\\n * @notice Two related parameters for batch operations did not match in length.\\n */\\nerror OC_BatchLengthMismatch();\\n\\n/**\\n * @notice Principal must be greater than 9999 Wei.\\n *\\n * @param principal                     Principal in ether.\\n */\\nerror OC_PrincipalTooLow(uint256 principal);\\n\\n/**\\n * @notice Signature must not be expired.\\n *\\n * @param deadline                      Deadline in seconds.\\n */\\nerror OC_SignatureIsExpired(uint256 deadline);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCurrency                   The currency of the active loan.\\n * @param newCurrency                   The currency of the new loan.\\n */\\nerror OC_RolloverCurrencyMismatch(address oldCurrency, address newCurrency);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCollateralAddress          The address of the active loan's collateral.\\n * @param newCollateralAddress          The token ID of the active loan's collateral.\\n * @param oldCollateralId               The address of the new loan's collateral.\\n * @param newCollateralId               The token ID of the new loan's collateral.\\n */\\nerror OC_RolloverCollateralMismatch(\\n    address oldCollateralAddress,\\n    uint256 oldCollateralId,\\n    address newCollateralAddress,\\n    uint256 newCollateralId\\n);\\n\\n/**\\n * @notice Provided payable currency address is not approved for lending.\\n *\\n * @param payableCurrency       ERC20 token address supplied in loan terms.\\n */\\nerror OC_InvalidCurrency(address payableCurrency);\\n\\n/**\\n * @notice Provided collateral address is not approved for lending.\\n *\\n * @param collateralAddress       ERC721 or ERC1155 token address supplied in loan terms.\\n */\\nerror OC_InvalidCollateral(address collateralAddress);\\n\\n/**\\n * @notice Provided token array does not hold any token addresses.\\n */\\nerror OC_ZeroArrayElements();\\n\\n/**\\n * @notice Provided token array holds more than 50 token addresses.\\n */\\nerror OC_ArrayTooManyElements();\\n\\n// ==================================== ITEMS VERIFIER ======================================\\n/// @notice All errors prefixed with IV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice The predicate payload was decoded successfully, but list of predicates is empty.\\n */\\nerror IV_NoPredicates();\\n\\n/**\\n * @notice Provided SignatureItem is missing an address.\\n */\\nerror IV_ItemMissingAddress();\\n\\n/**\\n * @notice Provided SignatureItem has an invalid collateral type.\\n * @dev    Should never actually fire, since cType is defined by an enum, so will fail on decode.\\n *\\n * @param asset                        The NFT contract being checked.\\n * @param cType                        The collateralTytpe provided.\\n */\\nerror IV_InvalidCollateralType(address asset, uint256 cType);\\n\\n/**\\n * @notice Provided signature item with no required amount. For single ERC721s, specify 1.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NoAmount(address asset, uint256 amount);\\n\\n/**\\n * @notice Provided a wildcard for a non-ERC721.\\n *\\n * @param asset                         The NFT contract being checked.\\n */\\nerror IV_InvalidWildcard(address asset);\\n\\n/**\\n * @notice The provided token ID is out of bounds for the given collection.\\n *\\n * @param tokenId                       The token ID provided.\\n */\\nerror IV_InvalidTokenId(int256 tokenId);\\n\\n/**\\n * @notice The provided project ID does not exist on the target contract. Only\\n *         used for ArtBlocks.\\n *\\n * @param projectId                     The project ID provided.\\n * @param nextProjectId                 The contract's reported nextProjectId.\\n */\\nerror IV_InvalidProjectId(uint256 projectId, uint256 nextProjectId);\\n\\n/**\\n * @notice The provided collateralId converts to a vault, but\\n *         the vault's address does not convert back to the provided collateralId\\n *         when casted to a uint256.\\n */\\nerror IV_InvalidCollateralId(uint256 collateralId);\\n\\n// ==================================== REPAYMENT CONTROLLER ======================================\\n/// @notice All errors prefixed with RC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror RC_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Could not dereference loan from loan ID.\\n *\\n * @param target                     The loanId being checked.\\n */\\nerror RC_CannotDereference(uint256 target);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror RC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Caller is not the owner of lender note.\\n *\\n * @param lender                     The owner of the lender note.\\n * @param caller                     Msg.sender of the function call.\\n */\\nerror RC_OnlyLender(address lender, address caller);\\n\\n// ==================================== Loan Core ======================================\\n/// @notice All errors prefixed with LC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror LC_ZeroAddress(string addressType);\\n\\n/// @notice Borrower address is same as lender address.\\nerror LC_ReusedNote();\\n\\n/// @notice Zero amount passed in where not allowed.\\nerror LC_ZeroAmount();\\n\\n/**\\n * @notice Check collateral is not already used in a active loan.\\n *\\n * @param collateralAddress             Address of the collateral.\\n * @param collateralId                  ID of the collateral token.\\n */\\nerror LC_CollateralInUse(address collateralAddress, uint256 collateralId);\\n\\n/**\\n * @notice The reported settlements are invalid, and LoanCore would lose tokens\\n *         attempting to perform the requested operations.\\n *\\n *\\n * @param payout                        Amount of tokens to be paid out.\\n * @param collected                     Amount of tokens to collect - should be fewer than payout.\\n */\\nerror LC_CannotSettle(uint256 payout, uint256 collected);\\n\\n/**\\n * @notice User attempted to withdraw a pending balance that was in excess\\n *         of what is available.\\n *\\n * @param amount                        Amount of tokens to be withdrawn.\\n * @param available                     Amount of tokens available to withdraw.\\n */\\nerror LC_CannotWithdraw(uint256 amount, uint256 available);\\n\\n/**\\n * @notice Two arrays were provided that must be of matching length, but were not.\\n *\\n */\\nerror LC_ArrayLengthMismatch();\\n\\n/**\\n * @notice A proposed affiliate split was submitted that is over the maximum.\\n *\\n * @param splitBps                     The proposed affiliate split.\\n * @param maxSplitBps                  The maximum allowed affiliate split.\\n *\\n */\\nerror LC_OverMaxSplit(uint96 splitBps, uint96 maxSplitBps);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror LC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param dueDate                       Timestamp of the end of the loan duration.\\n */\\nerror LC_NotExpired(uint256 dueDate);\\n\\n/**\\n * @notice User address and the specified nonce have already been used.\\n *\\n * @param user                          Address of collateral owner.\\n * @param nonce                         Represents the number of transactions sent by address.\\n */\\nerror LC_NonceUsed(address user, uint160 nonce);\\n\\n/**\\n * @notice Protocol attempted to set an affiliate code which already exists. Affiliate\\n *         codes are immutable.\\n *\\n * @param affiliateCode                 The affiliate code being set.\\n */\\nerror LC_AffiliateCodeAlreadySet(bytes32 affiliateCode);\\n\\n/**\\n * @notice Specified note token ID does not have a redeemable receipt.\\n *\\n * @param loanId                     The loanId being checked.\\n */\\nerror LC_NoReceipt(uint256 loanId);\\n\\n/**\\n * @notice Only Loan Core contract can call this function.\\n */\\nerror LC_CallerNotLoanCore();\\n\\n/**\\n * @notice The loan core contract has been irreversibly shut down.\\n */\\nerror LC_Shutdown();\\n\\n// ==================================== Promissory Note ======================================\\n/// @notice All errors prefixed with PN_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror PN_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Caller of mint function must have the MINTER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_MintingRole(address caller);\\n\\n/**\\n * @notice Caller of burn function must have the BURNER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_BurningRole(address caller);\\n\\n/**\\n * @notice Non-existant token id provided as argument.\\n *\\n * @param tokenId                       The ID of the token to lookup the URI for.\\n */\\nerror PN_DoesNotExist(uint256 tokenId);\\n\\n// ==================================== Fee Controller ======================================\\n/// @notice All errors prefixed with FC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Caller attempted to set a lending fee which is larger than the global maximum.\\n */\\nerror FC_LendingFeeOverMax(bytes32 selector, uint256 fee, uint256 maxFee);\\n\\n/**\\n * @notice Caller attempted to set a vault mint fee which is larger than the global maximum.\\n */\\nerror FC_VaultMintFeeOverMax(uint256 fee, uint256 maxFee);\\n\\n// ==================================== ERC721 Permit ======================================\\n/// @notice All errors prefixed with ERC721P_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deadline for the permit has expired.\\n *\\n * @param deadline                      Permit deadline parameter as a timestamp.\\n */\\nerror ERC721P_DeadlineExpired(uint256 deadline);\\n\\n/**\\n * @notice Address of the owner to also be the owner of the tokenId.\\n *\\n * @param owner                        Owner parameter for the function call.\\n */\\nerror ERC721P_NotTokenOwner(address owner);\\n\\n/**\\n * @notice Invalid signature.\\n *\\n * @param signer                        Signer recovered from ECDSA sugnature hash.\\n */\\nerror ERC721P_InvalidSignature(address signer);\\n\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LoanLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // An encoded list of predicates, along with their verifiers.\\n        bytes items;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract.\\n        bytes data;\\n        // The verifier contract.\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev Snapshot of lending fees at the time of loan creation.\\n     */\\n    struct FeeSnapshot {\\n        // The fee taken when lender claims defaulted collateral.\\n        uint16 lenderDefaultFee;\\n        // The fee taken from the borrower's interest repayment.\\n        uint16 lenderInterestFee;\\n        // The fee taken from the borrower's principal repayment.\\n        uint16 lenderPrincipalFee;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan.\\n        LoanState state;\\n        // Start date of the loan, using block.timestamp.\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan.\\n        LoanTerms terms;\\n        // Record of lending fees at the time of loan creation.\\n        FeeSnapshot feeSnapshot;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTWithDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface INFTWithDescriptor {\\n    // ============= Events ==============\\n\\n    event SetDescriptor(address indexed caller, address indexed descriptor);\\n\\n    // ================ Resource Metadata ================\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function setDescriptor(address descriptor) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface INFTDescriptor {\\n    function tokenURI(address token, uint256 tokenId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/nft/ERC721Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"../interfaces/IERC721Permit.sol\\\";\\n\\nimport {\\n    ERC721P_DeadlineExpired,\\n    ERC721P_NotTokenOwner,\\n    ERC721P_InvalidSignature\\n} from \\\"../errors/Lending.sol\\\";\\n\\n/**\\n * @title ERC721Permit\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * @dev Implementation of the ERC721 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/draft-EIP712.sol\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC721Permit is ERC721, IERC721Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    // ============================================ STATE ==============================================\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @dev Nonce for permit signatures.\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // ========================================== CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC721 token name.\\n     *\\n     * @param name                  The name of the signing domain.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    // ===================================== PERMIT FUNCTIONALITY =======================================\\n\\n    /**\\n     * @notice Allows the spender to spend the token ID which is owned by owner,\\n     * given owner's signed approval.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `owner` must be the owner of `tokenId`.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * @param owner                 The owner of the token being permitted.\\n     * @param spender               The address allowed to spend the token.\\n     * @param tokenId               The token ID of the given asset.\\n     * @param deadline              The maximum timestamp the signature is valid for.\\n     * @param v                     Component of the signature.\\n     * @param r                     Component of the signature.\\n     * @param s                     Component of the signature.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        if (block.timestamp > deadline) revert ERC721P_DeadlineExpired(deadline);\\n\\n        address tokenOwner = ownerOf(tokenId);\\n        if (owner != tokenOwner && !isApprovedForAll(tokenOwner, owner)) revert ERC721P_NotTokenOwner(owner);\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, tokenId, _useNonce(owner), deadline)\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) revert ERC721P_InvalidSignature(signer);\\n\\n        _approve(spender, tokenId);\\n    }\\n\\n    /**\\n     * @notice Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated.\\n     *\\n     * Every successful call to permit increases the owner's nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * @param owner                 The given owner to check the nonce for.\\n     *\\n     * @return current              The current nonce for the owner.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @notice Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     *\\n     * @return separator             The bytes for the domain separator.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev Consumes the nonce - returns the current value and increments.\\n     *\\n     * @param owner                 The address of the user to consume a nonce for.\\n     *\\n     * @return current              The current nonce, before incrementation.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    // ================ Permit Functionality ================\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ================ View Functions ================\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/errors/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title VaultErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains all custom errors for vault contracts used by the protocol.\\n * All errors prefixed by the contract that throws them (e.g., \\\"AV_\\\" for Asset Vault).\\n * Errors located in one place to make it possible to holistically look at all\\n * asset vault failure cases.\\n */\\n\\n// ==================================== Asset Vault ======================================\\n/// @notice All errors prefixed with AV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Vault withdraws must be enabled.\\n */\\nerror AV_WithdrawsDisabled();\\n\\n/**\\n * @notice Vault withdraws enabled.\\n */\\nerror AV_WithdrawsEnabled();\\n\\n/**\\n * @notice Asset vault already initialized.\\n *\\n * @param ownershipToken                    Caller of initialize function in asset vault contract.\\n */\\nerror AV_AlreadyInitialized(address ownershipToken);\\n\\n/**\\n * @notice CanCallOn authorization returned false.\\n *\\n * @param caller                             Msg.sender of the function call.\\n */\\nerror AV_MissingAuthorization(address caller);\\n\\n/**\\n * @notice Call disallowed.\\n *\\n * @param to                                The contract address to call.\\n * @param data                              The data to call the contract with.\\n */\\nerror AV_NonWhitelistedCall(address to, bytes4 data);\\n\\n/**\\n * @notice Approval disallowed.\\n *\\n * @param token                             The token to approve.\\n * @param spender                           The spender to approve.\\n */\\nerror AV_NonWhitelistedApproval(address token, address spender);\\n\\n/**\\n * @notice Cannot withdraw more than 25 items from a vault at a time.\\n *\\n * @param arrayLength                  Total elements provided.\\n */\\nerror AV_TooManyItems(uint256 arrayLength);\\n\\n/**\\n * @notice The length of either the tokenIds or tokenTypes array does not match\\n *         the length of the tokenAddress array.\\n *\\n * @param arrayType                    Array type that does not match tokenAddress array length.\\n */\\nerror AV_LengthMismatch(string arrayType);\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror AV_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Delegation disallowed.\\n *\\n * @param token                             The token to delegate.\\n */\\nerror AV_NonWhitelistedDelegation(address token);\\n\\n// ==================================== Ownable ERC721 ======================================\\n/// @notice All errors prefixed with OERC721_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Function caller is not the owner.\\n *\\n * @param caller                             Msg.sender of the function call.\\n */\\nerror OERC721_CallerNotOwner(address caller);\\n\\n// ==================================== Vault Factory ======================================\\n/// @notice All errors prefixed with VF_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror VF_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Global index out of bounds.\\n *\\n * @param tokenId                            AW-V2 tokenId of the asset vault.\\n */\\nerror VF_TokenIdOutOfBounds(uint256 tokenId);\\n\\n/**\\n * @notice Cannot transfer with withdraw enabled.\\n *\\n * @param tokenId                            AW-V2 tokenId of the asset vault.\\n */\\nerror VF_NoTransferWithdrawEnabled(uint256 tokenId);\\n\\n/**\\n * @notice Not enough msg.value sent for the required mint fee.\\n *\\n * @param value                              The msg.value.\\n * @param requiredMintFee                    The required mint fee.\\n */\\nerror VF_InsufficientMintFee(uint256 value, uint256 requiredMintFee);\\n\\n/**\\n * @notice Non-existant token id provided as argument.\\n *\\n * @param tokenId                       The ID of the token to lookup the URI for.\\n */\\nerror VF_DoesNotExist(uint256 tokenId);\\n\\n// ================================== Call Whitelist ======================================\\n/// @notice All errors prefixed with CW_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Cannot whitelist a call which has already been whitelisted.\\n *\\n * @param callee                             The contract to be added to CallWhitelist mapping.\\n * @param selector                           The function selector to be added to CallWhitelist mapping.\\n */\\nerror CW_AlreadyWhitelisted(address callee, bytes4 selector);\\n\\n/**\\n * @notice Cannot remove a call from the CallWhitelist that has not yet been added.\\n *\\n * @param callee                             The contract to be removed from CallWhitelist mapping.\\n * @param selector                           The function selector to be removed from CallWhitelist mapping.\\n */\\nerror CW_NotWhitelisted(address callee, bytes4 selector);\\n\\n// ================================== Call Whitelist Delegation ======================================\\n\\n/**\\n * @notice Zero address passed in the constructor.\\n */\\nerror CWD_ZeroAddress();\\n\\n/**\\n * @notice The registry address provided is currently set as the registry.\\n */\\nerror CWD_RegistryAlreadySet();\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPromissoryNote\",\"name\":\"_borrowerNote\",\"type\":\"address\"},{\"internalType\":\"contract IPromissoryNote\",\"name\":\"_lenderNote\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"name\":\"LC_AffiliateCodeAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LC_ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"}],\"name\":\"LC_CannotSettle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"LC_CannotWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"}],\"name\":\"LC_CollateralInUse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum LoanLibrary.LoanState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"LC_InvalidState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"LC_NoReceipt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"LC_NonceUsed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"}],\"name\":\"LC_NotExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"splitBps\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"maxSplitBps\",\"type\":\"uint96\"}],\"name\":\"LC_OverMaxSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LC_ReusedNote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressType\",\"type\":\"string\"}],\"name\":\"LC_ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LC_ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"splitBps\",\"type\":\"uint96\"}],\"name\":\"AffiliateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"ForceRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"LoanClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"name\":\"LoanRolledOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"LoanStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"NonceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NoteRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AFFILIATE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CLAIMER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORIGINATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHUTDOWN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"affiliateSplits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"splitBps\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerNote\",\"outputs\":[{\"internalType\":\"contract IPromissoryNote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"canCallOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"cancelNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountFromLender\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"consumeNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feesWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountFromPayer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToLender\",\"type\":\"uint256\"}],\"name\":\"forceRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"}],\"name\":\"getInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoan\",\"outputs\":[{\"components\":[{\"internalType\":\"enum LoanLibrary.LoanState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint160\",\"name\":\"startDate\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"lenderDefaultFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lenderInterestFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lenderPrincipalFee\",\"type\":\"uint16\"}],\"internalType\":\"struct LoanLibrary.FeeSnapshot\",\"name\":\"feeSnapshot\",\"type\":\"tuple\"}],\"internalType\":\"struct LoanLibrary.LoanData\",\"name\":\"loanData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getNoteReceipt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"isNonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderNote\",\"outputs\":[{\"internalType\":\"contract IPromissoryNote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"noteReceipts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountFromLender\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"redeemNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountFromPayer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToLender\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_settledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToOldLender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToLender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBorrower\",\"type\":\"uint256\"}],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"codes\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"splitBps\",\"type\":\"uint96\"}],\"internalType\":\"struct ILoanCore.AffiliateSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"name\":\"setAffiliateSplits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_amountFromLender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBorrower\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"lenderDefaultFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lenderInterestFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lenderPrincipalFee\",\"type\":\"uint16\"}],\"internalType\":\"struct LoanLibrary.FeeSnapshot\",\"name\":\"_feeSnapshot\",\"type\":\"tuple\"}],\"name\":\"startLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LoanCore", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e5b12befaf3a91065da7fdd461ded2d8f8ecb7be00000000000000000000000092ed78b41537c902ad287608d8535bb6780a7618", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}