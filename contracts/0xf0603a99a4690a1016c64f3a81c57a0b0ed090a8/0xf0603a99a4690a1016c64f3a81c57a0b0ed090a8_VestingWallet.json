{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-04-16\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2017-08-11\r\n*/\r\n\r\npragma solidity 0.4.11;\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal constant returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal constant returns (uint) {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal constant returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal constant returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract VestingWallet is Ownable, SafeMath {\r\n\r\n    mapping(address => VestingSchedule) public schedules;        // vesting schedules for given addresses\r\n    mapping(address => address) public addressChangeRequests;    // requested address changes\r\n\r\n    Token vestingToken;\r\n\r\n    event VestingScheduleRegistered(\r\n        address indexed registeredAddress,\r\n        address depositor,\r\n        uint startTimeInSec,\r\n        uint cliffTimeInSec,\r\n        uint endTimeInSec,\r\n        uint totalAmount\r\n    );\r\n    event VestingScheduleConfirmed(\r\n        address indexed registeredAddress,\r\n        address depositor,\r\n        uint startTimeInSec,\r\n        uint cliffTimeInSec,\r\n        uint endTimeInSec,\r\n        uint totalAmount\r\n    );\r\n    event Withdrawal(address indexed registeredAddress, uint amountWithdrawn);\r\n    event VestingEndedByOwner(address indexed registeredAddress, uint amountWithdrawn, uint amountRefunded);\r\n    event AddressChangeRequested(address indexed oldRegisteredAddress, address indexed newRegisteredAddress);\r\n    event AddressChangeConfirmed(address indexed oldRegisteredAddress, address indexed newRegisteredAddress);\r\n\r\n    struct VestingSchedule {\r\n        uint startTimeInSec;\r\n        uint cliffTimeInSec;\r\n        uint endTimeInSec;\r\n        uint totalAmount;\r\n        uint totalAmountWithdrawn;\r\n        address depositor;\r\n        bool isConfirmed;\r\n    }\r\n\r\n    modifier addressRegistered(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(vestingSchedule.depositor != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier addressNotRegistered(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(vestingSchedule.depositor == address(0));\r\n        _;\r\n    }\r\n\r\n    modifier vestingScheduleConfirmed(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(vestingSchedule.isConfirmed);\r\n        _;\r\n    }\r\n\r\n    modifier vestingScheduleNotConfirmed(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(!vestingSchedule.isConfirmed);\r\n        _;\r\n    }\r\n\r\n    modifier pendingAddressChangeRequest(address target) {\r\n        require(addressChangeRequests[target] != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier pastCliffTime(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(block.timestamp > vestingSchedule.cliffTimeInSec);\r\n        _;\r\n    }\r\n\r\n    modifier validVestingScheduleTimes(uint startTimeInSec, uint cliffTimeInSec, uint endTimeInSec) {\r\n        require(cliffTimeInSec >= startTimeInSec);\r\n        require(endTimeInSec >= cliffTimeInSec);\r\n        _;\r\n    }\r\n\r\n    modifier addressNotNull(address target) {\r\n        require(target != address(0));\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a vesting token to the wallet.\r\n    /// @param _vestingToken Token that will be vested.\r\n    function VestingWallet(address _vestingToken) {\r\n        vestingToken = Token(_vestingToken);\r\n    }\r\n\r\n    /// @dev Registers a vesting schedule to an address.\r\n    /// @param _addressToRegister The address that is allowed to withdraw vested tokens for this schedule.\r\n    /// @param _depositor Address that will be depositing vesting token.\r\n    /// @param _startTimeInSec The time in seconds that vesting began.\r\n    /// @param _cliffTimeInSec The time in seconds that tokens become withdrawable.\r\n    /// @param _endTimeInSec The time in seconds that vesting ends.\r\n    /// @param _totalAmount The total amount of tokens that the registered address can withdraw by the end of the vesting period.\r\n    function registerVestingSchedule(\r\n        address _addressToRegister,\r\n        address _depositor,\r\n        uint _startTimeInSec,\r\n        uint _cliffTimeInSec,\r\n        uint _endTimeInSec,\r\n        uint _totalAmount\r\n    )\r\n        public\r\n        onlyOwner\r\n        addressNotNull(_depositor)\r\n        vestingScheduleNotConfirmed(_addressToRegister)\r\n        validVestingScheduleTimes(_startTimeInSec, _cliffTimeInSec, _endTimeInSec)\r\n    {\r\n        schedules[_addressToRegister] = VestingSchedule({\r\n            startTimeInSec: _startTimeInSec,\r\n            cliffTimeInSec: _cliffTimeInSec,\r\n            endTimeInSec: _endTimeInSec,\r\n            totalAmount: _totalAmount,\r\n            totalAmountWithdrawn: 0,\r\n            depositor: _depositor,\r\n            isConfirmed: false\r\n        });\r\n\r\n        VestingScheduleRegistered(\r\n            _addressToRegister,\r\n            _depositor,\r\n            _startTimeInSec,\r\n            _cliffTimeInSec,\r\n            _endTimeInSec,\r\n            _totalAmount\r\n        );\r\n    }\r\n\r\n    /// @dev Confirms a vesting schedule and deposits necessary tokens. Throws if deposit fails or schedules do not match.\r\n    /// @param _startTimeInSec The time in seconds that vesting began.\r\n    /// @param _cliffTimeInSec The time in seconds that tokens become withdrawable.\r\n    /// @param _endTimeInSec The time in seconds that vesting ends.\r\n    /// @param _totalAmount The total amount of tokens that the registered address can withdraw by the end of the vesting period.\r\n    function confirmVestingSchedule(\r\n        uint _startTimeInSec,\r\n        uint _cliffTimeInSec,\r\n        uint _endTimeInSec,\r\n        uint _totalAmount\r\n    )\r\n        public\r\n        addressRegistered(msg.sender)\r\n        vestingScheduleNotConfirmed(msg.sender)\r\n    {\r\n        VestingSchedule storage vestingSchedule = schedules[msg.sender];\r\n\r\n        require(vestingSchedule.startTimeInSec == _startTimeInSec);\r\n        require(vestingSchedule.cliffTimeInSec == _cliffTimeInSec);\r\n        require(vestingSchedule.endTimeInSec == _endTimeInSec);\r\n        require(vestingSchedule.totalAmount == _totalAmount);\r\n\r\n        vestingSchedule.isConfirmed = true;\r\n        require(vestingToken.transferFrom(vestingSchedule.depositor, address(this), _totalAmount));\r\n\r\n        VestingScheduleConfirmed(\r\n            msg.sender,\r\n            vestingSchedule.depositor,\r\n            _startTimeInSec,\r\n            _cliffTimeInSec,\r\n            _endTimeInSec,\r\n            _totalAmount\r\n        );\r\n    }\r\n\r\n    /// @dev Allows a registered address to withdraw tokens that have already been vested.\r\n    function withdraw()\r\n        public\r\n        vestingScheduleConfirmed(msg.sender)\r\n        pastCliffTime(msg.sender)\r\n    {\r\n        VestingSchedule storage vestingSchedule = schedules[msg.sender];\r\n\r\n        uint totalAmountVested = getTotalAmountVested(vestingSchedule);\r\n        uint amountWithdrawable = safeSub(totalAmountVested, vestingSchedule.totalAmountWithdrawn);\r\n        vestingSchedule.totalAmountWithdrawn = totalAmountVested;\r\n\r\n        if (amountWithdrawable > 0) {\r\n            require(vestingToken.transfer(msg.sender, amountWithdrawable));\r\n            Withdrawal(msg.sender, amountWithdrawable);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows contract owner to terminate a vesting schedule, transfering remaining vested tokens to the registered address and refunding owner with remaining tokens.\r\n    /// @param _addressToEnd Address that is currently registered to the vesting schedule that will be closed.\r\n    /// @param _addressToRefund Address that will receive unvested tokens.\r\n    function endVesting(address _addressToEnd, address _addressToRefund)\r\n        public\r\n        onlyOwner\r\n        vestingScheduleConfirmed(_addressToEnd)\r\n        addressNotNull(_addressToRefund)\r\n    {\r\n        VestingSchedule storage vestingSchedule = schedules[_addressToEnd];\r\n\r\n        uint amountWithdrawable = 0;\r\n        uint amountRefundable = 0;\r\n\r\n        if (block.timestamp < vestingSchedule.cliffTimeInSec) {\r\n            amountRefundable = vestingSchedule.totalAmount;\r\n        } else {\r\n            uint totalAmountVested = getTotalAmountVested(vestingSchedule);\r\n            amountWithdrawable = safeSub(totalAmountVested, vestingSchedule.totalAmountWithdrawn);\r\n            amountRefundable = safeSub(vestingSchedule.totalAmount, totalAmountVested);\r\n        }\r\n\r\n        delete schedules[_addressToEnd];\r\n        require(amountWithdrawable == 0 || vestingToken.transfer(_addressToEnd, amountWithdrawable));\r\n        require(amountRefundable == 0 || vestingToken.transfer(_addressToRefund, amountRefundable));\r\n\r\n        VestingEndedByOwner(_addressToEnd, amountWithdrawable, amountRefundable);\r\n    }\r\n\r\n    /// @dev Allows a registered address to request an address change.\r\n    /// @param _newRegisteredAddress Desired address to update to.\r\n    function requestAddressChange(address _newRegisteredAddress)\r\n        public\r\n        vestingScheduleConfirmed(msg.sender)\r\n        addressNotRegistered(_newRegisteredAddress)\r\n        addressNotNull(_newRegisteredAddress)\r\n    {\r\n        addressChangeRequests[msg.sender] = _newRegisteredAddress;\r\n        AddressChangeRequested(msg.sender, _newRegisteredAddress);\r\n    }\r\n\r\n    /// @dev Confirm an address change and migrate vesting schedule to new address.\r\n    /// @param _oldRegisteredAddress Current registered address.\r\n    /// @param _newRegisteredAddress Address to migrate vesting schedule to.\r\n    function confirmAddressChange(address _oldRegisteredAddress, address _newRegisteredAddress)\r\n        public\r\n        onlyOwner\r\n        pendingAddressChangeRequest(_oldRegisteredAddress)\r\n        addressNotRegistered(_newRegisteredAddress)\r\n    {\r\n        address newRegisteredAddress = addressChangeRequests[_oldRegisteredAddress];\r\n        require(newRegisteredAddress == _newRegisteredAddress);    // prevents race condition\r\n\r\n        VestingSchedule memory vestingSchedule = schedules[_oldRegisteredAddress];\r\n        schedules[newRegisteredAddress] = vestingSchedule;\r\n\r\n        delete schedules[_oldRegisteredAddress];\r\n        delete addressChangeRequests[_oldRegisteredAddress];\r\n\r\n        AddressChangeConfirmed(_oldRegisteredAddress, _newRegisteredAddress);\r\n    }\r\n\r\n    /// @dev Calculates the total tokens that have been vested for a vesting schedule, assuming the schedule is past the cliff.\r\n    /// @param vestingSchedule Vesting schedule used to calculate vested tokens.\r\n    /// @return Total tokens vested for a vesting schedule.\r\n    function getTotalAmountVested(VestingSchedule vestingSchedule)\r\n        internal\r\n        returns (uint)\r\n    {\r\n        if (block.timestamp >= vestingSchedule.endTimeInSec) return vestingSchedule.totalAmount;\r\n\r\n        uint timeSinceStartInSec = safeSub(block.timestamp, vestingSchedule.startTimeInSec);\r\n        uint totalVestingTimeInSec = safeSub(vestingSchedule.endTimeInSec, vestingSchedule.startTimeInSec);\r\n        uint totalAmountVested = safeDiv(\r\n            safeMul(timeSinceStartInSec, vestingSchedule.totalAmount),\r\n            totalVestingTimeInSec\r\n        );\r\n\r\n        return totalAmountVested;\r\n    }\r\n\r\n    function balanceOf(address _registeredAddress) public constant returns (uint) {\r\n        VestingSchedule memory vestingSchedule = schedules[_registeredAddress];\r\n        return safeSub(vestingSchedule.totalAmount, vestingSchedule.totalAmountWithdrawn);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addressToRegister\",\"type\":\"address\"},{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_startTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_cliffTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_endTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"registerVestingSchedule\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRegisteredAddress\",\"type\":\"address\"}],\"name\":\"requestAddressChange\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_cliffTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_endTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"confirmVestingSchedule\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_registeredAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"schedules\",\"outputs\":[{\"name\":\"startTimeInSec\",\"type\":\"uint256\"},{\"name\":\"cliffTimeInSec\",\"type\":\"uint256\"},{\"name\":\"endTimeInSec\",\"type\":\"uint256\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"totalAmountWithdrawn\",\"type\":\"uint256\"},{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"isConfirmed\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToEnd\",\"type\":\"address\"},{\"name\":\"_addressToRefund\",\"type\":\"address\"}],\"name\":\"endVesting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressChangeRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldRegisteredAddress\",\"type\":\"address\"},{\"name\":\"_newRegisteredAddress\",\"type\":\"address\"}],\"name\":\"confirmAddressChange\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vestingToken\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cliffTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cliffTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountRefunded\",\"type\":\"uint256\"}],\"name\":\"VestingEndedByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRegisteredAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegisteredAddress\",\"type\":\"address\"}],\"name\":\"AddressChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRegisteredAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegisteredAddress\",\"type\":\"address\"}],\"name\":\"AddressChangeConfirmed\",\"type\":\"event\"}]", "ContractName": "VestingWallet", "CompilerVersion": "v0.4.11+commit.68ef5810", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d23ac27148af6a2f339bd82d0e3cff380b5093de", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fc71e24516666568c66ebfaca0192309cdc4a951f563407f3f99a0b999ba4a62"}