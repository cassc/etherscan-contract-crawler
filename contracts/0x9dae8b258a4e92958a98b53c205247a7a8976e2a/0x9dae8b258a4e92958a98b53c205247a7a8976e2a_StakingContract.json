{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/StakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StakingContract is Ownable {\\n    IERC20 public token; // The ERC20 token to be staked\\n    uint256 public minStakeAmount; // Minimum stake amount required\\n    uint256 public cooldownPeriod; // Cooldown period for unstaking (in seconds)\\n    bool public isStakingPhaseActive;   \\n    bool public isVotingPhaseActive;\\n    bool public isUnstakingPhaseActive;\\n\\n    struct StakingData {\\n        uint256 stakedBalance;\\n        bool hasStaked;\\n        bool canUnstake;\\n        uint256 unstakeTimestamp;\\n    }\\n\\n    mapping(address => StakingData) public stakingInfo;\\n\\n\\n    // Events\\n    event TokenStaked(address indexed beneficiary, uint256 indexed amount, uint256 indexed timestamp);\\n    event TokensUnstaked(address indexed beneficiary, uint256 indexed amount, uint256 indexed timestamp);\\n    event UnStakeSelected(address indexed user, uint256 indexed timestamp);\\n    event VotingStarted(uint256 indexed timestamp);\\n    event InitialState(uint256 indexed timestamp);\\n    event UnStakeStarted(uint256 indexed timestamp);\\n    event StakeStarted(uint256 indexed timestamp);\\n    event CooldownPeriodUpdated(uint256 indexed newCooldownPeriod, uint256 indexed timestamp);\\n    event MinStakeAmountUpdated(uint256 indexed newMinStakeAmount, uint256 indexed timestamp);\\n\\n\\n    constructor(\\n        address _token,\\n        uint256 _minStakeAmount,\\n        uint256 _cooldownPeriod\\n    ) {\\n        token = IERC20(_token);\\n        minStakeAmount = _minStakeAmount * 1 ether;\\n        cooldownPeriod = _cooldownPeriod;\\n    }\\n\\n    /**\\n    * @dev Allows the contract owner to set the initial state of the contract phases.\\n    * This function can be used for testing and initializing the contract.\\n    * @notice This function should only be accessible to the contract owner.\\n    */\\n    function setInitialState() external onlyOwner{\\n        isStakingPhaseActive = false;\\n        isVotingPhaseActive = false;\\n        isUnstakingPhaseActive = false;\\n\\n       emit InitialState(block.timestamp);\\n    }\\n\\n    /**\\n    * @dev Allows the contract owner to start the staking phase.\\n    * During the staking phase, users can stake their tokens.\\n    * @notice This function should only be accessible to the contract owner.\\n    */\\n    function startStake() external onlyOwner {\\n        require(!isStakingPhaseActive, \\\"StakingContract: Staking is already active.\\\");\\n        require(!(isUnstakingPhaseActive || isVotingPhaseActive), \\\"StakingContract: Unstaking or Voting phase is active, cannot start staking.\\\");\\n        isStakingPhaseActive = true;\\n\\n       emit StakeStarted(block.timestamp);\\n    }\\n\\n    /**\\n    * @dev Allows the contract owner to start the voting phase.\\n    * During the voting phase, users cannot stake, and voting-related activities are enabled.\\n    * @notice This function should only be accessible to the contract owner.\\n    * @dev Throws an error if the voting phase is already active.\\n    */\\n    function startVoting() external onlyOwner {\\n        require(isStakingPhaseActive, \\\"StakingContract: Staking is not active.\\\");\\n        require(!isVotingPhaseActive, \\\"StakingContract: Voting is already active.\\\");\\n        require(!isUnstakingPhaseActive, \\\"StakingContract: Voting can not be started during unstaking phase.\\\");\\n        isStakingPhaseActive = false;\\n        isVotingPhaseActive = true;\\n\\n        emit VotingStarted(block.timestamp);\\n    }\\n\\n    /**\\n    * @dev Allows the contract owner to start the unstaking phase.\\n    * During the unstaking phase, users can select to unstake their tokens.\\n    * @notice This function should only be accessible to the contract owner.\\n    * @dev Throws an error if the voting phase is not active.\\n    */\\n    function startUnstake() external onlyOwner {\\n        require(!isUnstakingPhaseActive, \\\"StakingContract: Unstake phase is already active\\\");\\n        require(isVotingPhaseActive, \\\"StakingContract: Voting phase has not started yet.\\\");\\n        isVotingPhaseActive = false;\\n        isUnstakingPhaseActive = true;\\n\\n        emit UnStakeStarted(block.timestamp);\\n    }\\n    /**\\n    * @dev Allows users to stake their tokens during the staking phase.\\n    * Users can only stake when the staking phase is active.\\n    * If the user has not staked before, they must meet the minimum stake requirement.\\n    * @param _amount The amount of tokens to stake.\\n    */\\n    function stake(uint256 _amount) external  {\\n        require(isStakingPhaseActive, \\\"StakingContract:You can only stake when staking phase is active.\\\");\\n        require(_amount > 0, \\\"StakingContract: Cannot stake zero tokens\\\");\\n        StakingData storage staker = stakingInfo[msg.sender];\\n\\n        if (!staker.hasStaked) {\\n            require(_amount >= minStakeAmount, \\\"StakingContract:You must stake at least the minimum amount\\\");\\n            staker.hasStaked = true;\\n        }\\n       // Transfer tokens from the user to this contract\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        // Update the staked balance for the user\\n        staker.stakedBalance += _amount;\\n\\n        emit TokenStaked(msg.sender, _amount, block.timestamp);\\n}\\n\\n\\n    /**\\n    * @dev Allows users to select to unstake their tokens during the unstaking phase.\\n    * Users can only select to unstake when the unstaking phase is active and they have staked tokens.\\n    * Users can only select to unstake once.\\n    * @notice This function is called by users when they want to initiate the unstaking process.\\n    */\\n    function selectUnstake() external {\\n        \\n        StakingData storage staker = stakingInfo[msg.sender];\\n\\n        require(!staker.canUnstake, \\\"StakingContract: Already selected unstaking\\\");\\n        require(isUnstakingPhaseActive, \\\"StakingContract: Unstake phase is not active yet!\\\");\\n        require(staker.stakedBalance != 0, \\\"StakingContract: You must have staked tokens to begin unstaking.\\\");\\n\\n        staker.canUnstake = true;\\n        staker.unstakeTimestamp = block.timestamp;\\n\\n        emit UnStakeSelected(msg.sender, block.timestamp);\\n    }\\n    \\n    /**\\n    * @dev Allows users to complete the unstaking process and retrieve their staked tokens.\\n    * Users must have previously selected to unstake, and the cooldown period must have passed.\\n    */\\n    function unstake() external  {\\n        StakingData storage staker = stakingInfo[msg.sender];\\n        require(staker.canUnstake, \\\"StakingContract: You must choose to unstake first.\\\");\\n        require(block.timestamp >= staker.unstakeTimestamp + cooldownPeriod, \\\"StakingContract: The Cool down period has not yet passed.\\\"); \\n        uint256 amountToUnstake = staker.stakedBalance;\\n        \\n        staker.stakedBalance = 0;\\n        staker.canUnstake = false;\\n        \\n        // Transfer staked tokens back to the user\\n        token.transfer(msg.sender, amountToUnstake);\\n\\n        emit TokensUnstaked(msg.sender, amountToUnstake, block.timestamp);\\n    }\\n\\n\\n    /**\\n    * @dev Allows the contract owner to update the minimum stake amount required.\\n    * The new minimum stake amount must be greater than zero and different from the current value.\\n    * @param _newMinStakeAmount The new minimum stake amount.\\n    * @notice This function should only be accessible to the contract owner.\\n    */\\n    function updateMinStakeAmount(uint256 _newMinStakeAmount) external onlyOwner {\\n        require(_newMinStakeAmount != 0 && _newMinStakeAmount < minStakeAmount, \\\"StakingContract: Invalid new minimum stake amount.\\\");\\n        minStakeAmount = _newMinStakeAmount;\\n\\n        emit MinStakeAmountUpdated(_newMinStakeAmount,block.timestamp);\\n    }\\n\\n    /**\\n    * @dev Allows the contract owner to update the cooldown period for unstaking.\\n    * The new cooldown period must be different from the current value and greater than zero.\\n    * @param _newCooldownPeriod The new cooldown period in seconds.\\n    * @notice This function should only be accessible to the contract owner.\\n    */\\n    function updateCooldownPeriod(uint256 _newCooldownPeriod) external onlyOwner {\\n        require(_newCooldownPeriod != cooldownPeriod, \\\"StakingContract: New cool down period must be different from the current value.\\\");\\n        require(_newCooldownPeriod != 0, \\\"Cooldown period must be greater than zero\\\");\\n        cooldownPeriod = _newCooldownPeriod;\\n\\n        emit CooldownPeriodUpdated(_newCooldownPeriod, block.timestamp);\\n    }\\n\\n    /**\\n    * @dev Retrieves the staked token balance of a specific account.\\n    * @param account The address of the account for which to retrieve the staked balance.\\n    * @return The staked token balance of the specified account.\\n    */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return stakingInfo[account].stakedBalance;\\n    }\\n\\n    /**\\n    * @dev Retrieves the remaining time until a user can complete the unstaking process.\\n    * Users can only call this function after selecting to unstake.\\n    * @param user The address of the user for whom to calculate the time left to unstake.\\n    * @return The remaining time in seconds until the cooldown period ends. Returns 0 if the cooldown period has already passed.\\n    */\\n    function getTimeLeftToUnstake(address user) external view returns (uint256) {\\n        StakingData storage staker = stakingInfo[user];\\n        require(staker.canUnstake, \\\"StakingContract: Unstake not selected.\\\");\\n\\n        uint256 unstakeTime = staker.unstakeTimestamp;\\n        uint256 currentTime = block.timestamp;\\n        \\n        // Calculate the remaining time until the cooldown period ends\\n        if (unstakeTime + cooldownPeriod > currentTime) {\\n            return unstakeTime + cooldownPeriod - currentTime;\\n        } else {\\n            return 0; // The cooldown period has already passed\\n        }\\n    }\\n\\n    /**\\n    * @dev Retrieves the current state of the contract.\\n    * The state can be one of the following: \\\"Voting State,\\\" \\\"UnStake State,\\\" \\\"Staking State,\\\" or \\\"Initial State.\\\"\\n    * @return A string indicating the current state of the contract.\\n    */\\n    function getCurrentState() external view returns (string memory) {\\n        if (isVotingPhaseActive) {\\n            return \\\"Voting State\\\";\\n        } else if (isUnstakingPhaseActive) {\\n            return \\\"UnStake State\\\";\\n        } else if (isStakingPhaseActive) {\\n            return \\\"Staking State\\\";\\n        }else {\\n            return \\\"Initial State\\\";\\n        }\\n    }\\n\\n    \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newCooldownPeriod\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CooldownPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InitialState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinStakeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinStakeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnStakeSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnStakeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VotingStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTimeLeftToUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingPhaseActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnstakingPhaseActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVotingPhaseActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInitialState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasStaked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canUnstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCooldownPeriod\",\"type\":\"uint256\"}],\"name\":\"updateCooldownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinStakeAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d084b83c305dafd76ae3e1b4e1f1fe2ecccb3988000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000093a80", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}