{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/*\r\n*\r\n*  Blockonix Tokens are governed by the Terms & Conditions separately notified to each existing token holder\r\n*  of Bitindia, and available on https://blockonix.com and https://blockonix.com/tokenswap\r\n*\r\n*/\r\n\r\n\r\n/**\r\n *  Standard Interface for ERC20 Contract\r\n */\r\ncontract IERC20 {\r\n    function totalSupply() public constant returns (uint _totalSupply);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) constant public returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n/**\r\n * Checking overflows for various operations\r\n */\r\nlibrary SafeMathLib {\r\n\r\n/**\r\n* Issue: Change to internal pure\r\n**/\r\n  function minus(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n/**\r\n* Issue: Change to internal pure\r\n**/\r\n  function plus(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @notice The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @notice The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @notice Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n    \r\n}\r\n\r\ncontract HasAddresses {\r\n    address founder1FirstLockup = 0xfC866793142059C79E924d537C26E5E68a3d0CB4;\r\n    address founder1SecondLockup = 0xa5c5EdA285866a89fbe9434BF85BC7249Fa98D45;\r\n    address founder1ThirdLockup = 0xBE2D892D27309EE50D53aa3460fB21A2762625d6;\r\n    \r\n    address founder2FirstLockup = 0x7aeFB5F308C60D6fD9f9D79D6BEb32e2BbEf8F3C;\r\n    address founder2SecondLockup = 0x9d92785510fadcBA9D0372e96882441536d6876a;\r\n    address founder2ThirdLockup = 0x0e0B9943Ea00393B596089631D520bF1489d4d2E;\r\n\r\n    address founder3FirstLockup = 0x8E06EdC382Dd2Bf3F2C36f7e2261Af2c7Eb84835;\r\n    address founder3SecondLockup = 0x6A5AebCd6fA054ff4D10c51bABce17F189A9998a;\r\n    address founder3ThirdLockup = 0xe10E613Be00a6383Dde52152Bc33007E5669e861;\r\n\r\n}\r\n\r\n\r\ncontract VestingPeriods{\r\n    uint firstLockup = 1544486400; // Human time (GMT): Tuesday, 11 December 2018 00:00:00  \r\n    uint secondLockup = 1560211200; // Human time (GMT): Tuesday, 11 June 2019 00:00:00\r\n    uint thirdLockup = 1576022400; // Human time (GMT): Wednesday, 11 December 2019 00:00:00\r\n}\r\n\r\n\r\ncontract Vestable {\r\n\r\n    mapping(address => uint) vestedAddresses ;    // Addresses vested till date\r\n    bool isVestingOver = false;\r\n    event AddVestingAddress(address vestingAddress, uint maturityTimestamp);\r\n\r\n    function addVestingAddress(address vestingAddress, uint maturityTimestamp) internal{\r\n        vestedAddresses[vestingAddress] = maturityTimestamp;\r\n        emit AddVestingAddress(vestingAddress, maturityTimestamp);\r\n    }\r\n\r\n    function checkVestingTimestamp(address testAddress) public view returns(uint){\r\n        return vestedAddresses[testAddress];\r\n    }\r\n\r\n    function checkVestingCondition(address sender) internal view returns(bool) {\r\n        uint vestingTimestamp = vestedAddresses[sender];\r\n        if(vestingTimestamp > 0) {\r\n            return (now > vestingTimestamp);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract IsUpgradable{\r\n    address oldTokenAddress = 0x420335D3DEeF2D5b87524Ff9D0fB441F71EA621f;\r\n    uint upgradeDeadline = 1543536000;\r\n    address oldTokenBurnAddress = 0x30E055F7C16B753dbF77B57f38782C11A9f1C653;\r\n    IERC20 oldToken = IERC20(oldTokenAddress);\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title BlockonixToken Token\r\n * @notice The ERC20 Token.\r\n */\r\ncontract BlockonixToken is IERC20, Ownable, Vestable, HasAddresses, VestingPeriods, IsUpgradable {\r\n    \r\n    using SafeMathLib for uint256;\r\n    \r\n    uint256 public constant totalTokenSupply = 1009208335 * 10**16;    // Total Supply:10,092,083.35\r\n\r\n    uint256 public burntTokens;\r\n\r\n    string public constant name = \"Blockonix\";    // Blockonix\r\n    string public constant symbol = \"BDT\";  // BDT\r\n    uint8 public constant decimals = 18;            \r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) approved;\r\n    \r\n    event Upgraded(address _owner, uint256 amount); \r\n    constructor() public {\r\n        \r\n        uint256 lockedTokenPerAddress = 280335648611111000000000;   // Total Founder Tokens(LOCKED): 2,523,020.8375, divided equally in 9 chunks\r\n        balances[founder1FirstLockup] = lockedTokenPerAddress;\r\n        balances[founder2FirstLockup] = lockedTokenPerAddress;\r\n        balances[founder3FirstLockup] = lockedTokenPerAddress;\r\n        balances[founder1SecondLockup] = lockedTokenPerAddress;\r\n        balances[founder2SecondLockup] = lockedTokenPerAddress;\r\n        balances[founder3SecondLockup] = lockedTokenPerAddress;\r\n        balances[founder1ThirdLockup] = lockedTokenPerAddress;\r\n        balances[founder2ThirdLockup] = lockedTokenPerAddress;\r\n        balances[founder3ThirdLockup] = lockedTokenPerAddress;\r\n\r\n        emit Transfer(address(this), founder1FirstLockup, lockedTokenPerAddress);\r\n        emit Transfer(address(this), founder2FirstLockup, lockedTokenPerAddress);\r\n        emit Transfer(address(this), founder3FirstLockup, lockedTokenPerAddress);\r\n        \r\n        emit Transfer(address(this), founder1SecondLockup, lockedTokenPerAddress);\r\n        emit Transfer(address(this), founder2SecondLockup, lockedTokenPerAddress);\r\n        emit Transfer(address(this), founder3SecondLockup, lockedTokenPerAddress);\r\n\r\n        emit Transfer(address(this), founder1ThirdLockup, lockedTokenPerAddress);\r\n        emit Transfer(address(this), founder2ThirdLockup, lockedTokenPerAddress);\r\n        emit Transfer(address(this), founder3ThirdLockup, lockedTokenPerAddress);\r\n\r\n\r\n        addVestingAddress(founder1FirstLockup, firstLockup);\r\n        addVestingAddress(founder2FirstLockup, firstLockup);\r\n        addVestingAddress(founder3FirstLockup, firstLockup);\r\n\r\n        addVestingAddress(founder1SecondLockup, secondLockup);\r\n        addVestingAddress(founder2SecondLockup, secondLockup);\r\n        addVestingAddress(founder3SecondLockup, secondLockup);\r\n\r\n        addVestingAddress(founder1ThirdLockup, thirdLockup);\r\n        addVestingAddress(founder2ThirdLockup, thirdLockup);\r\n        addVestingAddress(founder3ThirdLockup, thirdLockup);\r\n\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        require (balances[msg.sender] >= _value);                 // Check if the sender has enough\r\n        balances[msg.sender] = balances[msg.sender].minus(_value);\r\n        burntTokens += _value;\r\n        emit BurnToken(msg.sender, _value);\r\n    } \r\n\r\n    \r\n    function totalSupply() view public returns (uint256 _totalSupply) {\r\n        return totalTokenSupply - burntTokens;\r\n    }\r\n    \r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balances[_from] >= _value);                 // Check if the sender has enough\r\n        require (balances[_to] + _value > balances[_to]);   // Check for overflows\r\n        balances[_from] = balances[_from].minus(_value);    // Subtract from the sender\r\n        balances[_to] = balances[_to].plus(_value);         // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Send `_value` tokens to `_to` from your account\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        require(checkVestingCondition(msg.sender));\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Send `_value` tokens to `_to` on behalf of `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(checkVestingCondition(_from));\r\n        require (_value <= approved[_from][msg.sender]);     // Check allowance\r\n        approved[_from][msg.sender] = approved[_from][msg.sender].minus(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Approve `_value` tokens for `_spender`\r\n     * @param _spender The address of the sender\r\n     * @param _value the amount to send\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(checkVestingCondition(_spender));\r\n        if(balances[msg.sender] >= _value) {\r\n            approved[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n        \r\n    /**\r\n     * @notice Check `_value` tokens allowed to `_spender` by `_owner`\r\n     * @param _owner The address of the Owner\r\n     * @param _spender The address of the Spender\r\n     */\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n        return approved[_owner][_spender];\r\n    }\r\n        \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    event BurnToken(address _owner, uint256 _value);\r\n    \r\n     /**\r\n     * Upgrade function, requires the owner to first approve tokens equal to their old token balance to this address \r\n     *\r\n     */\r\n    function upgrade() external {\r\n        require(now <=upgradeDeadline);\r\n        uint256 balance = oldToken.balanceOf(msg.sender);\r\n        require(balance>0);\r\n        oldToken.transferFrom(msg.sender, oldTokenBurnAddress, balance);\r\n        balances[msg.sender] += balance;\r\n        emit Transfer(this, msg.sender, balance);\r\n        emit Upgraded(msg.sender, balance);\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"testAddress\",\"type\":\"address\"}],\"name\":\"checkVestingTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burntTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vestingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maturityTimestamp\",\"type\":\"uint256\"}],\"name\":\"AddVestingAddress\",\"type\":\"event\"}]", "ContractName": "BlockonixToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4230356494fdf773b05559f73591d400f2b89a06b4819e12295a7d7ba35456b5"}