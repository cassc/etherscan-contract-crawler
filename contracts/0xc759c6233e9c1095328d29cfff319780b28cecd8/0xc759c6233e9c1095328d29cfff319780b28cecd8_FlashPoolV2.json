{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.1;\r\n\r\n/**\r\n * @title Linked to ILV Marker Interface\r\n *\r\n * @notice Marks smart contracts which are linked to IlluviumERC20 token instance upon construction,\r\n *      all these smart contracts share a common ilv() address getter\r\n *\r\n * @notice Implementing smart contracts MUST verify that they get linked to real IlluviumERC20 instance\r\n *      and that ilv() getter returns this very same instance address\r\n *\r\n * @author Basil Gorin\r\n */\r\ninterface ILinkedToILV {\r\n  /**\r\n   * @notice Getter for a verified IlluviumERC20 instance address\r\n   *\r\n   * @return IlluviumERC20 token instance address smart contract is linked to\r\n   */\r\n  function ilv() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title Illuvium Pool\r\n *\r\n * @notice An abstraction representing a pool, see IlluviumPoolBase for details\r\n *\r\n * @author Pedro Bergamini, reviewed by Basil Gorin\r\n */\r\ninterface IPool is ILinkedToILV {\r\n  /**\r\n   * @dev Deposit is a key data structure used in staking,\r\n   *      it represents a unit of stake with its amount, weight and term (time interval)\r\n   */\r\n  struct Deposit {\r\n    // @dev token amount staked\r\n    uint256 tokenAmount;\r\n    // @dev stake weight\r\n    uint256 weight;\r\n    // @dev locking period - from\r\n    uint64 lockedFrom;\r\n    // @dev locking period - until\r\n    uint64 lockedUntil;\r\n    // @dev indicates if the stake was created as a yield reward\r\n    bool isYield;\r\n  }\r\n\r\n  // for the rest of the functions see Soldoc in IlluviumPoolBase\r\n\r\n  function silv() external view returns (address);\r\n\r\n  function poolToken() external view returns (address);\r\n\r\n  function isFlashPool() external view returns (bool);\r\n\r\n  function weight() external view returns (uint32);\r\n\r\n  function lastYieldDistribution() external view returns (uint64);\r\n\r\n  function yieldRewardsPerWeight() external view returns (uint256);\r\n\r\n  function usersLockingWeight() external view returns (uint256);\r\n\r\n  function pendingYieldRewards(address _user) external view returns (uint256);\r\n\r\n  function balanceOf(address _user) external view returns (uint256);\r\n\r\n  function getDeposit(address _user, uint256 _depositId) external view returns (Deposit memory);\r\n\r\n  function getDepositsLength(address _user) external view returns (uint256);\r\n\r\n  function stake(\r\n    uint256 _amount,\r\n    uint64 _lockedUntil,\r\n    bool useSILV\r\n  ) external;\r\n\r\n  function unstake(\r\n    uint256 _depositId,\r\n    uint256 _amount,\r\n    bool useSILV\r\n  ) external;\r\n\r\n  function sync() external;\r\n\r\n  function processRewards(bool useSILV) external;\r\n\r\n  function setWeight(uint32 _weight) external;\r\n}\r\n\r\ninterface ICorePool is IPool {\r\n  function vaultRewardsPerToken() external view returns (uint256);\r\n\r\n  function poolTokenReserve() external view returns (uint256);\r\n\r\n  function stakeAsPool(address _staker, uint256 _amount) external;\r\n\r\n  function receiveVaultRewards(uint256 _amount) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n  // Booleans are more expensive than uint256 or any type that takes up a full\r\n  // word because each write operation emits an extra SLOAD to first read the\r\n  // slot's contents, replace the bits taken up by the boolean, and then write\r\n  // back. This is the compiler's defense against contract upgrades and\r\n  // pointer aliasing, and it cannot be disabled.\r\n\r\n  // The values being non-zero value makes deployment a bit more expensive,\r\n  // but in exchange the refund on every call to nonReentrant will be lower in\r\n  // amount. Since refunds are capped to a percentage of the total\r\n  // transaction's gas, it is best to keep them low in cases like this one, to\r\n  // increase the likelihood of the full refund coming into effect.\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor () {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _status = _ENTERED;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = msg.sender;\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Address Utils\r\n *\r\n * @dev Utility library of inline functions on addresses\r\n *\r\n * @author Basil Gorin\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * @notice Checks if the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *      as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    // a variable to load `extcodesize` to\r\n    uint256 size = 0;\r\n\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\r\n    // TODO: Check this again before the Serenity release, because all addresses will be contracts.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n    // retrieve the size of the code at address `addr`\r\n      size := extcodesize(addr)\r\n    }\r\n\r\n    // positive size indicates a smart contract address\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 token receiver interface\r\n *\r\n * @dev Interface for any contract that wants to support safe transfers\r\n *      from ERC20 token smart contracts.\r\n * @dev Inspired by ERC721 and ERC223 token standards\r\n *\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n * @dev See https://github.com/ethereum/EIPs/issues/223\r\n *\r\n * @author Basil Gorin\r\n */\r\ninterface ERC20Receiver {\r\n  /**\r\n   * @notice Handle the receipt of a ERC20 token(s)\r\n   * @dev The ERC20 smart contract calls this function on the recipient\r\n   *      after a successful transfer (`safeTransferFrom`).\r\n   *      This function MAY throw to revert and reject the transfer.\r\n   *      Return of other than the magic value MUST result in the transaction being reverted.\r\n   * @notice The contract address is always the message sender.\r\n   *      A wallet/broker/auction application MUST implement the wallet interface\r\n   *      if it will accept safe transfers.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _value amount of tokens which is being transferred\r\n   * @param _data additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` unless throwing\r\n   */\r\n  function onERC20Received(address _operator, address _from, uint256 _value, bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title Access Control List\r\n *\r\n * @notice Access control smart contract provides an API to check\r\n *      if specific operation is permitted globally and/or\r\n *      if particular user has a permission to execute it.\r\n *\r\n * @notice It deals with two main entities: features and roles.\r\n *\r\n * @notice Features are designed to be used to enable/disable specific\r\n *      functions (public functions) of the smart contract for everyone.\r\n * @notice User roles are designed to restrict access to specific\r\n *      functions (restricted functions) of the smart contract to some users.\r\n *\r\n * @notice Terms \"role\", \"permissions\" and \"set of permissions\" have equal meaning\r\n *      in the documentation text and may be used interchangeably.\r\n * @notice Terms \"permission\", \"single permission\" implies only one permission bit set.\r\n *\r\n * @dev This smart contract is designed to be inherited by other\r\n *      smart contracts which require access control management capabilities.\r\n *\r\n * @author Basil Gorin\r\n */\r\ncontract AccessControl {\r\n  /**\r\n   * @notice Access manager is responsible for assigning the roles to users,\r\n   *      enabling/disabling global features of the smart contract\r\n   * @notice Access manager can add, remove and update user roles,\r\n   *      remove and update global features\r\n   *\r\n   * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\r\n   * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\r\n   */\r\n  uint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n  /**\r\n   * @dev Bitmask representing all the possible permissions (super admin role)\r\n   * @dev Has all the bits are enabled (2^256 - 1 value)\r\n   */\r\n  uint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\r\n\r\n  /**\r\n   * @notice Privileged addresses with defined roles/permissions\r\n   * @notice In the context of ERC20/ERC721 tokens these can be permissions to\r\n   *      allow minting or burning tokens, transferring on behalf and so on\r\n   *\r\n   * @dev Maps user address to the permissions bitmask (role), where each bit\r\n   *      represents a permission\r\n   * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n   *      represents all possible permissions\r\n   * @dev Zero address mapping represents global features of the smart contract\r\n   */\r\n  mapping(address => uint256) public userRoles;\r\n\r\n  /**\r\n   * @dev Fired in updateRole() and updateFeatures()\r\n   *\r\n   * @param _by operator which called the function\r\n   * @param _to address which was granted/revoked permissions\r\n   * @param _requested permissions requested\r\n   * @param _actual permissions effectively set\r\n   */\r\n  event RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\r\n\r\n  /**\r\n   * @notice Creates an access control instance,\r\n   *      setting contract creator to have full privileges\r\n   */\r\n  constructor() {\r\n    // contract creator has full privileges\r\n    userRoles[msg.sender] = FULL_PRIVILEGES_MASK;\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves globally set of features enabled\r\n   *\r\n   * @dev Auxiliary getter function to maintain compatibility with previous\r\n   *      versions of the Access Control List smart contract, where\r\n   *      features was a separate uint256 public field\r\n   *\r\n   * @return 256-bit bitmask of the features enabled\r\n   */\r\n  function features() public view returns(uint256) {\r\n    // according to new design features are stored in zero address\r\n    // mapping of `userRoles` structure\r\n    return userRoles[address(0)];\r\n  }\r\n\r\n  /**\r\n   * @notice Updates set of the globally enabled features (`features`),\r\n   *      taking into account sender's permissions\r\n   *\r\n   * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\r\n   * @dev Function is left for backward compatibility with older versions\r\n   *\r\n   * @param _mask bitmask representing a set of features to enable/disable\r\n   */\r\n  function updateFeatures(uint256 _mask) public {\r\n    // delegate call to `updateRole`\r\n    updateRole(address(0), _mask);\r\n  }\r\n\r\n  /**\r\n   * @notice Updates set of permissions (role) for a given user,\r\n   *      taking into account sender's permissions.\r\n   *\r\n   * @dev Setting role to zero is equivalent to removing an all permissions\r\n   * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\r\n   *      copying senders' permissions (role) to the user\r\n   * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\r\n   *\r\n   * @param operator address of a user to alter permissions for or zero\r\n   *      to alter global features of the smart contract\r\n   * @param role bitmask representing a set of permissions to\r\n   *      enable/disable for a user specified\r\n   */\r\n  function updateRole(address operator, uint256 role) public {\r\n    // caller must have a permission to update user roles\r\n    require(isSenderInRole(ROLE_ACCESS_MANAGER), \"insufficient privileges (ROLE_ACCESS_MANAGER required)\");\r\n\r\n    // evaluate the role and reassign it\r\n    userRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\r\n\r\n    // fire an event\r\n    emit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\r\n  }\r\n\r\n  /**\r\n   * @notice Determines the permission bitmask an operator can set on the\r\n   *      target permission set\r\n   * @notice Used to calculate the permission bitmask to be set when requested\r\n   *     in `updateRole` and `updateFeatures` functions\r\n   *\r\n   * @dev Calculated based on:\r\n   *      1) operator's own permission set read from userRoles[operator]\r\n   *      2) target permission set - what is already set on the target\r\n   *      3) desired permission set - what do we want set target to\r\n   *\r\n   * @dev Corner cases:\r\n   *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\r\n   *        `desired` bitset is returned regardless of the `target` permission set value\r\n   *        (what operator sets is what they get)\r\n   *      2) Operator with no permissions (zero bitset):\r\n   *        `target` bitset is returned regardless of the `desired` value\r\n   *        (operator has no authority and cannot modify anything)\r\n   *\r\n   * @dev Example:\r\n   *      Consider an operator with the permissions bitmask     00001111\r\n   *      is about to modify the target permission set          01010101\r\n   *      Operator wants to set that permission set to          00110011\r\n   *      Based on their role, an operator has the permissions\r\n   *      to update only lowest 4 bits on the target, meaning that\r\n   *      high 4 bits of the target set in this example is left\r\n   *      unchanged and low 4 bits get changed as desired:      01010011\r\n   *\r\n   * @param operator address of the contract operator which is about to set the permissions\r\n   * @param target input set of permissions to operator is going to modify\r\n   * @param desired desired set of permissions operator would like to set\r\n   * @return resulting set of permissions given operator will set\r\n   */\r\n  function evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\r\n    // read operator's permissions\r\n    uint256 p = userRoles[operator];\r\n\r\n    // taking into account operator's permissions,\r\n    // 1) enable the permissions desired on the `target`\r\n    target |= p & desired;\r\n    // 2) disable the permissions desired on the `target`\r\n    target &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\r\n\r\n    // return calculated result\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if requested set of features is enabled globally on the contract\r\n   *\r\n   * @param required set of features to check against\r\n   * @return true if all the features requested are enabled, false otherwise\r\n   */\r\n  function isFeatureEnabled(uint256 required) public view returns(bool) {\r\n    // delegate call to `__hasRole`, passing `features` property\r\n    return __hasRole(features(), required);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if transaction sender `msg.sender` has all the permissions required\r\n   *\r\n   * @param required set of permissions (role) to check against\r\n   * @return true if all the permissions requested are enabled, false otherwise\r\n   */\r\n  function isSenderInRole(uint256 required) public view returns(bool) {\r\n    // delegate call to `isOperatorInRole`, passing transaction sender\r\n    return isOperatorInRole(msg.sender, required);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if operator has all the permissions (role) required\r\n   *\r\n   * @param operator address of the user to check role for\r\n   * @param required set of permissions (role) to check\r\n   * @return true if all the permissions requested are enabled, false otherwise\r\n   */\r\n  function isOperatorInRole(address operator, uint256 required) public view returns(bool) {\r\n    // delegate call to `__hasRole`, passing operator's permissions (role)\r\n    return __hasRole(userRoles[operator], required);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if role `actual` contains all the permissions required `required`\r\n   *\r\n   * @param actual existent role\r\n   * @param required required role\r\n   * @return true if actual has required role (all permissions), false otherwise\r\n   */\r\n  function __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\r\n    // check the bitmask for the role required and return the result\r\n    return actual & required == required;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Illuvium (ILV) ERC20 token\r\n *\r\n * @notice Illuvium is a core ERC20 token powering the game.\r\n *      It serves as an in-game currency, is tradable on exchanges,\r\n *      it powers up the governance protocol (Illuvium DAO) and participates in Yield Farming.\r\n *\r\n * @dev Token Summary:\r\n *      - Symbol: ILV\r\n *      - Name: Illuvium\r\n *      - Decimals: 18\r\n *      - Initial token supply: 7,000,000 ILV\r\n *      - Maximum final token supply: 10,000,000 ILV\r\n *          - Up to 3,000,000 ILV may get minted in 3 years period via yield farming\r\n *      - Mintable: total supply may increase\r\n *      - Burnable: total supply may decrease\r\n *\r\n * @dev Token balances and total supply are effectively 192 bits long, meaning that maximum\r\n *      possible total supply smart contract is able to track is 2^192 (close to 10^40 tokens)\r\n *\r\n * @dev Smart contract doesn't use safe math. All arithmetic operations are overflow/underflow safe.\r\n *      Additionally, Solidity 0.8.1 enforces overflow/underflow safety.\r\n *\r\n * @dev ERC20: reviewed according to https://eips.ethereum.org/EIPS/eip-20\r\n *\r\n * @dev ERC20: contract has passed OpenZeppelin ERC20 tests,\r\n *      see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.behavior.js\r\n *      see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.test.js\r\n *      see adopted copies of these tests in the `test` folder\r\n *\r\n * @dev ERC223/ERC777: not supported;\r\n *      send tokens via `safeTransferFrom` and implement `ERC20Receiver.onERC20Received` on the receiver instead\r\n *\r\n * @dev Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) - resolved\r\n *      Related events and functions are marked with \"ISBN:978-1-7281-3027-9\" tag:\r\n *        - event Transferred(address indexed _by, address indexed _from, address indexed _to, uint256 _value)\r\n *        - event Approved(address indexed _owner, address indexed _spender, uint256 _oldValue, uint256 _value)\r\n *        - function increaseAllowance(address _spender, uint256 _value) public returns (bool)\r\n *        - function decreaseAllowance(address _spender, uint256 _value) public returns (bool)\r\n *      See: https://ieeexplore.ieee.org/document/8802438\r\n *      See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n *\r\n * @author Basil Gorin\r\n */\r\ncontract IlluviumERC20 is AccessControl {\r\n  /**\r\n   * @dev Smart contract unique identifier, a random number\r\n   * @dev Should be regenerated each time smart contact source code is changed\r\n   *      and changes smart contract itself is to be redeployed\r\n   * @dev Generated using https://www.random.org/bytes/\r\n   */\r\n  uint256 public constant TOKEN_UID = 0x83ecb176af7c4f35a45ff0018282e3a05a1018065da866182df12285866f5a2c;\r\n\r\n  /**\r\n   * @notice Name of the token: Illuvium\r\n   *\r\n   * @notice ERC20 name of the token (long name)\r\n   *\r\n   * @dev ERC20 `function name() public view returns (string)`\r\n   *\r\n   * @dev Field is declared public: getter name() is created when compiled,\r\n   *      it returns the name of the token.\r\n   */\r\n  string public constant name = \"Illuvium\";\r\n\r\n  /**\r\n   * @notice Symbol of the token: ILV\r\n   *\r\n   * @notice ERC20 symbol of that token (short name)\r\n   *\r\n   * @dev ERC20 `function symbol() public view returns (string)`\r\n   *\r\n   * @dev Field is declared public: getter symbol() is created when compiled,\r\n   *      it returns the symbol of the token\r\n   */\r\n  string public constant symbol = \"ILV\";\r\n\r\n  /**\r\n   * @notice Decimals of the token: 18\r\n   *\r\n   * @dev ERC20 `function decimals() public view returns (uint8)`\r\n   *\r\n   * @dev Field is declared public: getter decimals() is created when compiled,\r\n   *      it returns the number of decimals used to get its user representation.\r\n   *      For example, if `decimals` equals `6`, a balance of `1,500,000` tokens should\r\n   *      be displayed to a user as `1,5` (`1,500,000 / 10 ** 6`).\r\n   *\r\n   * @dev NOTE: This information is only used for _display_ purposes: it in\r\n   *      no way affects any of the arithmetic of the contract, including balanceOf() and transfer().\r\n   */\r\n  uint8 public constant decimals = 18;\r\n\r\n  /**\r\n   * @notice Total supply of the token: initially 7,000,000,\r\n   *      with the potential to grow up to 10,000,000 during yield farming period (3 years)\r\n   *\r\n   * @dev ERC20 `function totalSupply() public view returns (uint256)`\r\n   *\r\n   * @dev Field is declared public: getter totalSupply() is created when compiled,\r\n   *      it returns the amount of tokens in existence.\r\n   */\r\n  uint256 public totalSupply; // is set to 7 million * 10^18 in the constructor\r\n\r\n  /**\r\n   * @dev A record of all the token balances\r\n   * @dev This mapping keeps record of all token owners:\r\n   *      owner => balance\r\n   */\r\n  mapping(address => uint256) public tokenBalances;\r\n\r\n  /**\r\n   * @notice A record of each account's voting delegate\r\n   *\r\n   * @dev Auxiliary data structure used to sum up an account's voting power\r\n   *\r\n   * @dev This mapping keeps record of all voting power delegations:\r\n   *      voting delegator (token owner) => voting delegate\r\n   */\r\n  mapping(address => address) public votingDelegates;\r\n\r\n  /**\r\n   * @notice A voting power record binds voting power of a delegate to a particular\r\n   *      block when the voting power delegation change happened\r\n   */\r\n  struct VotingPowerRecord {\r\n    /*\r\n     * @dev block.number when delegation has changed; starting from\r\n     *      that block voting power value is in effect\r\n     */\r\n    uint64 blockNumber;\r\n\r\n    /*\r\n     * @dev cumulative voting power a delegate has obtained starting\r\n     *      from the block stored in blockNumber\r\n     */\r\n    uint192 votingPower;\r\n  }\r\n\r\n  /**\r\n   * @notice A record of each account's voting power\r\n   *\r\n   * @dev Primarily data structure to store voting power for each account.\r\n   *      Voting power sums up from the account's token balance and delegated\r\n   *      balances.\r\n   *\r\n   * @dev Stores current value and entire history of its changes.\r\n   *      The changes are stored as an array of checkpoints.\r\n   *      Checkpoint is an auxiliary data structure containing voting\r\n   *      power (number of votes) and block number when the checkpoint is saved\r\n   *\r\n   * @dev Maps voting delegate => voting power record\r\n   */\r\n  mapping(address => VotingPowerRecord[]) public votingPowerHistory;\r\n\r\n  /**\r\n   * @dev A record of nonces for signing/validating signatures in `delegateWithSig`\r\n   *      for every delegate, increases after successful validation\r\n   *\r\n   * @dev Maps delegate address => delegate nonce\r\n   */\r\n  mapping(address => uint256) public nonces;\r\n\r\n  /**\r\n   * @notice A record of all the allowances to spend tokens on behalf\r\n   * @dev Maps token owner address to an address approved to spend\r\n   *      some tokens on behalf, maps approved address to that amount\r\n   * @dev owner => spender => value\r\n   */\r\n  mapping(address => mapping(address => uint256)) public transferAllowances;\r\n\r\n  /**\r\n   * @notice Enables ERC20 transfers of the tokens\r\n   *      (transfer by the token owner himself)\r\n   * @dev Feature FEATURE_TRANSFERS must be enabled in order for\r\n   *      `transfer()` function to succeed\r\n   */\r\n  uint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\r\n\r\n  /**\r\n   * @notice Enables ERC20 transfers on behalf\r\n   *      (transfer by someone else on behalf of token owner)\r\n   * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\r\n   *      `transferFrom()` function to succeed\r\n   * @dev Token owner must call `approve()` first to authorize\r\n   *      the transfer on behalf\r\n   */\r\n  uint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\r\n\r\n  /**\r\n   * @dev Defines if the default behavior of `transfer` and `transferFrom`\r\n   *      checks if the receiver smart contract supports ERC20 tokens\r\n   * @dev When feature FEATURE_UNSAFE_TRANSFERS is enabled the transfers do not\r\n   *      check if the receiver smart contract supports ERC20 tokens,\r\n   *      i.e. `transfer` and `transferFrom` behave like `unsafeTransferFrom`\r\n   * @dev When feature FEATURE_UNSAFE_TRANSFERS is disabled (default) the transfers\r\n   *      check if the receiver smart contract supports ERC20 tokens,\r\n   *      i.e. `transfer` and `transferFrom` behave like `safeTransferFrom`\r\n   */\r\n  uint32 public constant FEATURE_UNSAFE_TRANSFERS = 0x0000_0004;\r\n\r\n  /**\r\n   * @notice Enables token owners to burn their own tokens,\r\n   *      including locked tokens which are burnt first\r\n   * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\r\n   *      `burn()` function to succeed when called by token owner\r\n   */\r\n  uint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\r\n\r\n  /**\r\n   * @notice Enables approved operators to burn tokens on behalf of their owners,\r\n   *      including locked tokens which are burnt first\r\n   * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\r\n   *      `burn()` function to succeed when called by approved operator\r\n   */\r\n  uint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\r\n\r\n  /**\r\n   * @notice Enables delegators to elect delegates\r\n   * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\r\n   *      `delegate()` function to succeed\r\n   */\r\n  uint32 public constant FEATURE_DELEGATIONS = 0x0000_0020;\r\n\r\n  /**\r\n   * @notice Enables delegators to elect delegates on behalf\r\n   *      (via an EIP712 signature)\r\n   * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\r\n   *      `delegateWithSig()` function to succeed\r\n   */\r\n  uint32 public constant FEATURE_DELEGATIONS_ON_BEHALF = 0x0000_0040;\r\n\r\n  /**\r\n   * @notice Token creator is responsible for creating (minting)\r\n   *      tokens to an arbitrary address\r\n   * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\r\n   *      (calling `mint` function)\r\n   */\r\n  uint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\r\n\r\n  /**\r\n   * @notice Token destroyer is responsible for destroying (burning)\r\n   *      tokens owned by an arbitrary address\r\n   * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\r\n   *      (calling `burn` function)\r\n   */\r\n  uint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\r\n\r\n  /**\r\n   * @notice ERC20 receivers are allowed to receive tokens without ERC20 safety checks,\r\n   *      which may be useful to simplify tokens transfers into \"legacy\" smart contracts\r\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled addresses having\r\n   *      `ROLE_ERC20_RECEIVER` permission are allowed to receive tokens\r\n   *      via `transfer` and `transferFrom` functions in the same way they\r\n   *      would via `unsafeTransferFrom` function\r\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_RECEIVER` permission\r\n   *      doesn't affect the transfer behaviour since\r\n   *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\r\n   * @dev ROLE_ERC20_RECEIVER is a shortening for ROLE_UNSAFE_ERC20_RECEIVER\r\n   */\r\n  uint32 public constant ROLE_ERC20_RECEIVER = 0x0004_0000;\r\n\r\n  /**\r\n   * @notice ERC20 senders are allowed to send tokens without ERC20 safety checks,\r\n   *      which may be useful to simplify tokens transfers into \"legacy\" smart contracts\r\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled senders having\r\n   *      `ROLE_ERC20_SENDER` permission are allowed to send tokens\r\n   *      via `transfer` and `transferFrom` functions in the same way they\r\n   *      would via `unsafeTransferFrom` function\r\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_SENDER` permission\r\n   *      doesn't affect the transfer behaviour since\r\n   *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\r\n   * @dev ROLE_ERC20_SENDER is a shortening for ROLE_UNSAFE_ERC20_SENDER\r\n   */\r\n  uint32 public constant ROLE_ERC20_SENDER = 0x0008_0000;\r\n\r\n  /**\r\n   * @dev Magic value to be returned by ERC20Receiver upon successful reception of token(s)\r\n   * @dev Equal to `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))`,\r\n   *      which can be also obtained as `ERC20Receiver(address(0)).onERC20Received.selector`\r\n   */\r\n  bytes4 private constant ERC20_RECEIVED = 0x4fc35859;\r\n\r\n  /**\r\n   * @notice EIP-712 contract's domain typeHash, see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\r\n   */\r\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n  /**\r\n   * @notice EIP-712 delegation struct typeHash, see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\r\n   */\r\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegate,uint256 nonce,uint256 expiry)\");\r\n\r\n  /**\r\n   * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\r\n   *\r\n   * @dev ERC20 `event Transfer(address indexed _from, address indexed _to, uint256 _value)`\r\n   *\r\n   * @param _from an address tokens were consumed from\r\n   * @param _to an address tokens were sent to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * @dev Fired in approve() and approveAtomic() functions\r\n   *\r\n   * @dev ERC20 `event Approval(address indexed _owner, address indexed _spender, uint256 _value)`\r\n   *\r\n   * @param _owner an address which granted a permission to transfer\r\n   *      tokens on its behalf\r\n   * @param _spender an address which received a permission to transfer\r\n   *      tokens on behalf of the owner `_owner`\r\n   * @param _value amount of tokens granted to transfer on behalf\r\n   */\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  /**\r\n   * @dev Fired in mint() function\r\n   *\r\n   * @param _by an address which minted some tokens (transaction sender)\r\n   * @param _to an address the tokens were minted to\r\n   * @param _value an amount of tokens minted\r\n   */\r\n  event Minted(address indexed _by, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * @dev Fired in burn() function\r\n   *\r\n   * @param _by an address which burned some tokens (transaction sender)\r\n   * @param _from an address the tokens were burnt from\r\n   * @param _value an amount of tokens burnt\r\n   */\r\n  event Burnt(address indexed _by, address indexed _from, uint256 _value);\r\n\r\n  /**\r\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\r\n   *\r\n   * @dev Similar to ERC20 Transfer event, but also logs an address which executed transfer\r\n   *\r\n   * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\r\n   *\r\n   * @param _by an address which performed the transfer\r\n   * @param _from an address tokens were consumed from\r\n   * @param _to an address tokens were sent to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transferred(address indexed _by, address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\r\n   *\r\n   * @dev Similar to ERC20 Approve event, but also logs old approval value\r\n   *\r\n   * @dev Fired in approve() and approveAtomic() functions\r\n   *\r\n   * @param _owner an address which granted a permission to transfer\r\n   *      tokens on its behalf\r\n   * @param _spender an address which received a permission to transfer\r\n   *      tokens on behalf of the owner `_owner`\r\n   * @param _oldValue previously granted amount of tokens to transfer on behalf\r\n   * @param _value new granted amount of tokens to transfer on behalf\r\n   */\r\n  event Approved(address indexed _owner, address indexed _spender, uint256 _oldValue, uint256 _value);\r\n\r\n  /**\r\n   * @dev Notifies that a key-value pair in `votingDelegates` mapping has changed,\r\n   *      i.e. a delegator address has changed its delegate address\r\n   *\r\n   * @param _of delegator address, a token owner\r\n   * @param _from old delegate, an address which delegate right is revoked\r\n   * @param _to new delegate, an address which received the voting power\r\n   */\r\n  event DelegateChanged(address indexed _of, address indexed _from, address indexed _to);\r\n\r\n  /**\r\n   * @dev Notifies that a key-value pair in `votingPowerHistory` mapping has changed,\r\n   *      i.e. a delegate's voting power has changed.\r\n   *\r\n   * @param _of delegate whose voting power has changed\r\n   * @param _fromVal previous number of votes delegate had\r\n   * @param _toVal new number of votes delegate has\r\n   */\r\n  event VotingPowerChanged(address indexed _of, uint256 _fromVal, uint256 _toVal);\r\n\r\n  /**\r\n   * @dev Deploys the token smart contract,\r\n   *      assigns initial token supply to the address specified\r\n   *\r\n   * @param _initialHolder owner of the initial token supply\r\n   */\r\n  constructor(address _initialHolder) {\r\n    // verify initial holder address non-zero (is set)\r\n    require(_initialHolder != address(0), \"_initialHolder not set (zero address)\");\r\n\r\n    // mint initial supply\r\n    mint(_initialHolder, 7_000_000e18);\r\n  }\r\n\r\n  // ===== Start: ERC20/ERC223/ERC777 functions =====\r\n\r\n  /**\r\n   * @notice Gets the balance of a particular address\r\n   *\r\n   * @dev ERC20 `function balanceOf(address _owner) public view returns (uint256 balance)`\r\n   *\r\n   * @param _owner the address to query the the balance for\r\n   * @return balance an amount of tokens owned by the address specified\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    // read the balance and return\r\n    return tokenBalances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers some tokens to an external address or a smart contract\r\n   *\r\n   * @dev ERC20 `function transfer(address _to, uint256 _value) public returns (bool success)`\r\n   *\r\n   * @dev Called by token owner (an address which has a\r\n   *      positive token balance tracked by this smart contract)\r\n   * @dev Throws on any error like\r\n   *      * insufficient token balance or\r\n   *      * incorrect `_to` address:\r\n   *          * zero address or\r\n   *          * self address or\r\n   *          * smart contract which doesn't support ERC20\r\n   *\r\n   * @param _to an address to transfer tokens to,\r\n   *      must be either an external address or a smart contract,\r\n   *      compliant with the ERC20 standard\r\n   * @param _value amount of tokens to be transferred, must\r\n   *      be greater than zero\r\n   * @return success true on success, throws otherwise\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    // just delegate call to `transferFrom`,\r\n    // `FEATURE_TRANSFERS` is verified inside it\r\n    return transferFrom(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\r\n   *      to some other address `_to`\r\n   *\r\n   * @dev ERC20 `function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)`\r\n   *\r\n   * @dev Called by token owner on his own or approved address,\r\n   *      an address approved earlier by token owner to\r\n   *      transfer some amount of tokens on its behalf\r\n   * @dev Throws on any error like\r\n   *      * insufficient token balance or\r\n   *      * incorrect `_to` address:\r\n   *          * zero address or\r\n   *          * same as `_from` address (self transfer)\r\n   *          * smart contract which doesn't support ERC20\r\n   *\r\n   * @param _from token owner which approved caller (transaction sender)\r\n   *      to transfer `_value` of tokens on its behalf\r\n   * @param _to an address to transfer tokens to,\r\n   *      must be either an external address or a smart contract,\r\n   *      compliant with the ERC20 standard\r\n   * @param _value amount of tokens to be transferred, must\r\n   *      be greater than zero\r\n   * @return success true on success, throws otherwise\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    // depending on `FEATURE_UNSAFE_TRANSFERS` we execute either safe (default)\r\n    // or unsafe transfer\r\n    // if `FEATURE_UNSAFE_TRANSFERS` is enabled\r\n    // or receiver has `ROLE_ERC20_RECEIVER` permission\r\n    // or sender has `ROLE_ERC20_SENDER` permission\r\n    if(isFeatureEnabled(FEATURE_UNSAFE_TRANSFERS)\r\n    || isOperatorInRole(_to, ROLE_ERC20_RECEIVER)\r\n      || isSenderInRole(ROLE_ERC20_SENDER)) {\r\n      // we execute unsafe transfer - delegate call to `unsafeTransferFrom`,\r\n      // `FEATURE_TRANSFERS` is verified inside it\r\n      unsafeTransferFrom(_from, _to, _value);\r\n    }\r\n    // otherwise - if `FEATURE_UNSAFE_TRANSFERS` is disabled\r\n    // and receiver doesn't have `ROLE_ERC20_RECEIVER` permission\r\n    else {\r\n      // we execute safe transfer - delegate call to `safeTransferFrom`, passing empty `_data`,\r\n      // `FEATURE_TRANSFERS` is verified inside it\r\n      safeTransferFrom(_from, _to, _value, \"\");\r\n    }\r\n\r\n    // both `unsafeTransferFrom` and `safeTransferFrom` throw on any error, so\r\n    // if we're here - it means operation successful,\r\n    // just return true\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\r\n   *      to some other address `_to`\r\n   *\r\n   * @dev Inspired by ERC721 safeTransferFrom, this function allows to\r\n   *      send arbitrary data to the receiver on successful token transfer\r\n   * @dev Called by token owner on his own or approved address,\r\n   *      an address approved earlier by token owner to\r\n   *      transfer some amount of tokens on its behalf\r\n   * @dev Throws on any error like\r\n   *      * insufficient token balance or\r\n   *      * incorrect `_to` address:\r\n   *          * zero address or\r\n   *          * same as `_from` address (self transfer)\r\n   *          * smart contract which doesn't support ERC20Receiver interface\r\n   * @dev Returns silently on success, throws otherwise\r\n   *\r\n   * @param _from token owner which approved caller (transaction sender)\r\n   *      to transfer `_value` of tokens on its behalf\r\n   * @param _to an address to transfer tokens to,\r\n   *      must be either an external address or a smart contract,\r\n   *      compliant with the ERC20 standard\r\n   * @param _value amount of tokens to be transferred, must\r\n   *      be greater than zero\r\n   * @param _data [optional] additional data with no specified format,\r\n   *      sent in onERC20Received call to `_to` in case if its a smart contract\r\n   */\r\n  function safeTransferFrom(address _from, address _to, uint256 _value, bytes memory _data) public {\r\n    // first delegate call to `unsafeTransferFrom`\r\n    // to perform the unsafe token(s) transfer\r\n    unsafeTransferFrom(_from, _to, _value);\r\n\r\n    // after the successful transfer - check if receiver supports\r\n    // ERC20Receiver and execute a callback handler `onERC20Received`,\r\n    // reverting whole transaction on any error:\r\n    // check if receiver `_to` supports ERC20Receiver interface\r\n    if(AddressUtils.isContract(_to)) {\r\n      // if `_to` is a contract - execute onERC20Received\r\n      bytes4 response = ERC20Receiver(_to).onERC20Received(msg.sender, _from, _value, _data);\r\n\r\n      // expected response is ERC20_RECEIVED\r\n      require(response == ERC20_RECEIVED, \"invalid onERC20Received response\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\r\n   *      to some other address `_to`\r\n   *\r\n   * @dev In contrast to `safeTransferFrom` doesn't check recipient\r\n   *      smart contract to support ERC20 tokens (ERC20Receiver)\r\n   * @dev Designed to be used by developers when the receiver is known\r\n   *      to support ERC20 tokens but doesn't implement ERC20Receiver interface\r\n   * @dev Called by token owner on his own or approved address,\r\n   *      an address approved earlier by token owner to\r\n   *      transfer some amount of tokens on its behalf\r\n   * @dev Throws on any error like\r\n   *      * insufficient token balance or\r\n   *      * incorrect `_to` address:\r\n   *          * zero address or\r\n   *          * same as `_from` address (self transfer)\r\n   * @dev Returns silently on success, throws otherwise\r\n   *\r\n   * @param _from token owner which approved caller (transaction sender)\r\n   *      to transfer `_value` of tokens on its behalf\r\n   * @param _to an address to transfer tokens to,\r\n   *      must be either an external address or a smart contract,\r\n   *      compliant with the ERC20 standard\r\n   * @param _value amount of tokens to be transferred, must\r\n   *      be greater than zero\r\n   */\r\n  function unsafeTransferFrom(address _from, address _to, uint256 _value) public {\r\n    // if `_from` is equal to sender, require transfers feature to be enabled\r\n    // otherwise require transfers on behalf feature to be enabled\r\n    require(_from == msg.sender && isFeatureEnabled(FEATURE_TRANSFERS)\r\n      || _from != msg.sender && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\r\n      _from == msg.sender? \"transfers are disabled\": \"transfers on behalf are disabled\");\r\n\r\n    // non-zero source address check - Zeppelin\r\n    // obviously, zero source address is a client mistake\r\n    // it's not part of ERC20 standard but it's reasonable to fail fast\r\n    // since for zero value transfer transaction succeeds otherwise\r\n    require(_from != address(0), \"ERC20: transfer from the zero address\"); // Zeppelin msg\r\n\r\n    // non-zero recipient address check\r\n    require(_to != address(0), \"ERC20: transfer to the zero address\"); // Zeppelin msg\r\n\r\n    // sender and recipient cannot be the same\r\n    require(_from != _to, \"sender and recipient are the same (_from = _to)\");\r\n\r\n    // sending tokens to the token smart contract itself is a client mistake\r\n    require(_to != address(this), \"invalid recipient (transfer to the token smart contract itself)\");\r\n\r\n    // according to ERC-20 Token Standard, https://eips.ethereum.org/EIPS/eip-20\r\n    // \"Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\"\r\n    if(_value == 0) {\r\n      // emit an ERC20 transfer event\r\n      emit Transfer(_from, _to, _value);\r\n\r\n      // don't forget to return - we're done\r\n      return;\r\n    }\r\n\r\n    // no need to make arithmetic overflow check on the _value - by design of mint()\r\n\r\n    // in case of transfer on behalf\r\n    if(_from != msg.sender) {\r\n      // read allowance value - the amount of tokens allowed to transfer - into the stack\r\n      uint256 _allowance = transferAllowances[_from][msg.sender];\r\n\r\n      // verify sender has an allowance to transfer amount of tokens requested\r\n      require(_allowance >= _value, \"ERC20: transfer amount exceeds allowance\"); // Zeppelin msg\r\n\r\n      // update allowance value on the stack\r\n      _allowance -= _value;\r\n\r\n      // update the allowance value in storage\r\n      transferAllowances[_from][msg.sender] = _allowance;\r\n\r\n      // emit an improved atomic approve event\r\n      emit Approved(_from, msg.sender, _allowance + _value, _allowance);\r\n\r\n      // emit an ERC20 approval event to reflect the decrease\r\n      emit Approval(_from, msg.sender, _allowance);\r\n    }\r\n\r\n    // verify sender has enough tokens to transfer on behalf\r\n    require(tokenBalances[_from] >= _value, \"ERC20: transfer amount exceeds balance\"); // Zeppelin msg\r\n\r\n    // perform the transfer:\r\n    // decrease token owner (sender) balance\r\n    tokenBalances[_from] -= _value;\r\n\r\n    // increase `_to` address (receiver) balance\r\n    tokenBalances[_to] += _value;\r\n\r\n    // move voting power associated with the tokens transferred\r\n    __moveVotingPower(votingDelegates[_from], votingDelegates[_to], _value);\r\n\r\n    // emit an improved transfer event\r\n    emit Transferred(msg.sender, _from, _to, _value);\r\n\r\n    // emit an ERC20 transfer event\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @notice Approves address called `_spender` to transfer some amount\r\n   *      of tokens on behalf of the owner\r\n   *\r\n   * @dev ERC20 `function approve(address _spender, uint256 _value) public returns (bool success)`\r\n   *\r\n   * @dev Caller must not necessarily own any tokens to grant the permission\r\n   *\r\n   * @param _spender an address approved by the caller (token owner)\r\n   *      to spend some tokens on its behalf\r\n   * @param _value an amount of tokens spender `_spender` is allowed to\r\n   *      transfer on behalf of the token owner\r\n   * @return success true on success, throws otherwise\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    // non-zero spender address check - Zeppelin\r\n    // obviously, zero spender address is a client mistake\r\n    // it's not part of ERC20 standard but it's reasonable to fail fast\r\n    require(_spender != address(0), \"ERC20: approve to the zero address\"); // Zeppelin msg\r\n\r\n    // read old approval value to emmit an improved event (ISBN:978-1-7281-3027-9)\r\n    uint256 _oldValue = transferAllowances[msg.sender][_spender];\r\n\r\n    // perform an operation: write value requested into the storage\r\n    transferAllowances[msg.sender][_spender] = _value;\r\n\r\n    // emit an improved atomic approve event (ISBN:978-1-7281-3027-9)\r\n    emit Approved(msg.sender, _spender, _oldValue, _value);\r\n\r\n    // emit an ERC20 approval event\r\n    emit Approval(msg.sender, _spender, _value);\r\n\r\n    // operation successful, return true\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\r\n   *\r\n   * @dev ERC20 `function allowance(address _owner, address _spender) public view returns (uint256 remaining)`\r\n   *\r\n   * @dev A function to check an amount of tokens owner approved\r\n   *      to transfer on its behalf by some other address called \"spender\"\r\n   *\r\n   * @param _owner an address which approves transferring some tokens on its behalf\r\n   * @param _spender an address approved to transfer some tokens on behalf\r\n   * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\r\n   *      of token owner `_owner`\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    // read the value from storage and return\r\n    return transferAllowances[_owner][_spender];\r\n  }\r\n\r\n  // ===== End: ERC20/ERC223/ERC777 functions =====\r\n\r\n  // ===== Start: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) =====\r\n\r\n  /**\r\n   * @notice Increases the allowance granted to `spender` by the transaction sender\r\n   *\r\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\r\n   *\r\n   * @dev Throws if value to increase by is zero or too big and causes arithmetic overflow\r\n   *\r\n   * @param _spender an address approved by the caller (token owner)\r\n   *      to spend some tokens on its behalf\r\n   * @param _value an amount of tokens to increase by\r\n   * @return success true on success, throws otherwise\r\n   */\r\n  function increaseAllowance(address _spender, uint256 _value) public virtual returns (bool) {\r\n    // read current allowance value\r\n    uint256 currentVal = transferAllowances[msg.sender][_spender];\r\n\r\n    // non-zero _value and arithmetic overflow check on the allowance\r\n    require(currentVal + _value > currentVal, \"zero value approval increase or arithmetic overflow\");\r\n\r\n    // delegate call to `approve` with the new value\r\n    return approve(_spender, currentVal + _value);\r\n  }\r\n\r\n  /**\r\n   * @notice Decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\r\n   *\r\n   * @dev Throws if value to decrease by is zero or is bigger than currently allowed value\r\n   *\r\n   * @param _spender an address approved by the caller (token owner)\r\n   *      to spend some tokens on its behalf\r\n   * @param _value an amount of tokens to decrease by\r\n   * @return success true on success, throws otherwise\r\n   */\r\n  function decreaseAllowance(address _spender, uint256 _value) public virtual returns (bool) {\r\n    // read current allowance value\r\n    uint256 currentVal = transferAllowances[msg.sender][_spender];\r\n\r\n    // non-zero _value check on the allowance\r\n    require(_value > 0, \"zero value approval decrease\");\r\n\r\n    // verify allowance decrease doesn't underflow\r\n    require(currentVal >= _value, \"ERC20: decreased allowance below zero\");\r\n\r\n    // delegate call to `approve` with the new value\r\n    return approve(_spender, currentVal - _value);\r\n  }\r\n\r\n  // ===== End: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) =====\r\n\r\n  // ===== Start: Minting/burning extension =====\r\n\r\n  /**\r\n   * @dev Mints (creates) some tokens to address specified\r\n   * @dev The value specified is treated as is without taking\r\n   *      into account what `decimals` value is\r\n   * @dev Behaves effectively as `mintTo` function, allowing\r\n   *      to specify an address to mint tokens to\r\n   * @dev Requires sender to have `ROLE_TOKEN_CREATOR` permission\r\n   *\r\n   * @dev Throws on overflow, if totalSupply + _value doesn't fit into uint256\r\n   *\r\n   * @param _to an address to mint tokens to\r\n   * @param _value an amount of tokens to mint (create)\r\n   */\r\n  function mint(address _to, uint256 _value) public {\r\n    // check if caller has sufficient permissions to mint tokens\r\n    require(isSenderInRole(ROLE_TOKEN_CREATOR), \"insufficient privileges (ROLE_TOKEN_CREATOR required)\");\r\n\r\n    // non-zero recipient address check\r\n    require(_to != address(0), \"ERC20: mint to the zero address\"); // Zeppelin msg\r\n\r\n    // non-zero _value and arithmetic overflow check on the total supply\r\n    // this check automatically secures arithmetic overflow on the individual balance\r\n    require(totalSupply + _value > totalSupply, \"zero value mint or arithmetic overflow\");\r\n\r\n    // uint192 overflow check (required by voting delegation)\r\n    require(totalSupply + _value <= type(uint192).max, \"total supply overflow (uint192)\");\r\n\r\n    // perform mint:\r\n    // increase total amount of tokens value\r\n    totalSupply += _value;\r\n\r\n    // increase `_to` address balance\r\n    tokenBalances[_to] += _value;\r\n\r\n    // create voting power associated with the tokens minted\r\n    __moveVotingPower(address(0), votingDelegates[_to], _value);\r\n\r\n    // fire a minted event\r\n    emit Minted(msg.sender, _to, _value);\r\n\r\n    // emit an improved transfer event\r\n    emit Transferred(msg.sender, address(0), _to, _value);\r\n\r\n    // fire ERC20 compliant transfer event\r\n    emit Transfer(address(0), _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns (destroys) some tokens from the address specified\r\n   * @dev The value specified is treated as is without taking\r\n   *      into account what `decimals` value is\r\n   * @dev Behaves effectively as `burnFrom` function, allowing\r\n   *      to specify an address to burn tokens from\r\n   * @dev Requires sender to have `ROLE_TOKEN_DESTROYER` permission\r\n   *\r\n   * @param _from an address to burn some tokens from\r\n   * @param _value an amount of tokens to burn (destroy)\r\n   */\r\n  function burn(address _from, uint256 _value) public {\r\n    // check if caller has sufficient permissions to burn tokens\r\n    // and if not - check for possibility to burn own tokens or to burn on behalf\r\n    if(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\r\n      // if `_from` is equal to sender, require own burns feature to be enabled\r\n      // otherwise require burns on behalf feature to be enabled\r\n      require(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\r\n        || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\r\n        _from == msg.sender? \"burns are disabled\": \"burns on behalf are disabled\");\r\n\r\n      // in case of burn on behalf\r\n      if(_from != msg.sender) {\r\n        // read allowance value - the amount of tokens allowed to be burnt - into the stack\r\n        uint256 _allowance = transferAllowances[_from][msg.sender];\r\n\r\n        // verify sender has an allowance to burn amount of tokens requested\r\n        require(_allowance >= _value, \"ERC20: burn amount exceeds allowance\"); // Zeppelin msg\r\n\r\n        // update allowance value on the stack\r\n        _allowance -= _value;\r\n\r\n        // update the allowance value in storage\r\n        transferAllowances[_from][msg.sender] = _allowance;\r\n\r\n        // emit an improved atomic approve event\r\n        emit Approved(msg.sender, _from, _allowance + _value, _allowance);\r\n\r\n        // emit an ERC20 approval event to reflect the decrease\r\n        emit Approval(_from, msg.sender, _allowance);\r\n      }\r\n    }\r\n\r\n    // at this point we know that either sender is ROLE_TOKEN_DESTROYER or\r\n    // we burn own tokens or on behalf (in latest case we already checked and updated allowances)\r\n    // we have left to execute balance checks and burning logic itself\r\n\r\n    // non-zero burn value check\r\n    require(_value != 0, \"zero value burn\");\r\n\r\n    // non-zero source address check - Zeppelin\r\n    require(_from != address(0), \"ERC20: burn from the zero address\"); // Zeppelin msg\r\n\r\n    // verify `_from` address has enough tokens to destroy\r\n    // (basically this is a arithmetic overflow check)\r\n    require(tokenBalances[_from] >= _value, \"ERC20: burn amount exceeds balance\"); // Zeppelin msg\r\n\r\n    // perform burn:\r\n    // decrease `_from` address balance\r\n    tokenBalances[_from] -= _value;\r\n\r\n    // decrease total amount of tokens value\r\n    totalSupply -= _value;\r\n\r\n    // destroy voting power associated with the tokens burnt\r\n    __moveVotingPower(votingDelegates[_from], address(0), _value);\r\n\r\n    // fire a burnt event\r\n    emit Burnt(msg.sender, _from, _value);\r\n\r\n    // emit an improved transfer event\r\n    emit Transferred(msg.sender, _from, address(0), _value);\r\n\r\n    // fire ERC20 compliant transfer event\r\n    emit Transfer(_from, address(0), _value);\r\n  }\r\n\r\n  // ===== End: Minting/burning extension =====\r\n\r\n  // ===== Start: DAO Support (Compound-like voting delegation) =====\r\n\r\n  /**\r\n   * @notice Gets current voting power of the account `_of`\r\n   * @param _of the address of account to get voting power of\r\n   * @return current cumulative voting power of the account,\r\n   *      sum of token balances of all its voting delegators\r\n   */\r\n  function getVotingPower(address _of) public view returns (uint256) {\r\n    // get a link to an array of voting power history records for an address specified\r\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\r\n\r\n    // lookup the history and return latest element\r\n    return history.length == 0? 0: history[history.length - 1].votingPower;\r\n  }\r\n\r\n  /**\r\n   * @notice Gets past voting power of the account `_of` at some block `_blockNum`\r\n   * @dev Throws if `_blockNum` is not in the past (not the finalized block)\r\n   * @param _of the address of account to get voting power of\r\n   * @param _blockNum block number to get the voting power at\r\n   * @return past cumulative voting power of the account,\r\n   *      sum of token balances of all its voting delegators at block number `_blockNum`\r\n   */\r\n  function getVotingPowerAt(address _of, uint256 _blockNum) public view returns (uint256) {\r\n    // make sure block number is not in the past (not the finalized block)\r\n    require(_blockNum < block.number, \"not yet determined\"); // Compound msg\r\n\r\n    // get a link to an array of voting power history records for an address specified\r\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\r\n\r\n    // if voting power history for the account provided is empty\r\n    if(history.length == 0) {\r\n      // than voting power is zero - return the result\r\n      return 0;\r\n    }\r\n\r\n    // check latest voting power history record block number:\r\n    // if history was not updated after the block of interest\r\n    if(history[history.length - 1].blockNumber <= _blockNum) {\r\n      // we're done - return last voting power record\r\n      return getVotingPower(_of);\r\n    }\r\n\r\n    // check first voting power history record block number:\r\n    // if history was never updated before the block of interest\r\n    if(history[0].blockNumber > _blockNum) {\r\n      // we're done - voting power at the block num of interest was zero\r\n      return 0;\r\n    }\r\n\r\n    // `votingPowerHistory[_of]` is an array ordered by `blockNumber`, ascending;\r\n    // apply binary search on `votingPowerHistory[_of]` to find such an entry number `i`, that\r\n    // `votingPowerHistory[_of][i].blockNumber <= _blockNum`, but in the same time\r\n    // `votingPowerHistory[_of][i + 1].blockNumber > _blockNum`\r\n    // return the result - voting power found at index `i`\r\n    return history[__binaryLookup(_of, _blockNum)].votingPower;\r\n  }\r\n\r\n  /**\r\n   * @dev Reads an entire voting power history array for the delegate specified\r\n   *\r\n   * @param _of delegate to query voting power history for\r\n   * @return voting power history array for the delegate of interest\r\n   */\r\n  function getVotingPowerHistory(address _of) public view returns(VotingPowerRecord[] memory) {\r\n    // return an entire array as memory\r\n    return votingPowerHistory[_of];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns length of the voting power history array for the delegate specified;\r\n   *      useful since reading an entire array just to get its length is expensive (gas cost)\r\n   *\r\n   * @param _of delegate to query voting power history length for\r\n   * @return voting power history array length for the delegate of interest\r\n   */\r\n  function getVotingPowerHistoryLength(address _of) public view returns(uint256) {\r\n    // read array length and return\r\n    return votingPowerHistory[_of].length;\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates voting power of the delegator `msg.sender` to the delegate `_to`\r\n   *\r\n   * @dev Accepts zero value address to delegate voting power to, effectively\r\n   *      removing the delegate in that case\r\n   *\r\n   * @param _to address to delegate voting power to\r\n   */\r\n  function delegate(address _to) public {\r\n    // verify delegations are enabled\r\n    require(isFeatureEnabled(FEATURE_DELEGATIONS), \"delegations are disabled\");\r\n    // delegate call to `__delegate`\r\n    __delegate(msg.sender, _to);\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates voting power of the delegator (represented by its signature) to the delegate `_to`\r\n   *\r\n   * @dev Accepts zero value address to delegate voting power to, effectively\r\n   *      removing the delegate in that case\r\n   *\r\n   * @dev Compliant with EIP-712: Ethereum typed structured data hashing and signing,\r\n   *      see https://eips.ethereum.org/EIPS/eip-712\r\n   *\r\n   * @param _to address to delegate voting power to\r\n   * @param _nonce nonce used to construct the signature, and used to validate it;\r\n   *      nonce is increased by one after successful signature validation and vote delegation\r\n   * @param _exp signature expiration time\r\n   * @param v the recovery byte of the signature\r\n   * @param r half of the ECDSA signature pair\r\n   * @param s half of the ECDSA signature pair\r\n   */\r\n  function delegateWithSig(address _to, uint256 _nonce, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\r\n    // verify delegations on behalf are enabled\r\n    require(isFeatureEnabled(FEATURE_DELEGATIONS_ON_BEHALF), \"delegations on behalf are disabled\");\r\n\r\n    // build the EIP-712 contract domain separator\r\n    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), block.chainid, address(this)));\r\n\r\n    // build the EIP-712 hashStruct of the delegation message\r\n    bytes32 hashStruct = keccak256(abi.encode(DELEGATION_TYPEHASH, _to, _nonce, _exp));\r\n\r\n    // calculate the EIP-712 digest \"\\x19\\x01\" \u2016 domainSeparator \u2016 hashStruct(message)\r\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, hashStruct));\r\n\r\n    // recover the address who signed the message with v, r, s\r\n    address signer = ecrecover(digest, v, r, s);\r\n\r\n    // perform message integrity and security validations\r\n    require(signer != address(0), \"invalid signature\"); // Compound msg\r\n    require(_nonce == nonces[signer], \"invalid nonce\"); // Compound msg\r\n    require(block.timestamp < _exp, \"signature expired\"); // Compound msg\r\n\r\n    // update the nonce for that particular signer to avoid replay attack\r\n    nonces[signer]++;\r\n\r\n    // delegate call to `__delegate` - execute the logic required\r\n    __delegate(signer, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Auxiliary function to delegate delegator's `_from` voting power to the delegate `_to`\r\n   * @dev Writes to `votingDelegates` and `votingPowerHistory` mappings\r\n   *\r\n   * @param _from delegator who delegates his voting power\r\n   * @param _to delegate who receives the voting power\r\n   */\r\n  function __delegate(address _from, address _to) private {\r\n    // read current delegate to be replaced by a new one\r\n    address _fromDelegate = votingDelegates[_from];\r\n\r\n    // read current voting power (it is equal to token balance)\r\n    uint256 _value = tokenBalances[_from];\r\n\r\n    // reassign voting delegate to `_to`\r\n    votingDelegates[_from] = _to;\r\n\r\n    // update voting power for `_fromDelegate` and `_to`\r\n    __moveVotingPower(_fromDelegate, _to, _value);\r\n\r\n    // emit an event\r\n    emit DelegateChanged(_from, _fromDelegate, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Auxiliary function to move voting power `_value`\r\n   *      from delegate `_from` to the delegate `_to`\r\n   *\r\n   * @dev Doesn't have any effect if `_from == _to`, or if `_value == 0`\r\n   *\r\n   * @param _from delegate to move voting power from\r\n   * @param _to delegate to move voting power to\r\n   * @param _value voting power to move from `_from` to `_to`\r\n   */\r\n  function __moveVotingPower(address _from, address _to, uint256 _value) private {\r\n    // if there is no move (`_from == _to`) or there is nothing to move (`_value == 0`)\r\n    if(_from == _to || _value == 0) {\r\n      // return silently with no action\r\n      return;\r\n    }\r\n\r\n    // if source address is not zero - decrease its voting power\r\n    if(_from != address(0)) {\r\n      // read current source address voting power\r\n      uint256 _fromVal = getVotingPower(_from);\r\n\r\n      // calculate decreased voting power\r\n      // underflow is not possible by design:\r\n      // voting power is limited by token balance which is checked by the callee\r\n      uint256 _toVal = _fromVal - _value;\r\n\r\n      // update source voting power from `_fromVal` to `_toVal`\r\n      __updateVotingPower(_from, _fromVal, _toVal);\r\n    }\r\n\r\n    // if destination address is not zero - increase its voting power\r\n    if(_to != address(0)) {\r\n      // read current destination address voting power\r\n      uint256 _fromVal = getVotingPower(_to);\r\n\r\n      // calculate increased voting power\r\n      // overflow is not possible by design:\r\n      // max token supply limits the cumulative voting power\r\n      uint256 _toVal = _fromVal + _value;\r\n\r\n      // update destination voting power from `_fromVal` to `_toVal`\r\n      __updateVotingPower(_to, _fromVal, _toVal);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Auxiliary function to update voting power of the delegate `_of`\r\n   *      from value `_fromVal` to value `_toVal`\r\n   *\r\n   * @param _of delegate to update its voting power\r\n   * @param _fromVal old voting power of the delegate\r\n   * @param _toVal new voting power of the delegate\r\n   */\r\n  function __updateVotingPower(address _of, uint256 _fromVal, uint256 _toVal) private {\r\n    // get a link to an array of voting power history records for an address specified\r\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\r\n\r\n    // if there is an existing voting power value stored for current block\r\n    if(history.length != 0 && history[history.length - 1].blockNumber == block.number) {\r\n      // update voting power which is already stored in the current block\r\n      history[history.length - 1].votingPower = uint192(_toVal);\r\n    }\r\n    // otherwise - if there is no value stored for current block\r\n    else {\r\n      // add new element into array representing the value for current block\r\n      history.push(VotingPowerRecord(uint64(block.number), uint192(_toVal)));\r\n    }\r\n\r\n    // emit an event\r\n    emit VotingPowerChanged(_of, _fromVal, _toVal);\r\n  }\r\n\r\n  /**\r\n   * @dev Auxiliary function to lookup an element in a sorted (asc) array of elements\r\n   *\r\n   * @dev This function finds the closest element in an array to the value\r\n   *      of interest (not exceeding that value) and returns its index within an array\r\n   *\r\n   * @dev An array to search in is `votingPowerHistory[_to][i].blockNumber`,\r\n   *      it is sorted in ascending order (blockNumber increases)\r\n   *\r\n   * @param _to an address of the delegate to get an array for\r\n   * @param n value of interest to look for\r\n   * @return an index of the closest element in an array to the value\r\n   *      of interest (not exceeding that value)\r\n   */\r\n  function __binaryLookup(address _to, uint256 n) private view returns(uint256) {\r\n    // get a link to an array of voting power history records for an address specified\r\n    VotingPowerRecord[] storage history = votingPowerHistory[_to];\r\n\r\n    // left bound of the search interval, originally start of the array\r\n    uint256 i = 0;\r\n\r\n    // right bound of the search interval, originally end of the array\r\n    uint256 j = history.length - 1;\r\n\r\n    // the iteration process narrows down the bounds by\r\n    // splitting the interval in a half oce per each iteration\r\n    while(j > i) {\r\n      // get an index in the middle of the interval [i, j]\r\n      uint256 k = j - (j - i) / 2;\r\n\r\n      // read an element to compare it with the value of interest\r\n      VotingPowerRecord memory cp = history[k];\r\n\r\n      // if we've got a strict equal - we're lucky and done\r\n      if(cp.blockNumber == n) {\r\n        // just return the result - index `k`\r\n        return k;\r\n      }\r\n      // if the value of interest is bigger - move left bound to the middle\r\n      else if (cp.blockNumber < n) {\r\n        // move left bound `i` to the middle position `k`\r\n        i = k;\r\n      }\r\n      // otherwise, when the value of interest is smaller - move right bound to the middle\r\n      else {\r\n        // move right bound `j` to the middle position `k - 1`:\r\n        // element at position `k` is bigger and cannot be the result\r\n        j = k - 1;\r\n      }\r\n    }\r\n\r\n    // reaching that point means no exact match found\r\n    // since we're interested in the element which is not bigger than the\r\n    // element of interest, we return the lower bound `i`\r\n    return i;\r\n  }\r\n}\r\n\r\n// ===== End: DAO Support (Compound-like voting delegation) =====\r\n/**\r\n * @title Illuvium Aware\r\n *\r\n * @notice Helper smart contract to be inherited by other smart contracts requiring to\r\n *      be linked to verified IlluviumERC20 instance and performing some basic tasks on it\r\n *\r\n * @author Basil Gorin\r\n */\r\nabstract contract IlluviumAware is ILinkedToILV {\r\n  /// @dev Link to ILV ERC20 Token IlluviumERC20 instance\r\n  address public immutable override ilv;\r\n\r\n  /**\r\n   * @dev Creates IlluviumAware instance, requiring to supply deployed IlluviumERC20 instance address\r\n   *\r\n   * @param _ilv deployed IlluviumERC20 instance address\r\n   */\r\n  constructor(address _ilv) {\r\n    // verify ILV address is set and is correct\r\n    require(_ilv != address(0), \"ILV address not set\");\r\n    require(IlluviumERC20(_ilv).TOKEN_UID() == 0x83ecb176af7c4f35a45ff0018282e3a05a1018065da866182df12285866f5a2c, \"unexpected TOKEN_UID\");\r\n\r\n    // write ILV address\r\n    ilv = _ilv;\r\n  }\r\n\r\n  /**\r\n   * @dev Executes IlluviumERC20.safeTransferFrom(address(this), _to, _value, \"\")\r\n   *      on the bound IlluviumERC20 instance\r\n   *\r\n   * @dev Reentrancy safe due to the IlluviumERC20 design\r\n   */\r\n  function transferIlv(address _to, uint256 _value) internal {\r\n    // just delegate call to the target\r\n    transferIlvFrom(address(this), _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes IlluviumERC20.transferFrom(_from, _to, _value)\r\n   *      on the bound IlluviumERC20 instance\r\n   *\r\n   * @dev Reentrancy safe due to the IlluviumERC20 design\r\n   */\r\n  function transferIlvFrom(address _from, address _to, uint256 _value) internal {\r\n    // just delegate call to the target\r\n    IlluviumERC20(ilv).transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes IlluviumERC20.mint(_to, _values)\r\n   *      on the bound IlluviumERC20 instance\r\n   *\r\n   * @dev Reentrancy safe due to the IlluviumERC20 design\r\n   */\r\n  function mintIlv(address _to, uint256 _value) internal {\r\n    // just delegate call to the target\r\n    IlluviumERC20(ilv).mint(_to, _value);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Illuvium Pool Base\r\n *\r\n * @notice An abstract contract containing common logic for any pool,\r\n *      be it a flash pool (temporary pool like SNX) or a core pool (permanent pool like ILV/ETH or ILV pool)\r\n *\r\n * @dev Deployment and initialization.\r\n *      Any pool deployed must be bound to the deployed pool factory (IlluviumPoolFactory)\r\n *      Additionally, 3 token instance addresses must be defined on deployment:\r\n *          - ILV token address\r\n *          - sILV token address, used to mint sILV rewards\r\n *          - pool token address, it can be ILV token address, ILV/ETH pair address, and others\r\n *\r\n * @dev Pool weight defines the fraction of the yield current pool receives among the other pools,\r\n *      pool factory is responsible for the weight synchronization between the pools.\r\n * @dev The weight is logically 10% for ILV pool and 90% for ILV/ETH pool.\r\n *      Since Solidity doesn't support fractions the weight is defined by the division of\r\n *      pool weight by total pools weight (sum of all registered pools within the factory)\r\n * @dev For ILV Pool we use 100 as weight and for ILV/ETH pool - 900.\r\n *\r\n * @author Pedro Bergamini, reviewed by Basil Gorin\r\n */\r\nabstract contract IlluviumPoolBase is IPool, IlluviumAware, ReentrancyGuard {\r\n  /// @dev Data structure representing token holder using a pool\r\n  struct User {\r\n    // @dev Total staked amount\r\n    uint256 tokenAmount;\r\n    // @dev Total weight\r\n    uint256 totalWeight;\r\n    // @dev Auxiliary variable for yield calculation\r\n    uint256 subYieldRewards;\r\n    // @dev Auxiliary variable for vault rewards calculation\r\n    uint256 subVaultRewards;\r\n    // @dev An array of holder's deposits\r\n    Deposit[] deposits;\r\n  }\r\n\r\n  /// @dev Token holder storage, maps token holder address to their data record\r\n  mapping(address => User) public users;\r\n\r\n  /// @dev Link to sILV ERC20 Token EscrowedIlluviumERC20 instance\r\n  address public immutable override silv;\r\n\r\n  /// @dev Link to the pool factory IlluviumPoolFactory instance\r\n  IlluviumPoolFactory public immutable factory;\r\n\r\n  /// @dev Link to the pool token instance, for example ILV or ILV/ETH pair\r\n  address public immutable override poolToken;\r\n\r\n  /// @dev Pool weight, 100 for ILV pool or 900 for ILV/ETH\r\n  uint32 public override weight;\r\n\r\n  /// @dev Block number of the last yield distribution event\r\n  uint64 public override lastYieldDistribution;\r\n\r\n  /// @dev Used to calculate yield rewards\r\n  /// @dev This value is different from \"reward per token\" used in locked pool\r\n  /// @dev Note: stakes are different in duration and \"weight\" reflects that\r\n  uint256 public override yieldRewardsPerWeight;\r\n\r\n  /// @dev Used to calculate yield rewards, keeps track of the tokens weight locked in staking\r\n  uint256 public override usersLockingWeight;\r\n\r\n  /**\r\n   * @dev Stake weight is proportional to deposit amount and time locked, precisely\r\n   *      \"deposit amount wei multiplied by (fraction of the year locked plus one)\"\r\n   * @dev To avoid significant precision loss due to multiplication by \"fraction of the year\" [0, 1],\r\n   *      weight is stored multiplied by 1e6 constant, as an integer\r\n   * @dev Corner case 1: if time locked is zero, weight is deposit amount multiplied by 1e6\r\n   * @dev Corner case 2: if time locked is one year, fraction of the year locked is one, and\r\n   *      weight is a deposit amount multiplied by 2 * 1e6\r\n   */\r\n  uint256 internal constant WEIGHT_MULTIPLIER = 1e6;\r\n\r\n  /**\r\n   * @dev When we know beforehand that staking is done for a year, and fraction of the year locked is one,\r\n   *      we use simplified calculation and use the following constant instead previos one\r\n   */\r\n  uint256 internal constant YEAR_STAKE_WEIGHT_MULTIPLIER = 2 * WEIGHT_MULTIPLIER;\r\n\r\n  /**\r\n   * @dev Rewards per weight are stored multiplied by 1e12, as integers.\r\n   */\r\n  uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e12;\r\n\r\n  /**\r\n   * @dev Fired in _stake() and stake()\r\n   *\r\n   * @param _by an address which performed an operation, usually token holder\r\n   * @param _from token holder address, the tokens will be returned to that address\r\n   * @param amount amount of tokens staked\r\n   */\r\n  event Staked(address indexed _by, address indexed _from, uint256 amount);\r\n\r\n  /**\r\n   * @dev Fired in _updateStakeLock() and updateStakeLock()\r\n   *\r\n   * @param _by an address which performed an operation\r\n   * @param depositId updated deposit ID\r\n   * @param lockedFrom deposit locked from value\r\n   * @param lockedUntil updated deposit locked until value\r\n   */\r\n  event StakeLockUpdated(address indexed _by, uint256 depositId, uint64 lockedFrom, uint64 lockedUntil);\r\n\r\n  /**\r\n   * @dev Fired in _unstake() and unstake()\r\n   *\r\n   * @param _by an address which performed an operation, usually token holder\r\n   * @param _to an address which received the unstaked tokens, usually token holder\r\n   * @param amount amount of tokens unstaked\r\n   */\r\n  event Unstaked(address indexed _by, address indexed _to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Fired in _sync(), sync() and dependent functions (stake, unstake, etc.)\r\n   *\r\n   * @param _by an address which performed an operation\r\n   * @param yieldRewardsPerWeight updated yield rewards per weight value\r\n   * @param lastYieldDistribution usually, current block number\r\n   */\r\n  event Synchronized(address indexed _by, uint256 yieldRewardsPerWeight, uint64 lastYieldDistribution);\r\n\r\n  /**\r\n   * @dev Fired in _processRewards(), processRewards() and dependent functions (stake, unstake, etc.)\r\n   *\r\n   * @param _by an address which performed an operation\r\n   * @param _to an address which claimed the yield reward\r\n   * @param sIlv flag indicating if reward was paid (minted) in sILV\r\n   * @param amount amount of yield paid\r\n   */\r\n  event YieldClaimed(address indexed _by, address indexed _to, bool sIlv, uint256 amount);\r\n\r\n  /**\r\n   * @dev Fired in setWeight()\r\n   *\r\n   * @param _by an address which performed an operation, always a factory\r\n   * @param _fromVal old pool weight value\r\n   * @param _toVal new pool weight value\r\n   */\r\n  event PoolWeightUpdated(address indexed _by, uint32 _fromVal, uint32 _toVal);\r\n\r\n  /**\r\n   * @dev Overridden in sub-contracts to construct the pool\r\n   *\r\n   * @param _ilv ILV ERC20 Token IlluviumERC20 address\r\n   * @param _silv sILV ERC20 Token EscrowedIlluviumERC20 address\r\n   * @param _factory Pool factory IlluviumPoolFactory instance/address\r\n   * @param _poolToken token the pool operates on, for example ILV or ILV/ETH pair\r\n   * @param _initBlock initial block used to calculate the rewards\r\n   *      note: _initBlock can be set to the future effectively meaning _sync() calls will do nothing\r\n   * @param _weight number representing a weight of the pool, actual weight fraction\r\n   *      is calculated as that number divided by the total pools weight and doesn't exceed one\r\n   */\r\n  constructor(\r\n    address _ilv,\r\n    address _silv,\r\n    IlluviumPoolFactory _factory,\r\n    address _poolToken,\r\n    uint64 _initBlock,\r\n    uint32 _weight\r\n  ) IlluviumAware(_ilv) {\r\n    // verify the inputs are set\r\n    require(_silv != address(0), \"sILV address not set\");\r\n    require(address(_factory) != address(0), \"ILV Pool fct address not set\");\r\n    require(_poolToken != address(0), \"pool token address not set\");\r\n    require(_initBlock > 0, \"init block not set\");\r\n    require(_weight > 0, \"pool weight not set\");\r\n\r\n    // verify sILV instance supplied\r\n    require(\r\n      EscrowedIlluviumERC20(_silv).TOKEN_UID() ==\r\n      0xac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62,\r\n      \"unexpected sILV TOKEN_UID\"\r\n    );\r\n    // verify IlluviumPoolFactory instance supplied\r\n    require(\r\n      _factory.FACTORY_UID() == 0xc5cfd88c6e4d7e5c8a03c255f03af23c0918d8e82cac196f57466af3fd4a5ec7,\r\n      \"unexpected FACTORY_UID\"\r\n    );\r\n\r\n    // save the inputs into internal state variables\r\n    silv = _silv;\r\n    factory = _factory;\r\n    poolToken = _poolToken;\r\n    weight = _weight;\r\n\r\n    // init the dependent internal state variables\r\n    lastYieldDistribution = _initBlock;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates current yield rewards value available for address specified\r\n   *\r\n   * @param _staker an address to calculate yield rewards value for\r\n   * @return calculated yield reward value for the given address\r\n   */\r\n  function pendingYieldRewards(address _staker) external view override returns (uint256) {\r\n    // `newYieldRewardsPerWeight` will store stored or recalculated value for `yieldRewardsPerWeight`\r\n    uint256 newYieldRewardsPerWeight;\r\n\r\n    // if smart contract state was not updated recently, `yieldRewardsPerWeight` value\r\n    // is outdated and we need to recalculate it in order to calculate pending rewards correctly\r\n    if (blockNumber() > lastYieldDistribution && usersLockingWeight != 0) {\r\n      uint256 endBlock = factory.endBlock();\r\n      uint256 multiplier =\r\n      blockNumber() > endBlock ? endBlock - lastYieldDistribution : blockNumber() - lastYieldDistribution;\r\n      uint256 ilvRewards = (multiplier * weight * factory.ilvPerBlock()) / factory.totalWeight();\r\n\r\n      // recalculated value for `yieldRewardsPerWeight`\r\n      newYieldRewardsPerWeight = rewardToWeight(ilvRewards, usersLockingWeight) + yieldRewardsPerWeight;\r\n    } else {\r\n      // if smart contract state is up to date, we don't recalculate\r\n      newYieldRewardsPerWeight = yieldRewardsPerWeight;\r\n    }\r\n\r\n    // based on the rewards per weight value, calculate pending rewards;\r\n    User memory user = users[_staker];\r\n    uint256 pending = weightToReward(user.totalWeight, newYieldRewardsPerWeight) - user.subYieldRewards;\r\n\r\n    return pending;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns total staked token balance for the given address\r\n   *\r\n   * @param _user an address to query balance for\r\n   * @return total staked token balance\r\n   */\r\n  function balanceOf(address _user) external view override returns (uint256) {\r\n    // read specified user token amount and return\r\n    return users[_user].tokenAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns information on the given deposit for the given address\r\n   *\r\n   * @dev See getDepositsLength\r\n   *\r\n   * @param _user an address to query deposit for\r\n   * @param _depositId zero-indexed deposit ID for the address specified\r\n   * @return deposit info as Deposit structure\r\n   */\r\n  function getDeposit(address _user, uint256 _depositId) external view override returns (Deposit memory) {\r\n    // read deposit at specified index and return\r\n    return users[_user].deposits[_depositId];\r\n  }\r\n\r\n  /**\r\n   * @notice Returns number of deposits for the given address. Allows iteration over deposits.\r\n   *\r\n   * @dev See getDeposit\r\n   *\r\n   * @param _user an address to query deposit length for\r\n   * @return number of deposits for the given address\r\n   */\r\n  function getDepositsLength(address _user) external view override returns (uint256) {\r\n    // read deposits array length and return\r\n    return users[_user].deposits.length;\r\n  }\r\n\r\n  /**\r\n   * @notice Stakes specified amount of tokens for the specified amount of time,\r\n   *      and pays pending yield rewards if any\r\n   *\r\n   * @dev Requires amount to stake to be greater than zero\r\n   *\r\n   * @param _amount amount of tokens to stake\r\n   * @param _lockUntil stake period as unix timestamp; zero means no locking\r\n   * @param _useSILV a flag indicating if previous reward to be paid as sILV\r\n   */\r\n  function stake(\r\n    uint256 _amount,\r\n    uint64 _lockUntil,\r\n    bool _useSILV\r\n  ) external override {\r\n    // delegate call to an internal function\r\n    _stake(msg.sender, _amount, _lockUntil, _useSILV, false);\r\n  }\r\n\r\n  /**\r\n   * @notice Unstakes specified amount of tokens, and pays pending yield rewards if any\r\n   *\r\n   * @dev Requires amount to unstake to be greater than zero\r\n   *\r\n   * @param _depositId deposit ID to unstake from, zero-indexed\r\n   * @param _amount amount of tokens to unstake\r\n   * @param _useSILV a flag indicating if reward to be paid as sILV\r\n   */\r\n  function unstake(\r\n    uint256 _depositId,\r\n    uint256 _amount,\r\n    bool _useSILV\r\n  ) external override {\r\n    // delegate call to an internal function\r\n    _unstake(msg.sender, _depositId, _amount, _useSILV);\r\n  }\r\n\r\n  /**\r\n   * @notice Extends locking period for a given deposit\r\n   *\r\n   * @dev Requires new lockedUntil value to be:\r\n   *      higher than the current one, and\r\n   *      in the future, but\r\n   *      no more than 1 year in the future\r\n   *\r\n   * @param depositId updated deposit ID\r\n   * @param lockedUntil updated deposit locked until value\r\n   * @param useSILV used for _processRewards check if it should use ILV or sILV\r\n   */\r\n  function updateStakeLock(\r\n    uint256 depositId,\r\n    uint64 lockedUntil,\r\n    bool useSILV\r\n  ) external {\r\n    // sync and call processRewards\r\n    _sync();\r\n    _processRewards(msg.sender, useSILV, false);\r\n    // delegate call to an internal function\r\n    _updateStakeLock(msg.sender, depositId, lockedUntil);\r\n  }\r\n\r\n  /**\r\n   * @notice Service function to synchronize pool state with current time\r\n   *\r\n   * @dev Can be executed by anyone at any time, but has an effect only when\r\n   *      at least one block passes between synchronizations\r\n   * @dev Executed internally when staking, unstaking, processing rewards in order\r\n   *      for calculations to be correct and to reflect state progress of the contract\r\n   * @dev When timing conditions are not met (executed too frequently, or after factory\r\n   *      end block), function doesn't throw and exits silently\r\n   */\r\n  function sync() external override {\r\n    // delegate call to an internal function\r\n    _sync();\r\n  }\r\n\r\n  /**\r\n   * @notice Service function to calculate and pay pending yield rewards to the sender\r\n   *\r\n   * @dev Can be executed by anyone at any time, but has an effect only when\r\n   *      executed by deposit holder and when at least one block passes from the\r\n   *      previous reward processing\r\n   * @dev Executed internally when staking and unstaking, executes sync() under the hood\r\n   *      before making further calculations and payouts\r\n   * @dev When timing conditions are not met (executed too frequently, or after factory\r\n   *      end block), function doesn't throw and exits silently\r\n   *\r\n   * @param _useSILV flag indicating whether to mint sILV token as a reward or not;\r\n   *      when set to true - sILV reward is minted immediately and sent to sender,\r\n   *      when set to false - new ILV reward deposit gets created if pool is an ILV pool\r\n   *      (poolToken is ILV token), or new pool deposit gets created together with sILV minted\r\n   *      when pool is not an ILV pool (poolToken is not an ILV token)\r\n   */\r\n  function processRewards(bool _useSILV) external virtual override {\r\n    // delegate call to an internal function\r\n    _processRewards(msg.sender, _useSILV, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed by the factory to modify pool weight; the factory is expected\r\n   *      to keep track of the total pools weight when updating\r\n   *\r\n   * @dev Set weight to zero to disable the pool\r\n   *\r\n   * @param _weight new weight to set for the pool\r\n   */\r\n  function setWeight(uint32 _weight) external override {\r\n    // verify function is executed by the factory\r\n    require(msg.sender == address(factory), \"access denied\");\r\n\r\n    // emit an event logging old and new weight values\r\n    emit PoolWeightUpdated(msg.sender, weight, _weight);\r\n\r\n    // set the new weight value\r\n    weight = _weight;\r\n  }\r\n\r\n  /**\r\n   * @dev Similar to public pendingYieldRewards, but performs calculations based on\r\n   *      current smart contract state only, not taking into account any additional\r\n   *      time/blocks which might have passed\r\n   *\r\n   * @param _staker an address to calculate yield rewards value for\r\n   * @return pending calculated yield reward value for the given address\r\n   */\r\n  function _pendingYieldRewards(address _staker) internal view returns (uint256 pending) {\r\n    // read user data structure into memory\r\n    User memory user = users[_staker];\r\n\r\n    // and perform the calculation using the values read\r\n    return weightToReward(user.totalWeight, yieldRewardsPerWeight) - user.subYieldRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally, mostly by children implementations, see stake()\r\n   *\r\n   * @param _staker an address which stakes tokens and which will receive them back\r\n   * @param _amount amount of tokens to stake\r\n   * @param _lockUntil stake period as unix timestamp; zero means no locking\r\n   * @param _useSILV a flag indicating if previous reward to be paid as sILV\r\n   * @param _isYield a flag indicating if that stake is created to store yield reward\r\n   *      from the previously unstaked stake\r\n   */\r\n  function _stake(\r\n    address _staker,\r\n    uint256 _amount,\r\n    uint64 _lockUntil,\r\n    bool _useSILV,\r\n    bool _isYield\r\n  ) internal virtual {\r\n    // validate the inputs\r\n    require(_amount > 0, \"zero amount\");\r\n    require(\r\n      _lockUntil == 0 || (_lockUntil > now256() && _lockUntil - now256() <= 365 days),\r\n      \"invalid lock interval\"\r\n    );\r\n\r\n    // update smart contract state\r\n    _sync();\r\n\r\n    // get a link to user data struct, we will write to it later\r\n    User storage user = users[_staker];\r\n    // process current pending rewards if any\r\n    if (user.tokenAmount > 0) {\r\n      _processRewards(_staker, _useSILV, false);\r\n    }\r\n\r\n    // in most of the cases added amount `addedAmount` is simply `_amount`\r\n    // however for deflationary tokens this can be different\r\n\r\n    // read the current balance\r\n    uint256 previousBalance = IERC20(poolToken).balanceOf(address(this));\r\n    // transfer `_amount`; note: some tokens may get burnt here\r\n    transferPoolTokenFrom(address(msg.sender), address(this), _amount);\r\n    // read new balance, usually this is just the difference `previousBalance - _amount`\r\n    uint256 newBalance = IERC20(poolToken).balanceOf(address(this));\r\n    // calculate real amount taking into account deflation\r\n    uint256 addedAmount = newBalance - previousBalance;\r\n\r\n    // set the `lockFrom` and `lockUntil` taking into account that\r\n    // zero value for `_lockUntil` means \"no locking\" and leads to zero values\r\n    // for both `lockFrom` and `lockUntil`\r\n    uint64 lockFrom = _lockUntil > 0 ? uint64(now256()) : 0;\r\n    uint64 lockUntil = _lockUntil;\r\n\r\n    // stake weight formula rewards for locking\r\n    uint256 stakeWeight =\r\n    (((lockUntil - lockFrom) * WEIGHT_MULTIPLIER) / 365 days + WEIGHT_MULTIPLIER) * addedAmount;\r\n\r\n    // makes sure stakeWeight is valid\r\n    assert(stakeWeight > 0);\r\n\r\n    // create and save the deposit (append it to deposits array)\r\n    Deposit memory deposit =\r\n    Deposit({\r\n    tokenAmount: addedAmount,\r\n    weight: stakeWeight,\r\n    lockedFrom: lockFrom,\r\n    lockedUntil: lockUntil,\r\n    isYield: _isYield\r\n    });\r\n    // deposit ID is an index of the deposit in `deposits` array\r\n    user.deposits.push(deposit);\r\n\r\n    // update user record\r\n    user.tokenAmount += addedAmount;\r\n    user.totalWeight += stakeWeight;\r\n    user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\r\n\r\n    // update global variable\r\n    usersLockingWeight += stakeWeight;\r\n\r\n    // emit an event\r\n    emit Staked(msg.sender, _staker, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally, mostly by children implementations, see unstake()\r\n   *\r\n   * @param _staker an address which unstakes tokens (which previously staked them)\r\n   * @param _depositId deposit ID to unstake from, zero-indexed\r\n   * @param _amount amount of tokens to unstake\r\n   * @param _useSILV a flag indicating if reward to be paid as sILV\r\n   */\r\n  function _unstake(\r\n    address _staker,\r\n    uint256 _depositId,\r\n    uint256 _amount,\r\n    bool _useSILV\r\n  ) internal virtual {\r\n    // verify an amount is set\r\n    require(_amount > 0, \"zero amount\");\r\n\r\n    // get a link to user data struct, we will write to it later\r\n    User storage user = users[_staker];\r\n    // get a link to the corresponding deposit, we may write to it later\r\n    Deposit storage stakeDeposit = user.deposits[_depositId];\r\n    // deposit structure may get deleted, so we save isYield flag to be able to use it\r\n    bool isYield = stakeDeposit.isYield;\r\n\r\n    // verify available balance\r\n    // if staker address ot deposit doesn't exist this check will fail as well\r\n    require(stakeDeposit.tokenAmount >= _amount, \"amount exceeds stake\");\r\n\r\n    // update smart contract state\r\n    _sync();\r\n    // and process current pending rewards if any\r\n    _processRewards(_staker, _useSILV, false);\r\n\r\n    // recalculate deposit weight\r\n    uint256 previousWeight = stakeDeposit.weight;\r\n    uint256 newWeight =\r\n    (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\r\n    365 days +\r\n    WEIGHT_MULTIPLIER) * (stakeDeposit.tokenAmount - _amount);\r\n\r\n    // update the deposit, or delete it if its depleted\r\n    if (stakeDeposit.tokenAmount - _amount == 0) {\r\n      delete user.deposits[_depositId];\r\n    } else {\r\n      stakeDeposit.tokenAmount -= _amount;\r\n      stakeDeposit.weight = newWeight;\r\n    }\r\n\r\n    // update user record\r\n    user.tokenAmount -= _amount;\r\n    user.totalWeight = user.totalWeight - previousWeight + newWeight;\r\n    user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\r\n\r\n    // update global variable\r\n    usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\r\n\r\n    // if the deposit was created by the pool itself as a yield reward\r\n    if (isYield) {\r\n      // mint the yield via the factory\r\n      factory.mintYieldTo(msg.sender, _amount);\r\n    } else {\r\n      // otherwise just return tokens back to holder\r\n      transferPoolToken(msg.sender, _amount);\r\n    }\r\n\r\n    // emit an event\r\n    emit Unstaked(msg.sender, _staker, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally, mostly by children implementations, see sync()\r\n   *\r\n   * @dev Updates smart contract state (`yieldRewardsPerWeight`, `lastYieldDistribution`),\r\n   *      updates factory state via `updateILVPerBlock`\r\n   */\r\n  function _sync() internal virtual {\r\n    // update ILV per block value in factory if required\r\n    if (factory.shouldUpdateRatio()) {\r\n      factory.updateILVPerBlock();\r\n    }\r\n\r\n    // check bound conditions and if these are not met -\r\n    // exit silently, without emitting an event\r\n    uint256 endBlock = factory.endBlock();\r\n    if (lastYieldDistribution >= endBlock) {\r\n      return;\r\n    }\r\n    if (blockNumber() <= lastYieldDistribution) {\r\n      return;\r\n    }\r\n    // if locking weight is zero - update only `lastYieldDistribution` and exit\r\n    if (usersLockingWeight == 0) {\r\n      lastYieldDistribution = uint64(blockNumber());\r\n      return;\r\n    }\r\n\r\n    // to calculate the reward we need to know how many blocks passed, and reward per block\r\n    uint256 currentBlock = blockNumber() > endBlock ? endBlock : blockNumber();\r\n    uint256 blocksPassed = currentBlock - lastYieldDistribution;\r\n    uint256 ilvPerBlock = factory.ilvPerBlock();\r\n\r\n    // calculate the reward\r\n    uint256 ilvReward = (blocksPassed * ilvPerBlock * weight) / factory.totalWeight();\r\n\r\n    // update rewards per weight and `lastYieldDistribution`\r\n    yieldRewardsPerWeight += rewardToWeight(ilvReward, usersLockingWeight);\r\n    lastYieldDistribution = uint64(currentBlock);\r\n\r\n    // emit an event\r\n    emit Synchronized(msg.sender, yieldRewardsPerWeight, lastYieldDistribution);\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally, mostly by children implementations, see processRewards()\r\n   *\r\n   * @param _staker an address which receives the reward (which has staked some tokens earlier)\r\n   * @param _useSILV flag indicating whether to mint sILV token as a reward or not, see processRewards()\r\n   * @param _withUpdate flag allowing to disable synchronization (see sync()) if set to false\r\n   * @return pendingYield the rewards calculated and optionally re-staked\r\n   */\r\n  function _processRewards(\r\n    address _staker,\r\n    bool _useSILV,\r\n    bool _withUpdate\r\n  ) internal virtual returns (uint256 pendingYield) {\r\n    // update smart contract state if required\r\n    if (_withUpdate) {\r\n      _sync();\r\n    }\r\n\r\n    // calculate pending yield rewards, this value will be returned\r\n    pendingYield = _pendingYieldRewards(_staker);\r\n\r\n    // if pending yield is zero - just return silently\r\n    if (pendingYield == 0) return 0;\r\n\r\n    // get link to a user data structure, we will write into it later\r\n    User storage user = users[_staker];\r\n\r\n    // if sILV is requested\r\n    if (_useSILV) {\r\n      // - mint sILV\r\n      mintSIlv(_staker, pendingYield);\r\n    } else if (poolToken == ilv) {\r\n      // calculate pending yield weight,\r\n      // 2e6 is the bonus weight when staking for 1 year\r\n      uint256 depositWeight = pendingYield * YEAR_STAKE_WEIGHT_MULTIPLIER;\r\n\r\n      // if the pool is ILV Pool - create new ILV deposit\r\n      // and save it - push it into deposits array\r\n      Deposit memory newDeposit =\r\n      Deposit({\r\n      tokenAmount: pendingYield,\r\n      lockedFrom: uint64(now256()),\r\n      lockedUntil: uint64(now256() + 365 days), // staking yield for 1 year\r\n      weight: depositWeight,\r\n      isYield: true\r\n      });\r\n      user.deposits.push(newDeposit);\r\n\r\n      // update user record\r\n      user.tokenAmount += pendingYield;\r\n      user.totalWeight += depositWeight;\r\n\r\n      // update global variable\r\n      usersLockingWeight += depositWeight;\r\n    } else {\r\n      // for other pools - stake as pool\r\n      address ilvPool = factory.getPoolAddress(ilv);\r\n      ICorePool(ilvPool).stakeAsPool(_staker, pendingYield);\r\n    }\r\n\r\n    // update users's record for `subYieldRewards` if requested\r\n    if (_withUpdate) {\r\n      user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\r\n    }\r\n\r\n    // emit an event\r\n    emit YieldClaimed(msg.sender, _staker, _useSILV, pendingYield);\r\n  }\r\n\r\n  /**\r\n   * @dev See updateStakeLock()\r\n   *\r\n   * @param _staker an address to update stake lock\r\n   * @param _depositId updated deposit ID\r\n   * @param _lockedUntil updated deposit locked until value\r\n   */\r\n  function _updateStakeLock(\r\n    address _staker,\r\n    uint256 _depositId,\r\n    uint64 _lockedUntil\r\n  ) internal {\r\n    // validate the input time\r\n    require(_lockedUntil > now256(), \"lock should be in the future\");\r\n\r\n    // get a link to user data struct, we will write to it later\r\n    User storage user = users[_staker];\r\n    // get a link to the corresponding deposit, we may write to it later\r\n    Deposit storage stakeDeposit = user.deposits[_depositId];\r\n\r\n    // validate the input against deposit structure\r\n    require(_lockedUntil > stakeDeposit.lockedUntil, \"invalid new lock\");\r\n\r\n    // verify locked from and locked until values\r\n    if (stakeDeposit.lockedFrom == 0) {\r\n      require(_lockedUntil - now256() <= 365 days, \"max lock period is 365 days\");\r\n      stakeDeposit.lockedFrom = uint64(now256());\r\n    } else {\r\n      require(_lockedUntil - stakeDeposit.lockedFrom <= 365 days, \"max lock period is 365 days\");\r\n    }\r\n\r\n    // update locked until value, calculate new weight\r\n    stakeDeposit.lockedUntil = _lockedUntil;\r\n    uint256 newWeight =\r\n    (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\r\n    365 days +\r\n    WEIGHT_MULTIPLIER) * stakeDeposit.tokenAmount;\r\n\r\n    // save previous weight\r\n    uint256 previousWeight = stakeDeposit.weight;\r\n    // update weight\r\n    stakeDeposit.weight = newWeight;\r\n\r\n    // update user total weight and global locking weight\r\n    user.totalWeight = user.totalWeight - previousWeight + newWeight;\r\n    usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\r\n\r\n    // emit an event\r\n    emit StakeLockUpdated(_staker, _depositId, stakeDeposit.lockedFrom, _lockedUntil);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts stake weight (not to be mixed with the pool weight) to\r\n   *      ILV reward value, applying the 10^12 division on weight\r\n   *\r\n   * @param _weight stake weight\r\n   * @param rewardPerWeight ILV reward per weight\r\n   * @return reward value normalized to 10^12\r\n   */\r\n  function weightToReward(uint256 _weight, uint256 rewardPerWeight) public pure returns (uint256) {\r\n    // apply the formula and return\r\n    return (_weight * rewardPerWeight) / REWARD_PER_WEIGHT_MULTIPLIER;\r\n  }\r\n\r\n  /**\r\n   * @dev Converts reward ILV value to stake weight (not to be mixed with the pool weight),\r\n   *      applying the 10^12 multiplication on the reward\r\n   *      - OR -\r\n   * @dev Converts reward ILV value to reward/weight if stake weight is supplied as second\r\n   *      function parameter instead of reward/weight\r\n   *\r\n   * @param reward yield reward\r\n   * @param rewardPerWeight reward/weight (or stake weight)\r\n   * @return stake weight (or reward/weight)\r\n   */\r\n  function rewardToWeight(uint256 reward, uint256 rewardPerWeight) public pure returns (uint256) {\r\n    // apply the reverse formula and return\r\n    return (reward * REWARD_PER_WEIGHT_MULTIPLIER) / rewardPerWeight;\r\n  }\r\n\r\n  /**\r\n   * @dev Testing time-dependent functionality is difficult and the best way of\r\n   *      doing it is to override block number in helper test smart contracts\r\n   *\r\n   * @return `block.number` in mainnet, custom values in testnets (if overridden)\r\n   */\r\n  function blockNumber() public view virtual returns (uint256) {\r\n    // return current block number\r\n    return block.number;\r\n  }\r\n\r\n  /**\r\n   * @dev Testing time-dependent functionality is difficult and the best way of\r\n   *      doing it is to override time in helper test smart contracts\r\n   *\r\n   * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\r\n   */\r\n  function now256() public view virtual returns (uint256) {\r\n    // return current block timestamp\r\n    return block.timestamp;\r\n  }\r\n\r\n  /**\r\n   * @dev Executes EscrowedIlluviumERC20.mint(_to, _values)\r\n   *      on the bound EscrowedIlluviumERC20 instance\r\n   *\r\n   * @dev Reentrancy safe due to the EscrowedIlluviumERC20 design\r\n   */\r\n  function mintSIlv(address _to, uint256 _value) private {\r\n    // just delegate call to the target\r\n    EscrowedIlluviumERC20(silv).mint(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes SafeERC20.safeTransfer on a pool token\r\n   *\r\n   * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\r\n   */\r\n  function transferPoolToken(address _to, uint256 _value) internal nonReentrant {\r\n    // just delegate call to the target\r\n    SafeERC20.safeTransfer(IERC20(poolToken), _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes SafeERC20.safeTransferFrom on a pool token\r\n   *\r\n   * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\r\n   */\r\n  function transferPoolTokenFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) internal nonReentrant {\r\n    // just delegate call to the target\r\n    SafeERC20.safeTransferFrom(IERC20(poolToken), _from, _to, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Illuvium Core Pool\r\n *\r\n * @notice Core pools represent permanent pools like ILV or ILV/ETH Pair pool,\r\n *      core pools allow staking for arbitrary periods of time up to 1 year\r\n *\r\n * @dev See IlluviumPoolBase for more details\r\n *\r\n * @author Pedro Bergamini, reviewed by Basil Gorin\r\n */\r\ncontract IlluviumCorePool is IlluviumPoolBase {\r\n  /// @dev Flag indicating pool type, false means \"core pool\"\r\n  bool public constant override isFlashPool = false;\r\n\r\n  /// @dev Link to deployed IlluviumVault instance\r\n  address public vault;\r\n\r\n  /// @dev Used to calculate vault rewards\r\n  /// @dev This value is different from \"reward per token\" used in locked pool\r\n  /// @dev Note: stakes are different in duration and \"weight\" reflects that\r\n  uint256 public vaultRewardsPerWeight;\r\n\r\n  /// @dev Pool tokens value available in the pool;\r\n  ///      pool token examples are ILV (ILV core pool) or ILV/ETH pair (LP core pool)\r\n  /// @dev For LP core pool this value doesnt' count for ILV tokens received as Vault rewards\r\n  ///      while for ILV core pool it does count for such tokens as well\r\n  uint256 public poolTokenReserve;\r\n\r\n  /**\r\n   * @dev Fired in receiveVaultRewards()\r\n   *\r\n   * @param _by an address that sent the rewards, always a vault\r\n   * @param amount amount of tokens received\r\n   */\r\n  event VaultRewardsReceived(address indexed _by, uint256 amount);\r\n\r\n  /**\r\n   * @dev Fired in _processVaultRewards() and dependent functions, like processRewards()\r\n   *\r\n   * @param _by an address which executed the function\r\n   * @param _to an address which received a reward\r\n   * @param amount amount of reward received\r\n   */\r\n  event VaultRewardsClaimed(address indexed _by, address indexed _to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Fired in setVault()\r\n   *\r\n   * @param _by an address which executed the function, always a factory owner\r\n   */\r\n  event VaultUpdated(address indexed _by, address _fromVal, address _toVal);\r\n\r\n  /**\r\n   * @dev Creates/deploys an instance of the core pool\r\n   *\r\n   * @param _ilv ILV ERC20 Token IlluviumERC20 address\r\n   * @param _silv sILV ERC20 Token EscrowedIlluviumERC20 address\r\n   * @param _factory Pool factory IlluviumPoolFactory instance/address\r\n   * @param _poolToken token the pool operates on, for example ILV or ILV/ETH pair\r\n   * @param _initBlock initial block used to calculate the rewards\r\n   * @param _weight number representing a weight of the pool, actual weight fraction\r\n   *      is calculated as that number divided by the total pools weight and doesn't exceed one\r\n   */\r\n  constructor(\r\n    address _ilv,\r\n    address _silv,\r\n    IlluviumPoolFactory _factory,\r\n    address _poolToken,\r\n    uint64 _initBlock,\r\n    uint32 _weight\r\n  ) IlluviumPoolBase(_ilv, _silv, _factory, _poolToken, _initBlock, _weight) {}\r\n\r\n  /**\r\n   * @notice Calculates current vault rewards value available for address specified\r\n   *\r\n   * @dev Performs calculations based on current smart contract state only,\r\n   *      not taking into account any additional time/blocks which might have passed\r\n   *\r\n   * @param _staker an address to calculate vault rewards value for\r\n   * @return pending calculated vault reward value for the given address\r\n   */\r\n  function pendingVaultRewards(address _staker) public view returns (uint256 pending) {\r\n    User memory user = users[_staker];\r\n\r\n    return weightToReward(user.totalWeight, vaultRewardsPerWeight) - user.subVaultRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Executed only by the factory owner to Set the vault\r\n   *\r\n   * @param _vault an address of deployed IlluviumVault instance\r\n   */\r\n  function setVault(address _vault) external {\r\n    // verify function is executed by the factory owner\r\n    require(factory.owner() == msg.sender, \"access denied\");\r\n\r\n    // verify input is set\r\n    require(_vault != address(0), \"zero input\");\r\n\r\n    // emit an event\r\n    emit VaultUpdated(msg.sender, vault, _vault);\r\n\r\n    // update vault address\r\n    vault = _vault;\r\n  }\r\n\r\n  /**\r\n   * @dev Executed by the vault to transfer vault rewards ILV from the vault\r\n   *      into the pool\r\n   *\r\n   * @dev This function is executed only for ILV core pools\r\n   *\r\n   * @param _rewardsAmount amount of ILV rewards to transfer into the pool\r\n   */\r\n  function receiveVaultRewards(uint256 _rewardsAmount) external {\r\n    require(msg.sender == vault, \"access denied\");\r\n    // return silently if there is no reward to receive\r\n    if (_rewardsAmount == 0) {\r\n      return;\r\n    }\r\n    require(usersLockingWeight > 0, \"zero locking weight\");\r\n\r\n    transferIlvFrom(msg.sender, address(this), _rewardsAmount);\r\n\r\n    vaultRewardsPerWeight += rewardToWeight(_rewardsAmount, usersLockingWeight);\r\n\r\n    // update `poolTokenReserve` only if this is a ILV Core Pool\r\n    if (poolToken == ilv) {\r\n      poolTokenReserve += _rewardsAmount;\r\n    }\r\n\r\n    emit VaultRewardsReceived(msg.sender, _rewardsAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Service function to calculate and pay pending vault and yield rewards to the sender\r\n   *\r\n   * @dev Internally executes similar function `_processRewards` from the parent smart contract\r\n   *      to calculate and pay yield rewards; adds vault rewards processing\r\n   *\r\n   * @dev Can be executed by anyone at any time, but has an effect only when\r\n   *      executed by deposit holder and when at least one block passes from the\r\n   *      previous reward processing\r\n   * @dev Executed internally when \"staking as a pool\" (`stakeAsPool`)\r\n   * @dev When timing conditions are not met (executed too frequently, or after factory\r\n   *      end block), function doesn't throw and exits silently\r\n   *\r\n   * @dev _useSILV flag has a context of yield rewards only\r\n   *\r\n   * @param _useSILV flag indicating whether to mint sILV token as a reward or not;\r\n   *      when set to true - sILV reward is minted immediately and sent to sender,\r\n   *      when set to false - new ILV reward deposit gets created if pool is an ILV pool\r\n   *      (poolToken is ILV token), or new pool deposit gets created together with sILV minted\r\n   *      when pool is not an ILV pool (poolToken is not an ILV token)\r\n   */\r\n  function processRewards(bool _useSILV) external override {\r\n    _processRewards(msg.sender, _useSILV, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed internally by the pool itself (from the parent `IlluviumPoolBase` smart contract)\r\n   *      as part of yield rewards processing logic (`IlluviumPoolBase._processRewards` function)\r\n   * @dev Executed when _useSILV is false and pool is not an ILV pool - see `IlluviumPoolBase._processRewards`\r\n   *\r\n   * @param _staker an address which stakes (the yield reward)\r\n   * @param _amount amount to be staked (yield reward amount)\r\n   */\r\n  function stakeAsPool(address _staker, uint256 _amount) external {\r\n    require(factory.poolExists(msg.sender), \"access denied\");\r\n    _sync();\r\n    User storage user = users[_staker];\r\n    if (user.tokenAmount > 0) {\r\n      _processRewards(_staker, true, false);\r\n    }\r\n    uint256 depositWeight = _amount * YEAR_STAKE_WEIGHT_MULTIPLIER;\r\n    Deposit memory newDeposit =\r\n    Deposit({\r\n    tokenAmount: _amount,\r\n    lockedFrom: uint64(now256()),\r\n    lockedUntil: uint64(now256() + 365 days),\r\n    weight: depositWeight,\r\n    isYield: true\r\n    });\r\n    user.tokenAmount += _amount;\r\n    user.totalWeight += depositWeight;\r\n    user.deposits.push(newDeposit);\r\n\r\n    usersLockingWeight += depositWeight;\r\n\r\n    user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\r\n    user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\r\n\r\n    // update `poolTokenReserve` only if this is a LP Core Pool (stakeAsPool can be executed only for LP pool)\r\n    poolTokenReserve += _amount;\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc IlluviumPoolBase\r\n   *\r\n   * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\r\n   *      and updates (increases) pool token reserve (pool tokens value available in the pool)\r\n   */\r\n  function _stake(\r\n    address _staker,\r\n    uint256 _amount,\r\n    uint64 _lockedUntil,\r\n    bool _useSILV,\r\n    bool _isYield\r\n  ) internal override {\r\n    super._stake(_staker, _amount, _lockedUntil, _useSILV, _isYield);\r\n    User storage user = users[_staker];\r\n    user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\r\n\r\n    poolTokenReserve += _amount;\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc IlluviumPoolBase\r\n   *\r\n   * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\r\n   *      and updates (decreases) pool token reserve (pool tokens value available in the pool)\r\n   */\r\n  function _unstake(\r\n    address _staker,\r\n    uint256 _depositId,\r\n    uint256 _amount,\r\n    bool _useSILV\r\n  ) internal override {\r\n    User storage user = users[_staker];\r\n    Deposit memory stakeDeposit = user.deposits[_depositId];\r\n    require(stakeDeposit.lockedFrom == 0 || now256() > stakeDeposit.lockedUntil, \"deposit not yet unlocked\");\r\n    poolTokenReserve -= _amount;\r\n    super._unstake(_staker, _depositId, _amount, _useSILV);\r\n    user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc IlluviumPoolBase\r\n   *\r\n   * @dev Additionally to the parent smart contract, processes vault rewards of the holder,\r\n   *      and for ILV pool updates (increases) pool token reserve (pool tokens value available in the pool)\r\n   */\r\n  function _processRewards(\r\n    address _staker,\r\n    bool _useSILV,\r\n    bool _withUpdate\r\n  ) internal override returns (uint256 pendingYield) {\r\n    _processVaultRewards(_staker);\r\n    pendingYield = super._processRewards(_staker, _useSILV, _withUpdate);\r\n\r\n    // update `poolTokenReserve` only if this is a ILV Core Pool\r\n    if (poolToken == ilv && !_useSILV) {\r\n      poolTokenReserve += pendingYield;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally to process vault rewards for the staker\r\n   *\r\n   * @param _staker address of the user (staker) to process rewards for\r\n   */\r\n  function _processVaultRewards(address _staker) private {\r\n    User storage user = users[_staker];\r\n    uint256 pendingVaultClaim = pendingVaultRewards(_staker);\r\n    if (pendingVaultClaim == 0) return;\r\n    // read ILV token balance of the pool via standard ERC20 interface\r\n    uint256 ilvBalance = IERC20(ilv).balanceOf(address(this));\r\n    require(ilvBalance >= pendingVaultClaim, \"contract ILV balance too low\");\r\n\r\n    // update `poolTokenReserve` only if this is a ILV Core Pool\r\n    if (poolToken == ilv) {\r\n      // protects against rounding errors\r\n      poolTokenReserve -= pendingVaultClaim > poolTokenReserve ? poolTokenReserve : pendingVaultClaim;\r\n    }\r\n\r\n    user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\r\n\r\n    // transfer fails if pool ILV balance is not enough - which is a desired behavior\r\n    transferIlv(_staker, pendingVaultClaim);\r\n\r\n    emit VaultRewardsClaimed(msg.sender, _staker, pendingVaultClaim);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Illuvium Pool Factory\r\n *\r\n * @notice ILV Pool Factory manages Illuvium Yield farming pools, provides a single\r\n *      public interface to access the pools, provides an interface for the pools\r\n *      to mint yield rewards, access pool-related info, update weights, etc.\r\n *\r\n * @notice The factory is authorized (via its owner) to register new pools, change weights\r\n *      of the existing pools, removing the pools (by changing their weights to zero)\r\n *\r\n * @dev The factory requires ROLE_TOKEN_CREATOR permission on the ILV token to mint yield\r\n *      (see `mintYieldTo` function)\r\n *\r\n * @author Pedro Bergamini, reviewed by Basil Gorin\r\n */\r\ncontract IlluviumPoolFactory is Ownable, IlluviumAware {\r\n  /**\r\n   * @dev Smart contract unique identifier, a random number\r\n   * @dev Should be regenerated each time smart contact source code is changed\r\n   *      and changes smart contract itself is to be redeployed\r\n   * @dev Generated using https://www.random.org/bytes/\r\n   */\r\n  uint256 public constant FACTORY_UID = 0xc5cfd88c6e4d7e5c8a03c255f03af23c0918d8e82cac196f57466af3fd4a5ec7;\r\n\r\n  /// @dev Auxiliary data structure used only in getPoolData() view function\r\n  struct PoolData {\r\n    // @dev pool token address (like ILV)\r\n    address poolToken;\r\n    // @dev pool address (like deployed core pool instance)\r\n    address poolAddress;\r\n    // @dev pool weight (200 for ILV pools, 800 for ILV/ETH pools - set during deployment)\r\n    uint32 weight;\r\n    // @dev flash pool flag\r\n    bool isFlashPool;\r\n  }\r\n\r\n  /**\r\n   * @dev ILV/block determines yield farming reward base\r\n   *      used by the yield pools controlled by the factory\r\n   */\r\n  uint192 public ilvPerBlock;\r\n\r\n  /**\r\n   * @dev The yield is distributed proportionally to pool weights;\r\n   *      total weight is here to help in determining the proportion\r\n   */\r\n  uint32 public totalWeight;\r\n\r\n  /**\r\n   * @dev ILV/block decreases by 3% every blocks/update (set to 91252 blocks during deployment);\r\n   *      an update is triggered by executing `updateILVPerBlock` public function\r\n   */\r\n  uint32 public immutable blocksPerUpdate;\r\n\r\n  /**\r\n   * @dev End block is the last block when ILV/block can be decreased;\r\n   *      it is implied that yield farming stops after that block\r\n   */\r\n  uint32 public endBlock;\r\n\r\n  /**\r\n   * @dev Each time the ILV/block ratio gets updated, the block number\r\n   *      when the operation has occurred gets recorded into `lastRatioUpdate`\r\n   * @dev This block number is then used to check if blocks/update `blocksPerUpdate`\r\n   *      has passed when decreasing yield reward by 3%\r\n   */\r\n  uint32 public lastRatioUpdate;\r\n\r\n  /// @dev sILV token address is used to create ILV core pool(s)\r\n  address public immutable silv;\r\n\r\n  /// @dev Maps pool token address (like ILV) -> pool address (like core pool instance)\r\n  mapping(address => address) public pools;\r\n\r\n  /// @dev Keeps track of registered pool addresses, maps pool address -> exists flag\r\n  mapping(address => bool) public poolExists;\r\n\r\n  /**\r\n   * @dev Fired in createPool() and registerPool()\r\n   *\r\n   * @param _by an address which executed an action\r\n   * @param poolToken pool token address (like ILV)\r\n   * @param poolAddress deployed pool instance address\r\n   * @param weight pool weight\r\n   * @param isFlashPool flag indicating if pool is a flash pool\r\n   */\r\n  event PoolRegistered(\r\n    address indexed _by,\r\n    address indexed poolToken,\r\n    address indexed poolAddress,\r\n    uint64 weight,\r\n    bool isFlashPool\r\n  );\r\n\r\n  /**\r\n   * @dev Fired in changePoolWeight()\r\n   *\r\n   * @param _by an address which executed an action\r\n   * @param poolAddress deployed pool instance address\r\n   * @param weight new pool weight\r\n   */\r\n  event WeightUpdated(address indexed _by, address indexed poolAddress, uint32 weight);\r\n\r\n  /**\r\n   * @dev Fired in updateILVPerBlock()\r\n   *\r\n   * @param _by an address which executed an action\r\n   * @param newIlvPerBlock new ILV/block value\r\n   */\r\n  event IlvRatioUpdated(address indexed _by, uint256 newIlvPerBlock);\r\n\r\n  /**\r\n   * @dev Creates/deploys a factory instance\r\n   *\r\n   * @param _ilv ILV ERC20 token address\r\n   * @param _silv sILV ERC20 token address\r\n   * @param _ilvPerBlock initial ILV/block value for rewards\r\n   * @param _blocksPerUpdate how frequently the rewards gets updated (decreased by 3%), blocks\r\n   * @param _initBlock block number to measure _blocksPerUpdate from\r\n   * @param _endBlock block number when farming stops and rewards cannot be updated anymore\r\n   */\r\n  constructor(\r\n    address _ilv,\r\n    address _silv,\r\n    uint192 _ilvPerBlock,\r\n    uint32 _blocksPerUpdate,\r\n    uint32 _initBlock,\r\n    uint32 _endBlock\r\n  ) IlluviumAware(_ilv) {\r\n    // verify the inputs are set\r\n    require(_silv != address(0), \"sILV address not set\");\r\n    require(_ilvPerBlock > 0, \"ILV/block not set\");\r\n    require(_blocksPerUpdate > 0, \"blocks/update not set\");\r\n    require(_initBlock > 0, \"init block not set\");\r\n    require(_endBlock > _initBlock, \"invalid end block: must be greater than init block\");\r\n\r\n    // verify sILV instance supplied\r\n    require(\r\n      EscrowedIlluviumERC20(_silv).TOKEN_UID() ==\r\n      0xac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62,\r\n      \"unexpected sILV TOKEN_UID\"\r\n    );\r\n\r\n    // save the inputs into internal state variables\r\n    silv = _silv;\r\n    ilvPerBlock = _ilvPerBlock;\r\n    blocksPerUpdate = _blocksPerUpdate;\r\n    lastRatioUpdate = _initBlock;\r\n    endBlock = _endBlock;\r\n  }\r\n\r\n  /**\r\n   * @notice Given a pool token retrieves corresponding pool address\r\n   *\r\n   * @dev A shortcut for `pools` mapping\r\n   *\r\n   * @param poolToken pool token address (like ILV) to query pool address for\r\n   * @return pool address for the token specified\r\n   */\r\n  function getPoolAddress(address poolToken) external view returns (address) {\r\n    // read the mapping and return\r\n    return pools[poolToken];\r\n  }\r\n\r\n  /**\r\n   * @notice Reads pool information for the pool defined by its pool token address,\r\n   *      designed to simplify integration with the front ends\r\n   *\r\n   * @param _poolToken pool token address to query pool information for\r\n   * @return pool information packed in a PoolData struct\r\n   */\r\n  function getPoolData(address _poolToken) public view returns (PoolData memory) {\r\n    // get the pool address from the mapping\r\n    address poolAddr = pools[_poolToken];\r\n\r\n    // throw if there is no pool registered for the token specified\r\n    require(poolAddr != address(0), \"pool not found\");\r\n\r\n    // read pool information from the pool smart contract\r\n    // via the pool interface (IPool)\r\n    address poolToken = IPool(poolAddr).poolToken();\r\n    bool isFlashPool = IPool(poolAddr).isFlashPool();\r\n    uint32 weight = IPool(poolAddr).weight();\r\n\r\n    // create the in-memory structure and return it\r\n    return PoolData({ poolToken: poolToken, poolAddress: poolAddr, weight: weight, isFlashPool: isFlashPool });\r\n  }\r\n\r\n  /**\r\n   * @dev Verifies if `blocksPerUpdate` has passed since last ILV/block\r\n   *      ratio update and if ILV/block reward can be decreased by 3%\r\n   *\r\n   * @return true if enough time has passed and `updateILVPerBlock` can be executed\r\n   */\r\n  function shouldUpdateRatio() public view returns (bool) {\r\n    // if yield farming period has ended\r\n    if (blockNumber() > endBlock) {\r\n      // ILV/block reward cannot be updated anymore\r\n      return false;\r\n    }\r\n\r\n    // check if blocks/update (91252 blocks) have passed since last update\r\n    return blockNumber() >= lastRatioUpdate + blocksPerUpdate;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a core pool (IlluviumCorePool) and registers it within the factory\r\n   *\r\n   * @dev Can be executed by the pool factory owner only\r\n   *\r\n   * @param poolToken pool token address (like ILV, or ILV/ETH pair)\r\n   * @param initBlock init block to be used for the pool created\r\n   * @param weight weight of the pool to be created\r\n   */\r\n  function createPool(\r\n    address poolToken,\r\n    uint64 initBlock,\r\n    uint32 weight\r\n  ) external virtual onlyOwner {\r\n    // create/deploy new core pool instance\r\n    IPool pool = new IlluviumCorePool(ilv, silv, this, poolToken, initBlock, weight);\r\n\r\n    // register it within a factory\r\n    registerPool(address(pool));\r\n  }\r\n\r\n  /**\r\n   * @dev Registers an already deployed pool instance within the factory\r\n   *\r\n   * @dev Can be executed by the pool factory owner only\r\n   *\r\n   * @param poolAddr address of the already deployed pool instance\r\n   */\r\n  function registerPool(address poolAddr) public onlyOwner {\r\n    // read pool information from the pool smart contract\r\n    // via the pool interface (IPool)\r\n    address poolToken = IPool(poolAddr).poolToken();\r\n    bool isFlashPool = IPool(poolAddr).isFlashPool();\r\n    uint32 weight = IPool(poolAddr).weight();\r\n\r\n    // ensure that the pool is not already registered within the factory\r\n    require(pools[poolToken] == address(0), \"this pool is already registered\");\r\n\r\n    // create pool structure, register it within the factory\r\n    pools[poolToken] = poolAddr;\r\n    poolExists[poolAddr] = true;\r\n    // update total pool weight of the factory\r\n    totalWeight += weight;\r\n\r\n    // emit an event\r\n    emit PoolRegistered(msg.sender, poolToken, poolAddr, weight, isFlashPool);\r\n  }\r\n\r\n  /**\r\n   * @notice Decreases ILV/block reward by 3%, can be executed\r\n   *      no more than once per `blocksPerUpdate` blocks\r\n   */\r\n  function updateILVPerBlock() external {\r\n    // checks if ratio can be updated i.e. if blocks/update (91252 blocks) have passed\r\n    require(shouldUpdateRatio(), \"too frequent\");\r\n\r\n    // decreases ILV/block reward by 3%\r\n    ilvPerBlock = (ilvPerBlock * 97) / 100;\r\n\r\n    // set current block as the last ratio update block\r\n    lastRatioUpdate = uint32(blockNumber());\r\n\r\n    // emit an event\r\n    emit IlvRatioUpdated(msg.sender, ilvPerBlock);\r\n  }\r\n\r\n  /**\r\n   * @dev Mints ILV tokens; executed by ILV Pool only\r\n   *\r\n   * @dev Requires factory to have ROLE_TOKEN_CREATOR permission\r\n   *      on the ILV ERC20 token instance\r\n   *\r\n   * @param _to an address to mint tokens to\r\n   * @param _amount amount of ILV tokens to mint\r\n   */\r\n  function mintYieldTo(address _to, uint256 _amount) external {\r\n    // verify that sender is a pool registered withing the factory\r\n    require(poolExists[msg.sender], \"access denied\");\r\n\r\n    // mint ILV tokens as required\r\n    mintIlv(_to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the weight of the pool;\r\n   *      executed by the pool itself or by the factory owner\r\n   *\r\n   * @param poolAddr address of the pool to change weight for\r\n   * @param weight new weight value to set to\r\n   */\r\n  function changePoolWeight(address poolAddr, uint32 weight) external {\r\n    // verify function is executed either by factory owner or by the pool itself\r\n    require(msg.sender == owner() || poolExists[msg.sender]);\r\n\r\n    // recalculate total weight\r\n    totalWeight = totalWeight + weight - IPool(poolAddr).weight();\r\n\r\n    // set the new pool weight\r\n    IPool(poolAddr).setWeight(weight);\r\n\r\n    // emit an event\r\n    emit WeightUpdated(msg.sender, poolAddr, weight);\r\n  }\r\n\r\n  /**\r\n   * @dev Testing time-dependent functionality is difficult and the best way of\r\n   *      doing it is to override block number in helper test smart contracts\r\n   *\r\n   * @return `block.number` in mainnet, custom values in testnets (if overridden)\r\n   */\r\n  function blockNumber() public view virtual returns (uint256) {\r\n    // return current block number\r\n    return block.number;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain`call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  /**\r\n   * @dev Deprecated. This function has issues similar to the ones found in\r\n   * {IERC20-approve}, and its usage is discouraged.\r\n   *\r\n   * Whenever possible, use {safeIncreaseAllowance} and\r\n   * {safeDecreaseAllowance} instead.\r\n   */\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    // safeApprove should only be called when setting an initial allowance,\r\n    // or when resetting it to zero. To increase and decrease it, use\r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    // solhint-disable-next-line max-line-length\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n    );\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender) - value;\r\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n\r\n// Copied from Open Zeppelin\r\n\r\ncontract ERC20 is IERC20 {\r\n  mapping(address => uint256) private _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  /**\r\n   * @notice Token creator is responsible for creating (minting)\r\n   *      tokens to an arbitrary address\r\n   * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\r\n   *      (calling `mint` function)\r\n   */\r\n  uint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\r\n\r\n  /**\r\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n   * a default value of 18.\r\n   *\r\n   * To select a different value for {decimals}, use {_setupDecimals}.\r\n   *\r\n   * All three of these values are immutable: they can only be set once during\r\n   * construction.\r\n   */\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _decimals = 18;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view virtual returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view virtual returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n   * called.\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public view virtual returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``sender``'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    _balances[sender] = _balances[sender] - amount;\r\n    _balances[recipient] = _balances[recipient] + amount;\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply = _totalSupply + amount;\r\n    _balances[account] = _balances[account] + amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    _balances[account] = _balances[account] - amount;\r\n    _totalSupply = _totalSupply - amount;\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets {decimals} to a value other than the default one of 18.\r\n   *\r\n   * WARNING: This function should only be called from the constructor. Most\r\n   * applications that interact with token contracts will not expect\r\n   * {decimals} to ever change, and may work incorrectly if it does.\r\n   */\r\n  function _setupDecimals(uint8 decimals_) internal virtual {\r\n    _decimals = decimals_;\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be to transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n}\r\n\r\ncontract EscrowedIlluviumERC20 is ERC20(\"Escrowed Illuvium\", \"sILV\"), AccessControl {\r\n  /**\r\n   * @dev Smart contract unique identifier, a random number\r\n   * @dev Should be regenerated each time smart contact source code is changed\r\n   *      and changes smart contract itself is to be redeployed\r\n   * @dev Generated using https://www.random.org/bytes/\r\n   */\r\n  uint256 public constant TOKEN_UID = 0xac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62;\r\n\r\n  /**\r\n   * @notice Must be called by ROLE_TOKEN_CREATOR addresses.\r\n   *\r\n   * @param recipient address to receive the tokens.\r\n   * @param amount number of tokens to be minted.\r\n   */\r\n  function mint(address recipient, uint256 amount) external {\r\n    require(isSenderInRole(ROLE_TOKEN_CREATOR), \"insufficient privileges (ROLE_TOKEN_CREATOR required)\");\r\n    _mint(recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @param amount number of tokens to be burned.\r\n   */\r\n  function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Flash Pool Base\r\n *\r\n * @notice An abstract contract containing logic for a new Flash Pool version.\r\n *         It fixes the REWARD_PER_WEIGHT_MULTIPLIER constant to allow bigger supply\r\n *         tokens flash pools.\r\n *\r\n * @dev Deployment and initialization.\r\n *      Any pool deployed must be bound to the deployed pool factory (IlluviumPoolFactory)\r\n *      Additionally, 3 token instance addresses must be defined on deployment:\r\n *          - ILV token address\r\n *          - sILV token address, used to mint sILV rewards\r\n *          - pool token address, it can be ILV token address, ILV/ETH pair address, and others\r\n *\r\n * @dev Pool weight defines the fraction of the yield current pool receives among the other pools,\r\n *      pool factory is responsible for the weight synchronization between the pools.\r\n * @dev The weight is logically 10% for ILV pool and 90% for ILV/ETH pool.\r\n *      Since Solidity doesn't support fractions the weight is defined by the division of\r\n *      pool weight by total pools weight (sum of all registered pools within the factory)\r\n * @dev For ILV Pool we use 200 as weight and for ILV/ETH pool 800.\r\n *\r\n * @author Pedro Bergamini, reviewed by Basil Gorin\r\n */\r\nabstract contract FlashPoolBase is IPool, IlluviumAware, ReentrancyGuard {\r\n  /// @dev Data structure representing token holder using a pool\r\n  struct User {\r\n    // @dev Total staked amount\r\n    uint256 tokenAmount;\r\n    // @dev Total weight\r\n    uint256 totalWeight;\r\n    // @dev Auxiliary variable for yield calculation\r\n    uint256 subYieldRewards;\r\n    // @dev Auxiliary variable for vault rewards calculation\r\n    uint256 subVaultRewards;\r\n    // @dev An array of holder's deposits\r\n    Deposit[] deposits;\r\n  }\r\n\r\n  /// @dev Token holder storage, maps token holder address to their data record\r\n  mapping(address => User) public users;\r\n\r\n  /// @dev Link to sILV ERC20 Token EscrowedIlluviumERC20 instance\r\n  address public immutable override silv;\r\n\r\n  /// @dev Link to the pool factory IlluviumPoolFactory instance\r\n  IlluviumPoolFactory public immutable factory;\r\n\r\n  /// @dev Link to the internal token instance, for example SNX or XYZ\r\n  address public immutable internalToken;\r\n\r\n  /// @dev Pool weight, 100 for ILV pool or 900 for ILV/ETH\r\n  uint32 public override weight;\r\n\r\n  /// @dev Block number of the last yield distribution event\r\n  uint64 public override lastYieldDistribution;\r\n\r\n  /// @dev Used to calculate yield rewards\r\n  /// @dev This value is different from \"reward per token\" used in locked pool\r\n  /// @dev Note: stakes are different in duration and \"weight\" reflects that\r\n  uint256 public override yieldRewardsPerWeight;\r\n\r\n  /// @dev Used to calculate yield rewards, keeps track of the tokens weight locked in staking\r\n  uint256 public override usersLockingWeight;\r\n\r\n  /**\r\n   * @dev Stake weight is proportional to deposit amount and time locked, precisely\r\n   *      \"deposit amount wei multiplied by (fraction of the year locked plus one)\"\r\n   * @dev To avoid significant precision loss due to multiplication by \"fraction of the year\" [0, 1],\r\n   *      weight is stored multiplied by 1e6 constant, as an integer\r\n   * @dev Corner case 1: if time locked is zero, weight is deposit amount multiplied by 1e6\r\n   * @dev Corner case 2: if time locked is one year, fraction of the year locked is one, and\r\n   *      weight is a deposit amount multiplied by 2 * 1e6\r\n   */\r\n  uint256 internal constant WEIGHT_MULTIPLIER = 1e6;\r\n\r\n  /**\r\n   * @dev When we know beforehand that staking is done for a year, and fraction of the year locked is one,\r\n   *      we use simplified calculation and use the following constant instead previos one\r\n   */\r\n  uint256 internal constant YEAR_STAKE_WEIGHT_MULTIPLIER = 2 * WEIGHT_MULTIPLIER;\r\n\r\n  /**\r\n   * @dev Rewards per weight are stored multiplied by 1e12, as integers.\r\n   */\r\n  uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e18;\r\n\r\n  /**\r\n   * @dev Fired in _stake() and stake()\r\n   *\r\n   * @param _by an address which performed an operation, usually token holder\r\n   * @param _from token holder address, the tokens will be returned to that address\r\n   * @param amount amount of tokens staked\r\n   */\r\n  event Staked(address indexed _by, address indexed _from, uint256 amount);\r\n\r\n  /**\r\n   * @dev Fired in _updateStakeLock() and updateStakeLock()\r\n   *\r\n   * @param _by an address which performed an operation\r\n   * @param depositId updated deposit ID\r\n   * @param lockedFrom deposit locked from value\r\n   * @param lockedUntil updated deposit locked until value\r\n   */\r\n  event StakeLockUpdated(address indexed _by, uint256 depositId, uint64 lockedFrom, uint64 lockedUntil);\r\n\r\n  /**\r\n   * @dev Fired in _unstake() and unstake()\r\n   *\r\n   * @param _by an address which performed an operation, usually token holder\r\n   * @param _to an address which received the unstaked tokens, usually token holder\r\n   * @param amount amount of tokens unstaked\r\n   */\r\n  event Unstaked(address indexed _by, address indexed _to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Fired in _sync(), sync() and dependent functions (stake, unstake, etc.)\r\n   *\r\n   * @param _by an address which performed an operation\r\n   * @param yieldRewardsPerWeight updated yield rewards per weight value\r\n   * @param lastYieldDistribution usually, current block number\r\n   */\r\n  event Synchronized(address indexed _by, uint256 yieldRewardsPerWeight, uint64 lastYieldDistribution);\r\n\r\n  /**\r\n   * @dev Fired in _processRewards(), processRewards() and dependent functions (stake, unstake, etc.)\r\n   *\r\n   * @param _by an address which performed an operation\r\n   * @param _to an address which claimed the yield reward\r\n   * @param sIlv flag indicating if reward was paid (minted) in sILV\r\n   * @param amount amount of yield paid\r\n   */\r\n  event YieldClaimed(address indexed _by, address indexed _to, bool sIlv, uint256 amount);\r\n\r\n  /**\r\n   * @dev Fired in setWeight()\r\n   *\r\n   * @param _by an address which performed an operation, always a factory\r\n   * @param _fromVal old pool weight value\r\n   * @param _toVal new pool weight value\r\n   */\r\n  event PoolWeightUpdated(address indexed _by, uint32 _fromVal, uint32 _toVal);\r\n\r\n  /**\r\n   * @dev Overridden in sub-contracts to construct the pool\r\n   *\r\n   * @param _ilv ILV ERC20 Token IlluviumERC20 address\r\n   * @param _silv sILV ERC20 Token EscrowedIlluviumERC20 address\r\n   * @param _factory Pool factory IlluviumPoolFactory instance/address\r\n   * @param _internalToken token the pool operates on\r\n   * @param _initBlock initial block used to calculate the rewards\r\n   *      note: _initBlock can be set to the future effectively meaning _sync() calls will do nothing\r\n   * @param _weight number representing a weight of the pool, actual weight fraction\r\n   *      is calculated as that number divided by the total pools weight and doesn't exceed one\r\n   */\r\n  constructor(\r\n    address _ilv,\r\n    address _silv,\r\n    IlluviumPoolFactory _factory,\r\n    address _internalToken,\r\n    uint64 _initBlock,\r\n    uint32 _weight\r\n  ) IlluviumAware(_ilv) {\r\n    // verify the inputs are set\r\n    require(_silv != address(0), \"sILV address not set\");\r\n    require(address(_factory) != address(0), \"ILV Pool fct address not set\");\r\n    require(_internalToken != address(0), \"token address not set\");\r\n    require(_initBlock > 0, \"init block not set\");\r\n    require(_weight > 0, \"pool weight not set\");\r\n\r\n    // verify sILV instance supplied\r\n    require(\r\n      EscrowedIlluviumERC20(_silv).TOKEN_UID() ==\r\n      0xac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62,\r\n      \"unexpected sILV TOKEN_UID\"\r\n    );\r\n    // verify IlluviumPoolFactory instance supplied\r\n    require(\r\n      _factory.FACTORY_UID() == 0xc5cfd88c6e4d7e5c8a03c255f03af23c0918d8e82cac196f57466af3fd4a5ec7,\r\n      \"unexpected FACTORY_UID\"\r\n    );\r\n\r\n    // save the inputs into internal state variables\r\n    silv = _silv;\r\n    factory = _factory;\r\n    internalToken = _internalToken;\r\n    weight = _weight;\r\n\r\n    // init the dependent internal state variables\r\n    lastYieldDistribution = _initBlock;\r\n  }\r\n\r\n  /**\r\n   * @dev Faked link to the pool token instance\r\n   */\r\n  function poolToken() external view override returns(address) {\r\n    return address(this);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates current yield rewards value available for address specified\r\n   *\r\n   * @param _staker an address to calculate yield rewards value for\r\n   * @return calculated yield reward value for the given address\r\n   */\r\n  function pendingYieldRewards(address _staker) external view override returns (uint256) {\r\n    // `newYieldRewardsPerWeight` will store stored or recalculated value for `yieldRewardsPerWeight`\r\n    uint256 newYieldRewardsPerWeight;\r\n\r\n    // if smart contract state was not updated recently, `yieldRewardsPerWeight` value\r\n    // is outdated and we need to recalculate it in order to calculate pending rewards correctly\r\n    if (blockNumber() > lastYieldDistribution && usersLockingWeight != 0) {\r\n      uint256 endBlock = factory.endBlock();\r\n      uint256 multiplier =\r\n      blockNumber() > endBlock ? endBlock - lastYieldDistribution : blockNumber() - lastYieldDistribution;\r\n      uint256 ilvRewards = (multiplier * weight * factory.ilvPerBlock()) / factory.totalWeight();\r\n\r\n      // recalculated value for `yieldRewardsPerWeight`\r\n      newYieldRewardsPerWeight = rewardToWeight(ilvRewards, usersLockingWeight) + yieldRewardsPerWeight;\r\n    } else {\r\n      // if smart contract state is up to date, we don't recalculate\r\n      newYieldRewardsPerWeight = yieldRewardsPerWeight;\r\n    }\r\n\r\n    // based on the rewards per weight value, calculate pending rewards;\r\n    User memory user = users[_staker];\r\n    uint256 pending = weightToReward(user.totalWeight, newYieldRewardsPerWeight) - user.subYieldRewards;\r\n\r\n    return pending;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns total staked token balance for the given address\r\n   *\r\n   * @param _user an address to query balance for\r\n   * @return total staked token balance\r\n   */\r\n  function balanceOf(address _user) external view override returns (uint256) {\r\n    // read specified user token amount and return\r\n    return users[_user].tokenAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns information on the given deposit for the given address\r\n   *\r\n   * @dev See getDepositsLength\r\n   *\r\n   * @param _user an address to query deposit for\r\n   * @param _depositId zero-indexed deposit ID for the address specified\r\n   * @return deposit info as Deposit structure\r\n   */\r\n  function getDeposit(address _user, uint256 _depositId) external view override returns (Deposit memory) {\r\n    // read deposit at specified index and return\r\n    return users[_user].deposits[_depositId];\r\n  }\r\n\r\n  /**\r\n   * @notice Returns number of deposits for the given address. Allows iteration over deposits.\r\n   *\r\n   * @dev See getDeposit\r\n   *\r\n   * @param _user an address to query deposit length for\r\n   * @return number of deposits for the given address\r\n   */\r\n  function getDepositsLength(address _user) external view override returns (uint256) {\r\n    // read deposits array length and return\r\n    return users[_user].deposits.length;\r\n  }\r\n\r\n  /**\r\n   * @notice Stakes specified amount of tokens for the specified amount of time,\r\n   *      and pays pending yield rewards if any\r\n   *\r\n   * @dev Requires amount to stake to be greater than zero\r\n   *\r\n   * @param _amount amount of tokens to stake\r\n   * @param _lockUntil stake period as unix timestamp; zero means no locking\r\n   * @param _useSILV a flag indicating if previous reward to be paid as sILV\r\n   */\r\n  function stake(\r\n    uint256 _amount,\r\n    uint64 _lockUntil,\r\n    bool _useSILV\r\n  ) external override {\r\n    // delegate call to an internal function\r\n    _stake(msg.sender, _amount, _lockUntil, _useSILV, false);\r\n  }\r\n\r\n  /**\r\n   * @notice Unstakes specified amount of tokens, and pays pending yield rewards if any\r\n   *\r\n   * @dev Requires amount to unstake to be greater than zero\r\n   *\r\n   * @param _depositId deposit ID to unstake from, zero-indexed\r\n   * @param _amount amount of tokens to unstake\r\n   * @param _useSILV a flag indicating if reward to be paid as sILV\r\n   */\r\n  function unstake(\r\n    uint256 _depositId,\r\n    uint256 _amount,\r\n    bool _useSILV\r\n  ) external override {\r\n    // delegate call to an internal function\r\n    _unstake(msg.sender, _depositId, _amount, _useSILV);\r\n  }\r\n\r\n  /**\r\n   * @notice Extends locking period for a given deposit\r\n   *\r\n   * @dev Requires new lockedUntil value to be:\r\n   *      higher than the current one, and\r\n   *      in the future, but\r\n   *      no more than 1 year in the future\r\n   *\r\n   * @param depositId updated deposit ID\r\n   * @param lockedUntil updated deposit locked until value\r\n   * @param useSILV used for _processRewards check if it should use ILV or sILV\r\n   */\r\n  function updateStakeLock(\r\n    uint256 depositId,\r\n    uint64 lockedUntil,\r\n    bool useSILV\r\n  ) external {\r\n    // sync and call processRewards\r\n    _sync();\r\n    _processRewards(msg.sender, useSILV, false);\r\n    // delegate call to an internal function\r\n    _updateStakeLock(msg.sender, depositId, lockedUntil);\r\n  }\r\n\r\n  /**\r\n   * @notice Service function to synchronize pool state with current time\r\n   *\r\n   * @dev Can be executed by anyone at any time, but has an effect only when\r\n   *      at least one block passes between synchronizations\r\n   * @dev Executed internally when staking, unstaking, processing rewards in order\r\n   *      for calculations to be correct and to reflect state progress of the contract\r\n   * @dev When timing conditions are not met (executed too frequently, or after factory\r\n   *      end block), function doesn't throw and exits silently\r\n   */\r\n  function sync() external override {\r\n    // delegate call to an internal function\r\n    _sync();\r\n  }\r\n\r\n  /**\r\n   * @notice Service function to calculate and pay pending yield rewards to the sender\r\n   *\r\n   * @dev Can be executed by anyone at any time, but has an effect only when\r\n   *      executed by deposit holder and when at least one block passes from the\r\n   *      previous reward processing\r\n   * @dev Executed internally when staking and unstaking, executes sync() under the hood\r\n   *      before making further calculations and payouts\r\n   * @dev When timing conditions are not met (executed too frequently, or after factory\r\n   *      end block), function doesn't throw and exits silently\r\n   *\r\n   * @param _useSILV flag indicating whether to mint sILV token as a reward or not;\r\n   *      when set to true - sILV reward is minted immediately and sent to sender,\r\n   *      when set to false - new pool deposit gets created together with sILV minted\r\n   */\r\n  function processRewards(bool _useSILV) external virtual override {\r\n    // delegate call to an internal function\r\n    _processRewards(msg.sender, _useSILV, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed by the factory to modify pool weight; the factory is expected\r\n   *      to keep track of the total pools weight when updating\r\n   *\r\n   * @dev Set weight to zero to disable the pool\r\n   *\r\n   * @param _weight new weight to set for the pool\r\n   */\r\n  function setWeight(uint32 _weight) external override {\r\n    // verify function is executed by the factory\r\n    require(msg.sender == address(factory), \"access denied\");\r\n\r\n    // emit an event logging old and new weight values\r\n    emit PoolWeightUpdated(msg.sender, weight, _weight);\r\n\r\n    // set the new weight value\r\n    weight = _weight;\r\n  }\r\n\r\n  /**\r\n   * @dev Similar to public pendingYieldRewards, but performs calculations based on\r\n   *      current smart contract state only, not taking into account any additional\r\n   *      time/blocks which might have passed\r\n   *\r\n   * @param _staker an address to calculate yield rewards value for\r\n   * @return pending calculated yield reward value for the given address\r\n   */\r\n  function _pendingYieldRewards(address _staker) internal view returns (uint256 pending) {\r\n    // read user data structure into memory\r\n    User memory user = users[_staker];\r\n\r\n    // and perform the calculation using the values read\r\n    return weightToReward(user.totalWeight, yieldRewardsPerWeight) - user.subYieldRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally, mostly by children implementations, see stake()\r\n   *\r\n   * @param _staker an address which stakes tokens and which will receive them back\r\n   * @param _amount amount of tokens to stake\r\n   * @param _lockUntil stake period as unix timestamp; zero means no locking\r\n   * @param _useSILV a flag indicating if previous reward to be paid as sILV\r\n   * @param _isYield a flag indicating if that stake is created to store yield reward\r\n   *      from the previously unstaked stake\r\n   */\r\n  function _stake(\r\n    address _staker,\r\n    uint256 _amount,\r\n    uint64 _lockUntil,\r\n    bool _useSILV,\r\n    bool _isYield\r\n  ) internal virtual {\r\n    // validate the inputs\r\n    require(_amount > 0, \"zero amount\");\r\n    require(\r\n      _lockUntil == 0 || (_lockUntil > now256() && _lockUntil - now256() <= 365 days),\r\n      \"invalid lock interval\"\r\n    );\r\n\r\n    // update smart contract state\r\n    _sync();\r\n\r\n    // get a link to user data struct, we will write to it later\r\n    User storage user = users[_staker];\r\n    // process current pending rewards if any\r\n    if (user.tokenAmount > 0) {\r\n      _processRewards(_staker, _useSILV, false);\r\n    }\r\n\r\n    // in most of the cases added amount `addedAmount` is simply `_amount`\r\n    // however for deflationary tokens this can be different\r\n\r\n    // read the current balance\r\n    uint256 previousBalance = IERC20(internalToken).balanceOf(address(this));\r\n    // transfer `_amount`; note: some tokens may get burnt here\r\n    transferPoolTokenFrom(address(msg.sender), address(this), _amount);\r\n    // read new balance, usually this is just the difference `previousBalance - _amount`\r\n    uint256 newBalance = IERC20(internalToken).balanceOf(address(this));\r\n    // calculate real amount taking into account deflation\r\n    uint256 addedAmount = newBalance - previousBalance;\r\n\r\n    // set the `lockFrom` and `lockUntil` taking into account that\r\n    // zero value for `_lockUntil` means \"no locking\" and leads to zero values\r\n    // for both `lockFrom` and `lockUntil`\r\n    uint64 lockFrom = _lockUntil > 0 ? uint64(now256()) : 0;\r\n    uint64 lockUntil = _lockUntil;\r\n\r\n    // stake weight formula rewards for locking\r\n    uint256 stakeWeight =\r\n    (((lockUntil - lockFrom) * WEIGHT_MULTIPLIER) / 365 days + WEIGHT_MULTIPLIER) * addedAmount;\r\n\r\n    // makes sure stakeWeight is valid\r\n    assert(stakeWeight > 0);\r\n\r\n    // create and save the deposit (append it to deposits array)\r\n    Deposit memory deposit =\r\n    Deposit({\r\n    tokenAmount: addedAmount,\r\n    weight: stakeWeight,\r\n    lockedFrom: lockFrom,\r\n    lockedUntil: lockUntil,\r\n    isYield: _isYield\r\n    });\r\n    // deposit ID is an index of the deposit in `deposits` array\r\n    user.deposits.push(deposit);\r\n\r\n    // update user record\r\n    user.tokenAmount += addedAmount;\r\n    user.totalWeight += stakeWeight;\r\n    user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\r\n\r\n    // update global variable\r\n    usersLockingWeight += stakeWeight;\r\n\r\n    // emit an event\r\n    emit Staked(msg.sender, _staker, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally, mostly by children implementations, see unstake()\r\n   *\r\n   * @param _staker an address which unstakes tokens (which previously staked them)\r\n   * @param _depositId deposit ID to unstake from, zero-indexed\r\n   * @param _amount amount of tokens to unstake\r\n   * @param _useSILV a flag indicating if reward to be paid as sILV\r\n   */\r\n  function _unstake(\r\n    address _staker,\r\n    uint256 _depositId,\r\n    uint256 _amount,\r\n    bool _useSILV\r\n  ) internal virtual {\r\n    // verify an amount is set\r\n    require(_amount > 0, \"zero amount\");\r\n\r\n    // get a link to user data struct, we will write to it later\r\n    User storage user = users[_staker];\r\n    // get a link to the corresponding deposit, we may write to it later\r\n    Deposit storage stakeDeposit = user.deposits[_depositId];\r\n    // deposit structure may get deleted, so we save isYield flag to be able to use it\r\n    bool isYield = stakeDeposit.isYield;\r\n\r\n    // verify available balance\r\n    // if staker address ot deposit doesn't exist this check will fail as well\r\n    require(stakeDeposit.tokenAmount >= _amount, \"amount exceeds stake\");\r\n\r\n    // update smart contract state\r\n    _sync();\r\n    // and process current pending rewards if any\r\n    _processRewards(_staker, _useSILV, false);\r\n\r\n    // recalculate deposit weight\r\n    uint256 previousWeight = stakeDeposit.weight;\r\n    uint256 newWeight =\r\n    (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\r\n    365 days +\r\n    WEIGHT_MULTIPLIER) * (stakeDeposit.tokenAmount - _amount);\r\n\r\n    // update the deposit, or delete it if its depleted\r\n    if (stakeDeposit.tokenAmount - _amount == 0) {\r\n      delete user.deposits[_depositId];\r\n    } else {\r\n      stakeDeposit.tokenAmount -= _amount;\r\n      stakeDeposit.weight = newWeight;\r\n    }\r\n\r\n    // update user record\r\n    user.tokenAmount -= _amount;\r\n    user.totalWeight = user.totalWeight - previousWeight + newWeight;\r\n    user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\r\n\r\n    // update global variable\r\n    usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\r\n\r\n    // if the deposit was created by the pool itself as a yield reward\r\n    if (isYield) {\r\n      // mint the yield via the factory\r\n      factory.mintYieldTo(msg.sender, _amount);\r\n    } else {\r\n      // otherwise just return tokens back to holder\r\n      transferPoolToken(msg.sender, _amount);\r\n    }\r\n\r\n    // emit an event\r\n    emit Unstaked(msg.sender, _staker, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally, mostly by children implementations, see sync()\r\n   *\r\n   * @dev Updates smart contract state (`yieldRewardsPerWeight`, `lastYieldDistribution`),\r\n   *      updates factory state via `updateILVPerBlock`\r\n   */\r\n  function _sync() internal virtual {\r\n    // update ILV per block value in factory if required\r\n    if (factory.shouldUpdateRatio()) {\r\n      factory.updateILVPerBlock();\r\n    }\r\n\r\n    // check bound conditions and if these are not met -\r\n    // exit silently, without emitting an event\r\n    uint256 endBlock = factory.endBlock();\r\n    if (lastYieldDistribution >= endBlock) {\r\n      return;\r\n    }\r\n    if (blockNumber() <= lastYieldDistribution) {\r\n      return;\r\n    }\r\n    // if locking weight is zero - update only `lastYieldDistribution` and exit\r\n    if (usersLockingWeight == 0) {\r\n      lastYieldDistribution = uint64(blockNumber());\r\n      return;\r\n    }\r\n\r\n    // to calculate the reward we need to know how many blocks passed, and reward per block\r\n    uint256 currentBlock = blockNumber() > endBlock ? endBlock : blockNumber();\r\n    uint256 blocksPassed = currentBlock - lastYieldDistribution;\r\n    uint256 ilvPerBlock = factory.ilvPerBlock();\r\n\r\n    // calculate the reward\r\n    uint256 ilvReward = (blocksPassed * ilvPerBlock * weight) / factory.totalWeight();\r\n\r\n    // update rewards per weight and `lastYieldDistribution`\r\n    yieldRewardsPerWeight += rewardToWeight(ilvReward, usersLockingWeight);\r\n    lastYieldDistribution = uint64(currentBlock);\r\n\r\n    // emit an event\r\n    emit Synchronized(msg.sender, yieldRewardsPerWeight, lastYieldDistribution);\r\n  }\r\n\r\n  /**\r\n   * @dev Used internally, mostly by children implementations, see processRewards()\r\n   *\r\n   * @param _staker an address which receives the reward (which has staked some tokens earlier)\r\n   * @param _useSILV flag indicating whether to mint sILV token as a reward or not, see processRewards()\r\n   * @param _withUpdate flag allowing to disable synchronization (see sync()) if set to false\r\n   * @return pendingYield the rewards calculated and optionally re-staked\r\n   */\r\n  function _processRewards(\r\n    address _staker,\r\n    bool _useSILV,\r\n    bool _withUpdate\r\n  ) internal virtual returns (uint256 pendingYield) {\r\n    // update smart contract state if required\r\n    if (_withUpdate) {\r\n      _sync();\r\n    }\r\n\r\n    // calculate pending yield rewards, this value will be returned\r\n    pendingYield = _pendingYieldRewards(_staker);\r\n\r\n    // if pending yield is zero - just return silently\r\n    if (pendingYield == 0) return 0;\r\n\r\n    // get link to a user data structure, we will write into it later\r\n    User storage user = users[_staker];\r\n\r\n    // if sILV is requested\r\n    if (_useSILV) {\r\n      // - mint sILV\r\n      mintSIlv(_staker, pendingYield);\r\n    } else {\r\n      // for other pools - stake as pool\r\n      address ilvPool = factory.getPoolAddress(ilv);\r\n      ICorePool(ilvPool).stakeAsPool(_staker, pendingYield);\r\n    }\r\n\r\n    // update users's record for `subYieldRewards` if requested\r\n    if (_withUpdate) {\r\n      user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\r\n    }\r\n\r\n    // emit an event\r\n    emit YieldClaimed(msg.sender, _staker, _useSILV, pendingYield);\r\n  }\r\n\r\n  /**\r\n   * @dev See updateStakeLock()\r\n   *\r\n   * @param _staker an address to update stake lock\r\n   * @param _depositId updated deposit ID\r\n   * @param _lockedUntil updated deposit locked until value\r\n   */\r\n  function _updateStakeLock(\r\n    address _staker,\r\n    uint256 _depositId,\r\n    uint64 _lockedUntil\r\n  ) internal {\r\n    // validate the input time\r\n    require(_lockedUntil > now256(), \"lock should be in the future\");\r\n\r\n    // get a link to user data struct, we will write to it later\r\n    User storage user = users[_staker];\r\n    // get a link to the corresponding deposit, we may write to it later\r\n    Deposit storage stakeDeposit = user.deposits[_depositId];\r\n\r\n    // validate the input against deposit structure\r\n    require(_lockedUntil > stakeDeposit.lockedUntil, \"invalid new lock\");\r\n\r\n    // verify locked from and locked until values\r\n    if (stakeDeposit.lockedFrom == 0) {\r\n      require(_lockedUntil - now256() <= 365 days, \"max lock period is 365 days\");\r\n      stakeDeposit.lockedFrom = uint64(now256());\r\n    } else {\r\n      require(_lockedUntil - stakeDeposit.lockedFrom <= 365 days, \"max lock period is 365 days\");\r\n    }\r\n\r\n    // update locked until value, calculate new weight\r\n    stakeDeposit.lockedUntil = _lockedUntil;\r\n    uint256 newWeight =\r\n    (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\r\n    365 days +\r\n    WEIGHT_MULTIPLIER) * stakeDeposit.tokenAmount;\r\n\r\n    // save previous weight\r\n    uint256 previousWeight = stakeDeposit.weight;\r\n    // update weight\r\n    stakeDeposit.weight = newWeight;\r\n\r\n    // update user total weight and global locking weight\r\n    user.totalWeight = user.totalWeight - previousWeight + newWeight;\r\n    usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\r\n\r\n    // emit an event\r\n    emit StakeLockUpdated(_staker, _depositId, stakeDeposit.lockedFrom, _lockedUntil);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts stake weight (not to be mixed with the pool weight) to\r\n   *      ILV reward value, applying the 10^12 division on weight\r\n   *\r\n   * @param _weight stake weight\r\n   * @param rewardPerWeight ILV reward per weight\r\n   * @return reward value normalized to 10^12\r\n   */\r\n  function weightToReward(uint256 _weight, uint256 rewardPerWeight) public pure returns (uint256) {\r\n    // apply the formula and return\r\n    return (_weight * rewardPerWeight) / REWARD_PER_WEIGHT_MULTIPLIER;\r\n  }\r\n\r\n  /**\r\n   * @dev Converts reward ILV value to stake weight (not to be mixed with the pool weight),\r\n   *      applying the 10^12 multiplication on the reward\r\n   *      - OR -\r\n   * @dev Converts reward ILV value to reward/weight if stake weight is supplied as second\r\n   *      function parameter instead of reward/weight\r\n   *\r\n   * @param reward yield reward\r\n   * @param rewardPerWeight reward/weight (or stake weight)\r\n   * @return stake weight (or reward/weight)\r\n   */\r\n  function rewardToWeight(uint256 reward, uint256 rewardPerWeight) public pure returns (uint256) {\r\n    // apply the reverse formula and return\r\n    return (reward * REWARD_PER_WEIGHT_MULTIPLIER) / rewardPerWeight;\r\n  }\r\n\r\n  /**\r\n   * @dev Testing time-dependent functionality is difficult and the best way of\r\n   *      doing it is to override block number in helper test smart contracts\r\n   *\r\n   * @return `block.number` in mainnet, custom values in testnets (if overridden)\r\n   */\r\n  function blockNumber() public view virtual returns (uint256) {\r\n    // return current block number\r\n    return block.number;\r\n  }\r\n\r\n  /**\r\n   * @dev Testing time-dependent functionality is difficult and the best way of\r\n   *      doing it is to override time in helper test smart contracts\r\n   *\r\n   * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\r\n   */\r\n  function now256() public view virtual returns (uint256) {\r\n    // return current block timestamp\r\n    return block.timestamp;\r\n  }\r\n\r\n  /**\r\n   * @dev Executes EscrowedIlluviumERC20.mint(_to, _values)\r\n   *      on the bound EscrowedIlluviumERC20 instance\r\n   *\r\n   * @dev Reentrancy safe due to the EscrowedIlluviumERC20 design\r\n   */\r\n  function mintSIlv(address _to, uint256 _value) private {\r\n    // just delegate call to the target\r\n    EscrowedIlluviumERC20(silv).mint(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes SafeERC20.safeTransfer on a pool token\r\n   *\r\n   * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\r\n   */\r\n  function transferPoolToken(address _to, uint256 _value) internal nonReentrant {\r\n    // just delegate call to the target\r\n    SafeERC20.safeTransfer(IERC20(internalToken), _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes SafeERC20.safeTransferFrom on a pool token\r\n   *\r\n   * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\r\n   */\r\n  function transferPoolTokenFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) internal nonReentrant {\r\n    // just delegate call to the target\r\n    SafeERC20.safeTransferFrom(IERC20(internalToken), _from, _to, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Flash Pool V2\r\n *\r\n * @notice Flash pools represent temporary pools like SNX pool.\r\n *\r\n * @notice Flash pools doesn't lock tokens, staked tokens can be unstaked  at any time\r\n *\r\n * @dev See FlashPoolBase for more details\r\n *\r\n * @author Pedro Bergamini, reviewed by Basil Gorin\r\n */\r\ncontract FlashPoolV2 is FlashPoolBase {\r\n  /// @dev Pool expiration time, the pool considered to be disabled once end block is reached\r\n  /// @dev Expired pools don't process any rewards, users are expected to withdraw staked tokens\r\n  ///      from the flash pools once they expire\r\n  uint64 public endBlock;\r\n\r\n  /// @dev Flag indicating pool type, true means \"flash pool\"\r\n  bool public constant override isFlashPool = true;\r\n\r\n  /**\r\n   * @dev Creates/deploys an instance of the flash pool\r\n   *\r\n   * @param _ilv ILV ERC20 Token IlluviumERC20 address\r\n   * @param _silv sILV ERC20 Token EscrowedIlluviumERC20 address\r\n   * @param _factory Pool factory IlluviumPoolFactory instance/address\r\n   * @param _internalToken token the pool operates on, for example ILV or ILV/ETH pair\r\n   * @param _initBlock initial block used to calculate the rewards\r\n   * @param _weight number representing a weight of the pool, actual weight fraction\r\n   *      is calculated as that number divided by the total pools weight and doesn't exceed one\r\n   * @param _endBlock pool expiration time (as block number)\r\n   */\r\n  constructor(\r\n    address _ilv,\r\n    address _silv,\r\n    IlluviumPoolFactory _factory,\r\n    address _internalToken,\r\n    uint64 _initBlock,\r\n    uint32 _weight,\r\n    uint64 _endBlock\r\n  ) FlashPoolBase(_ilv, _silv, _factory, _internalToken, _initBlock, _weight) {\r\n    // check the inputs which are not checked by the pool base\r\n    require(_endBlock > _initBlock, \"end block must be higher than init block\");\r\n\r\n    // assign the end block\r\n    endBlock = _endBlock;\r\n  }\r\n\r\n  /**\r\n   * @notice The function to check pool state. Flash pool is considered \"disabled\"\r\n   *      once time reaches its \"end block\"\r\n   *\r\n   * @return true if pool is disabled (time has reached end block), false otherwise\r\n   */\r\n  function isPoolDisabled() public view returns (bool) {\r\n    // verify the pool expiration condition and return the result\r\n    return blockNumber() >= endBlock;\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc FlashPoolBase\r\n   *\r\n   * @dev Overrides the _stake() in base by setting the locked until value to 1 year in the future;\r\n   *      locked until value has only locked weight effect and doesn't do any real token locking\r\n   *\r\n   * @param _lockedUntil not used, overridden with now + 1 year just to have correct calculation\r\n   *      of the locking weights\r\n   */\r\n  function _stake(\r\n    address _staker,\r\n    uint256 _amount,\r\n    uint64 _lockedUntil,\r\n    bool useSILV,\r\n    bool isYield\r\n  ) internal override {\r\n    // override the `_lockedUntil` and execute parent\r\n    // we set \"locked period\" to 365 days only to have correct calculation of locking weights,\r\n    // the tokens are not really locked since _unstake in the core pool doesn't check the \"locked period\"\r\n    super._stake(_staker, _amount, uint64(now256() + 365 days), useSILV, isYield);\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc FlashPoolBase\r\n   *\r\n   * @dev In addition to regular sync() routine of the base, set the pool weight\r\n   *      to zero, effectively disabling the pool in the factory\r\n   * @dev If the pool is disabled regular sync() routine is ignored\r\n   */\r\n  function _sync() internal override {\r\n    // if pool is disabled/expired\r\n    if (isPoolDisabled()) {\r\n      // if weight is not yet set\r\n      if (weight != 0) {\r\n        // set the pool weight (sets both factory and local values)\r\n        factory.changePoolWeight(address(this), 0);\r\n      }\r\n      // and exit\r\n      return;\r\n    }\r\n\r\n    // for enabled pools perform regular sync() routine\r\n    super._sync();\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ilv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silv\",\"type\":\"address\"},{\"internalType\":\"contract IlluviumPoolFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_internalToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_initBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_endBlock\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_fromVal\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_toVal\",\"type\":\"uint32\"}],\"name\":\"PoolWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"}],\"name\":\"StakeLockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRewardsPerWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastYieldDistribution\",\"type\":\"uint64\"}],\"name\":\"Synchronized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sIlv\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IlluviumPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"internalType\":\"struct IPool.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFlashPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastYieldDistribution\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"pendingYieldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useSILV\",\"type\":\"bool\"}],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWeight\",\"type\":\"uint256\"}],\"name\":\"rewardToWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_lockUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_useSILV\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useSILV\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"useSILV\",\"type\":\"bool\"}],\"name\":\"updateStakeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subYieldRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subVaultRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersLockingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWeight\",\"type\":\"uint256\"}],\"name\":\"weightToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRewardsPerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FlashPoolV2", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000767fe9edc9e0df98e07454847909b5e959d7ca0e000000000000000000000000398aea1c9ceb7de800284bb399a15e0efe5a9ec20000000000000000000000002996222cb2bf3675e5f5f88a5f211736197f03c7000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000000000000000000000000000000000000000cb43a500000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000ce3fcc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eea0765ce21f41ccb5e0c687f1b68cabe019c9c106e5bc574b07ceae3efc7888"}