{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IChainlinkV3Aggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IChainlinkV3Aggregator {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOracle {\\n    function viewPriceInUSD() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IOracle} from './IOracle.sol';\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(address token, IOracle oracle);\\n\\n    function updateOracleForAsset(address _asset, IOracle _oracle) external;\\n\\n    function viewPriceInUSD(address _token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/ChainlinkUSDAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport '../interfaces/IOracle.sol';\\nimport '../interfaces/IPriceOracleAggregator.sol';\\nimport '../interfaces/IChainlinkV3Aggregator.sol';\\n\\ncontract ChainlinkUSDAdapter is IOracle {\\n    /// @notice the asset with the price oracle\\n    address public immutable asset;\\n\\n    /// @notice chainlink aggregator with price in base asset\\n    IChainlinkV3Aggregator public immutable chainlinkAggregator;\\n\\n    /// @notice the base asset of chainlink aggregator\\n    address public immutable baseAsset;\\n\\n    /// @notice oracle that returns price in USD\\n    IPriceOracleAggregator public immutable aggregator;\\n\\n    constructor(\\n        address _asset,\\n        address _aggregator,\\n        address _baseAsset,\\n        address _priceOracleAggregator\\n    ) {\\n        require(address(_aggregator) != address(0), 'invalid aggregator');\\n\\n        asset = _asset;\\n        chainlinkAggregator = IChainlinkV3Aggregator(_aggregator);\\n        baseAsset = _baseAsset;\\n        aggregator = IPriceOracleAggregator(_priceOracleAggregator);\\n    }\\n\\n    function adjustDecimal(\\n        uint256 balance,\\n        uint8 org,\\n        uint8 target\\n    ) internal pure returns (uint256 adjustedBalance) {\\n        adjustedBalance = balance;\\n        if (target < org) {\\n            adjustedBalance = adjustedBalance / (10 ** (org - target));\\n        } else if (target > org) {\\n            adjustedBalance = adjustedBalance * (10 ** (target - org));\\n        }\\n    }\\n\\n    /// @dev returns the latest price of asset\\n    function viewPriceInUSD() external view override returns (uint256) {\\n        (, int256 priceC, , , ) = chainlinkAggregator.latestRoundData();\\n\\n        uint256 priceInBaseAsset = adjustDecimal(\\n            uint256(priceC),\\n            chainlinkAggregator.decimals(),\\n            8\\n        ); // 8 decimals\\n\\n        if (baseAsset != address(0)) {\\n            return\\n                (priceInBaseAsset * aggregator.viewPriceInUSD(baseAsset)) /\\n                10 ** 8;\\n        }\\n\\n        return priceInBaseAsset;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracleAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract IPriceOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkAggregator\",\"outputs\":[{\"internalType\":\"contract IChainlinkV3Aggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainlinkUSDAdapter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060a50662a240908c3b0d5fc25e4e21e4930ae91a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}