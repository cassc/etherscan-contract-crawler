{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\n\r\npragma solidity ^0.8;\r\n\r\n\r\n\r\n/*\r\n* @author Forkswap.org\r\n* @notice Smart contract that let's you deploy other smart contracts using bytecode.\r\n*/\r\n\r\ncontract DeployBytecode {\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    mapping(address => address) public contractCreators;\r\n\r\n    event DeployContract(address indexed owner, address smartcontract, string website);\r\n\r\n\r\n    /* \r\n    * Given a bytecode and website, deploy a smart contract. Your smart contract constructor can be payable\r\n    * but shouldn't have any arguments in constructor. You can bypass arguments via invokeMethod below\r\n    */\r\n    function deployFromBytecode(bytes memory bytecode, string memory website) payable public returns (address) {\r\n        address child;\r\n        uint256 val = msg.value;\r\n        assembly{\r\n            mstore(0x0, bytecode)\r\n            // create(value, offset, size)\r\n            child := create(val,0xa0, calldatasize())\r\n        }\r\n        require(child != address(0), 'wrong call');\r\n        contractCreators[child] = msg.sender;\r\n        emit DeployContract(msg.sender, child, website);\r\n        return child;\r\n   }\r\n\r\n\r\n    /*\r\n    *   Invoke any smart contract method as long as you've deployed it. \r\n    *   Can be used for changing ownerships or similar. \r\n    */\r\n   function invokeMethod(address destination, bytes memory data) payable public returns (bool){\r\n        require(contractCreators[destination] == msg.sender, 'wrong call');\r\n        if (external_call(destination, msg.value, data.length, data)){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n   }\r\n\r\n\r\n    // REFERENCE: Gnosis Safe <3 \r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function external_call(address destination, uint value, uint dataLength, bytes memory data) internal returns (bool) {\r\n        bool result;\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                d,\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"name\":\"DeployContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractCreators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"name\":\"deployFromBytecode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"invokeMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DeployBytecode", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://61631814a7ae371f812e4d12ad42fca58a38377b119b9d062371aff521acd41d"}