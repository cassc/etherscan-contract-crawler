{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeSwapRouter02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n     function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract WRAPPED is IERC20, Context {\r\n\r\nIPancakeSwapRouter02 public PCSRouter;\r\naddress public PCSPair;\r\n\r\nmapping(address => uint256) private _balances;\r\nmapping(address => mapping(address => uint256)) private _allowances;\r\nmapping(address => bool) private automatedMarketMakerPairs;\r\nmapping(address => bool) public isBlacklisted; \r\n\r\nuint256 private _totalSupply = 100_000_000_000_000 * 1e18;\r\nstring private _name = \"WRAPPED\";\r\nstring private _symbol = \"$WRAP\";\r\n\r\naddress public _owner;\r\naddress public marketingWallet;\r\nuint256 public taxesBuy = 1;\r\nuint256 public taxesSell = 1;\r\nuint256 public taxesTransfer = 0;\r\nuint256 public tokensForAutoSwap = _totalSupply / 5000; // 0.02% of total supply\r\naddress public router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap V2 mainnet\r\nbool internal isInternalTransaction;\r\nuint256 public launchedAt;\r\nbool private tokenLaunched;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\nconstructor (address _marketingWallet) {\r\n    IPancakeSwapRouter02 _PCSRouter = IPancakeSwapRouter02(router);\r\n    address _PCSPair = IPancakeFactory(_PCSRouter.factory()).createPair(address(this), _PCSRouter.WETH());\r\n    PCSRouter = _PCSRouter;\r\n    PCSPair   = _PCSPair;\r\n    automatedMarketMakerPairs[PCSPair] = true;\r\n    _owner = msg.sender;\r\n    marketingWallet = _marketingWallet;\r\n    _balances[_owner] = _totalSupply;\r\n    emit Transfer(address(0), _owner, _totalSupply);\r\n}\r\n\r\nmodifier FastTx() {\r\n    isInternalTransaction = true;\r\n    _;\r\n    isInternalTransaction = false;\r\n}\r\n\r\n// Ownable\r\n\r\nfunction getOwner() public view returns(address) {\r\n    return _owner;\r\n}\r\n\r\nmodifier onlyOwner() {\r\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n}\r\n\r\nfunction renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n}\r\n\r\nfunction transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n}\r\n\r\nfunction setAutoSwapPercent(uint256 newPercent) public {\r\n    require(msg.sender == _owner || msg.sender == marketingWallet, \"Err.\");\r\n    require(newPercent >= 1 && newPercent <= 100, \"Can be set between 0.01% and 1% of total supply.\");\r\n    tokensForAutoSwap = _totalSupply * newPercent / 10000;\r\n}\r\n\r\nfunction blackListAddress(address who) public onlyOwner {\r\n    require(who != router && who != PCSPair, \"Cannot blacklist router and pair.\");\r\n    isBlacklisted[who] = true;\r\n}\r\n\r\nfunction unBlacklistAddress(address who) public onlyOwner {\r\n    isBlacklisted[who] = false;\r\n}\r\n\r\nfunction launch() public onlyOwner {\r\n    require(!tokenLaunched, \"Tokens is already launched.\");\r\n    tokenLaunched = true;\r\n    launchedAt = block.number;\r\n}\r\n\r\nfunction rescueTokens(address tokenAddress) public {\r\n    require(msg.sender == _owner || msg.sender == marketingWallet, \"Err.\");\r\n    if(tokenAddress == address(0)) {\r\n       payable(msg.sender).transfer(address(this).balance);\r\n    } else {\r\n        uint256 tokenBalances = IERC20(tokenAddress).balanceOf(address(this));\r\n        IERC20(tokenAddress).transfer(msg.sender, tokenBalances);\r\n    }\r\n}\r\n\r\n// ERC20 Standard\r\n\r\nfunction decimals() public pure returns (uint8) {return 18;}\r\nfunction name() public view returns (string memory) {return _name;}\r\nfunction symbol() public view  returns (string memory) {return _symbol;}\r\nfunction totalSupply() public view returns (uint256) {return _totalSupply;}\r\nfunction balanceOf(address account) public view returns (uint256) {return _balances[account];}\r\n\r\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n}\r\n\r\nfunction allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n}\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    if (currentAllowance != type(uint256).max) {\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n    }\r\n\r\n    _transfer(sender, recipient, amount);\r\n\r\n    return true;\r\n}\r\n\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _transfer(address from, address to, uint256 amount) internal virtual {\r\n    require(from != address(0), \"ERC20: transfer from the zero address\");\r\n    require(to != address(0), \"ERC20: transfer to the zero address\");\r\n    require(amount > 0, \"Cannot send 0 tokens.\");\r\n    require(!isBlacklisted[from], \"Address is blacklisted.\");\r\n\r\n    if(!tokenLaunched) {\r\n        require(from == _owner || from == marketingWallet || to == _owner || to == marketingWallet, \"Token not launched yet.\");\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        return;\r\n    }\r\n    \r\n    if(!isInternalTransaction) {\r\n        uint256 taxes;\r\n        uint256 taxedAmount;\r\n        uint256 transferAmount;\r\n        uint256 contractBalances = balanceOf(address(this));\r\n\r\n        if(contractBalances > 0 && contractBalances >= tokensForAutoSwap && automatedMarketMakerPairs[to]) {\r\n            swapFees(tokensForAutoSwap);\r\n        }\r\n\r\n        if(automatedMarketMakerPairs[from]) {\r\n            taxes = taxesBuy;\r\n        } else if(automatedMarketMakerPairs[to]) {\r\n            taxes = taxesSell;\r\n        } else if(!automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to]) {\r\n            taxes = taxesTransfer;\r\n        }\r\n\r\n        if(from == _owner || from == marketingWallet || to == _owner || to == marketingWallet) {\r\n            taxes = 0;\r\n        }\r\n\r\n        taxedAmount = amount * taxes / 100;\r\n        transferAmount = amount - taxedAmount;\r\n\r\n        _balances[from] -= amount;\r\n        _balances[to] += transferAmount;\r\n        emit Transfer(from, to, transferAmount);\r\n\r\n        if(taxedAmount > 0) {\r\n            _balances[address(this)] += taxedAmount;\r\n            emit Transfer(from, address(this), taxedAmount);\r\n        }\r\n\r\n    } else {\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n    \r\n}\r\n\r\nfunction swapFees(uint256 tokenAmount) private FastTx {\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = PCSRouter.WETH();\r\n    _approve(address(this), address(PCSRouter), type(uint256).max);\r\n    try PCSRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp) {} catch {}\r\n    \r\n    uint256 ethForMarketing = address(this).balance;\r\n\r\n    if(ethForMarketing > 0) {\r\n        bool success;\r\n        (success, ) = marketingWallet.call{value: ethForMarketing}(\"\");\r\n    }\r\n    \r\n}\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PCSPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PCSRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"blackListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setAutoSwapPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxesBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxesSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxesTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForAutoSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unBlacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WRAPPED", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a1dbe5ea8c0a2fe3fba096ff89c0597ef3410bc5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d5f7e144d50970980c4d7ecc775250ec49667b49ee026002bc05d624392b3d4"}