{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/MapleLiquidityPositionParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport {IMapleV2Globals} from \\\"../../../../../external-interfaces/IMapleV2Globals.sol\\\";\\nimport {IMapleV2Pool} from \\\"../../../../../external-interfaces/IMapleV2Pool.sol\\\";\\nimport {IMapleV2PoolManager} from \\\"../../../../../external-interfaces/IMapleV2PoolManager.sol\\\";\\nimport {IMapleV2ProxyFactory} from \\\"../../../../../external-interfaces/IMapleV2ProxyFactory.sol\\\";\\nimport {IExternalPositionParser} from \\\"../../IExternalPositionParser.sol\\\";\\nimport {IMapleLiquidityPosition} from \\\"./IMapleLiquidityPosition.sol\\\";\\nimport {MapleLiquidityPositionDataDecoder} from \\\"./MapleLiquidityPositionDataDecoder.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title MapleLiquidityPositionParser\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Parser for Maple liquidity positions\\ncontract MapleLiquidityPositionParser is MapleLiquidityPositionDataDecoder, IExternalPositionParser {\\n    address private immutable MAPLE_V2_GLOBALS;\\n\\n    constructor(address _mapleV2Globals) public {\\n        MAPLE_V2_GLOBALS = _mapleV2Globals;\\n    }\\n\\n    /// @notice Parses the assets to send and receive for the callOnExternalPosition\\n    /// @param _actionId The _actionId for the callOnExternalPosition\\n    /// @param _encodedActionArgs The encoded parameters for the callOnExternalPosition\\n    /// @return assetsToTransfer_ The assets to be transferred from the Vault\\n    /// @return amountsToTransfer_ The amounts to be transferred from the Vault\\n    /// @return assetsToReceive_ The assets to be received at the Vault\\n    function parseAssetsForAction(address, uint256 _actionId, bytes memory _encodedActionArgs)\\n        external\\n        override\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        )\\n    {\\n        if (_actionId == uint256(IMapleLiquidityPosition.Actions.LendV2)) {\\n            (address pool, uint256 liquidityAssetAmount) = __decodeLendV2ActionArgs(_encodedActionArgs);\\n            __validatePoolV2(pool);\\n\\n            assetsToTransfer_ = new address[](1);\\n            amountsToTransfer_ = new uint256[](1);\\n\\n            assetsToTransfer_[0] = IMapleV2Pool(pool).asset();\\n            amountsToTransfer_[0] = liquidityAssetAmount;\\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.RequestRedeemV2)) {\\n            (address pool,) = __decodeRequestRedeemV2ActionArgs(_encodedActionArgs);\\n            __validatePoolV2(pool);\\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.RedeemV2)) {\\n            (address pool,) = __decodeRedeemV2ActionArgs(_encodedActionArgs);\\n            __validatePoolV2(pool);\\n\\n            assetsToReceive_ = new address[](1);\\n            assetsToReceive_[0] = IMapleV2Pool(pool).asset();\\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.CancelRedeemV2)) {\\n            (address pool,) = __decodeCancelRedeemV2ActionArgs(_encodedActionArgs);\\n            __validatePoolV2(pool);\\n        }\\n\\n        return (assetsToTransfer_, amountsToTransfer_, assetsToReceive_);\\n    }\\n\\n    /// @notice Parse and validate input arguments to be used when initializing a newly-deployed ExternalPositionProxy\\n    /// @return initArgs_ Parsed and encoded args for ExternalPositionProxy.init()\\n    function parseInitArgs(address, bytes memory) external override returns (bytes memory initArgs_) {\\n        return \\\"\\\";\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    // Validates that a pool v2 has been deployed from a Maple factory\\n    function __validatePoolV2(address _poolV2) private view {\\n        address poolManager = IMapleV2Pool(_poolV2).manager();\\n        require(IMapleV2PoolManager(poolManager).pool() == _poolV2, \\\"__validatePoolV2: Invalid PoolManager relation\\\");\\n\\n        address poolManagerFactory = IMapleV2PoolManager(poolManager).factory();\\n        require(\\n            IMapleV2ProxyFactory(poolManagerFactory).isInstance(poolManager),\\n            \\\"__validatePoolV2: Invalid PoolManagerFactory relation\\\"\\n        );\\n\\n        require(\\n            IMapleV2Globals(MAPLE_V2_GLOBALS).isInstanceOf(\\\"POOL_MANAGER_FACTORY\\\", poolManagerFactory),\\n            \\\"__validatePoolV2: Invalid Globals relation\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IMapleV2Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IMapleV2Globals Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IMapleV2Globals {\\n    function isInstanceOf(bytes32 _key, address _who) external view returns (bool isInstanceOf_);\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IMapleV2Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\nimport \\\"./IERC4626.sol\\\";\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IMapleV2Pool Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IMapleV2Pool is IERC4626 {\\n    function convertToExitAssets(uint256 _shares) external view returns (uint256 assets_);\\n\\n    function removeShares(uint256 _shares, address _owner) external;\\n\\n    function requestRedeem(uint256 _shares, address _owner) external;\\n\\n    function manager() external view returns (address poolManager_);\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IMapleV2PoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IMapleV2PoolManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IMapleV2PoolManager {\\n    function factory() external view returns (address factory_);\\n\\n    function pool() external view returns (address pool_);\\n\\n    function withdrawalManager() external view returns (address withdrawalManager_);\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IMapleV2ProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IMapleV2ProxyFactory Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IMapleV2ProxyFactory {\\n    function isInstance(address instance_) external view returns (bool isInstance_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/IExternalPositionParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPositionParser Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all external position parsers\\ninterface IExternalPositionParser {\\n    function parseAssetsForAction(address _externalPosition, uint256 _actionId, bytes memory _encodedActionArgs)\\n        external\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        );\\n\\n    function parseInitArgs(address _vaultProxy, bytes memory _initializationData)\\n        external\\n        returns (bytes memory initArgs_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/IMapleLiquidityPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport {IExternalPosition} from \\\"../../IExternalPosition.sol\\\";\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IMapleLiquidityPosition Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IMapleLiquidityPosition is IExternalPosition {\\n    enum Actions {\\n        DEPRECATED_LendV1,\\n        DEPRECATED_LendAndStakeV1,\\n        DEPRECATED_IntendToRedeemV1,\\n        DEPRECATED_RedeemV1,\\n        DEPRECATED_StakeV1,\\n        DEPRECATED_UnstakeV1,\\n        DEPRECATED_UnstakeAndRedeemV1,\\n        DEPRECATED_ClaimInterestV1,\\n        DEPRECATED_ClaimRewardsV1,\\n        LendV2,\\n        RequestRedeemV2,\\n        RedeemV2,\\n        CancelRedeemV2\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/MapleLiquidityPositionDataDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title MapleLiquidityPositionDataDecoder Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract contract containing data decodings for MapleLiquidityPosition payloads\\nabstract contract MapleLiquidityPositionDataDecoder {\\n    /// @dev Helper to decode args used during the CancelRedeemV2 action\\n    function __decodeCancelRedeemV2ActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address pool_, uint256 poolTokenAmount_)\\n    {\\n        return abi.decode(_actionArgs, (address, uint256));\\n    }\\n\\n    /// @dev Helper to decode args used during the LendV2 action\\n    function __decodeLendV2ActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address pool_, uint256 liquidityAssetAmount_)\\n    {\\n        return abi.decode(_actionArgs, (address, uint256));\\n    }\\n\\n    /// @dev Helper to decode args used during the RedeemV2 action\\n    function __decodeRedeemV2ActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address pool_, uint256 poolTokenAmount_)\\n    {\\n        return abi.decode(_actionArgs, (address, uint256));\\n    }\\n\\n    /// @dev Helper to decode args used during the RequestRedeemV2 action\\n    function __decodeRequestRedeemV2ActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address pool_, uint256 poolTokenAmount_)\\n    {\\n        return abi.decode(_actionArgs, (address, uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"openzeppelin-solc-0.6/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IERC4626 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Minimal interface for interactions with IERC4626 tokens\\ninterface IERC4626 is IERC20 {\\n    function asset() external view returns (address asset_);\\n\\n    function deposit(uint256 _assets, address _receiver) external returns (uint256 shares_);\\n\\n    function mint(uint256 shares_, address _receiver) external returns (uint256 assets_);\\n\\n    function redeem(uint256 _shares, address _receiver, address _owner) external returns (uint256 assets_);\\n\\n    function withdraw(uint256 _assets, address _receiver, address _owner) external returns (uint256 shares_);\\n\\n    function convertToAssets(uint256 _shares) external view returns (uint256 assets_);\\n\\n    function convertToShares(uint256 _assets) external view returns (uint256 shares_);\\n\\n    function maxDeposit(address _receiver) external view returns (uint256 assets_);\\n\\n    function maxMint(address _receiver) external view returns (uint256 shares_);\\n\\n    function maxRedeem(address _owner) external view returns (uint256 shares_);\\n\\n    function maxWithdraw(address _owner) external view returns (uint256 _assets);\\n\\n    function previewDeposit(uint256 _assets) external view returns (uint256 shares_);\\n\\n    function previewMint(uint256 _shares) external view returns (uint256 assets_);\\n\\n    function previewRedeem(uint256 _shares) external view returns (uint256 assets_);\\n\\n    function previewWithdraw(uint256 _assets) external view returns (uint256 shares_);\\n\\n    function totalAssets() external view returns (uint256 totalAssets_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/IExternalPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport {IExternalPositionLibCore} from \\\"../../../persistent/external-positions/IExternalPositionLibCore.sol\\\";\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition is IExternalPositionLibCore {\\n    function getDebtAssets() external returns (address[] memory assets_, uint256[] memory amounts_);\\n\\n    function getManagedAssets() external returns (address[] memory assets_, uint256[] memory amounts_);\\n\\n    function init(bytes memory _data) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.6/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/external-positions/IExternalPositionLibCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPositionLibCore interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice An interface for core required functions of an IExternalPositionLib instance\\ninterface IExternalPositionLibCore {\\n    function receiveCallFromVault(bytes memory _data) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"@uniswap/v3-core/=lib/uniswap-v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\r\n      \"openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\r\n      \"uniswap-v3-core/=lib/uniswap-v3-core/\",\r\n      \"uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\r\n      \"uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\",\r\n      \"uniswap-v3-periphery-0.8/=lib/uniswap-v3-periphery-0.8/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mapleV2Globals\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_encodedActionArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"assetsToTransfer_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"assetsToReceive_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"parseInitArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"initArgs_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MapleLiquidityPositionParser", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000804a6f5f667170f545bf14e5ddb48c70b788390c", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}