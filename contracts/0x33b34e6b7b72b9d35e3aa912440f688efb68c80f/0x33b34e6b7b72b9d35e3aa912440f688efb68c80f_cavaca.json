{"SourceCode": "/**\r\n\r\n\r\n\r\nWE HAVE NOT GONE ANYWHERE, WE ARE NOT GOING ANYWHERE.\r\n\r\nWE HAVE AND ALWAYS WILL BE, THE BULLRUN.\r\n\r\nJOIN US NOW CA 0xc1534fe936be00369c7a827a6e731a233bd0ed34\r\n\r\nTwitter: https://twitter.com/CavachonEth\r\n\r\nTelegram: https://t.me/CavachonCoin\r\n\r\nMedium: https://medium.com/@dev_72199/cavachon-6730e21a7470\r\n\r\nWeb: https://www.cavachon.io\r\n\r\nWeb REDIR\thttp://www.cavachon.biz\r\nWeb REDIR\thttp://www.cavachon.club\r\nWeb REDIR\thttp://www.cavachon.info\r\nWeb REDIR\thttp://www.cavachon.live\r\nWeb REDIR\thttp://www.cavachon.online\r\nWeb REDIR\thttp://www.cavachon.pro\r\nWeb REDIR\thttp://www.cavachon.site\r\nWeb REDIR\thttp://www.cavachon.space\r\nWeb REDIR\thttp://www.cavachon.tech\r\nWeb REDIR\thttp://www.cavachon.vip\r\nWeb REDIR\thttp://www.cavachon.xyz\r\nWeb REDIR\thttp://www.cavachon.art\r\nWeb REDIR\thttp://www.cavachon.store\r\nWeb REDIR\thttp://www.cavachon.ink\r\nWeb REDIR\thttp://www.cavachon.cloud\r\nWeb REDIR\thttp://www.cavachon.cc\r\n\r\n\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@&BGP5YJ???7777???JY5PGB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@&#G5J?7!!!!!!!!!!!!!!!!!!!!!!7?J5G#&@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@#PY?!!!!!!!!!!!!!!!!!!!777777!!!!!!!!!?YP#@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@#5?!!!!!!!!!!!!!!!!!!!!7?77!7JY?777!!!7!!!!!!?5B@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@&P?!!!!!!!!!!!!!!!!!!77?J??~^!?J?7!!!!7?J?!!!!!!!!!?P&@@@@@@@@@@@@@\r\n@@@@@@@@@@@#57!!!!!!!!!!!!!!!!???77?J?~^^~~^^^^~!!7?JJ7!!!!!!!!!!!7Y#@@@@@@@@@@@\r\n@@@@@@@@@&Y7!!!!!!!!!!!!!!J77775~^~^::::^^^^~!7J?^::.^!7?J?777!!!!!!!Y#@@@@@@@@@\r\n@@@@@@@@P7!!!!!!!!!77777??JJ7^!^::~?~::^~~~~~!!~^::::^^~!777?J7?!!!!!!75@@@@@@@@\r\n@@@@@@#J!!!!!!!!7?????JJYJJ7::^::::^^::^:::::::.::::::^^^^^^~~???7!!!!!!?#@@@@@@\r\n@@@@@G7!!!!!!!7??777??????JJ~:.:::.:~~^^......::::::^^~!7?!~~^:::7?!!!!!!7G@@@@@\r\n@@@@P!!!!!!!!7J?7??????JYYYYJ~^:::~!:::::::^^^::::^~~~!Y7:.:^~~^:.JY?!!!!!!P@@@@\r\n@@@P!!!!!!!!7Y?????????JYJYY5?!^:7~:^~^~~~!7??7!^^!!~!7!^~!7!!~77:~5JJ7!!!!!P@@@\r\n@@B!!!!!!!!!5Y??J????????JYY5?!~?7~!^:~~!JJYYJJ?7^:::^~JYYYY?77:^?!Y?JY7!!!!!G@@\r\n@&7!!!!!!!!Y5?7YY??J?????YY5J!!?57~:.7?7Y5GGBPY55~.::.YGGBPPP?J^.~YY?75Y!!!!!7&@\r\n@5!!!!!!!?55J?YY??YY?7J??Y5Y?!!77~:::7Y55B#&&P?J5!^:::P#&&YJY5J^~~JYY!7P?!!!!!5@\r\n&7!!!!!!75YJYYJ??YYJ77J?JY5Y?!!!?~.::~~?YGPB#BP75?!^:.7PGGG?75?!??Y5Y?7YJ!!!!!7#\r\nG!!!!!!?5JJYJ??J????7?J?YYPJ?!!77^^::.:!?YY77!~~~^^::::::^~^?JJ?7?5PYY5Y57!!!!!P\r\nY!!!!!75Y??77??J??JY??Y7YYP7!7??!~::^^~~^::......:::.........:!??755YYYJ5Y7!!!!Y\r\nJ!!!!!?5Y??7J??5??5Y5YY7YPY77YY!7JJ?7~::::.:::::::::^?Y557^^::..:!55Y5?J57!!!!!?\r\nJ!!!!!YP???JY7YYJ?5YYY5?YG?7!~^~JJ!^:.^~~^^^^:.::::^B&&&&#~J^:::..:!5Y?5Y!!!!!!?\r\nY!!!!7YJ??JYJ5Y?Y?Y5Y???Y?7?:.~5!:..:7?7!!?7~:.:::::P&&##&5Y::::^~~^^J5P7!!!!!!Y\r\nG!!!!!??Y?J??J?YY??5Y???Y7J?:.7!::::??~:.!~:^~~::::.~JPB#B5~:::^:!77^:J5!!!!!!!P\r\n&7!!!!?YPJ??!??5???Y?7?YY!~:.!7^:::^^...^~!JJ7~^^^^^^^!JY~:..^7?^^!Y7~~Y!!!!!!7#\r\n@5!!!!7JP5?Y7??J????7?P5!::~JY?~7~::.:::~?YPJ?7???JJJJJ?YJ7!7JPJ!^.~:!JY!!!!!!5@\r\n@&7!!!!!Y5Y5?7JJ??YYJP5?JJ7!JY?J!:::!7!~:^!Y5J~^:::......^!JY????^..75J7!!!!!7&@\r\n@@B!!!!!!?55Y?5Y7JPGPYJYY7::YY5~.::::::::.:!JYJ!^::...::::^?Y?7Y?::YY7!!!!!!!G@@\r\n@@@P!!!!!!7J555PJPGGG5?7~^^:J57:!~...^:::.:^:^!7777777!!~^::~J?5Y7Y5?!!!!!!!P@@@\r\n@@@@P!!!!!!!!7?JJY5GGGPPP5YJ?Y?J7.:^?~.:^~!!:!::!~^:::...:!?JJP5YJ7!!!!!!!!P@@@@\r\n@@@@@G7!!!!!!!!!!!!?YGGGGGGGGPGJ~7YGY~YYJJJ?J?75P?^:~^:~~5GPPGBJ!!!!!!!!!7G@@@@@\r\n@@@@@@#?!!!!!!!!!!!!!7YPGGGGPGBPGGGGPGGGGGGGGPGG5?7??~J5GGGPPPP?!!!!!!!!?#@@@@@@\r\n@@@@@@@@P7!!!!!!!!!!!!!7?YPGGGGGGGGPGGPGPYY5GPP5PPY5YYPPG5GYYY57!!!!!!75@@@@@@@@\r\n@@@@@@@@@#Y7!!!!!!!!!!!!!!7?JYPPGGGGGGGG5JYJP5YJYY5Y5Y?755YYYY7!!!!!!Y#@@@@@@@@@\r\n@@@@@@@@@@@#Y7!!!!!!!!!!!!!!!!!7?JY55PGPYYYY5J!~!77!~^^^5PYJ7!!!!!7Y#@@@@@@@@@@@\r\n@@@@@@@@@@@@@&P?!!!!!!!!!!!!!!!!!!!!!77???JJJJ!^^:::::~??7!!!!!!?P&@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@B5?!!!!!!!!!!!!!!!!!!!!!!!!!!!??7~^~~7?7!!!!!?5B@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@#PY?!!!!!!!!!!!!!!!!!!!!!!!!777777!!!!7JP#@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@&#G5J?7!!!!!!!!!!!!!!!!!!!!!!7?J5G#&@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@&BGP5YJ???7777???JY5PGB&&@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract cavaca is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _buyerMap;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=0;\r\n    uint256 private _initialSellTax=0;\r\n    uint256 private _finalBuyTax=0;\r\n    uint256 private _finalSellTax=0;\r\n    uint256 private _reduceBuyTaxAt=20;\r\n    uint256 private _reduceSellTaxAt=30;\r\n    uint256 private _preventSwapBefore=0;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 8;\r\n    uint256 private constant _tTotal = 100000000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Cavachon\";\r\n    string private constant _symbol = unicode\"CAVA\";\r\n    uint256 public _maxTxAmount =   100000000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 100000000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold=1000000000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap=1000000000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n                _buyerMap[to]=true;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n                require(_buyCount>_preventSwapBefore || _buyerMap[from],\"Seller is not buyer\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "cavaca", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3eb10c99b7c5faed3298a26e564ce67c594d546bb4715cc223e126064f4ef2fc"}