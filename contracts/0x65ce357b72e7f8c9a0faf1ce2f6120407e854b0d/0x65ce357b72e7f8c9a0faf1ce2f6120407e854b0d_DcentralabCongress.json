{"SourceCode": "// Sources flattened with hardhat v2.19.0 https://hardhat.org\r\n\r\npragma abicoder v2;\r\n\r\n// File contracts/governance/ICongressMembersRegistry.sol\r\n\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * ICongressMembersRegistry contract.\r\n * @author Nikola Madjarevic\r\n * Date created: 13.9.21.\r\n * Github: madjarevicn\r\n */\r\n\r\ninterface ICongressMembersRegistry {\r\n    function isMember(address _address) external view returns (bool);\r\n    function getMinimalQuorum() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/governance/DcentralabCongress.sol\r\n\r\npragma solidity 0.7.6;\r\n// Original pragma directive: pragma abicoder v2\r\n\r\n/**\r\n * DcentralabarmCongress contract.\r\n * @author Nikola Madjarevic\r\n * Date created: 13.9.21.\r\n * Github: madjarevicn\r\n */\r\n\r\ncontract DcentralabCongress {\r\n    // The name of this contract\r\n    string public constant name = \"DcentralabCongress\";\r\n\r\n    // Members registry contract\r\n    ICongressMembersRegistry membersRegistry;\r\n\r\n    // The total number of proposals\r\n    uint public proposalCount;\r\n\r\n    struct Proposal {\r\n        // Unique id for looking up a proposal\r\n        uint id;\r\n\r\n        // Creator of the proposal\r\n        address proposer;\r\n\r\n        // The ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n\r\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint[] values;\r\n\r\n        // The ordered list of function signatures to be called\r\n        string[] signatures;\r\n\r\n        // The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n\r\n        // Current number of votes in favor of this proposal\r\n        uint forVotes;\r\n\r\n        // Current number of votes in opposition to this proposal\r\n        uint againstVotes;\r\n\r\n        // Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n\r\n        // Flag marking whether the proposal has been executed\r\n        bool executed;\r\n\r\n        // Timestamp when proposal is created\r\n        uint timestamp;\r\n    }\r\n\r\n    // Ballot receipt record for a voter\r\n    struct Receipt {\r\n        // Whether or not a vote has been cast\r\n        bool hasVoted;\r\n\r\n        // Whether or not the voter supports the proposal\r\n        bool support;\r\n    }\r\n\r\n    // Receipts of ballots for the entire set of voters\r\n    mapping (uint256 => mapping(address => Receipt)) public receipts;\r\n\r\n    // The official record of all proposals ever proposed\r\n    mapping (uint => Proposal) public proposals;\r\n\r\n    // An event emitted when a new proposal is created\r\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\r\n\r\n    // An event emitted when a vote has been cast on a proposal\r\n    event VoteCast(address voter, uint proposalId, bool support);\r\n\r\n    // An event emitted when a proposal has been canceled\r\n    event ProposalCanceled(uint id);\r\n\r\n    // An event emitted when a proposal has been executed\r\n    event ProposalExecuted(uint id);\r\n\r\n    // An event emitted everytime ether is received\r\n    event ReceivedEther(address sender, uint amount);\r\n\r\n    // Event which will fire every time transaction is executed\r\n    event ExecuteTransaction(address indexed target, uint value, string signature,  bytes data);\r\n\r\n    // Modifiers\r\n    modifier onlyMember {\r\n        require(\r\n            membersRegistry.isMember(msg.sender) == true,\r\n            \"Only DcentralabCongress member can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice function to set members registry address\r\n     *\r\n     * @param _membersRegistry - address of members registry\r\n     */\r\n    function setMembersRegistry(\r\n        address _membersRegistry\r\n    )\r\n    external\r\n    {\r\n        require(\r\n            address(membersRegistry) == address(0x0),\r\n            \"DcentralabCongress:setMembersRegistry: membersRegistry is already set\"\r\n        );\r\n        membersRegistry = ICongressMembersRegistry(_membersRegistry);\r\n    }\r\n\r\n    /**\r\n     * @notice function to propose\r\n     *\r\n     * @param targets - array of address\r\n     * @param values - array of values\r\n     * @param signatures - array of signatures\r\n     * @param calldatas - array of data\r\n     * @param description - array of descriptions\r\n     *\r\n     * @return id of proposal\r\n     */\r\n    function propose(\r\n        address[] memory targets,\r\n        uint[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    )\r\n    external\r\n    onlyMember\r\n    returns (uint)\r\n    {\r\n        require(\r\n            targets.length == values.length &&\r\n            targets.length == signatures.length &&\r\n            targets.length == calldatas.length,\r\n            \"DcentralabCongress::propose: proposal function information arity mismatch\"\r\n        );\r\n\r\n        require(targets.length != 0, \"DcentralabCongress::propose: must provide actions\");\r\n\r\n        proposalCount++;\r\n\r\n        Proposal memory newProposal = Proposal({\r\n        id: proposalCount,\r\n        proposer: msg.sender,\r\n        targets: targets,\r\n        values: values,\r\n        signatures: signatures,\r\n        calldatas: calldatas,\r\n        forVotes: 0,\r\n        againstVotes: 0,\r\n        canceled: false,\r\n        executed: false,\r\n        timestamp: block.timestamp\r\n        });\r\n\r\n        proposals[newProposal.id] = newProposal;\r\n\r\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, description);\r\n        return newProposal.id;\r\n    }\r\n\r\n    /**\r\n     * @notice function to cast vote\r\n     *\r\n     * @param proposalId - id proposal\r\n     * @param support - agree or don't agree on proposal\r\n     */\r\n    function castVote(\r\n        uint proposalId,\r\n        bool support\r\n    )\r\n    external\r\n    onlyMember\r\n    {\r\n        return _castVote(msg.sender, proposalId, support);\r\n    }\r\n\r\n    function _castVote(\r\n        address voter,\r\n        uint proposalId,\r\n        bool support\r\n    )\r\n    internal\r\n    {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = receipts[proposal.id][voter];\r\n        require(proposal.id == proposalId);\r\n        require(!receipt.hasVoted, \"DcentralabCongress::_castVote: voter already voted\");\r\n\r\n        if (support) {\r\n            proposal.forVotes = add256(proposal.forVotes, 1);\r\n        } else {\r\n            proposal.againstVotes = add256(proposal.againstVotes, 1);\r\n        }\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.support = support;\r\n\r\n        emit VoteCast(voter, proposalId, support);\r\n    }\r\n\r\n    /**\r\n     * @notice function to execute on what is voted\r\n     *\r\n     * @param proposalId - id of proposal\r\n     */\r\n    function execute(\r\n        uint proposalId\r\n    )\r\n    external\r\n    onlyMember\r\n    payable\r\n    {\r\n        // load the proposal\r\n        Proposal storage proposal = proposals[proposalId];\r\n        // Require that proposal is not previously executed neither cancelled\r\n        require(!proposal.executed && !proposal.canceled, \"Proposal was canceled or executed\");\r\n        // Mark that proposal is executed\r\n        proposal.executed = true;\r\n        // Require that votes in favor of proposal are greater or equal to minimalQuorum\r\n        require(proposal.forVotes >= membersRegistry.getMinimalQuorum(), \"Not enough votes in favor\");\r\n\r\n        for (uint i = 0; i < proposal.targets.length; i++) {\r\n            bytes memory callData;\r\n\r\n            if (bytes(proposal.signatures[i]).length == 0) {\r\n                callData = proposal.calldatas[i];\r\n            } else {\r\n                callData = abi.encodePacked(\r\n                    bytes4(keccak256(bytes(proposal.signatures[i]))),\r\n                    proposal.calldatas[i]\r\n                );\r\n            }\r\n\r\n            // solium-disable-next-line security/no-call-value\r\n            (bool success,) = proposal.targets[i].call{value:proposal.values[i]}(callData);\r\n\r\n            // Require that transaction went through\r\n            require(\r\n                success,\r\n                \"DcentralabCongress::executeTransaction: Transaction execution reverted.\"\r\n            );\r\n\r\n            // Emit event that transaction is being executed\r\n            emit ExecuteTransaction(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i]\r\n            );\r\n        }\r\n\r\n        // Emit event that proposal executed\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice function to cancel proposal\r\n     *\r\n     * @param proposalId - id of proposal\r\n     */\r\n    function cancel(\r\n        uint proposalId\r\n    )\r\n    external\r\n    onlyMember\r\n    {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        // Require that proposal is not previously executed neither cancelled\r\n        require(!proposal.executed && !proposal.canceled, \"DcentralabCongress:cancel: Proposal already executed or canceled\");\r\n        // 3 days after proposal can get cancelled\r\n        require(block.timestamp >= proposal.timestamp + 259200, \"DcentralabCongress:cancel: Time lock hasn't ended yet\");\r\n        // Proposal with reached minimalQuorum cant be cancelled\r\n        require(proposal.forVotes < membersRegistry.getMinimalQuorum(), \"DcentralabCongress:cancel: Proposal already reached quorum\");\r\n        // Set that proposal is cancelled\r\n        proposal.canceled = true;\r\n        // Emit event\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice function to see what was voted on\r\n     *\r\n     * @param proposalId - id proposal\r\n     *\r\n     * @return targets\r\n     * @return values\r\n     * @return signatures\r\n     * @return calldatas\r\n     */\r\n    function getActions(\r\n        uint proposalId\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        address[] memory targets,\r\n        uint[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas\r\n    )\r\n    {\r\n        Proposal storage p = proposals[proposalId];\r\n        return (p.targets, p.values, p.signatures, p.calldatas);\r\n    }\r\n\r\n    /**\r\n     * @notice function to see address of members registry\r\n     *\r\n     * @return address of members registry\r\n     */\r\n    function getMembersRegistry()\r\n    external\r\n    view\r\n    returns (address)\r\n    {\r\n        return address(membersRegistry);\r\n    }\r\n\r\n    /**\r\n     * @notice function to check addition\r\n     *\r\n     * @param a - number1\r\n     * @param b - number2\r\n     *\r\n     * @return result of addition\r\n     */\r\n    function add256(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    receive()\r\n    external\r\n    payable\r\n    {\r\n        emit ReceivedEther(msg.sender, msg.value);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembersRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_membersRegistry\",\"type\":\"address\"}],\"name\":\"setMembersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DcentralabCongress", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f078c6c56fee77bfef41499b6357bc7a3f660252a88b9192715c23aeeee286ce"}