{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/ChainZokuAuctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./libs/Initialize.sol\\\";\\r\\nimport \\\"./libs/ERC721AManager.sol\\\";\\r\\nimport \\\"./libs/ShareProxy.sol\\\";\\r\\nimport \\\"./libs/AuctionMulti.sol\\\";\\r\\nimport \\\"./libs/Pause.sol\\\";\\r\\n\\r\\ncontract ChainZokuAuctions is AuctionMulti, ERC721AManager, Initialize, ShareProxy, Pause, ReentrancyGuard {\\r\\n\\r\\n    event EndAuction(uint256 auctionId, uint256 count);\\r\\n\\r\\n    function init(address _resolverAddress, address _zokuByChainZoku, address _shareContract, address _multiSigContract) public onlyOwner isNotInitialized {\\r\\n        AuctionMulti.setResolverAddress(_resolverAddress);\\r\\n        ERC721AManager._setERC721Address(_zokuByChainZoku);\\r\\n        ShareProxy._setShareContract(_shareContract);\\r\\n        MultiSigProxy._setMultiSigContract(_multiSigContract);\\r\\n    }\\r\\n\\r\\n    function SendBid(uint256 _auctionId, uint256 _count) public payable override notPaused nonReentrant {\\r\\n        super.SendBid(_auctionId, _count);\\r\\n    }\\r\\n\\r\\n    function ResolveAuction(uint256 _currentAuctionId) public onlyOwnerOrAdminsOrResolver {\\r\\n        AuctionMulti.closeAuction(_currentAuctionId);\\r\\n\\r\\n        uint256 count = 0;\\r\\n        for(uint256 i = 0; i < auctions[_currentAuctionId].count; i++){\\r\\n            if(bids[_currentAuctionId][i].bidder != address(this)){\\r\\n                ERC721AManager._mint(bids[_currentAuctionId][i].bidder, 1);\\r\\n                count += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ShareProxy.withdraw();\\r\\n\\r\\n        emit EndAuction(_currentAuctionId, count);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/Admins.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract Admins is Ownable{\\r\\n\\r\\n    mapping(address => bool) private admins;\\r\\n\\r\\n    /**\\r\\n    @dev check if the address is admin or not\\r\\n    **/\\r\\n    function isAdmin(address _admin) public view returns(bool) {\\r\\n        return admins[_admin];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Set the wallet address who can pass the onlyAdmin modifier\\r\\n    **/\\r\\n    function setAdminAddress(address _admin, bool _active) public virtual onlyOwner {\\r\\n        admins[_admin] = _active;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice Check if the sender is owner() or admin\\r\\n    **/\\r\\n    modifier onlyOwnerOrAdmins() {\\r\\n        require(admins[_msgSender()] == true || owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/AuctionMulti.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./Admins.sol\\\";\\r\\n\\r\\nerror WithdrawBidFailed();\\r\\nerror BidWithValueTooLow();\\r\\nerror BidWithStepTooLow();\\r\\nerror BidWithBadAmount();\\r\\nerror BidWithBadCount();\\r\\nerror AuctionNotInit();\\r\\nerror AuctionNotOpen();\\r\\nerror AuctionClosed();\\r\\nerror AuctionAlreadyInit();\\r\\nerror NewAuctionNotInit();\\r\\n\\r\\ncontract AuctionMulti is Admins {\\r\\n\\r\\n    struct Bid {\\r\\n        address bidder;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct Auction {\\r\\n        uint64 startAt;\\r\\n        uint64 endAt;\\r\\n        uint256 count;\\r\\n        uint256 minBid;\\r\\n        bool closed;\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Auction) public auctions;\\r\\n    mapping(uint256 => Bid[50]) public bids;\\r\\n\\r\\n    event NewBid(uint256 auctionId, address wallet, uint256 amount);\\r\\n    event RefundBid(uint256 auctionId, address wallet, uint256 amount);\\r\\n\\r\\n    address public resolverAddress;\\r\\n\\r\\n    modifier onlyOwnerOrAdminsOrResolver() {\\r\\n        require(isAdmin(_msgSender()) || owner() == _msgSender() || resolverAddress == _msgSender(), \\\"Sender: is not resolverAddress\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier auctionAvailable(uint256 _auctionId){\\r\\n        if(!isAuctionInitialized(_auctionId)){\\r\\n            revert AuctionNotInit();\\r\\n        }\\r\\n        if(isAuctionClosed(_auctionId)){\\r\\n            revert AuctionClosed();\\r\\n        }\\r\\n        if(!isAuctionOpen(_auctionId)){\\r\\n            revert AuctionNotOpen();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function configureAuction(uint256 _auctionId, Auction memory _newAuction) public virtual onlyOwnerOrAdminsOrResolver {\\r\\n        if(auctions[_auctionId].initialized){\\r\\n            revert AuctionAlreadyInit();\\r\\n        }\\r\\n        if(!_newAuction.initialized){\\r\\n            revert NewAuctionNotInit();\\r\\n        }\\r\\n\\r\\n        auctions[_auctionId] = _newAuction;\\r\\n\\r\\n        for(uint256 i = 0; i < _newAuction.count; i++){\\r\\n            bids[_auctionId][i].bidder = address(this);\\r\\n            bids[_auctionId][i].amount = _newAuction.minBid;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function editAuction(uint256 _auctionId, Auction memory _auction) public virtual onlyOwnerOrAdminsOrResolver {\\r\\n        if(!auctions[_auctionId].initialized){\\r\\n            revert AuctionNotInit();\\r\\n        }\\r\\n        if(auctions[_auctionId].closed || _auction.closed){\\r\\n            revert AuctionClosed();\\r\\n        }\\r\\n        if(!_auction.initialized){\\r\\n            revert NewAuctionNotInit();\\r\\n        }\\r\\n\\r\\n        auctions[_auctionId] = _auction;\\r\\n    }\\r\\n\\r\\n    function closeAuction(uint256 _auctionId) public virtual onlyOwnerOrAdminsOrResolver {\\r\\n        if(!auctions[_auctionId].initialized){\\r\\n            revert AuctionNotInit();\\r\\n        }\\r\\n        if(auctions[_auctionId].closed){\\r\\n            revert AuctionClosed();\\r\\n        }\\r\\n\\r\\n        auctions[_auctionId].closed = true;\\r\\n    }\\r\\n\\r\\n    function SendBid(uint256 _auctionId, uint256 _count) public payable virtual auctionAvailable(_auctionId) {\\r\\n        uint256 amount = msg.value;\\r\\n\\r\\n        if(_count > auctions[_auctionId].count || _count <= 0){\\r\\n            revert BidWithBadCount();\\r\\n        }\\r\\n\\r\\n        unchecked{\\r\\n            uint256 value = amount / _count;\\r\\n\\r\\n            for(uint256 i = 0; i < _count; i++){\\r\\n                _sendBid(_auctionId, value);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function _sendBid(uint256 _auctionId, uint256 _amount) internal virtual {\\r\\n\\r\\n        uint256 minBidValue = getMinBid(_auctionId);\\r\\n\\r\\n        if(minBidValue >= _amount){\\r\\n            revert BidWithValueTooLow();\\r\\n        }\\r\\n\\r\\n        uint256 currentIndex = _getBidIndex(_auctionId, _amount);\\r\\n\\r\\n        if(currentIndex >= auctions[_auctionId].count){\\r\\n            revert BidWithValueTooLow();\\r\\n        }\\r\\n\\r\\n        if(_amount < bids[_auctionId][currentIndex].amount + 0.001 ether){\\r\\n            revert BidWithStepTooLow();\\r\\n        }\\r\\n\\r\\n        if(_amount % 0.001 ether != 0){\\r\\n            revert BidWithBadAmount();\\r\\n        }\\r\\n\\r\\n        // save the last bidder before moving\\r\\n        Bid memory lastBider = bids[_auctionId][auctions[_auctionId].count - 1];\\r\\n\\r\\n        // moving old auctions in the bids array\\r\\n        for (uint256 i = auctions[_auctionId].count - 1 ; i > currentIndex; i--) {\\r\\n            bids[_auctionId][i] = bids[_auctionId][i - 1];\\r\\n        }\\r\\n\\r\\n        // add new bidder in the bids array\\r\\n        bids[_auctionId][currentIndex] = Bid(_msgSender(), _amount);\\r\\n\\r\\n        emit NewBid(_auctionId, _msgSender(), _amount);\\r\\n\\r\\n        // refund the last bidder of the auction\\r\\n        if(lastBider.bidder != address(this)){\\r\\n            emit RefundBid(_auctionId, lastBider.bidder, lastBider.amount);\\r\\n\\r\\n            _withdraw(lastBider.bidder, lastBider.amount);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function _getBidIndex(uint256 _auctionId,uint256 _amount) private view returns(uint256){\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = 0; i < auctions[_auctionId].count; i++) {\\r\\n            if(_amount > bids[_auctionId][i].amount) {\\r\\n                currentIndex = i;\\r\\n                break;\\r\\n            }\\r\\n            if(_amount == bids[_auctionId][i].amount){\\r\\n                currentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n        return currentIndex;\\r\\n    }\\r\\n\\r\\n    function getBids(uint256 _auctionId) public view returns (Bid[] memory) {\\r\\n        Bid[] memory currentBids = new Bid[](auctions[_auctionId].count);\\r\\n        for(uint256 i = 0; i < auctions[_auctionId].count; i++){\\r\\n            currentBids[i] = bids[_auctionId][i];\\r\\n        }\\r\\n        return currentBids;\\r\\n    }\\r\\n\\r\\n    function getMinBid(uint256 _auctionId) public view returns(uint256){\\r\\n        return bids[_auctionId][auctions[_auctionId].count - 1].amount;\\r\\n    }\\r\\n\\r\\n    function isBidValid(uint256 _auctionId, uint256 _count, uint256 _totalAmount) public view returns(bool){\\r\\n        if(_count > auctions[_auctionId].count || _count <= 0){\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        unchecked{\\r\\n            uint256 amount = _totalAmount / _count;\\r\\n\\r\\n            Bid[] memory _bids = new Bid[](50);\\r\\n            for(uint256 i = 0; i < auctions[_auctionId].count; i++){\\r\\n                _bids[i] = bids[_auctionId][i];\\r\\n            }\\r\\n\\r\\n            for(uint256 j = 0; j < _count; j++){\\r\\n\\r\\n                uint256 minBidValue = _bids[auctions[_auctionId].count - 1].amount;\\r\\n\\r\\n                if(minBidValue >= amount){\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                uint256 currentIndex = 0;\\r\\n                for (uint256 i = 0; i < auctions[_auctionId].count; i++) {\\r\\n                    if(amount > _bids[i].amount) {\\r\\n                        currentIndex = i;\\r\\n                        break;\\r\\n                    }\\r\\n                    if(amount == _bids[i].amount){\\r\\n                        currentIndex += 1;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if(currentIndex >= auctions[_auctionId].count || amount < _bids[currentIndex].amount + 0.001 ether || amount % 0.001 ether != 0){\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                // moving old auctions in the bids array\\r\\n                for (uint256 i = auctions[_auctionId].count - 1 ; i > currentIndex; i--) {\\r\\n                    _bids[i] = _bids[i - 1];\\r\\n                }\\r\\n\\r\\n                // add new bidder in the bids array\\r\\n                _bids[currentIndex] = Bid(_msgSender(), amount);\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isAuctionInitialized(uint256 _auctionId) public view returns(bool){\\r\\n        return auctions[_auctionId].initialized;\\r\\n    }\\r\\n\\r\\n    function isAuctionClosed(uint256 _auctionId) public view returns(bool){\\r\\n        return auctions[_auctionId].closed;\\r\\n    }\\r\\n\\r\\n    function isAuctionOpen(uint256 _auctionId) public view returns(bool){\\r\\n        return block.timestamp >= auctions[_auctionId].startAt && block.timestamp <= auctions[_auctionId].endAt;\\r\\n    }\\r\\n\\r\\n    function setResolverAddress(address _resolverAddress) public onlyOwnerOrAdmins {\\r\\n        resolverAddress = _resolverAddress;\\r\\n    }\\r\\n\\r\\n    function _withdraw(address _address, uint256 _amount) private {\\r\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\r\\n        if(!success){\\r\\n            revert WithdrawBidFailed();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/ERC721AManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./interfaces/IERC721Manager.sol\\\";\\r\\nimport \\\"./interfaces/IERC721AProxy.sol\\\";\\r\\nimport \\\"./MultiSigProxy.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract ERC721AManager is IERC721Manager, MultiSigProxy {\\r\\n\\r\\n    IERC721AProxy public ERC721Address;\\r\\n\\r\\n    function setERC721Address(address _ERC721Address) public onlyOwnerOrAdmins{\\r\\n        MultiSigProxy.validate(\\\"setERC721Address\\\");\\r\\n\\r\\n        _setERC721Address(_ERC721Address);\\r\\n    }\\r\\n    function _setERC721Address(address _ERC721Address) internal {\\r\\n        ERC721Address = IERC721AProxy(_ERC721Address);\\r\\n    }\\r\\n    function _mint(address _wallet, uint256 _count) internal{\\r\\n        ERC721Address.mint(_wallet, _count);\\r\\n    }\\r\\n    function _safeMint(address _wallet, uint256 _count) internal{\\r\\n        ERC721Address.mint(_wallet, _count);\\r\\n    }\\r\\n    function _burn(uint256 _tokenId) internal{\\r\\n        ERC721Address.burn(_tokenId);\\r\\n    }\\r\\n    function _totalSupply() internal view returns(uint256){\\r\\n        return ERC721Address.totalSupply();\\r\\n    }\\r\\n    function _totalMinted() internal view returns(uint256){\\r\\n        return ERC721Address.totalMinted();\\r\\n    }\\r\\n    function _totalBurned() internal view returns(uint256){\\r\\n        return ERC721Address.totalBurned();\\r\\n    }\\r\\n    function balanceOf(address _wallet) internal view returns(uint256){\\r\\n        return ERC721Address.balanceOf(_wallet);\\r\\n    }\\r\\n    function ownerOf(uint256 _tokenId) internal view returns(address){\\r\\n        return ERC721Address.ownerOf(_tokenId);\\r\\n    }\\r\\n    function tokensOfOwner(address _wallet) internal view returns(uint256[] memory){\\r\\n        return ERC721Address.tokensOfOwner(_wallet);\\r\\n    }\\r\\n    function transferFrom(address, address, uint256) public override virtual returns(bool) {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/Initialize.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract Initialize {\\r\\n\\r\\n    bool private _initialized = false;\\r\\n\\r\\n    modifier isNotInitialized() {\\r\\n        require(_initialized == false, \\\"Already Initialized\\\");\\r\\n        _;\\r\\n        _initialized = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/interfaces/IERC721AProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"erc721a/contracts/extensions/IERC721AQueryable.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface IERC721AProxy is IERC721AQueryable{\\r\\n    function mint(address _wallet, uint256 _count) external;\\r\\n    function burn(uint256 _tokenId) external;\\r\\n    function totalMinted() external view returns(uint256);\\r\\n    function totalBurned() external view returns(uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/interfaces/IERC721Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface IERC721Manager{\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external returns(bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/interfaces/IMultiSig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\ninterface IMultiSig {\\r\\n    function validate(string memory) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/MultiSigProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./interfaces/IMultiSig.sol\\\";\\r\\nimport \\\"./Admins.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract MultiSigProxy is Admins{\\r\\n\\r\\n    address public multiSigContract;\\r\\n\\r\\n    function _setMultiSigContract(address _contract) internal {\\r\\n        multiSigContract = _contract;\\r\\n    }\\r\\n\\r\\n    function setMultiSigContract(address _contract) public onlyOwnerOrAdmins {\\r\\n        IMultiSig(multiSigContract).validate(\\\"setMultiSigContract\\\");\\r\\n\\r\\n        _setMultiSigContract(_contract);\\r\\n    }\\r\\n\\r\\n    function validate(string memory _method) internal {\\r\\n        IMultiSig(multiSigContract).validate(_method);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/Pause.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Admins.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract Pause is Admins{\\r\\n\\r\\n    bool public pause = false;\\r\\n\\r\\n    modifier notPaused(){\\r\\n        if(_msgSender() != owner()){\\r\\n            require(pause == false, \\\"Contract paused\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setPause(bool _pause) public onlyOwnerOrAdmins {\\r\\n        pause = _pause;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChainZokuAuctionManager/libs/ShareProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./MultiSigProxy.sol\\\";\\r\\n\\r\\n// @author: miinded.com\\r\\n\\r\\nabstract contract ShareProxy is MultiSigProxy {\\r\\n\\r\\n    address public shareContract;\\r\\n\\r\\n    function setShareContract(address _shareContract) public onlyOwnerOrAdmins {\\r\\n        MultiSigProxy.validate(\\\"setShareContract\\\");\\r\\n\\r\\n        _setShareContract(_shareContract);\\r\\n    }\\r\\n\\r\\n    function _setShareContract(address _shareContract) internal {\\r\\n        shareContract = _shareContract;\\r\\n    }\\r\\n    function withdraw() public onlyOwnerOrAdmins {\\r\\n        (bool success, ) = shareContract.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/IERC721AQueryable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AuctionAlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidWithBadAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidWithBadCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidWithStepTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidWithValueTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewAuctionNotInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawBidFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"EndAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundBid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC721Address\",\"outputs\":[{\"internalType\":\"contract IERC721AProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentAuctionId\",\"type\":\"uint256\"}],\"name\":\"ResolveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"SendBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct AuctionMulti.Auction\",\"name\":\"_newAuction\",\"type\":\"tuple\"}],\"name\":\"configureAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct AuctionMulti.Auction\",\"name\":\"_auction\",\"type\":\"tuple\"}],\"name\":\"editAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionMulti.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getMinBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zokuByChainZoku\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shareContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"isAuctionClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"isAuctionInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"isAuctionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"isBidValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721Address\",\"type\":\"address\"}],\"name\":\"setERC721Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setMultiSigContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolverAddress\",\"type\":\"address\"}],\"name\":\"setResolverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shareContract\",\"type\":\"address\"}],\"name\":\"setShareContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChainZokuAuctions", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}