{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/multivault/MultiVaultToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IMultiVaultToken.sol\\\";\\n\\nimport \\\"./libraries/Address.sol\\\";\\n\\nimport \\\"./utils/Ownable.sol\\\";\\n\\n\\ncontract MultiVaultToken is IMultiVaultToken, Context, IERC20, IERC20Metadata, Ownable {\\n    uint activation;\\n\\n    constructor() Ownable(_msgSender()) {}\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol} and {decimals}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external override {\\n        require(activation == 0);\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n\\n        activation = block.number;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function mint(\\n        address account,\\n        uint amount\\n    ) external override onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(\\n        address account,\\n        uint amount\\n    ) external override onlyOwner {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n        _balances[from] = fromBalance - amount;\\n    }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n        _balances[account] = accountBalance - amount;\\n    }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - amount);\\n        }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/IEverscale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\ninterface IEverscale {\\n    struct EverscaleAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    struct EverscaleEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/IMultiVaultToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\ninterface IMultiVaultToken {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external;\\n\\n    function burn(address account, uint256 amount) external;\\n    function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\ninterface IMultiVaultFacetLiquidity {\\n    struct Liquidity {\\n        uint activation;\\n        uint supply;\\n        uint cash;\\n        uint interest;\\n    }\\n\\n    function mint(\\n        address token,\\n        uint amount,\\n        address receiver\\n    ) external;\\n\\n    function redeem(\\n        address token,\\n        uint amount,\\n        address receiver\\n    ) external;\\n\\n    function exchangeRateCurrent(\\n        address token\\n    ) external view returns(uint);\\n\\n    function getCash(\\n        address token\\n    ) external view returns(uint);\\n\\n    function getSupply(\\n        address token\\n    ) external view returns(uint);\\n\\n    function getLPToken(\\n        address token\\n    ) external view returns (address);\\n\\n    function setTokenInterest(\\n        address token,\\n        uint interest\\n    ) external;\\n\\n    function setDefaultInterest(\\n        uint interest\\n    ) external;\\n\\n    function liquidity(\\n        address token\\n    ) external view returns (Liquidity memory);\\n\\n    function convertLPToUnderlying(\\n        address token,\\n        uint amount\\n    ) external view returns (uint);\\n\\n    function convertUnderlyingToLP(\\n        address token,\\n        uint amount\\n    ) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetPendingWithdrawals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../IEverscale.sol\\\";\\nimport \\\"./IMultiVaultFacetWithdraw.sol\\\";\\n\\n\\ninterface IMultiVaultFacetPendingWithdrawals {\\n    enum ApproveStatus { NotRequired, Required, Approved, Rejected }\\n\\n    struct WithdrawalLimits {\\n        uint undeclared;\\n        uint daily;\\n        bool enabled;\\n    }\\n\\n    struct PendingWithdrawalParams {\\n        address token;\\n        uint256 amount;\\n        uint256 bounty;\\n        uint256 timestamp;\\n        ApproveStatus approveStatus;\\n\\n        uint256 chainId;\\n        IMultiVaultFacetWithdraw.Callback callback;\\n    }\\n\\n    struct PendingWithdrawalId {\\n        address recipient;\\n        uint256 id;\\n    }\\n\\n    struct WithdrawalPeriodParams {\\n        uint256 total;\\n        uint256 considered;\\n    }\\n\\n    function pendingWithdrawalsPerUser(address user) external view returns (uint);\\n    function pendingWithdrawalsTotal(address token) external view returns (uint);\\n\\n    function pendingWithdrawals(\\n        address user,\\n        uint256 id\\n    ) external view returns (PendingWithdrawalParams memory);\\n\\n    function setPendingWithdrawalBounty(\\n        uint256 id,\\n        uint256 bounty\\n    ) external;\\n\\n    function cancelPendingWithdrawal(\\n        uint256 id,\\n        uint256 amount,\\n        IEverscale.EverscaleAddress memory recipient,\\n        uint expected_evers,\\n        bytes memory payload,\\n        uint bounty\\n    ) external payable;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId memory pendingWithdrawalId,\\n        ApproveStatus approveStatus\\n    ) external;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId[] memory pendingWithdrawalId,\\n        ApproveStatus[] memory approveStatus\\n    ) external;\\n\\n    function forceWithdraw(\\n        PendingWithdrawalId[] memory pendingWithdrawalIds\\n    ) external;\\n\\n    function withdrawalLimits(\\n        address token\\n    ) external view returns(WithdrawalLimits memory);\\n\\n    function withdrawalPeriods(\\n        address token,\\n        uint256 withdrawalPeriodId\\n    ) external view returns (WithdrawalPeriodParams memory);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVaultFacetTokens {\\n    enum TokenType { Native, Alien }\\n\\n    struct TokenPrefix {\\n        uint activation;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TokenMeta {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    struct Token {\\n        uint activation;\\n        bool blacklisted;\\n        uint depositFee;\\n        uint withdrawFee;\\n        bool isNative;\\n        address custom;\\n        uint256 depositLimit;\\n    }\\n\\n    function prefixes(address _token) external view returns (TokenPrefix memory);\\n    function tokens(address _token) external view returns (Token memory);\\n    function natives(address _token) external view returns (IEverscale.EverscaleAddress memory);\\n\\n    function setPrefix(\\n        address token,\\n        string memory name_prefix,\\n        string memory symbol_prefix\\n    ) external;\\n\\n    function setDepositLimit(\\n        address token,\\n        uint amount\\n    ) external;\\n\\n    function setTokenBlacklist(\\n        address token,\\n        bool blacklisted\\n    ) external;\\n\\n    function getNativeToken(\\n        IEverscale.EverscaleAddress memory native\\n    ) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetTokensEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\ninterface IMultiVaultFacetTokensEvents {\\n    event UpdateTokenPrefix(address token, string name_prefix, string symbol_prefix);\\n    event UpdateTokenBlacklist(address token, bool status);\\n    event UpdateTokenDepositLimit(address token, uint limit);\\n\\n    event TokenActivated(\\n        address token,\\n        uint activation,\\n        bool isNative,\\n        uint depositFee,\\n        uint withdrawFee\\n    );\\n\\n    event TokenCreated(\\n        address token,\\n        int8 native_wid,\\n        uint256 native_addr,\\n        string name_prefix,\\n        string symbol_prefix,\\n        string name,\\n        string symbol,\\n        uint8 decimals\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVaultFacetWithdraw {\\n    struct Callback {\\n        address recipient;\\n        bytes payload;\\n        bool strict;\\n    }\\n\\n    struct NativeWithdrawalParams {\\n        IEverscale.EverscaleAddress native;\\n        IMultiVaultFacetTokens.TokenMeta meta;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n        Callback callback;\\n    }\\n\\n    struct AlienWithdrawalParams {\\n        address token;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n        Callback callback;\\n    }\\n\\n    function withdrawalIds(bytes32) external view returns (bool);\\n\\n    function saveWithdrawNative(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint bounty\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/facets/MultiVaultFacetTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokensEvents.sol\\\";\\n\\nimport \\\"../../MultiVaultToken.sol\\\";\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\nimport \\\"../helpers/MultiVaultHelperActors.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperTokens.sol\\\";\\n\\n\\ncontract MultiVaultFacetTokens is\\n    MultiVaultHelperActors,\\n    MultiVaultHelperTokens,\\n    IMultiVaultFacetTokens\\n{\\n    function getInitHash() public pure returns(bytes32) {\\n        bytes memory bytecode = type(MultiVaultToken).creationCode;\\n        return keccak256(abi.encodePacked(bytecode));\\n    }\\n\\n    /// @notice Get token prefix\\n    /// @dev Used to set up in advance prefix for the ERC20 native token\\n    /// @param _token Token address\\n    /// @return Name and symbol prefix\\n    function prefixes(\\n        address _token\\n    ) external view override returns (IMultiVaultFacetTokens.TokenPrefix memory) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.prefixes_[_token];\\n    }\\n\\n    /// @notice Get token information\\n    /// @param _token Token address\\n    function tokens(\\n        address _token\\n    ) external view override returns (IMultiVaultFacetTokens.Token memory) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.tokens_[_token];\\n    }\\n\\n    /// @notice Get native Everscale token address for EVM token\\n    /// @param _token Token address\\n    function natives(\\n        address _token\\n    ) external view override returns (IEverscale.EverscaleAddress memory) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.natives_[_token];\\n    }\\n\\n    /// @notice Set prefix for native token\\n    /// @param token Expected native token address, see note on `getNative`\\n    /// @param name_prefix Name prefix, leave empty for no-prefix\\n    /// @param symbol_prefix Symbol prefix, leave empty for no-prefix\\n    function setPrefix(\\n        address token,\\n        string memory name_prefix,\\n        string memory symbol_prefix\\n    ) external override onlyGovernanceOrManagement {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        TokenPrefix memory prefix = s.prefixes_[token];\\n\\n        if (prefix.activation == 0) {\\n            prefix.activation = block.number;\\n        }\\n\\n        prefix.name = name_prefix;\\n        prefix.symbol = symbol_prefix;\\n\\n        s.prefixes_[token] = prefix;\\n\\n        emit UpdateTokenPrefix(token, name_prefix, symbol_prefix);\\n    }\\n\\n    function setTokenBlacklist(\\n        address token,\\n        bool blacklisted\\n    ) external override onlyGovernance {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.tokens_[token].blacklisted = blacklisted;\\n\\n        emit UpdateTokenBlacklist(token, blacklisted);\\n    }\\n\\n    function setDepositLimit(\\n        address token,\\n        uint limit\\n    ) external override onlyGovernance {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.tokens_[token].depositLimit = limit;\\n\\n        emit UpdateTokenDepositLimit(token, limit);\\n    }\\n\\n    function getNativeToken(\\n        IEverscale.EverscaleAddress memory native\\n    ) external view override returns (address token) {\\n        token = _getNativeToken(native);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperActors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperActors {\\n    modifier onlyPendingGovernance() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.pendingGovernance);\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance);\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrManagement() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance || msg.sender == s.management);\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrWithdrawGuardian() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance || msg.sender == s.withdrawGuardian);\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperEmergency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperEmergency {\\n    modifier onlyEmergencyDisabled() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(!s.emergencyShutdown);\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetWithdraw.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokensEvents.sol\\\";\\nimport \\\"../../interfaces/IEverscale.sol\\\";\\n\\nimport \\\"../../MultiVaultToken.sol\\\";\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\nimport \\\"./MultiVaultHelperEmergency.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperTokens is\\n    MultiVaultHelperEmergency,\\n    IMultiVaultFacetTokensEvents\\n{\\n    modifier initializeToken(address _token) {\\n        _initializeToken(_token);\\n        _;\\n    }\\n    modifier initializeWethToken() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        _initializeToken(s.weth);\\n        _;\\n    }\\n\\n    function _initializeToken(address _token) internal {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n        if (s.tokens_[_token].activation == 0) {\\n            // Non-activated tokens are always aliens, native tokens are activate on the first `saveWithdrawNative`\\n\\n            require(\\n                IERC20Metadata(_token).decimals() <= MultiVaultStorage.DECIMALS_LIMIT &&\\n                bytes(IERC20Metadata(_token).symbol()).length <= MultiVaultStorage.SYMBOL_LENGTH_LIMIT &&\\n                bytes(IERC20Metadata(_token).name()).length <= MultiVaultStorage.NAME_LENGTH_LIMIT\\n            );\\n\\n            _activateToken(_token, false);\\n        }\\n    }\\n\\n    modifier tokenNotBlacklisted(address _token) {\\n        bool isBlackListed = isTokenNoBlackListed(_token);\\n        require(!isBlackListed);\\n\\n        _;\\n    }\\n    modifier wethNotBlacklisted() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n        bool isBlackListed = isTokenNoBlackListed(s.weth);\\n        require(!isBlackListed);\\n\\n        _;\\n    }\\n    function isTokenNoBlackListed(address _token) internal view returns (bool) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n        return s.tokens_[_token].blacklisted;\\n    }\\n\\n    function _activateToken(\\n        address token,\\n        bool isNative\\n    ) internal {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        uint depositFee = isNative ? s.defaultNativeDepositFee : s.defaultAlienDepositFee;\\n        uint withdrawFee = isNative ? s.defaultNativeWithdrawFee : s.defaultAlienWithdrawFee;\\n\\n        s.tokens_[token] = IMultiVaultFacetTokens.Token({\\n            activation: block.number,\\n            blacklisted: false,\\n            isNative: isNative,\\n            depositFee: depositFee,\\n            withdrawFee: withdrawFee,\\n            custom: address(0),\\n            depositLimit: 0\\n        });\\n\\n        emit TokenActivated(\\n            token,\\n            block.number,\\n            isNative,\\n            depositFee,\\n            withdrawFee\\n        );\\n    }\\n\\n    function _getNativeWithdrawalToken(\\n        IMultiVaultFacetWithdraw.NativeWithdrawalParams memory withdrawal\\n    ) internal returns (address) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        // Derive native token address from the Everscale (token wid, token addr)\\n        address token = _getNativeToken(withdrawal.native);\\n\\n        // Token is being withdrawn first time - activate it (set default parameters)\\n        // And deploy ERC20 representation\\n        if (s.tokens_[token].activation == 0) {\\n            _deployTokenForNative(withdrawal.native, withdrawal.meta);\\n            _activateToken(token, true);\\n\\n            s.natives_[token] = withdrawal.native;\\n        }\\n\\n        // Check if there is a custom ERC20 representing this withdrawal.native\\n        address custom = s.tokens_[token].custom;\\n\\n        if (custom != address(0)) return custom;\\n\\n        return token;\\n    }\\n\\n    function _increaseCash(\\n        address token,\\n        uint amount\\n    ) internal {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.liquidity[token].cash += amount;\\n    }\\n\\n    /// @notice Gets the address\\n    /// @param native Everscale token address\\n    /// @return token Token address\\n    function _getNativeToken(\\n        IEverscale.EverscaleAddress memory native\\n    ) internal view returns (address token) {\\n        token = address(uint160(uint(keccak256(abi.encodePacked(\\n            hex'ff',\\n            address(this),\\n            keccak256(abi.encodePacked(native.wid, native.addr)),\\n            hex'192c19818bebb5c6c95f5dcb3c3257379fc46fb654780cb06f3211ee77e1a360' // MultiVaultToken init code hash\\n        )))));\\n    }\\n\\n    function _deployTokenForNative(\\n        IEverscale.EverscaleAddress memory native,\\n        IMultiVaultFacetTokens.TokenMeta memory meta\\n    ) internal returns (address token) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        bytes memory bytecode = type(MultiVaultToken).creationCode;\\n\\n        bytes32 salt = keccak256(abi.encodePacked(native.wid, native.addr));\\n\\n        assembly {\\n            token := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n\\n        // Check custom prefix available\\n        IMultiVaultFacetTokens.TokenPrefix memory prefix = s.prefixes_[token];\\n\\n        string memory name_prefix = prefix.activation == 0 ? MultiVaultStorage.DEFAULT_NAME_PREFIX : prefix.name;\\n        string memory symbol_prefix = prefix.activation == 0 ? MultiVaultStorage.DEFAULT_SYMBOL_PREFIX : prefix.symbol;\\n\\n        IMultiVaultToken(token).initialize(\\n            string(abi.encodePacked(name_prefix, meta.name)),\\n            string(abi.encodePacked(symbol_prefix, meta.symbol)),\\n            meta.decimals\\n        );\\n\\n        emit TokenCreated(\\n            token,\\n            native.wid,\\n            native.addr,\\n            name_prefix,\\n            symbol_prefix,\\n            meta.name,\\n            meta.symbol,\\n            meta.decimals\\n        );\\n    }\\n\\n    function _limitsViolated(\\n        address token,\\n        uint amount\\n    ) internal view returns(bool) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        uint depositLimit = s.tokens_[token].depositLimit;\\n\\n        if (depositLimit == 0) return false;\\n\\n        uint balance = IERC20(token).balanceOf(address(this));\\n\\n        return (balance + amount) > depositLimit;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/storage/MultiVaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/IEverscale.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetPendingWithdrawals.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetLiquidity.sol\\\";\\n\\n\\nlibrary MultiVaultStorage {\\n    uint constant MAX_BPS = 10_000;\\n    uint constant FEE_LIMIT = MAX_BPS / 2;\\n\\n    uint8 constant DECIMALS_LIMIT = 18;\\n    uint256 constant SYMBOL_LENGTH_LIMIT = 32;\\n    uint256 constant NAME_LENGTH_LIMIT = 32;\\n\\n    string constant DEFAULT_NAME_PREFIX = '';\\n    string constant DEFAULT_SYMBOL_PREFIX = '';\\n\\n    string constant DEFAULT_NAME_LP_PREFIX = 'Octus LP ';\\n    string constant DEFAULT_SYMBOL_LP_PREFIX = 'octLP';\\n\\n    uint256 constant WITHDRAW_PERIOD_DURATION_IN_SECONDS = 60 * 60 * 24; // 24 hours\\n\\n    // Previous version of the Vault contract was built with Upgradable Proxy Pattern, without using Diamond storage\\n    bytes32 constant MULTIVAULT_LEGACY_STORAGE_POSITION = 0x0000000000000000000000000000000000000000000000000000000000000002;\\n\\n    uint constant LP_EXCHANGE_RATE_BPS = 10_000_000_000;\\n\\n    struct Storage {\\n        mapping (address => IMultiVaultFacetTokens.Token) tokens_;\\n        mapping (address => IEverscale.EverscaleAddress) natives_;\\n\\n        uint defaultNativeDepositFee;\\n        uint defaultNativeWithdrawFee;\\n        uint defaultAlienDepositFee;\\n        uint defaultAlienWithdrawFee;\\n\\n        bool emergencyShutdown;\\n\\n        address bridge;\\n        mapping(bytes32 => bool) withdrawalIds;\\n        IEverscale.EverscaleAddress rewards_;\\n        IEverscale.EverscaleAddress configurationNative_;\\n        IEverscale.EverscaleAddress configurationAlien_;\\n\\n        address governance;\\n        address pendingGovernance;\\n        address guardian;\\n        address management;\\n\\n        mapping (address => IMultiVaultFacetTokens.TokenPrefix) prefixes_;\\n        mapping (address => uint) fees;\\n\\n        // STORAGE UPDATE 1\\n        // Pending withdrawals\\n        // - Counter pending withdrawals per user\\n        mapping(address => uint) pendingWithdrawalsPerUser;\\n        // - Pending withdrawal details\\n        mapping(address => mapping(uint256 => IMultiVaultFacetPendingWithdrawals.PendingWithdrawalParams)) pendingWithdrawals_;\\n\\n        // - Total amount of pending withdrawals per token\\n        mapping(address => uint) pendingWithdrawalsTotal;\\n\\n        // STORAGE UPDATE 2\\n        // Withdrawal limits per token\\n        mapping(address => IMultiVaultFacetPendingWithdrawals.WithdrawalLimits) withdrawalLimits_;\\n\\n        // - Withdrawal periods. Each period is `WITHDRAW_PERIOD_DURATION_IN_SECONDS` seconds long.\\n        // If some period has reached the `withdrawalLimitPerPeriod` - all the future\\n        // withdrawals in this period require manual approve, see note on `setPendingWithdrawalsApprove`\\n        mapping(address => mapping(uint256 => IMultiVaultFacetPendingWithdrawals.WithdrawalPeriodParams)) withdrawalPeriods_;\\n\\n        address withdrawGuardian;\\n\\n        // STORAGE UPDATE 3\\n        mapping (address => IMultiVaultFacetLiquidity.Liquidity) liquidity;\\n        uint defaultInterest;\\n\\n        // STORAGE UPDATE 4\\n        // - Receives native value, attached to the deposit\\n        address gasDonor;\\n        address weth;\\n    }\\n\\n    function _storage() internal pure returns (Storage storage s) {\\n        assembly {\\n            s.slot := MULTIVAULT_LEGACY_STORAGE_POSITION\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"TokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"native_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"native_addr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name_prefix\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol_prefix\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateTokenBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name_prefix\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol_prefix\",\"type\":\"string\"}],\"name\":\"UpdateTokenPrefix\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getInitHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"native\",\"type\":\"tuple\"}],\"name\":\"getNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"natives\",\"outputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"prefixes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMultiVaultFacetTokens.TokenPrefix\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_prefix\",\"type\":\"string\"}],\"name\":\"setPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"setTokenBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"custom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IMultiVaultFacetTokens.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiVaultFacetTokens", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}