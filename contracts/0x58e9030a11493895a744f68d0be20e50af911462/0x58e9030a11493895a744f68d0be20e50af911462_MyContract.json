{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForETH(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut,address[] calldata path,address to,uint deadline) external payable returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin,address[] calldata path,address to,uint deadline) external payable returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ISushiSwapRouter {\r\n    function swapExactETHForTokens(uint amountOutMin,address[] calldata path,address to,uint deadline) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IWETH9 {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n    function approve(address guy, uint256 wad) external returns (bool);\r\n    function transfer(address dst, uint256 wad) external returns (bool);\r\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address src) external view returns (uint256);\r\n    function allowance(address src, address guy) external view returns (uint256);\r\n\r\n    event Approval(address indexed src, address indexed guy, uint256 wad);\r\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n}\r\n\r\ncontract MyContract {\r\n    address constant WETH_ADDRESS = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6;\r\n    address constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant SUSHISWAP_ROUTER_ADDRESS = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\r\n    IUniswapV2Router private uniswapRouter;\r\n    ISushiSwapRouter private sushiswapRouter;\r\n\r\n    constructor() {\r\n        uniswapRouter = IUniswapV2Router(UNISWAP_ROUTER_ADDRESS);\r\n        sushiswapRouter = ISushiSwapRouter(SUSHISWAP_ROUTER_ADDRESS);\r\n    }\r\n\r\n    function swap(address _address,uint256 _amountIn) external {\r\n        IWETH9(WETH_ADDRESS).transferFrom(msg.sender, address(this), _amountIn);\r\n        IWETH9(WETH_ADDRESS).approve(address(UNISWAP_ROUTER_ADDRESS) ,_amountIn); \r\n        // Buy the token on Uniswap with ETH\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH_ADDRESS;\r\n        path[1] = _address;\r\n        // Get the amount of tokens received\r\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(_amountIn, 0, path, address(this), block.timestamp);\r\n        uint256 amountOut = amounts[1];\r\n        // Sell the token on Sushiswap with _address\r\n        IWETH9(_address).approve(address(SUSHISWAP_ROUTER_ADDRESS) ,amountOut); \r\n        path[0] = _address;\r\n        path[1] = WETH_ADDRESS;\r\n        uint256[] memory amounts_1 = sushiswapRouter.swapExactTokensForTokens(amountOut,0, path, msg.sender, block.timestamp);\r\n        uint256 amountOut_1 = amounts_1[1];\r\n        require(amountOut_1 > _amountIn , \"Arbitrage fail !\");\r\n        \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MyContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f919d4629f20b9d73156d94c758097d270d3cce44b3d9aa18921567d3e1b012a"}