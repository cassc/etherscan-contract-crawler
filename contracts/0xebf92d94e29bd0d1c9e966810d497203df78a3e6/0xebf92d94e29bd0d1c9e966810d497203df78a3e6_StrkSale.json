{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StrkSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport \\\"./utils/WhiteList.sol\\\";\\r\\n\\r\\ninterface IERC20DetailedBytes is IERC20 {\\r\\n\\tfunction name() external view returns (bytes32);\\r\\n\\r\\n\\tfunction symbol() external view returns (bytes32);\\r\\n\\r\\n\\tfunction decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title StrkSale\\r\\n */\\r\\ncontract StrkSale is ReentrancyGuard, Whitelist {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Number of pools\\r\\n    uint8 public constant NUMBER_POOLS = 10;\\r\\n\\r\\n    // Precision\\r\\n    uint256 public constant PRECISION = 1E18;\\r\\n\\r\\n    // Offering token decimal\\r\\n    uint256 public constant OFFERING_DECIMALS = 18;\\r\\n\\r\\n    // It checks if token is accepted for payment\\r\\n    mapping(address => bool) public isPaymentToken;\\r\\n    address[] public allPaymentTokens;\\r\\n\\r\\n    // It maps the payment token address to price feed address\\r\\n    mapping(address => address) public priceFeed;\\r\\n    address public ethPriceFeed;\\r\\n\\r\\n    // It maps the payment token address to decimal\\r\\n    mapping(address => uint8) public paymentTokenDecimal;\\r\\n\\r\\n    // It checks if token is stable coin\\r\\n    mapping(address => bool) public isStableToken;\\r\\n    address[] public allStableTokens;\\r\\n\\r\\n    // The offering token\\r\\n    IERC20 public offeringToken;\\r\\n\\r\\n    // Total tokens distributed across the pools\\r\\n    uint256 public totalTokensOffered;\\r\\n\\r\\n    // Array of PoolCharacteristics of size NUMBER_POOLS\\r\\n    PoolCharacteristics[NUMBER_POOLS] private _poolInformation;\\r\\n\\r\\n    // It maps the address to pool id to UserInfo\\r\\n    mapping(address => mapping(uint8 => UserInfo)) private _userInfo;\\r\\n\\r\\n    // Struct that contains each pool characteristics\\r\\n    struct PoolCharacteristics {\\r\\n        uint256 startTime; // The block timestamp when pool starts\\r\\n        uint256 endTime; // The block timestamp when pool ends\\r\\n        uint256 offeringAmountPool; // amount of tokens offered for the pool (in offeringTokens)\\r\\n        uint256 soldAmountPoolScaled; // total amount of tokens sold in the pool, scaled by PRECISION\\r\\n        uint256 minBuyAmount; // min amount of tokens user can buy for every purchase (if 0, it is ignored)\\r\\n        uint256 limitPerUserInUSD; // USD limit per user to deposit (if 0, it is ignored)\\r\\n        uint256 usdAmountPool; // total amount deposited in pool (in USD, decimal is 18)\\r\\n        uint256 shortVestingPercentage; // 60 means 0.6, rest part such as 100-60=40 means 0.4 is claimingPercentage\\r\\n        uint256 longVestingPercentage; // 60 means 0.6, rest part such as 100-60=40 means 0.4 is claimingPercentage\\r\\n        uint256 shortVestingDuration; // Short vesting duration\\r\\n        uint256 longVestingDuration; // Long vesting duration\\r\\n        uint256 shortPrice; // token price for short purchase (in USD, decimal is 18)\\r\\n        uint256 longPrice; // token price for long purchase (in USD, decimal is 18)\\r\\n        uint256 vestingCliff; // Vesting cliff\\r\\n        uint256 vestingSlicePeriodSeconds; // Vesting slice period seconds\\r\\n    }\\r\\n\\r\\n    // Struct that contains each user information for both pools\\r\\n    struct UserInfo {\\r\\n        uint256 usdAmount; // How many USD the user has provided for pool\\r\\n        bool claimedPool; // Whether the user has claimed (default: false) for pool\\r\\n        uint256 shortAmountScaled; // Amount of tokens user bought at short vesting price, scaled by PRECISION\\r\\n        uint256 longAmountScaled; // Amount of tokens user bought at long vesting price, scaled by PRECISION\\r\\n    }\\r\\n\\r\\n    enum VestingPlan { Short, Long }\\r\\n\\r\\n    // vesting startTime, everyone will be started at same timestamp. pid => startTime\\r\\n    mapping(uint256 => uint256) public vestingStartTime;\\r\\n\\r\\n    // A flag for vesting is being revoked\\r\\n    bool public vestingRevoked;\\r\\n\\r\\n    // Struct that contains vesting schedule\\r\\n    struct VestingSchedule {\\r\\n        bool isVestingInitialized;\\r\\n        // beneficiary of tokens after they are released\\r\\n        address beneficiary;\\r\\n        // pool id\\r\\n        uint8 pid;\\r\\n        // vesting plan\\r\\n        VestingPlan vestingPlan;\\r\\n        // total amount of tokens to be released at the end of the vesting\\r\\n        uint256 amountTotal;\\r\\n        // amount of tokens has been released\\r\\n        uint256 released;\\r\\n    }\\r\\n\\r\\n    bytes32[] private vestingSchedulesIds;\\r\\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\\r\\n    uint256 private vestingSchedulesTotalAmount;\\r\\n    mapping(address => uint256) private holdersVestingCount;\\r\\n\\r\\n    mapping(uint8 => bool) public isWhitelistSale;\\r\\n\\r\\n    bool public harvestAllowed;\\r\\n\\r\\n    // Admin withdraw events\\r\\n    event AdminWithdraw(uint256 amountOfferingToken, uint256 ethAmount, address[] tokens, uint256[] amounts);\\r\\n\\r\\n    // Admin recovers token\\r\\n    event AdminTokenRecovery(address tokenAddress, uint256 amountTokens);\\r\\n\\r\\n    // Deposit event\\r\\n    event Deposit(address indexed user, address token, uint256 amount, uint256 usdAmount, uint256 boughtAmount, uint256 plan, uint8 indexed pid);\\r\\n\\r\\n    // Harvest event\\r\\n    event Harvest(address indexed user, uint256 offeringAmount, uint8 indexed pid, uint256 plan);\\r\\n\\r\\n    // Create VestingSchedule event\\r\\n    event CreateVestingSchedule(address indexed user, uint256 offeringAmount, uint8 indexed pid, uint256 plan, bytes32 vestingScheduleId);\\r\\n\\r\\n    // Event when parameters are set for one of the pools\\r\\n    event PoolParametersSet(uint256 offeringAmountPool, uint8 pid);\\r\\n\\r\\n    // Event when times are set for one of the pools\\r\\n    event PoolTimeSet(uint8 pid, uint256 startTime, uint256 endTime);\\r\\n\\r\\n    // Event when offering amount is set for one of the pools\\r\\n    event PoolOfferingAmountSet(uint8 pid, uint256 offeringAmount);\\r\\n\\r\\n    // Event when released new amount\\r\\n    event Released(bytes32 vestingSchedulesId, address indexed beneficiary, uint256 amount);\\r\\n\\r\\n    // Event when revoked\\r\\n    event Revoked();\\r\\n\\r\\n    // Event when payment token added\\r\\n    event PaymentTokenAdded(address token, address feed, uint8 decimal);\\r\\n\\r\\n    // Event when payment token revoked\\r\\n    event PaymentTokenRevoked(address token);\\r\\n\\r\\n    // Event when stable token added\\r\\n    event StableTokenAdded(address token, uint8 decimal);\\r\\n\\r\\n    // Event when stable token revoked\\r\\n    event StableTokenRevoked(address token);\\r\\n\\r\\n    // Event when whitelist sale status flipped\\r\\n    event WhitelistSaleFlipped(uint8 pid, bool current);\\r\\n\\r\\n    // Event when harvest enabled status flipped\\r\\n    event HarvestAllowedFlipped(bool current);\\r\\n\\r\\n    // Event when offering token is set\\r\\n    event OfferingTokenSet(address tokenAddress);\\r\\n\\r\\n    // Modifier to prevent contracts to participate\\r\\n    modifier notContract() {\\r\\n        require(!_isContract(msg.sender), \\\"contract not allowed\\\");\\r\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Modifier to check payment method\\r\\n    modifier checkPayment(address token) {\\r\\n        if (token != address(0)) {\\r\\n            require(\\r\\n                (\\r\\n                    isStableToken[token] ||\\r\\n                    (isPaymentToken[token] && priceFeed[token] != address(0))\\r\\n                ) &&\\r\\n                paymentTokenDecimal[token] > 0,\\r\\n                \\\"invalid token\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(ethPriceFeed != address(0), \\\"price feed not set\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier ensure(uint deadline) {\\r\\n        require(deadline >= block.timestamp, 'EXPIRED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     */\\r\\n    constructor(address _ethPriceFeed) public {\\r\\n        (, int256 price, , , ) = AggregatorV3Interface(_ethPriceFeed).latestRoundData();\\r\\n        require(price > 0, \\\"invalid price feed\\\");\\r\\n\\r\\n        ethPriceFeed = _ethPriceFeed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows users to deposit LP tokens to pool\\r\\n     * @param _pid: pool id\\r\\n     * @param _token: payment token\\r\\n     * @param _amount: the number of payment token being deposited\\r\\n     * @param _minUsdAmount: minimum USD amount that must be converted from deposit token not to revert\\r\\n     * @param _plan: vesting plan\\r\\n     * @param _deadline: unix timestamp after which the transaction will revert\\r\\n     */\\r\\n    function depositPool(uint8 _pid, address _token, uint256 _amount, uint256 _minUsdAmount, VestingPlan _plan, uint256 _deadline) external payable nonReentrant notContract ensure(_deadline) {\\r\\n        // Checks whether the pool id is valid\\r\\n        require(_pid < NUMBER_POOLS, \\\"Deposit: Non valid pool id\\\");\\r\\n\\r\\n        // Checks that pool was set\\r\\n        require(_poolInformation[_pid].offeringAmountPool > 0, \\\"Deposit: Pool not set\\\");\\r\\n\\r\\n        // Checks whether the block timestamp is not too early\\r\\n        require(block.timestamp > _poolInformation[_pid].startTime, \\\"Deposit: Too early\\\");\\r\\n\\r\\n        // Checks whether the block timestamp is not too late\\r\\n        require(block.timestamp < _poolInformation[_pid].endTime, \\\"Deposit: Too late\\\");\\r\\n\\r\\n        if(_token == address(0)) {\\r\\n            _amount = msg.value;\\r\\n        }\\r\\n        // Checks that the amount deposited is not inferior to 0\\r\\n        require(_amount > 0, \\\"Deposit: Amount must be > 0\\\");\\r\\n\\r\\n        require(\\r\\n            !isWhitelistSale[_pid] || _isQualifiedWhitelist(msg.sender),\\r\\n            \\\"Deposit: Must be whitelisted\\\"\\r\\n        );\\r\\n\\r\\n        if (_token != address(0)) {\\r\\n            // Transfers funds to this contract\\r\\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n\\r\\n        (uint256 usdAmount, uint256 offeringAmountScaled) = computeAmounts(_token, _amount, _pid, _plan);\\r\\n        require(usdAmount >= _minUsdAmount, 'Deposit: Insufficient USD amount');\\r\\n        require(offeringAmountScaled >= _poolInformation[_pid].minBuyAmount.mul(PRECISION), 'Deposit: too small');\\r\\n        // Update the user status\\r\\n        _userInfo[msg.sender][_pid].usdAmount = _userInfo[msg.sender][_pid].usdAmount.add(usdAmount);\\r\\n        if (_plan == VestingPlan.Short) {\\r\\n            _userInfo[msg.sender][_pid].shortAmountScaled = _userInfo[msg.sender][_pid].shortAmountScaled.add(offeringAmountScaled);\\r\\n        } else if (_plan == VestingPlan.Long) {\\r\\n            _userInfo[msg.sender][_pid].longAmountScaled = _userInfo[msg.sender][_pid].longAmountScaled.add(offeringAmountScaled);\\r\\n        }\\r\\n\\r\\n        // Check if the pool has a limit per user\\r\\n        if (_poolInformation[_pid].limitPerUserInUSD > 0) {\\r\\n            // Checks whether the limit has been reached\\r\\n            require(\\r\\n                _userInfo[msg.sender][_pid].usdAmount <= _poolInformation[_pid].limitPerUserInUSD,\\r\\n                \\\"Deposit: New amount above user limit\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Updates total amount info for pool\\r\\n        _poolInformation[_pid].usdAmountPool = _poolInformation[_pid].usdAmountPool.add(usdAmount);\\r\\n        _poolInformation[_pid].soldAmountPoolScaled = _poolInformation[_pid].soldAmountPoolScaled.add(offeringAmountScaled);\\r\\n        require(\\r\\n            _poolInformation[_pid].soldAmountPoolScaled <= _poolInformation[_pid].offeringAmountPool.mul(PRECISION),\\r\\n            \\\"Deposit: Exceed pool offering amount\\\"\\r\\n        );\\r\\n\\r\\n        emit Deposit(msg.sender, _token, _amount, usdAmount, offeringAmountScaled, uint256(_plan), _pid);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows users to harvest from pool\\r\\n     * @param _pid: pool id\\r\\n     */\\r\\n    function harvestPool(uint8 _pid) external nonReentrant notContract {\\r\\n        require(harvestAllowed, \\\"Harvest: Not allowed\\\");\\r\\n        // Checks whether it is too early to harvest\\r\\n        require(block.timestamp > _poolInformation[_pid].endTime, \\\"Harvest: Too early\\\");\\r\\n\\r\\n        // Checks whether pool id is valid\\r\\n        require(_pid < NUMBER_POOLS, \\\"Harvest: Non valid pool id\\\");\\r\\n\\r\\n        // Checks whether the user has participated\\r\\n        require(_userInfo[msg.sender][_pid].usdAmount > 0, \\\"Harvest: Did not participate\\\");\\r\\n\\r\\n        // Checks whether the user has already harvested\\r\\n        require(!_userInfo[msg.sender][_pid].claimedPool, \\\"Harvest: Already done\\\");\\r\\n\\r\\n        // Updates the harvest status\\r\\n        _userInfo[msg.sender][_pid].claimedPool = true;\\r\\n\\r\\n        // Updates the vesting startTime\\r\\n        if (vestingStartTime[_pid] == 0) {\\r\\n            vestingStartTime[_pid] = block.timestamp;\\r\\n        }\\r\\n\\r\\n        // Transfer these tokens back to the user if quantity > 0\\r\\n        if (_userInfo[msg.sender][_pid].shortAmountScaled > 0) {\\r\\n            if (100 - _poolInformation[_pid].shortVestingPercentage > 0) {\\r\\n                uint256 amount = _userInfo[msg.sender][_pid].shortAmountScaled.mul(100 - _poolInformation[_pid].shortVestingPercentage).div(100).div(PRECISION);\\r\\n\\r\\n                // Transfer the tokens at TGE\\r\\n                offeringToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n                emit Harvest(msg.sender, amount, _pid, uint256(VestingPlan.Short));\\r\\n            }\\r\\n            // If this pool is Vesting modal, create a VestingSchedule for each user\\r\\n            if (_poolInformation[_pid].shortVestingPercentage > 0) {\\r\\n                uint256 amount = _userInfo[msg.sender][_pid].shortAmountScaled.mul(_poolInformation[_pid].shortVestingPercentage).div(100).div(PRECISION);\\r\\n\\r\\n                // Create VestingSchedule object\\r\\n                bytes32 vestingScheduleId = _createVestingSchedule(msg.sender, _pid, VestingPlan.Short, amount);\\r\\n\\r\\n                emit CreateVestingSchedule(msg.sender, amount, _pid, uint256(VestingPlan.Short), vestingScheduleId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_userInfo[msg.sender][_pid].longAmountScaled > 0) {\\r\\n            if (100 - _poolInformation[_pid].longVestingPercentage > 0) {\\r\\n                uint256 amount = _userInfo[msg.sender][_pid].longAmountScaled.mul(100 - _poolInformation[_pid].longVestingPercentage).div(100).div(PRECISION);\\r\\n\\r\\n                // Transfer the tokens at TGE\\r\\n                offeringToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n                emit Harvest(msg.sender, amount, _pid, uint256(VestingPlan.Long));\\r\\n            }\\r\\n            // If this pool is Vesting modal, create a VestingSchedule for each user\\r\\n            if (_poolInformation[_pid].longVestingPercentage > 0) {\\r\\n                uint256 amount = _userInfo[msg.sender][_pid].longAmountScaled.mul(_poolInformation[_pid].longVestingPercentage).div(100).div(PRECISION);\\r\\n\\r\\n                // Create VestingSchedule object\\r\\n                bytes32 vestingScheduleId =  _createVestingSchedule(msg.sender, _pid, VestingPlan.Long, amount);\\r\\n\\r\\n                emit CreateVestingSchedule(msg.sender, amount, _pid, uint256(VestingPlan.Long), vestingScheduleId);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the admin to withdraw funds\\r\\n     * @param _tokens: payment token addresses\\r\\n     * @param _offerAmount: the number of offering amount to withdraw\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function finalWithdraw(address[] calldata _tokens, uint256 _offerAmount) external onlyOwner {\\r\\n        if (_offerAmount > 0) {\\r\\n            offeringToken.safeTransfer(msg.sender, _offerAmount);\\r\\n        }\\r\\n\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        payable(msg.sender).transfer(ethBalance);\\r\\n\\r\\n        uint256[] memory _amounts = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _amounts[i] = IERC20(_tokens[i]).balanceOf(address(this));\\r\\n            if (_amounts[i] > 0) {\\r\\n                IERC20(_tokens[i]).safeTransfer(msg.sender, _amounts[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit AdminWithdraw(_offerAmount, ethBalance, _tokens, _amounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\r\\n     * @param _tokenAddress: the address of the token to withdraw (18 decimals)\\r\\n     * @param _tokenAmount: the number of token amount to withdraw\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\r\\n        require(!isPaymentToken[_tokenAddress] && !isStableToken[_tokenAddress], \\\"Recover: Cannot be payment token\\\");\\r\\n        require(_tokenAddress != address(offeringToken), \\\"Recover: Cannot be offering token\\\");\\r\\n\\r\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\r\\n\\r\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the admin to set offering token before sale start\\r\\n     * @param _tokenAddress: the address of offering token\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function setOfferingToken(address _tokenAddress) external onlyOwner {\\r\\n        require(_tokenAddress != address(0), \\\"OfferingToken: Zero address\\\");\\r\\n        require(address(offeringToken) == address(0), \\\"OfferingToken: already set\\\");\\r\\n\\r\\n        offeringToken = IERC20(_tokenAddress);\\r\\n\\r\\n        emit OfferingTokenSet(_tokenAddress);\\r\\n    }\\r\\n\\r\\n    struct PoolSetParams {\\r\\n        uint8 _pid; // pool id\\r\\n        uint256 _startTime; // The block timestamp when pool starts\\r\\n        uint256 _endTime; // The block timestamp when pool ends\\r\\n        uint256 _offeringAmountPool; // amount of tokens offered for the pool (in offeringTokens)\\r\\n        uint256 _minBuyAmount; // min amount of tokens user can buy for every purchase (if 0, it is ignored)\\r\\n        uint256 _limitPerUserInUSD; // limit of tokens per user (if 0, it is ignored)\\r\\n        uint256 _shortVestingPercentage; // 60 means 0.6, rest part such as 100-60=40 means 0.4 is claimingPercentage\\r\\n        uint256 _longVestingPercentage; // 60 means 0.6, rest part such as 100-60=40 means 0.4 is claimingPercentage\\r\\n        uint256 _shortVestingDuration; // Short vesting duration\\r\\n        uint256 _longVestingDuration; // Long vesting duration\\r\\n        uint256 _shortPrice; // token price for short purchase (in USD, decimal is 18)\\r\\n        uint256 _longPrice; // token price for long purchase (in USD, decimal is 18)\\r\\n        uint256 _vestingCliff; // Vesting cliff\\r\\n        uint256 _vestingSlicePeriodSeconds; // Vesting slice period seconds\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It sets parameters for pool\\r\\n     * @param _poolSetParams: pool set param\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function setPool(\\r\\n        PoolSetParams memory _poolSetParams\\r\\n    ) external onlyOwner {\\r\\n        require(_poolSetParams._pid < NUMBER_POOLS, \\\"Operations: Pool does not exist\\\");\\r\\n        require(\\r\\n            _poolSetParams._shortVestingPercentage >= 0 && _poolSetParams._shortVestingPercentage <= 100,\\r\\n            \\\"Operations: vesting percentage should exceeds 0 and interior 100\\\"\\r\\n        );\\r\\n        require(\\r\\n            _poolSetParams._longVestingPercentage >= 0 && _poolSetParams._longVestingPercentage <= 100,\\r\\n            \\\"Operations: vesting percentage should exceeds 0 and interior 100\\\"\\r\\n        );\\r\\n        require(_poolSetParams._shortVestingDuration > 0, \\\"duration must exceeds 0\\\");\\r\\n        require(_poolSetParams._longVestingDuration > 0, \\\"duration must exceeds 0\\\");\\r\\n        require(_poolSetParams._vestingSlicePeriodSeconds >= 1, \\\"slicePeriodSeconds must be exceeds 1\\\");\\r\\n        require(_poolSetParams._vestingSlicePeriodSeconds <= _poolSetParams._shortVestingDuration && _poolSetParams._vestingSlicePeriodSeconds <= _poolSetParams._longVestingDuration, \\\"slicePeriodSeconds must be interior duration\\\");\\r\\n        require(_poolSetParams._endTime > _poolSetParams._startTime, \\\"endTime must bigger than startTime\\\");\\r\\n\\r\\n        uint8 _pid = _poolSetParams._pid;\\r\\n        _poolInformation[_pid].startTime = _poolSetParams._startTime;\\r\\n        _poolInformation[_pid].endTime = _poolSetParams._endTime;\\r\\n        _poolInformation[_pid].offeringAmountPool = _poolSetParams._offeringAmountPool;\\r\\n        _poolInformation[_pid].minBuyAmount = _poolSetParams._minBuyAmount;\\r\\n        _poolInformation[_pid].limitPerUserInUSD = _poolSetParams._limitPerUserInUSD;\\r\\n        _poolInformation[_pid].shortVestingPercentage = _poolSetParams._shortVestingPercentage;\\r\\n        _poolInformation[_pid].longVestingPercentage = _poolSetParams._longVestingPercentage;\\r\\n        _poolInformation[_pid].shortVestingDuration = _poolSetParams._shortVestingDuration;\\r\\n        _poolInformation[_pid].longVestingDuration = _poolSetParams._longVestingDuration;\\r\\n        _poolInformation[_pid].shortPrice = _poolSetParams._shortPrice;\\r\\n        _poolInformation[_pid].longPrice = _poolSetParams._longPrice;\\r\\n        _poolInformation[_pid].vestingCliff = _poolSetParams._vestingCliff;\\r\\n        _poolInformation[_pid].vestingSlicePeriodSeconds = _poolSetParams._vestingSlicePeriodSeconds;\\r\\n\\r\\n        uint256 tokensDistributedAcrossPools;\\r\\n\\r\\n        for (uint8 i = 0; i < NUMBER_POOLS; i++) {\\r\\n            tokensDistributedAcrossPools = tokensDistributedAcrossPools.add(_poolInformation[i].offeringAmountPool);\\r\\n        }\\r\\n\\r\\n        // Update totalTokensOffered\\r\\n        totalTokensOffered = tokensDistributedAcrossPools;\\r\\n\\r\\n        emit PoolParametersSet(_poolSetParams._offeringAmountPool, _pid);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It sets times for pool\\r\\n     * @param _pid: pool id\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function setPoolTime(\\r\\n        uint8 _pid, uint256 _startTime, uint256 _endTime\\r\\n    ) external onlyOwner {\\r\\n        require(_pid < NUMBER_POOLS, \\\"Operations: Pool does not exist\\\");\\r\\n        require(_endTime > _startTime, \\\"endTime must bigger than startTime\\\");\\r\\n\\r\\n        _poolInformation[_pid].startTime = _startTime;\\r\\n        _poolInformation[_pid].endTime = _endTime;\\r\\n\\r\\n        emit PoolTimeSet(_pid, _startTime, _endTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It sets offering amount for pool\\r\\n     * @param _pid: pool id\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function setPoolOfferingAmount(\\r\\n        uint8 _pid, uint256 _offeringAmountPool\\r\\n    ) external onlyOwner {\\r\\n        require(_pid < NUMBER_POOLS, \\\"Operations: Pool does not exist\\\");\\r\\n\\r\\n        _poolInformation[_pid].offeringAmountPool = _offeringAmountPool;\\r\\n\\r\\n        emit PoolOfferingAmountSet(_pid, _offeringAmountPool);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It returns the pool information\\r\\n     * @param _pid: pool id\\r\\n     */\\r\\n    function viewPoolInformation(uint256 _pid)\\r\\n        external\\r\\n        view\\r\\n        returns (PoolCharacteristics memory)\\r\\n    {\\r\\n        return _poolInformation[_pid];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice External view function to see user allocations for both pools\\r\\n     * @param _user: user address\\r\\n     * @param _pids[]: array of pids\\r\\n     * @return\\r\\n     */\\r\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory allocationPools = new uint256[](_pids.length);\\r\\n        for (uint8 i = 0; i < _pids.length; i++) {\\r\\n            allocationPools[i] = _getUserAllocationPool(_user, _pids[i]);\\r\\n        }\\r\\n        return allocationPools;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice External view function to see user information\\r\\n     * @param _user: user address\\r\\n     * @param _pids[]: array of pids\\r\\n     */\\r\\n    function viewUserInfo(address _user, uint8[] calldata _pids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory, bool[] memory)\\r\\n    {\\r\\n        uint256[] memory amountPools = new uint256[](_pids.length);\\r\\n        bool[] memory statusPools = new bool[](_pids.length);\\r\\n\\r\\n        for (uint8 i = 0; i < _pids.length; i++) {\\r\\n            amountPools[i] = _userInfo[_user][_pids[i]].usdAmount;\\r\\n            statusPools[i] = _userInfo[_user][_pids[i]].claimedPool;\\r\\n        }\\r\\n        return (amountPools, statusPools);\\r\\n    }\\r\\n\\r\\n    struct BoughtTokens {\\r\\n        uint256 short;\\r\\n        uint256 long;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice External view function to see user offering amounts for pools\\r\\n     * @param _user: user address\\r\\n     * @param _pids: array of pids\\r\\n     */\\r\\n    function viewUserOfferingAmountsForPools(address _user, uint8[] calldata _pids)\\r\\n        external\\r\\n        view\\r\\n        returns (BoughtTokens[] memory)\\r\\n    {\\r\\n        BoughtTokens[] memory amountPools = new BoughtTokens[](_pids.length);\\r\\n\\r\\n        for (uint8 i = 0; i < _pids.length; i++) {\\r\\n            if (_poolInformation[_pids[i]].soldAmountPoolScaled > 0) {\\r\\n                amountPools[i].short = _userInfo[_user][_pids[i]].shortAmountScaled;\\r\\n                amountPools[i].long = _userInfo[_user][_pids[i]].longAmountScaled;\\r\\n            }\\r\\n        }\\r\\n        return amountPools;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the number of vesting schedules associated to a beneficiary\\r\\n     * @return The number of vesting schedules\\r\\n     */\\r\\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary) external view returns (uint256) {\\r\\n        return holdersVestingCount[_beneficiary];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the vesting schedule id at the given index\\r\\n     * @return The vesting schedule id\\r\\n     */\\r\\n    function getVestingScheduleIdAtIndex(uint256 _index) external view returns (bytes32) {\\r\\n        require(_index < getVestingSchedulesCount(), \\\"index out of bounds\\\");\\r\\n        return vestingSchedulesIds[_index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the vesting schedule information of a given holder and index\\r\\n     * @return The vesting schedule object\\r\\n     */\\r\\n    function getVestingScheduleByAddressAndIndex(address _holder, uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (VestingSchedule memory)\\r\\n    {\\r\\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(_holder, _index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total amount of vesting schedules\\r\\n     * @return The vesting schedule total amount\\r\\n     */\\r\\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\\r\\n        return vestingSchedulesTotalAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release vested amount of offering tokens\\r\\n     * @param _vestingScheduleId the vesting schedule identifier\\r\\n     */\\r\\n    function release(bytes32 _vestingScheduleId) external nonReentrant {\\r\\n        require(vestingSchedules[_vestingScheduleId].isVestingInitialized == true, \\\"vesting schedule is not exist\\\");\\r\\n\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_vestingScheduleId];\\r\\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\\r\\n        bool isOwner = msg.sender == owner();\\r\\n        require(isBeneficiary || isOwner, \\\"only the beneficiary and owner can release vested tokens\\\");\\r\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\r\\n        require(vestedAmount > 0, \\\"no vested tokens to release\\\");\\r\\n        vestingSchedule.released = vestingSchedule.released.add(vestedAmount);\\r\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(vestedAmount);\\r\\n        offeringToken.safeTransfer(vestingSchedule.beneficiary, vestedAmount);\\r\\n\\r\\n        emit Released(_vestingScheduleId, vestingSchedule.beneficiary, vestedAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Revokes all the vesting schedules\\r\\n     */\\r\\n    function revoke() external onlyOwner {\\r\\n        require(!vestingRevoked, \\\"vesting is revoked\\\");\\r\\n\\r\\n        vestingRevoked = true;\\r\\n\\r\\n        emit Revoked();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add payment token\\r\\n     */\\r\\n    function addPaymentToken(address _token, address _feed, uint8 _decimal) external onlyOwner {\\r\\n        require(!isPaymentToken[_token], \\\"already added\\\");\\r\\n        require(_feed != address(0), \\\"invalid feed address\\\");\\r\\n        require(_decimal == IERC20DetailedBytes(_token).decimals(), \\\"incorrect decimal\\\");\\r\\n\\r\\n        (, int256 price, , , ) = AggregatorV3Interface(_feed).latestRoundData();\\r\\n        require(price > 0, \\\"invalid price feed\\\");\\r\\n\\r\\n        isPaymentToken[_token] = true;\\r\\n        allPaymentTokens.push(_token);\\r\\n        priceFeed[_token] = _feed;\\r\\n        paymentTokenDecimal[_token] = _decimal;\\r\\n\\r\\n        emit PaymentTokenAdded(_token, _feed, _decimal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Revoke payment token\\r\\n     */\\r\\n    function revokePaymentToken(address _token) external onlyOwner {\\r\\n        require(isPaymentToken[_token], \\\"not added\\\");\\r\\n\\r\\n        isPaymentToken[_token] = false;\\r\\n\\r\\n        uint256 index = allPaymentTokens.length;\\r\\n        for (uint256 i = 0; i < allPaymentTokens.length; i++) {\\r\\n            if (allPaymentTokens[i] == _token) {\\r\\n                index = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(index != allPaymentTokens.length, \\\"token doesn't exist\\\");\\r\\n\\r\\n        allPaymentTokens[index] = allPaymentTokens[allPaymentTokens.length - 1];\\r\\n        allPaymentTokens.pop();\\r\\n        delete paymentTokenDecimal[_token];\\r\\n        delete priceFeed[_token];\\r\\n\\r\\n        emit PaymentTokenRevoked(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add stable token\\r\\n     */\\r\\n    function addStableToken(address _token, uint8 _decimal) external onlyOwner {\\r\\n        require(!isStableToken[_token], \\\"already added\\\");\\r\\n        require(_decimal == IERC20DetailedBytes(_token).decimals(), \\\"incorrect decimal\\\");\\r\\n\\r\\n        isStableToken[_token] = true;\\r\\n        allStableTokens.push(_token);\\r\\n        paymentTokenDecimal[_token] = _decimal;\\r\\n\\r\\n        emit StableTokenAdded(_token, _decimal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Revoke stable token\\r\\n     */\\r\\n    function revokeStableToken(address _token) external onlyOwner {\\r\\n        require(isStableToken[_token], \\\"not added\\\");\\r\\n\\r\\n        isStableToken[_token] = false;\\r\\n\\r\\n        uint256 index = allStableTokens.length;\\r\\n        for (uint256 i = 0; i < allStableTokens.length; i++) {\\r\\n            if (allStableTokens[i] == _token) {\\r\\n                index = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(index != allStableTokens.length, \\\"token doesn't exist\\\");\\r\\n\\r\\n        allStableTokens[index] = allStableTokens[allStableTokens.length - 1];\\r\\n        allStableTokens.pop();\\r\\n        delete paymentTokenDecimal[_token];\\r\\n\\r\\n        emit StableTokenRevoked(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Flip whitelist sale status\\r\\n     */\\r\\n    function flipWhitelistSaleStatus(uint8 _pid) external onlyOwner {\\r\\n        isWhitelistSale[_pid] = !isWhitelistSale[_pid];\\r\\n\\r\\n        emit WhitelistSaleFlipped(_pid, isWhitelistSale[_pid]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Flip harvestAllowed status\\r\\n     */\\r\\n    function flipHarvestAllowedStatus() external onlyOwner {\\r\\n        harvestAllowed = !harvestAllowed;\\r\\n\\r\\n        emit HarvestAllowedFlipped(harvestAllowed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the number of vesting schedules managed by the contract\\r\\n     * @return The number of vesting count\\r\\n     */\\r\\n    function getVestingSchedulesCount() public view returns (uint256) {\\r\\n        return vestingSchedulesIds.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the vested amount of tokens for the given vesting schedule identifier\\r\\n     * @return The number of vested count\\r\\n     */\\r\\n    function computeReleasableAmount(bytes32 _vestingScheduleId) public view returns (uint256) {\\r\\n        require(vestingSchedules[_vestingScheduleId].isVestingInitialized == true, \\\"vesting schedule is not exist\\\");\\r\\n\\r\\n        VestingSchedule memory vestingSchedule = vestingSchedules[_vestingScheduleId];\\r\\n        return _computeReleasableAmount(vestingSchedule);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the vesting schedule information of a given identifier\\r\\n     * @return The vesting schedule object\\r\\n     */\\r\\n    function getVestingSchedule(bytes32 _vestingScheduleId) public view returns (VestingSchedule memory) {\\r\\n        return vestingSchedules[_vestingScheduleId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the amount of offering token that can be withdrawn by the owner\\r\\n     * @return The amount of offering token\\r\\n     */\\r\\n    function getWithdrawableOfferingTokenAmount() public view returns (uint256) {\\r\\n        return offeringToken.balanceOf(address(this)).sub(vestingSchedulesTotalAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the next vesting schedule identifier for a given holder address\\r\\n     * @return The id string\\r\\n     */\\r\\n    function computeNextVestingScheduleIdForHolder(address _holder) public view returns (bytes32) {\\r\\n        return computeVestingScheduleIdForAddressAndIndex(_holder, holdersVestingCount[_holder]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the next vesting schedule identifier for an address and an index\\r\\n     * @return The id string\\r\\n     */\\r\\n    function computeVestingScheduleIdForAddressAndIndex(address _holder, uint256 _index) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_holder, _index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the next vesting schedule identifier for an address and an pid\\r\\n     * @return The id string\\r\\n     */\\r\\n    function computeVestingScheduleIdForAddressAndPid(address _holder, uint256 _pid, VestingPlan _plan) external view returns (bytes32) {\\r\\n        require(_pid < NUMBER_POOLS, \\\"ComputeVestingScheduleId: Non valid pool id\\\");\\r\\n\\r\\n        for (uint8 i = 0; i < NUMBER_POOLS * 2; i++) {\\r\\n            bytes32 vestingScheduleId = computeVestingScheduleIdForAddressAndIndex(_holder, i);\\r\\n            VestingSchedule memory vestingSchedule = vestingSchedules[vestingScheduleId];\\r\\n            if (vestingSchedule.isVestingInitialized == true && vestingSchedule.pid == _pid && vestingSchedule.vestingPlan == _plan) {\\r\\n                return vestingScheduleId;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return computeNextVestingScheduleIdForHolder(_holder);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get current Time\\r\\n     */\\r\\n    function getCurrentTime() internal view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the releasable amount of tokens for a vesting schedule\\r\\n     * @return The amount of releasable tokens\\r\\n     */\\r\\n    function _computeReleasableAmount(VestingSchedule memory _vestingSchedule) internal view returns (uint256) {\\r\\n        uint256 currentTime = getCurrentTime();\\r\\n        if (currentTime < vestingStartTime[_vestingSchedule.pid] + _poolInformation[_vestingSchedule.pid].vestingCliff) {\\r\\n            return 0;\\r\\n        } else if (\\r\\n            (_vestingSchedule.vestingPlan == VestingPlan.Short && currentTime >= vestingStartTime[_vestingSchedule.pid].add(_poolInformation[_vestingSchedule.pid].shortVestingDuration)) ||\\r\\n            (_vestingSchedule.vestingPlan == VestingPlan.Long && currentTime >= vestingStartTime[_vestingSchedule.pid].add(_poolInformation[_vestingSchedule.pid].longVestingDuration)) ||\\r\\n            vestingRevoked\\r\\n        ) {\\r\\n            return _vestingSchedule.amountTotal.sub(_vestingSchedule.released);\\r\\n        } else {\\r\\n            uint256 timeFromStart = currentTime.sub(vestingStartTime[_vestingSchedule.pid]);\\r\\n            uint256 secondsPerSlice = _poolInformation[_vestingSchedule.pid].vestingSlicePeriodSeconds;\\r\\n            uint256 vestedSlicePeriods = timeFromStart.div(secondsPerSlice);\\r\\n            uint256 vestedSeconds = vestedSlicePeriods.mul(secondsPerSlice);\\r\\n            uint256 vestedAmount = _vestingSchedule.amountTotal.mul(vestedSeconds).div(\\r\\n                _vestingSchedule.vestingPlan == VestingPlan.Short ? _poolInformation[_vestingSchedule.pid].shortVestingDuration : _poolInformation[_vestingSchedule.pid].longVestingDuration\\r\\n            );\\r\\n            vestedAmount = vestedAmount.sub(_vestingSchedule.released);\\r\\n            return vestedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new vesting schedule for a beneficiary\\r\\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\r\\n     * @param _pid the pool id\\r\\n     * @param _amount total amount of tokens to be released at the end of the vesting\\r\\n     */\\r\\n    function _createVestingSchedule(\\r\\n        address _beneficiary,\\r\\n        uint8 _pid,\\r\\n        VestingPlan _plan,\\r\\n        uint256 _amount\\r\\n    ) internal returns (bytes32) {\\r\\n        require(\\r\\n            getWithdrawableOfferingTokenAmount() >= _amount,\\r\\n            \\\"can not create vesting schedule with sufficient tokens\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(_beneficiary);\\r\\n        require(vestingSchedules[vestingScheduleId].beneficiary == address(0), \\\"vestingScheduleId is been created\\\");\\r\\n        vestingSchedules[vestingScheduleId] = VestingSchedule(true, _beneficiary, _pid, _plan, _amount, 0);\\r\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.add(_amount);\\r\\n        vestingSchedulesIds.push(vestingScheduleId);\\r\\n        holdersVestingCount[_beneficiary]++;\\r\\n        return vestingScheduleId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It returns the user allocation for pool\\r\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\r\\n     * @param _user: user address\\r\\n     * @param _pid: pool id\\r\\n     * @return It returns the user's share of pool\\r\\n     */\\r\\n    function _getUserAllocationPool(address _user, uint8 _pid) internal view returns (uint256) {\\r\\n        if (_poolInformation[_pid].usdAmountPool > 0) {\\r\\n            return _userInfo[_user][_pid].usdAmount.mul(1e12).div(_poolInformation[_pid].usdAmountPool);\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if an address is a contract\\r\\n     */\\r\\n    function _isContract(address _addr) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function isQualifiedWhitelist(address _user) external view returns (bool) {\\r\\n        return isWhitelisted(_user);\\r\\n    }\\r\\n\\r\\n    function _isQualifiedWhitelist(address _user) internal view returns (bool) {\\r\\n        return isWhitelisted(_user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the USD amount and offering token amount from token amount\\r\\n     * @return usdAmount USD amount, decimal is 18\\r\\n     * @return offeringAmountScaled offering amount, scaled by PRECISION\\r\\n     */\\r\\n    function computeAmounts(address token, uint256 amount, uint8 pid, VestingPlan plan) public view checkPayment(token) returns (uint256 usdAmount, uint256 offeringAmountScaled) {\\r\\n        uint256 tokenDecimal = token == address(0) ? 18 : uint256(paymentTokenDecimal[token]);\\r\\n\\r\\n        if (isStableToken[token]) {\\r\\n            usdAmount = amount.mul(PRECISION).div(10 ** tokenDecimal);\\r\\n        } else {\\r\\n            address feed = token == address(0) ? ethPriceFeed : priceFeed[token];\\r\\n            (, int256 price, , , ) = AggregatorV3Interface(feed).latestRoundData();\\r\\n            require(price > 0, \\\"ChainlinkPriceFeed: invalid price\\\");\\r\\n            uint256 priceDecimal = uint256(AggregatorV3Interface(feed).decimals());\\r\\n\\r\\n            usdAmount = amount.mul(uint256(price)).mul(PRECISION).div(10 ** (priceDecimal + tokenDecimal));\\r\\n        }\\r\\n\\r\\n        require(_poolInformation[pid].offeringAmountPool > 0, \\\"ComputeAmounts: Pool not set\\\");\\r\\n        uint256 offeringTokenPrice = plan == VestingPlan.Short ? _poolInformation[pid].shortPrice : _poolInformation[pid].longPrice;\\r\\n        offeringAmountScaled = usdAmount.mul(10 ** OFFERING_DECIMALS).mul(PRECISION).div(offeringTokenPrice);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/WhiteList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Whitelist is Ownable {\\r\\n    mapping(address => bool) private whitelist;\\r\\n\\r\\n    event WhitelistedAddressAdded(address indexed _user);\\r\\n    event WhitelistedAddressRemoved(address indexed _user);\\r\\n\\r\\n    /**\\r\\n     * @dev throws if user is not whitelisted.\\r\\n     * @param _user address\\r\\n     */\\r\\n    modifier onlyIfWhitelisted(address _user) {\\r\\n        require(whitelist[_user]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add single address to whitelist\\r\\n     */\\r\\n    function addAddressToWhitelist(address _user) external onlyOwner {\\r\\n        whitelist[_user] = true;\\r\\n        emit WhitelistedAddressAdded(_user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add addresses to whitelist\\r\\n     */\\r\\n    function addAddressesToWhitelist(address[] calldata _users) external onlyOwner {\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            whitelist[_users[i]] = true;\\r\\n            emit WhitelistedAddressAdded(_users[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove single address from whitelist\\r\\n     */\\r\\n    function removeAddressFromWhitelist(address _user) external onlyOwner {\\r\\n        whitelist[_user] = false;\\r\\n        emit WhitelistedAddressRemoved(_user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove addresses from whitelist\\r\\n     */\\r\\n    function removeAddressesFromWhitelist(address[] calldata _users) external onlyOwner {\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            whitelist[_users[i]] = false;\\r\\n            emit WhitelistedAddressRemoved(_users[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev getter to determine if address is in whitelist\\r\\n     */\\r\\n    function isWhitelisted(address _user) public view returns (bool) {\\r\\n        return whitelist[_user];\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfferingToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"CreateVestingSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"HarvestAllowedFlipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"OfferingTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"}],\"name\":\"PaymentTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PaymentTokenRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"}],\"name\":\"PoolOfferingAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmountPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"PoolParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PoolTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingSchedulesId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"}],\"name\":\"StableTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"StableTokenRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"WhitelistSaleFlipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUMBER_POOLS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFERING_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"}],\"name\":\"addPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"}],\"name\":\"addStableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPaymentTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allStableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"internalType\":\"enum StrkSale.VestingPlan\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"computeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offeringAmountScaled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"enum StrkSale.VestingPlan\",\"name\":\"_plan\",\"type\":\"uint8\"}],\"name\":\"computeVestingScheduleIdForAddressAndPid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum StrkSale.VestingPlan\",\"name\":\"_plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"depositPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"}],\"name\":\"finalWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipHarvestAllowedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"flipWhitelistSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingInitialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"internalType\":\"enum StrkSale.VestingPlan\",\"name\":\"vestingPlan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct StrkSale.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingInitialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"internalType\":\"enum StrkSale.VestingPlan\",\"name\":\"vestingPlan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct StrkSale.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableOfferingTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"harvestPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPaymentToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isQualifiedWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"isWhitelistSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offeringToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentTokenDecimal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"revokePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"revokeStableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setOfferingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offeringAmountPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitPerUserInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortVestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_longVestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortVestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_longVestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_longPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingSlicePeriodSeconds\",\"type\":\"uint256\"}],\"internalType\":\"struct StrkSale.PoolSetParams\",\"name\":\"_poolSetParams\",\"type\":\"tuple\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_offeringAmountPool\",\"type\":\"uint256\"}],\"name\":\"setPoolOfferingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setPoolTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensOffered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolInformation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offeringAmountPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldAmountPoolScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitPerUserInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdAmountPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortVestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longVestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortVestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longVestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingSlicePeriodSeconds\",\"type\":\"uint256\"}],\"internalType\":\"struct StrkSale.PoolCharacteristics\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserAllocationPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserOfferingAmountsForPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"short\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"long\",\"type\":\"uint256\"}],\"internalType\":\"struct StrkSale.BoughtTokens[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrkSale", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}