{"SourceCode": "pragma solidity ^0.4.8;\r\n\r\n/**\r\n * @title KittyItemToken interface \r\n */\r\ncontract KittyItemToken {\r\n  function transfer(address, uint256) public pure returns (bool) {}\r\n  function transferAndApply(address, uint256) public pure returns (bool) {}\r\n  function balanceOf(address) public pure returns (uint256) {}\r\n}\r\n\r\n/**\r\n * @title KittyItemMarket is a market contract for buying KittyItemTokens and \r\n */\r\ncontract KittyItemMarket {\r\n\r\n  struct Item {\r\n    address itemContract;\r\n    uint256 cost;  // in wei\r\n    address artist;\r\n    uint128 split;  // the percentage split the artist gets vs. KittyItemMarket.owner. A split of \"6666\" would mean the artist gets 66.66% of the funds\r\n    uint256 totalFunds;\r\n  }\r\n\r\n  address public owner;\r\n  mapping (string => Item) items;\r\n  bool public paused = false;\r\n\r\n  // events\r\n  event Buy(string itemName);\r\n\r\n  /**\r\n   * KittyItemMarket constructor\r\n   */\r\n  function KittyItemMarket() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public {\r\n    require(msg.sender == owner);\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Pauses the market, not allowing any buyItem and buyItemAndApply\r\n   * @param _paused the paused state of the contract\r\n   */\r\n  function setPaused(bool _paused) public {\r\n    require(msg.sender == owner);\r\n    paused = _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev You cannot return structs, return each attribute in Item struct\r\n   * @param _itemName the KittyItemToken name in items\r\n   */\r\n  function getItem(string _itemName) view public returns (address, uint256, address, uint256, uint256) {\r\n    return (items[_itemName].itemContract, items[_itemName].cost, items[_itemName].artist, items[_itemName].split, items[_itemName].totalFunds);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a KittyItemToken contract to be sold in the market\r\n   * @param _itemName Name for items mapping\r\n   * @param _itemContract contract address of KittyItemToken we're adding\r\n   * @param _cost  cost of item in wei\r\n   * @param _artist  artist addess to send funds to\r\n   * @param _split  artist split. \"6666\" would be a 66.66% split.\r\n   */\r\n  function addItem(string _itemName, address _itemContract, uint256 _cost, address _artist, uint128 _split) public {\r\n    require(msg.sender == owner);\r\n    require(items[_itemName].itemContract == 0x0);  // item can't already exist\r\n    items[_itemName] = Item(_itemContract, _cost, _artist, _split, 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Modify an item that is in the market\r\n   * @param _itemName Name of item to modify\r\n   * @param _itemContract modify KittyItemtoken contract address for item\r\n   * @param _cost modify cost of item\r\n   * @param _artist  modify artist addess to send funds to\r\n   * @param _split  modify artist split\r\n   */\r\n  function modifyItem(string _itemName, address _itemContract, uint256 _cost, address _artist, uint128 _split) public {\r\n    require(msg.sender == owner);\r\n    require(items[_itemName].itemContract != 0x0);  // item should already exist\r\n    Item storage item = items[_itemName];\r\n    item.itemContract = _itemContract;\r\n    item.cost = _cost;\r\n    item.artist = _artist;\r\n    item.split = _split;\r\n  }\r\n\r\n  /**\r\n   * @dev Buy item from the market\r\n   * @param _itemName Name of item to buy\r\n   * @param _amount amount of item to buy\r\n   */\r\n  function buyItem(string _itemName, uint256 _amount) public payable {\r\n    require(paused == false);\r\n    require(items[_itemName].itemContract != 0x0);  // item should already exist\r\n    Item storage item = items[_itemName];  // we're going to modify the item in storage\r\n    require(msg.value >= item.cost * _amount);  // make sure user sent enough eth for the number of items they want\r\n    item.totalFunds += msg.value;\r\n    KittyItemToken kit = KittyItemToken(item.itemContract);\r\n    kit.transfer(msg.sender, _amount);\r\n    // emit events\r\n    Buy(_itemName);\r\n  }\r\n\r\n  /**\r\n   * @dev Buy item from the market and apply to kittyId\r\n   * @param _itemName Name of item to buy\r\n   * @param _kittyId  KittyId to apply the item\r\n   */\r\n  function buyItemAndApply(string _itemName, uint256 _kittyId) public payable {\r\n    require(paused == false);\r\n    // NOTE - can only be used to buy and apply 1 item\r\n    require(items[_itemName].itemContract != 0x0);  // item should already exist\r\n    Item storage item = items[_itemName];  // we're going to modify the item in storage\r\n    require(msg.value >= item.cost);  // make sure user sent enough eth for 1 item\r\n    item.totalFunds += msg.value;\r\n    KittyItemToken kit = KittyItemToken(item.itemContract);\r\n    kit.transferAndApply(msg.sender, _kittyId);\r\n    // emit events\r\n    Buy(_itemName);\r\n  }\r\n\r\n  /**\r\n   * @dev split funds from Item sales between contract owner and artist\r\n   * @param _itemName Item to split funds for\r\n   */\r\n  function splitFunds(string _itemName) public {\r\n    require(msg.sender == owner);\r\n    Item storage item = items[_itemName];  // we're going to modify the item in storage\r\n    uint256 amountToArtist = item.totalFunds * item.split / 10000;\r\n    uint256 amountToOwner = item.totalFunds - amountToArtist;\r\n    item.artist.transfer(amountToArtist);\r\n    owner.transfer(amountToOwner);\r\n    item.totalFunds = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev return all _itemName tokens help by contract to contract owner\r\n   * @param _itemName Item to return tokens to contract owner\r\n   * @return whether the transfer was successful or not\r\n   */\r\n  function returnTokensToOwner(string _itemName) public returns (bool) {\r\n    require(msg.sender == owner);\r\n    Item storage item = items[_itemName];  // we're going to modify the item in storage\r\n    KittyItemToken kit = KittyItemToken(item.itemContract);\r\n    uint256 contractBalance = kit.balanceOf(this);\r\n    kit.transfer(msg.sender, contractBalance);\r\n    return true;\r\n  }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_itemName\",\"type\":\"string\"},{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"buyItemAndApply\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemName\",\"type\":\"string\"},{\"name\":\"_itemContract\",\"type\":\"address\"},{\"name\":\"_cost\",\"type\":\"uint256\"},{\"name\":\"_artist\",\"type\":\"address\"},{\"name\":\"_split\",\"type\":\"uint128\"}],\"name\":\"addItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemName\",\"type\":\"string\"}],\"name\":\"splitFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemName\",\"type\":\"string\"},{\"name\":\"_itemContract\",\"type\":\"address\"},{\"name\":\"_cost\",\"type\":\"uint256\"},{\"name\":\"_artist\",\"type\":\"address\"},{\"name\":\"_split\",\"type\":\"uint128\"}],\"name\":\"modifyItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemName\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemName\",\"type\":\"string\"}],\"name\":\"returnTokensToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemName\",\"type\":\"string\"}],\"name\":\"getItem\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"itemName\",\"type\":\"string\"}],\"name\":\"Buy\",\"type\":\"event\"}]", "ContractName": "KittyItemMarket", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://552b8763a0e244e7a5f5db9bfe2e8bf534967bd023629f8b752b03229a290c51"}