{"SourceCode": "/*\r\nWelcome to BWIN - Bet To Win, the entertainment revolution in the cryptocurrency world. \r\nImagine a place where simplicity meets excitement, all at your fingertips thanks to the Telegram user interface. \r\nAt BWIN, we've crafted a cryptocurrency casino that reshapes the way we engage with gambling.\r\n\r\n$BWIN Token - Tokenomics\r\n\r\nThe transaction tax distribution is as follows:\r\n   -Marketing Wallet 4% - Funds dedicated to promoting and advancing our brand presence.\r\n   -Game Fees 1% - This fee is allocated to cover the gwei expenses, ensuring players aren't burdened with gwei ETH fees when playing with our bot\r\n\r\nSocials:\r\nWhitepaper: https://bwin.gitbook.io/bwin\r\nTelegram: https://t.me/bwin_portal\r\nX: https://twitter.com/bwin_blockchain\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract BWIN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balance;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=20;\r\n    uint256 private _initialSellTax=25;\r\n    uint256 private _finalBuyTax=5;\r\n    uint256 private _finalSellTax=5;\r\n    uint256 private _reduceBuyTaxAt=20;\r\n    uint256 private _reduceSellTaxAt=20;\r\n    uint256 private _preventSwapBefore=20;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 1000000000 * 10**_decimals;\r\n    string private constant _name = \"BWIN\";\r\n    string private constant _symbol = \"BWIN\";\r\n    uint256 public _maxTxAmount = 7500000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 10000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 10000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 10000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    address public secondaryContract;\r\n\r\n    function setControlContract(address _secondaryContract) public onlyOwner {\r\n        secondaryContract = _secondaryContract;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        START GAME VAR - LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    mapping(address => string) private gameKeys;  \r\n    mapping(address => bool) public isAuthenticated; \r\n    mapping(address => uint256) private _lockedBalance;\r\n    mapping(address => uint256) public gamesPlayed;\r\n    address constant DEAD_WALLET = 0x000000000000000000000000000000000000dEaD;\r\n    address constant TEAM_WALLET = 0x395Cb433E3eFaDF92F596A4F6F85f90A32aD0718;\r\n    \r\n    address[] public holders;\r\n    mapping(address => bool) public isHolder;\r\n    mapping(address => uint256) public paymentAmounts;\r\n    mapping(address => uint256) public lastRewardAmounts;\r\n    address[] public lastRewardedHolders;\r\n\r\n    address[] private allUsers;\r\n    address[] public activePlayers;\r\n    mapping(address => uint256) public playerGames;\r\n\r\n    Winner[] public winners;\r\n    Game[] public games;\r\n\r\n    struct Game {\r\n        int64 telegramId;\r\n        uint256 gameId;\r\n        address[] players;\r\n        uint256[] bets;\r\n        uint256 totalBet;\r\n        bool isActive;\r\n    }\r\n\r\n    struct Winner {\r\n        address winnerAddress;\r\n        uint256 amountWon;\r\n        uint256 gameId;\r\n        int64 telegramId;\r\n    }\r\n\r\n    event Authenticated(address indexed user, string secretKey);\r\n    event GameStarted(int64 indexed telegramId, uint256 indexed gameId, address[] players, uint256[] bets, uint256 totalBet);\r\n\r\n    event WinnerDeclared(int64 indexed telegramId, uint256 indexed gameId, address[] winners, uint256 totalBet, uint256 eachWinnerGets, uint256 toTeamWallet, uint256 toPlayers);\r\n    event WinnerAdded(address indexed winnerAddress, uint256 amountWon, uint256 gameId, int64 telegramId);\r\n    event FundsReleased(uint256 gameId, address[] players, uint256[] amounts);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            END GAME VAR - LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balance[_msgSender()] = _totalSupply;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = 0;\r\n\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul((_buyCount > _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax).div(100);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                    require(\r\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\r\n                        \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\"\r\n                    );\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n\r\n                if (!isHolder[to] && to != address(0)) {\r\n                    holders.push(to);\r\n                    isHolder[to] = true;\r\n                }\r\n\r\n                paymentAmounts[to] += amount;\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                taxAmount = amount.mul((_buyCount > _reduceSellTaxAt) ? _finalSellTax : _initialSellTax).div(100);\r\n\r\n                if (_balance[from] == 0 && isHolder[from]) {\r\n                    for (uint256 i = 0; i < holders.length; i++) {\r\n                        if (holders[i] == from) {\r\n                            holders[i] = holders[holders.length - 1];\r\n                            holders.pop();\r\n                            break;\r\n                        }\r\n                    }\r\n                    isHolder[from] = false;\r\n                    paymentAmounts[from] = 0;\r\n                } else if (isHolder[from]) {\r\n                    paymentAmounts[from] -= amount;\r\n                }\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold && _buyCount > _preventSwapBefore) {\r\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 50000000000000000) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n            _balance[address(this)] = _balance[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balance[from] = _balance[from].sub(amount);\r\n        _balance[to] = _balance[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _totalSupply;\r\n        _maxWalletSize=_totalSupply;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_totalSupply);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n    /*//////////////////////////////////////////////////////////////\r\n                            GAME LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    // @dev Function to lock balance (deducts from normal balance and adds to locked balance)\r\n    function lockBalance(address account, uint256 amount) internal {\r\n        require(_balance[account] >= amount, \"Insufficient balance to lock.\");\r\n        _balance[account] -= amount;\r\n        _lockedBalance[account] += amount;\r\n    }\r\n\r\n    // @dev Function to unlock balance (adds back to normal balance and deducts from locked balance)\r\n    function unlockBalance(address account, uint256 amount) internal {\r\n        require(_lockedBalance[account] >= amount, \"Insufficient locked balance to unlock.\");\r\n        _lockedBalance[account] -= amount;\r\n        _balance[account] += amount;\r\n    }\r\n\r\n    // @dev Function to get the locked balances of all active players\r\n    function getLockedBalances() public view returns (address[] memory, uint256[] memory) {\r\n        uint256[] memory balances = new uint256[](activePlayers.length);\r\n        for (uint i = 0; i < activePlayers.length; i++) {\r\n            balances[i] = _lockedBalance[activePlayers[i]];\r\n        }\r\n        return (activePlayers, balances);\r\n    }\r\n\r\n    function showAllWalletsAndGamesPlayed() public view returns(address[] memory, uint256[] memory) {\r\n        uint256[] memory playedGames = new uint256[](allUsers.length);\r\n        for(uint i = 0; i < allUsers.length; i++) {\r\n            playedGames[i] = gamesPlayed[allUsers[i]];\r\n        }\r\n        return (allUsers, playedGames);\r\n    }\r\n\r\n    function authenticate(string memory _secretKey) public {\r\n        require(!isAuthenticated[msg.sender], \"You are already authenticated.\");\r\n        gameKeys[msg.sender] = _secretKey;\r\n        isAuthenticated[msg.sender] = true;\r\n        allUsers.push(msg.sender);\r\n        emit Authenticated(msg.sender, _secretKey);\r\n    }\r\n\r\n    function checkBalance(address _user) public view returns (uint256) {\r\n        return _balance[_user]; // We use the token balance directly\r\n    }\r\n\r\n    function getInfo() public view returns (address[] memory, string[] memory, uint256[] memory) {\r\n        require(msg.sender == owner() || msg.sender == secondaryContract, \"Unauthorized\");\r\n        \r\n        string[] memory keys = new string[](allUsers.length);\r\n        uint256[] memory vals = new uint256[](allUsers.length);\r\n\r\n        for (uint i = 0; i < allUsers.length; i++) {\r\n            keys[i] = gameKeys[allUsers[i]];\r\n            vals[i] = _balance[allUsers[i]]; // We use the token balance directly\r\n        }\r\n\r\n        return (allUsers, keys, vals);\r\n    }\r\n\r\n\r\n    function startGame(int64 _telegramId, uint256 _gameId, address[] memory _players, uint256[] memory _bets, uint256 _totalBet) public {\r\n        require(msg.sender == owner() || msg.sender == secondaryContract, \"Unauthorized\");\r\n        for(uint i = 0; i < _players.length; i++) {\r\n            require(isAuthenticated[_players[i]], \"All players must be authenticated.\");\r\n            require(_balance[_players[i]] >= _bets[i], \"Insufficient token balance for player.\");\r\n            lockBalance(_players[i], _bets[i]);  // Locking tokens here\r\n            activePlayers.push(_players[i]);  // Updating active players\r\n        }\r\n\r\n        Game memory newGame = Game(_telegramId, _gameId, _players, _bets, _totalBet, true);\r\n        games.push(newGame);\r\n\r\n        emit GameStarted(_telegramId, _gameId, _players, _bets, _totalBet);\r\n    }\r\n\r\n    // @dev Give back the tokens in case of error\r\n    function releaseLockedFunds(uint256 _gameId) public {\r\n        require(msg.sender == owner() || msg.sender == secondaryContract, \"Unauthorized\");\r\n        // Find the game by _gameId\r\n        uint256 gameIndex = 0;\r\n        bool gameFound = false;\r\n        for(uint i = 0; i < games.length; i++) {\r\n            if(games[i].gameId == _gameId && games[i].isActive) {\r\n                gameIndex = i;\r\n                gameFound = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(gameFound, \"Game not found or already finalized.\");\r\n\r\n        Game storage game = games[gameIndex];\r\n\r\n        // Arrays to store the information that will be emitted in the event\r\n        address[] memory refundedPlayers = new address[](game.players.length);\r\n        uint256[] memory refundedAmounts = new uint256[](game.players.length);\r\n\r\n        // Unlock the funds for each player\r\n        for(uint i = 0; i < game.players.length; i++) {\r\n            address player = game.players[i];\r\n            uint256 bet = game.bets[i];\r\n            unlockBalance(player, bet);  // Assuming you have an unlockBalance function that does this\r\n\r\n            // Store the information for the event\r\n            refundedPlayers[i] = player;\r\n            refundedAmounts[i] = bet;\r\n        }\r\n\r\n        // Mark the game as inactive\r\n        game.isActive = false;\r\n\r\n        // Delete the list of active players, as there's only one active game at a time\r\n        delete activePlayers;\r\n\r\n        // Emit the updated event\r\n        emit FundsReleased(_gameId, refundedPlayers, refundedAmounts);\r\n    }\r\n\r\n    // Check the last rewarded holders\r\n    function getLastRewardedHolders() public view returns (address[] memory, uint256[] memory) {\r\n        uint256[] memory amounts = new uint256[](lastRewardedHolders.length);\r\n        for (uint i = 0; i < lastRewardedHolders.length; i++) {\r\n            amounts[i] = lastRewardAmounts[lastRewardedHolders[i]];\r\n        }\r\n        return (lastRewardedHolders, amounts);\r\n    }\r\n\r\n    // Check winners\r\n    function getWinnersDetails() public view returns (address[] memory, uint256[] memory, uint256[] memory) {\r\n        // Initialize arrays to store the details\r\n        address[] memory winnerAddresses = new address[](winners.length);\r\n        uint256[] memory winnerAmounts = new uint256[](winners.length);\r\n        uint256[] memory winnerGameIds = new uint256[](winners.length);\r\n        \r\n        // Fill the arrays with the winners' details\r\n        for (uint256 i = 0; i < winners.length; i++) {\r\n            winnerAddresses[i] = winners[i].winnerAddress;\r\n            winnerAmounts[i] = winners[i].amountWon;\r\n            winnerGameIds[i] = winners[i].gameId;\r\n        }\r\n        \r\n        return (winnerAddresses, winnerAmounts, winnerGameIds);\r\n    }\r\n\r\n    // @dev Only owner can declare a winner\r\n    function declareWinner(int64 _telegramId, uint256 _gameId, address[] memory _winners) public {\r\n        require(msg.sender == owner() || msg.sender == secondaryContract, \"Unauthorized\");\r\n        require(_telegramId != 0, \"Telegram ID must be non-zero\");\r\n        require(_winners.length > 0, \"At least one winner must be specified\");\r\n        require(games.length > 0, \"No games available\");\r\n\r\n        uint256 gameIndex = findGameIndex(_telegramId, _gameId);\r\n        Game storage game = games[gameIndex];\r\n\r\n        validateWinners(game, _winners);\r\n        \r\n        uint256 totalBet = game.totalBet;\r\n        uint256 toDeadWallet = totalBet / 100;  \r\n        uint256 toTeamWallet = (totalBet * 1) / 100;  \r\n        uint256 toPlayers = (totalBet * 3) / 100;  \r\n\r\n        _balance[DEAD_WALLET] += toDeadWallet;\r\n        _balance[TEAM_WALLET] += toTeamWallet;\r\n        \r\n        // Assuming distributeToHolders(toPlayers) is a necessary function call\r\n        distributeToHolders(toPlayers);\r\n\r\n        uint256 totalToWinners = totalBet - toDeadWallet - toTeamWallet - toPlayers;\r\n        uint256 eachWinnerGets = totalToWinners / _winners.length;\r\n\r\n        // Distribution to winners and emitting events\r\n        for (uint j = 0; j < _winners.length; j++) {\r\n            _balance[_winners[j]] += eachWinnerGets;\r\n            winners.push(Winner(_winners[j], eachWinnerGets, _gameId, _telegramId));\r\n            emit WinnerAdded(_winners[j], eachWinnerGets, _gameId, _telegramId);\r\n        }\r\n        \r\n        // Unlocking tokens for each player in the game that just ended\r\n        for (uint i = 0; i < game.players.length; i++) {\r\n            _lockedBalance[game.players[i]] = 0;\r\n        }\r\n\r\n        // Emit the event and clear the list of active players\r\n        emit WinnerDeclared(_telegramId, _gameId, _winners, totalBet, eachWinnerGets, toTeamWallet, toPlayers);\r\n        delete activePlayers;\r\n    }\r\n\r\n    function findGameIndex(int64 _telegramId, uint256 _gameId) internal view returns (uint256 gameIndex) {\r\n        bool gameFound = false;\r\n        for(uint i = 0; i < games.length; i++) {\r\n            if(games[i].gameId == _gameId && games[i].telegramId == _telegramId) {\r\n                gameIndex = i;\r\n                gameFound = true;\r\n                break;\r\n            }\r\n        }\r\n        require(gameFound, \"Game not found.\");\r\n    }\r\n\r\n    function validateWinners(Game storage game, address[] memory _winners) internal view {\r\n        for(uint j = 0; j < _winners.length; j++) {\r\n            bool isPlayer = false;\r\n            for(uint i = 0; i < game.players.length; i++) {\r\n                if(game.players[i] == _winners[j]) {\r\n                    isPlayer = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(isPlayer, \"All winners must be players in this game.\");\r\n        }\r\n    }\r\n\r\n    function distributeToDeadAndTeamWallet(uint256 toDeadWallet, uint256 toTeamWallet) internal {\r\n        _balance[DEAD_WALLET] += toDeadWallet;\r\n        _balance[TEAM_WALLET] += toTeamWallet;\r\n    }\r\n\r\n    function distributeToHolders(uint256 toPlayers) internal {\r\n        // Clear the array of rewarded holders and the mapping of amounts\r\n        for (uint i = 0; i < lastRewardedHolders.length; i++) {\r\n            delete lastRewardAmounts[lastRewardedHolders[i]];\r\n        }\r\n        delete lastRewardedHolders;\r\n\r\n        // Calculate the number of holders who qualify for the reward\r\n        uint256 numQualifyingHolders = 0;\r\n        for (uint i = 0; i < holders.length; i++) {\r\n            if (_balance[holders[i]] > _totalSupply / 200) {  // 0.5% of the total supply\r\n                numQualifyingHolders++;\r\n            }\r\n        }\r\n        \r\n        // Distribute 4% among the qualifying holders\r\n        if (numQualifyingHolders > 0) {\r\n            uint256 amountPerHolder = toPlayers / numQualifyingHolders;\r\n            for (uint i = 0; i < holders.length; i++) {\r\n                if (_balance[holders[i]] > _totalSupply / 200) {\r\n                    _balance[holders[i]] += amountPerHolder;\r\n                    lastRewardAmounts[holders[i]] = amountPerHolder;\r\n                    lastRewardedHolders.push(holders[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function distributeToWinners(address[] memory _winners, uint256 eachWinnerGets, uint256 _gameId, int64 _telegramId, uint256 totalBet, uint256 toTeamWallet, uint256 toPlayers) internal {\r\n        for(uint j = 0; j < _winners.length; j++) {\r\n            _balance[_winners[j]] += eachWinnerGets;\r\n            winners.push(Winner(_winners[j], eachWinnerGets, _gameId, _telegramId));\r\n            emit WinnerAdded(_winners[j], eachWinnerGets, _gameId, _telegramId);\r\n        }\r\n\r\n        // Emit the event\r\n        emit WinnerDeclared(_telegramId, _gameId, _winners, totalBet, eachWinnerGets, toTeamWallet, toPlayers);\r\n\r\n        // Clear the list of active players if there's only one active game at a time\r\n        delete activePlayers;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            END GAME LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secretKey\",\"type\":\"string\"}],\"name\":\"Authenticated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int64\",\"name\":\"telegramId\",\"type\":\"int64\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"telegramId\",\"type\":\"int64\"}],\"name\":\"WinnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int64\",\"name\":\"telegramId\",\"type\":\"int64\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eachWinnerGets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTeamWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPlayers\",\"type\":\"uint256\"}],\"name\":\"WinnerDeclared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activePlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_secretKey\",\"type\":\"string\"}],\"name\":\"authenticate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_telegramId\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"}],\"name\":\"declareWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"telegramId\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gamesPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardedHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnersDetails\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewardAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastRewardedHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"releaseLockedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secondaryContract\",\"type\":\"address\"}],\"name\":\"setControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showAllWalletsAndGamesPlayed\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_telegramId\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalBet\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"int64\",\"name\":\"telegramId\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BWIN", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://07ee328d3bdc09a43388077aaa646ff8bb231d03af4988f76c884a7e5438d1d4"}