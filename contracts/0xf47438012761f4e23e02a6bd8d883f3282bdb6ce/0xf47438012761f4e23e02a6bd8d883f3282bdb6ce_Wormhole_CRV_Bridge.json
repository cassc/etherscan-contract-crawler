{"SourceCode": "# @version 0.3.9\r\n\"\"\"\r\n@title Wormhole CRV Bridge\r\n@license MIT\r\n@author Curve Finance\r\n\"\"\"\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface BERC20:\r\n    def burn(_amount: uint256) -> bool: nonpayable\r\n\r\ninterface Minter:\r\n    def mint(_gauge: address): nonpayable\r\n\r\ninterface Relayer:\r\n    def sendPayloadToEvm(\r\n        _target_chain: uint16,\r\n        _target_addr: address,\r\n        _payload: Bytes[64],\r\n        _receiver_value: uint256,\r\n        _gas_limit: uint256,\r\n        _refund_chain: uint16,\r\n        _refund_address: address\r\n    ) -> uint64: payable\r\n    def quoteEVMDeliveryPrice(\r\n        _target_chain: uint16, _receiver_value: uint256, _gas_limit: uint256\r\n    ) -> uint256: view\r\n\r\n\r\nevent Bridged:\r\n    user: indexed(address)\r\n    target: indexed(address)\r\n    amount: uint256\r\n\r\nevent Received:\r\n    user: indexed(address)\r\n    amount: uint256\r\n\r\nevent TransferOwnership:\r\n    owner: indexed(address)\r\n\r\n\r\nuser_checkpoint: public(constant(bool)) = True\r\n\r\n\r\nTOKEN: public(immutable(address))\r\nMINTER: public(immutable(address))\r\nWORMHOLE_RELAYER: public(immutable(address))\r\nST_CHAIN_ID: public(immutable(uint16))  # https://docs.wormhole.com/wormhole/blockchain-environments/contracts\r\n\r\n\r\nintegrate_checkpoint: public(HashMap[address, uint256])\r\ndelivered: public(HashMap[bytes32, bool])\r\n\r\nowner: public(address)\r\nfuture_owner: public(address)\r\nis_killed: public(bool)\r\n\r\n\r\n@external\r\ndef __init__(_token: address, _minter: address, _relayer: address, _st_chain_id: uint16):\r\n    TOKEN = _token\r\n    MINTER = _minter\r\n    WORMHOLE_RELAYER = _relayer\r\n    ST_CHAIN_ID = _st_chain_id\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)\r\n\r\n\r\n@payable\r\n@external\r\n@nonreentrant('lock')\r\ndef bridge(_to: address, _amount: uint256, _gas_limit: uint256 = 250_000, _refund_address: address = msg.sender):\r\n    assert not self.is_killed\r\n    assert _amount != 0\r\n\r\n    assert ERC20(TOKEN).transferFrom(msg.sender, self, _amount)\r\n    assert BERC20(TOKEN).burn(_amount)\r\n\r\n    quote: uint256 = Relayer(WORMHOLE_RELAYER).quoteEVMDeliveryPrice(ST_CHAIN_ID, 0, _gas_limit)\r\n    Relayer(WORMHOLE_RELAYER).sendPayloadToEvm(\r\n        ST_CHAIN_ID,\r\n        self,\r\n        _abi_encode(_to, _amount),\r\n        0,\r\n        _gas_limit,\r\n        ST_CHAIN_ID,\r\n        _refund_address,\r\n        value=quote,\r\n    )\r\n\r\n    if self.balance != 0:\r\n        raw_call(msg.sender, b\"\", value=self.balance)\r\n\r\n    log Bridged(msg.sender, _to, _amount)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef receiveWormholeMessages(\r\n    _payload: Bytes[64],\r\n    _additional_vaas: DynArray[Bytes[8], 8],\r\n    _source_addr: bytes32,\r\n    _source_chain_id: uint16,\r\n    _delivery_hash: bytes32,\r\n):\r\n    assert msg.sender == WORMHOLE_RELAYER  # dev: only relayer\r\n    assert convert(_source_addr, address) == self  # dev: invalid source\r\n    assert _source_chain_id == ST_CHAIN_ID  # dev: invalid source chain\r\n    assert not self.delivered[_delivery_hash]  # dev: already delivered\r\n\r\n    user: address = empty(address)\r\n    amount: uint256 = 0\r\n    user, amount = _abi_decode(_payload, (address, uint256))\r\n\r\n    if amount != 0:\r\n        self.integrate_checkpoint[self] += amount\r\n        self.delivered[_delivery_hash] = True\r\n\r\n        Minter(MINTER).mint(self)\r\n        ERC20(TOKEN).transfer(user, amount)\r\n        log Received(user, amount)\r\n\r\n\r\n@view\r\n@external\r\ndef quote_bridge(_gas_limit: uint256 = 250_000) -> uint256:\r\n    return Relayer(WORMHOLE_RELAYER).quoteEVMDeliveryPrice(ST_CHAIN_ID, 0, _gas_limit)\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool):\r\n    assert msg.sender == self.owner\r\n\r\n    self.is_killed = _is_killed\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership to `_future_owner`\r\n    @param _future_owner The account to commit as the future owner\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.future_owner = _future_owner\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept the transfer of ownership\r\n    @dev Only the committed future owner can call this function\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only future owner\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)", "ABI": "[{\"name\":\"Bridged\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true},{\"name\":\"target\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Received\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TransferOwnership\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_relayer\",\"type\":\"address\"},{\"name\":\"_st_chain_id\",\"type\":\"uint16\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_gas_limit\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_gas_limit\",\"type\":\"uint256\"},{\"name\":\"_refund_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"receiveWormholeMessages\",\"inputs\":[{\"name\":\"_payload\",\"type\":\"bytes\"},{\"name\":\"_additional_vaas\",\"type\":\"bytes[]\"},{\"name\":\"_source_addr\",\"type\":\"bytes32\"},{\"name\":\"_source_chain_id\",\"type\":\"uint16\"},{\"name\":\"_delivery_hash\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"quote_bridge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"quote_bridge\",\"inputs\":[{\"name\":\"_gas_limit\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_killed\",\"inputs\":[{\"name\":\"_is_killed\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"user_checkpoint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"TOKEN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MINTER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WORMHOLE_RELAYER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ST_CHAIN_ID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_checkpoint\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delivered\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]", "ContractName": "Wormhole CRV Bridge", "CompilerVersion": "vyper:0.3.9", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000d061d61a4d941c39e5453435b6345dc261c2fce000000000000000000000000027428dd2d3dd32a4d7f7c497eaaa23130d8949110000000000000000000000000000000000000000000000000000000000000006", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}