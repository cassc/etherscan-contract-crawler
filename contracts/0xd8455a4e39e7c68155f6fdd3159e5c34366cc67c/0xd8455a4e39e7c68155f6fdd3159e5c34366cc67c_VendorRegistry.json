{"SourceCode": "{\"address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./math.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to array types.\\r\\n */\\r\\nlibrary Arrays {\\r\\n   /**\\r\\n     * @dev Searches a sorted `array` and returns the first index that contains\\r\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\r\\n     * values in the array are strictly less than `element`), the array length is\\r\\n     * returned. Time complexity O(log n).\\r\\n     *\\r\\n     * `array` is expected to be sorted in ascending order, and to contain no\\r\\n     * repeated elements.\\r\\n     */\\r\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\r\\n        if (array.length == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 low = 0;\\r\\n        uint256 high = array.length;\\r\\n\\r\\n        while (low \\u003c high) {\\r\\n            uint256 mid = Math.average(low, high);\\r\\n\\r\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\r\\n            // because Math.average rounds down (it does integer division with truncation).\\r\\n            if (array[mid] \\u003e element) {\\r\\n                high = mid;\\r\\n            } else {\\r\\n                low = mid + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\r\\n        if (low \\u003e 0 \\u0026\\u0026 array[low - 1] == element) {\\r\\n            return low - 1;\\r\\n        } else {\\r\\n            return low;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n */\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value \\u003e 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\"},\"erc1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./erc20snapshot.sol\\\";\\r\\nimport \\\"./address.sol\\\";\\r\\nimport \\\"./ierc165.sol\\\";\\r\\nimport \\\"./erc165.sol\\\";\\r\\nimport \\\"./ierc1363.sol\\\";\\r\\nimport \\\"./ierc1363receiver.sol\\\";\\r\\nimport \\\"./ierc1363spender.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC1363\\r\\n * @author Vittorio Minacori (https://github.com/vittominacori) (with trivial mods by loma oopaloopa)\\r\\n * @dev Implementation of an ERC1363 interface\\r\\n */\\r\\nabstract contract ERC1363 is ERC20Snapshot, IERC1363, ERC165 {\\r\\n    using Address for address;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\\r\\n     * @param recipient The address to transfer to.\\r\\n     * @param amount The amount to be transferred.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function transferAndCall(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        return transferAndCall(recipient, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\\r\\n     * @param recipient The address to transfer to\\r\\n     * @param amount The amount to be transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function transferAndCall(\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public virtual override returns (bool) {\\r\\n        transfer(recipient, amount);\\r\\n        require(_checkAndCallTransfer(_msgSender(), recipient, amount, data), \\\"ERC1363: _checkAndCallTransfer reverts\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\\r\\n     * @param sender The address which you want to send tokens from\\r\\n     * @param recipient The address which you want to transfer to\\r\\n     * @param amount The amount of tokens to be transferred\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function transferFromAndCall(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        return transferFromAndCall(sender, recipient, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\\r\\n     * @param sender The address which you want to send tokens from\\r\\n     * @param recipient The address which you want to transfer to\\r\\n     * @param amount The amount of tokens to be transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function transferFromAndCall(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public virtual override returns (bool) {\\r\\n        transferFrom(sender, recipient, amount);\\r\\n        require(_checkAndCallTransfer(sender, recipient, amount, data), \\\"ERC1363: _checkAndCallTransfer reverts\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\\r\\n     * @param spender The address allowed to transfer to\\r\\n     * @param amount The amount allowed to be transferred\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        return approveAndCall(spender, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\\r\\n     * @param spender The address allowed to transfer to.\\r\\n     * @param amount The amount allowed to be transferred.\\r\\n     * @param data Additional data with no specified format.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function approveAndCall(\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public virtual override returns (bool) {\\r\\n        approve(spender, amount);\\r\\n        require(_checkAndCallApprove(spender, amount, data), \\\"ERC1363: _checkAndCallApprove reverts\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke `onTransferReceived` on a target address\\r\\n     *  The call is not executed if the target address is not a contract\\r\\n     * @param sender address Representing the previous owner of the given token value\\r\\n     * @param recipient address Target address that will receive the tokens\\r\\n     * @param amount uint256 The amount mount of tokens to be transferred\\r\\n     * @param data bytes Optional data to send along with the call\\r\\n     * @return whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkAndCallTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) internal virtual returns (bool) {\\r\\n        if (!recipient.isContract()) {\\r\\n            return false;\\r\\n        }\\r\\n        bytes4 retval = IERC1363Receiver(recipient).onTransferReceived(_msgSender(), sender, amount, data);\\r\\n        return (retval == IERC1363Receiver(recipient).onTransferReceived.selector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke `onApprovalReceived` on a target address\\r\\n     *  The call is not executed if the target address is not a contract\\r\\n     * @param spender address The address which will spend the funds\\r\\n     * @param amount uint256 The amount of tokens to be spent\\r\\n     * @param data bytes Optional data to send along with the call\\r\\n     * @return whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkAndCallApprove(\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) internal virtual returns (bool) {\\r\\n        if (!spender.isContract()) {\\r\\n            return false;\\r\\n        }\\r\\n        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(_msgSender(), amount, data);\\r\\n        return (retval == IERC1363Spender(spender).onApprovalReceived.selector);\\r\\n    }\\r\\n}\\r\\n\"},\"erc165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ierc165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\"},\"erc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ierc20.sol\\\";\\r\\nimport \\\"./ierc20metadata.sol\\\";\\r\\nimport \\\"./context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\\r\\n\"},\"erc20snapshot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./erc20.sol\\\";\\r\\nimport \\\"./arrays.sol\\\";\\r\\nimport \\\"./counters.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\r\\n * total supply at the time are recorded for later access.\\r\\n *\\r\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\r\\n * In naive implementations it\\u0027s possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\r\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\r\\n * used to create an efficient ERC20 forking mechanism.\\r\\n *\\r\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\r\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\r\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\r\\n * and the account address.\\r\\n *\\r\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\r\\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\\r\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\r\\n *\\r\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\r\\n * alternative consider {ERC20Votes}.\\r\\n *\\r\\n * ==== Gas Costs\\r\\n *\\r\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\r\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\r\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\r\\n *\\r\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\r\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\r\\n * transfers will have normal cost until the next snapshot, and so on.\\r\\n */\\r\\n\\r\\nabstract contract ERC20Snapshot is ERC20 {\\r\\n    // Inspired by Jordi Baylina\\u0027s MiniMeToken to record historical balances:\\r\\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\r\\n\\r\\n    using Arrays for uint256[];\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\r\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\r\\n    struct Snapshots {\\r\\n        uint256[] ids;\\r\\n        uint256[] values;\\r\\n    }\\r\\n\\r\\n    mapping (address =\\u003e Snapshots) private _accountBalanceSnapshots;\\r\\n    Snapshots private _totalSupplySnapshots;\\r\\n\\r\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\r\\n    Counters.Counter private _currentSnapshotId;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\r\\n     */\\r\\n    event Snapshot(uint256 id);\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new snapshot and returns its snapshot id.\\r\\n     *\\r\\n     * Emits a {Snapshot} event that contains the same id.\\r\\n     *\\r\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\r\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\r\\n     * you must consider that it can potentially be used by attackers in two ways.\\r\\n     *\\r\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\r\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\r\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\r\\n     * section above.\\r\\n     *\\r\\n     * We haven\\u0027t measured the actual numbers; if this is something you\\u0027re interested in please reach out to us.\\r\\n     * ====\\r\\n     */\\r\\n    function _snapshot() internal virtual returns (uint256) {\\r\\n        _currentSnapshotId.increment();\\r\\n\\r\\n        uint256 currentId = _getCurrentSnapshotId();\\r\\n        emit Snapshot(currentId);\\r\\n        return currentId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the current snapshotId\\r\\n     */\\r\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\r\\n        return _currentSnapshotId.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\r\\n     */\\r\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\r\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\r\\n\\r\\n        return snapshotted ? value : balanceOf(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\r\\n     */\\r\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns(uint256) {\\r\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\r\\n\\r\\n        return snapshotted ? value : totalSupply();\\r\\n    }\\r\\n\\r\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\r\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n      super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n      if (from == address(0)) {\\r\\n        // mint\\r\\n        _updateAccountSnapshot(to);\\r\\n        _updateTotalSupplySnapshot();\\r\\n      } else if (to == address(0)) {\\r\\n        // burn\\r\\n        _updateAccountSnapshot(from);\\r\\n        _updateTotalSupplySnapshot();\\r\\n      } else {\\r\\n        // transfer\\r\\n        _updateAccountSnapshot(from);\\r\\n        _updateAccountSnapshot(to);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\\r\\n        private view returns (bool, uint256)\\r\\n    {\\r\\n        require(snapshotId \\u003e 0, \\\"ERC20Snapshot: id is 0\\\");\\r\\n        require(snapshotId \\u003c= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\r\\n\\r\\n        // When a valid snapshot is queried, there are three possibilities:\\r\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\r\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\r\\n        //  to this id is the current one.\\r\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\r\\n        //  requested id, and its value is the one to return.\\r\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\r\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\r\\n        //  larger than the requested one.\\r\\n        //\\r\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\r\\n        // it is not found, unless said value doesn\\u0027t exist (e.g. when all values are smaller). Arrays.findUpperBound does\\r\\n        // exactly this.\\r\\n\\r\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\r\\n\\r\\n        if (index == snapshots.ids.length) {\\r\\n            return (false, 0);\\r\\n        } else {\\r\\n            return (true, snapshots.values[index]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateAccountSnapshot(address account) private {\\r\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\r\\n    }\\r\\n\\r\\n    function _updateTotalSupplySnapshot() private {\\r\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\r\\n    }\\r\\n\\r\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\r\\n        uint256 currentId = _getCurrentSnapshotId();\\r\\n        if (_lastSnapshotId(snapshots.ids) \\u003c currentId) {\\r\\n            snapshots.ids.push(currentId);\\r\\n            snapshots.values.push(currentValue);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\r\\n        if (ids.length == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return ids[ids.length - 1];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"ierc1363.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IERC1363 {  /* is ERC20, ERC165 */\\r\\n  /*\\r\\n   * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\r\\n   * 0xb0202a11 ===\\r\\n   *   bytes4(keccak256(\\u0027transferAndCall(address,uint256)\\u0027)) ^\\r\\n   *   bytes4(keccak256(\\u0027transferAndCall(address,uint256,bytes)\\u0027)) ^\\r\\n   *   bytes4(keccak256(\\u0027transferFromAndCall(address,address,uint256)\\u0027)) ^\\r\\n   *   bytes4(keccak256(\\u0027transferFromAndCall(address,address,uint256,bytes)\\u0027)) ^\\r\\n   *   bytes4(keccak256(\\u0027approveAndCall(address,uint256)\\u0027)) ^\\r\\n   *   bytes4(keccak256(\\u0027approveAndCall(address,uint256,bytes)\\u0027))\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\r\\n   * @param to address The address which you want to transfer to\\r\\n   * @param value uint256 The amount of tokens to be transferred\\r\\n   * @return true unless throwing\\r\\n   */\\r\\n  function transferAndCall(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\r\\n   * @param to address The address which you want to transfer to\\r\\n   * @param value uint256 The amount of tokens to be transferred\\r\\n   * @param data bytes Additional data with no specified format, sent in call to `to`\\r\\n   * @return true unless throwing\\r\\n   */\\r\\n  function transferAndCall(address to, uint256 value, bytes memory data) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\r\\n   * @param from address The address which you want to send tokens from\\r\\n   * @param to address The address which you want to transfer to\\r\\n   * @param value uint256 The amount of tokens to be transferred\\r\\n   * @return true unless throwing\\r\\n   */\\r\\n  function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\r\\n   * @param from address The address which you want to send tokens from\\r\\n   * @param to address The address which you want to transfer to\\r\\n   * @param value uint256 The amount of tokens to be transferred\\r\\n   * @param data bytes Additional data with no specified format, sent in call to `to`\\r\\n   * @return true unless throwing\\r\\n   */\\r\\n  function transferFromAndCall(address from, address to, uint256 value, bytes memory data) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\r\\n   * and then call `onApprovalReceived` on spender.\\r\\n   * @param spender address The address which will spend the funds\\r\\n   * @param value uint256 The amount of tokens to be spent\\r\\n   */\\r\\n  function approveAndCall(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\r\\n   * and then call `onApprovalReceived` on spender.\\r\\n   * @param spender address The address which will spend the funds\\r\\n   * @param value uint256 The amount of tokens to be spent\\r\\n   * @param data bytes Additional data with no specified format, sent in call to `spender`\\r\\n   */\\r\\n  function approveAndCall(address spender, uint256 value, bytes memory data) external returns (bool);\\r\\n}\"},\"ierc1363receiver.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * @title IERC1363Receiver interface\\r\\n * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`\\r\\n *  from ERC1363 token contracts.\\r\\n */\\r\\ninterface IERC1363Receiver {\\r\\n  /*\\r\\n   * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\\r\\n   * 0x88a7ca5c === bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice Handle the receipt of ERC1363 tokens\\r\\n   * @dev Any ERC1363 smart contract calls this function on the recipient\\r\\n   * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\\r\\n   * transfer. Return of other than the magic value MUST result in the\\r\\n   * transaction being reverted.\\r\\n   * Note: the token contract address is always the message sender.\\r\\n   * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\\r\\n   * @param from address The address which are token transferred from\\r\\n   * @param value uint256 The amount of tokens transferred\\r\\n   * @param data bytes Additional data with no specified format\\r\\n   * @return `bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))`\\r\\n   *  unless throwing\\r\\n   */\\r\\n  function onTransferReceived(address operator, address from, uint256 value, bytes memory data) external returns (bytes4);\\r\\n}\"},\"ierc1363spender.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * @title IERC1363Spender interface\\r\\n * @dev Interface for any contract that wants to support `approveAndCall`\\r\\n *  from ERC1363 token contracts.\\r\\n */\\r\\ninterface IERC1363Spender {\\r\\n  /*\\r\\n   * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\\r\\n   * 0x7b04a2d0 === bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice Handle the approval of ERC1363 tokens\\r\\n   * @dev Any ERC1363 smart contract calls this function on the recipient\\r\\n   * after an `approve`. This function MAY throw to revert and reject the\\r\\n   * approval. Return of other than the magic value MUST result in the\\r\\n   * transaction being reverted.\\r\\n   * Note: the token contract address is always the message sender.\\r\\n   * @param owner address The address which called `approveAndCall` function\\r\\n   * @param value uint256 The amount of tokens to be spent\\r\\n   * @param data bytes Additional data with no specified format\\r\\n   * @return `bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))`\\r\\n   *  unless throwing\\r\\n   */\\r\\n  function onApprovalReceived(address owner, uint256 value, bytes memory data) external returns (bytes4);\\r\\n}\"},\"ierc165.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IERC165 {\\r\\n    /// @notice Query if a contract implements an interface\\r\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\r\\n    /// @dev Interface identification is specified in ERC-165. This function\\r\\n    ///  uses less than 30,000 gas.\\r\\n    /// @return `true` if the contract implements `interfaceID` and\\r\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\"},\"ierc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"ierc20metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ierc20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"},\"imigratablevendorregistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/// A collection of all methods on a previous VendorRegistry called by the new version of WrappedAsset during migration.\\r\\n/// The migration process does not use any VendorRegistry methods on the previous version that are not in this interface.\\r\\ninterface IMigratableVendorRegistry\\r\\n    {\\r\\n    /// Look up the MRX addrees for a given (ethereum or BSC) vendor address.\\r\\n    /// @param  vendorAddress The vendor address address for which to look up the MRX address.\\r\\n    /// @return The MRX address, or address(0) if the vendor address is not registered.\\r\\n    function findMrxFromVendor(address vendorAddress) external view returns (address);\\r\\n    }\\r\\n\"},\"imigratablewrappedasset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/// A collection of all methods on a previous WrappedAsset called by the new version of WrappedAsset during migration.\\r\\n/// The migration process does not use any WrappedAsset methods on the previous version that are not in this interface.\\r\\ninterface IMigratableWrappedAsset\\r\\n    {\\r\\n    /// Only called by the next version of WrappedAsset during migration, this method deducts a maximum amount or its total value (whichever is less) from the given account.\\r\\n    /// @param   account   The account from which to remove the wrapped MRX.\\r\\n    /// @param   maxAmount The maximum amount to deduct in satoshi.\\r\\n    /// @return The amount of MRX actually removed.\\r\\n    function migrationBurn(address account, uint256 maxAmount) external returns (uint256);\\r\\n    }\\r\\n\"},\"iownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ninterface IOwnable\\r\\n    {\\r\\n    function getOwner() external view returns (address);\\r\\n    modifier isOwner() virtual;\\r\\n    }\\r\\n\"},\"managable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Managable\\r\\n * @dev Set \\u0026 change managers permission\\r\\n */\\r\\ncontract Managable is Ownable {\\r\\n    mapping(address =\\u003e bool) private managers;\\r\\n\\r\\n    // event for EVM logging\\r\\n    event ManagersChanged(address indexed manager, bool allowed);\\r\\n\\r\\n    // modifier to check if caller is manager\\r\\n    modifier isManager() {\\r\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(\\r\\n            managers[msg.sender] == true || this.getOwner() == msg.sender,\\r\\n            \\\"Caller is not manager\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change manager\\r\\n     * @param manager address of manager\\r\\n     */\\r\\n    function setManager(address manager, bool allowed) public isOwner {\\r\\n        managers[manager] = allowed;\\r\\n        emit ManagersChanged(manager, allowed);\\r\\n    }\\r\\n\\r\\n    function addressIsAManager(address addr) public view returns (bool) {\\r\\n        return managers[addr] == true || this.getOwner() == addr;\\r\\n    }\\r\\n}\\r\\n\"},\"math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003e= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute.\\r\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a / b + (a % b == 0 ? 0 : 1);\\r\\n    }\\r\\n}\\r\\n\"},\"ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./iownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set \\u0026 change owner\\r\\n */\\r\\ncontract Ownable is IOwnable {\\r\\n    address private owner;\\r\\n\\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n\\r\\n    // modifier to check if caller is owner\\r\\n    modifier isOwner() override {\\r\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public isOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address\\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() override public view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\\r\\n\"},\"pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\"},\"test_receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ierc1363receiver.sol\\\";\\r\\n\\r\\ncontract Test_Receiver is IERC1363Receiver\\r\\n    {\\r\\n    address public           lastOperatorSeen              = address(0);\\r\\n    address public           lastFromSeen                  = address(0);\\r\\n    uint256 public           lastValueSeen                 = 0;\\r\\n    bytes   public           lastDataSeen                  = bytes.concat();\\r\\n    bytes4  private constant INTERFACE_ID_ERC1363_RECEIVER = 0x88a7ca5c;\\r\\n\\r\\n    function onTransferReceived(address operator, address from, uint256 value, bytes memory data) external override returns (bytes4)\\r\\n        {\\r\\n        lastOperatorSeen = operator;\\r\\n        lastFromSeen = from;\\r\\n        lastValueSeen = value;\\r\\n        lastDataSeen = data;\\r\\n        return INTERFACE_ID_ERC1363_RECEIVER;\\r\\n        }\\r\\n    }\\r\\n\"},\"test_spender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./ierc1363spender.sol\\\";\\r\\n\\r\\ncontract Test_Spender is IERC1363Spender\\r\\n    {\\r\\n    address public           lastOwnerSeen                = address(0);\\r\\n    uint256 public           lastValueSeen                = 0;\\r\\n    bytes   public           lastDataSeen                 = bytes.concat();\\r\\n    bytes4  private constant INTERFACE_ID_ERC1363_SPENDER = 0x7b04a2d0;\\r\\n\\r\\n    function onApprovalReceived(address owner, uint256 value, bytes memory data) external override returns (bytes4)\\r\\n        {\\r\\n        lastOwnerSeen = owner;\\r\\n        lastValueSeen = value;\\r\\n        lastDataSeen = data;\\r\\n        return INTERFACE_ID_ERC1363_SPENDER;\\r\\n        }\\r\\n    }\\r\\n\"},\"vendorregistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./pausable.sol\\\";\\r\\nimport \\\"./managable.sol\\\";\\r\\nimport \\\"./wrappedasset.sol\\\";\\r\\nimport \\\"./imigratablevendorregistry.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n/// Maintains a registry of Ethereum/BSC adrresses of vendors allowed to wrap MRX, \\u0026 their associated MRX withdrawal addresses.\\r\\n/// @title  VendorRegistry\\r\\n/// @dev    Uses solidity mappings to maintain a bi-directional 1-to-1 mapping between ethereum or BSC addresses and MRX addresses.\\r\\n/// @author loma oopaloopa\\r\\ncontract VendorRegistry is Pausable, Managable, IMigratableVendorRegistry\\r\\n    {\\r\\n    address                     private wrappedAssetAddr;\\r\\n    WrappedAsset                private wrappedAsset;\\r\\n    mapping(address =\\u003e address) private vendor2mrx;\\r\\n    mapping(address =\\u003e address) private mrx2vendor;\\r\\n\\r\\n    /// Emitted when a registration is created or updated.\\r\\n    /// @param mrxAddress    The registration\\u0027s MRX address.\\r\\n    /// @param vendorAddress The registration\\u0027s (ethereum or BSC) vendor address.\\r\\n    event Registered(address mrxAddress, address vendorAddress);\\r\\n\\r\\n    /// Emitted when a registration\\u0027s MRX address is cahnged by setVendorRegistration().\\r\\n    /// @param mrxAddress    The registration\\u0027s old MRX address from before the change.\\r\\n    /// @param vendorAddress The registration\\u0027s (ethereum or BSC) vendor address.\\r\\n    event Unregistered(address mrxAddress, address vendorAddress);\\r\\n\\r\\n    /// Deploy a VendorRegistry and WrappedAssest pair, the parameters are apssed unchanged to the WrappedAsstes\\u0027s constructor.\\r\\n    constructor(string memory tokenName, string memory tokenSymbol, uint256 tokenCap, uint256 tokenSnapshotIntervalHours)\\r\\n        {\\r\\n        wrappedAsset = new WrappedAsset(tokenName, tokenSymbol, tokenCap, tokenSnapshotIntervalHours);\\r\\n        wrappedAssetAddr = address(wrappedAsset);\\r\\n        wrappedAsset.setVendorRegistry(address(this));\\r\\n        wrappedAsset.changeOwner(getOwner());\\r\\n        }\\r\\n\\r\\n    /// An owner only method to change the WrappedAsset this VendorRegistry is associated with, use WrappedAsset.setVendorRegistry() to make the required reciprical change on WrappedAsset.\\r\\n    /// @param WrappedAssetAddress The address of the new WrappedAsset contract to pair with.\\r\\n    function setWrappedAsset(address WrappedAssetAddress) public isOwner\\r\\n        {\\r\\n        wrappedAssetAddr = WrappedAssetAddress;\\r\\n        wrappedAsset = WrappedAsset(WrappedAssetAddress);\\r\\n        }\\r\\n\\r\\n    /// Look up the (ethereum or BSC) vendor address associated with a given MRX address.\\r\\n    /// @param  mrxAddress The MRX address for which to look up the vendor address.\\r\\n    /// @return The vendor address, or address(0) if the MRX address is not registered.\\r\\n    function findVendorFromMrx(address mrxAddress) public view returns (address)\\r\\n        {\\r\\n        return mrx2vendor[mrxAddress];\\r\\n        }\\r\\n\\r\\n    /// Look up the MRX addrees for a given (ethereum or BSC) vendor address.\\r\\n    /// @param  vendorAddress The vendor address address for which to look up the MRX address.\\r\\n    /// @return The MRX address, or address(0) if the vendor address is not registered.\\r\\n    function findMrxFromVendor(address vendorAddress) public override view returns (address)\\r\\n        {\\r\\n        return vendor2mrx[vendorAddress];\\r\\n        }\\r\\n\\r\\n    /// Check whether or not a given MRX address is registered.\\r\\n    /// @param  mrxAddress The MRX address for which to find the registration status.\\r\\n    /// @return True if the MRX address is registered and false if it\\u0027s not.\\r\\n    function isRegistered(address mrxAddress) public view returns (bool)\\r\\n        {\\r\\n        return mrx2vendor[mrxAddress] != address(0);\\r\\n        }\\r\\n\\r\\n    /// Get the address of the associated WrappedAsset contract.\\r\\n    /// @return The address of the associated WrappedAsset contract.\\r\\n    function getWrappedAsset() public view returns (address)\\r\\n        {\\r\\n        return wrappedAssetAddr;\\r\\n        }\\r\\n\\r\\n    /// A pausable method to register the caller\\u0027s (ethereum or BSC) address as a vendor, with the given MRX address. This is the method members of the public use to register.\\r\\n    /// @param mrxAddress The MRX address to register.\\r\\n    /// @param signature  A manager of this contract\\u0027s signature on a premission to register message.\\r\\n    function registerAsVendor(address mrxAddress, bytes memory signature) public whenNotPaused\\r\\n        {\\r\\n        require(mrxAddress != address(0), \\\"VendorRegistry: Registration failed, the MRX address can not be zero.\\\");\\r\\n        require(mrx2vendor[mrxAddress] == address(0) \\u0026\\u0026 vendor2mrx[msg.sender] == address(0), \\\"VendorRegistry: Registration failed, 1 or more addresses have already been registered.\\\");\\r\\n        bytes memory message = abi.encodePacked(msg.sender, address(this), mrxAddress);\\r\\n        require(addressIsAManager(recoverSigner(message, signature)), \\\"VendorRegistry: Registration failed, invalid signature.\\\");\\r\\n        mrx2vendor[mrxAddress] = msg.sender;\\r\\n        vendor2mrx[msg.sender] = mrxAddress;\\r\\n        emit Registered(mrxAddress, msg.sender);\\r\\n        }\\r\\n\\r\\n    /// A management only method to create a vendor registration, or to update the MRX address for an existing vendor registration.\\r\\n    /// @param mrxAddress    The new MRX address for the vendor.\\r\\n    /// @param vendorAddress The vendor\\u0027s (ethereum or BSC) address.\\r\\n    function setVendorRegistration(address mrxAddress, address vendorAddress) public isManager\\r\\n        {\\r\\n        require(mrxAddress != address(0) \\u0026\\u0026 vendorAddress != address(0), \\\"VendorRegistry: Registration failed, the zero address can not be registered.\\\");\\r\\n        bool registrationHappened = false;\\r\\n        address existingMrxAddress = vendor2mrx[vendorAddress];\\r\\n        if (existingMrxAddress != mrxAddress)\\r\\n            {\\r\\n            if (existingMrxAddress != address(0))\\r\\n                {\\r\\n                emit Unregistered(existingMrxAddress, mrx2vendor[existingMrxAddress]);\\r\\n                mrx2vendor[existingMrxAddress] = address(0);\\r\\n                }\\r\\n            registrationHappened = true;\\r\\n            vendor2mrx[vendorAddress] = mrxAddress;\\r\\n            }\\r\\n        address existingVendorAddress = mrx2vendor[mrxAddress];\\r\\n        if (existingVendorAddress != vendorAddress)\\r\\n            {\\r\\n            require(existingVendorAddress == address(0), \\\"VendorRegistry: Registration failed, the MRX address has already been registered by a different vendor.\\\");\\r\\n            registrationHappened = true;\\r\\n            mrx2vendor[mrxAddress] = vendorAddress;\\r\\n            }\\r\\n        if (registrationHappened) emit Registered(mrxAddress, vendorAddress);\\r\\n        }\\r\\n\\r\\n    /// Only ever called by WrappedAsset.migrateFromPreviousVersion(), this method checks if the vendor address is already registerd, and if not registers it with the given MRX address.\\r\\n    /// @param mrxAddress    The new MRX address for the vendor (to be used only if the vendor address is not already registered).\\r\\n    /// @param vendorAddress The vendor\\u0027s (ethereum or BSC) address.\\r\\n    function migrateVendorRegistration(address mrxAddress, address vendorAddress) external\\r\\n        {\\r\\n        require(msg.sender == wrappedAssetAddr, \\\"VendorRegistry: Access not permitted.\\\");\\r\\n        require(mrxAddress != address(0) \\u0026\\u0026 vendorAddress != address(0), \\\"VendorRegistry: Registration failed, the zero address can not be registered.\\\");\\r\\n        if (vendor2mrx[vendorAddress] == address(0))\\r\\n            {\\r\\n            require(mrx2vendor[mrxAddress] == address(0), \\\"VendorRegistry: Registration failed, the MRX address has already been registered.\\\");\\r\\n            vendor2mrx[vendorAddress] = mrxAddress;\\r\\n            mrx2vendor[mrxAddress] = vendorAddress;\\r\\n            emit Registered(mrxAddress, vendorAddress);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    /// A management only method to pause the public\\u0027s ability to register, however the (management only) setVendorRegistration() function will continue to work.\\r\\n    function pause() public isManager\\r\\n        {\\r\\n        _pause();\\r\\n        }\\r\\n\\r\\n    /// A management only method to restart the public\\u0027s ability to register.\\r\\n    function unpause() public isManager\\r\\n        {\\r\\n        _unpause();\\r\\n        }\\r\\n\\r\\n    function recoverSigner(bytes memory message, bytes memory signature) internal pure returns (address)\\r\\n        {\\r\\n        require(signature.length == 65, \\\"VendorRegistry: Action failed due to an invalid signature.\\\");\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        assembly\\r\\n            {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := byte(0, mload(add(signature, 96)))\\r\\n            }\\r\\n        return ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message))), v, r, s);\\r\\n        }\\r\\n    }\\r\\n\"},\"wrappedasset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./erc1363.sol\\\";\\r\\nimport \\\"./pausable.sol\\\";\\r\\nimport \\\"./managable.sol\\\";\\r\\nimport \\\"./vendorregistry.sol\\\";\\r\\nimport \\\"./imigratablewrappedasset.sol\\\";\\r\\nimport \\\"./imigratablevendorregistry.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n/// An ERC1363 (also ERC20) for wrapping MRX on the ethereum or BSC chain.\\r\\n/// @title  WrappedAsset\\r\\n/// @author loma oopaloopa\\r\\ncontract WrappedAsset is ERC1363, Pausable, Managable, IMigratableWrappedAsset\\r\\n    {\\r\\n    address                  public  prevVendorRegistry      = address(0);\\r\\n    address                  public  prevWrappedAsset        = address(0);\\r\\n    address                  public  nextWrappedAsset        = address(0);\\r\\n\\r\\n    uint256 immutable        private maxSupply;\\r\\n    uint256                  private snapshotIntervalSeconds;\\r\\n    uint256                  private snapshotId              = 0;\\r\\n    uint256                  private snapshotBlockTimestamp  = 0;\\r\\n    mapping(bytes32 =\\u003e bool) private usedNonces;\\r\\n    address                  private registryAddr            = address(0);\\r\\n    VendorRegistry           private registry;\\r\\n\\r\\n    /// Emitted whenever a new snapshot is stored.\\r\\n    /// @param blockTimestamp The timestamp of the first block after the snapshot.\\r\\n    /// @param blockNumber    The block number of the first block after the snapshot.\\r\\n    /// @param snapshotId     The new current snapshot ID after the snapshot.\\r\\n    event SnapshotInfo(uint256 indexed blockTimestamp, uint256 indexed blockNumber, uint256 indexed snapshotId);\\r\\n\\r\\n    /// Deploy a new WrappedAsset contract, never called directly -- only from VendorRegistry\\u0027s constructor.\\r\\n    /// @param tokenName                  The name for the token (returned by name()).\\r\\n    /// @param tokenSymbol                The symbol for the token (returned by symbol()).\\r\\n    /// @param tokenCap                   The cap or maximum amount of tokens allowed in satoshi.\\r\\n    /// @param tokenSnapshotIntervalHours The initial time in hours between automatic snapshots.\\r\\n    constructor(string memory tokenName, string memory tokenSymbol, uint256 tokenCap, uint256 tokenSnapshotIntervalHours) ERC20(tokenName, tokenSymbol) Ownable() Pausable()\\r\\n        {\\r\\n        require(tokenCap \\u003e 0, \\\"WrappedAsset: The maxSupply is 0, it must be \\u003e 0.\\\");\\r\\n        require(tokenSnapshotIntervalHours \\u003e 0, \\\"WrappedAsset: The time between snapshots can\\u0027t be 0, it must be at least 1 hour.\\\");\\r\\n        maxSupply = tokenCap;\\r\\n        snapshotIntervalSeconds = 60*60*tokenSnapshotIntervalHours;\\r\\n        }\\r\\n\\r\\n    /// An owner only method to change the VendorRegistry this WrappedAsset is associated with, use VendorRegistry.setWrappedAsset() to make the required reciprical change on VendorRegistry.\\r\\n    /// @param vendorRegistryAddress The address of the new VendorRegistry contract to pair with.\\r\\n    function setVendorRegistry(address vendorRegistryAddress) public isOwner\\r\\n        {\\r\\n        registryAddr = vendorRegistryAddress;\\r\\n        registry = VendorRegistry(vendorRegistryAddress);\\r\\n        }\\r\\n\\r\\n    /// Get the address of this WrappedAsset\\u0027s VendorRegistry.\\r\\n    /// @return The VendorRegistry contract\\u0027s address.\\r\\n    function getVendorRegistry() public view returns (address)\\r\\n        {\\r\\n        return registryAddr;\\r\\n        }\\r\\n\\r\\n    /// An owner only method to set the origin VendorRegistry \\u0026 WrappedAsset from which the public method migrateFromPreviousVersion() will transfer registrations and funds to this WrappedAsset and it\\u0027s VendorRegistry.\\r\\n    /// Call setNextVersion() on the previous WrappedAsset first.\\r\\n    /// @param vendorRegistry The address of the origin VendorRegistry from which registrations will be transfered to this WrappedAsset\\u0027s VendorRegistry by migrateFromPreviousVersion().\\r\\n    /// @param wrappedAsset   The address of the origin WrappedAsset from which funds will be transfered to this WrappedAsset by migrateFromPreviousVersion().\\r\\n    function setPrevVersion(address vendorRegistry, address wrappedAsset) public isOwner\\r\\n        {\\r\\n        require(vendorRegistry != address(0), \\\"WrappedAsset: The address of the previous VendorRegistry can\\u0027t be 0.\\\");\\r\\n        require(wrappedAsset != address(0), \\\"WrappedAsset: The address of the previous WrappedAsset can\\u0027t be 0.\\\");\\r\\n        require(prevVendorRegistry == address(0), \\\"WrappedAsset: The previous version has already been set.\\\");\\r\\n        prevVendorRegistry = vendorRegistry;\\r\\n        prevWrappedAsset = wrappedAsset;\\r\\n        }\\r\\n\\r\\n    /// An owner only method to set the address of the next version of WrappedAsset which is allowed to migrate funds and registrations out of this WrappedAsset and it\\u0027s VendorRegistry.\\r\\n    /// After calling this call setPrevVersion() on the next WrappedAsset to enable migration.\\r\\n    /// @param wrappedAsset The address of the WrappedAsset to which funds may be migrated (I.E. the WrappedAsset allowed to call migrationBurn()).\\r\\n    function setNextVersion(address wrappedAsset) public isOwner\\r\\n        {\\r\\n        require(wrappedAsset != address(0), \\\"WrappedAsset: The address of the next WrappedAsset can\\u0027t be 0.\\\");\\r\\n        require(nextWrappedAsset == address(0), \\\"WrappedAsset: The next version has already been set.\\\");\\r\\n        nextWrappedAsset = wrappedAsset;\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc ERC20\\r\\n    function name() public view virtual override returns (string memory)\\r\\n        {\\r\\n        return super.name();\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc ERC20\\r\\n    function symbol() public view virtual override returns (string memory)\\r\\n        {\\r\\n        return super.symbol();\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc ERC20\\r\\n    function decimals() public pure virtual override returns (uint8)\\r\\n        {\\r\\n        return 8;\\r\\n        }\\r\\n\\r\\n    /// Get the maximum amount of tokens allowed in satoshi.\\r\\n    /// @return The maximum amount of tokens allowed in satoshi.\\r\\n    function cap() public view returns (uint256)\\r\\n        {\\r\\n        return maxSupply;\\r\\n        }\\r\\n\\r\\n    /// Get the maximum amount of tokens in satoshi that can currently be minted without exceeding the maximum supply.\\r\\n    /// @return The number of satoshi available before reaching the maximum supply.\\r\\n    function unusedSupply() public view virtual returns (uint256)\\r\\n        {\\r\\n        return maxSupply - totalSupply();\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc IERC20\\r\\n    function totalSupply() public view virtual override returns (uint256)\\r\\n        {\\r\\n        return super.totalSupply();\\r\\n        }\\r\\n\\r\\n    /// Get the amount of wrapped MRX in the caller\\u0027s account in satoshi.\\r\\n    /// @return The caller\\u0027s balance in satoshi.\\r\\n    function balance() public view virtual returns (uint256)\\r\\n        {\\r\\n        return super.balanceOf(_msgSender());\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc IERC20\\r\\n    function balanceOf(address account) public view virtual override returns (uint256)\\r\\n        {\\r\\n        return super.balanceOf(account);\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc IERC20\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool)\\r\\n        {\\r\\n        return super.transfer(recipient, amount);\\r\\n        }\\r\\n\\r\\n    /// Move the caller\\u0027s funds and, if necessary, their registration from the previous WrappedAsset \\u0026 VendorRegistry (as set with setPrevVersion()) to this WrappedAsset and ir\\u0027s VendorRegistry.\\r\\n    /// This is the method members of the public use to move to an upgraded WrappedAsset \\u0026 VendorRegistry.\\r\\n    function migrateFromPreviousVersion() public\\r\\n        {\\r\\n        require(prevVendorRegistry != address(0), \\\"WrappedAsset: Migration failed because the previous version has not been set.\\\");\\r\\n        IMigratableVendorRegistry prevVr = IMigratableVendorRegistry(prevVendorRegistry);\\r\\n        address mrxAddress = prevVr.findMrxFromVendor(_msgSender());\\r\\n        require(mrxAddress != address(0), \\\"WrappedAsset: Migration failed because the caller is not registered with the previous version.\\\");\\r\\n        if (registry.findMrxFromVendor(_msgSender()) == address(0)) registry.migrateVendorRegistration(mrxAddress, _msgSender());\\r\\n        IMigratableWrappedAsset prevWa = IMigratableWrappedAsset(prevWrappedAsset);\\r\\n        uint256 amount = prevWa.migrationBurn(_msgSender(), unusedSupply());\\r\\n        _mint(_msgSender(), amount);\\r\\n        }\\r\\n\\r\\n    /// A pausable method by which a member of the public can add an amount of wrapped MRX to their account 1 time only, and only with permission in the form of a nonce and a signature.\\r\\n    /// @param amount    The amount of wrapped MRX to add to the caller\\u0027s account in satoshi.\\r\\n    /// @param nonce     A 1 time use only large number forever uniquely identifying this permission to mint.\\r\\n    /// @param signature A manager of this contract\\u0027s signature on a premission to mint message.\\r\\n    function vendorMint(uint256 amount, bytes32 nonce, bytes memory signature) public whenNotPaused\\r\\n        {\\r\\n        require(totalSupply() + amount \\u003c= maxSupply, \\\"WrappedAsset: Mint failed, it would exceed the cap.\\\");\\r\\n        require(registry.findMrxFromVendor(msg.sender) != address(0), \\\"WrappedAsset: Mint failed, the caller\\u0027s address has not been registered as a vendor.\\\");\\r\\n        require(!usedNonces[nonce], \\\"WrappedAsset: Mint failed, this mint has been used before.\\\");\\r\\n        usedNonces[nonce] = true;\\r\\n        bytes memory message = abi.encodePacked(msg.sender, amount, address(this), nonce);\\r\\n        require(addressIsAManager(recoverSigner(message, signature)), \\\"WrappedAsset: Mint failed, invalid signature.\\\");\\r\\n        _mint(_msgSender(), amount);\\r\\n        }\\r\\n\\r\\n    /// Check whether or not the vendor mint identifed by the nonce has happened.\\r\\n    /// @return True if the mint has happened, and false otherwise.\\r\\n    function mintRedeemed(bytes32 nonce) public view returns (bool)\\r\\n        {\\r\\n        return usedNonces[nonce];\\r\\n        }\\r\\n\\r\\n    /// A manager only method to mint wrapped MRX into the manager\\u0027s account without needing any permission.\\r\\n    /// @param amount The amount of wrapped MRX to add to the manager\\u0027s account in satoshi.\\r\\n    function mint(uint256 amount) public isManager virtual\\r\\n        {\\r\\n        require(totalSupply() + amount \\u003c= maxSupply, \\\"WrappedAsset: Mint failed, it would exceed the cap.\\\");\\r\\n        _mint(_msgSender(), amount);\\r\\n        }\\r\\n\\r\\n    /// Deduct the given amount from the caller\\u0027s account.\\r\\n    /// @param amount The amount to be deducted from the caller\\u0027s account in satoshi.\\r\\n    function burn(uint256 amount) public virtual\\r\\n        {\\r\\n        require(registry.findMrxFromVendor(_msgSender()) != address(0), \\\"WrappedAsset: Burn failed, the caller\\u0027s address has not been registered as a vendor.\\\");\\r\\n        _burn(_msgSender(), amount);\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc IMigratableWrappedAsset\\r\\n    function migrationBurn(address account, uint256 maxAmount) external override returns (uint256)\\r\\n        {\\r\\n        require(address(0) != nextWrappedAsset, \\\"WrappedAsset: Migration failed because the next version has not been set.\\\");\\r\\n        require(_msgSender() == nextWrappedAsset, \\\"WrappedAsset: Access not permitted.\\\");\\r\\n        require(registry.findMrxFromVendor(account) != address(0), \\\"WrappedAsset: Migration failed, the caller\\u0027s address has not been registered as a vendor.\\\");\\r\\n        uint256 amount = balanceOf(account);\\r\\n        if (amount \\u003e maxAmount) amount = maxAmount;\\r\\n        _burn(account, amount);\\r\\n        return amount;\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc IERC20\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256)\\r\\n        {\\r\\n        return super.allowance(owner, spender);\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc IERC20\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool)\\r\\n        {\\r\\n        return super.approve(spender, amount);\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc IERC20\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool)\\r\\n        {\\r\\n        return super.transferFrom(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc ERC20\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool)\\r\\n        {\\r\\n        return super.increaseAllowance(spender, addedValue);\\r\\n        }\\r\\n\\r\\n    /// @inheritdoc ERC20\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool)\\r\\n        {\\r\\n        return super.decreaseAllowance(spender, subtractedValue);\\r\\n        }\\r\\n\\r\\n    /// Pause the process of vendor minting with vendorMint().\\r\\n    function pause() public isManager virtual\\r\\n        {\\r\\n        _pause();\\r\\n        }\\r\\n\\r\\n    /// Restart the process of vendor minting with vendorMint().\\r\\n    function unpause() public isManager virtual\\r\\n        {\\r\\n        _unpause();\\r\\n        }\\r\\n    /// Check whether or not the process of vendor minting with vendorMint() is currently paused.\\r\\n    /// @return True if the process of vendor minting with vendorMint() is currently paused, otherwise false.\\r\\n    function paused() public view virtual override returns (bool)\\r\\n        {\\r\\n        return super.paused();\\r\\n        }\\r\\n\\r\\n    /// Get the balance of account at the time snapshotId was created.\\r\\n    /// @param  account The account for which to get the balance at the time snapshotId was created.\\r\\n    /// @param  snapId  The id of the snapshot.\\r\\n    /// @return The amount of wrapped MRX in the account in satoshi. \\r\\n    function balanceOfAt(address account, uint256 snapId) public view virtual override returns (uint256)\\r\\n        {\\r\\n        return super.balanceOfAt(account, snapId);\\r\\n        }\\r\\n\\r\\n    /// Get the total supply at the time snapshotId was created.\\r\\n    /// @param  snapId The snapshot id.\\r\\n    /// @return The total supply at the time snapshotId was created in satoshi.\\r\\n    function totalSupplyAt(uint256 snapId) public view virtual override returns(uint256)\\r\\n        {\\r\\n        return super.totalSupplyAt(snapId);\\r\\n        }\\r\\n\\r\\n    /// Get the current snapshot id.\\r\\n    /// @return The current snapshot id.\\r\\n    function getCurrentSnapshotId() public view virtual returns (uint256)\\r\\n        {\\r\\n        return _getCurrentSnapshotId();\\r\\n        }\\r\\n\\r\\n    /// Take a snapshot.\\r\\n    /// @return The new current snapshot id after the snapshot.\\r\\n    function takeSnapshot() public isManager virtual returns (uint256)\\r\\n        {\\r\\n        nextSnapshotId(block.timestamp);\\r\\n        return _getCurrentSnapshotId();\\r\\n        }\\r\\n\\r\\n    /// Set the interval in hours between automatic snapshots.\\r\\n    /// @param snapshotIntervalHours The new interval in hours between automatic snapshots.\\r\\n    function setSnapshotIntervalHours(uint256 snapshotIntervalHours) public isManager virtual\\r\\n        {\\r\\n        require(snapshotIntervalHours \\u003e 0, \\\"WrappedAsset: The time between snapshots can\\u0027t be 0, it must be at least 1 hour.\\\");\\r\\n        snapshotIntervalSeconds = 60*60*snapshotIntervalHours;\\r\\n        }\\r\\n\\r\\n    /// Get the current interval in hours between automatic snapshots.\\r\\n    /// @return The current interval in hours between automatic snapshots.\\r\\n    function getSnapshotIntervalHours() public view virtual returns (uint256)\\r\\n        {\\r\\n        return snapshotIntervalSeconds/(60*60);\\r\\n        }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override\\r\\n        {\\r\\n        uint256 timestamp = block.timestamp;\\r\\n        if (timestamp \\u003e snapshotBlockTimestamp + snapshotIntervalSeconds) nextSnapshotId(timestamp);\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n        }\\r\\n\\r\\n    function nextSnapshotId(uint256 blockTimestamp) private\\r\\n        {\\r\\n        snapshotId++;\\r\\n        snapshotBlockTimestamp = blockTimestamp;\\r\\n        emit SnapshotInfo(blockTimestamp, block.number, snapshotId);\\r\\n        }\\r\\n\\r\\n    function _getCurrentSnapshotId() internal view virtual override returns (uint256)\\r\\n        {\\r\\n        return snapshotId;\\r\\n        }\\r\\n\\r\\n    function recoverSigner(bytes memory message, bytes memory signature) internal pure returns (address)\\r\\n        {\\r\\n        require(signature.length == 65, \\\"WrappedAsset: Action failed, invalid signature.\\\");\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        assembly\\r\\n            {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := byte(0, mload(add(signature, 96)))\\r\\n            }\\r\\n        return ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message))), v, r, s);\\r\\n        }\\r\\n    }\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSnapshotIntervalHours\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"ManagersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mrxAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendorAddress\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mrxAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendorAddress\",\"type\":\"address\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addressIsAManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vendorAddress\",\"type\":\"address\"}],\"name\":\"findMrxFromVendor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mrxAddress\",\"type\":\"address\"}],\"name\":\"findVendorFromMrx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mrxAddress\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mrxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendorAddress\",\"type\":\"address\"}],\"name\":\"migrateVendorRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mrxAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"registerAsVendor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mrxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendorAddress\",\"type\":\"address\"}],\"name\":\"setVendorRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WrappedAssetAddress\",\"type\":\"address\"}],\"name\":\"setWrappedAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VendorRegistry", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000000000000000044700000000000000000000000000000000000000000000000000000000000000000e57726170706564204d657472697800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d52586500000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b959f4375d971e7963decade82101fa3b3ea402c79e018d3a69eef2257c2f529"}