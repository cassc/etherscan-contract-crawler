{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-v4/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/rebalance-pool/RebalancePoolGaugeClaimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.20;\\n\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts-v4/access/Ownable2Step.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-v4/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IFxRebalancePoolSplitter } from \\\"../../interfaces/f(x)/IFxRebalancePoolSplitter.sol\\\";\\nimport { IFxTreasury } from \\\"../../interfaces/f(x)/IFxTreasury.sol\\\";\\nimport { ICurveTokenMinter } from \\\"../../interfaces/ICurveTokenMinter.sol\\\";\\n\\ncontract RebalancePoolGaugeClaimer is Ownable2Step {\\n  using SafeERC20 for IERC20;\\n\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the incentive ratio is updated.\\n  /// @param oldIncentiveRatio The value of previous incentive ratio, multiplied by 1e18.\\n  /// @param newIncentiveRatio The value of current incentive ratio, multiplied by 1e18.\\n  event UpdateIncentiveRatio(uint256 oldIncentiveRatio, uint256 newIncentiveRatio);\\n\\n  /// @notice Emitted when the splitter ratio parameter is updated.\\n  /// @param leverageRatioLowerBound The current lower bound of leverage ratio, multiplied by 1e18.\\n  /// @param leverageRatioUpperBound The current upper bound of leverage ratio, multiplied by 1e18.\\n  /// @param minSplitterRatio The current minimum splitter ratio, multiplied by 1e18.\\n  event UpdateSplitterRatio(uint256 leverageRatioLowerBound, uint256 leverageRatioUpperBound, uint256 minSplitterRatio);\\n\\n  /**********\\n   * Errors *\\n   **********/\\n\\n  /// @dev Thrown when the incentive ratio is too large.\\n  error ErrorIncentiveRatioTooLarge();\\n\\n  /// @dev Thrown when the leverage ratio lower bound is out of bound.\\n  error ErrorInvalidLeverageRatioLowerBound();\\n\\n  /// @dev Thrown when the leverage ratio upper bound is out of bound.\\n  error ErrorInvalidLeverageRatioUpperBound();\\n\\n  /// @dev Thrown when the min splitter ratio is out of bound.\\n  error ErrorInvalidMinSplitRatio();\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The incentive ratio precision.\\n  uint256 private constant PRECISION = 1e18;\\n\\n  /// @dev The maximum value of incentive ratio.\\n  uint256 private constant MAX_INCENTIVE_RATIO = 1e17; // 10%\\n\\n  /// @dev The minimum value of `leveratio_raio_min`.\\n  uint256 private constant MIN_LEVERAGE_RATIO_LOWER_BOUND = 13e17; // 1.3\\n\\n  /// @dev The maximum value of `leveratio_raio_min`.\\n  uint256 private constant MAX_LEVERAGE_RATIO_LOWER_BOUND = 2e18; // 2\\n\\n  /// @dev The minimum value of `leveratio_raio_max`.\\n  uint256 private constant MIN_LEVERAGE_RATIO_UPPER_BOUND = 2e18; // 2\\n\\n  /// @dev The maximum value of `leveratio_raio_max`.\\n  uint256 private constant MAX_LEVERAGE_RATIO_UPPER_BOUND = 5e18; // 5\\n\\n  /// @dev The minimum value of `splitter_raio_min`.\\n  uint256 private constant MIN_MINIMUM_SPLITTER_RATIO = 5e17; // 0.5\\n\\n  /// @dev The maximum value of `splitter_raio_max`.\\n  uint256 private constant MAX_MINIMUM_SPLITTER_RATIO = 1e18; // 1\\n\\n  /// @dev The address of FXN token.\\n  address private constant FXN = 0x365AccFCa291e7D3914637ABf1F7635dB165Bb09;\\n\\n  /// @dev The address of FXN token minter.\\n  address private constant TOKEN_MINTER = 0xC8b194925D55d5dE9555AD1db74c149329F71DeF;\\n\\n  /// @notice The address of FXN reserve pool.\\n  address public immutable reservePool;\\n\\n  /// @notice The address of Treasury contract.\\n  address public immutable treasury;\\n\\n  /// @notice The address of gauge contract.\\n  address public immutable gauge;\\n\\n  /// @notice The address of RebalancePoolSplitter contract.\\n  address public immutable splitter;\\n\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  /// @param leverageRatioLowerBound The lower bound value of leverage ratio.\\n  /// @param leverageRatioUpperBound The upper bound value of leverage ratio.\\n  /// @param minSplitterRatio The minimum value of splitter ratio.\\n  struct SplitterRatioParameters {\\n    uint64 leverageRatioLowerBound;\\n    uint64 leverageRatioUpperBound;\\n    uint64 minSplitterRatio;\\n  }\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The parameters used to compute splitter ratio.\\n  SplitterRatioParameters public params;\\n\\n  /// @notice The incentive ratio for caller of `claim`.\\n  uint256 public incentiveRatio;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(\\n    address _reservePool,\\n    address _treasury,\\n    address _gauge,\\n    address _splitter\\n  ) {\\n    reservePool = _reservePool;\\n    treasury = _treasury;\\n    gauge = _gauge;\\n    splitter = _splitter;\\n\\n    _updateSplitterRatioParameters(2 * 10**18, 3 * 10**18, 666666666666666666);\\n    _updateIncentiveRatio(10**16);\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Compute the current splitter ratio, multiplied by 1e18.\\n  function getSplitterRatio() external view returns (uint256) {\\n    return _computeSplitterRatio();\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Claim pending FXN from gauge and split to rebalance pools.\\n  /// @param _receiver The address of incentive receiver.\\n  function claim(address _receiver) external {\\n    unchecked {\\n      // @note We allow donating FXN to this contract, the incentive should only consider minted FXN.\\n      uint256 _balance = IERC20(FXN).balanceOf(address(this));\\n      ICurveTokenMinter(TOKEN_MINTER).mint(gauge);\\n      uint256 _minted = IERC20(FXN).balanceOf(address(this)) - _balance;\\n      uint256 _incentive = (_minted * incentiveRatio) / PRECISION;\\n      _balance += _minted;\\n\\n      if (_incentive > 0) {\\n        IERC20(FXN).safeTransfer(_receiver, _incentive);\\n        _balance -= _incentive;\\n      }\\n\\n      if (_balance > 0) {\\n        uint256 _ratio = _computeSplitterRatio();\\n        uint256 _splitterFXN = (_balance * _ratio) / PRECISION;\\n        // deposit rewards to rebalance pool splitter\\n        IERC20(FXN).safeTransfer(splitter, _splitterFXN);\\n        // transfer extra FXN to reserve pool\\n        IERC20(FXN).safeTransfer(reservePool, _balance - _splitterFXN);\\n        // split rewards\\n        IFxRebalancePoolSplitter(splitter).split(FXN);\\n      }\\n    }\\n  }\\n\\n  /************************\\n   * Restricted Functions *\\n   ************************/\\n\\n  /// @notice Update the incentive ratio.\\n  /// @param _newIncentiveRatio The new incentive ratio to claim caller, multiplied by 1e18.\\n  function updateIncentiveRatio(uint256 _newIncentiveRatio) external onlyOwner {\\n    _updateIncentiveRatio(_newIncentiveRatio);\\n  }\\n\\n  /// @notice Update the splitter ratio parameters.\\n  /// @param _minLeverage The minimum leverage ratio, multiplied by 1e18.\\n  /// @param _maxLeverage The maximum leverage ratio, multiplied by 1e18.\\n  /// @param _minRatio The minimum splitter ratio, multiplied by 1e18.\\n  function updateSplitterRatioParameters(\\n    uint64 _minLeverage,\\n    uint64 _maxLeverage,\\n    uint64 _minRatio\\n  ) external onlyOwner {\\n    _updateSplitterRatioParameters(_minLeverage, _maxLeverage, _minRatio);\\n  }\\n\\n  /************************\\n   * Internal Functions *\\n   ************************/\\n\\n  /// @dev Internal function to compute current splitter ratio.\\n  /// @return _splitterRatio The current splitter ratio, multiplied by 1e18.\\n  function _computeSplitterRatio() internal view returns (uint256 _splitterRatio) {\\n    SplitterRatioParameters memory _params = params;\\n    uint256 _leverageRatio = IFxTreasury(treasury).leverageRatio();\\n    if (_leverageRatio > _params.leverageRatioUpperBound) {\\n      _splitterRatio = _params.minSplitterRatio;\\n    } else if (_leverageRatio < _params.leverageRatioLowerBound) {\\n      _splitterRatio = PRECISION;\\n    } else {\\n      // a = (leverageRatioLowerBound * minSplitterRatio - leverageRatioUpperBound) / c\\n      // b = (1 - minSplitterRatio) / c\\n      // c = leverageRatioLowerBound - leverageRatioUpperBound\\n      // a + b * leverageRatio\\n      //   = leverageRatioLowerBound * minSplitterRatio - leverageRatioUpperBound + (1 - minSplitterRatio) * leverageRatio\\n      //   = minSplitterRatio * (leverageRatioLowerBound - leverageRatio) + leverageRatio - leverageRatioUpperBound\\n      unchecked {\\n        _splitterRatio =\\n          (uint256(_params.minSplitterRatio) *\\n            (_leverageRatio - uint256(_params.leverageRatioLowerBound)) +\\n            (uint256(_params.leverageRatioUpperBound) - _leverageRatio) *\\n            PRECISION) /\\n          uint256(_params.leverageRatioUpperBound - _params.leverageRatioLowerBound);\\n      }\\n    }\\n  }\\n\\n  /// @dev Internal function to update the incentive ratio.\\n  /// @param _newIncentiveRatio The new incentive ratio to claim caller, multiplied by 1e18.\\n  function _updateIncentiveRatio(uint256 _newIncentiveRatio) internal {\\n    if (_newIncentiveRatio > MAX_INCENTIVE_RATIO) {\\n      revert ErrorIncentiveRatioTooLarge();\\n    }\\n\\n    uint256 _oldIncentiveRatio = incentiveRatio;\\n    incentiveRatio = _newIncentiveRatio;\\n\\n    emit UpdateIncentiveRatio(_oldIncentiveRatio, _newIncentiveRatio);\\n  }\\n\\n  /// @dev Internal function to update the splitter ratio parameters.\\n  /// @param _leverageRatioLowerBound The lower bound of leverage ratio, multiplied by 1e18.\\n  /// @param _leverageRatioUpperBound The upper bound of leverage ratio, multiplied by 1e18.\\n  /// @param _minSplitterRatio The minimum splitter ratio, multiplied by 1e18.\\n  function _updateSplitterRatioParameters(\\n    uint64 _leverageRatioLowerBound,\\n    uint64 _leverageRatioUpperBound,\\n    uint64 _minSplitterRatio\\n  ) internal {\\n    if (\\n      _leverageRatioLowerBound < MIN_LEVERAGE_RATIO_LOWER_BOUND ||\\n      _leverageRatioLowerBound > MAX_LEVERAGE_RATIO_LOWER_BOUND\\n    ) {\\n      revert ErrorInvalidLeverageRatioLowerBound();\\n    }\\n    if (\\n      _leverageRatioUpperBound < MIN_LEVERAGE_RATIO_UPPER_BOUND ||\\n      _leverageRatioUpperBound > MAX_LEVERAGE_RATIO_UPPER_BOUND\\n    ) {\\n      revert ErrorInvalidLeverageRatioUpperBound();\\n    }\\n    if (_minSplitterRatio < MIN_MINIMUM_SPLITTER_RATIO || _minSplitterRatio > MAX_MINIMUM_SPLITTER_RATIO) {\\n      revert ErrorInvalidMinSplitRatio();\\n    }\\n\\n    params = SplitterRatioParameters(_leverageRatioLowerBound, _leverageRatioUpperBound, _minSplitterRatio);\\n\\n    emit UpdateSplitterRatio(_leverageRatioLowerBound, _leverageRatioUpperBound, _minSplitterRatio);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxRebalancePoolSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IFxRebalancePoolSplitter {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the address of splitter is updated.\\n  /// @param token The address of the token.\\n  /// @param oldSplitter The address of previous token splitter.\\n  /// @param newSplitter The address of current token splitter.\\n  event UpdateSplitter(address indexed token, address indexed oldSplitter, address indexed newSplitter);\\n\\n  /// @notice Emitted when a new receiver is added.\\n  /// @param token The address of the token.\\n  /// @param receiver The address of the receiver.\\n  event RegisterReceiver(address indexed token, address indexed receiver);\\n\\n  /// @notice Emitted when an exsited receiver is removed.\\n  /// @param token The address of the token.\\n  /// @param receiver The address of the receiver.\\n  event DeregisterReceiver(address indexed token, address indexed receiver);\\n\\n  /// @notice Emitted when the split ratio is updated.\\n  /// @param token The address of the token.\\n  /// @param ratios The list of new split ratios.\\n  event UpdateSplitRatios(address indexed token, uint256[] ratios);\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the splitter of the given token.\\n  /// @param token The address of token to query.\\n  function splitter(address token) external view returns (address);\\n\\n  /// @notice Return the receivers and split ratios for the given token.\\n  /// @param token The address of token to query.\\n  /// @return receivers The address list of receivers.\\n  /// @return ratios The list of corresponding split ratio.\\n  function getReceivers(address token) external view returns (address[] memory receivers, uint256[] memory ratios);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Split token to different RebalancePool.\\n  /// @param token The address of token to split.\\n  function split(address token) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IFxTreasury {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the net asset value is updated.\\n  /// @param price The new price of base token.\\n  /// @param fNav The new net asset value of fToken.\\n  event ProtocolSettle(uint256 price, uint256 fNav);\\n\\n  /*********\\n   * Enums *\\n   *********/\\n\\n  enum MintOption {\\n    Both,\\n    FToken,\\n    XToken\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the address of base token.\\n  function baseToken() external view returns (address);\\n\\n  /// @notice Return the address fractional base token.\\n  function fToken() external view returns (address);\\n\\n  /// @notice Return the address leveraged base token.\\n  function xToken() external view returns (address);\\n\\n  /// @notice Return the address of strategy contract.\\n  function strategy() external view returns (address);\\n\\n  /// @notice The last updated permissioned base token price.\\n  function lastPermissionedPrice() external view returns (uint256);\\n\\n  /// @notice Return the total amount of base token deposited.\\n  function totalBaseToken() external view returns (uint256);\\n\\n  /// @notice Return the total amount of base token managed by strategy.\\n  function strategyUnderlying() external view returns (uint256);\\n\\n  /// @notice Return the current collateral ratio of fToken, multipled by 1e18.\\n  function collateralRatio() external view returns (uint256);\\n\\n  /// @notice Convert unwrapped token amount to wrapped token amount.\\n  /// @param amount The unwrapped token amount.\\n  function convertToWrapped(uint256 amount) external view returns (uint256);\\n\\n  /// @notice Convert wrapped token amount to unwrapped token amount.\\n  /// @param amount The wrapped token amount.\\n  function convertToUnwrapped(uint256 amount) external view returns (uint256);\\n\\n  /// @notice Return current nav for base token, fToken and xToken.\\n  /// @return baseNav The nav for base token.\\n  /// @return fNav The nav for fToken.\\n  /// @return xNav The nav for xToken.\\n  function getCurrentNav()\\n    external\\n    view\\n    returns (\\n      uint256 baseNav,\\n      uint256 fNav,\\n      uint256 xNav\\n    );\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxFTokenMintable The amount of fToken can be minted.\\n  function maxMintableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxFTokenMintable);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxXTokenMintable);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio, with incentive.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @param incentiveRatio The extra incentive ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXTokenWithIncentive(uint256 newCollateralRatio, uint256 incentiveRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxXTokenMintable);\\n\\n  /// @notice Compute the amount of fToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of base token redeemed.\\n  /// @return maxFTokenRedeemable The amount of fToken needed.\\n  function maxRedeemableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxFTokenRedeemable);\\n\\n  /// @notice Compute the amount of xToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of base token redeemed.\\n  /// @return maxXTokenRedeemable The amount of xToken needed.\\n  function maxRedeemableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxXTokenRedeemable);\\n\\n  /// @notice Compute the maximum amount of fToken can be liquidated.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @param incentiveRatio The extra incentive ratio, multipled by 1e18.\\n  /// @return maxBaseOut The maximum amount of base token can liquidate, without incentive.\\n  /// @return maxFTokenLiquidatable The maximum amount of fToken can be liquidated.\\n  function maxLiquidatable(uint256 newCollateralRatio, uint256 incentiveRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxFTokenLiquidatable);\\n\\n  /// @notice Return the exponential moving average of the leverage ratio.\\n  function leverageRatio() external view returns (uint256);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint fToken and xToken with some base token.\\n  /// @param baseIn The amount of base token deposited.\\n  /// @param recipient The address of receiver.\\n  /// @param option The mint option, xToken or fToken or both.\\n  /// @return fTokenOut The amount of fToken minted.\\n  /// @return xTokenOut The amount of xToken minted.\\n  function mint(\\n    uint256 baseIn,\\n    address recipient,\\n    MintOption option\\n  ) external returns (uint256 fTokenOut, uint256 xTokenOut);\\n\\n  /// @notice Redeem fToken and xToken to base tokne.\\n  /// @param fTokenIn The amount of fToken to redeem.\\n  /// @param xTokenIn The amount of xToken to redeem.\\n  /// @param owner The owner of the fToken or xToken.\\n  /// @param baseOut The amount of base token redeemed.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address owner\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Add some base token to mint xToken with incentive.\\n  /// @param baseIn The amount of base token deposited.\\n  /// @param incentiveRatio The incentive ratio.\\n  /// @param recipient The address of receiver.\\n  /// @return xTokenOut The amount of xToken minted.\\n  function addBaseToken(\\n    uint256 baseIn,\\n    uint256 incentiveRatio,\\n    address recipient\\n  ) external returns (uint256 xTokenOut);\\n\\n  /// @notice Liquidate fToken to base token with incentive.\\n  /// @param fTokenIn The amount of fToken to liquidate.\\n  /// @param incentiveRatio The incentive ratio.\\n  /// @param owner The owner of the fToken.\\n  /// @param baseOut The amount of base token liquidated.\\n  function liquidate(\\n    uint256 fTokenIn,\\n    uint256 incentiveRatio,\\n    address owner\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Settle the nav of base token, fToken and xToken.\\n  function protocolSettle() external;\\n\\n  /// @notice Transfer some base token to strategy contract.\\n  /// @param amount The amount of token to transfer.\\n  function transferToStrategy(uint256 amount) external;\\n\\n  /// @notice Notify base token profit from strategy contract.\\n  /// @param amount The amount of base token.\\n  function notifyStrategyProfit(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveTokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\ninterface ICurveTokenMinter {\\n  function token() external view returns (address);\\n\\n  function controller() external view returns (address);\\n\\n  function minted(address _user, address _gauge) external view returns (uint256);\\n\\n  function allowed_to_mint_for(address _minter, address _user) external view returns (bool);\\n\\n  function mint(address gauge_addr) external;\\n\\n  function mint_many(address[8] memory gauge_addrs) external;\\n\\n  function mint_for(address gauge_addr, address _for) external;\\n\\n  function toggle_approve_mint(address minting_user) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reservePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_splitter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrorIncentiveRatioTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInvalidLeverageRatioLowerBound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInvalidLeverageRatioUpperBound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInvalidMinSplitRatio\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIncentiveRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIncentiveRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateIncentiveRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverageRatioLowerBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverageRatioUpperBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSplitterRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateSplitterRatio\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSplitterRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"leverageRatioLowerBound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"leverageRatioUpperBound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minSplitterRatio\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newIncentiveRatio\",\"type\":\"uint256\"}],\"name\":\"updateIncentiveRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minLeverage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maxLeverage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minRatio\",\"type\":\"uint64\"}],\"name\":\"updateSplitterRatioParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RebalancePoolGaugeClaimer", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b592e01dd77084b36430ffcb9c9d2f76fde32631000000000000000000000000ed803540037b0ae069c93420f89cd653b6e3df1f000000000000000000000000f422446f7730e50b9cab4618343425d9927b35ed00000000000000000000000078ef19714c8b3c71997970c156f59605a99c3ff3", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}