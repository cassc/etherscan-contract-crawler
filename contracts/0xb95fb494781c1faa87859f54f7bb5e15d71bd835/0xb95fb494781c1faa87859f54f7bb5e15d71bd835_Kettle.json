{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/CollateralVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { CollateralType } from \\\"./lib/Structs.sol\\\";\\n\\nimport { InvalidCollateralType, InvalidCollateral, InvalidCollateralCriteria } from \\\"./lib/Errors.sol\\\";\\n\\nlibrary CollateralVerifier {\\n\\n    function mapCollateralType(\\n        uint8 collateralType\\n    ) external pure returns (uint8) {\\n        if (\\n            collateralType == uint8(CollateralType.ERC721) ||\\n            collateralType == uint8(CollateralType.ERC721_WITH_CRITERIA)\\n        ) {\\n            return uint8(CollateralType.ERC721);\\n        } else if (\\n            collateralType == uint8(CollateralType.ERC1155) ||\\n            collateralType == uint8(CollateralType.ERC1155_WITH_CRITERIA)\\n        ) {\\n            return uint8(CollateralType.ERC1155);\\n        } else {\\n            revert InvalidCollateralType();\\n        }\\n    }\\n\\n    function verifyCollateral(\\n        uint8 collateralType,\\n        uint256 collateralRoot,\\n        uint256 tokenId,\\n        bytes32[] calldata proof\\n    ) external pure {\\n        if (\\n            collateralType == uint8(CollateralType.ERC721) ||\\n            collateralType == uint8(CollateralType.ERC1155)\\n        ) {\\n            if (tokenId != collateralRoot) {\\n                revert InvalidCollateral();\\n            }\\n            return;\\n        }\\n\\n        bytes32 computedRoot = processProofCalldata(proof, bytes32(tokenId));\\n        if (computedRoot != bytes32(collateralRoot)) {\\n            revert InvalidCollateralCriteria();\\n        }\\n    }\\n\\n    function processProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 leaf\\n    ) internal pure returns (bytes32) {\\n        bytes32 computedHash = keccak256(abi.encode(leaf));\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(\\n        bytes32 a,\\n        bytes32 b\\n    ) private pure returns (bytes32 value) {\\n        // solhint-disable-next-line\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { wadDiv, wadMul } from \\\"solmate/src/utils/SignedWadMath.sol\\\";\\nimport { InvalidCollateralType } from \\\"./lib/Errors.sol\\\";\\nimport { CollateralType, Fee } from \\\"./lib/Structs.sol\\\";\\n\\nlibrary Helpers {\\n    int256 private constant _YEAR_WAD = 365 days * 1e18;\\n    uint256 private constant _LIQUIDATION_THRESHOLD = 100_000;\\n    uint256 private constant _BASIS_POINTS = 10_000;\\n\\n    function bipsToSignedWads(uint256 bips) public pure returns (int256) {\\n        return int256((bips * 1e18) / _BASIS_POINTS);\\n    }\\n\\n    function computeCurrentDebt(\\n        uint256 amount,\\n        uint256 rate,\\n        uint256 duration\\n    ) public pure returns (uint256) {\\n        int256 yearsWad = wadDiv(int256(duration) * 1e18, _YEAR_WAD);\\n        return\\n            amount +\\n            uint256(\\n                wadMul(int256(amount), wadMul(yearsWad, bipsToSignedWads(rate)))\\n            );\\n    }\\n\\n    function computeAmountAfterFees(\\n        uint256 amount,\\n        Fee[] memory fees\\n    ) public pure returns (uint256 netAmount) {\\n        netAmount = amount;\\n        for (uint256 i = 0; i < fees.length; i++) {\\n            netAmount = netAmount - computeFeeAmount(amount, fees[i].rate);\\n        }\\n        return netAmount;\\n    }\\n\\n    function computeFeeAmount(\\n        uint256 amount,\\n        uint16 rate\\n    ) public pure returns (uint256) {\\n        return ((amount * rate) + _BASIS_POINTS - 1) / _BASIS_POINTS;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKettle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IOfferController } from \\\"./IOfferController.sol\\\";\\n\\nimport { OfferAuth, LoanOffer, BorrowOffer, LoanOfferInput, LoanFullfillment, BorrowOfferInput, BorrowFullfillment, RepayFullfillment, RefinanceFullfillment, Lien, LienPointer } from \\\"../lib/Structs.sol\\\";\\n\\ninterface IKettle is IOfferController {\\n    event Repay(uint256 lienId, address collection, uint256 amount);\\n\\n    event Seize(uint256 lienId, address collection);\\n\\n    event Refinance(\\n        uint256 lienId,\\n        address collection,\\n        address currency,\\n        uint256 amount,\\n        address oldLender,\\n        address newLender,\\n        uint256 oldBorrowAmount,\\n        uint256 newBorrowAmount,\\n        uint256 oldRate,\\n        uint256 newRate\\n    );\\n\\n    function liens(uint256 lienId) external view returns (bytes32 lienHash);\\n\\n    function getRepaymentAmount(\\n        uint256 borrowAmount,\\n        uint256 rate,\\n        uint256 duration\\n    ) external returns (uint256 repayAmount);\\n\\n    /*//////////////////////////////////////////////////\\n                    BORROW FLOWS\\n    //////////////////////////////////////////////////*/\\n    function borrow(\\n        LoanOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature,\\n        uint256 loanAmount,\\n        uint256 collateralTokenId,\\n        address borrower,\\n        bytes32[] calldata proof\\n    ) external returns (uint256 lienId);\\n\\n    function borrowBatch(\\n        LoanOfferInput[] calldata loanOffers,\\n        LoanFullfillment[] calldata fullfillments,\\n        address borrower\\n    ) external returns (uint256[] memory lienIds);\\n\\n    /*//////////////////////////////////////////////////\\n                    LOAN FLOWS\\n    //////////////////////////////////////////////////*/\\n    function loan(\\n        BorrowOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature\\n    ) external returns (uint256 lienId);\\n\\n    function loanBatch(\\n        BorrowOfferInput[] calldata borrowOffers,\\n        BorrowFullfillment[] calldata fullfillments\\n    ) external returns (uint256[] memory lienIds);\\n\\n    /*//////////////////////////////////////////////////\\n                      REPAYMENT FLOWS\\n    //////////////////////////////////////////////////*/\\n    function repay(Lien calldata lien, uint256 lienId) external;\\n\\n    function repayBatch(RepayFullfillment[] calldata repayments) external;\\n\\n    /*//////////////////////////////////////////////////\\n                    REFINANCING FLOWS\\n    //////////////////////////////////////////////////*/\\n    function refinance(\\n        Lien calldata lien,\\n        uint256 lienId,\\n        uint256 loanAmount,\\n        LoanOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature,\\n        bytes32[] calldata proof\\n    ) external;\\n    \\n    function refinanceBatch(\\n        LoanOfferInput[] calldata loanOffers,\\n        RefinanceFullfillment[] calldata fullfillments\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////\\n                    SEIZE FLOWS\\n    //////////////////////////////////////////////////*/\\n    function seize(LienPointer[] calldata lienPointers) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOfferController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ISignatures } from \\\"./ISignatures.sol\\\";\\n\\ninterface IOfferController is ISignatures {\\n    event LoanOfferTaken(\\n        bytes32 offerHash,\\n        uint256 lienId,\\n        address lender,\\n        address borrower,\\n        address currency,\\n        uint8 collateralType,\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 borrowAmount,\\n        uint256 netBorrowAmount,\\n        uint256 rate,\\n        uint256 duration,\\n        uint256 startTime\\n    );\\n\\n    event OfferCancelled(address indexed user, uint256 salt);\\n\\n    event NonceIncremented(address indexed user, uint256 newNonce);\\n\\n    function amountTaken(bytes32 offerHash) external view returns (uint256);\\n\\n    function cancelOffer(uint256 salt) external;\\n\\n    function cancelOffers(uint256[] calldata salts) external;\\n\\n    function incrementNonce() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISignatures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LoanOffer, BorrowOffer } from \\\"../lib/Structs.sol\\\";\\n\\ninterface ISignatures {\\n    function information()\\n        external\\n        view\\n        returns (string memory version, bytes32 domainSeparator);\\n\\n    function getLoanOfferHash(\\n        LoanOffer calldata offer\\n    ) external view returns (bytes32);\\n\\n    function getBorrowOfferHash(\\n        BorrowOffer calldata offer\\n    ) external view returns (bytes32);\\n\\n    function cancelledOrFulfilled(\\n        address user,\\n        uint256 salt\\n    ) external view returns (uint256);\\n\\n    function nonces(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Kettle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC721Holder } from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport { ERC1155Holder } from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport { Helpers } from \\\"./Helpers.sol\\\";\\nimport { CollateralVerifier } from \\\"./CollateralVerifier.sol\\\";\\nimport { SafeTransfer } from \\\"./SafeTransfer.sol\\\";\\n\\nimport { OfferController } from \\\"./OfferController.sol\\\";\\nimport { IKettle } from \\\"./interfaces/IKettle.sol\\\";\\n\\nimport { CollateralType, Fee, Lien, LoanOffer, BorrowOffer, LoanOfferInput, BorrowOfferInput, LienPointer, LoanFullfillment, BorrowFullfillment, RepayFullfillment, RefinanceFullfillment, OfferAuth } from \\\"./lib/Structs.sol\\\";\\n\\nimport { InvalidLien, Unauthorized, LienIsDefaulted, LienNotDefaulted, CollectionsDoNotMatch, CurrenciesDoNotMatch, NoEscrowImplementation, InvalidCollateralAmount, InvalidCollateralType, TotalFeeTooHigh } from \\\"./lib/Errors.sol\\\";\\n\\n/**\\n *  _        _   _   _      \\n * | |      | | | | | |     \\n * | | _____| |_| |_| | ___ \\n * | |/ / _ \\\\ __| __| |/ _ \\\\\\n * |   <  __/ |_| |_| |  __/\\n * |_|\\\\_\\\\___|\\\\__|\\\\__|_|\\\\___|\\n *\\n * @title Kettle\\n * @author diamondjim\\n * @custom:version 1.0\\n * @notice Kettle is a lending protocol that allows users to borrow against any tokenized asset\\n */\\n\\ncontract Kettle is IKettle, Ownable, OfferController, SafeTransfer, ERC721Holder, ERC1155Holder {\\n    uint256 private constant _BASIS_POINTS = 10_000;\\n    uint256 private constant _LIQUIDATION_THRESHOLD = 100_000;\\n    uint256 private _nextLienId;\\n\\n    mapping(uint256 => bytes32) public liens;\\n    mapping(address => address) public escrows;\\n\\n    constructor(address authSigner) OfferController(authSigner) { }\\n\\n    /*//////////////////////////////////////////////////\\n                       GETTERS\\n    //////////////////////////////////////////////////*/\\n    function getRepaymentAmount(\\n        uint256 borrowAmount,\\n        uint256 rate,\\n        uint256 duration\\n    ) public pure returns (uint256) {\\n        return Helpers.computeCurrentDebt(borrowAmount, rate, duration);\\n    }\\n\\n    function getEscrow(\\n        address collection\\n    ) public view returns (address escrow) {\\n        escrow = escrows[collection];\\n        if (escrow == address(0)) {\\n            return address(this);\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////\\n                       SETTERS\\n    //////////////////////////////////////////////////*/\\n    function setEscrow(address collection, address escrow) external onlyOwner {\\n        escrows[collection] = escrow;\\n    }\\n\\n    /*//////////////////////////////////////////////////\\n                    FEE FLOWS\\n    //////////////////////////////////////////////////*/\\n    function payFees(\\n        address currency,\\n        address lender,\\n        uint256 loanAmount,\\n        Fee[] calldata fees\\n    ) internal returns (uint256 totalFees) {\\n\\n        totalFees = 0;\\n        for (uint256 i = 0; i < fees.length; i++) {\\n            uint256 feeAmount = Helpers.computeFeeAmount(\\n                loanAmount,\\n                fees[i].rate\\n            );\\n\\n            SafeTransfer.transferERC20(\\n                currency, \\n                lender, \\n                fees[i].recipient, \\n                feeAmount\\n            );\\n\\n            unchecked {\\n                totalFees += feeAmount;\\n            }\\n        }\\n\\n        // revert if total fees are more than loan amount (over 100% fees)\\n        if (totalFees >= loanAmount) {\\n            revert TotalFeeTooHigh();\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////\\n                    BORROW FLOWS\\n    //////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Verifies and starts multiple liens against loan offers; then transfers loan and collateral assets\\n     * @param loanOffers Loan offers\\n     * @param fullfillments Loan offer fullfillments\\n     * @param borrower address of borrower (optional)\\n     * @return lienIds array of lienIds\\n     */\\n    function borrowBatch(\\n        LoanOfferInput[] calldata loanOffers,\\n        LoanFullfillment[] calldata fullfillments,\\n        address borrower\\n    ) external returns (uint256[] memory lienIds) {\\n        uint256 numFills = fullfillments.length;\\n        lienIds = new uint256[](numFills);\\n\\n        for (uint256 i = 0; i < numFills; i++) {\\n            LoanFullfillment calldata fullfillment = fullfillments[i];\\n            LoanOfferInput calldata offer = loanOffers[fullfillment.offerIndex];\\n\\n            lienIds[i] = borrow(\\n                offer.offer,\\n                fullfillment.auth,\\n                offer.offerSignature,\\n                fullfillment.authSignature,\\n                fullfillment.loanAmount,\\n                fullfillment.collateralIdentifier,\\n                borrower,\\n                fullfillment.proof\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies and takes loan offer; then transfers loan and collateral assets\\n     * @param offer Loan offer\\n     * @param auth Offer auth\\n     * @param offerSignature Lender offer signature\\n     * @param authSignature Auth signer signature\\n     * @param loanAmount Loan amount in ETH\\n     * @param collateralTokenId Token id to provide as collateral\\n     * @param borrower address of borrower\\n     * @param proof proof for criteria offer\\n     * @return lienId New lien id\\n     */\\n    function borrow(\\n        LoanOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature,\\n        uint256 loanAmount,\\n        uint256 collateralTokenId,\\n        address borrower,\\n        bytes32[] calldata proof\\n    ) public returns (uint256 lienId) {\\n        if (borrower == address(0)) {\\n            borrower = msg.sender;\\n        }\\n\\n        CollateralVerifier.verifyCollateral(\\n            offer.collateralType,\\n            offer.collateralIdentifier,\\n            collateralTokenId,\\n            proof\\n        );\\n\\n        lienId = _borrow(\\n            offer,\\n            auth,\\n            offerSignature,\\n            authSignature,\\n            loanAmount,\\n            collateralTokenId,\\n            borrower\\n        );\\n\\n        SafeTransfer.transfer(\\n            offer.collateralType, \\n            offer.collection, \\n            msg.sender, \\n            getEscrow(offer.collection), \\n            collateralTokenId, \\n            offer.collateralAmount\\n        );\\n\\n        /* Transfer fees from lender */\\n        uint256 totalFees = payFees(\\n            offer.currency,\\n            offer.lender,\\n            loanAmount,\\n            offer.fees\\n        );\\n\\n        /* Transfer loan amount to borrower. */\\n        unchecked {\\n            SafeTransfer.transferERC20(\\n                offer.currency, \\n                offer.lender,\\n                borrower, \\n                loanAmount - totalFees\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies and takes loan offer; creates new lien\\n     * @param offer Loan offer\\n     * @param auth Offer auth\\n     * @param offerSignature Lender offer signature\\n     * @param authSignature Auth signer signature\\n     * @param loanAmount Loan amount in ETH\\n     * @param collateralTokenId Token id to provide as collateral\\n     * @param borrower address of borrower (optional)\\n     * @return lienId New lien id\\n     */\\n    function _borrow(\\n        LoanOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature,\\n        uint256 loanAmount,\\n        uint256 collateralTokenId,\\n        address borrower\\n    ) internal returns (uint256 lienId) {\\n        Lien memory lien = Lien({\\n            lender: offer.lender,\\n            borrower: borrower,\\n            collateralType: CollateralVerifier.mapCollateralType(offer.collateralType),\\n            collection: offer.collection,\\n            amount: offer.collateralAmount,\\n            tokenId: collateralTokenId,\\n            currency: offer.currency,\\n            borrowAmount: loanAmount,\\n            startTime: block.timestamp,\\n            duration: offer.duration,\\n            rate: offer.rate\\n        });\\n\\n        /* Create lien. */\\n        unchecked {\\n            liens[lienId = _nextLienId++] = keccak256(abi.encode(lien));\\n        }\\n\\n        /* Take the loan offer. */\\n        _takeLoanOffer(offer, auth, offerSignature, authSignature, lien, lienId);\\n    }\\n\\n    /*//////////////////////////////////////////////////\\n                    LOAN FLOWS\\n    //////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Verifies and starts multiple liens against loan offers; then transfers loan and collateral assets\\n     * @param borrowOffers Borrow offers\\n     * @param fullfillments Borrow fullfillments\\n     * @return lienIds array of lienIds\\n     */\\n    function loanBatch(\\n        BorrowOfferInput[] calldata borrowOffers,\\n        BorrowFullfillment[] calldata fullfillments\\n    ) external returns (uint256[] memory lienIds) {\\n        lienIds = new uint256[](fullfillments.length);\\n\\n        for (uint256 i = 0; i < fullfillments.length; i++) {\\n            BorrowFullfillment calldata fullfillment = fullfillments[i];\\n            BorrowOfferInput calldata offer = borrowOffers[fullfillment.offerIndex];\\n\\n            lienIds[i] = loan(\\n                offer.offer,\\n                fullfillment.auth,\\n                offer.offerSignature,\\n                fullfillment.authSignature\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies and takes loan offer; then transfers loan and collateral assets\\n     * @param offer Loan offer\\n     * @param auth Offer auth\\n     * @param offerSignature Lender offer signature\\n     * @param authSignature Auth signer signature\\n     * @return lienId New lien id\\n     */\\n    function loan(\\n        BorrowOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature\\n    ) public returns (uint256 lienId) {\\n\\n        lienId = _loanToBorrower(\\n            offer,\\n            auth,\\n            offerSignature,\\n            authSignature\\n        );\\n\\n        SafeTransfer.transfer(\\n            offer.collateralType,\\n            offer.collection,\\n            offer.borrower,\\n            getEscrow(offer.collection),\\n            offer.collateralIdentifier,\\n            offer.collateralAmount\\n        );\\n\\n        /* Transfer fees from lender */\\n        uint256 totalFees = payFees(\\n            offer.currency,\\n            msg.sender,\\n            offer.loanAmount,\\n            offer.fees\\n        );\\n\\n        /* Transfer loan amount to borrower. */\\n        unchecked {\\n            SafeTransfer.transferERC20(\\n                offer.currency, \\n                msg.sender, \\n                offer.borrower, \\n                offer.loanAmount - totalFees\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies and takes loan offer; creates new lien\\n     * @param offer Loan offer\\n     * @param auth Offer auth\\n     * @param offerSignature Borrower offer signature\\n     * @param authSignature Auth signer signature\\n     * @return lienId New lien id\\n     */\\n    function _loanToBorrower(\\n        BorrowOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature\\n    ) internal returns (uint256 lienId) {\\n        Lien memory lien = Lien({\\n            lender: msg.sender,\\n            borrower: offer.borrower,\\n            collateralType: CollateralVerifier.mapCollateralType(offer.collateralType),\\n            collection: offer.collection,\\n            amount: offer.collateralAmount,\\n            tokenId: offer.collateralIdentifier,\\n            currency: offer.currency,\\n            borrowAmount: offer.loanAmount,\\n            startTime: block.timestamp,\\n            duration: offer.duration,\\n            rate: offer.rate\\n        });\\n\\n        /* Create lien. */\\n        unchecked {\\n            liens[lienId = _nextLienId++] = keccak256(abi.encode(lien));\\n        }\\n\\n        /* Take the loan offer. */\\n        _takeBorrowOffer(offer, auth, offerSignature, authSignature, lien, lienId);\\n    }\\n\\n    /*//////////////////////////////////////////////////\\n                    REPAY FLOWS\\n    //////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Repays loans in batch\\n     * @param repayments Loan repayments\\n     */\\n    function repayBatch(\\n        RepayFullfillment[] calldata repayments\\n    ) external validateLiens(repayments) liensAreActive(repayments) {\\n        for (uint256 i = 0; i < repayments.length; i++) {\\n            RepayFullfillment calldata repayment = repayments[i];\\n            repay(repayment.lien, repayment.lienId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repays loan and retrieves collateral\\n     * @param lien Lien preimage\\n     * @param lienId Lien id\\n     */\\n    function repay(\\n        Lien calldata lien,\\n        uint256 lienId\\n    ) public validateLien(lien, lienId) lienIsActive(lien) {\\n        uint256 _repayAmount = _repay(lien, lienId);\\n\\n        SafeTransfer.transfer(\\n            lien.collateralType,\\n            lien.collection,\\n            getEscrow(lien.collection),\\n            lien.borrower,\\n            lien.tokenId,\\n            lien.amount\\n        );\\n\\n        SafeTransfer.transferERC20(\\n            lien.currency,\\n            msg.sender, \\n            lien.lender, \\n            _repayAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Computes the current debt repayment and burns the lien\\n     * @dev Does not transfer assets\\n     * @param lien Lien preimage\\n     * @param lienId Lien id\\n     * @return repayAmount Current amount of debt owed on the lien\\n     */\\n    function _repay(\\n        Lien calldata lien,\\n        uint256 lienId\\n    ) internal returns (uint256 repayAmount) {\\n        repayAmount = getRepaymentAmount(\\n            lien.borrowAmount,\\n            lien.rate,\\n            lien.duration\\n        );\\n\\n        delete liens[lienId];\\n\\n        emit Repay(lienId, lien.collection, repayAmount);\\n    }\\n\\n    /*//////////////////////////////////////////////////\\n                    REFINANCE FLOWS\\n    //////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Refinances multiple liens with new loan offers;\\n     * @param loanOffers Loan offers\\n     * @param fullfillments Loan offer fullfillments\\n     */\\n    function refinanceBatch(\\n        LoanOfferInput[] calldata loanOffers,\\n        RefinanceFullfillment[] calldata fullfillments\\n    ) external {\\n        for (uint256 i = 0; i < fullfillments.length; i++) {\\n            RefinanceFullfillment calldata fullfillment = fullfillments[i];\\n            LoanOfferInput calldata offer = loanOffers[fullfillment.offerIndex];\\n\\n            refinance(\\n                fullfillment.lien,\\n                fullfillment.lienId,\\n                fullfillment.loanAmount,\\n                offer.offer,\\n                fullfillment.auth,\\n                offer.offerSignature,\\n                fullfillment.authSignature,\\n                fullfillment.proof\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Refinance and existing lien with new loan offer\\n     * @param lien Existing lien\\n     * @param lienId Identifier of existing lien\\n     * @param loanAmount Loan amount in ETH\\n     * @param offer Loan offer\\n     * @param auth Offer auth\\n     * @param offerSignature Lender offer signature\\n     * @param authSignature Auth signer signature\\n     * @param proof proof for criteria offer\\n     */\\n    function refinance(\\n        Lien calldata lien,\\n        uint256 lienId,\\n        uint256 loanAmount,\\n        LoanOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature,\\n        bytes32[] calldata proof\\n    ) public validateLien(lien, lienId) lienIsActive(lien) {\\n        if (msg.sender != lien.borrower) {\\n            revert Unauthorized();\\n        }\\n\\n        /** \\n         * Verify collateral is takeable by loan offer \\n         * use token id from lien against collateral identifier of offer\\n         * make sure the offer is specifying collateral that matches\\n         * the current lien\\n         */\\n        CollateralVerifier.verifyCollateral(\\n            offer.collateralType,\\n            offer.collateralIdentifier,\\n            lien.tokenId,\\n            proof\\n        );\\n\\n        /* Refinance initial loan to new loan (loanAmount must be within lender range) */\\n        _refinance(lien, lienId, loanAmount, offer, auth, offerSignature, authSignature);\\n\\n        uint256 repayAmount = getRepaymentAmount(\\n            lien.borrowAmount,\\n            lien.rate,\\n            lien.duration\\n        );\\n\\n        /* Transfer fees */\\n        uint256 totalFees = payFees(\\n            offer.currency,\\n            offer.lender,\\n            loanAmount,\\n            offer.fees\\n        );\\n        unchecked {\\n            loanAmount -= totalFees;\\n        }\\n\\n        if (loanAmount >= repayAmount) {\\n            /* If new loan is more than the previous, repay the initial loan and send the remaining to the borrower. */\\n            SafeTransfer.transferERC20(offer.currency, offer.lender, lien.lender, repayAmount);\\n            unchecked {\\n                SafeTransfer.transferERC20(offer.currency, offer.lender, lien.borrower, loanAmount - repayAmount);\\n            }\\n        } else {\\n            /* If new loan is less than the previous, borrower must supply the difference to repay the initial loan. */\\n            SafeTransfer.transferERC20(offer.currency, offer.lender, lien.lender, loanAmount);\\n            unchecked {\\n                SafeTransfer.transferERC20(offer.currency, lien.borrower, lien.lender, repayAmount - loanAmount);\\n            }\\n        }\\n    }\\n\\n    function _refinance(\\n        Lien calldata lien,\\n        uint256 lienId,\\n        uint256 loanAmount,\\n        LoanOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature\\n    ) internal {\\n        if (lien.collection != offer.collection) {\\n            revert CollectionsDoNotMatch();\\n        }\\n\\n        if (lien.currency != offer.currency) {\\n            revert CurrenciesDoNotMatch();\\n        }\\n\\n        if (lien.amount != offer.collateralAmount) {\\n            revert InvalidCollateralAmount();\\n        }\\n\\n        if (lien.collateralType != CollateralVerifier.mapCollateralType(offer.collateralType)) {\\n            revert InvalidCollateralType();\\n        }\\n\\n        /* Update lien with new loan details. */\\n        Lien memory newLien = Lien({\\n            lender: offer.lender,\\n            borrower: lien.borrower,\\n            collateralType: lien.collateralType,\\n            collection: lien.collection,\\n            amount: lien.amount,\\n            tokenId: lien.tokenId,\\n            currency: lien.currency,\\n            borrowAmount: loanAmount,\\n            startTime: block.timestamp,\\n            duration: offer.duration,\\n            rate: offer.rate\\n        });\\n\\n        unchecked {\\n            liens[lienId] = keccak256(abi.encode(newLien));\\n        }\\n\\n        /* Take the loan offer. */\\n        _takeLoanOffer(offer, auth, offerSignature, authSignature, newLien, lienId);\\n\\n        emit Refinance(\\n            lienId,\\n            offer.collection,\\n            offer.currency,\\n            lien.amount,\\n            lien.lender,\\n            newLien.lender,\\n            lien.borrowAmount,\\n            newLien.borrowAmount,\\n            lien.rate,\\n            newLien.rate\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////\\n                    DEFAULT FLOWS\\n    //////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Seizes collateral from defaulted lien, skipping liens that are not defaulted\\n     * @param lienPointers List of lien, lienId pairs\\n     */\\n    function seize(LienPointer[] calldata lienPointers) external {\\n        uint256 length = lienPointers.length;\\n\\n        for (uint256 i; i < length; ) {\\n            Lien calldata lien = lienPointers[i].lien;\\n            uint256 lienId = lienPointers[i].lienId;\\n\\n            if (msg.sender != lien.lender) {\\n                revert Unauthorized();\\n            }\\n\\n            if (!_validateLien(lien, lienId)) {\\n                revert InvalidLien();\\n            }\\n\\n            if (!_lienIsDefaulted(lien)) {\\n                revert LienNotDefaulted();\\n            }\\n\\n            /* Check that the auction has ended and lien is defaulted. */\\n            delete liens[lienId];\\n\\n            /* Seize collateral to lender. */\\n            SafeTransfer.transfer(\\n                lien.collateralType, \\n                lien.collection, \\n                getEscrow(lien.collection), \\n                lien.lender, \\n                lien.tokenId, \\n                lien.amount\\n            );\\n\\n            emit Seize(lienId, lien.collection);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /*/////////////////////////////////////////////////////////////\\n                        VALIDATION MODIFIERS\\n    /////////////////////////////////////////////////////////////*/\\n\\n    modifier validateLien(Lien calldata lien, uint256 lienId) {\\n        if (!_validateLien(lien, lienId)) {\\n            revert InvalidLien();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier validateLiens(RepayFullfillment[] calldata repayments) {\\n        uint256 length = repayments.length;\\n        for (uint256 i; i < length; ) {\\n            Lien calldata lien = repayments[i].lien;\\n            uint256 lienId = repayments[i].lienId;\\n\\n            if (!_validateLien(lien, lienId)) {\\n                revert InvalidLien();\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    modifier lienIsActive(Lien calldata lien) {\\n        if (_lienIsDefaulted(lien)) {\\n            revert LienIsDefaulted();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier liensAreActive(RepayFullfillment[] calldata repayments) {\\n        uint256 length = repayments.length;\\n        for (uint256 i; i < length; ) {\\n            Lien calldata lien = repayments[i].lien;\\n\\n            if (_lienIsDefaulted(lien)) {\\n                revert LienIsDefaulted();\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    function _validateLien(\\n        Lien calldata lien,\\n        uint256 lienId\\n    ) internal view returns (bool) {\\n        return liens[lienId] == keccak256(abi.encode(lien));\\n    }\\n\\n    function _lienIsDefaulted(Lien calldata lien) internal view returns (bool) {\\n        return lien.startTime + lien.duration < block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n// Kettle\\nerror Unauthorized();\\nerror InvalidLoan();\\nerror InvalidLien();\\nerror InvalidLoanAmount();\\nerror InsufficientOffer();\\nerror InvalidRepayment();\\nerror LienIsDefaulted();\\nerror LienNotDefaulted();\\nerror AuctionIsActive();\\nerror AuctionIsNotActive();\\nerror InvalidRefinanceRate();\\nerror InvalidRefinanceDuration();\\nerror RateTooHigh();\\nerror FeesTooHigh();\\nerror CollectionsDoNotMatch();\\nerror CurrenciesDoNotMatch();\\nerror InsufficientRefinance();\\nerror InvalidAuctionDuration();\\nerror NoEscrowImplementation();\\nerror TotalFeeTooHigh();\\n\\n// CollateralVerifier\\nerror InvalidCollateral();\\nerror InvalidCollateralCriteria();\\nerror InvalidCollateralType();\\nerror InvalidCollateralAmount();\\n\\n// OfferController\\nerror OfferExpired();\\nerror OfferUnavailable();\\n\\n// Signatures\\nerror UnauthorizedOracle();\\nerror SignatureExpired();\\nerror InvalidSignature();\\nerror InvalidVParameter();\\n\\n// Auth\\nerror AuthorizationExpired();\\nerror UnauthorizedTaker();\\nerror UnauthorizedOffer();\\nerror UnauthorizedCollateral();\\n\"\r\n    },\r\n    \"contracts/lib/Signatures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { Fee, LoanOffer, BorrowOffer, OfferAuth, Collateral } from \\\"./Structs.sol\\\";\\nimport { InvalidVParameter, InvalidSignature } from \\\"./Errors.sol\\\";\\nimport { ISignatures } from \\\"../interfaces/ISignatures.sol\\\";\\n\\nabstract contract Signatures is ISignatures {\\n    bytes32 private immutable _LOAN_OFFER_TYPEHASH;\\n    bytes32 private immutable _BORROW_OFFER_TYPEHASH;\\n    bytes32 private immutable _COLLATERAL_TYPEHASH;\\n    bytes32 private immutable _OFFER_AUTH_TYPEHASH;\\n    bytes32 private immutable _FEE_TYPEHASH;\\n    bytes32 private immutable _EIP_712_DOMAIN_TYPEHASH;\\n\\n    string private constant _NAME = \\\"Kettle\\\";\\n    string private constant _VERSION = \\\"1\\\";\\n\\n    mapping(address => uint256) public nonces;\\n    uint256[50] private _gap;\\n\\n    constructor() {\\n        (\\n            _LOAN_OFFER_TYPEHASH,\\n            _BORROW_OFFER_TYPEHASH,\\n            _FEE_TYPEHASH,\\n            _COLLATERAL_TYPEHASH,\\n            _OFFER_AUTH_TYPEHASH,\\n            _EIP_712_DOMAIN_TYPEHASH\\n        ) = _createTypehashes();\\n    }\\n\\n    function information()\\n        external\\n        view\\n        returns (string memory version, bytes32 domainSeparator)\\n    {\\n        version = _VERSION;\\n        domainSeparator = _hashDomain(\\n            _EIP_712_DOMAIN_TYPEHASH,\\n            keccak256(bytes(_NAME)),\\n            keccak256(bytes(_VERSION))\\n        );\\n    }\\n\\n    function getLoanOfferHash(\\n        LoanOffer calldata offer\\n    ) external view returns (bytes32) {\\n        return _hashLoanOffer(offer);\\n    }\\n\\n    function getBorrowOfferHash(\\n        BorrowOffer calldata offer\\n    ) external view returns (bytes32) {\\n        return _hashBorrowOffer(offer);\\n    }\\n\\n    /**\\n     * @notice Generate all EIP712 Typehashes\\n     */\\n    function _createTypehashes()\\n        internal\\n        pure\\n        returns (\\n            bytes32 loanOfferTypehash,\\n            bytes32 borrowOfferTypehash,\\n            bytes32 feeTypehash,\\n            bytes32 collateralTypehash,\\n            bytes32 offerAuthTypehash,\\n            bytes32 eip712DomainTypehash\\n        )\\n    {\\n        eip712DomainTypehash = keccak256(\\n            bytes.concat(\\n                \\\"EIP712Domain(\\\",\\n                \\\"string name,\\\",\\n                \\\"string version,\\\",\\n                \\\"uint256 chainId,\\\",\\n                \\\"address verifyingContract\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n        bytes memory feeTypestring = bytes.concat(\\n            \\\"Fee(\\\",\\n            \\\"uint16 rate,\\\",\\n            \\\"address recipient\\\"\\n            \\\")\\\"\\n        );\\n\\n        feeTypehash = keccak256(feeTypestring);\\n\\n        loanOfferTypehash = keccak256(\\n            bytes.concat(\\n                \\\"LoanOffer(\\\",\\n                \\\"address collection,\\\",\\n                \\\"uint8 collateralType,\\\",\\n                \\\"uint256 collateralIdentifier,\\\",\\n                \\\"uint256 collateralAmount,\\\",\\n                \\\"address currency,\\\",\\n                \\\"uint256 totalAmount,\\\",\\n                \\\"uint256 minAmount,\\\",\\n                \\\"uint256 maxAmount,\\\",\\n                \\\"uint256 duration,\\\",\\n                \\\"uint256 rate,\\\",\\n                \\\"uint256 salt,\\\",\\n                \\\"uint256 expiration,\\\",\\n                \\\"uint256 nonce,\\\",\\n                \\\"Fee[] fees\\\",\\n                \\\")\\\",\\n                feeTypestring\\n            )\\n        );\\n\\n        borrowOfferTypehash = keccak256(\\n            bytes.concat(\\n                \\\"BorrowOffer(\\\",\\n                \\\"address collection,\\\",\\n                \\\"uint8 collateralType,\\\",\\n                \\\"uint256 collateralIdentifier,\\\",\\n                \\\"uint256 collateralAmount,\\\",\\n                \\\"address currency,\\\",\\n                \\\"uint256 loanAmount,\\\",\\n                \\\"uint256 duration,\\\",\\n                \\\"uint256 rate,\\\",\\n                \\\"uint256 salt,\\\",\\n                \\\"uint256 expiration,\\\",\\n                \\\"uint256 nonce,\\\",\\n                \\\"Fee[] fees\\\",\\n                \\\")\\\",\\n                feeTypestring\\n            )\\n        );\\n\\n        collateralTypehash = keccak256(\\n            bytes.concat(\\n                \\\"Collateral(\\\",\\n                \\\"uint8 collateralType,\\\",\\n                \\\"address collection,\\\",\\n                \\\"uint256 collateralId,\\\",\\n                \\\"uint256 collateralAmount\\\"\\n                \\\")\\\"\\n            )\\n        );\\n\\n        offerAuthTypehash = keccak256(\\n            bytes.concat(\\n                \\\"OfferAuth(\\\",\\n                \\\"bytes32 offerHash,\\\",\\n                \\\"address taker,\\\"\\n                \\\"uint256 expiration,\\\",\\n                \\\"bytes32 collateralHash\\\",\\n                \\\")\\\"\\n            )\\n        );\\n    }\\n\\n    function _hashDomain(\\n        bytes32 eip712DomainTypehash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    eip712DomainTypehash,\\n                    nameHash,\\n                    versionHash,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function _hashFee(Fee calldata fee) internal view returns (bytes32) {\\n        return keccak256(abi.encode(_FEE_TYPEHASH, fee.rate, fee.recipient));\\n    }\\n\\n    function _packFees(Fee[] calldata fees) internal view returns (bytes32) {\\n        bytes32[] memory feeHashes = new bytes32[](fees.length);\\n        uint256 feesLength = fees.length;\\n        for (uint256 i; i < feesLength; ) {\\n            feeHashes[i] = _hashFee(fees[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return keccak256(abi.encodePacked(feeHashes));\\n    }\\n\\n    function _hashLoanOffer(\\n        LoanOffer calldata offer\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _LOAN_OFFER_TYPEHASH,\\n                    offer.collection,\\n                    offer.collateralType,\\n                    offer.collateralIdentifier,\\n                    offer.collateralAmount,\\n                    offer.currency,\\n                    offer.totalAmount,\\n                    offer.minAmount,\\n                    offer.maxAmount,\\n                    offer.duration,\\n                    offer.rate,\\n                    offer.salt,\\n                    offer.expiration,\\n                    nonces[offer.lender],\\n                    _packFees(offer.fees)\\n                )\\n            );\\n    }\\n\\n    function _hashBorrowOffer(\\n        BorrowOffer calldata offer\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _BORROW_OFFER_TYPEHASH,\\n                    offer.collection,\\n                    offer.collateralType,\\n                    offer.collateralIdentifier,\\n                    offer.collateralAmount,\\n                    offer.currency,\\n                    offer.loanAmount,\\n                    offer.duration,\\n                    offer.rate,\\n                    offer.salt,\\n                    offer.expiration,\\n                    nonces[offer.borrower],\\n                    _packFees(offer.fees)\\n                )\\n            );\\n    }\\n\\n    function _hashCollateral(\\n        uint8 collateralType,\\n        address collection,\\n        uint256 collateralId,\\n        uint256 collateralAmount\\n    ) internal view returns (bytes32) {\\n        return \\n            keccak256(\\n                abi.encode(\\n                    _COLLATERAL_TYPEHASH, \\n                    collateralType, \\n                    collection,\\n                    collateralId,\\n                    collateralAmount\\n                )\\n            );\\n    }\\n\\n    function _hashOfferAuth(\\n        OfferAuth calldata auth\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _OFFER_AUTH_TYPEHASH,\\n                    auth.offerHash,\\n                    auth.taker,\\n                    auth.expiration,\\n                    auth.collateralHash\\n                )\\n            );\\n    }\\n\\n    function _hashToSign(bytes32 hash) internal view returns (bytes32) {\\n        bytes32 domain = _hashDomain(\\n            _EIP_712_DOMAIN_TYPEHASH,\\n            keccak256(bytes(_NAME)),\\n            keccak256(bytes(_VERSION))\\n        );\\n\\n        return keccak256(abi.encodePacked(bytes2(0x1901), domain, hash));\\n    }\\n\\n    /**\\n     * @notice Verify authorization of offer\\n     * @param offerHash Hash of offer struct\\n     * @param signer signer address\\n     * @param signature Packed offer signature\\n     */\\n    function _verifyOfferAuthorization(\\n        bytes32 offerHash,\\n        address signer,\\n        bytes calldata signature\\n    ) internal view {\\n        bytes32 hashToSign = _hashToSign(offerHash);\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // solhint-disable-next-line\\n        assembly {\\n            r := calldataload(signature.offset)\\n            s := calldataload(add(signature.offset, 0x20))\\n            v := shr(248, calldataload(add(signature.offset, 0x40)))\\n        }\\n        _verify(signer, hashToSign, v, r, s);\\n    }\\n    \\n\\n    /**\\n     * @notice Verify signature of digest\\n     * @param signer Address of expected signer\\n     * @param digest Signature digest\\n     * @param v v parameter\\n     * @param r r parameter\\n     * @param s s parameter\\n     */\\n    function _verify(\\n        address signer,\\n        bytes32 digest,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure {\\n        if (v != 27 && v != 28) {\\n            revert InvalidVParameter();\\n        }\\n\\n        address recoveredSigner = ecrecover(digest, v, r, s);\\n        if (recoveredSigner == address(0) || signer != recoveredSigner) {\\n            revert InvalidSignature();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/*//////////////////////////////////////////////////\\n                COLLATERAL TYPES\\n//////////////////////////////////////////////////*/\\n\\nenum CollateralType {\\n    ERC721,\\n    ERC1155,\\n    ERC721_WITH_CRITERIA,\\n    ERC1155_WITH_CRITERIA\\n}\\n\\nstruct Collateral {\\n    uint8 collateralType;\\n    address collection;\\n    uint256 collateralId;\\n    uint256 collateralAmount;\\n}\\n\\n/*//////////////////////////////////////////////////\\n                LIEN STRUCTS\\n//////////////////////////////////////////////////*/\\n\\nstruct LienPointer {\\n    Lien lien;\\n    uint256 lienId;\\n}\\n\\nstruct Lien {\\n    address lender;\\n    address borrower;\\n    uint8 collateralType;\\n    address collection;\\n    uint256 tokenId;\\n    uint256 amount;\\n    address currency;\\n    uint256 borrowAmount;\\n    uint256 duration;\\n    uint256 rate;\\n    uint256 startTime;\\n}\\n\\n/*//////////////////////////////////////////////////\\n                LOAN OFFER STRUCTS\\n//////////////////////////////////////////////////*/\\n\\nstruct LoanOffer {\\n    address lender;\\n    address collection;\\n    uint8 collateralType;\\n    uint256 collateralIdentifier;\\n    uint256 collateralAmount;\\n    address currency;\\n    uint256 totalAmount;\\n    uint256 minAmount;\\n    uint256 maxAmount;\\n    uint256 duration;\\n    uint256 rate;\\n    uint256 salt;\\n    uint256 expiration;\\n    Fee[] fees;\\n}\\n\\nstruct LoanOfferInput {\\n    LoanOffer offer;\\n    bytes offerSignature;\\n}\\n\\nstruct LoanFullfillment {\\n    uint256 offerIndex;\\n    uint256 loanAmount;\\n    uint256 collateralIdentifier;\\n    OfferAuth auth;\\n    bytes authSignature;\\n    bytes32[] proof;\\n}\\n\\n/*//////////////////////////////////////////////////\\n                BORROW OFFER STRUCTS\\n//////////////////////////////////////////////////*/\\n\\nstruct BorrowOffer {\\n    address borrower;\\n    address collection;\\n    uint8 collateralType;\\n    uint256 collateralIdentifier;\\n    uint256 collateralAmount;\\n    address currency;\\n    uint256 loanAmount;\\n    uint256 duration;\\n    uint256 rate;\\n    uint256 salt;\\n    uint256 expiration;\\n    Fee[] fees;\\n}\\n\\nstruct BorrowOfferInput {\\n    BorrowOffer offer;\\n    bytes offerSignature;\\n}\\n\\nstruct BorrowFullfillment {\\n    uint256 offerIndex;\\n    OfferAuth auth;\\n    bytes authSignature;\\n}\\n\\n/*//////////////////////////////////////////////////\\n                REPAY STRUCTS\\n//////////////////////////////////////////////////*/\\n\\nstruct RepayFullfillment {\\n    Lien lien;\\n    uint256 lienId;\\n}\\n\\n/*//////////////////////////////////////////////////\\n                REFINANCE STRUCTS\\n//////////////////////////////////////////////////*/\\n\\nstruct RefinanceFullfillment {\\n    Lien lien;\\n    uint256 lienId;\\n    uint256 offerIndex;\\n    uint256 loanAmount;\\n    bytes32[] proof;\\n    OfferAuth auth;\\n    bytes authSignature;\\n}\\n\\n/*//////////////////////////////////////////////////\\n                FEE STRUCTS\\n//////////////////////////////////////////////////*/\\n\\nstruct Fee {\\n    uint16 rate;\\n    address recipient;\\n}\\n\\n/*//////////////////////////////////////////////////\\n                AUTH STRUCTS\\n//////////////////////////////////////////////////*/\\nstruct OfferAuth {\\n    bytes32 offerHash;\\n    address taker;\\n    uint256 expiration;\\n    bytes32 collateralHash;\\n}\\n\"\r\n    },\r\n    \"contracts/OfferController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Helpers } from \\\"./Helpers.sol\\\";\\n\\nimport { IOfferController } from \\\"./interfaces/IOfferController.sol\\\";\\nimport { Lien, LoanOffer, BorrowOffer, OfferAuth, Collateral } from \\\"./lib/Structs.sol\\\";\\nimport { Signatures } from \\\"./lib/Signatures.sol\\\";\\n\\nimport { InvalidLoanAmount, InsufficientOffer, RateTooHigh, OfferExpired, OfferUnavailable, UnauthorizedOffer, UnauthorizedCollateral, UnauthorizedTaker, AuthorizationExpired } from \\\"./lib/Errors.sol\\\";\\n\\ncontract OfferController is IOfferController, Ownable, Signatures {\\n    uint256 private constant _LIQUIDATION_THRESHOLD = 100_000;\\n\\n    mapping(address => mapping(uint256 => uint256)) public cancelledOrFulfilled;\\n    mapping(bytes32 => uint256) private _amountTaken;\\n    address public _AUTH_SIGNER;\\n    uint256[50] private _gap;\\n\\n    constructor (address authSigner) {\\n        setAuthSigner(authSigner);\\n    }\\n\\n    function setAuthSigner(address authSigner) public onlyOwner {\\n        _AUTH_SIGNER = authSigner;\\n    }\\n\\n    function amountTaken(bytes32 offerHash) external view returns (uint256) {\\n        return _amountTaken[offerHash];\\n    }\\n\\n    /**\\n     * @notice Verifies and takes loan offer\\n     * @dev Does not transfer loan and collateral assets; does not update lien hash\\n     * @param offer Loan offer\\n     * @param auth Offer auth\\n     * @param offerSignature Lender offer signature\\n     * @param authSignature Auth Signer signature\\n     * @param lien Lien preimage\\n     * @param lienId Lien id\\n     */\\n    function _takeLoanOffer(\\n        LoanOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature,\\n        Lien memory lien,\\n        uint256 lienId\\n    ) internal {\\n        bytes32 hash = _hashLoanOffer(offer);\\n\\n        _validateOffer(\\n            hash,\\n            offer.lender,\\n            offerSignature,\\n            offer.expiration,\\n            offer.salt\\n        );\\n\\n        _validateAuth(\\n            hash, \\n            msg.sender, \\n            auth, \\n            lien, \\n            authSignature\\n        );\\n\\n        if (offer.rate > _LIQUIDATION_THRESHOLD) {\\n            revert RateTooHigh();\\n        }\\n        if (\\n            lien.borrowAmount > offer.maxAmount ||\\n            lien.borrowAmount < offer.minAmount\\n        ) {\\n            revert InvalidLoanAmount();\\n        }\\n        uint256 __amountTaken = _amountTaken[hash];\\n        if (offer.totalAmount - __amountTaken < lien.borrowAmount) {\\n            revert InsufficientOffer();\\n        }\\n\\n        unchecked {\\n            _amountTaken[hash] = __amountTaken + lien.borrowAmount;\\n        }\\n\\n        uint256 netBorrowAmount = Helpers.computeAmountAfterFees(\\n            lien.borrowAmount,\\n            offer.fees\\n        );\\n\\n        emit LoanOfferTaken(\\n            hash,\\n            lienId,\\n            lien.lender,\\n            lien.borrower,\\n            lien.currency,\\n            lien.collateralType,\\n            lien.collection,\\n            lien.tokenId,\\n            lien.amount,\\n            lien.borrowAmount,\\n            netBorrowAmount,\\n            lien.rate,\\n            lien.duration,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Verifies and takes loan offer\\n     * @dev Does not transfer loan and collateral assets; does not update lien hash\\n     * @param offer Loan offer\\n     * @param auth Offer auth\\n     * @param offerSignature Lender offer signature\\n     * @param authSignature Auth signer signature\\n     * @param lien Lien preimage\\n     * @param lienId Lien id\\n     */\\n    function _takeBorrowOffer(\\n        BorrowOffer calldata offer,\\n        OfferAuth calldata auth,\\n        bytes calldata offerSignature,\\n        bytes calldata authSignature,\\n        Lien memory lien,\\n        uint256 lienId\\n    ) internal {\\n        bytes32 hash = _hashBorrowOffer(offer);\\n\\n        _validateOffer(\\n            hash,\\n            offer.borrower,\\n            offerSignature,\\n            offer.expiration,\\n            offer.salt\\n        );\\n\\n        _validateAuth(\\n            hash, \\n            msg.sender, \\n            auth,\\n            lien, \\n            authSignature\\n        );\\n\\n        if (offer.rate > _LIQUIDATION_THRESHOLD) {\\n            revert RateTooHigh();\\n        }\\n\\n        cancelledOrFulfilled[offer.borrower][offer.salt] = 1;\\n\\n        uint256 netBorrowAmount = Helpers.computeAmountAfterFees(\\n            lien.borrowAmount,\\n            offer.fees\\n        );\\n\\n        emit LoanOfferTaken(\\n            hash,\\n            lienId,\\n            lien.lender,\\n            lien.borrower,\\n            lien.currency,\\n            lien.collateralType,\\n            lien.collection,\\n            lien.tokenId,\\n            lien.amount,\\n            lien.borrowAmount,\\n            netBorrowAmount,\\n            lien.rate,\\n            lien.duration,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _validateAuth(\\n        bytes32 offerHash,\\n        address taker,\\n        OfferAuth calldata auth,\\n        Lien memory lien,\\n        bytes calldata signature\\n    ) internal view {\\n\\n        bytes32 collateralHash = _hashCollateral(\\n            lien.collateralType,\\n            lien.collection,\\n            lien.tokenId,\\n            lien.amount\\n        );\\n\\n        bytes32 authHash = _hashOfferAuth(auth);\\n        _verifyOfferAuthorization(authHash, _AUTH_SIGNER, signature);\\n\\n        if (auth.expiration < block.timestamp) {\\n            revert AuthorizationExpired();\\n        }\\n\\n        if (auth.taker != taker) {\\n            revert UnauthorizedTaker();\\n        }\\n\\n        if (auth.offerHash != offerHash) {\\n            revert UnauthorizedOffer();\\n        }\\n\\n        if (auth.collateralHash != collateralHash) {\\n            revert UnauthorizedCollateral();\\n        }\\n    }\\n\\n    /**\\n     * @notice Assert offer validity\\n     * @param offerHash Offer hash\\n     * @param signer Address of offer signer\\n     * @param signature Packed signature array\\n     * @param expiration Offer expiration time\\n     * @param salt Offer salt\\n     */\\n    function _validateOffer(\\n        bytes32 offerHash,\\n        address signer,\\n        bytes calldata signature,\\n        uint256 expiration,\\n        uint256 salt\\n    ) internal view {\\n        _verifyOfferAuthorization(offerHash, signer, signature);\\n\\n        if (expiration < block.timestamp) {\\n            revert OfferExpired();\\n        }\\n        if (cancelledOrFulfilled[signer][salt] == 1) {\\n            revert OfferUnavailable();\\n        }\\n    }\\n\\n    /*/////////////////////////////////////////\\n                  CANCEL FUNCTIONS\\n    /////////////////////////////////////////*/\\n    /**\\n     * @notice Cancels offer salt for caller\\n     * @param salt Unique offer salt\\n     */\\n    function cancelOffer(uint256 salt) external {\\n        _cancelOffer(msg.sender, salt);\\n    }\\n\\n    /**\\n     * @notice Cancels offers in bulk for caller\\n     * @param salts List of offer salts\\n     */\\n    function cancelOffers(uint256[] calldata salts) external {\\n        uint256 saltsLength = salts.length;\\n        for (uint256 i; i < saltsLength; ) {\\n            _cancelOffer(msg.sender, salts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancels all offers by incrementing caller nonce\\n     */\\n    function incrementNonce() external {\\n        _incrementNonce(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Cancel offer by user and salt\\n     * @param user Address of user\\n     * @param salt Unique offer salt\\n     */\\n    function _cancelOffer(address user, uint256 salt) private {\\n        cancelledOrFulfilled[user][salt] = 1;\\n        emit OfferCancelled(user, salt);\\n    }\\n\\n    /**\\n     * @notice Cancel all orders by incrementing the user nonce\\n     * @param user Address of user\\n     */\\n    function _incrementNonce(address user) internal {\\n        emit NonceIncremented(user, ++nonces[user]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SafeTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport { CollateralType, Fee } from \\\"./lib/Structs.sol\\\";\\nimport { InvalidCollateralType } from \\\"./lib/Errors.sol\\\";\\n\\n\\ncontract SafeTransfer {\\n  using SafeERC20 for IERC20;\\n\\n  function transfer(\\n    uint8 collateralType,\\n    address token,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) internal {\\n    if (\\n      collateralType == uint8(CollateralType.ERC721) ||\\n      collateralType == uint8(CollateralType.ERC721_WITH_CRITERIA)\\n    ) {\\n      return _transferERC721(token, from, to, tokenId);\\n    } else if (\\n      collateralType == uint8(CollateralType.ERC1155) ||\\n      collateralType == uint8(CollateralType.ERC1155_WITH_CRITERIA)\\n    ) {\\n      return _transferERC1155(token, from, to, tokenId, amount);\\n    }\\n    revert InvalidCollateralType();\\n  }\\n\\n  function _transferERC721(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal {\\n    IERC721(token).safeTransferFrom(from, to, tokenId, \\\"0x\\\");\\n  }\\n\\n  function _transferERC1155(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount\\n  ) internal {\\n    IERC1155(token).safeTransferFrom(from, to, id, amount, \\\"0x\\\");\\n  }\\n\\n  function transferERC20(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    IERC20(token).safeTransferFrom(from, to, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/SignedWadMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Signed 18 decimal fixed point (wad) arithmetic library.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SignedWadMath.sol)\\n/// @author Modified from Remco Bloemen (https://xn--2-umb.com/22/exp-ln/index.html)\\n\\n/// @dev Will not revert on overflow, only use where overflow is not possible.\\nfunction toWadUnsafe(uint256 x) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by 1e18.\\n        r := mul(x, 1000000000000000000)\\n    }\\n}\\n\\n/// @dev Takes an integer amount of seconds and converts it to a wad amount of days.\\n/// @dev Will not revert on overflow, only use where overflow is not possible.\\n/// @dev Not meant for negative second amounts, it assumes x is positive.\\nfunction toDaysWadUnsafe(uint256 x) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by 1e18 and then divide it by 86400.\\n        r := div(mul(x, 1000000000000000000), 86400)\\n    }\\n}\\n\\n/// @dev Takes a wad amount of days and converts it to an integer amount of seconds.\\n/// @dev Will not revert on overflow, only use where overflow is not possible.\\n/// @dev Not meant for negative day amounts, it assumes x is positive.\\nfunction fromDaysWadUnsafe(int256 x) pure returns (uint256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by 86400 and then divide it by 1e18.\\n        r := div(mul(x, 86400), 1000000000000000000)\\n    }\\n}\\n\\n/// @dev Will not revert on overflow, only use where overflow is not possible.\\nfunction unsafeWadMul(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by y and divide by 1e18.\\n        r := sdiv(mul(x, y), 1000000000000000000)\\n    }\\n}\\n\\n/// @dev Will return 0 instead of reverting if y is zero and will\\n/// not revert on overflow, only use where overflow is not possible.\\nfunction unsafeWadDiv(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Multiply x by 1e18 and divide it by y.\\n        r := sdiv(mul(x, 1000000000000000000), y)\\n    }\\n}\\n\\nfunction wadMul(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Store x * y in r for now.\\n        r := mul(x, y)\\n\\n        // Equivalent to require(x == 0 || (x * y) / x == y)\\n        if iszero(or(iszero(x), eq(sdiv(r, x), y))) {\\n            revert(0, 0)\\n        }\\n\\n        // Scale the result down by 1e18.\\n        r := sdiv(r, 1000000000000000000)\\n    }\\n}\\n\\nfunction wadDiv(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Store x * 1e18 in r for now.\\n        r := mul(x, 1000000000000000000)\\n\\n        // Equivalent to require(y != 0 && ((x * 1e18) / 1e18 == x))\\n        if iszero(and(iszero(iszero(y)), eq(sdiv(r, 1000000000000000000), x))) {\\n            revert(0, 0)\\n        }\\n\\n        // Divide r by y.\\n        r := sdiv(r, y)\\n    }\\n}\\n\\n/// @dev Will not work with negative bases, only use when x is positive.\\nfunction wadPow(int256 x, int256 y) pure returns (int256) {\\n    // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n    return wadExp((wadLn(x) * y) / 1e18); // Using ln(x) means x must be greater than 0.\\n}\\n\\nfunction wadExp(int256 x) pure returns (int256 r) {\\n    unchecked {\\n        // When the result is < 0.5 we return zero. This happens when\\n        // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n        if (x <= -42139678854452767551) return 0;\\n\\n        // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n        // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n        if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n        // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n        // for more intermediate precision and a binary basis. This base conversion\\n        // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n        x = (x << 78) / 5**18;\\n\\n        // Reduce range of x to (-\u00bd ln 2, \u00bd ln 2) * 2**96 by factoring out powers\\n        // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n        // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n        int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n        x = x - k * 54916777467707473351141471128;\\n\\n        // k is in the range [-61, 195].\\n\\n        // Evaluate using a (6, 7)-term rational approximation.\\n        // p is made monic, we'll multiply by a scale factor later.\\n        int256 y = x + 1346386616545796478920950773328;\\n        y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n        int256 p = y + x - 94201549194550492254356042504812;\\n        p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n        p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n        // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n        int256 q = x - 2855989394907223263936484059900;\\n        q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n        q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n        q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n        q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n        q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Div in assembly because solidity adds a zero check despite the unchecked.\\n            // The q polynomial won't have zeros in the domain as all its roots are complex.\\n            // No scaling is necessary because p is already 2**96 too large.\\n            r := sdiv(p, q)\\n        }\\n\\n        // r should be in the range (0.09, 0.25) * 2**96.\\n\\n        // We now need to multiply r by:\\n        // * the scale factor s = ~6.031367120.\\n        // * the 2**k factor from the range reduction.\\n        // * the 1e18 / 2**96 factor for base conversion.\\n        // We do this all at once, with an intermediate result in 2**213\\n        // basis, so the final right shift is always by a positive amount.\\n        r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n    }\\n}\\n\\nfunction wadLn(int256 x) pure returns (int256 r) {\\n    unchecked {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n        // We do this by multiplying by 2**96 / 10**18. But since\\n        // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n        // and add ln(2**96 / 10**18) at the end.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n\\n        // Reduce range of x to (1, 2) * 2**96\\n        // ln(2^k * x) = k * ln(2) + ln(x)\\n        int256 k = r - 96;\\n        x <<= uint256(159 - k);\\n        x = int256(uint256(x) >> 159);\\n\\n        // Evaluate using a (8, 8)-term rational approximation.\\n        // p is made monic, we will multiply by a scale factor later.\\n        int256 p = x + 3273285459638523848632254066296;\\n        p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n        p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n        p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n        p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n        p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n        p = p * x - (795164235651350426258249787498 << 96);\\n\\n        // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n        // q is monic by convention.\\n        int256 q = x + 5573035233440673466300451813936;\\n        q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n        q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n        q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n        q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n        q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n        q = ((q * x) >> 96) + 909429971244387300277376558375;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Div in assembly because solidity adds a zero check despite the unchecked.\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already 2**96 too large.\\n            r := sdiv(p, q)\\n        }\\n\\n        // r is in the range (0, 0.125) * 2**96\\n\\n        // Finalization, we need to:\\n        // * multiply by the scale factor s = 5.549\u2026\\n        // * add ln(2**96 / 10**18)\\n        // * add k * ln(2)\\n        // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n        // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n        r *= 1677202110996718588342820967067443963516166;\\n        // add ln(2) * k * 5e18 * 2**192\\n        r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n        // add ln(2**96 / 10**18) * 5e18 * 2**192\\n        r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n        // base conversion: mul 2**18 / 2**192\\n        r >>= 174;\\n    }\\n}\\n\\n/// @dev Will return 0 instead of reverting if y is zero.\\nfunction unsafeDiv(int256 x, int256 y) pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n        // Divide x by y.\\n        r := sdiv(x, y)\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000,\r\n      \"details\": {\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\"\r\n        }\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/CollateralVerifier.sol\": {\r\n        \"CollateralVerifier\": \"0xdee857059c9bd61593494c21f55dbf708529079a\"\r\n      },\r\n      \"contracts/Helpers.sol\": {\r\n        \"Helpers\": \"0x3ac59c67dbc454fac2cd9e63979de59fd49564b5\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuthorizationExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionsDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrenciesDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollateralAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollateralType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLien\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLoanAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LienIsDefaulted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LienNotDefaulted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalFeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedOffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTaker\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netBorrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"LoanOfferTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"NonceIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBorrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"Refinance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"Seize\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_AUTH_SIGNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"}],\"name\":\"amountTaken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"collateralHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct OfferAuth\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"offerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"authSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"offerSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanOfferInput[]\",\"name\":\"loanOffers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"collateralHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct OfferAuth\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"authSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LoanFullfillment[]\",\"name\":\"fullfillments\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"borrowBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lienIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"salts\",\"type\":\"uint256[]\"}],\"name\":\"cancelOffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cancelledOrFulfilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BorrowOffer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"getBorrowOfferHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"getLoanOfferHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"getRepaymentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"information\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liens\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BorrowOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"collateralHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct OfferAuth\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"offerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"authSignature\",\"type\":\"bytes\"}],\"name\":\"loan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BorrowOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"offerSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct BorrowOfferInput[]\",\"name\":\"borrowOffers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"collateralHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct OfferAuth\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"authSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct BorrowFullfillment[]\",\"name\":\"fullfillments\",\"type\":\"tuple[]\"}],\"name\":\"loanBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lienIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"collateralHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct OfferAuth\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"offerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"authSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"refinance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"offerSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanOfferInput[]\",\"name\":\"loanOffers\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"collateralHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct OfferAuth\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"authSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct RefinanceFullfillment[]\",\"name\":\"fullfillments\",\"type\":\"tuple[]\"}],\"name\":\"refinanceBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"internalType\":\"struct RepayFullfillment[]\",\"name\":\"repayments\",\"type\":\"tuple[]\"}],\"name\":\"repayBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"collateralType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"internalType\":\"struct LienPointer[]\",\"name\":\"lienPointers\",\"type\":\"tuple[]\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authSigner\",\"type\":\"address\"}],\"name\":\"setAuthSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"setEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Kettle", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "0000000000000000000000008b572177c39f5998705546ef7f63c79f8cc26f2f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}