{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Code.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"./ERC505.sol\\\";\\n\\ncontract Code is ERC505 {\\n    constructor (string memory name_, string memory symbol_) ERC505(name_, symbol_, 10_000, 10) {\\n        setURI(\\\"https://gold-thoughtless-cuckoo-871.mypinata.cloud/ipfs/QmXGYacEZaXk1gkXHcDo1MFjjbKXtUXUyAXyMhkPRpS85H/{id}\\\");\\n    }\\n\\n    function _generate_index(uint256 id) override view internal returns (uint256) {\\n        uint256 index;\\n        uint8 seed = uint8(bytes1(keccak256(abi.encodePacked(block.timestamp, block.number, id))));\\n        if (seed <= 31) {\\n            index = 0;\\n        } else if (seed <= 62) {\\n            index = 1;\\n        } else if (seed <= 93) {\\n            index = 2;\\n        } else if (seed <= 123) {\\n            index = 3;\\n        } else if (seed <= 153) {\\n            index = 4;\\n        } else if (seed <= 183) {\\n            index = 5;\\n        } else if (seed <= 213) {\\n            index = 6;\\n        } else if (seed <= 234) {\\n            index = 7;\\n        } else if (seed <= 247) {\\n            index = 8;\\n        } else if (seed <= 255) {\\n            index = 9;\\n        }\\n        return index;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/ERC505.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableUnauthorizedAccount(msg.sender);\\n        }\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ncontract ERC505 is Ownable {\\n\\n    mapping(address account => uint256) private _balances;\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _nft_balances;\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n\\n    string private _name;\\n    string private _symbol;\\n    uint256 private _totalSupply;\\n    uint8 private constant _decimals = 18;\\n    uint256 private _minted;\\n    string private _uri;\\n    uint256 public immutable _nft_count;\\n\\n    mapping(address => bool) private _allowList;\\n\\n    // Events ERC20\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // Events ERC1155\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n\\n    // Errors\\n\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    error InvalidSender(address sender);\\n    error InvalidReceiver(address receiver);\\n    error InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n    error MissingApprovalForAll(address operator, address owner);\\n    error InvalidOperator(address operator);\\n    error InvalidApprover(address approver);\\n    error InvalidSpender(address spender);\\n    error InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n\\n    constructor(string memory name_, string memory symbol_, uint256 supply_, uint nft_count_) Ownable(msg.sender) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _nft_count = nft_count_;\\n        _allowList[msg.sender] = true;\\n        _mint(msg.sender, supply_ * 10 ** _decimals);\\n    }\\n\\n    function isInAllowlist(address target) public view returns (bool) {\\n        return _allowList[target];\\n    }\\n\\n    function setAllowList(address target, bool state) public onlyOwner {\\n        _allowList[target] = state;\\n        uint256 balance = _balances[target];\\n        if (state) {\\n            uint256 tokens_to_burn = balance / 10 ** _decimals;\\n            _nft_burn(target, tokens_to_burn);\\n        } else {\\n            uint256 tokens_to_mint = balance / 10 ** _decimals;\\n            _nft_mint(target, tokens_to_mint);\\n        }\\n    }\\n\\n    // ERC 1155\\n\\n\\n    function setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    function balanceOf(address account, uint256 id) public view returns (uint256) {\\n        return _nft_balances[id][account];\\n    }\\n\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    function isApprovedForAll(address account, address operator) public view returns (bool)    {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata) external {\\n        address sender = msg.sender;\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) external {\\n        address sender = msg.sender;\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        if (operator == address(0)) {\\n            revert InvalidOperator(address(0));\\n        }\\n        address owner = msg.sender;\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function uri(uint256) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    function _nft_update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = msg.sender;\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            if (value == 0) {\\n                continue;\\n            }\\n            if (from != address(0)) {\\n                uint256 fromBalance = _nft_balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    _nft_balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _nft_balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids[0];\\n            uint256 value = values[0];\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    function _values_to_data(uint256[] memory values, uint256 count) internal pure returns (uint256[] memory, uint256[] memory) {\\n        uint256 token_count;\\n        for (uint256 i = 0; i < count; i++) {\\n            if (values[i] > 0) {\\n                token_count++;\\n            }\\n        }\\n\\n        uint256[] memory ids = new uint256[](token_count);\\n        uint256[] memory final_values = new uint256[](token_count);\\n\\n        uint256 counter;\\n        for (uint256 i = 0; i < count; i++) {\\n            if (values[i] > 0) {\\n                ids[counter] = i;\\n                final_values[counter]=values[i];\\n                counter++;\\n            }\\n        }\\n\\n        return (ids, final_values);\\n    }\\n\\n    function _nft_burn(address from, uint256 tokens) private {\\n        if (tokens ==0) {\\n            return;\\n        }\\n        uint256[] memory values = new uint256[](_nft_count);\\n\\n        for (uint256 i = 0; i < _nft_count; i++) {\\n            uint256 balance = _nft_balances[i][from];\\n            if (balance > 0) {\\n                if (balance >= tokens) {\\n                    values[i] = tokens;\\n                    break;\\n                } else {\\n                    values[i] = balance;\\n                    tokens -= balance;\\n                }\\n            }\\n        }\\n\\n        (uint256[] memory ids, uint256[] memory final_values) = _values_to_data(values, _nft_count);\\n\\n        _nft_update(from, address(0), ids, final_values);\\n    }\\n\\n    function _generate_index(uint256) virtual view internal returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _nft_mint(address to, uint256 tokens) private {\\n        if (tokens ==0) {\\n            return;\\n        }\\n\\n        uint256[] memory values = new uint256[](_nft_count);\\n        for (uint256 i = 0; i < tokens; i++) {\\n            uint256 index = _generate_index(_minted + i);\\n            values[index]++;\\n        }\\n\\n        (uint256[] memory ids, uint256[] memory final_values) = _values_to_data(values, _nft_count);\\n\\n        _minted += tokens;\\n        _nft_update(address(0), to, ids, final_values);\\n    }\\n\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value) internal {\\n        if (to == address(0)) {\\n            revert InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _update(from, to, value * 10 ** _decimals);\\n        if (!isInAllowlist(from)) {\\n            _nft_update(from, address(0), ids, values);\\n        }\\n        if (!isInAllowlist(to)){\\n            _nft_mint(to, value);\\n        }\\n    }\\n\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal {\\n        if (to == address(0)) {\\n            revert InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert InvalidSender(address(0));\\n        }\\n        uint value;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            value += values[i];\\n        }\\n        _update(from, to, value * 10 ** _decimals);\\n        _nft_update(from, address(0), ids, values);\\n        _nft_mint(to, value);\\n    }\\n\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        assembly {\\n            array1 := mload(0x40)\\n            mstore(array1, 1)\\n            mstore(add(array1, 0x20), element1)\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n\\n    // ERC 20 methods\\n\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        address owner = msg.sender;\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        address owner = msg.sender;\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\\n        address spender = msg.sender;\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert InvalidReceiver(address(0));\\n        }\\n\\n        uint256 balanceBeforeSender = _balances[from];\\n        uint256 balanceBeforeReceiver = _balances[to];\\n\\n        if (!isInAllowlist(from)) {\\n            uint256 tokens_to_burn = (balanceBeforeSender / 10 ** _decimals) - ((balanceBeforeSender - value) / 10 ** _decimals);\\n            _nft_burn(from, tokens_to_burn);\\n        }\\n\\n        if (!isInAllowlist(to)) {\\n            uint256 tokens_to_mint = ((balanceBeforeReceiver + value) / 10 ** _decimals) - (balanceBeforeReceiver / 10 ** _decimals);\\n            _nft_mint(to, tokens_to_mint);\\n        }\\n\\n        _update(from, to, value);\\n    }\\n\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                _balances[to] += value;\\n            }\\n\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    function burn(uint256 value) external {\\n        address owner = msg.sender;\\n        if (owner == address(0)) {\\n            revert InvalidSender(address(0));\\n        }\\n        if (!isInAllowlist(owner)) {\\n            revert InvalidSender(owner);\\n        }\\n        _burn(owner, value);\\n    }\\n\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_nft_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isInAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Code", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004436f6465000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434f444500000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}