{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/src/leverages/CrvYearnVaultLeverage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {SturdyLeverage, IBaseLeverage, IERC20, SafeERC20} from \\\"./SturdyLeverage.sol\\\";\\nimport {IYearnVault} from \\\"../interfaces/Yearn/IYearnVault.sol\\\";\\n\\n/// @notice  Leverage contract for yearn vault of curve lp token\\ncontract CrvYearnVaultLeverage is SturdyLeverage {\\n  using SafeERC20 for IERC20;\\n\\n  error LV_REQUIRE_MIN_AMOUNT();\\n\\n  function _processSwap(\\n    uint256 _amount,\\n    IBaseLeverage.MultipSwapPath memory _path,\\n    bool _isFrom,\\n    bool _checkOutAmount\\n  ) internal override returns (uint256) {\\n    if (_path.swapType > IBaseLeverage.SwapType.NO_SWAP) {\\n      return _swapByPath(_amount, _path, _checkOutAmount);\\n    }\\n\\n    if (_isFrom) {\\n      // Yearn Vault LP -> Curve Pool LP\\n      if (!_checkOutAmount) revert LV_INVALID_CONFIGURATION();\\n\\n      // Withdraw from Yearn Vault and receive Curve LP token\\n      uint256 outAmount = IYearnVault(_path.swapFrom).withdraw(_amount, address(this), 1);\\n      if (outAmount < _path.outAmount) revert LV_REQUIRE_MIN_AMOUNT();\\n\\n      return outAmount;\\n    }\\n\\n    // Curve Pool LP -> Yearn Vault LP\\n    // Deposit Curve LP token to Yearn Vault and receive Yearn Vault LP token\\n    address asset = _path.swapFrom;\\n    address vault = _path.swapTo;\\n    IERC20(asset).safeApprove(vault, 0);\\n    IERC20(asset).safeApprove(vault, _amount);\\n    uint256 outAmount = IYearnVault(vault).deposit(_amount, address(this));\\n\\n    if (_checkOutAmount && outAmount < _path.outAmount) {\\n      revert LV_REQUIRE_MIN_AMOUNT();\\n    }\\n  \\n    return outAmount;\\n  }\\n}\"\r\n    },\r\n    \"contracts/src/leverages/SturdyLeverage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {BaseLeverage, IBaseLeverage, IERC20, SafeERC20} from \\\"./BaseLeverage.sol\\\";\\nimport {ISturdyPair} from \\\"../interfaces/ISturdyPair.sol\\\";\\n\\ncontract SturdyLeverage is BaseLeverage {\\n  using SafeERC20 for IERC20;\\n\\n  error LV_REPAY_FAILED();\\n\\n  function _withdrawWithFlashloan(\\n    address _borrowAsset,\\n    uint256 _borrowedAmount,\\n    IBaseLeverage.FlashLoanParams memory _params\\n  ) internal override {\\n    // repay\\n    _repay(_borrowAsset, _params.silo, _borrowedAmount, _params.user);\\n\\n    // withdraw collateral\\n    ISturdyPair pair = ISturdyPair(_params.silo);\\n    if (_params.collateralAsset != pair.collateralContract()) revert LV_INVALID_CONFIGURATION();\\n\\n    ( uint256 LTV_PRECISION,,,, uint256 EXCHANGE_PRECISION,,,) = ISturdyPair(_params.silo).getConstants();\\n    ISturdyPair(_params.silo).addInterest(false);\\n\\n    (,, uint256 exchangeRate) = ISturdyPair(_params.silo).updateExchangeRate();\\n    uint256 borrowShares = pair.userBorrowShares(_params.user);\\n    uint256 borrowAmount =  ISturdyPair(_params.silo).toBorrowAmount(borrowShares, true, false);\\n    uint256 collateralAmount = pair.userCollateralBalance(_params.user);\\n    uint256 withdrawalAmount = collateralAmount - (borrowAmount * exchangeRate * LTV_PRECISION / EXCHANGE_PRECISION / pair.maxLTV());\\n    if (withdrawalAmount < _params.minCollateralAmount) revert LV_SUPPLY_NOT_ALLOWED();\\n\\n    _remove(withdrawalAmount, _params.silo, 0, _params.user);\\n\\n    // collateral -> borrow asset\\n    _swapFrom(_borrowAsset, _params.collateralAsset, _params.swapInfo.reversePaths, _params.swapInfo.pathLength);\\n  }\\n\\n  function _supply(\\n    address _collateralAsset, \\n    address _silo, \\n    uint256 _amount, \\n    address _user\\n  ) internal override {\\n    IERC20(_collateralAsset).safeApprove(_silo, 0);\\n    IERC20(_collateralAsset).safeApprove(_silo, _amount);\\n    ISturdyPair(_silo).addCollateral(_amount, _user);\\n  }\\n\\n  function _remove(\\n    uint256 _amount, \\n    address _silo, \\n    uint256 _slippage, \\n    address _user\\n  ) internal override {\\n    ISturdyPair(_silo).removeCollateralFrom(_amount, address(this), _user);\\n  }\\n\\n  function _borrow(\\n    address _borrowAsset, \\n    address _silo, \\n    uint256 _amount, \\n    address _borrower \\n  ) internal override {\\n    ISturdyPair(_silo).borrowAssetOnBehalfOf(_amount, _borrower);\\n  }\\n\\n  function _repay(\\n    address _borrowAsset, \\n    address _silo, \\n    uint256 _amount, \\n    address _borrower\\n  ) internal override {\\n    ISturdyPair(_silo).addInterest(false);\\n\\n    uint256 borrowShares =  ISturdyPair(_silo).toBorrowShares(_amount, false, false);\\n\\n    IERC20(_borrowAsset).safeApprove(_silo, 0);\\n    IERC20(_borrowAsset).safeApprove(_silo, _amount);\\n\\n    uint256 paybackAmount = ISturdyPair(_silo).repayAsset(borrowShares, _borrower);\\n    if (paybackAmount == 0) revert LV_REPAY_FAILED();\\n  }\\n\\n  function _processSwap(\\n    uint256 _amount,\\n    IBaseLeverage.MultipSwapPath memory _path,\\n    bool _isFrom,\\n    bool _checkOutAmount\\n  ) internal virtual override returns (uint256) {\\n    return _swapByPath(_amount, _path, _checkOutAmount);\\n  }\\n}\"\r\n    },\r\n    \"contracts/src/leverages/BaseLeverage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IBaseLeverage} from \\\"../interfaces/IBaseLeverage.sol\\\";\\nimport {IFlashLoanReceiver} from \\\"../interfaces/Aave/V3/IFlashLoanReceiver.sol\\\";\\nimport {IFlashLoanRecipient} from \\\"../interfaces/Balancer/IFlashLoanRecipient.sol\\\";\\nimport {IPool} from \\\"../interfaces/Aave/V3/IPool.sol\\\";\\nimport {IBalancerVault} from \\\"../interfaces/Balancer/IBalancerVault.sol\\\";\\nimport {BalancerswapAdapter} from \\\"../swappers/BalancerswapAdapter.sol\\\";\\nimport {UniswapAdapter} from \\\"../swappers/UniswapAdapter.sol\\\";\\nimport {CurveswapAdapter} from \\\"../swappers/CurveswapAdapter.sol\\\";\\n\\nabstract contract BaseLeverage is IFlashLoanReceiver, IFlashLoanRecipient, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  error LV_INVALID_CONFIGURATION();\\n  error LV_AMOUNT_NOT_GT_0();\\n  error LV_SUPPLY_NOT_ALLOWED();\\n  error LV_SUPPLY_FAILED();\\n\\n  address private constant AAVE_LENDING_POOL_ADDRESS = 0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;\\n\\n  address private constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n\\n  uint256 private constant PERCENTAGE_FACTOR = 100_00;\\n\\n  //1 == not inExec\\n  //2 == inExec;\\n  //setting default to 1 to save some gas.\\n  uint256 private _balancerFlashLoanLock = 1;\\n\\n  /**\\n   * This function is called after your contract has received the flash loaned amount\\n   * overriding executeOperation() in IFlashLoanReceiver\\n   */\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external override returns (bool) {\\n    if (initiator != address(this)) revert LV_INVALID_CONFIGURATION();\\n    if (msg.sender != AAVE_LENDING_POOL_ADDRESS) revert LV_INVALID_CONFIGURATION();\\n    if (assets.length != amounts.length) revert LV_INVALID_CONFIGURATION();\\n    if (assets.length != premiums.length) revert LV_INVALID_CONFIGURATION();\\n    if (amounts[0] == 0) revert LV_INVALID_CONFIGURATION();\\n    if (assets[0] == address(0)) revert LV_INVALID_CONFIGURATION();\\n\\n    _executeOperation(assets[0], amounts[0], premiums[0], params);\\n\\n    // approve the Aave LendingPool contract allowance to *pull* the owed amount\\n    IERC20(assets[0]).safeApprove(AAVE_LENDING_POOL_ADDRESS, 0);\\n    IERC20(assets[0]).safeApprove(AAVE_LENDING_POOL_ADDRESS, amounts[0] + premiums[0]);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * This function is called after your contract has received the flash loaned amount\\n   * overriding receiveFlashLoan() in IFlashLoanRecipient\\n   */\\n  function receiveFlashLoan(\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256[] memory feeAmounts,\\n    bytes memory userData\\n  ) external override {\\n    if (msg.sender != BALANCER_VAULT) revert LV_INVALID_CONFIGURATION();\\n    if (_balancerFlashLoanLock != 2) revert LV_INVALID_CONFIGURATION();\\n    if (tokens.length != amounts.length) revert LV_INVALID_CONFIGURATION();\\n    if (tokens.length != feeAmounts.length) revert LV_INVALID_CONFIGURATION();\\n    if (amounts[0] == 0) revert LV_INVALID_CONFIGURATION();\\n    if (address(tokens[0]) == address(0)) revert LV_INVALID_CONFIGURATION();\\n\\n    _balancerFlashLoanLock = 1;\\n\\n    _executeOperation(address(tokens[0]), amounts[0], feeAmounts[0], userData);\\n\\n    // send tokens to Balancer vault contract\\n    IERC20(tokens[0]).safeTransfer(msg.sender, amounts[0] + feeAmounts[0]);\\n  }\\n\\n  function _executeOperation(\\n    address asset,\\n    uint256 borrowAmount,\\n    uint256 fee,\\n    bytes memory params\\n  ) internal {\\n    // parse params\\n    IBaseLeverage.FlashLoanParams memory opsParams = abi.decode(\\n      params,\\n      (IBaseLeverage.FlashLoanParams)\\n    );\\n    if (opsParams.minCollateralAmount == 0) revert LV_INVALID_CONFIGURATION();\\n    if (opsParams.user == address(0)) revert LV_INVALID_CONFIGURATION();\\n\\n    if (opsParams.isEnterPosition) {\\n      _enterPositionWithFlashloan(asset, borrowAmount, fee, opsParams);\\n    } else {\\n      _withdrawWithFlashloan(asset, borrowAmount, opsParams);\\n    }\\n  }\\n\\n  /**\\n   * @param _principal - The amount of collateral\\n   * @param _leverage - Extra leverage value and must be greater than 0, ex. 300% = 300_00\\n   *                    _principal + _principal * _leverage should be used as collateral\\n   * @param _borrowAsset - The borrowing asset address when leverage works\\n   * @param _collateralAsset - The collateral asset address when leverage works\\n   * @param _silo - The silo address\\n   * @param _flashLoanType - 0 is Aave, 1 is Balancer\\n   * @param _swapInfo - The uniswap/balancer swap paths between borrowAsset and collateral\\n   */\\n  function enterPositionWithFlashloan(\\n    uint256 _principal,\\n    uint256 _leverage,\\n    address _borrowAsset,\\n    address _collateralAsset,\\n    address _silo,\\n    IBaseLeverage.FlashLoanType _flashLoanType,\\n    IBaseLeverage.SwapInfo calldata _swapInfo\\n  ) external nonReentrant {\\n    if (_principal == 0) revert LV_AMOUNT_NOT_GT_0();\\n    if (_leverage == 0) revert LV_AMOUNT_NOT_GT_0();\\n    if (_leverage >= 900_00) revert LV_INVALID_CONFIGURATION();\\n    if (_borrowAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_collateralAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_silo == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (IERC20(_collateralAsset).balanceOf(msg.sender) < _principal) revert LV_SUPPLY_NOT_ALLOWED();\\n\\n    IERC20(_collateralAsset).safeTransferFrom(msg.sender, address(this), _principal);\\n\\n    _leverageWithFlashloan(\\n      IBaseLeverage.LeverageParams(\\n        msg.sender,\\n        _principal,\\n        _leverage,\\n        _borrowAsset,\\n        _collateralAsset,\\n        _silo,\\n        _flashLoanType,\\n        _swapInfo\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @param _repayAmount - The amount of repay\\n   * @param _requiredAmount - The amount of collateral\\n   * @param _borrowAsset - The borrowing asset address when leverage works\\n   * @param _collateralAsset - The collateral asset address when leverage works\\n   * @param _silo - The silo address\\n   * @param _flashLoanType - 0 is Aave, 1 is Balancer\\n   * @param _swapInfo - The uniswap/balancer/curve swap infos between borrowAsset and collateral\\n   */\\n  function withdrawWithFlashloan(\\n    uint256 _repayAmount,\\n    uint256 _requiredAmount,\\n    address _borrowAsset,\\n    address _collateralAsset,\\n    address _silo,\\n    IBaseLeverage.FlashLoanType _flashLoanType,\\n    IBaseLeverage.SwapInfo calldata _swapInfo\\n  ) external nonReentrant {\\n    if (_repayAmount == 0) revert LV_AMOUNT_NOT_GT_0();\\n    if (_requiredAmount == 0) revert LV_AMOUNT_NOT_GT_0();\\n    if (_borrowAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_collateralAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_silo == address(0)) revert LV_INVALID_CONFIGURATION();\\n\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = _repayAmount;\\n\\n    bytes memory params = abi.encode(\\n      false /*leavePosition*/,\\n      _requiredAmount,\\n      msg.sender,\\n      _collateralAsset,\\n      _silo,\\n      _swapInfo\\n    );\\n\\n    if (_flashLoanType == IBaseLeverage.FlashLoanType.AAVE) {\\n      // 0 means revert the transaction if not validated\\n      uint256[] memory modes = new uint256[](1);\\n      modes[0] = 0;\\n\\n      address[] memory assets = new address[](1);\\n      assets[0] = _borrowAsset;\\n      IPool(AAVE_LENDING_POOL_ADDRESS).flashLoan(\\n        address(this),\\n        assets,\\n        amounts,\\n        modes,\\n        address(this),\\n        params,\\n        0\\n      );\\n    } else {\\n      if (_balancerFlashLoanLock != 1) revert LV_INVALID_CONFIGURATION();\\n      IERC20[] memory assets = new IERC20[](1);\\n      assets[0] = IERC20(_borrowAsset);\\n      _balancerFlashLoanLock = 2;\\n      IBalancerVault(BALANCER_VAULT).flashLoan(address(this), assets, amounts, params);\\n    }\\n\\n    // remained borrow asset -> collateral\\n    _swapTo(\\n      _borrowAsset,\\n      _collateralAsset,\\n      IERC20(_borrowAsset).balanceOf(address(this)),\\n      _swapInfo.paths,\\n      _swapInfo.pathLength,\\n      false\\n    );\\n\\n    uint256 collateralAmount = IERC20(_collateralAsset).balanceOf(address(this));\\n    if (collateralAmount > _requiredAmount) {\\n      _supply(_collateralAsset, _silo, collateralAmount - _requiredAmount, msg.sender);\\n      collateralAmount = _requiredAmount;\\n    }\\n\\n    // finally deliver the collateral to user\\n    IERC20(_collateralAsset).safeTransfer(msg.sender, collateralAmount);\\n  }\\n\\n  /**\\n   * @param _principal - The amount of zapping asset\\n   * @param _borrowAmount - The amount of borrowing asset\\n   * @param _zappingAsset - The address which will zap into collateral asset\\n   * @param _collateralAsset - The collateral asset address\\n   * @param _borrowAsset - The borrowing asset address\\n   * @param _silo - The silo address\\n   * @param _zapPaths - The uniswap/balancer/curve swap paths between zappingAsset and collateral asset\\n   * @param _zapPathLength - The uniswap/balancer/curve swap path length between zappingAsset and collateral\\n   */\\n  function zapDeposit(\\n    uint256 _principal,\\n    uint256 _borrowAmount,\\n    address _zappingAsset,\\n    address _collateralAsset,\\n    address _borrowAsset,\\n    address _silo,\\n    IBaseLeverage.MultipSwapPath[3] calldata _zapPaths,\\n    uint256 _zapPathLength\\n  ) external nonReentrant {\\n    if (_principal == 0) revert LV_AMOUNT_NOT_GT_0();\\n    if (_zappingAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_collateralAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_silo == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (IERC20(_zappingAsset).balanceOf(msg.sender) < _principal) revert LV_SUPPLY_FAILED();\\n\\n    IERC20(_zappingAsset).safeTransferFrom(msg.sender, address(this), _principal);\\n\\n    uint256 collateralAmount = _swapTo(_zappingAsset, _collateralAsset, _principal, _zapPaths, _zapPathLength, true);\\n    \\n    // deposit collateral\\n    _supply(_collateralAsset, _silo, collateralAmount, msg.sender);\\n\\n    //borrow\\n    if (_borrowAmount != 0) {\\n      if (_borrowAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n\\n      _borrow(_borrowAsset, _silo, _borrowAmount, msg.sender);\\n    }\\n  }\\n\\n  /**\\n   * @param _principal - The amount of the zapping asset\\n   * @param _leverage - Extra leverage value and must be greater than 0, ex. 300% = 300_00\\n   *                    principal + principal * leverage should be used as collateral\\n   * @param _zappingAsset - The address which will zap into collateral asset\\n   * @param _collateralAsset - The collateral asset address when leverage works\\n   * @param _borrowAsset - The borrowing asset address when leverage works\\n   * @param _silo - The silo address\\n   * @param _flashLoanType - 0 is Aave, 1 is Balancer\\n   * @param _zapPaths - The uniswap/balancer/curve swap paths between zappingAsset and collateral asset\\n   * @param _zapPathLength - The uniswap/balancer/curve swap path length between zappingAsset and collateral asset\\n   * @param _swapInfo - The uniswap/balancer/curve swap between borrowAsset and collateralAsset\\n   */\\n  function zapLeverageWithFlashloan(\\n    uint256 _principal,\\n    uint256 _leverage,\\n    address _zappingAsset,\\n    address _collateralAsset,\\n    address _borrowAsset,\\n    address _silo,\\n    IBaseLeverage.FlashLoanType _flashLoanType,\\n    IBaseLeverage.MultipSwapPath[3] calldata _zapPaths,\\n    uint256 _zapPathLength,\\n    IBaseLeverage.SwapInfo calldata _swapInfo\\n  ) external nonReentrant {\\n    if (_principal == 0) revert LV_AMOUNT_NOT_GT_0();\\n    if (_leverage == 0) revert LV_AMOUNT_NOT_GT_0();\\n    if (_leverage >= 900_00) revert LV_INVALID_CONFIGURATION();\\n    if (_zappingAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_collateralAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_borrowAsset == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (_silo == address(0)) revert LV_INVALID_CONFIGURATION();\\n    if (IERC20(_zappingAsset).balanceOf(msg.sender) < _principal) revert LV_SUPPLY_FAILED();\\n\\n    IERC20(_zappingAsset).safeTransferFrom(msg.sender, address(this), _principal);\\n\\n    uint256 collateralAmount = _swapTo(_zappingAsset, _collateralAsset, _principal, _zapPaths, _zapPathLength, true);\\n\\n    _leverageWithFlashloan(\\n      IBaseLeverage.LeverageParams(\\n        msg.sender,\\n        collateralAmount,\\n        _leverage,\\n        _borrowAsset,\\n        _collateralAsset,\\n        _silo,\\n        _flashLoanType,\\n        _swapInfo\\n      )\\n    );\\n  }\\n\\n  function _enterPositionWithFlashloan(\\n    address _borrowAsset,\\n    uint256 _borrowedAmount,\\n    uint256 _fee,\\n    IBaseLeverage.FlashLoanParams memory _params\\n  ) internal {\\n    //swap borrow asset to collateral\\n    _swapTo(\\n      _borrowAsset,\\n      _params.collateralAsset,\\n      _borrowedAmount,\\n      _params.swapInfo.paths,\\n      _params.swapInfo.pathLength,\\n      true\\n    );\\n\\n    uint256 collateralAmount = IERC20(_params.collateralAsset).balanceOf(address(this));\\n    if (collateralAmount < _params.minCollateralAmount) revert LV_SUPPLY_FAILED();\\n\\n    //deposit collateral\\n    _supply(_params.collateralAsset, _params.silo, collateralAmount, _params.user);\\n\\n    //borrow\\n    _borrow(_borrowAsset, _params.silo, _borrowedAmount + _fee, _params.user);\\n  }\\n\\n  function _leverageWithFlashloan(IBaseLeverage.LeverageParams memory _params) internal {\\n    uint256 minCollateralAmount = _params.principal * (PERCENTAGE_FACTOR + _params.leverage) / PERCENTAGE_FACTOR;\\n\\n    bytes memory params = abi.encode(\\n      true /*enterPosition*/,\\n      minCollateralAmount,\\n      _params.user,\\n      _params.collateralAsset,\\n      _params.silo,\\n      _params.swapInfo\\n    );\\n\\n    uint256 borrowAssetDecimals = IERC20Metadata(_params.borrowAsset).decimals();\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = _params.swapInfo.paths[0].inAmount;\\n    if (_params.flashLoanType == IBaseLeverage.FlashLoanType.AAVE) {\\n      // 0 means revert the transaction if not validated\\n      uint256[] memory modes = new uint256[](1);\\n      address[] memory assets = new address[](1);\\n      assets[0] = _params.borrowAsset;\\n      IPool(AAVE_LENDING_POOL_ADDRESS).flashLoan(\\n        address(this),\\n        assets,\\n        amounts,\\n        modes,\\n        address(this),\\n        params,\\n        0\\n      );\\n    } else {\\n      if (_balancerFlashLoanLock != 1) revert LV_INVALID_CONFIGURATION();\\n\\n      IERC20[] memory assets = new IERC20[](1);\\n      assets[0] = IERC20(_params.borrowAsset);\\n      _balancerFlashLoanLock = 2;\\n      IBalancerVault(BALANCER_VAULT).flashLoan(address(this), assets, amounts, params);\\n      _balancerFlashLoanLock = 1;\\n    }\\n  }\\n\\n  function _swapTo(\\n    address _borrowingAsset,\\n    address _collateralAsset,\\n    uint256 _amount,\\n    IBaseLeverage.MultipSwapPath[3] memory _paths,\\n    uint256 _pathLength,\\n    bool _checkOutAmount\\n  ) internal returns (uint256) {\\n    if (_pathLength == 0) revert LV_INVALID_CONFIGURATION();\\n    if (_paths[0].swapFrom != _borrowingAsset) revert LV_INVALID_CONFIGURATION();\\n    if (_paths[_pathLength - 1].swapTo != _collateralAsset) revert LV_INVALID_CONFIGURATION();\\n\\n    uint256 amount = _amount;\\n    if (amount == 0) return 0;\\n\\n    for (uint256 i; i < _pathLength; ++i) {\\n      if (_paths[i].swapType == IBaseLeverage.SwapType.NONE) continue;\\n      amount = _processSwap(amount, _paths[i], false, _checkOutAmount);\\n    }\\n\\n    return amount;\\n  }\\n\\n  function _swapFrom(\\n    address _borrowingAsset,\\n    address _collateralAsset,\\n    IBaseLeverage.MultipSwapPath[3] memory _paths,\\n    uint256 _pathLength\\n  ) internal returns (uint256) {\\n    if (_pathLength == 0) revert LV_INVALID_CONFIGURATION();\\n    if (_paths[0].swapFrom != _collateralAsset) revert LV_INVALID_CONFIGURATION();\\n    if (_paths[_pathLength - 1].swapTo != _borrowingAsset) revert LV_INVALID_CONFIGURATION();\\n\\n    uint256 amount = IERC20(_collateralAsset).balanceOf(address(this));\\n    if (amount == 0) return 0;\\n\\n    for (uint256 i; i < _pathLength; ++i) {\\n      if (_paths[i].swapType == IBaseLeverage.SwapType.NONE) continue;\\n      amount = _processSwap(amount, _paths[i], true, true);\\n    }\\n\\n    return amount;\\n  }\\n\\n  function _swapByPath(\\n    uint256 _fromAmount,\\n    IBaseLeverage.MultipSwapPath memory _path,\\n    bool _checkOutAmount\\n  ) internal returns (uint256) {\\n    uint256 poolCount = _path.poolCount;\\n    uint256 outAmount = _checkOutAmount ? _path.outAmount : 0;\\n    if (poolCount == 0) revert LV_INVALID_CONFIGURATION();\\n\\n    if (_path.swapType == IBaseLeverage.SwapType.BALANCER) {\\n      // Balancer Swap\\n      BalancerswapAdapter.Path memory path;\\n      path.tokens = new address[](poolCount + 1);\\n      path.poolIds = new bytes32[](poolCount);\\n\\n      for (uint256 i; i < poolCount; ++i) {\\n        path.tokens[i] = _path.routes[i * 2];\\n        path.poolIds[i] = bytes32(_path.routeParams[i][0]);\\n      }\\n      path.tokens[poolCount] = _path.routes[poolCount * 2];\\n\\n      return\\n        BalancerswapAdapter.swapExactTokensForTokens(\\n          _path.swapFrom,\\n          _path.swapTo,\\n          _fromAmount,\\n          path,\\n          outAmount\\n        );\\n    }\\n\\n    if (_path.swapType == IBaseLeverage.SwapType.UNISWAP) {\\n      // UniSwap\\n      UniswapAdapter.Path memory path;\\n      path.tokens = new address[](poolCount + 1);\\n      path.fees = new uint256[](poolCount);\\n\\n      for (uint256 i; i < poolCount; ++i) {\\n        path.tokens[i] = _path.routes[i * 2];\\n        path.fees[i] = _path.routeParams[i][0];\\n      }\\n      path.tokens[poolCount] = _path.routes[poolCount * 2];\\n\\n      return\\n        UniswapAdapter.swapExactTokensForTokens(\\n          _path.swapFrom,\\n          _path.swapTo,\\n          _fromAmount,\\n          path,\\n          outAmount\\n        );\\n    }\\n\\n    // Curve Swap\\n    return\\n      CurveswapAdapter.swapExactTokensForTokens(\\n        _path.swapFrom,\\n        _path.swapTo,\\n        _fromAmount,\\n        CurveswapAdapter.Path(_path.routes, _path.routeParams),\\n        outAmount\\n      );\\n  }\\n\\n  function _withdrawWithFlashloan(\\n    address _borrowAsset,\\n    uint256 _borrowedAmount,\\n    IBaseLeverage.FlashLoanParams memory _params\\n  ) internal virtual;\\n\\n  function _supply(\\n    address _collateralAsset, \\n    address _silo, \\n    uint256 _amount, \\n    address _user\\n  ) internal virtual;\\n\\n  function _remove(\\n    uint256 _amount, \\n    address _silo, \\n    uint256 _slippage, \\n    address _user\\n  ) internal virtual;\\n\\n  function _borrow(\\n    address _borrowAsset, \\n    address _silo, \\n    uint256 _amount, \\n    address borrower\\n  ) internal virtual;\\n\\n  function _repay(\\n    address _borrowAsset, \\n    address _silo, \\n    uint256 _amount, \\n    address borrower\\n  ) internal virtual;\\n\\n  function _processSwap(\\n    uint256 _amount,\\n    IBaseLeverage.MultipSwapPath memory _path,\\n    bool _isFrom,\\n    bool _checkOutAmount\\n  ) internal virtual returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/src/swappers/BalancerswapAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IBalancerVault} from \\\"../interfaces/Balancer/IBalancerVault.sol\\\";\\n\\nlibrary BalancerswapAdapter {\\n  using SafeERC20 for IERC20;\\n\\n  struct Path {\\n    address[] tokens;\\n    bytes32[] poolIds;\\n  }\\n\\n  error SW_PATH_LENGTH_INVALID();\\n  error SW_PATH_TOKEN_INVALID();\\n  error SW_MISMATCH_RETURNED_AMOUNT();\\n\\n  address private constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n\\n  function swapExactTokensForTokens(\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    Path calldata path,\\n    uint256 minAmountOut\\n  ) external returns (uint256) {\\n    // Check path is valid\\n    uint256 length = path.tokens.length;\\n    if (length <= 1 || length - 1 != path.poolIds.length) revert SW_PATH_LENGTH_INVALID();\\n    if (path.tokens[0] != assetToSwapFrom || path.tokens[length - 1] != assetToSwapTo) revert SW_PATH_TOKEN_INVALID();\\n\\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\\n    IERC20(assetToSwapFrom).safeApprove(address(BALANCER_VAULT), 0);\\n    if (IERC20(assetToSwapFrom).allowance(address(this), address(BALANCER_VAULT)) == 0)\\n      IERC20(assetToSwapFrom).safeApprove(address(BALANCER_VAULT), amountToSwap);\\n\\n    IBalancerVault.BatchSwapStep[] memory swaps = new IBalancerVault.BatchSwapStep[](length - 1);\\n    int256[] memory limits = new int256[](length);\\n    for (uint256 i; i < length - 1; ++i) {\\n      swaps[i] = IBalancerVault.BatchSwapStep({\\n        poolId: path.poolIds[i],\\n        assetInIndex: i,\\n        assetOutIndex: i + 1,\\n        amount: 0,\\n        userData: \\\"0\\\"\\n      });\\n    }\\n    swaps[0].amount = amountToSwap;\\n    limits[0] = int256(amountToSwap);\\n    unchecked {\\n      limits[length - 1] = int256(0 - minAmountOut);\\n    }\\n\\n    IBalancerVault.FundManagement memory funds = IBalancerVault.FundManagement({\\n      sender: address(this),\\n      fromInternalBalance: false,\\n      recipient: payable(address(this)),\\n      toInternalBalance: false\\n    });\\n\\n    int256[] memory receivedAmount = IBalancerVault(BALANCER_VAULT).batchSwap(\\n      IBalancerVault.SwapKind.GIVEN_IN,\\n      swaps,\\n      path.tokens,\\n      funds,\\n      limits,\\n      block.timestamp\\n    );\\n\\n    uint256 receivedPositveAmount;\\n    unchecked {\\n      receivedPositveAmount = uint256(0 - receivedAmount[length - 1]);\\n    }\\n\\n    if (receivedPositveAmount == 0) revert SW_MISMATCH_RETURNED_AMOUNT();\\n    if (IERC20(assetToSwapTo).balanceOf(address(this)) < receivedPositveAmount) revert SW_MISMATCH_RETURNED_AMOUNT();\\n\\n    return receivedPositveAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/swappers/CurveswapAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ICurveAddressProvider} from \\\"../interfaces/Curve/ICurveAddressProvider.sol\\\";\\nimport {ICurveExchange} from \\\"../interfaces/Curve/ICurveExchange.sol\\\";\\n\\nlibrary CurveswapAdapter {\\n  using SafeERC20 for IERC20;\\n\\n  error SW_MISMATCH_RETURNED_AMOUNT();\\n\\n  address private constant curveAddressProvider = 0x0000000022D53366457F9d5E68Ec105046FC4383;\\n\\n  struct Path {\\n    address[9] routes;\\n    uint256[3][4] swapParams;\\n  }\\n\\n  address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  function swapExactTokensForTokens(\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    Path calldata path,\\n    uint256 minAmountOut\\n  ) external returns (uint256) {\\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\\n    address curveExchange = ICurveAddressProvider(curveAddressProvider).get_address(2);\\n\\n    IERC20(assetToSwapFrom).safeApprove(address(curveExchange), 0);\\n    IERC20(assetToSwapFrom).safeApprove(address(curveExchange), amountToSwap);\\n\\n    address[4] memory pools;\\n    uint256 receivedAmount = ICurveExchange(curveExchange).exchange_multiple(\\n      path.routes,\\n      path.swapParams,\\n      amountToSwap,\\n      minAmountOut,\\n      pools,\\n      address(this)\\n    );\\n\\n    if (receivedAmount == 0) revert SW_MISMATCH_RETURNED_AMOUNT();\\n    uint256 balanceOfAsset;\\n    if (assetToSwapTo == ETH) {\\n      balanceOfAsset = address(this).balance;\\n    } else {\\n      balanceOfAsset = IERC20(assetToSwapTo).balanceOf(address(this));\\n    }\\n    if (balanceOfAsset < receivedAmount) revert SW_MISMATCH_RETURNED_AMOUNT();\\n    return receivedAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Curve/ICurveAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title ICurveAddressProvider interface\\n * @notice Interface for the Curve Address Provider.\\n **/\\n\\ninterface ICurveAddressProvider {\\n  function get_address(uint256 id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Curve/ICurveExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\ninterface ICurveExchange {\\n  function exchange(\\n    address _pool,\\n    address _from,\\n    address _to,\\n    uint256 _amount,\\n    uint256 _expected,\\n    address _receiver\\n  ) external payable returns (uint256);\\n\\n  function exchange_multiple(\\n    address[9] memory _route,\\n    uint256[3][4] memory _swap_params,\\n    uint256 _amount,\\n    uint256 _expected,\\n    address[4] memory _pools,\\n    address _receiver\\n  ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/src/swappers/UniswapAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ISwapRouter} from \\\"../interfaces/Uniswap/V3/ISwapRouter.sol\\\";\\n\\nlibrary UniswapAdapter {\\n  using SafeERC20 for IERC20;\\n\\n  error SW_PATH_LENGTH_INVALID();\\n  error SW_PATH_TOKEN_INVALID();\\n  error SW_MISMATCH_RETURNED_AMOUNT();\\n\\n  address private constant UNISWAP_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\n\\n  struct Path {\\n    address[] tokens;\\n    uint256[] fees;\\n  }\\n\\n  function swapExactTokensForTokens(\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    Path calldata path,\\n    uint256 minAmountOut\\n  ) external returns (uint256) {\\n    // Check path is valid\\n    uint256 length = path.tokens.length;\\n    if (length <= 1 || length - 1 != path.fees.length) revert SW_PATH_LENGTH_INVALID();\\n    if (path.tokens[0] != assetToSwapFrom || path.tokens[length - 1] != assetToSwapTo) revert SW_PATH_TOKEN_INVALID();\\n\\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), 0);\\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), amountToSwap);\\n\\n    uint256 receivedAmount;\\n    if (length > 2) {\\n      bytes memory _path;\\n\\n      for (uint256 i; i < length - 1; ++i) {\\n        _path = abi.encodePacked(_path, path.tokens[i], uint24(path.fees[i]));\\n      }\\n      _path = abi.encodePacked(_path, assetToSwapTo);\\n\\n      ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n        path: _path,\\n        recipient: address(this),\\n        deadline: block.timestamp,\\n        amountIn: amountToSwap,\\n        amountOutMinimum: minAmountOut\\n      });\\n\\n      // Executes the swap.\\n      receivedAmount = ISwapRouter(UNISWAP_ROUTER).exactInput(params);\\n    } else {\\n      ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n        tokenIn: assetToSwapFrom,\\n        tokenOut: assetToSwapTo,\\n        fee: uint24(path.fees[0]),\\n        recipient: address(this),\\n        deadline: block.timestamp,\\n        amountIn: amountToSwap,\\n        amountOutMinimum: minAmountOut,\\n        sqrtPriceLimitX96: 0\\n      });\\n\\n      // Executes the swap.\\n      receivedAmount = ISwapRouter(UNISWAP_ROUTER).exactInputSingle(params);\\n    }\\n\\n    if (receivedAmount == 0) revert SW_MISMATCH_RETURNED_AMOUNT();\\n    if (IERC20(assetToSwapTo).balanceOf(address(this)) < receivedAmount) revert SW_MISMATCH_RETURNED_AMOUNT();\\n\\n    return receivedAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Uniswap/V3/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IUniswapV3SwapCallback} from \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    // Taken from https://soliditydeveloper.com/uniswap3\\n    // Manually added to the interface\\n    function refundETH() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Uniswap/V3/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Balancer/IBalancerVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalancerVault {\\n  // Pools\\n  //\\n  // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n  // functionality:\\n  //\\n  //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n  // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n  // which increase with the number of registered tokens.\\n  //\\n  //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n  // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n  // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n  // independent of the number of registered tokens.\\n  //\\n  //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n  // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n  enum PoolSpecialization {\\n    GENERAL,\\n    MINIMAL_SWAP_INFO,\\n    TWO_TOKEN\\n  }\\n\\n  /**\\n   * @dev Returns a Pool's contract address and specialization setting.\\n   */\\n  function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n  // Swaps\\n  //\\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n  //\\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n  // individual swaps.\\n  //\\n  // There are two swap kinds:\\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n  //\\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n  // the final intended token.\\n  //\\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n  // much less gas than they would otherwise.\\n  //\\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n  // updating the Pool's internal accounting).\\n  //\\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\\n  //\\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n  //\\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n  //\\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n  enum SwapKind {\\n    GIVEN_IN,\\n    GIVEN_OUT\\n  }\\n\\n  /**\\n   * @dev Performs a swap with a single Pool.\\n   *\\n   * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n   * taken from the Pool, which must be greater than or equal to `limit`.\\n   *\\n   * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n   * sent to the Pool, which must be less than or equal to `limit`.\\n   *\\n   * Internal Balance usage and the recipient are determined by the `funds` struct.\\n   *\\n   * Emits a `Swap` event.\\n   */\\n  function swap(\\n    SingleSwap memory singleSwap,\\n    FundManagement memory funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n   * the `kind` value.\\n   *\\n   * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n   * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n   *\\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n   * used to extend swap behavior.\\n   */\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    address assetIn;\\n    address assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n   * `recipient` account.\\n   *\\n   * If the caller is not `sender`, it must be an authorized relayer for them.\\n   *\\n   * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n   * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n   * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n   * `joinPool`.\\n   *\\n   * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n   * transferred. This matches the behavior of `exitPool`.\\n   *\\n   * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n   * revert.\\n   */\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n   * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n   * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n   * `getPoolTokenInfo`).\\n   *\\n   * If the caller is not `sender`, it must be an authorized relayer for them.\\n   *\\n   * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n   * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n   * it just enforces these minimums.\\n   *\\n   * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n   * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n   * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n   *\\n   * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n   * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n   * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n   * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n   *\\n   * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n   * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n   * do so will trigger a revert.\\n   *\\n   * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n   * `tokens` array. This array must match the Pool's registered tokens.\\n   *\\n   * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n   * their own custom logic. This typically requires additional information from the user (such as the expected number\\n   * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n   * passed directly to the Pool's contract.\\n   *\\n   * Emits a `PoolBalanceChanged` event.\\n   */\\n  function exitPool(\\n    bytes32 poolId,\\n    address sender,\\n    address payable recipient,\\n    ExitPoolRequest memory request\\n  ) external;\\n\\n  struct ExitPoolRequest {\\n    address[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n  }\\n\\n  enum ExitKind {\\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n    EXACT_BPT_IN_FOR_TOKENS_OUT,\\n    BPT_IN_FOR_EXACT_TOKENS_OUT\\n  }\\n\\n  function joinPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    JoinPoolRequest memory request\\n  ) external payable;\\n\\n  struct JoinPoolRequest {\\n    address[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n  }\\n\\n  enum JoinKind {\\n    INIT,\\n    EXACT_TOKENS_IN_FOR_BPT_OUT,\\n    TOKEN_IN_FOR_EXACT_BPT_OUT\\n  }\\n\\n  function getPoolTokenInfo(\\n    bytes32 poolId,\\n    IERC20 token\\n  )\\n    external\\n    view\\n    returns (uint256 cash, uint256 managed, uint256 lastChangeBlock, address assetManager);\\n\\n  function getPoolTokens(\\n    bytes32 poolId\\n  )\\n    external\\n    view\\n    returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  function batchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] memory swaps,\\n    address[] memory assets,\\n    FundManagement memory funds,\\n    int256[] memory limits,\\n    uint256 deadline\\n  ) external payable returns (int256[] memory);\\n\\n  function flashLoan(\\n    address recipient,\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    bytes memory userData\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Aave/V3/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypesV3} from \\\"../../../libraries/Aave/DataTypesV3.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     **/\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     **/\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     **/\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypesV3.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     **/\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypesV3.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     **/\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypesV3.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     **/\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     **/\\n    function backUnbacked(address asset, uint256 amount, uint256 fee) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     **/\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     **/\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     **/\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     **/\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     **/\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     **/\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     **/\\n    function setConfiguration(\\n        address asset,\\n        DataTypesV3.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypesV3.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypesV3.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     **/\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypesV3.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     **/\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypesV3.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypesV3.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     **/\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     **/\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypesV3.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypesV3.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     **/\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/Aave/DataTypesV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nlibrary DataTypesV3 {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62-63: reserved\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Aave/V3/IPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     **/\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     **/\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     **/\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     **/\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     **/\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     **/\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     **/\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     **/\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Balancer/IFlashLoanRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IFlashLoanRecipient interface\\n * @notice Interface for the IFlashLoanRecipient.\\n * @author Sturdy\\n * @dev implement this interface to develop a flashloan-compatible IFlashLoanRecipient contract\\n **/\\ninterface IFlashLoanRecipient {\\n  /**\\n   * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n   *\\n   * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n   * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n   * Vault, or else the entire flash loan will revert.\\n   *\\n   * `userData` is the same value passed in the `IVault.flashLoan` call.\\n   */\\n  function receiveFlashLoan(\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256[] memory feeAmounts,\\n    bytes memory userData\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Aave/V3/IFlashLoanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IFlashLoanReceiver interface\\n * @notice Interface for the IFlashLoanReceiver.\\n * @author Sturdy\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IBaseLeverage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\ninterface IBaseLeverage {\\n  enum FlashLoanType {\\n    AAVE,\\n    BALANCER\\n  }\\n\\n  enum SwapType {\\n    NONE,\\n    NO_SWAP,\\n    UNISWAP,\\n    BALANCER,\\n    CURVE\\n  }\\n\\n  struct MultipSwapPath {\\n    address[9] routes;\\n    uint256[3][4] routeParams;\\n    // uniswap/balancer/curve\\n    SwapType swapType;\\n    uint256 poolCount;\\n    address swapFrom;\\n    address swapTo;\\n    uint256 inAmount;\\n    uint256 outAmount;\\n  }\\n\\n  struct SwapInfo {\\n    MultipSwapPath[3] paths;\\n    MultipSwapPath[3] reversePaths;\\n    uint256 pathLength;\\n  }\\n\\n  struct FlashLoanParams {\\n    bool isEnterPosition;\\n    uint256 minCollateralAmount;\\n    address user;\\n    address collateralAsset;\\n    address silo;\\n    SwapInfo swapInfo;\\n  }\\n\\n  struct LeverageParams {\\n    address user;\\n    uint256 principal;\\n    uint256 leverage;\\n    address borrowAsset;\\n    address collateralAsset;\\n    address silo;\\n    FlashLoanType flashLoanType;\\n    SwapInfo swapInfo;\\n  }\\n\\n  function enterPositionWithFlashloan(\\n    uint256 _principal,\\n    uint256 _leverage,\\n    address _borrowAsset,\\n    address _collateralAsset,\\n    address _silo,\\n    FlashLoanType _flashLoanType,\\n    SwapInfo calldata _swapInfo\\n  ) external;\\n\\n  function withdrawWithFlashloan(\\n    uint256 _repayAmount,\\n    uint256 _requiredAmount,\\n    address _borrowAsset,\\n    address _collateralAsset,\\n    address _silo,\\n    FlashLoanType _flashLoanType,\\n    SwapInfo calldata _swapInfo\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/Yearn/IYearnVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\ninterface IYearnVault {\\n    function pricePerShare() external view returns (uint256 price);\\n\\n    function deposit(uint256 _amount, address recipient) external returns (uint256);\\n\\n    function withdraw(\\n        uint256 maxShares,\\n        address recipient,\\n        uint256 maxLoss\\n    ) external returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/src/interfaces/ISturdyPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.21;\\n\\nimport { VaultAccount } from \\\"../libraries/VaultAccount.sol\\\";\\n\\ninterface ISturdyPair {\\n    struct CurrentRateInfo {\\n        uint32 lastBlock;\\n        uint32 feeToProtocolRate; // Fee amount 1e5 precision\\n        uint64 lastTimestamp;\\n        uint64 ratePerSec;\\n        uint64 fullUtilizationRate;\\n    }\\n\\n    function CIRCUIT_BREAKER_ADDRESS() external view returns (address);\\n\\n    function COMPTROLLER_ADDRESS() external view returns (address);\\n\\n    function DEPLOYER_ADDRESS() external view returns (address);\\n\\n    function FRAXLEND_WHITELIST_ADDRESS() external view returns (address);\\n\\n    function timelockAddress() external view returns (address);\\n\\n    function addCollateral(uint256 _collateralAmount, address _borrower) external;\\n    \\n    function addInterest(\\n        bool _returnAccounting\\n    )\\n        external\\n        returns (\\n            uint256 _interestEarned,\\n            uint256 _feesAmount,\\n            uint256 _feesShare,\\n            CurrentRateInfo memory _currentRateInfo,\\n            VaultAccount memory _totalAsset,\\n            VaultAccount memory _totalBorrow\\n        );\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function approvedBorrowers(address) external view returns (bool);\\n\\n    function approvedLenders(address) external view returns (bool);\\n\\n    function approveBorrowDelegation(address _delegatee, uint256 _amount) external;\\n\\n    function asset() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function borrowAsset(\\n        uint256 _borrowAmount,\\n        uint256 _collateralAmount,\\n        address _receiver\\n    ) external returns (uint256 _shares);\\n\\n    function borrowAssetOnBehalfOf(\\n        uint256 _borrowAmount,\\n        address _onBehalfOf\\n    ) external returns (uint256 _shares);\\n\\n    function borrowerWhitelistActive() external view returns (bool);\\n\\n    function changeFee(uint32 _newFee) external;\\n\\n    function cleanLiquidationFee() external view returns (uint256);\\n\\n    function collateralContract() external view returns (address);\\n\\n    function currentRateInfo()\\n        external\\n        view\\n        returns (\\n            uint32 lastBlock,\\n            uint32 feeToProtocolRate,\\n            uint64 lastTimestamp,\\n            uint64 ratePerSec,\\n            uint64 fullUtilizationRate\\n        );\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    function deposit(uint256 _amount, address _receiver) external returns (uint256 _sharesReceived);\\n\\n    function dirtyLiquidationFee() external view returns (uint256);\\n\\n    function exchangeRateInfo() external view returns (address oracle, uint32 maxOracleDeviation, uint184 lastTimestamp, uint256 lowExchangeRate, uint256 highExchangeRate);\\n\\n    function getConstants()\\n        external\\n        pure\\n        returns (\\n            uint256 _LTV_PRECISION,\\n            uint256 _LIQ_PRECISION,\\n            uint256 _UTIL_PREC,\\n            uint256 _FEE_PRECISION,\\n            uint256 _EXCHANGE_PRECISION,\\n            uint256 _DEVIATION_PRECISION,\\n            uint256 _RATE_PRECISION,\\n            uint256 _MAX_PROTOCOL_FEE\\n        );\\n\\n    function getImmutableAddressBool()\\n        external\\n        view\\n        returns (\\n            address _assetContract,\\n            address _collateralContract,\\n            address _oracleMultiply,\\n            address _oracleDivide,\\n            address _rateContract,\\n            address _DEPLOYER_CONTRACT,\\n            address _COMPTROLLER_ADDRESS,\\n            address _FRAXLEND_WHITELIST,\\n            bool _borrowerWhitelistActive,\\n            bool _lenderWhitelistActive\\n        );\\n\\n    function getImmutableUint256()\\n        external\\n        view\\n        returns (\\n            uint256 _oracleNormalization,\\n            uint256 _maxLTV,\\n            uint256 _cleanLiquidationFee,\\n            uint256 _maturityDate,\\n            uint256 _penaltyRate\\n        );\\n\\n    function getPairAccounting()\\n        external\\n        view\\n        returns (\\n            uint128 _totalAssetAmount,\\n            uint128 _totalAssetShares,\\n            uint128 _totalBorrowAmount,\\n            uint128 _totalBorrowShares,\\n            uint256 _totalCollateral\\n        );\\n\\n    function getUserSnapshot(\\n        address _address\\n    ) external view returns (uint256 _userAssetShares, uint256 _userBorrowShares, uint256 _userCollateralBalance);\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    function lenderWhitelistActive() external view returns (bool);\\n\\n    function leveragedPosition(\\n        address _swapperAddress,\\n        uint256 _borrowAmount,\\n        uint256 _initialCollateralAmount,\\n        uint256 _amountCollateralOutMin,\\n        address[] memory _path\\n    ) external returns (uint256 _totalCollateralBalance);\\n\\n    function liquidate(\\n        uint128 _sharesToLiquidate,\\n        uint256 _deadline,\\n        address _borrower\\n    ) external returns (uint256 _collateralForLiquidator);\\n\\n    function maturityDate() external view returns (uint256);\\n\\n    function maxLTV() external view returns (uint256);\\n\\n    function maxOracleDelay() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function oracleDivide() external view returns (address);\\n\\n    function oracleMultiply() external view returns (address);\\n\\n    function oracleNormalization() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function pause() external;\\n\\n    function paused() external view returns (bool);\\n\\n    function penaltyRate() external view returns (uint256);\\n\\n    function rateContract() external view returns (address);\\n\\n    function redeem(uint256 _shares, address _receiver, address _owner) external returns (uint256 _amountToReturn);\\n\\n    function removeCollateral(uint256 _collateralAmount, address _receiver) external;\\n\\n    function removeCollateralFrom(\\n        uint256 _collateralAmount,\\n        address _receiver,\\n        address _borrower\\n    ) external;\\n\\n    function setWhitelistedDelegators(address _delegator, bool _enabled) external;\\n\\n    function renounceOwnership() external;\\n\\n    function repayAsset(uint256 _shares, address _borrower) external returns (uint256 _amountToRepay);\\n\\n    function repayAssetWithCollateral(\\n        address _swapperAddress,\\n        uint256 _collateralToSwap,\\n        uint256 _amountAssetOutMin,\\n        address[] memory _path\\n    ) external returns (uint256 _amountAssetOut);\\n\\n    function setApprovedBorrowers(address[] memory _borrowers, bool _approval) external;\\n\\n    function setApprovedLenders(address[] memory _lenders, bool _approval) external;\\n\\n    function setMaxOracleDelay(uint256 _newDelay) external;\\n\\n    function setSwapper(address _swapper, bool _approval) external;\\n\\n    function setTimelock(address _newAddress) external;\\n\\n    function swappers(address) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function toAssetAmount(\\n        uint256 _shares,\\n        bool _roundUp,\\n        bool _previewInterest\\n    ) external view returns (uint256);\\n\\n    function toAssetShares(\\n        uint256 _amount,\\n        bool _roundUp,\\n        bool _previewInterest\\n    ) external view returns (uint256);\\n\\n    function toBorrowAmount(\\n        uint256 _shares,\\n        bool _roundUp,\\n        bool _previewInterest\\n    ) external view returns (uint256 _amount);\\n\\n    function toBorrowShares(\\n        uint256 _amount,\\n        bool _roundUp,\\n        bool _previewInterest\\n    ) external view returns (uint256 _shares);\\n\\n    function totalAsset() external view returns (uint128 amount, uint128 shares);\\n\\n    function totalBorrow() external view returns (uint128 amount, uint128 shares);\\n\\n    function totalCollateral() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function unpause() external;\\n\\n    function updateExchangeRate()\\n        external\\n        returns (bool _isBorrowAllowed, uint256 _lowExchangeRate, uint256 _highExchangeRate);\\n\\n    function userBorrowShares(address) external view returns (uint256);\\n\\n    function userCollateralBalance(address) external view returns (uint256);\\n\\n    function version() external pure returns (uint256 _major, uint256 _minor, uint256 _patch);\\n\\n    function withdrawFees(uint128 _shares, address _recipient) external returns (uint256 _amountToTransfer);\\n\\n    function isInterestPaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/VaultAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.21;\\n\\nstruct VaultAccount {\\n    uint128 amount; // Total amount, analogous to market cap\\n    uint128 shares; // Total shares, analogous to shares outstanding\\n}\\n\\n/// @title VaultAccount Library\\n/// @author Drake Evans (Frax Finance) github.com/drakeevans, modified from work by @Boring_Crypto github.com/boring_crypto\\n/// @notice Provides a library for use with the VaultAccount struct, provides convenient math implementations\\n/// @dev Uses uint128 to save on storage\\nlibrary VaultAccountingLibrary {\\n    /// @notice Calculates the shares value in relationship to `amount` and `total`\\n    /// @dev Given an amount, return the appropriate number of shares\\n    function toShares(VaultAccount memory total, uint256 amount, bool roundUp) internal pure returns (uint256 shares) {\\n        if (total.amount == 0) {\\n            shares = amount;\\n        } else {\\n            shares = (amount * total.shares) / total.amount;\\n            if (roundUp && (shares * total.amount) / total.shares < amount) {\\n                shares = shares + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the amount value in relationship to `shares` and `total`\\n    /// @dev Given a number of shares, returns the appropriate amount\\n    function toAmount(VaultAccount memory total, uint256 shares, bool roundUp) internal pure returns (uint256 amount) {\\n        if (total.shares == 0) {\\n            amount = shares;\\n        } else {\\n            amount = (shares * total.amount) / total.shares;\\n            if (roundUp && (amount * total.shares) / total.amount < shares) {\\n                amount = amount + 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1660\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/src/swappers/BalancerswapAdapter.sol\": {\r\n        \"BalancerswapAdapter\": \"0xDAD951530EF3a823D835ef34367A96F5b9077cdb\"\r\n      },\r\n      \"contracts/src/swappers/UniswapAdapter.sol\": {\r\n        \"UniswapAdapter\": \"0xd23bFA060c2DCB70D4AeB78EBd2EE9a172cF5818\"\r\n      },\r\n      \"contracts/src/swappers/CurveswapAdapter.sol\": {\r\n        \"CurveswapAdapter\": \"0xE66A2563dB193c9a8cB99C7698142ed2C3c6c36e\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"LV_AMOUNT_NOT_GT_0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_INVALID_CONFIGURATION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_REPAY_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_REQUIRE_MIN_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_SUPPLY_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LV_SUPPLY_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"enum IBaseLeverage.FlashLoanType\",\"name\":\"_flashLoanType\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.SwapInfo\",\"name\":\"_swapInfo\",\"type\":\"tuple\"}],\"name\":\"enterPositionWithFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"enum IBaseLeverage.FlashLoanType\",\"name\":\"_flashLoanType\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.SwapInfo\",\"name\":\"_swapInfo\",\"type\":\"tuple\"}],\"name\":\"withdrawWithFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_zappingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"_zapPaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"_zapPathLength\",\"type\":\"uint256\"}],\"name\":\"zapDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_zappingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"enum IBaseLeverage.FlashLoanType\",\"name\":\"_flashLoanType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"_zapPaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"_zapPathLength\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"paths\",\"type\":\"tuple[3]\"},{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"routes\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"routeParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"enum IBaseLeverage.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"poolCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.MultipSwapPath[3]\",\"name\":\"reversePaths\",\"type\":\"tuple[3]\"},{\"internalType\":\"uint256\",\"name\":\"pathLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseLeverage.SwapInfo\",\"name\":\"_swapInfo\",\"type\":\"tuple\"}],\"name\":\"zapLeverageWithFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrvYearnVaultLeverage", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1660", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3f3919a0516ff2a2b7dc477f58a0a0018a6e29f0c7cc67ede551a5570e9dfb10"}