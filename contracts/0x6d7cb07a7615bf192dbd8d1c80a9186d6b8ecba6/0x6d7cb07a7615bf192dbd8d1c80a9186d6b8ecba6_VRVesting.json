{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: vesting.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract VRVesting is Ownable {\r\n    uint48 public constant HUNDRED_PERCENT = 1e6;\r\n\r\n    struct User {\r\n        uint120 amount;\r\n        uint16 vestingRoundId;\r\n        uint120 claimed;\r\n    }\r\n\r\n    struct VestingRound { \r\n        uint48 linearVestingStart;\r\n        uint48 linearVestingEnd;\r\n        uint48[] unlockTimestamps;\r\n        uint48[] unlockPercentages;\r\n    }\r\n\r\n    IERC20 public token;\r\n    uint public vestingRoundCount;\r\n    mapping(address => User) public users;\r\n    mapping(uint => VestingRound) vestingRounds;\r\n\r\n    event Claim(address user, uint amount);\r\n    event AddVestingRound(uint id, uint48 linearVestingStart, uint48 linearVestingEnd, uint48[] unlockTimestamps, uint48[] unlockPercentages);\r\n    event AddWallets(address[] wallets, uint120[] amounts, uint16[] vestingRoundIds);\r\n    event DeleteWallets(address[] wallets);\r\n\r\n    constructor(IERC20 _token) Ownable(msg.sender) {\r\n        token = _token;\r\n    }\r\n\r\n    // ======================= OWNER FUNCTIONS ======================= //\r\n\r\n    function addVestingRound(\r\n        uint48 linearVestingStart,\r\n        uint48 linearVestingEnd,\r\n        uint48[] calldata unlockTimestamps,\r\n        uint48[] calldata unlockPercentages\r\n    ) external onlyOwner {\r\n        if (linearVestingStart > 0) {\r\n            require(unlockTimestamps.length == 0, \"unlockTimestamps not empty\");\r\n            require(unlockPercentages.length == 0, \"unlockPercentages not empty\");\r\n            require(linearVestingEnd > linearVestingStart, \"end > start timestamp\");\r\n        } else {\r\n            require(linearVestingEnd == 0, \"linearVestingEnd not zero\");\r\n            require(unlockTimestamps.length == unlockPercentages.length, \"different array lengths\");\r\n            \r\n            for (uint i = 1; i < unlockTimestamps.length; i++) {\r\n                require(unlockTimestamps[i] > unlockTimestamps[i - 1], \"invalid unlockTimestamps\");\r\n            }\r\n\r\n            uint48 unlockPercentagesSum = 0;\r\n            for (uint i = 0; i < unlockPercentages.length; i++) {\r\n                unlockPercentagesSum += unlockPercentages[i];\r\n            } \r\n            require(unlockPercentagesSum == HUNDRED_PERCENT, \"unlockPercentages sum not 100%\");\r\n        }\r\n\r\n        vestingRounds[vestingRoundCount++] = VestingRound(\r\n            linearVestingStart,\r\n            linearVestingEnd,\r\n            unlockTimestamps,\r\n            unlockPercentages\r\n        );\r\n\r\n        emit AddVestingRound(vestingRoundCount - 1, linearVestingStart, linearVestingEnd, unlockTimestamps, unlockPercentages);\r\n    }\r\n\r\n    function addWallets(\r\n        address[] calldata wallets,\r\n        uint120[] calldata amounts,\r\n        uint16[] calldata vestingRoundIds,\r\n        bool applyDecimals\r\n    ) external onlyOwner {\r\n        require(wallets.length == amounts.length, \"different array lengths\");\r\n        require(amounts.length == vestingRoundIds.length, \"different array lengths\");\r\n\r\n        for (uint i; i < wallets.length; i++) {\r\n            require(users[wallets[i]].amount == 0, \"whitelisted already\");\r\n            require(vestingRoundIds[i] < vestingRoundCount, \"invalid vestingRoundId\");\r\n\r\n            uint120 amount = amounts[i];\r\n            if (applyDecimals) {\r\n                amount *= 1e18;\r\n            }\r\n\r\n            users[wallets[i]] = User(\r\n                amount,\r\n                vestingRoundIds[i],\r\n                0\r\n            );\r\n        }\r\n\r\n        emit AddWallets(wallets, amounts, vestingRoundIds);\r\n    }\r\n\r\n    function deleteWallets(\r\n        address[] calldata wallets\r\n    ) external onlyOwner {\r\n        for (uint i; i < wallets.length; i++) {\r\n            delete users[wallets[i]];\r\n        }\r\n\r\n        emit DeleteWallets(wallets);\r\n    }\r\n\r\n    // ======================= EXTERNAL FUNCTIONS ======================= //\r\n\r\n    function claim() external {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint48 vestingStart = getVestingStart(user.vestingRoundId);\r\n\r\n        require(user.amount > 0, \"not whitelisted\");\r\n        require(block.timestamp > vestingStart, \"vesting not started\");\r\n        require(user.claimed < user.amount, \"claimed all\");\r\n\r\n        uint claimable = getClaimable(msg.sender);\r\n\r\n        user.claimed += uint120(claimable);\r\n        token.transfer(msg.sender, claimable);\r\n\r\n        emit Claim(msg.sender, claimable);\r\n    }\r\n\r\n    // ======================= VIEW FUNCTIONS ======================= //\r\n\r\n    function getVestingStart(uint vestingRoundId) public view returns (uint48) {\r\n        VestingRound storage vestingRound = vestingRounds[vestingRoundId];\r\n\r\n        if (vestingRound.linearVestingStart > 0) {\r\n            return vestingRound.linearVestingStart;\r\n        } else {\r\n            return vestingRound.unlockTimestamps[0];\r\n        }\r\n    }\r\n\r\n    function getClaimable(\r\n        address wallet\r\n    ) public view returns (uint) {\r\n        User storage user = users[wallet];\r\n        VestingRound storage vestingRound = vestingRounds[user.vestingRoundId];\r\n\r\n        if (vestingRound.linearVestingStart > 0) {\r\n            if (block.timestamp > vestingRound.linearVestingEnd) {\r\n                return user.amount - user.claimed;\r\n            } else {\r\n                return uint(user.amount) * (block.timestamp - vestingRound.linearVestingStart) / (vestingRound.linearVestingEnd - vestingRound.linearVestingStart) - user.claimed;\r\n            }\r\n        } else {\r\n            uint48 cumulativePercentage = 0;\r\n            for (uint i; i < vestingRound.unlockTimestamps.length; i++) {\r\n                if (vestingRound.unlockTimestamps[i] > block.timestamp) {\r\n                    break;\r\n                }\r\n                cumulativePercentage += vestingRound.unlockPercentages[i];\r\n            }\r\n\r\n            return uint(user.amount) * cumulativePercentage / HUNDRED_PERCENT - user.claimed;\r\n        }\r\n    }\r\n\r\n    function getVestingRound(\r\n        uint vestingRoundId\r\n    ) external view returns (VestingRound memory vestingRound) {\r\n        return vestingRounds[vestingRoundId];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"linearVestingStart\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"linearVestingEnd\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48[]\",\"name\":\"unlockTimestamps\",\"type\":\"uint48[]\"},{\"indexed\":false,\"internalType\":\"uint48[]\",\"name\":\"unlockPercentages\",\"type\":\"uint48[]\"}],\"name\":\"AddVestingRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint120[]\",\"name\":\"amounts\",\"type\":\"uint120[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"vestingRoundIds\",\"type\":\"uint16[]\"}],\"name\":\"AddWallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"DeleteWallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"linearVestingStart\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"linearVestingEnd\",\"type\":\"uint48\"},{\"internalType\":\"uint48[]\",\"name\":\"unlockTimestamps\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"unlockPercentages\",\"type\":\"uint48[]\"}],\"name\":\"addVestingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint120[]\",\"name\":\"amounts\",\"type\":\"uint120[]\"},{\"internalType\":\"uint16[]\",\"name\":\"vestingRoundIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"applyDecimals\",\"type\":\"bool\"}],\"name\":\"addWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"deleteWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingRoundId\",\"type\":\"uint256\"}],\"name\":\"getVestingRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"linearVestingStart\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"linearVestingEnd\",\"type\":\"uint48\"},{\"internalType\":\"uint48[]\",\"name\":\"unlockTimestamps\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48[]\",\"name\":\"unlockPercentages\",\"type\":\"uint48[]\"}],\"internalType\":\"struct VRVesting.VestingRound\",\"name\":\"vestingRound\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingRoundId\",\"type\":\"uint256\"}],\"name\":\"getVestingStart\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"amount\",\"type\":\"uint120\"},{\"internalType\":\"uint16\",\"name\":\"vestingRoundId\",\"type\":\"uint16\"},{\"internalType\":\"uint120\",\"name\":\"claimed\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingRoundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VRVesting", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007d5121505149065b562c789a0145ed750e6e8cdd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b14e88903238b3294428ae1712ac3ecf471e5dd5a8f4a6d0833df928f5fb1c6d"}