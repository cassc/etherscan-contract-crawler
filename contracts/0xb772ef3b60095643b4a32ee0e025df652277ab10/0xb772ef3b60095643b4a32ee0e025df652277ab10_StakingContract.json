{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ncontract StakingContract {\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        bool active;\r\n    }\r\n\r\n    address public tokenAddress;\r\n    mapping(address => Stake) public stakes;\r\n    address public owner;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount, uint256 reward);\r\n    event TokensDeposited(uint256 amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenAddress) {\r\n        tokenAddress = _tokenAddress;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function stake(uint256 _amount) external {\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n        require(stakes[msg.sender].active == false, \"Already staked\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(msg.sender) >= _amount, \"Insufficient balance\");\r\n        require(token.allowance(msg.sender, address(this)) >= _amount, \"Insufficient allowance\");\r\n\r\n        require(token.transferFrom(msg.sender, address(this), _amount), \"Failed to transfer tokens\");\r\n\r\n        stakes[msg.sender] = Stake(_amount, block.timestamp, true);\r\n\r\n        emit Staked(msg.sender, _amount);\r\n    }\r\n\r\n    function unstake() external {\r\n        require(stakes[msg.sender].active == true, \"No active stake\");\r\n\r\n        Stake storage userStake = stakes[msg.sender];\r\n        require(block.timestamp >= userStake.startTime + 30 days, \"Stake duration not reached\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n\r\n        uint256 reward = userStake.amount / 100; // 1% of the staked amount\r\n        require(token.transfer(msg.sender, userStake.amount + reward), \"Failed to transfer tokens\");\r\n\r\n        delete stakes[msg.sender];\r\n\r\n        emit Unstaked(msg.sender, userStake.amount, reward);\r\n    }\r\n\r\n    function depositTokens(uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.transferFrom(msg.sender, address(this), _amount), \"Failed to deposit tokens\");\r\n\r\n        emit TokensDeposited(_amount);\r\n    }\r\n\r\n    function getStakeAmount(address _user) external view returns (uint256) {\r\n        return stakes[_user].amount;\r\n    }\r\n\r\n    function getStakeStartTime(address _user) external view returns (uint256) {\r\n        return stakes[_user].startTime;\r\n    }\r\n\r\n    function isStakeActive(address _user) external view returns (bool) {\r\n        return stakes[_user].active;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isStakeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000332679057b9e8b541993d658069543f7adfdab93", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1c1632a1941945a1e72ee5109e586ec0278489c33ffefd6c9928914c41f20a9"}