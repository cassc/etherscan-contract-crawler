{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Dependencies/Auth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {Authority} from \\\"./Authority.sol\\\";\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n\\n    constructor(address _owner, Authority _authority) {\\n        owner = _owner;\\n        authority = _authority;\\n\\n        emit OwnershipTransferred(msg.sender, _owner);\\n        emit AuthorityUpdated(msg.sender, _authority);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"Auth: UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return\\n            (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) ||\\n            user == owner;\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/Authority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(address user, address target, bytes4 functionSig) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/IRolesAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/// @notice Role based Authority that supports up to 256 roles.\\n/// @author BadgerDAO\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\\ninterface IRolesAuthority {\\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\\n\\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\\n    event CapabilityBurned(address indexed target, bytes4 indexed functionSig);\\n\\n    event RoleCapabilityUpdated(\\n        uint8 indexed role,\\n        address indexed target,\\n        bytes4 indexed functionSig,\\n        bool enabled\\n    );\\n\\n    enum CapabilityFlag {\\n        None,\\n        Public,\\n        Burned\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/RolesAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {IRolesAuthority} from \\\"./IRolesAuthority.sol\\\";\\nimport {Auth, Authority} from \\\"./Auth.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/// @notice Role based Authority that supports up to 256 roles.\\n/// @author BadgerDAO\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\\ncontract RolesAuthority is IRolesAuthority, Auth, Authority {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLE/USER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    EnumerableSet.AddressSet internal users;\\n    EnumerableSet.AddressSet internal targets;\\n    mapping(address => EnumerableSet.Bytes32Set) internal enabledFunctionSigsByTarget;\\n\\n    EnumerableSet.Bytes32Set internal enabledFunctionSigsPublic;\\n\\n    mapping(address => bytes32) public getUserRoles;\\n\\n    mapping(address => mapping(bytes4 => CapabilityFlag)) public capabilityFlag;\\n\\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\\n\\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\\n    }\\n\\n    function doesRoleHaveCapability(\\n        uint8 role,\\n        address target,\\n        bytes4 functionSig\\n    ) public view virtual returns (bool) {\\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\\n    }\\n\\n    function isPublicCapability(address target, bytes4 functionSig) public view returns (bool) {\\n        return capabilityFlag[target][functionSig] == CapabilityFlag.Public;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           AUTHORIZATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n        @notice A user can call a given function signature on a given target address if:\\n            - The capability has not been burned\\n            - That capability is public, or the user has a role that has been granted the capability to call the function\\n     */\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) public view virtual override returns (bool) {\\n        CapabilityFlag flag = capabilityFlag[target][functionSig];\\n\\n        if (flag == CapabilityFlag.Burned) {\\n            return false;\\n        } else if (flag == CapabilityFlag.Public) {\\n            return true;\\n        } else {\\n            return bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                   ROLE CAPABILITY CONFIGURATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Set a capability flag as public, meaning any account can call it. Or revoke this capability.\\n    /// @dev A capability cannot be made public if it has been burned.\\n    function setPublicCapability(\\n        address target,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        require(\\n            capabilityFlag[target][functionSig] != CapabilityFlag.Burned,\\n            \\\"RolesAuthority: Capability Burned\\\"\\n        );\\n\\n        if (enabled) {\\n            capabilityFlag[target][functionSig] = CapabilityFlag.Public;\\n        } else {\\n            capabilityFlag[target][functionSig] = CapabilityFlag.None;\\n        }\\n\\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\\n    }\\n\\n    /// @notice Grant a specified role the ability to call a function on a target.\\n    /// @notice Has no effect\\n    function setRoleCapability(\\n        uint8 role,\\n        address target,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        if (enabled) {\\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\\n            enabledFunctionSigsByTarget[target].add(bytes32(functionSig));\\n\\n            if (!targets.contains(target)) {\\n                targets.add(target);\\n            }\\n        } else {\\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\\n\\n            // If no role exist for this target & functionSig, mark it as disabled\\n            if (getRolesWithCapability[target][functionSig] == bytes32(0)) {\\n                enabledFunctionSigsByTarget[target].remove(bytes32(functionSig));\\n            }\\n\\n            // If no enabled function signatures exist for this target, remove target\\n            if (enabledFunctionSigsByTarget[target].length() == 0) {\\n                targets.remove(target);\\n            }\\n        }\\n\\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\\n    }\\n\\n    /// @notice Permanently burns a capability for a target.\\n    function burnCapability(address target, bytes4 functionSig) public virtual requiresAuth {\\n        require(\\n            capabilityFlag[target][functionSig] != CapabilityFlag.Burned,\\n            \\\"RolesAuthority: Capability Burned\\\"\\n        );\\n        capabilityFlag[target][functionSig] = CapabilityFlag.Burned;\\n\\n        emit CapabilityBurned(target, functionSig);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       USER ROLE ASSIGNMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setUserRole(address user, uint8 role, bool enabled) public virtual requiresAuth {\\n        if (enabled) {\\n            getUserRoles[user] |= bytes32(1 << role);\\n\\n            if (!users.contains(user)) {\\n                users.add(user);\\n            }\\n        } else {\\n            getUserRoles[user] &= ~bytes32(1 << role);\\n\\n            // Remove user if no more roles\\n            if (getUserRoles[user] == bytes32(0)) {\\n                users.remove(user);\\n            }\\n        }\\n\\n        emit UserRoleUpdated(user, role, enabled);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {EnumerableSet} from \\\"./Dependencies/EnumerableSet.sol\\\";\\nimport {Authority} from \\\"./Dependencies/Auth.sol\\\";\\nimport {RolesAuthority} from \\\"./Dependencies/RolesAuthority.sol\\\";\\n\\n/// @notice Role based Authority that supports up to 256 roles.\\n/// @notice We have taken the tradeoff of additional storage usage for easier readabiliy without using off-chain / indexing services.\\n/// @author BadgerDAO Expanded from Solmate RolesAuthority\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\\ncontract Governor is RolesAuthority {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 NO_ROLES = bytes32(0);\\n\\n    struct Role {\\n        uint8 roleId;\\n        string roleName;\\n    }\\n\\n    struct Capability {\\n        address target;\\n        bytes4 functionSig;\\n        uint8[] roles;\\n    }\\n\\n    mapping(uint8 => string) internal roleNames;\\n\\n    event RoleNameSet(uint8 indexed role, string indexed name);\\n\\n    /// @notice The contract constructor initializes RolesAuthority with the given owner.\\n    /// @param _owner The address of the owner, who gains all permissions by default.\\n    constructor(address _owner) RolesAuthority(_owner, Authority(address(this))) {}\\n\\n    /// @notice Returns a list of users that are assigned a specific role.\\n    /// @dev This function searches all users and checks if they are assigned the given role.\\n    /// @dev Intended for off-chain utility only due to inefficiency.\\n    /// @param role The role ID to find users for.\\n    /// @return usersWithRole An array of addresses that are assigned the given role.\\n    function getUsersByRole(uint8 role) external view returns (address[] memory usersWithRole) {\\n        // Search over all users: O(n) * 2\\n        uint256 count;\\n        for (uint256 i = 0; i < users.length(); i++) {\\n            address user = users.at(i);\\n            bool _canCall = doesUserHaveRole(user, role);\\n            if (_canCall) {\\n                count += 1;\\n            }\\n        }\\n        if (count > 0) {\\n            uint256 j = 0;\\n            usersWithRole = new address[](count);\\n            address[] memory _usrs = users.values();\\n            for (uint256 i = 0; i < _usrs.length; i++) {\\n                address user = _usrs[i];\\n                bool _canCall = doesUserHaveRole(user, role);\\n                if (_canCall) {\\n                    usersWithRole[j] = user;\\n                    j++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns a list of roles that an address has.\\n    /// @dev This function searches all roles and checks if they are assigned to the given user.\\n    /// @dev Intended for off-chain utility only due to inefficiency.\\n    /// @param user The address of the user.\\n    /// @return rolesForUser An array of role IDs that the user has.\\n    function getRolesForUser(address user) external view returns (uint8[] memory rolesForUser) {\\n        // Enumerate over all possible roles and check if enabled\\n        uint256 count;\\n        for (uint8 i = 0; i <= type(uint8).max; ) {\\n            if (doesUserHaveRole(user, i)) {\\n                count += 1;\\n            }\\n            if (i < type(uint8).max) {\\n                i = i + 1;\\n            } else {\\n                break;\\n            }\\n        }\\n        if (count > 0) {\\n            uint256 j = 0;\\n            rolesForUser = new uint8[](count);\\n            for (uint8 i = 0; i <= type(uint8).max; ) {\\n                if (doesUserHaveRole(user, i)) {\\n                    rolesForUser[j] = i;\\n                    j++;\\n                }\\n                if (i < type(uint8).max) {\\n                    i = i + 1;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Converts a byte map representation to an array of role IDs.\\n    /// @param byteMap The bytes32 value encoding the roles.\\n    /// @return roleIds An array of role IDs extracted from the byte map.\\n    function getRolesFromByteMap(bytes32 byteMap) public pure returns (uint8[] memory roleIds) {\\n        uint256 count;\\n        for (uint8 i = 0; i <= type(uint8).max; ) {\\n            bool roleEnabled = (uint256(byteMap >> i) & 1) != 0;\\n            if (roleEnabled) {\\n                count += 1;\\n            }\\n            if (i < type(uint8).max) {\\n                i = i + 1;\\n            } else {\\n                break;\\n            }\\n        }\\n        if (count > 0) {\\n            uint256 j = 0;\\n            roleIds = new uint8[](count);\\n            for (uint8 i = 0; i <= type(uint8).max; ) {\\n                bool roleEnabled = (uint256(byteMap >> i) & 1) != 0;\\n                if (roleEnabled) {\\n                    roleIds[j] = i;\\n                    j++;\\n                }\\n                if (i < type(uint8).max) {\\n                    i = i + 1;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Converts an array of role IDs to a byte map representation.\\n    /// @param roleIds An array of role IDs.\\n    /// @return A bytes32 value encoding the roles.\\n    function getByteMapFromRoles(uint8[] memory roleIds) public pure returns (bytes32) {\\n        bytes32 _data;\\n        for (uint256 i = 0; i < roleIds.length; i++) {\\n            _data |= bytes32(1 << uint256(roleIds[i]));\\n        }\\n        return _data;\\n    }\\n\\n    /// @notice Retrieves all function signatures enabled for a target address.\\n    /// @param _target The target contract address.\\n    /// @return _funcs An array of function signatures enabled for the target.\\n    function getEnabledFunctionsInTarget(\\n        address _target\\n    ) public view returns (bytes4[] memory _funcs) {\\n        bytes32[] memory _sigs = enabledFunctionSigsByTarget[_target].values();\\n        if (_sigs.length > 0) {\\n            _funcs = new bytes4[](_sigs.length);\\n            for (uint256 i = 0; i < _sigs.length; ++i) {\\n                _funcs[i] = bytes4(_sigs[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Retrieves the name associated with a role ID\\n    /// @param role The role ID\\n    /// @return roleName The name of the role\\n    function getRoleName(uint8 role) external view returns (string memory roleName) {\\n        return roleNames[role];\\n    }\\n\\n    /// @notice Sets the name for a specific role ID for better readability\\n    /// @dev This function requires authorization\\n    /// @param role The role ID\\n    /// @param roleName The name to assign to the role\\n    function setRoleName(uint8 role, string memory roleName) external requiresAuth {\\n        roleNames[role] = roleName;\\n\\n        emit RoleNameSet(role, roleName);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"CapabilityBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"PublicCapabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RoleCapabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"RoleNameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UserRoleUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"burnCapability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"capabilityFlag\",\"outputs\":[{\"internalType\":\"enum IRolesAuthority.CapabilityFlag\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"doesRoleHaveCapability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"doesUserHaveRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"roleIds\",\"type\":\"uint8[]\"}],\"name\":\"getByteMapFromRoles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getEnabledFunctionsInTarget\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_funcs\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getRoleName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRolesForUser\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"rolesForUser\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"byteMap\",\"type\":\"bytes32\"}],\"name\":\"getRolesFromByteMap\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"roleIds\",\"type\":\"uint8[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"getRolesWithCapability\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getUsersByRole\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"usersWithRole\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"isPublicCapability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPublicCapability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRoleCapability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"setRoleName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setUserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Governor", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b3d3b6482fb50c82aa042a710775c72dfa23f7b4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}