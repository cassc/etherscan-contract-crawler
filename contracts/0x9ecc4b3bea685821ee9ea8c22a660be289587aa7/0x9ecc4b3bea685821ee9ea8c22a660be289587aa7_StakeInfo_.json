{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/libs/StakeInfo_.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n// mapping: NFT tokenId => StakeInfo_.sol (used in tokenURI generation + other contracts)\\n// StakeInfo_.sol encoded as:\\n//      term (uint16)\\n//      | maturityTs (uint64)\\n//      | amount (uint128) TODO: storing here vs. separately as full uint256 ???\\n//      | apy (uint16)\\n//      | rarityScore (uint16)\\n//      | rarityBits (uint16):\\n//          [15] tokenIdIsPrime\\n//          [14] tokenIdIsFib\\n//          [14] blockIdIsPrime\\n//          [13] blockIdIsFib\\n//          [0-13] ...\\nlibrary StakeInfo_ {\\n    /**\\n        @dev helper to convert Bool to U256 type and make compiler happy\\n     */\\n    // TODO: remove if not needed ???\\n    function toU256(bool x) internal pure returns (uint256 r) {\\n        assembly {\\n            r := x\\n        }\\n    }\\n\\n    /**\\n        @dev encodes StakeInfo_.sol record from its props\\n     */\\n    function encodeStakeInfo(\\n        uint256 term,\\n        uint256 maturityTs,\\n        uint256 amount,\\n        uint256 apy,\\n        uint256 rarityScore,\\n        uint256 rarityBits\\n    ) public pure returns (uint256 info) {\\n        info = info | (rarityBits & 0xFFFF);\\n        info = info | ((rarityScore & 0xFFFF) << 16);\\n        info = info | ((apy & 0xFFFF) << 32);\\n        info = info | ((amount & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) << 48);\\n        info = info | ((maturityTs & 0xFFFFFFFFFFFFFFFF) << 176);\\n        info = info | ((term & 0xFFFF) << 240);\\n    }\\n\\n    /**\\n        @dev decodes StakeInfo_.sol record and extracts all of its props\\n     */\\n    function decodeStakeInfo(\\n        uint256 info\\n    )\\n        public\\n        pure\\n        returns (uint256 term, uint256 maturityTs, uint256 amount, uint256 apy, uint256 rarityScore, uint256 rarityBits)\\n    {\\n        term = uint16(info >> 240);\\n        maturityTs = uint64(info >> 176);\\n        amount = uint128(info >> 48);\\n        apy = uint16(info >> 32);\\n        rarityScore = uint16(info >> 16);\\n        rarityBits = uint16(info);\\n    }\\n\\n    /**\\n        @dev extracts `term` prop from encoded StakeInfo_.sol\\n     */\\n    function getTerm(uint256 info) public pure returns (uint256 term) {\\n        (term, , , , , ) = decodeStakeInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `maturityTs` prop from encoded StakeInfo_.sol\\n     */\\n    function getMaturityTs(uint256 info) public pure returns (uint256 maturityTs) {\\n        (, maturityTs, , , , ) = decodeStakeInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `amount` prop from encoded StakeInfo_.sol\\n     */\\n    function getAmount(uint256 info) public pure returns (uint256 amount) {\\n        (, , amount, , , ) = decodeStakeInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `APY` prop from encoded StakeInfo_.sol\\n     */\\n    function getAPY(uint256 info) public pure returns (uint256 apy) {\\n        (, , , apy, , ) = decodeStakeInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `rarityScore` prop from encoded StakeInfo_.sol\\n     */\\n    function getRarityScore(uint256 info) public pure returns (uint256 rarityScore) {\\n        (, , , , rarityScore, ) = decodeStakeInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `rarityBits` prop from encoded StakeInfo_.sol\\n     */\\n    function getRarityBits(uint256 info) public pure returns (uint256 rarityBits) {\\n        (, , , , , rarityBits) = decodeStakeInfo(info);\\n    }\\n\\n    /**\\n        @dev decodes boolean flags from `rarityBits` prop\\n     */\\n    function decodeRarityBits(\\n        uint256 rarityBits\\n    ) public pure returns (bool isPrime, bool isFib, bool blockIsPrime, bool blockIsFib) {\\n        isPrime = rarityBits & 0x0008 > 0;\\n        isFib = rarityBits & 0x0004 > 0;\\n        blockIsPrime = rarityBits & 0x0002 > 0;\\n        blockIsFib = rarityBits & 0x0001 > 0;\\n    }\\n\\n    /**\\n        @dev encodes boolean flags to `rarityBits` prop\\n     */\\n    function encodeRarityBits(\\n        bool isPrime,\\n        bool isFib,\\n        bool blockIsPrime,\\n        bool blockIsFib\\n    ) public pure returns (uint256 rarityBits) {\\n        rarityBits = rarityBits | ((toU256(isPrime) << 3) & 0xFFFF);\\n        rarityBits = rarityBits | ((toU256(isFib) << 2) & 0xFFFF);\\n        rarityBits = rarityBits | ((toU256(blockIsPrime) << 1) & 0xFFFF);\\n        rarityBits = rarityBits | ((toU256(blockIsFib)) & 0xFFFF);\\n    }\\n\\n    /**\\n        @dev extracts `rarityBits` prop from encoded StakeInfo_.sol\\n     */\\n    function getRarityBitsDecoded(\\n        uint256 info\\n    ) public pure returns (bool isPrime, bool isFib, bool blockIsPrime, bool blockIsFib) {\\n        (, , , , , uint256 rarityBits) = decodeStakeInfo(info);\\n        (isPrime, isFib, blockIsPrime, blockIsFib) = decodeRarityBits(rarityBits);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rarityBits\",\"type\":\"uint256\"}],\"name\":\"decodeRarityBits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPrime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFib\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blockIsPrime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blockIsFib\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"decodeStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarityScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarityBits\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPrime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFib\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blockIsPrime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blockIsFib\",\"type\":\"bool\"}],\"name\":\"encodeRarityBits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rarityBits\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarityScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarityBits\",\"type\":\"uint256\"}],\"name\":\"encodeStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getMaturityTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getRarityBits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rarityBits\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getRarityBitsDecoded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPrime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFib\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blockIsPrime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blockIsFib\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getRarityScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rarityScore\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "StakeInfo_", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}