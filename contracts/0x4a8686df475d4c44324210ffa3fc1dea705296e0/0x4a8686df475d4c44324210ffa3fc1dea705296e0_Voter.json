{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/wombat-governance/gauge/Voter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\nimport '../interfaces/IBribe.sol';\\nimport '../interfaces/IVoter.sol';\\n\\ninterface IVe {\\n    function vote(address user, int256 voteDelta) external;\\n}\\n\\n/// Voter can handle gauge voting. WOM rewards are distributed to different gauges (MasterWombat->LpToken pair)\\n/// according to the base allocation & voting weights.\\n///\\n/// veWOM holders can participate in gauge voting to determine `voteAllocation()` of the WOM emission. They can\\n///  allocate their vote (1 veWOM = 1 vote) to one or more gauges. WOM accumulation to a gauge is proportional\\n/// to the amount of vote it receives.\\n///\\n/// Real-time WOM accumulation and epoch-based WOM distribution:\\n/// Voting gauges accumulates WOM seconds by seconds according to the voting weight. When a user applies new\\n/// allocation for their votes, accumulation rate of WOM of the gauge updates immediately. Note that only whitelisted\\n/// gauges are able to accumulate WOM from users' votes.\\n/// Accumulated WOM is distributed to LP in the next epoch at an even rate. 1 epoch last for 7 days.\\n///\\n/// Base Allocation:\\n/// `baseAllocation` of WOM emissions is distributed to gauges according to the allocation by `owner`.\\n/// Other WOM emissions are deteremined by `votes` of veWOM holders.\\n///\\n/// Flow to distribute reward:\\n/// 1. `Voter.distribute(lpToken)` is called\\n/// 2. WOM index (`baseIndex` and `voteIndex`) is updated and corresponding WOM accumulated over this period (`GaugeInfo.claimable`)\\n///    is updated.\\n/// 3. At the beginning of each epoch, `GaugeInfo.claimable` amount of WOM is sent to the respective gauge\\n///    via `MasterWombat.notifyRewardAmount(IERC20 _lpToken, uint256 _amount)`\\n/// 4. MasterWombat will update the corresponding `pool.rewardRate` and `pool.periodFinish`\\n///\\n/// Bribe\\n/// Bribe is natively supported by `Voter`. Third Party protocols can bribe to attract more votes from veWOM holders\\n/// to increase WOM emissions to their tokens.\\n///\\n/// Flow of bribe:\\n/// 1. When users vote/unvote, `bribe.onVote` is called. The bribe contract works similar to `MultiRewarderPerSec`.\\n///\\n/// Note: This should also works with boosted pool. But it doesn't work with interest rate model\\n/// Note 2: Please refer to the comment of MasterWombatV3.notifyRewardAmount for front-running risk\\ncontract Voter is IVoter, Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    struct GaugeInfo {\\n        uint104 supplyBaseIndex; // 19.12 fixed point. distributed reward per alloc point\\n        uint104 supplyVoteIndex; // 19.12 fixed point. distributed reward per vote weight\\n        uint40 nextEpochStartTime;\\n        uint128 claimable; // 20.18 fixed point. Rewards pending distribution in the next epoch\\n        bool whitelist;\\n        IGauge gaugeManager;\\n        IBribe bribe; // address of bribe\\n    }\\n\\n    uint256 internal constant ACC_TOKEN_PRECISION = 1e12;\\n    uint256 internal constant EPOCH_DURATION = 7 days;\\n\\n    IERC20 public wom;\\n    IVe public veWom;\\n    IERC20[] public lpTokens; // all LP tokens\\n\\n    // emission related storage\\n    uint40 public lastRewardTimestamp; // last timestamp to count\\n    uint104 public baseIndex; // 19.12 fixed point. Accumulated reward per alloc point\\n    uint104 public voteIndex; // 19.12 fixed point. Accumulated reward per vote weight\\n\\n    uint128 public totalWeight;\\n    uint128 public totalAllocPoint;\\n\\n    uint40 public firstEpochStartTime;\\n    uint88 public womPerSec; // 8.18 fixed point\\n    uint16 public baseAllocation; // (e.g. 300 for 30%)\\n\\n    mapping(IERC20 => GaugeWeight) public override weights; // lpToken => gauge weight\\n    mapping(address => mapping(IERC20 => uint256)) public override votes; // user address => lpToken => votes\\n    mapping(IERC20 => GaugeInfo) public override infos; // lpToken => GaugeInfo\\n\\n    address public bribeFactory;\\n\\n    event UpdateEmissionPartition(uint256 baseAllocation, uint256 votePartition);\\n    event UpdateVote(address user, IERC20 lpToken, uint256 amount);\\n    event DistributeReward(IERC20 lpToken, uint256 amount);\\n\\n    /// @dev Note: set bribe factory after initialization\\n    function initialize(\\n        IERC20 _wom,\\n        IVe _veWom,\\n        uint88 _womPerSec,\\n        uint40 _startTimestamp,\\n        uint40 _firstEpochStartTime,\\n        uint16 _baseAllocation\\n    ) external initializer {\\n        require(_firstEpochStartTime >= block.timestamp, 'invalid _firstEpochStartTime');\\n        require(address(_wom) != address(0), 'wom address cannot be zero');\\n        require(address(_veWom) != address(0), 'veWom address cannot be zero');\\n        require(_baseAllocation <= 1000);\\n        require(_womPerSec <= 10000e18);\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        wom = _wom;\\n        veWom = _veWom;\\n        womPerSec = _womPerSec;\\n        lastRewardTimestamp = _startTimestamp;\\n        firstEpochStartTime = _firstEpochStartTime;\\n        baseAllocation = _baseAllocation;\\n    }\\n\\n    /// @dev this check save more gas than a modifier\\n    function _checkGaugeExist(IERC20 _lpToken) internal view {\\n        require(address(infos[_lpToken].gaugeManager) != address(0), 'Voter: gaugeManager not exist');\\n    }\\n\\n    /// @notice returns LP tokens length\\n    function lpTokenLength() external view returns (uint256) {\\n        return lpTokens.length;\\n    }\\n\\n    /// @notice getter function to return vote of a LP token for a user\\n    function getUserVotes(address _user, IERC20 _lpToken) external view returns (uint256) {\\n        return votes[_user][_lpToken];\\n    }\\n\\n    /// @notice Vote and unvote WOM emission for LP tokens.\\n    /// User can vote/unvote a un-whitelisted pool. But no WOM will be emitted.\\n    /// Bribes are also distributed by the Bribe contract.\\n    /// Amount of vote should be checked by veWom.vote().\\n    /// This can also used to distribute bribes when _deltas are set to 0\\n    /// @param _lpVote address to LP tokens to vote\\n    /// @param _deltas change of vote for each LP tokens\\n    function vote(\\n        IERC20[] calldata _lpVote,\\n        int256[] calldata _deltas\\n    ) external nonReentrant returns (uint256[][] memory bribeRewards) {\\n        // 1. call _updateFor() to update WOM emission\\n        // 2. update related lpToken weight and total lpToken weight\\n        // 3. update used voting power and ensure there's enough voting power\\n        // 4. call IBribe.onVote() to update bribes\\n        require(_lpVote.length == _deltas.length, 'voter: array length not equal');\\n\\n        // update voteIndex\\n        _distributeWom();\\n\\n        uint256 voteCnt = _lpVote.length;\\n        int256 voteDelta;\\n\\n        bribeRewards = new uint256[][](voteCnt);\\n\\n        for (uint256 i; i < voteCnt; ++i) {\\n            IERC20 lpToken = _lpVote[i];\\n            _checkGaugeExist(lpToken);\\n\\n            int256 delta = _deltas[i];\\n            uint256 originalWeight = weights[lpToken].voteWeight;\\n            if (delta != 0) {\\n                _updateFor(lpToken);\\n\\n                // update vote and weight\\n                if (delta > 0) {\\n                    // vote\\n                    votes[msg.sender][lpToken] += uint256(delta);\\n                    weights[lpToken].voteWeight = to128(originalWeight + uint256(delta));\\n                    totalWeight += to128(uint256(delta));\\n                } else {\\n                    // unvote\\n                    require(votes[msg.sender][lpToken] >= uint256(-delta), 'voter: vote underflow');\\n                    votes[msg.sender][lpToken] -= uint256(-delta);\\n                    weights[lpToken].voteWeight = to128(originalWeight - uint256(-delta));\\n                    totalWeight -= to128(uint256(-delta));\\n                }\\n\\n                voteDelta += delta;\\n                emit UpdateVote(msg.sender, lpToken, votes[msg.sender][lpToken]);\\n            }\\n\\n            // update bribe\\n            if (address(infos[lpToken].bribe) != address(0)) {\\n                bribeRewards[i] = infos[lpToken].bribe.onVote(msg.sender, votes[msg.sender][lpToken], originalWeight);\\n            }\\n        }\\n\\n        // notice veWom for the new vote, it reverts if vote is invalid\\n        veWom.vote(msg.sender, voteDelta);\\n    }\\n\\n    /// @notice Claim bribes for LP tokens\\n    /// @dev This function looks safe from re-entrancy attack\\n    function claimBribes(IERC20[] calldata _lpTokens) external returns (uint256[][] memory bribeRewards) {\\n        bribeRewards = new uint256[][](_lpTokens.length);\\n        for (uint256 i; i < _lpTokens.length; ++i) {\\n            IERC20 lpToken = _lpTokens[i];\\n            _checkGaugeExist(lpToken);\\n            if (address(infos[lpToken].bribe) != address(0)) {\\n                bribeRewards[i] = infos[lpToken].bribe.onVote(\\n                    msg.sender,\\n                    votes[msg.sender][lpToken],\\n                    weights[lpToken].voteWeight\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev This function looks safe from re-entrancy attack\\n    function distribute(IERC20 _lpToken) external override {\\n        require(msg.sender == address(infos[_lpToken].gaugeManager), 'Caller is not gauge manager');\\n        _checkGaugeExist(_lpToken);\\n        _distributeWom();\\n        _updateFor(_lpToken);\\n\\n        uint256 _claimable = infos[_lpToken].claimable;\\n        // 1. distribute WOM once in each epoch\\n        // 2. In case WOM is not fueled, it should not create DoS\\n        if (\\n            _claimable > 0 &&\\n            block.timestamp >= infos[_lpToken].nextEpochStartTime &&\\n            wom.balanceOf(address(this)) > _claimable\\n        ) {\\n            infos[_lpToken].claimable = 0;\\n            infos[_lpToken].nextEpochStartTime = getNextEpochStartTime();\\n            emit DistributeReward(_lpToken, _claimable);\\n\\n            wom.transfer(address(infos[_lpToken].gaugeManager), _claimable);\\n            infos[_lpToken].gaugeManager.notifyRewardAmount(_lpToken, _claimable);\\n        }\\n    }\\n\\n    /// @notice Update index for accrued WOM\\n    function _distributeWom() internal {\\n        if (block.timestamp <= lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        baseIndex = to104(_getBaseIndex());\\n        voteIndex = to104(_getVoteIndex());\\n        lastRewardTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /// @notice Update `supplyBaseIndex` and `supplyVoteIndex` for the gauge\\n    /// @dev Assumption: gaugeManager exists and is not paused, the caller should verify it\\n    /// @param _lpToken address of the LP token\\n    function _updateFor(IERC20 _lpToken) internal {\\n        // calculate claimable amount before update supplyVoteIndex\\n        infos[_lpToken].claimable = to128(_getClaimable(_lpToken, baseIndex, voteIndex));\\n        infos[_lpToken].supplyBaseIndex = baseIndex;\\n        infos[_lpToken].supplyVoteIndex = voteIndex;\\n    }\\n\\n    /**\\n     * Permisioneed functions\\n     */\\n\\n    /// @notice update the base and vote partition\\n    function setBaseAllocation(uint16 _baseAllocation) external onlyOwner {\\n        require(_baseAllocation <= 1000);\\n        _distributeWom();\\n\\n        emit UpdateEmissionPartition(_baseAllocation, 1000 - _baseAllocation);\\n        baseAllocation = _baseAllocation;\\n    }\\n\\n    function setAllocPoint(IERC20 _lpToken, uint128 _allocPoint) external onlyOwner {\\n        _distributeWom();\\n        _updateFor(_lpToken);\\n        totalAllocPoint = totalAllocPoint - weights[_lpToken].allocPoint + _allocPoint;\\n        weights[_lpToken].allocPoint = _allocPoint;\\n    }\\n\\n    /// @notice Add LP token into the Voter\\n    function add(IGauge _gaugeManager, IERC20 _lpToken, IBribe _bribe) external onlyOwner {\\n        require(infos[_lpToken].whitelist == false, 'voter: already added');\\n        require(address(_gaugeManager) != address(0));\\n        require(address(_lpToken) != address(0));\\n        require(address(infos[_lpToken].gaugeManager) == address(0), 'Voter: gaugeManager is already exist');\\n\\n        infos[_lpToken].whitelist = true;\\n        infos[_lpToken].gaugeManager = _gaugeManager;\\n        infos[_lpToken].bribe = _bribe; // 0 address is allowed\\n        infos[_lpToken].nextEpochStartTime = getNextEpochStartTime();\\n        lpTokens.push(_lpToken);\\n    }\\n\\n    function setWomPerSec(uint88 _womPerSec) external onlyOwner {\\n        require(_womPerSec <= 10000e18, 'reward rate too high'); // in case `voteIndex` overflow\\n        _distributeWom();\\n        womPerSec = _womPerSec;\\n    }\\n\\n    /// @dev to revoke bribe factory, set its address to 0\\n    function setBribeFactory(address _bribeFactory) external onlyOwner {\\n        bribeFactory = _bribeFactory;\\n    }\\n\\n    /// @notice Pause vote emission of WOM tokens for the gauge.\\n    /// Users can still vote/unvote and receive bribes.\\n    function pauseVoteEmission(IERC20 _lpToken) external onlyOwner {\\n        require(infos[_lpToken].whitelist, 'voter: not whitelisted');\\n        _checkGaugeExist(_lpToken);\\n\\n        _distributeWom();\\n        _updateFor(_lpToken);\\n\\n        infos[_lpToken].whitelist = false;\\n    }\\n\\n    /// @notice Resume vote accumulation of WOM tokens for the gauge.\\n    function resumeVoteEmission(IERC20 _lpToken) external onlyOwner {\\n        require(infos[_lpToken].whitelist == false, 'voter: not paused');\\n        _checkGaugeExist(_lpToken);\\n\\n        // catch up supplyVoteIndex\\n        _distributeWom();\\n        _updateFor(_lpToken);\\n\\n        infos[_lpToken].whitelist = true;\\n    }\\n\\n    /// @notice Pause vote accumulation of WOM tokens for all assets\\n    /// Users can still vote/unvote and receive bribes.\\n    function pauseAll() external onlyOwner {\\n        _distributeWom();\\n        uint256 len = lpTokens.length;\\n        for (uint256 i; i < len; i++) {\\n            _updateFor(lpTokens[i]);\\n        }\\n\\n        _pause();\\n    }\\n\\n    /// @notice Resume vote accumulation of WOM tokens for all assets\\n    function resumeAll() external onlyOwner {\\n        _distributeWom();\\n        uint256 len = lpTokens.length;\\n        for (uint256 i; i < len; i++) {\\n            _updateFor(lpTokens[i]);\\n        }\\n\\n        _unpause();\\n    }\\n\\n    /// @notice get gaugeManager address for LP token\\n    function setGauge(IERC20 _lpToken, IGauge _gaugeManager) external onlyOwner {\\n        require(address(_gaugeManager) != address(0));\\n        _checkGaugeExist(_lpToken);\\n\\n        infos[_lpToken].gaugeManager = _gaugeManager;\\n    }\\n\\n    /// @notice get bribe address for LP token\\n    function setBribe(IERC20 _lpToken, IBribe _bribe) external override {\\n        require(\\n            bribeFactory == msg.sender || owner() == msg.sender,\\n            'Voter: caller is not the owner nor the bribe factory'\\n        );\\n        _checkGaugeExist(_lpToken);\\n\\n        infos[_lpToken].bribe = _bribe; // 0 address is allowed\\n    }\\n\\n    /// @notice In case we need to manually migrate WOM funds from Voter\\n    /// Sends all remaining wom from the contract to the owner\\n    function emergencyWomWithdraw() external onlyOwner {\\n        // SafeERC20 is not needed as WOM will revert if transfer fails\\n        wom.transfer(address(msg.sender), wom.balanceOf(address(this)));\\n    }\\n\\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\\n    /// @dev only to be called by owner\\n    function emergencyTokenWithdraw(address token) public onlyOwner {\\n        // send that balance back to owner\\n        if (token == address(0)) {\\n            // is native token\\n            (bool success, ) = msg.sender.call{value: address(this).balance}('');\\n            require(success, 'Transfer failed');\\n        } else {\\n            IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * Read-only functions\\n     */\\n\\n    function voteAllocation() external view returns (uint256) {\\n        return 1000 - baseAllocation;\\n    }\\n\\n    /// @notice Get pending bribes for LP tokens\\n    function pendingBribes(\\n        IERC20[] calldata _lpTokens,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            IERC20[][] memory bribeTokenAddresses,\\n            string[][] memory bribeTokenSymbols,\\n            uint256[][] memory bribeRewards\\n        )\\n    {\\n        bribeTokenAddresses = new IERC20[][](_lpTokens.length);\\n        bribeTokenSymbols = new string[][](_lpTokens.length);\\n        bribeRewards = new uint256[][](_lpTokens.length);\\n        for (uint256 i; i < _lpTokens.length; ++i) {\\n            IERC20 lpToken = _lpTokens[i];\\n            if (address(infos[lpToken].bribe) != address(0)) {\\n                bribeRewards[i] = infos[lpToken].bribe.pendingTokens(_user);\\n                bribeTokenAddresses[i] = infos[lpToken].bribe.rewardTokens();\\n\\n                uint256 len = bribeTokenAddresses[i].length;\\n                bribeTokenSymbols[i] = new string[](len);\\n\\n                for (uint256 j; j < len; ++j) {\\n                    if (address(bribeTokenAddresses[i][j]) == address(0)) {\\n                        bribeTokenSymbols[i][j] = 'BNB';\\n                    } else {\\n                        bribeTokenSymbols[i][j] = IERC20Metadata(address(bribeTokenAddresses[i][j])).symbol();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Amount of pending WOM for the LP token\\n    function pendingWom(IERC20 _lpToken) external view returns (uint256) {\\n        return _getClaimable(_lpToken, _getBaseIndex(), _getVoteIndex());\\n    }\\n\\n    /// @notice Get the start timestamp of the next epoch\\n    function getNextEpochStartTime() public view returns (uint40) {\\n        if (block.timestamp < firstEpochStartTime) {\\n            return firstEpochStartTime;\\n        }\\n\\n        uint256 epochCount = (block.timestamp - firstEpochStartTime) / EPOCH_DURATION;\\n        return uint40(firstEpochStartTime + (epochCount + 1) * EPOCH_DURATION);\\n    }\\n\\n    function _getBaseIndex() internal view returns (uint256) {\\n        if (block.timestamp <= lastRewardTimestamp || totalAllocPoint == 0 || paused()) {\\n            return baseIndex;\\n        }\\n\\n        uint256 secondsElapsed = block.timestamp - lastRewardTimestamp;\\n        // use `max(totalAllocPoint, 1e18)` in case the value overflows uint104\\n        return\\n            baseIndex +\\n            (secondsElapsed * womPerSec * baseAllocation * ACC_TOKEN_PRECISION) /\\n            max(totalAllocPoint, 1e18) /\\n            1000;\\n    }\\n\\n    /// @notice Calculate the latest value of `voteIndex`\\n    function _getVoteIndex() internal view returns (uint256) {\\n        if (block.timestamp <= lastRewardTimestamp || totalWeight == 0 || paused()) {\\n            return voteIndex;\\n        }\\n\\n        uint256 secondsElapsed = block.timestamp - lastRewardTimestamp;\\n        // use `max(totalWeight, 1e18)` in case the value overflows uint104\\n        return\\n            voteIndex +\\n            (secondsElapsed * womPerSec * (1000 - baseAllocation) * ACC_TOKEN_PRECISION) /\\n            max(totalWeight, 1e18) /\\n            1000;\\n    }\\n\\n    /// @notice Calculate the latest amount of `claimable` for a gauge\\n    function _getClaimable(IERC20 _lpToken, uint256 _baseIndex, uint256 _voteIndex) internal view returns (uint256) {\\n        uint256 baseIndexDelta = _baseIndex - infos[_lpToken].supplyBaseIndex;\\n        uint256 _baseShare = (weights[_lpToken].allocPoint * baseIndexDelta) / ACC_TOKEN_PRECISION;\\n\\n        if (!infos[_lpToken].whitelist) {\\n            return infos[_lpToken].claimable + _baseShare;\\n        }\\n\\n        uint256 voteIndexDelta = _voteIndex - infos[_lpToken].supplyVoteIndex;\\n        uint256 _voteShare = (weights[_lpToken].voteWeight * voteIndexDelta) / ACC_TOKEN_PRECISION;\\n\\n        return infos[_lpToken].claimable + _baseShare + _voteShare;\\n    }\\n\\n    function to128(uint256 val) internal pure returns (uint128) {\\n        require(val <= type(uint128).max, 'uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    function to104(uint256 val) internal pure returns (uint104) {\\n        if (val > type(uint104).max) revert('uint104 overflow');\\n        return uint104(val);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wombat-governance/interfaces/IBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/wombat-governance/interfaces/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './IBribe.sol';\\n\\ninterface IGauge {\\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IVoter {\\n    struct GaugeWeight {\\n        uint128 allocPoint;\\n        uint128 voteWeight; // total amount of votes for an LP-token\\n    }\\n\\n    function infos(\\n        IERC20 _lpToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint104 supplyBaseIndex,\\n            uint104 supplyVoteIndex,\\n            uint40 nextEpochStartTime,\\n            uint128 claimable,\\n            bool whitelist,\\n            IGauge gaugeManager,\\n            IBribe bribe\\n        );\\n\\n    // lpToken => weight, equals to sum of votes for a LP token\\n    function weights(IERC20 _lpToken) external view returns (uint128 allocPoint, uint128 voteWeight);\\n\\n    // user address => lpToken => votes\\n    function votes(address _user, IERC20 _lpToken) external view returns (uint256);\\n\\n    function setBribe(IERC20 _lpToken, IBribe _bribe) external;\\n\\n    function distribute(IERC20 _lpToken) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePartition\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateVote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"_gaugeManager\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IBribe\",\"name\":\"_bribe\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAllocation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseIndex\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"}],\"name\":\"claimBribes\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"bribeRewards\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWomWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstEpochStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getUserVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"supplyBaseIndex\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"supplyVoteIndex\",\"type\":\"uint104\"},{\"internalType\":\"uint40\",\"name\":\"nextEpochStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"claimable\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"},{\"internalType\":\"contract IGauge\",\"name\":\"gaugeManager\",\"type\":\"address\"},{\"internalType\":\"contract IBribe\",\"name\":\"bribe\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wom\",\"type\":\"address\"},{\"internalType\":\"contract IVe\",\"name\":\"_veWom\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"_womPerSec\",\"type\":\"uint88\"},{\"internalType\":\"uint40\",\"name\":\"_startTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_firstEpochStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"_baseAllocation\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"pauseVoteEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBribes\",\"outputs\":[{\"internalType\":\"contract IERC20[][]\",\"name\":\"bribeTokenAddresses\",\"type\":\"address[][]\"},{\"internalType\":\"string[][]\",\"name\":\"bribeTokenSymbols\",\"type\":\"string[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"bribeRewards\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"pendingWom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"resumeVoteEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"}],\"name\":\"setAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_baseAllocation\",\"type\":\"uint16\"}],\"name\":\"setBaseAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IBribe\",\"name\":\"_bribe\",\"type\":\"address\"}],\"name\":\"setBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bribeFactory\",\"type\":\"address\"}],\"name\":\"setBribeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IGauge\",\"name\":\"_gaugeManager\",\"type\":\"address\"}],\"name\":\"setGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"_womPerSec\",\"type\":\"uint88\"}],\"name\":\"setWomPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veWom\",\"outputs\":[{\"internalType\":\"contract IVe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_lpVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"bribeRewards\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteIndex\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"voteWeight\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wom\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"womPerSec\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Voter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}