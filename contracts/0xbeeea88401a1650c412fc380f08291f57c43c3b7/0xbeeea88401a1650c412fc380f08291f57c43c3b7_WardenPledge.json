{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WardenPledge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./oz/interfaces/IERC20.sol\\\";\\nimport \\\"./oz/libraries/SafeERC20.sol\\\";\\nimport \\\"./utils/Owner.sol\\\";\\nimport \\\"./oz/utils/Pausable.sol\\\";\\nimport \\\"./oz/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport \\\"./interfaces/IBoostV2.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\n/** @title Warden Pledge contract */\\n/// @author Paladin\\n/*\\n    Delegation market (Pledge version) based on Curve Boost V2 contract\\n*/\\ncontract WardenPledge is Owner, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Constants :\\n    uint256 public constant UNIT = 1e18;\\n    uint256 public constant MAX_PCT = 10000;\\n    uint256 public constant WEEK = 604800;\\n\\n    /** @notice Minimum Pledge duration */\\n    uint256 public constant MIN_PLEDGE_DURATION = 1 weeks;\\n    /** @notice Minimum delegation time when pledging */\\n    uint256 public constant MIN_DELEGATION_DURATION = 2 days;\\n\\n    // Storage :\\n\\n    struct Pledge{\\n        // Target amount of veCRV (balance scaled by Boost v2, fetched as adjusted_balance)\\n        uint256 targetVotes;\\n        // Price per vote per week, set by the owner\\n        uint256 rewardPerVotePerWeek;\\n        // Address to receive the Boosts\\n        address receiver;\\n        // Address of the token given as rewards to Boosters\\n        address rewardToken;\\n        // Timestamp of end of the Pledge\\n        uint64 endTimestamp;\\n        // Set to true if the Pledge is cancelled, or when closed after the endTimestamp\\n        bool closed;\\n    }\\n\\n    /** @notice List of all Pledges */\\n    Pledge[] public pledges;\\n\\n    /** @notice Owner of each Pledge (ordered by index in the pledges list) */\\n    mapping(uint256 => address) public pledgeOwner;\\n    /** @notice List of all Pledges for each owner */\\n    mapping(address => uint256[]) public ownerPledges;\\n\\n    /** @notice Amount of rewards available for each Pledge */\\n    // sorted by Pledge index\\n    mapping(uint256 => uint256) public pledgeAvailableRewardAmounts;\\n\\n    /** @notice Address of the votingToken to delegate */\\n    IVotingEscrow public immutable votingEscrow;\\n    /** @notice Address of the Delegation Boost contract */\\n    IBoostV2 public immutable delegationBoost;\\n\\n\\n    /** @notice Minimum amount of reward per vote for each reward token */\\n    // Also used to whitelist the tokens for rewards\\n    mapping(address => uint256) public minAmountRewardToken;\\n    /** @notice Total amount held in Pledge for the reward amount */\\n    mapping(address => uint256) public rewardTokenTotalAmount;\\n\\n\\n    /** @notice ratio of fees to pay the protocol (in BPS) */\\n    uint256 public protocolFeeRatio = 500; // 5%\\n    /** @notice Address to receive protocol fees */\\n    address public chestAddress;\\n\\n    /** @notice Minimum vote difference for a Pledge */\\n    uint256 public minVoteDiff;\\n\\n\\n    // Events\\n\\n    /** @notice Event emitted when a new Pledge is created */\\n    event NewPledge(\\n        address indexed creator,\\n        address indexed receiver,\\n        address indexed rewardToken,\\n        uint256 id,\\n        uint256 targetVotes,\\n        uint256 rewardPerVotePerWeek,\\n        uint256 endTimestamp\\n    );\\n    /** @notice Event emitted when a Pledge duration is extended */\\n    event ExtendPledgeDuration(uint256 indexed pledgeId, uint256 oldEndTimestamp, uint256 newEndTimestamp);\\n    /** @notice Event emitted when a Pledge reward per vote is increased */\\n    event IncreasePledgeRewardPerVote(uint256 indexed pledgeId, uint256 oldrewardPerVotePerWeek, uint256 newrewardPerVotePerWeek);\\n    /** @notice Event emitted when a Pledge is closed */\\n    event ClosePledge(uint256 indexed pledgeId);\\n    /** @notice Event emitted when rewards are retrieved from a closed Pledge */\\n    event RetrievedPledgeRewards(uint256 indexed pledgeId, address receiver, uint256 amount);\\n\\n    /** @notice Event emitted when an user delegate to a Pledge */\\n    event Pledged(uint256 indexed pledgeId, address indexed user, uint256 amount, uint256 endTimestamp);\\n\\n    /** @notice Event emitted when a new reward token is added to the list */\\n    event NewRewardToken(address indexed token, uint256 minRewardPerWeek);\\n    /** @notice Event emitted when a reward token parameter is updated */\\n    event UpdateRewardToken(address indexed token, uint256 minRewardPerWeek);\\n    /** @notice Event emitted when a reward token is removed from the list */\\n    event RemoveRewardToken(address indexed token);\\n\\n    /** @notice Event emitted when the address for the Chest is updated */\\n    event ChestUpdated(address oldChest, address newChest);\\n    /** @notice Event emitted when the platform fee is updated */\\n    event PlatformFeeUpdated(uint256 oldFee, uint256 newFee);\\n    /** @notice Event emitted when the minimum vote difference value is updated */\\n    event MinVoteDiffUpdated(uint256 oldMinVoteDiff, uint256 newMinVoteDiff);\\n\\n\\n\\n    // Constructor\\n\\n    /**\\n    * @dev Creates the contract, set the given base parameters\\n    * @param _votingEscrow address of the voting token to delegate\\n    * @param _delegationBoost address of the contract handling delegation\\n    * @param _chestAddress address of the contract receiving the fees\\n    * @param _minVoteDiff min amount of veToken to target in a Pledge\\n    */\\n    constructor(\\n        address _votingEscrow,\\n        address _delegationBoost,\\n        address _chestAddress,\\n        uint256 _minVoteDiff\\n    ) {\\n        // We want that value to be at minimum 1e18, to avoid any rounding issues\\n        if(_minVoteDiff < UNIT) revert Errors.InvalidValue();\\n        if(_votingEscrow == address(0) || _delegationBoost == address(0) || _chestAddress == address(0)) revert Errors.ZeroAddress();\\n\\n        votingEscrow = IVotingEscrow(_votingEscrow);\\n        delegationBoost = IBoostV2(_delegationBoost);\\n\\n        chestAddress = _chestAddress;\\n\\n        minVoteDiff = _minVoteDiff;\\n    }\\n\\n    \\n    // View Methods\\n\\n    /**\\n    * @notice Amount of Pledges listed in this contract\\n    * @dev Amount of Pledges listed in this contract\\n    * @return uint256: Amount of Pledges listed in this contract\\n    */\\n    function nextPledgeIndex() public view returns(uint256){\\n        return pledges.length;\\n    }\\n\\n    /**\\n    * @notice Get all Pledges created by the user\\n    * @dev Get all Pledges created by the user\\n    * @param user Address of the user\\n    * @return uint256[]: List of Pledges IDs\\n    */\\n    function getUserPledges(address user) external view returns(uint256[] memory){\\n        return ownerPledges[user];\\n    }\\n\\n    /**\\n    * @notice Get all the Pledges\\n    * @dev Get all the Pledges\\n    * @return Pledge[]: List of Pledge structs\\n    */\\n    function getAllPledges() external view returns(Pledge[] memory){\\n        return pledges;\\n    }\\n\\n    /**\\n    * @dev Rounds down given timestamp to weekly periods\\n    * @param timestamp timestamp to round down\\n    * @return uint256: rounded down timestamp\\n    */\\n    function _getRoundedTimestamp(uint256 timestamp) internal pure returns(uint256) {\\n        return (timestamp / WEEK) * WEEK;\\n    }\\n\\n\\n    // Pledgers Methods\\n\\n    /**\\n    * @notice Delegates boost to a given Pledge & receive rewards\\n    * @dev Delegates boost to a given Pledge & receive rewards\\n    * @param pledgeId Pledge to delegate to\\n    * @param amount Amount to delegate\\n    * @param endTimestamp End of delegation\\n    */\\n    function pledge(uint256 pledgeId, uint256 amount, uint256 endTimestamp) external nonReentrant whenNotPaused {\\n        _pledge(pledgeId, msg.sender, amount, endTimestamp);\\n    }\\n\\n    /**\\n    * @notice Delegates boost (using a percentage of the balance) to a given Pledge & receive rewards\\n    * @dev Delegates boost (using a percentage of the balance) to a given Pledge & receive rewards\\n    * @param pledgeId Pledge to delegate to\\n    * @param percent Percent of balance to delegate\\n    * @param endTimestamp End of delegation\\n    */\\n    function pledgePercent(uint256 pledgeId, uint256 percent, uint256 endTimestamp) external nonReentrant whenNotPaused {\\n        if(percent > MAX_PCT) revert Errors.PercentOverMax();\\n        uint256 amount = (delegationBoost.delegable_balance(msg.sender) * percent) / MAX_PCT;\\n\\n        _pledge(pledgeId, msg.sender, amount, endTimestamp);\\n        \\n    }\\n\\n    /**\\n    * @dev Delegates the boost to the Pledge receiver & sends rewards to the delegator\\n    * @param pledgeId Pledge to delegate to\\n    * @param user Address of the delegator\\n    * @param amount Amount to delegate\\n    * @param endTimestamp End of delegation\\n    */\\n    function _pledge(uint256 pledgeId, address user, uint256 amount, uint256 endTimestamp) internal {\\n        if(amount == 0) revert Errors.NullValue();\\n        if(pledgeId >= pledges.length) revert Errors.InvalidPledgeID();\\n\\n        // Load Pledge parameters & check the Pledge is still active\\n        Pledge storage pledgeParams = pledges[pledgeId];\\n        if(pledgeParams.closed) revert Errors.PledgeClosed();\\n        if(pledgeParams.endTimestamp <= block.timestamp) revert Errors.ExpiredPledge();\\n\\n        // To join until the end of the pledge, user can input 0 as endTimestamp\\n        // so it's overridden by the Pledge's endTimestamp\\n        if(endTimestamp == 0) endTimestamp = pledgeParams.endTimestamp;\\n        if(endTimestamp > pledgeParams.endTimestamp || endTimestamp != _getRoundedTimestamp(endTimestamp)) revert Errors.InvalidEndTimestamp();\\n\\n        // Calculated the effective Pledge duration\\n        uint256 boostDuration = endTimestamp - block.timestamp;\\n        if(boostDuration < MIN_DELEGATION_DURATION) revert Errors.DurationTooShort();\\n\\n        // Check that the user has enough boost delegation available & set the correct allowance to this contract\\n        IBoostV2 _delegationBoost = delegationBoost;\\n        _delegationBoost.checkpoint_user(user);\\n        if(_delegationBoost.allowance(user, address(this)) < amount) revert Errors.InsufficientAllowance();\\n        if(_delegationBoost.delegable_balance(user) < amount) revert Errors.CannotDelegate();\\n\\n        // Check that this will not go over the Pledge target of votes\\n        if(_delegationBoost.adjusted_balance_of(pledgeParams.receiver) + amount > pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();\\n\\n        // Creates the DelegationBoost\\n        _delegationBoost.boost(\\n            pledgeParams.receiver,\\n            amount,\\n            endTimestamp,\\n            user\\n        );\\n\\n        // Re-calculate the new Boost bias & slope (using BoostV2 logic)\\n        uint256 slope = amount / boostDuration;\\n        uint256 bias = slope * boostDuration;\\n\\n        if(bias == 0) revert Errors.EmptyBoost();\\n\\n        // Rewards are set in the Pledge as reward/veToken/sec\\n        // To find the total amount of veToken delegated through the whole Boost duration\\n        // based on the Boost bias & the Boost duration, to take in account that the delegated amount decreases\\n        // each second of the Boost duration\\n        uint256 totalDelegatedAmount = ((bias * boostDuration) + bias) / 2;\\n        // Then we can calculate the total amount of rewards for this Boost\\n        // And scale it back to reward/vote/second\\n        uint256 rewardAmount = ((totalDelegatedAmount * pledgeParams.rewardPerVotePerWeek) / WEEK) / UNIT;\\n\\n        if(rewardAmount == 0) revert Errors.NoRewards();\\n\\n        address _rewardToken = pledgeParams.rewardToken;\\n        if(rewardAmount > pledgeAvailableRewardAmounts[pledgeId]) revert Errors.RewardsBalanceTooLow();\\n        pledgeAvailableRewardAmounts[pledgeId] -= rewardAmount;\\n        rewardTokenTotalAmount[_rewardToken] -= rewardAmount;\\n\\n        // Send the rewards to the user\\n        IERC20(_rewardToken).safeTransfer(user, rewardAmount);\\n\\n        emit Pledged(pledgeId, user, bias, endTimestamp);\\n    }\\n\\n\\n    // Pledge Creators Methods\\n\\n    struct CreatePledgeVars {\\n        uint256 totalVotes;\\n        uint256 totalRewardAmount;\\n        uint256 feeAmount;\\n        uint256 newPledgeID;\\n    }\\n\\n    /**\\n    * @notice Creates a new Pledge\\n    * @dev Creates a new Pledge\\n    * @param receiver Address to receive the boost delegation\\n    * @param rewardToken Address of the token distributed as reward\\n    * @param targetVotes Maximum target of votes to have (own balance + delegation) for the receiver\\n    * @param rewardPerVotePerWeek Amount of reward given for each vote delegation (per week)\\n    * @param endTimestamp End of the Pledge\\n    * @param maxTotalRewardAmount Maximum total reward amount allowed to be pulled by this contract\\n    * @param maxFeeAmount Maximum fee amount allowed to be pulled by this contract\\n    * @return uint256: Newly created Pledge ID\\n    */ \\n    function createPledge(\\n        address receiver,\\n        address rewardToken,\\n        uint256 targetVotes,\\n        uint256 rewardPerVotePerWeek, // reward/veToken/week\\n        uint256 endTimestamp,\\n        uint256 maxTotalRewardAmount,\\n        uint256 maxFeeAmount\\n    ) external nonReentrant whenNotPaused returns(uint256){\\n        address creator = msg.sender;\\n\\n        if(receiver == address(0) || rewardToken == address(0)) revert Errors.ZeroAddress();\\n        uint256 _minAmountRewardToken = minAmountRewardToken[rewardToken];\\n        if(_minAmountRewardToken == 0) revert Errors.TokenNotWhitelisted();\\n        if(rewardPerVotePerWeek < _minAmountRewardToken) revert Errors.RewardPerVoteTooLow();\\n\\n        if(endTimestamp == 0) revert Errors.NullEndTimestamp();\\n        if(endTimestamp != _getRoundedTimestamp(endTimestamp) || endTimestamp < block.timestamp) revert Errors.InvalidEndTimestamp();\\n\\n        CreatePledgeVars memory vars;\\n        \\n        vars.totalVotes = _getTotalVotesForDuration(receiver, targetVotes, endTimestamp);\\n\\n        // We receive rewards rate weekly, and calculate the totalVotes based on the full duration in\\n        // seconds, so we scale back the reward/vote to seconds here\\n        vars.totalRewardAmount = ((rewardPerVotePerWeek * vars.totalVotes) / WEEK) / UNIT;\\n        vars.feeAmount = (vars.totalRewardAmount * protocolFeeRatio) / MAX_PCT ;\\n        if(vars.totalRewardAmount == 0 || vars.feeAmount == 0) revert Errors.NullAmount();\\n        if(vars.totalRewardAmount > maxTotalRewardAmount) revert Errors.IncorrectMaxTotalRewardAmount();\\n        if(vars.feeAmount > maxFeeAmount) revert Errors.IncorrectMaxFeeAmount();\\n\\n        // Pull all the rewards in this contract\\n        IERC20(rewardToken).safeTransferFrom(creator, address(this), vars.totalRewardAmount);\\n        // And transfer the fees from the Pledge creator to the Chest contract\\n        IERC20(rewardToken).safeTransferFrom(creator, chestAddress, vars.feeAmount);\\n\\n        vars.newPledgeID = pledges.length;\\n\\n        // Add the total rewards as available for the Pledge & write Pledge parameters in storage\\n        pledgeAvailableRewardAmounts[vars.newPledgeID] = vars.totalRewardAmount;\\n        rewardTokenTotalAmount[rewardToken] += vars.totalRewardAmount;\\n\\n        pledges.push(Pledge(\\n            targetVotes,\\n            rewardPerVotePerWeek,\\n            receiver,\\n            rewardToken,\\n            safe64(endTimestamp),\\n            false\\n        ));\\n\\n        pledgeOwner[vars.newPledgeID] = creator;\\n        ownerPledges[creator].push(vars.newPledgeID);\\n\\n        emit NewPledge(creator, receiver, rewardToken, vars.newPledgeID, targetVotes, rewardPerVotePerWeek, endTimestamp);\\n\\n        return vars.newPledgeID;\\n    }\\n\\n    /**\\n    * @notice Extends the Pledge duration\\n    * @dev Extends the Pledge duration & add rewards for that new duration\\n    * @param pledgeId ID of the Pledge\\n    * @param newEndTimestamp New end of the Pledge\\n    * @param maxTotalRewardAmount Maximum added total reward amount allowed to be pulled by this contract\\n    * @param maxFeeAmount Maximum fee amount allowed to be pulled by this contract\\n    */\\n    function extendPledge(\\n        uint256 pledgeId,\\n        uint256 newEndTimestamp,\\n        uint256 maxTotalRewardAmount,\\n        uint256 maxFeeAmount\\n    ) external nonReentrant whenNotPaused {\\n        if(pledgeId >= pledges.length) revert Errors.InvalidPledgeID();\\n        address creator = pledgeOwner[pledgeId];\\n        if(msg.sender != creator) revert Errors.NotPledgeCreator();\\n\\n        Pledge storage pledgeParams = pledges[pledgeId];\\n        uint256 oldEndTimestamp = pledgeParams.endTimestamp;\\n        if(pledgeParams.closed) revert Errors.PledgeClosed();\\n        if(oldEndTimestamp <= block.timestamp) revert Errors.ExpiredPledge();\\n        address _rewardToken = pledgeParams.rewardToken;\\n        if(minAmountRewardToken[_rewardToken] == 0) revert Errors.TokenNotWhitelisted();\\n        if(pledgeParams.rewardPerVotePerWeek < minAmountRewardToken[_rewardToken]) revert Errors.RewardPerVoteTooLow();\\n\\n        if(newEndTimestamp == 0) revert Errors.NullEndTimestamp();\\n        if(newEndTimestamp != _getRoundedTimestamp(newEndTimestamp) || newEndTimestamp < oldEndTimestamp) revert Errors.InvalidEndTimestamp();\\n\\n        if((newEndTimestamp - oldEndTimestamp) < MIN_PLEDGE_DURATION) revert Errors.DurationTooShort();\\n\\n        // To find the Total Votes for the added duration, we fetch the Total Votes\\n        // for the current endTimestamp (from now to oldEndTimestamp), and the Total Votes\\n        // for the new endTimestamp (from now to newEndTimestamp).\\n        // And the Total Votes for the added duration is simply the Total Votes for the new\\n        // endTimestamp minus the Total Votes for the current endTimestamp.\\n        // (the subsctraction removes the Total Votes for the common duration between the 2 endTimestamps)\\n        uint256 oldEndTotalRemaingVotes = _getTotalVotesForDuration(pledgeParams.receiver, pledgeParams.targetVotes, oldEndTimestamp);\\n        uint256 totalVotesAddedDuration = _getTotalVotesForDuration(pledgeParams.receiver, pledgeParams.targetVotes, newEndTimestamp) - oldEndTotalRemaingVotes;\\n        uint256 totalRewardAmount = ((pledgeParams.rewardPerVotePerWeek * totalVotesAddedDuration) / WEEK) / UNIT;\\n        uint256 feeAmount = (totalRewardAmount * protocolFeeRatio) / MAX_PCT ;\\n        if(totalRewardAmount == 0 || feeAmount == 0) revert Errors.NullAmount();\\n        if(totalRewardAmount > maxTotalRewardAmount) revert Errors.IncorrectMaxTotalRewardAmount();\\n        if(feeAmount > maxFeeAmount) revert Errors.IncorrectMaxFeeAmount();\\n\\n\\n        // Pull all the rewards in this contract\\n        IERC20(_rewardToken).safeTransferFrom(creator, address(this), totalRewardAmount);\\n        // And transfer the fees from the Pledge creator to the Chest contract\\n        IERC20(_rewardToken).safeTransferFrom(creator, chestAddress, feeAmount);\\n\\n        // Update the Pledge parameters in storage\\n        pledgeParams.endTimestamp = safe64(newEndTimestamp);\\n\\n        pledgeAvailableRewardAmounts[pledgeId] += totalRewardAmount;\\n        rewardTokenTotalAmount[_rewardToken] += totalRewardAmount;\\n\\n        emit ExtendPledgeDuration(pledgeId, oldEndTimestamp, newEndTimestamp);\\n    }\\n\\n    /**\\n    * @notice Increases the Pledge reward per vote delegated\\n    * @dev Increases the Pledge reward per vote delegated & add rewards for that new duration\\n    * @param pledgeId ID of the Pledge\\n    * @param newRewardPerVotePerWeek New amount of reward given for each vote delegation (per week)\\n    * @param maxTotalRewardAmount Maximum added total reward amount allowed to be pulled by this contract\\n    * @param maxFeeAmount Maximum fee amount allowed to be pulled by this contract\\n    */\\n    function increasePledgeRewardPerVote(\\n        uint256 pledgeId,\\n        uint256 newRewardPerVotePerWeek,\\n        uint256 maxTotalRewardAmount,\\n        uint256 maxFeeAmount\\n    ) external nonReentrant whenNotPaused {\\n        if(pledgeId >= pledges.length) revert Errors.InvalidPledgeID();\\n        address creator = pledgeOwner[pledgeId];\\n        if(msg.sender != creator) revert Errors.NotPledgeCreator();\\n\\n        Pledge storage pledgeParams = pledges[pledgeId];\\n        if(pledgeParams.closed) revert Errors.PledgeClosed();\\n        uint256 _endTimestamp = pledgeParams.endTimestamp;\\n        if(_endTimestamp <= block.timestamp) revert Errors.ExpiredPledge();\\n        address _rewardToken = pledgeParams.rewardToken;\\n        if(minAmountRewardToken[_rewardToken] == 0) revert Errors.TokenNotWhitelisted();\\n        if(pledgeParams.rewardPerVotePerWeek < minAmountRewardToken[_rewardToken]) revert Errors.RewardPerVoteTooLow();\\n\\n        uint256 oldRewardPerVotePerWeek = pledgeParams.rewardPerVotePerWeek;\\n        if(newRewardPerVotePerWeek <= oldRewardPerVotePerWeek) revert Errors.RewardsPerVotesTooLow();\\n        uint256 rewardPerVoteDiff = newRewardPerVotePerWeek - oldRewardPerVotePerWeek;\\n\\n        uint256 totalVotes = _getTotalVotesForDuration(pledgeParams.receiver, pledgeParams.targetVotes, _endTimestamp);\\n        \\n        uint256 totalRewardAmount = ((rewardPerVoteDiff * totalVotes) / WEEK) / UNIT;\\n        uint256 feeAmount = (totalRewardAmount * protocolFeeRatio) / MAX_PCT ;\\n        if(totalRewardAmount == 0 || feeAmount == 0) revert Errors.NullAmount();\\n        if(totalRewardAmount > maxTotalRewardAmount) revert Errors.IncorrectMaxTotalRewardAmount();\\n        if(feeAmount > maxFeeAmount) revert Errors.IncorrectMaxFeeAmount();\\n\\n        // Pull all the rewards in this contract\\n        IERC20(_rewardToken).safeTransferFrom(creator, address(this), totalRewardAmount);\\n        // And transfer the fees from the Pledge creator to the Chest contract\\n        IERC20(_rewardToken).safeTransferFrom(creator, chestAddress, feeAmount);\\n\\n        // Update the Pledge parameters in storage\\n        pledgeParams.rewardPerVotePerWeek = newRewardPerVotePerWeek;\\n\\n        pledgeAvailableRewardAmounts[pledgeId] += totalRewardAmount;\\n        rewardTokenTotalAmount[_rewardToken] += totalRewardAmount;\\n\\n        emit IncreasePledgeRewardPerVote(pledgeId, oldRewardPerVotePerWeek, newRewardPerVotePerWeek);\\n    }\\n\\n    /**\\n    * @notice Closes a Pledge and retrieves all non-distributed rewards from a Pledge\\n    * @dev Closes a Pledge and retrieves all non-distributed rewards from a Pledge & send them to the given receiver\\n    * @param pledgeId ID of the Pledge to close\\n    * @param receiver Address to receive the remaining rewards\\n    */\\n    function closePledge(uint256 pledgeId, address receiver) external nonReentrant {\\n        if(receiver == address(0) || receiver == address(this)) revert Errors.InvalidValue();\\n        if(pledgeId >= pledges.length) revert Errors.InvalidPledgeID();\\n        address creator = pledgeOwner[pledgeId];\\n        if(msg.sender != creator) revert Errors.NotPledgeCreator();\\n\\n        Pledge storage pledgeParams = pledges[pledgeId];\\n        if(pledgeParams.closed) revert Errors.PledgeAlreadyClosed();\\n\\n        // Set the Pledge as Closed\\n        pledgeParams.closed = true;\\n\\n        // Get the current remaining amount of rewards not distributed for the Pledge\\n        uint256 remainingAmount = pledgeAvailableRewardAmounts[pledgeId];\\n\\n        if(remainingAmount != 0) {\\n            // Transfer the non-used rewards and reset storage\\n            pledgeAvailableRewardAmounts[pledgeId] = 0;\\n            address _rewardToken = pledgeParams.rewardToken;\\n            rewardTokenTotalAmount[_rewardToken] -= remainingAmount;\\n\\n            IERC20(_rewardToken).safeTransfer(receiver, remainingAmount);\\n\\n            emit RetrievedPledgeRewards(pledgeId, receiver, remainingAmount);\\n\\n        }\\n\\n        emit ClosePledge(pledgeId);\\n    }\\n\\n    /**\\n    * @dev Get the missing votes for the given receiver to reach the target votes\\n    * We ignore any delegated boost here because they might expire during the Pledge duration\\n    * (we can have a future version of this contract using adjusted_balance)\\n    * @param receiver Address to receive the boost delegation\\n    * @param targetVotes Maximum target of votes to have (own balance + delegation) for the receiver\\n    * @param endTimestamp End of the Pledge\\n    */\\n    function _getTotalVotesForDuration(\\n        address receiver,\\n        uint256 targetVotes,\\n        uint256 endTimestamp\\n    ) internal view returns(uint256) {\\n        IVotingEscrow _votingEscrow = votingEscrow;\\n        uint256 duration = endTimestamp - block.timestamp;\\n        if(duration < MIN_PLEDGE_DURATION) revert Errors.DurationTooShort();\\n\\n        // Total votes needed to reach the TargetVotes for each second of the Pledge duration\\n        uint256 neededTotalVotes = targetVotes * duration;\\n        // Total votes the receiver already has (from the veCRV balance) for each second of the Pledge duration\\n        uint256 totalReceiverVotes;\\n        \\n        // Current receiver bias (calculated by veCRV contract)\\n        uint256 receiverBalance = _votingEscrow.balanceOf(receiver);\\n\\n        if((targetVotes - receiverBalance) < minVoteDiff) revert Errors.TargetVoteUnderMin();\\n\\n        if(receiverBalance != 0){\\n            // If receiver has a veCRV lock\\n            uint256 receiverLockEnd = _votingEscrow.locked__end(receiver);\\n\\n            if(receiverLockEnd < endTimestamp) {\\n                // If the receiver veCRV lock ends after the Pledge endTimestamp\\n                uint256 lockRemainingDuration = receiverLockEnd - block.timestamp;\\n\\n                // We calculate the total amount of vote the receiver will have for each second until the end of the lock\\n                totalReceiverVotes = ((receiverBalance * lockRemainingDuration) + receiverBalance) / 2;\\n            } else {\\n                // If the receiver veCRV lock ends before the end of the Pledge\\n                uint256 receiverSlope = _votingEscrow.get_last_user_slope(receiver);\\n                uint256 receiverEndTsBias = receiverBalance - (duration * receiverSlope);\\n\\n                // We calculate the receiver bias at the end of the duration, and account\\n                // for the veCRV balance decrease, and sum up to get the total amount of votes the receiver\\n                // will have through the duration of the Pledge\\n                totalReceiverVotes = ((duration * (receiverBalance + receiverEndTsBias + receiverSlope)) / 2);\\n            }\\n        }\\n\\n        return neededTotalVotes - totalReceiverVotes;\\n    }\\n\\n\\n    // Admin Methods\\n\\n    /**\\n    * @dev Adds a given reward token to the whitelist\\n    * @param token Address of the token\\n    * @param minRewardPerWeek Minimum amount of reward per vote per week for the token\\n    */\\n    function _addRewardToken(address token, uint256 minRewardPerWeek) internal {\\n        if(token == address(0)) revert Errors.ZeroAddress();\\n        if(minRewardPerWeek == 0) revert Errors.NullValue();\\n        if(minAmountRewardToken[token] != 0) revert Errors.AlreadyAllowedToken();\\n        \\n        minAmountRewardToken[token] = minRewardPerWeek;\\n\\n        emit NewRewardToken(token, minRewardPerWeek);\\n    }\\n\\n    /**\\n    * @notice Adds a given reward token to the whitelist\\n    * @dev Adds a given reward token to the whitelist\\n    * @param tokens List of token addresses to add\\n    * @param minRewardsPerWeek Minimum amount of reward per vote per week for each token in the list\\n    */\\n    function addMultipleRewardToken(address[] calldata tokens, uint256[] calldata minRewardsPerWeek) external onlyOwner {\\n        uint256 length = tokens.length;\\n\\n        if(length == 0) revert Errors.EmptyArray();\\n        if(length != minRewardsPerWeek.length) revert Errors.UnequalArraySizes();\\n\\n        for(uint256 i; i < length;){\\n            _addRewardToken(tokens[i], minRewardsPerWeek[i]);\\n\\n            unchecked{ ++i; }\\n        }\\n    }\\n\\n    /**\\n    * @notice Adds a given reward token to the whitelist\\n    * @dev Adds a given reward token to the whitelist\\n    * @param token Address of the token\\n    * @param minRewardPerWeek Minimum amount of reward per vote per week for the token\\n    */\\n    function addRewardToken(address token, uint256 minRewardPerWeek) external onlyOwner {\\n        _addRewardToken(token, minRewardPerWeek);\\n    }\\n\\n    /**\\n    * @notice Updates a reward token\\n    * @dev Updates a reward token\\n    * @param token Address of the token\\n    * @param minRewardPerWeek Minimum amount of reward per vote per week for the token\\n    */\\n    function updateRewardToken(address token, uint256 minRewardPerWeek) external onlyOwner {\\n        if(token == address(0)) revert Errors.ZeroAddress();\\n        if(minAmountRewardToken[token] == 0) revert Errors.NotAllowedToken();\\n        if(minRewardPerWeek == 0) revert Errors.InvalidValue();\\n\\n        minAmountRewardToken[token] = minRewardPerWeek;\\n\\n        emit UpdateRewardToken(token, minRewardPerWeek);\\n    }\\n\\n    /**\\n    * @notice Removes a reward token from the whitelist\\n    * @dev Removes a reward token from the whitelist\\n    * @param token Address of the token\\n    */\\n    function removeRewardToken(address token) external onlyOwner {\\n        if(token == address(0)) revert Errors.ZeroAddress();\\n        if(minAmountRewardToken[token] == 0) revert Errors.NotAllowedToken();\\n        \\n        minAmountRewardToken[token] = 0;\\n        \\n        emit RemoveRewardToken(token);\\n    }\\n    \\n    /**\\n    * @notice Updates the Chest address\\n    * @dev Updates the Chest address\\n    * @param chest Address of the new Chest\\n    */\\n    function updateChest(address chest) external onlyOwner {\\n        if(chest == address(0) || chest == address(this)) revert Errors.InvalidAddress();\\n        address oldChest = chestAddress;\\n        chestAddress = chest;\\n\\n        emit ChestUpdated(oldChest, chest);\\n    }\\n\\n    /**\\n    * @notice Updates the new min difference of votes for Pledges\\n    * @dev Updates the new min difference of votes for Pledges\\n    * @param newMinVoteDiff New minimum difference of votes\\n    */\\n    function updateMinVoteDiff(uint256 newMinVoteDiff) external onlyOwner {\\n        // We want that value to be at minimum 1e18, to avoid any rounding issues\\n        if(newMinVoteDiff < UNIT) revert Errors.InvalidValue();\\n        uint256 oldMinTarget = minVoteDiff;\\n        minVoteDiff = newMinVoteDiff;\\n\\n        emit MinVoteDiffUpdated(oldMinTarget, newMinVoteDiff);\\n    }\\n\\n    /**\\n    * @notice Updates the platform fees BPS ratio\\n    * @dev Updates the platform fees BPS ratio\\n    * @param newFee New fee ratio\\n    */\\n    function updatePlatformFee(uint256 newFee) external onlyOwner {\\n        if(newFee > 500 || newFee == 0) revert Errors.InvalidValue();\\n        uint256 oldFee = protocolFeeRatio;\\n        protocolFeeRatio = newFee;\\n\\n        emit PlatformFeeUpdated(oldFee, newFee);\\n    }\\n\\n    /**\\n     * @notice Pauses the contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n    * @notice Recovers ERC2O tokens sent by mistake to the contract\\n    * @dev Recovers ERC2O tokens sent by mistake to the contract\\n    * @param token Address of the ERC2O token\\n    * @return bool: success\\n    */\\n    function recoverERC20(address token) external nonReentrant onlyOwner returns(bool) {\\n        uint256 currentBalance = IERC20(token).balanceOf(address(this));\\n        if(currentBalance == 0) revert Errors.NullValue();\\n        uint256 amount;\\n\\n        // Total amount of the token owned by the Pledges\\n        uint256 pledgesBalance = rewardTokenTotalAmount[token];\\n\\n        if(pledgesBalance >= currentBalance) revert Errors.CannotRecoverToken();\\n        amount = currentBalance - pledgesBalance;\\n\\n        if(amount != 0) {\\n            IERC20(token).safeTransfer(owner(), amount);\\n        }\\n        \\n        return true;\\n    }\\n\\n    // Utils \\n\\n    function safe64(uint256 n) internal pure returns (uint64) {\\n        if(n > type(uint64).max) revert Errors.NumberExceed64Bits();\\n        return uint64(n);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/oz/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/oz/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Owner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../oz/utils/Ownable.sol\\\";\\n\\n/** @title Extend OZ Ownable contract  */\\n/// @author Paladin\\n\\ncontract Owner is Ownable {\\n\\n    address public pendingOwner;\\n\\n    event NewPendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\\n\\n    error CannotBeOwner();\\n    error CallerNotPendingOwner();\\n    error OwnerZeroAddress();\\n\\n    function transferOwnership(address newOwner) public override virtual onlyOwner {\\n        if(newOwner == address(0)) revert OwnerZeroAddress();\\n        if(newOwner == owner()) revert CannotBeOwner();\\n        address oldPendingOwner = pendingOwner;\\n\\n        pendingOwner = newOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newOwner);\\n    }\\n\\n    function acceptOwnership() public virtual {\\n        if(msg.sender != pendingOwner) revert CallerNotPendingOwner();\\n        address newOwner = pendingOwner;\\n        _transferOwnership(pendingOwner);\\n        pendingOwner = address(0);\\n\\n        emit NewPendingOwner(newOwner, address(0));\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/** @title Custom Interface for Curve VotingEscrow contract  */\\ninterface IVotingEscrow {\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n    \\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function locked(address _account) external view returns (LockedBalance memory);\\n\\n    function create_lock(uint256 _value, uint256 _unlock_time) external returns (uint256);\\n\\n    function increase_amount(uint256 _value) external;\\n\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n    function get_last_user_slope(address _addr) external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBoostV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/** @title Custom Interface for Curve BoostV2 contract  */\\ninterface IBoostV2 {\\n\\n    event Boost(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _bias,\\n        uint256 _slope,\\n        uint256 _start\\n    );\\n\\n    function balanceOf(address _user) external view returns(uint256);\\n    function allowance(address _user, address _spender) external view returns(uint256);\\n\\n    function adjusted_balance_of(address _user) external view returns(uint256);\\n    function delegated_balance(address _user) external view returns(uint256);\\n    function received_balance(address _user) external view returns(uint256);\\n    function delegable_balance(address _user) external view returns(uint256);\\n\\n    function checkpoint_user(address _user) external;\\n    function approve(address _spender, uint256 _value) external;\\n    function boost(address _to, uint256 _amount, uint256 _endtime, address _from) external;\\n}\"\r\n    },\r\n    \"contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary Errors {\\n\\n    // Access Errors\\n    error CallerNotAllowed();\\n    error CallerNotManager();\\n\\n    // Common Errors\\n    error ZeroAddress();\\n    error NullValue();\\n    error InvalidValue();\\n    error UnequalArraySizes();\\n    error InvalidAddress();\\n    error NullAmount();\\n\\n    // Update Errors\\n    error FailRewardUpdate();\\n\\n    // Offers Errors\\n    error AlreadyRegistered();\\n    error WardenNotOperator();\\n    error NotRegistered();\\n    error NotOfferOwner();\\n\\n    // Registration Errors\\n    error NullPrice();\\n    error NullMaxDuration();\\n    error IncorrectExpiry();\\n    error MaxPercTooHigh();\\n    error MinPercOverMaxPerc();\\n    error MinPercTooLow();\\n\\n    // Purchase Errors\\n    error PercentUnderMinRequired();\\n    error PercentOverMax();\\n    error DurationOverOfferMaxDuration();\\n    error OfferExpired();\\n    error DurationTooShort();\\n    error PercentOutOfferBonds();\\n    error LockEndTooShort();\\n    error CannotDelegate();\\n    error NullFees();\\n    error FeesTooLow();\\n    error FailDelegationBoost();\\n\\n    // Cancel Errors\\n    error CannotCancelBoost();\\n\\n    // Claim Fees Errors\\n    error NullClaimAmount();\\n    error AmountTooHigh();\\n    error ClaimBlocked();\\n    error ClaimNotBlocked();\\n    error InsufficientCash();\\n\\n    // Rewards Errors\\n    error InvalidBoostId();\\n    error RewardsNotStarted();\\n    error RewardsAlreadyStarted();\\n    error BoostRewardsNull();\\n    error RewardsNotUpdated();\\n    error NotBoostBuyer();\\n    error AlreadyClaimed();\\n    error CannotClaim();\\n    error InsufficientRewardCash();\\n\\n    // Admin Errors\\n    error CannotWithdrawFeeToken();\\n    error ReserveTooLow();\\n    error BaseDropTooLow();\\n    error MinDropTooHigh();\\n    error AlreadyAllowedToken();\\n    error NotAllowedToken();\\n    error CannotRecoverToken();\\n\\n    // MultiBuy Errors\\n    error NotEnoughFees();\\n    error FailBoostPurchase();\\n    error CannotMatchOrder();\\n    error EmptyArray();\\n    error InvalidBoostOffer();\\n\\n    //PledgeErrors\\n    error TokenNotWhitelisted();\\n    error RewardPerVoteTooLow();\\n    error TargetVoteUnderMin();\\n    error IncorrectMaxTotalRewardAmount();\\n    error IncorrectMaxFeeAmount();\\n    error InvalidEndTimestamp();\\n    error NullEndTimestamp();\\n    error NotPledgeCreator();\\n    error ExpiredPledge();\\n    error PledgeNotExpired();\\n    error PledgeClosed();\\n    error PledgeAlreadyClosed();\\n    error TargetVotesTooLoow();\\n    error RewardsPerVotesTooLow();\\n    error InvalidPledgeID();\\n    error TargetVotesOverflow();\\n    error RewardsBalanceTooLow();\\n    error InsufficientAllowance();\\n    error EmptyBoost();\\n    error NoRewards();\\n\\n    // Math Errors\\n    error NumberExceed64Bits();\\n\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationBoost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minVoteDiff\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAllowedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRecoverToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBoost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredPledge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectMaxFeeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectMaxTotalRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPledgeID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPledgeCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullEndTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberExceed64Bits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentOverMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PledgeAlreadyClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PledgeClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardPerVoteTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsBalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsPerVotesTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetVoteUnderMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetVotesOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalArraySizes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldChest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newChest\",\"type\":\"address\"}],\"name\":\"ChestUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"}],\"name\":\"ClosePledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExtendPledgeDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldrewardPerVotePerWeek\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newrewardPerVotePerWeek\",\"type\":\"uint256\"}],\"name\":\"IncreasePledgeRewardPerVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinVoteDiff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinVoteDiff\",\"type\":\"uint256\"}],\"name\":\"MinVoteDiffUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerVotePerWeek\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"NewPledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRewardPerWeek\",\"type\":\"uint256\"}],\"name\":\"NewRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"Pledged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RetrievedPledgeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRewardPerWeek\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DELEGATION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PLEDGE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minRewardsPerWeek\",\"type\":\"uint256[]\"}],\"name\":\"addMultipleRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRewardPerWeek\",\"type\":\"uint256\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chestAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"closePledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerVotePerWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeAmount\",\"type\":\"uint256\"}],\"name\":\"createPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationBoost\",\"outputs\":[{\"internalType\":\"contract IBoostV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeAmount\",\"type\":\"uint256\"}],\"name\":\"extendPledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPledges\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerVotePerWeek\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"endTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct WardenPledge.Pledge[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPledges\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardPerVotePerWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeAmount\",\"type\":\"uint256\"}],\"name\":\"increasePledgeRewardPerVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAmountRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minVoteDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPledgeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPledges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgeAvailableRewardAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pledgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"pledgePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerVotePerWeek\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"endTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chest\",\"type\":\"address\"}],\"name\":\"updateChest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinVoteDiff\",\"type\":\"uint256\"}],\"name\":\"updateMinVoteDiff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRewardPerWeek\",\"type\":\"uint256\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WardenPledge", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f3b5dfeb7b28cdbd7faba78963ee202a494e2a2000000000000000000000000d0921691c7debc698e6e372c6f74dc01fc9d37780000000000000000000000000482a2d6e2f895125b7237de70c675cd55fe17ca00000000000000000000000000000000000000000000003635c9adc5dea00000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}