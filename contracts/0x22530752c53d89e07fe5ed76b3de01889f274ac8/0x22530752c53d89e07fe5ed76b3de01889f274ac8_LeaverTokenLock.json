{"SourceCode": "// Sources flattened with hardhat v2.6.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.3.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/TokenLock.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\ncontract TokenLock {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // we never write both values together so packaging struct into sinle word wit uint128 does not make sense\r\n    struct UnlockState {\r\n        // total tokens to be released\r\n        uint256 totalTokens;\r\n        // already released tokens\r\n        uint256 unlockedTokens;\r\n    }\r\n\r\n    // possible state of the Lock\r\n    // NotFunded is initial state\r\n    // transition to Funded happens only when required amount of \"token\" is on contract's balance\r\n    enum State {\r\n        Initialized,\r\n        Funded\r\n    }\r\n\r\n    // emitted on token release\r\n    event LogRelease(address indexed sender, uint256 amount);\r\n\r\n    // emitted on token locked\r\n    event LogLock(address wallet, uint256 amount);\r\n\r\n    // emitted when all stakes are added\r\n    event LogInitialized(uint256 totalLockedAmount);\r\n\r\n    // emitted on lock funded\r\n    event LogFunded();\r\n\r\n    modifier onlyFunded() {\r\n        require(_state == State.Funded, \"Not in Initialized state\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyInitialized() {\r\n        require(_state == State.Initialized, \"Not in Funded state\");\r\n        _;\r\n    }\r\n\r\n    uint256 internal constant DAYS_30_PERIOD = 30 days;\r\n\r\n    // a value representing a whole (100%) of decimal fraction\r\n    uint256 internal constant FRACTION_WHOLE = 10**18;\r\n\r\n    IERC20 internal immutable _token;\r\n\r\n    // start time of the vesting, Unix timestamp\r\n    uint256 internal immutable _startTime;\r\n\r\n    // period of the vesting in seconds\r\n    uint256 internal immutable _vestingPeriod;\r\n\r\n    // cliff period in seconds\r\n    uint256 internal immutable _cliffPeriod;\r\n\r\n    // token release on _startTime, decimal fraction where FRACTION_WHOLE is 100%\r\n    uint256 internal immutable _initialReleaseFraction;\r\n\r\n    // locked amount held and total amount\r\n    mapping(address => UnlockState) internal _stakes;\r\n    uint256 internal immutable _totalLockedAmount;\r\n\r\n    // current state of the contract\r\n    State internal _state;\r\n\r\n    constructor(\r\n        IERC20 token_,\r\n        uint256 startTime_,\r\n        uint256 vestingPeriod_,\r\n        uint256 cliffPeriod_,\r\n        uint256 initialReleaseFraction_,\r\n        address[] memory wallets_,\r\n        uint128[] memory amounts_\r\n    ) {\r\n        require(wallets_.length == amounts_.length, \"number of elements in lists must match\");\r\n        // we put strong requirements for vesting parameters: this is not a generic vesting contract,\r\n        // we support and test for just a limited range of parameters, see below\r\n        require(vestingPeriod_ > 0, \"vestingPeriod_ must be greater than 0\");\r\n        // all periods must be divisible by 30 days\r\n        require(vestingPeriod_ % DAYS_30_PERIOD == 0, \"vestingPeriod_ must be divisible by 30 days\");\r\n        require(cliffPeriod_ % DAYS_30_PERIOD == 0, \"cliffPeriod_ must be divisible by 30 days\");\r\n        // cliff must be shorted than total vesting period\r\n        require(cliffPeriod_ < vestingPeriod_, \"cliffPeriod_ must be less than vestingPeriod_\");\r\n        // decimal fraction is between 0 and FRACTION_WHOLE\r\n        require(initialReleaseFraction_ <= FRACTION_WHOLE, \"initialReleaseFraction_ must be in range <0, 10**18>\");\r\n        // cliff cannot be present if initial release is set\r\n        require(\r\n            !(initialReleaseFraction_ > 0 && cliffPeriod_ > 0),\r\n            \"cliff period and initial release cannot be set together\"\r\n        );\r\n\r\n        _token = token_;\r\n        _startTime = startTime_;\r\n        _vestingPeriod = vestingPeriod_;\r\n        _cliffPeriod = cliffPeriod_;\r\n        _initialReleaseFraction = initialReleaseFraction_;\r\n\r\n        // create stakes, duplicates override each other and are not checked\r\n        uint256 totalLockedAmount;\r\n        for (uint256 ii = 0; ii < wallets_.length; ii += 1) {\r\n            // duplicates in list of wallets are not allowed\r\n            require(_stakes[wallets_[ii]].totalTokens == 0, \"Duplicates in list of wallets not allowed\");\r\n\r\n            _stakes[wallets_[ii]].totalTokens = amounts_[ii];\r\n            totalLockedAmount += amounts_[ii];\r\n            emit LogLock(wallets_[ii], amounts_[ii]);\r\n        }\r\n        _totalLockedAmount = totalLockedAmount;\r\n        emit LogInitialized(totalLockedAmount);\r\n    }\r\n\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    function startTime() public view returns (uint256) {\r\n        return _startTime;\r\n    }\r\n\r\n    function vestingPeriod() public view returns (uint256) {\r\n        return _vestingPeriod;\r\n    }\r\n\r\n    function initialReleaseFraction() public view returns (uint256) {\r\n        return _initialReleaseFraction;\r\n    }\r\n\r\n    function cliffPeriod() public view returns (uint256) {\r\n        return _cliffPeriod;\r\n    }\r\n\r\n    function unlockedTokensOf(address sender) public view returns (uint256) {\r\n        return _stakes[sender].unlockedTokens;\r\n    }\r\n\r\n    function totalTokensOf(address sender) public view returns (uint256) {\r\n        return _stakes[sender].totalTokens;\r\n    }\r\n\r\n    function totalLockedTokens() public view returns (uint256) {\r\n        return _totalLockedAmount;\r\n    }\r\n\r\n    function state() public view returns (State) {\r\n        return _state;\r\n    }\r\n\r\n    function tokensVested(address sender, uint256 timestamp) public view returns (uint256 vestedTokens) {\r\n        return tokensVestedInternal(_stakes[sender].totalTokens, timestamp);\r\n    }\r\n\r\n    function release() public onlyFunded {\r\n        address sender = msg.sender;\r\n        UnlockState memory stake = _stakes[sender];\r\n        uint256 unlockAmount = tokensVestedInternal(stake.totalTokens, block.timestamp) - stake.unlockedTokens;\r\n\r\n        // this should never happen\r\n        assert(stake.totalTokens >= stake.unlockedTokens + unlockAmount);\r\n\r\n        _stakes[sender].unlockedTokens += unlockAmount;\r\n\r\n        emit LogRelease(sender, unlockAmount);\r\n        token().safeTransfer(sender, unlockAmount);\r\n    }\r\n\r\n    function fund() public onlyInitialized {\r\n        // change state first so there's no re-entry, contract reverts in all error cases\r\n        _state = State.Funded;\r\n\r\n        // transfer only what is missing, that allows to fund contract in two ways\r\n        // (1) token transfer to contract, then anyone can call fund() function\r\n        // (2) approve() and transferFrom from msg.sender\r\n        uint256 owned = _token.balanceOf(address(this));\r\n        if (owned < _totalLockedAmount) {\r\n            // attempt to transfer sufficient amount of tokens from sender\r\n            uint256 due = _totalLockedAmount - owned;\r\n            // check allowance to provide nice revert code\r\n            require(\r\n                token().allowance(msg.sender, address(this)) >= due,\r\n                \"No sufficient allowance to fund the contract\"\r\n            );\r\n            token().safeTransferFrom(msg.sender, address(this), due);\r\n        }\r\n\r\n        // emit funded log\r\n        emit LogFunded();\r\n    }\r\n\r\n    function tokensVestedInternal(uint256 totalTokens, uint256 timestamp) internal view returns (uint256 vestedTokens) {\r\n        // returns 0 before (start time + cliff period)\r\n        // initial release is obtained after cliff\r\n        if (timestamp >= _startTime + _cliffPeriod) {\r\n            uint256 timeVestedSoFar = Math.min(timestamp - _startTime, _vestingPeriod);\r\n            // compute initial release as fraction where FRACTION_WHOLE is total\r\n            uint256 initialRelease = (totalTokens * _initialReleaseFraction) / FRACTION_WHOLE;\r\n            // return initial release + the remainder proportionally to time from vesting start\r\n            // mul first for best precision, v.8 compiler reverts on overflows\r\n            vestedTokens = ((totalTokens - initialRelease) * timeVestedSoFar) / _vestingPeriod + initialRelease;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/LeaverTokenLock.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract LeaverTokenLock is TokenLock {\r\n    using SafeERC20 for IERC20;\r\n\r\n    enum LeaverType {\r\n        None,\r\n        GoodLeaver,\r\n        BadLeaver\r\n    }\r\n\r\n    event LogLeave(address indexed leaver, LeaverType leaverType, uint256 newTotalStake);\r\n    event LogLockAmount(address indexed wallet, uint256 amount);\r\n\r\n    // part of the accumulated tokens that stays with bad leaver\r\n    uint256 internal constant BAD_LEAVER_DIVISOR = 10;\r\n\r\n    // part of the tokens accumulated in the future that stays with the good leaver\r\n    uint256 internal constant GOOD_LEAVER_DIVISOR = 2;\r\n\r\n    // manager address that can execute leave method\r\n    address internal _manager;\r\n\r\n    // information on leavers\r\n    mapping(address => LeaverType) internal _leavers;\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager, \"Only manager\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNonLeaver(address wallet) {\r\n        require(_leavers[wallet] == LeaverType.None, \"Specified wallet already left\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 token_,\r\n        uint256 startTime_,\r\n        uint256 vestingPeriod_,\r\n        address manager_,\r\n        address[] memory wallets_,\r\n        uint128[] memory amounts_\r\n    ) TokenLock(token_, startTime_, vestingPeriod_, 0, 0, wallets_, amounts_) {\r\n        _manager = manager_;\r\n    }\r\n\r\n    function managerAddress() public view returns (address) {\r\n        return _manager;\r\n    }\r\n\r\n    function hasLeft(address wallet) public view returns (LeaverType) {\r\n        return _leavers[wallet];\r\n    }\r\n\r\n    function lockAmount(address wallet, uint256 amount) public onlyManager onlyFunded onlyNonLeaver(wallet) {\r\n        require(wallet != _manager, \"Manager cannot restake itself\");\r\n\r\n        UnlockState memory managerStake = _stakes[_manager];\r\n\r\n        // the difference between total tokens and unlocked tokens can be restaked to other accounts\r\n        require(managerStake.totalTokens - managerStake.unlockedTokens >= amount, \"Not enough available stake to add\");\r\n\r\n        // add stake to existing or new account\r\n        _stakes[wallet].totalTokens += amount;\r\n        // decrease manager stake\r\n        _stakes[_manager].totalTokens = managerStake.totalTokens - amount;\r\n\r\n        emit LogLockAmount(wallet, amount);\r\n    }\r\n\r\n    function leaveWallet(address wallet, bool isBadLeaver) public onlyManager onlyFunded onlyNonLeaver(wallet) {\r\n        require(wallet != _manager, \"Manager cannot leave\");\r\n\r\n        UnlockState memory stake = _stakes[wallet];\r\n        uint256 accumulatedSoFar = tokensAccumulatedInternal(stake.totalTokens, block.timestamp);\r\n        uint256 newTotalStake = 0;\r\n\r\n        if (isBadLeaver) {\r\n            // bad leavers keep what was released as tokens cannot be taken back and keeps 10% of accumulated max\r\n            newTotalStake = Math.max(stake.unlockedTokens, accumulatedSoFar / BAD_LEAVER_DIVISOR);\r\n        } else {\r\n            // 50% of what will be accumulated if not bad leaver\r\n            newTotalStake = accumulatedSoFar + (stake.totalTokens - accumulatedSoFar) / GOOD_LEAVER_DIVISOR;\r\n        }\r\n        // set new stake for leaver\r\n        // total stake in the contract must be invariant\r\n        // we take (stake.totalTokens - newTotalStake) from _stakes[wallet].totalTokens (leaver stake)\r\n        _stakes[wallet].totalTokens = newTotalStake;\r\n        // and add it to the manager stake\r\n        _stakes[msg.sender].totalTokens += (stake.totalTokens - newTotalStake);\r\n\r\n        // mark wallet left\r\n        LeaverType leaverType = isBadLeaver ? LeaverType.BadLeaver : LeaverType.GoodLeaver;\r\n        _leavers[wallet] = leaverType;\r\n\r\n        emit LogLeave(wallet, leaverType, newTotalStake);\r\n    }\r\n\r\n    function tokensAccumulated(address sender, uint256 timestamp) public view returns (uint256 accumulatedTokens) {\r\n        return tokensAccumulatedInternal(_stakes[sender].totalTokens, timestamp);\r\n    }\r\n\r\n    function tokensAccumulatedInternal(uint256 totalTokens, uint256 timestamp)\r\n        internal\r\n        view\r\n        returns (uint256 accumulatedTokens)\r\n    {\r\n        // accumulation period starts \"vestingPeriod\" before startTime\r\n        uint256 accStartTime = _startTime - _vestingPeriod;\r\n        if (timestamp >= accStartTime) {\r\n            // and lasts 2 * _vestingPeriod\r\n            uint256 accPeriod = 2 * _vestingPeriod;\r\n            uint256 timeAccSoFar = Math.min(timestamp - accStartTime, accPeriod);\r\n            // mul first for best precision, v.8 compiler reverts on overflows\r\n            accumulatedTokens = (totalTokens * timeAccSoFar) / accPeriod;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"wallets_\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts_\",\"type\":\"uint128[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLockedAmount\",\"type\":\"uint256\"}],\"name\":\"LogInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"leaver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LeaverTokenLock.LeaverType\",\"name\":\"leaverType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalStake\",\"type\":\"uint256\"}],\"name\":\"LogLeave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogLockAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRelease\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cliffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"hasLeft\",\"outputs\":[{\"internalType\":\"enum LeaverTokenLock.LeaverType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialReleaseFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBadLeaver\",\"type\":\"bool\"}],\"name\":\"leaveWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum TokenLock.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"tokensAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"tokensVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"totalTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"unlockedTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LeaverTokenLock", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c6065b9fc8171ad3d29bad5107092496817589720000000000000000000000000000000000000000000000000000000063405b100000000000000000000000000000000000000000000000000000000001da9c000000000000000000000000001098d4bd64caad64732a72c8b2f4d2c747a710f100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000030f63c71485a37de97654a0f993874931ad817ed0000000000000000000000003d2ed5268fb3efaaeef39331b6fe1021c84cd1490000000000000000000000009de32009b16cb8af4bc19009aefa40515edc93c9000000000000000000000000e554755dbdd698a2f15575eb9b932f2eb6518eae000000000000000000000000bd831e176710293c9fc4560a91cadba2b2f4f3bb00000000000000000000000051a996b045346c2682e89fb777ca60cf3ad5925c0000000000000000000000007f8c5c8bbb14d2a43210abd5377f4fe3c9249bab000000000000000000000000e8bba2f6bcf6893e66f316d7f2546ee8534f286800000000000000000000000026c34650c44a2e72dd9d5a06bb7bc3b83f95c16100000000000000000000000042490364e3ef2041705a64aafcb49c5c16e9e42b0000000000000000000000001e7c30ecf24a3ba6eb54324a17bb16a8b1472088000000000000000000000000e146fc47b3b92934124ae554bae683c42aa01e3c0000000000000000000000001098d4bd64caad64732a72c8b2f4d2c747a710f1000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000009ed194db19b238c00000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001a784379d99db42000000000000000000000000000000000000000000000000002a5a058fc295ed000000000000000000000000000000000000000000000000013da329b63364718000000000000000000000000000000000000000000000002a6f32928a7737f6800000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://07ad4e7dd3c277771d6a8ee43ad7c9e5c3f75ff95359d1df5b18a9f0ef5d569f"}