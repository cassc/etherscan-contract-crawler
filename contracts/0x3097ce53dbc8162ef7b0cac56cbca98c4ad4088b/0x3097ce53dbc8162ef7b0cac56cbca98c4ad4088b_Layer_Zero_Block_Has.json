{"SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title Layer Zero Block Hash Sender\r\n@license MIT\r\n@author Curve Finance\r\n\"\"\"\r\n\r\ninterface LZEndpoint:\r\n    def estimateFees(\r\n        _dstChainId: uint16,\r\n        _userApplication: address,\r\n        _payload: Bytes[64],\r\n        _payInZRO: bool,\r\n        _adapterParams: Bytes[34]\r\n    ) -> uint256: view\r\n    def send(\r\n        _dstChainId: uint16,\r\n        _destination: Bytes[40],\r\n        _payload: Bytes[64],\r\n        _refund_address: address,\r\n        _zroPaymentAddress: address,\r\n        _adapterParams: Bytes[34]\r\n    ): payable\r\n\r\n\r\nevent SetGasLimit:\r\n    gas_limit: uint256\r\n\r\nevent TransferOwnership:\r\n    owner: indexed(address)\r\n\r\n\r\nLZ_ENDPOINT: public(constant(address)) = 0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675\r\n\r\n\r\nENCODED_DESTINATION: immutable(Bytes[40])\r\n\r\nLZ_CHAIN_ID: public(immutable(uint16))\r\n\r\n\r\ngas_limit: public(uint256)\r\n\r\nowner: public(address)\r\nfuture_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_gas_limit: uint256, _lz_chain_id: uint16):\r\n    self.gas_limit = _gas_limit\r\n    log SetGasLimit(_gas_limit)\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)\r\n\r\n    ENCODED_DESTINATION = concat(\r\n        slice(convert(self, bytes32), 12, 20),\r\n        slice(convert(self, bytes32), 12, 20)\r\n    )\r\n\r\n    LZ_CHAIN_ID = _lz_chain_id\r\n\r\n\r\n@payable\r\n@external\r\ndef transmit(_block_number: uint256, _refund_address: address = msg.sender):\r\n    \"\"\"\r\n    @notice Transmit the block hash of a finalized block\r\n    @param _block_number The block number of the block to transmit the hash of\r\n    @param _refund_address The address to refund excess ETH to\r\n    \"\"\"\r\n    assert block.number - 256 <= _block_number and _block_number < block.number - 64  # dev: invalid block\r\n\r\n    LZEndpoint(LZ_ENDPOINT).send(\r\n        LZ_CHAIN_ID,\r\n        ENCODED_DESTINATION,\r\n        _abi_encode(_block_number, blockhash(_block_number)),\r\n        _refund_address,\r\n        empty(address),\r\n        concat(b\"\\x00\\x01\", convert(self.gas_limit, bytes32)),\r\n        value=msg.value\r\n    )\r\n\r\n\r\n@view\r\n@external\r\ndef quote() -> uint256:\r\n    \"\"\"\r\n    @notice Quote the price in ETH to attach when calling the `transmit` function\r\n    \"\"\"\r\n    return LZEndpoint(LZ_ENDPOINT).estimateFees(\r\n        LZ_CHAIN_ID,\r\n        self,\r\n        empty(Bytes[64]),\r\n        False,\r\n        concat(b\"\\x00\\x01\", convert(self.gas_limit, bytes32))\r\n    )\r\n\r\n\r\n@external\r\ndef set_gas_limit(_gas_limit: uint256):\r\n    \"\"\"\r\n    @notice Set the gas limit to use for cross-chain transactions\r\n    @param _gas_limit The gas limit for cross-chain transactions\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.gas_limit = _gas_limit\r\n    log SetGasLimit(_gas_limit)\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership to `_future_owner`\r\n    @param _future_owner The account to commit as the future owner\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.future_owner = _future_owner\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept the transfer of ownership\r\n    @dev Only the committed future owner can call this function\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only future owner\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)", "ABI": "[{\"name\":\"SetGasLimit\",\"inputs\":[{\"name\":\"gas_limit\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TransferOwnership\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_gas_limit\",\"type\":\"uint256\"},{\"name\":\"_lz_chain_id\",\"type\":\"uint16\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"transmit\",\"inputs\":[{\"name\":\"_block_number\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"transmit\",\"inputs\":[{\"name\":\"_block_number\",\"type\":\"uint256\"},{\"name\":\"_refund_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"quote\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_gas_limit\",\"inputs\":[{\"name\":\"_gas_limit\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"LZ_ENDPOINT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"LZ_CHAIN_ID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gas_limit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Layer Zero Block Hash Sender", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000b71b0000000000000000000000000000000000000000000000000000000000000006a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}