{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/// @title DN404\r\n/// @notice DN404 is a hybrid ERC20 and ERC721 implementation that mints\r\n/// and burns NFTs based on an account's ERC20 token balance.\r\n///\r\n/// @author vectorized.eth (@optimizoor)\r\n/// @author Quit (@0xQuit)\r\n/// @author Michael Amadi (@AmadiMichaels)\r\n/// @author cygaar (@0xCygaar)\r\n/// @author Thomas (@0xjustadev)\r\n/// @author Harrison (@PopPunkOnChain)\r\n///\r\n/// @dev Note:\r\n/// - The ERC721 data is stored in this base DN404 contract, however a\r\n///   DN404Mirror contract ***MUST*** be deployed and linked during\r\n///   initialization.\r\nabstract contract DN404 {\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                           EVENTS                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /// @dev Emitted when `target` sets their skipNFT flag to `status`.\r\n    event SkipNFTSet(address indexed target, bool status);\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Thrown when attempting to double-initialize the contract.\r\n    error DNAlreadyInitialized();\r\n\r\n    /// @dev Thrown when attempting to transfer or burn more tokens than sender's balance.\r\n    error InsufficientBalance();\r\n\r\n    /// @dev Thrown when a spender attempts to transfer tokens with an insufficient allowance.\r\n    error InsufficientAllowance();\r\n\r\n    /// @dev Thrown when minting an amount of tokens that would overflow the max tokens.\r\n    error TotalSupplyOverflow();\r\n\r\n    /// @dev Thrown when the caller for a fallback NFT function is not the mirror contract.\r\n    error SenderNotMirror();\r\n\r\n    /// @dev Thrown when attempting to transfer tokens to the zero address.\r\n    error TransferToZeroAddress();\r\n\r\n    /// @dev Thrown when the mirror address provided for initialization is the zero address.\r\n    error MirrorAddressIsZero();\r\n\r\n    /// @dev Thrown when the link call to the mirror contract reverts.\r\n    error LinkMirrorContractFailed();\r\n\r\n    /// @dev Thrown when setting an NFT token approval\r\n    /// and the caller is not the owner or an approved operator.\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /// @dev Thrown when transferring an NFT\r\n    /// and the caller is not the owner or an approved operator.\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /// @dev Thrown when transferring an NFT and the from address is not the current owner.\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /// @dev Thrown when checking the owner or approved address for an non-existent NFT.\r\n    error TokenDoesNotExist();\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                         CONSTANTS                          */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Amount of token balance that is equal to one NFT.\r\n    uint256 internal constant _WAD = 10 ** 18;\r\n\r\n    /// @dev The maximum token ID allowed for an NFT.\r\n    uint256 internal constant _MAX_TOKEN_ID = 0xffffffff;\r\n\r\n    /// @dev The maximum possible token supply.\r\n    uint256 internal constant _MAX_SUPPLY = 10 ** 18 * 0xffffffff - 1;\r\n\r\n    /// @dev The flag to denote that the address data is initialized.\r\n    uint8 internal constant _ADDRESS_DATA_INITIALIZED_FLAG = 1 << 0;\r\n\r\n    /// @dev The flag to denote that the address should skip NFTs.\r\n    uint8 internal constant _ADDRESS_DATA_SKIP_NFT_FLAG = 1 << 1;\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                          STORAGE                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Struct containing an address's token data and settings.\r\n    struct AddressData {\r\n        // Auxiliary data.\r\n        uint88 aux;\r\n        // Flags for `initialized` and `skipNFT`.\r\n        uint8 flags;\r\n        // The alias for the address. Zero means absence of an alias.\r\n        uint32 addressAlias;\r\n        // The number of NFT tokens.\r\n        uint32 ownedLength;\r\n        // The token balance in wei.\r\n        uint96 balance;\r\n    }\r\n\r\n    /// @dev A uint32 map in storage.\r\n    struct Uint32Map {\r\n        mapping(uint256 => uint256) map;\r\n    }\r\n\r\n    /// @dev Struct containing the base token contract storage.\r\n    struct DN404Storage {\r\n        // Current number of address aliases assigned.\r\n        uint32 numAliases;\r\n        // Next token ID to assign for an NFT mint.\r\n        uint32 nextTokenId;\r\n        // Total supply of minted NFTs.\r\n        uint32 totalNFTSupply;\r\n        // Total supply of tokens.\r\n        uint96 totalSupply;\r\n        // Address of the NFT mirror contract.\r\n        address mirrorERC721;\r\n        // Mapping of a user alias number to their address.\r\n        mapping(uint32 => address) aliasToAddress;\r\n        // Mapping of user operator approvals for NFTs.\r\n        mapping(address => mapping(address => bool)) operatorApprovals;\r\n        // Mapping of NFT token approvals to approved operators.\r\n        mapping(uint256 => address) tokenApprovals;\r\n        // Mapping of user allowances for token spenders.\r\n        mapping(address => mapping(address => uint256)) allowance;\r\n        // Mapping of NFT token IDs owned by an address.\r\n        mapping(address => Uint32Map) owned;\r\n        // Even indices: owner aliases. Odd indices: owned indices.\r\n        Uint32Map oo;\r\n        // Mapping of user account AddressData\r\n        mapping(address => AddressData) addressData;\r\n    }\r\n\r\n    /// @dev Returns a storage pointer for DN404Storage.\r\n    function _getDN404Storage() internal pure virtual returns (DN404Storage storage $) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // `uint72(bytes9(keccak256(\"DN404_STORAGE\")))`.\r\n            $.slot := 0xa20d6e21d0e5255308 // Truncate to 9 bytes to reduce bytecode size.\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                         INITIALIZER                        */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Initializes the DN404 contract with an\r\n    /// `initialTokenSupply`, `initialTokenOwner` and `mirror` NFT contract address.\r\n    function _initializeDN404(\r\n        uint256 initialTokenSupply,\r\n        address initialSupplyOwner,\r\n        address mirror\r\n    ) internal virtual {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        if ($.nextTokenId != 0) revert DNAlreadyInitialized();\r\n\r\n        if (mirror == address(0)) revert MirrorAddressIsZero();\r\n        _linkMirrorContract(mirror);\r\n\r\n        $.nextTokenId = 1;\r\n        $.mirrorERC721 = mirror;\r\n\r\n        if (initialTokenSupply > 0) {\r\n            if (initialSupplyOwner == address(0)) revert TransferToZeroAddress();\r\n            if (initialTokenSupply > _MAX_SUPPLY) revert TotalSupplyOverflow();\r\n\r\n            $.totalSupply = uint96(initialTokenSupply);\r\n            AddressData storage initialOwnerAddressData = _addressData(initialSupplyOwner);\r\n            initialOwnerAddressData.balance = uint96(initialTokenSupply);\r\n\r\n            emit Transfer(address(0), initialSupplyOwner, initialTokenSupply);\r\n\r\n            _setSkipNFT(initialSupplyOwner, true);\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*               METADATA FUNCTIONS TO OVERRIDE               */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the name of the token.\r\n    function name() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the symbol of the token.\r\n    function symbol() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                      ERC20 OPERATIONS                      */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the decimals places of the token. Always 18.\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens in existence.\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return uint256(_getDN404Storage().totalSupply);\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens owned by `owner`.\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        return _getDN404Storage().addressData[owner].balance;\r\n    }\r\n\r\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _getDN404Storage().allowance[owner][spender];\r\n    }\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        $.allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfer `amount` tokens from the caller to `to`.\r\n    ///\r\n    /// Will burn sender NFTs if balance after transfer is less than\r\n    /// the amount required to support the current NFT balance.\r\n    ///\r\n    /// Will mint NFTs to `to` if the recipient's new balance supports\r\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\r\n    /// set to false.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Transfers `amount` tokens from `from` to `to`.\r\n    ///\r\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\r\n    ///\r\n    /// Will burn sender NFTs if balance after transfer is less than\r\n    /// the amount required to support the current NFT balance.\r\n    ///\r\n    /// Will mint NFTs to `to` if the recipient's new balance supports\r\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\r\n    /// set to false.\r\n    ///\r\n    /// Requirements:\r\n    /// - `from` must at least have `amount`.\r\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        uint256 allowed = $.allowance[from][msg.sender];\r\n\r\n        if (allowed != type(uint256).max) {\r\n            if (amount > allowed) revert InsufficientAllowance();\r\n        unchecked {\r\n            $.allowance[from][msg.sender] = allowed - amount;\r\n        }\r\n        }\r\n\r\n        _transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                  INTERNAL MINT FUNCTIONS                   */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\r\n    ///\r\n    /// Will mint NFTs to `to` if the recipient's new balance supports\r\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\r\n    /// set to false.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        AddressData storage toAddressData = _addressData(to);\r\n\r\n    unchecked {\r\n        uint256 currentTokenSupply = uint256($.totalSupply) + amount;\r\n        if (amount > _MAX_SUPPLY || currentTokenSupply > _MAX_SUPPLY) {\r\n            revert TotalSupplyOverflow();\r\n        }\r\n        $.totalSupply = uint96(currentTokenSupply);\r\n\r\n        uint256 toBalance = toAddressData.balance + amount;\r\n        toAddressData.balance = uint96(toBalance);\r\n\r\n        if (toAddressData.flags & _ADDRESS_DATA_SKIP_NFT_FLAG == 0) {\r\n            Uint32Map storage toOwned = $.owned[to];\r\n            uint256 toIndex = toAddressData.ownedLength;\r\n            uint256 toEnd = toBalance / _WAD;\r\n            _PackedLogs memory packedLogs = _packedLogsMalloc(_zeroFloorSub(toEnd, toIndex));\r\n\r\n            if (packedLogs.logs.length != 0) {\r\n                uint256 maxNFTId = $.totalSupply / _WAD;\r\n                uint32 toAlias = _registerAndResolveAlias(toAddressData, to);\r\n                uint256 id = $.nextTokenId;\r\n                $.totalNFTSupply += uint32(packedLogs.logs.length);\r\n                toAddressData.ownedLength = uint32(toEnd);\r\n                // Mint loop.\r\n                do {\r\n                    while (_get($.oo, _ownershipIndex(id)) != 0) {\r\n                        if (++id > maxNFTId) id = 1;\r\n                    }\r\n                    _set(toOwned, toIndex, uint32(id));\r\n                    _setOwnerAliasAndOwnedIndex($.oo, id, toAlias, uint32(toIndex++));\r\n                    _packedLogsAppend(packedLogs, to, id, 0);\r\n                    if (++id > maxNFTId) id = 1;\r\n                } while (toIndex != toEnd);\r\n                $.nextTokenId = uint32(id);\r\n                _packedLogsSend(packedLogs, $.mirrorERC721);\r\n            }\r\n        }\r\n    }\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                  INTERNAL BURN FUNCTIONS                   */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\r\n    ///\r\n    /// Will burn sender NFTs if balance after transfer is less than\r\n    /// the amount required to support the current NFT balance.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        AddressData storage fromAddressData = _addressData(from);\r\n\r\n        uint256 fromBalance = fromAddressData.balance;\r\n        if (amount > fromBalance) revert InsufficientBalance();\r\n\r\n        uint256 currentTokenSupply = $.totalSupply;\r\n\r\n    unchecked {\r\n        fromBalance -= amount;\r\n        fromAddressData.balance = uint96(fromBalance);\r\n        currentTokenSupply -= amount;\r\n        $.totalSupply = uint96(currentTokenSupply);\r\n\r\n        Uint32Map storage fromOwned = $.owned[from];\r\n        uint256 fromIndex = fromAddressData.ownedLength;\r\n        uint256 nftAmountToBurn = _zeroFloorSub(fromIndex, fromBalance / _WAD);\r\n\r\n        if (nftAmountToBurn != 0) {\r\n            $.totalNFTSupply -= uint32(nftAmountToBurn);\r\n\r\n            _PackedLogs memory packedLogs = _packedLogsMalloc(nftAmountToBurn);\r\n\r\n            uint256 fromEnd = fromIndex - nftAmountToBurn;\r\n            // Burn loop.\r\n            do {\r\n                uint256 id = _get(fromOwned, --fromIndex);\r\n                _setOwnerAliasAndOwnedIndex($.oo, id, 0, 0);\r\n                delete $.tokenApprovals[id];\r\n                _packedLogsAppend(packedLogs, from, id, 1);\r\n            } while (fromIndex != fromEnd);\r\n\r\n            fromAddressData.ownedLength = uint32(fromIndex);\r\n            _packedLogsSend(packedLogs, $.mirrorERC721);\r\n        }\r\n    }\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Moves `amount` of tokens from `from` to `to`.\r\n    ///\r\n    /// Will burn sender NFTs if balance after transfer is less than\r\n    /// the amount required to support the current NFT balance.\r\n    ///\r\n    /// Will mint NFTs to `to` if the recipient's new balance supports\r\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\r\n    /// set to false.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        AddressData storage fromAddressData = _addressData(from);\r\n        AddressData storage toAddressData = _addressData(to);\r\n\r\n        _TransferTemps memory t;\r\n        t.fromOwnedLength = fromAddressData.ownedLength;\r\n        t.toOwnedLength = toAddressData.ownedLength;\r\n        t.fromBalance = fromAddressData.balance;\r\n\r\n        if (amount > t.fromBalance) revert InsufficientBalance();\r\n\r\n    unchecked {\r\n        t.fromBalance -= amount;\r\n        fromAddressData.balance = uint96(t.fromBalance);\r\n        toAddressData.balance = uint96(t.toBalance = toAddressData.balance + amount);\r\n\r\n        t.nftAmountToBurn = _zeroFloorSub(t.fromOwnedLength, t.fromBalance / _WAD);\r\n\r\n        if (toAddressData.flags & _ADDRESS_DATA_SKIP_NFT_FLAG == 0) {\r\n            if (from == to) t.toOwnedLength = t.fromOwnedLength - t.nftAmountToBurn;\r\n            t.nftAmountToMint = _zeroFloorSub(t.toBalance / _WAD, t.toOwnedLength);\r\n        }\r\n\r\n        _PackedLogs memory packedLogs = _packedLogsMalloc(t.nftAmountToBurn + t.nftAmountToMint);\r\n\r\n        if (t.nftAmountToBurn != 0) {\r\n            Uint32Map storage fromOwned = $.owned[from];\r\n            uint256 fromIndex = t.fromOwnedLength;\r\n            uint256 fromEnd = fromIndex - t.nftAmountToBurn;\r\n            $.totalNFTSupply -= uint32(t.nftAmountToBurn);\r\n            fromAddressData.ownedLength = uint32(fromEnd);\r\n            // Burn loop.\r\n            do {\r\n                uint256 id = _get(fromOwned, --fromIndex);\r\n                _setOwnerAliasAndOwnedIndex($.oo, id, 0, 0);\r\n                delete $.tokenApprovals[id];\r\n                _packedLogsAppend(packedLogs, from, id, 1);\r\n            } while (fromIndex != fromEnd);\r\n        }\r\n\r\n        if (t.nftAmountToMint != 0) {\r\n            Uint32Map storage toOwned = $.owned[to];\r\n            uint256 toIndex = t.toOwnedLength;\r\n            uint256 toEnd = toIndex + t.nftAmountToMint;\r\n            uint32 toAlias = _registerAndResolveAlias(toAddressData, to);\r\n            uint256 maxNFTId = $.totalSupply / _WAD;\r\n            uint256 id = $.nextTokenId;\r\n            $.totalNFTSupply += uint32(t.nftAmountToMint);\r\n            toAddressData.ownedLength = uint32(toEnd);\r\n            // Mint loop.\r\n            do {\r\n                while (_get($.oo, _ownershipIndex(id)) != 0) {\r\n                    if (++id > maxNFTId) id = 1;\r\n                }\r\n                _set(toOwned, toIndex, uint32(id));\r\n                _setOwnerAliasAndOwnedIndex($.oo, id, toAlias, uint32(toIndex++));\r\n                _packedLogsAppend(packedLogs, to, id, 0);\r\n                if (++id > maxNFTId) id = 1;\r\n            } while (toIndex != toEnd);\r\n            $.nextTokenId = uint32(id);\r\n        }\r\n\r\n        if (packedLogs.logs.length != 0) {\r\n            _packedLogsSend(packedLogs, $.mirrorERC721);\r\n        }\r\n    }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Call must originate from the mirror contract.\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    ///   `msgSender` must be the owner of the token, or be approved to manage the token.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _transferFromNFT(address from, address to, uint256 id, address msgSender)\r\n    internal\r\n    virtual\r\n    {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        address owner = $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\r\n\r\n        if (from != owner) revert TransferFromIncorrectOwner();\r\n\r\n        if (msgSender != from) {\r\n            if (!$.operatorApprovals[from][msgSender]) {\r\n                if (msgSender != $.tokenApprovals[id]) {\r\n                    revert TransferCallerNotOwnerNorApproved();\r\n                }\r\n            }\r\n        }\r\n\r\n        AddressData storage fromAddressData = _addressData(from);\r\n        AddressData storage toAddressData = _addressData(to);\r\n\r\n        fromAddressData.balance -= uint96(_WAD);\r\n\r\n    unchecked {\r\n        toAddressData.balance += uint96(_WAD);\r\n\r\n        _set($.oo, _ownershipIndex(id), _registerAndResolveAlias(toAddressData, to));\r\n        delete $.tokenApprovals[id];\r\n\r\n        uint256 updatedId = _get($.owned[from], --fromAddressData.ownedLength);\r\n        _set($.owned[from], _get($.oo, _ownedIndex(id)), uint32(updatedId));\r\n\r\n        uint256 n = toAddressData.ownedLength++;\r\n        _set($.oo, _ownedIndex(updatedId), _get($.oo, _ownedIndex(id)));\r\n        _set($.owned[to], n, uint32(id));\r\n        _set($.oo, _ownedIndex(id), uint32(n));\r\n    }\r\n\r\n        emit Transfer(from, to, _WAD);\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                 DATA HITCHHIKING FUNCTIONS                 */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the auxiliary data for `owner`.\r\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\r\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\r\n    function _getAux(address owner) internal view virtual returns (uint88) {\r\n        return _getDN404Storage().addressData[owner].aux;\r\n    }\r\n\r\n    /// @dev Set the auxiliary data for `owner` to `value`.\r\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\r\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\r\n    function _setAux(address owner, uint88 value) internal virtual {\r\n        _getDN404Storage().addressData[owner].aux = value;\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                     SKIP NFT FUNCTIONS                     */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns true if account `a` will skip NFT minting on token mints and transfers.\r\n    /// Returns false if account `a` will mint NFTs on token mints and transfers.\r\n    function getSkipNFT(address a) public view virtual returns (bool) {\r\n        AddressData storage d = _getDN404Storage().addressData[a];\r\n        if (d.flags & _ADDRESS_DATA_INITIALIZED_FLAG == 0) return _hasCode(a);\r\n        return d.flags & _ADDRESS_DATA_SKIP_NFT_FLAG != 0;\r\n    }\r\n\r\n    /// @dev Sets the caller's skipNFT flag to `skipNFT`\r\n    ///\r\n    /// Emits a {SkipNFTSet} event.\r\n    function setSkipNFT(bool skipNFT) public virtual {\r\n        _setSkipNFT(msg.sender, skipNFT);\r\n    }\r\n\r\n    /// @dev Internal function to set account `a` skipNFT flag to `state`\r\n    ///\r\n    /// Initializes account `a` AddressData if it is not currently initialized.\r\n    ///\r\n    /// Emits a {SkipNFTSet} event.\r\n    function _setSkipNFT(address a, bool state) internal virtual {\r\n        AddressData storage d = _addressData(a);\r\n        if ((d.flags & _ADDRESS_DATA_SKIP_NFT_FLAG != 0) != state) {\r\n            d.flags ^= _ADDRESS_DATA_SKIP_NFT_FLAG;\r\n        }\r\n        emit SkipNFTSet(a, state);\r\n    }\r\n\r\n    /// @dev Returns a storage data pointer for account `a` AddressData\r\n    ///\r\n    /// Initializes account `a` AddressData if it is not currently initialized.\r\n    function _addressData(address a) internal virtual returns (AddressData storage d) {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n        d = $.addressData[a];\r\n\r\n        if (d.flags & _ADDRESS_DATA_INITIALIZED_FLAG == 0) {\r\n            uint8 flags = _ADDRESS_DATA_INITIALIZED_FLAG;\r\n            if (_hasCode(a)) flags |= _ADDRESS_DATA_SKIP_NFT_FLAG;\r\n            d.flags = flags;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the `addressAlias` of account `to`.\r\n    ///\r\n    /// Assigns and registers the next alias if `to` alias was not previously registered.\r\n    function _registerAndResolveAlias(AddressData storage toAddressData, address to)\r\n    internal\r\n    virtual\r\n    returns (uint32 addressAlias)\r\n    {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n        addressAlias = toAddressData.addressAlias;\r\n        if (addressAlias == 0) {\r\n            addressAlias = ++$.numAliases;\r\n            toAddressData.addressAlias = addressAlias;\r\n            $.aliasToAddress[addressAlias] = to;\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                     MIRROR OPERATIONS                      */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the address of the mirror NFT contract.\r\n    function mirrorERC721() public view virtual returns (address) {\r\n        return _getDN404Storage().mirrorERC721;\r\n    }\r\n\r\n    /// @dev Returns the total NFT supply.\r\n    function _totalNFTSupply() internal view virtual returns (uint256) {\r\n        return _getDN404Storage().totalNFTSupply;\r\n    }\r\n\r\n    /// @dev Returns `owner` NFT balance.\r\n    function _balanceOfNFT(address owner) internal view virtual returns (uint256) {\r\n        return _getDN404Storage().addressData[owner].ownedLength;\r\n    }\r\n\r\n    /// @dev Returns the owner of token `id`.\r\n    /// Returns the zero address instead of reverting if the token does not exist.\r\n    function _ownerAt(uint256 id) internal view virtual returns (address) {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n        return $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\r\n    }\r\n\r\n    /// @dev Returns the owner of token `id`.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\r\n        if (!_exists(id)) revert TokenDoesNotExist();\r\n        return _ownerAt(id);\r\n    }\r\n\r\n    /// @dev Returns if token `id` exists.\r\n    function _exists(uint256 id) internal view virtual returns (bool) {\r\n        return _ownerAt(id) != address(0);\r\n    }\r\n\r\n    /// @dev Returns the account approved to manage token `id`.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function _getApproved(uint256 id) internal view virtual returns (address) {\r\n        if (!_exists(id)) revert TokenDoesNotExist();\r\n        return _getDN404Storage().tokenApprovals[id];\r\n    }\r\n\r\n    /// @dev Sets `spender` as the approved account to manage token `id`, using `msgSender`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `msgSender` must be the owner or an approved operator for the token owner.\r\n    function _approveNFT(address spender, uint256 id, address msgSender)\r\n    internal\r\n    virtual\r\n    returns (address)\r\n    {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        address owner = $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\r\n\r\n        if (msgSender != owner) {\r\n            if (!$.operatorApprovals[owner][msgSender]) {\r\n                revert ApprovalCallerNotOwnerNorApproved();\r\n            }\r\n        }\r\n\r\n        $.tokenApprovals[id] = spender;\r\n\r\n        return owner;\r\n    }\r\n\r\n    /// @dev Approve or remove the `operator` as an operator for `msgSender`,\r\n    /// without authorization checks.\r\n    function _setApprovalForAll(address operator, bool approved, address msgSender)\r\n    internal\r\n    virtual\r\n    {\r\n        _getDN404Storage().operatorApprovals[msgSender][operator] = approved;\r\n    }\r\n\r\n    /// @dev Calls the mirror contract to link it to this contract.\r\n    ///\r\n    /// Reverts if the call to the mirror contract reverts.\r\n    function _linkMirrorContract(address mirror) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, 0x0f4599e5) // `linkMirrorContract(address)`.\r\n            mstore(0x20, caller())\r\n            if iszero(and(eq(mload(0x00), 1), call(gas(), mirror, 0, 0x1c, 0x24, 0x00, 0x20))) {\r\n                mstore(0x00, 0xd125259c) // `LinkMirrorContractFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Fallback modifier to dispatch calls from the mirror NFT contract\r\n    /// to internal functions in this contract.\r\n    modifier dn404Fallback() virtual {\r\n        DN404Storage storage $ = _getDN404Storage();\r\n\r\n        uint256 fnSelector = _calldataload(0x00) >> 224;\r\n\r\n        // `isApprovedForAll(address,address)`.\r\n        if (fnSelector == 0xe985e9c5) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x44) revert();\r\n\r\n            address owner = address(uint160(_calldataload(0x04)));\r\n            address operator = address(uint160(_calldataload(0x24)));\r\n\r\n            _return($.operatorApprovals[owner][operator] ? 1 : 0);\r\n        }\r\n        // `ownerOf(uint256)`.\r\n        if (fnSelector == 0x6352211e) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x24) revert();\r\n\r\n            uint256 id = _calldataload(0x04);\r\n\r\n            _return(uint160(_ownerOf(id)));\r\n        }\r\n        // `transferFromNFT(address,address,uint256,address)`.\r\n        if (fnSelector == 0xe5eb36c8) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x84) revert();\r\n\r\n            address from = address(uint160(_calldataload(0x04)));\r\n            address to = address(uint160(_calldataload(0x24)));\r\n            uint256 id = _calldataload(0x44);\r\n            address msgSender = address(uint160(_calldataload(0x64)));\r\n\r\n            _transferFromNFT(from, to, id, msgSender);\r\n            _return(1);\r\n        }\r\n        // `setApprovalForAll(address,bool,address)`.\r\n        if (fnSelector == 0x813500fc) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x64) revert();\r\n\r\n            address spender = address(uint160(_calldataload(0x04)));\r\n            bool status = _calldataload(0x24) != 0;\r\n            address msgSender = address(uint160(_calldataload(0x44)));\r\n\r\n            _setApprovalForAll(spender, status, msgSender);\r\n            _return(1);\r\n        }\r\n        // `approveNFT(address,uint256,address)`.\r\n        if (fnSelector == 0xd10b6e0c) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x64) revert();\r\n\r\n            address spender = address(uint160(_calldataload(0x04)));\r\n            uint256 id = _calldataload(0x24);\r\n            address msgSender = address(uint160(_calldataload(0x44)));\r\n\r\n            _return(uint160(_approveNFT(spender, id, msgSender)));\r\n        }\r\n        // `getApproved(uint256)`.\r\n        if (fnSelector == 0x081812fc) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x24) revert();\r\n\r\n            uint256 id = _calldataload(0x04);\r\n\r\n            _return(uint160(_getApproved(id)));\r\n        }\r\n        // `balanceOfNFT(address)`.\r\n        if (fnSelector == 0xf5b100ea) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x24) revert();\r\n\r\n            address owner = address(uint160(_calldataload(0x04)));\r\n\r\n            _return(_balanceOfNFT(owner));\r\n        }\r\n        // `totalNFTSupply()`.\r\n        if (fnSelector == 0xe2c79281) {\r\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\r\n            if (msg.data.length < 0x04) revert();\r\n\r\n            _return(_totalNFTSupply());\r\n        }\r\n        // `implementsDN404()`.\r\n        if (fnSelector == 0xb7a94eb8) {\r\n            _return(1);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function for calls from mirror NFT contract.\r\n    fallback() external payable virtual dn404Fallback {}\r\n\r\n    receive() external payable virtual {}\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                      PRIVATE HELPERS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Struct containing packed log data for `Transfer` events to be\r\n    /// emitted by the mirror NFT contract.\r\n    struct _PackedLogs {\r\n        uint256[] logs;\r\n        uint256 offset;\r\n    }\r\n\r\n    /// @dev Initiates memory allocation for packed logs with `n` log items.\r\n    function _packedLogsMalloc(uint256 n) private pure returns (_PackedLogs memory p) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let logs := add(mload(0x40), 0x40) // Offset by 2 words for `_packedLogsSend`.\r\n            mstore(logs, n)\r\n            let offset := add(0x20, logs)\r\n            mstore(0x40, add(offset, shl(5, n)))\r\n            mstore(p, logs)\r\n            mstore(add(0x20, p), offset)\r\n        }\r\n    }\r\n\r\n    /// @dev Adds a packed log item to `p` with address `a`, token `id` and burn flag `burnBit`.\r\n    function _packedLogsAppend(_PackedLogs memory p, address a, uint256 id, uint256 burnBit)\r\n    private\r\n    pure\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let offset := mload(add(0x20, p))\r\n            mstore(offset, or(or(shl(96, a), shl(8, id)), burnBit))\r\n            mstore(add(0x20, p), add(offset, 0x20))\r\n        }\r\n    }\r\n\r\n    /// @dev Calls the `mirror` NFT contract to emit Transfer events for packed logs `p`.\r\n    function _packedLogsSend(_PackedLogs memory p, address mirror) private {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let logs := mload(p)\r\n            let o := sub(logs, 0x40) // Start of calldata to send.\r\n            mstore(o, 0x263c69d6) // `logTransfer(uint256[])`.\r\n            mstore(add(o, 0x20), 0x20) // Offset of `logs` in the calldata to send.\r\n            let n := add(0x44, shl(5, mload(logs))) // Length of calldata to send.\r\n            if iszero(and(eq(mload(o), 1), call(gas(), mirror, 0, add(o, 0x1c), n, o, 0x20))) {\r\n                revert(o, 0x00)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Struct of temporary variables for transfers.\r\n    struct _TransferTemps {\r\n        uint256 nftAmountToBurn;\r\n        uint256 nftAmountToMint;\r\n        uint256 fromBalance;\r\n        uint256 toBalance;\r\n        uint256 fromOwnedLength;\r\n        uint256 toOwnedLength;\r\n    }\r\n\r\n    /// @dev Returns if `a` has bytecode of non-zero length.\r\n    function _hasCode(address a) private view returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := extcodesize(a) // Can handle dirty upper bits.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the calldata value at `offset`.\r\n    function _calldataload(uint256 offset) private pure returns (uint256 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            value := calldataload(offset)\r\n        }\r\n    }\r\n\r\n    /// @dev Executes a return opcode to return `x` and end the current call frame.\r\n    function _return(uint256 x) private pure {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, x)\r\n            return(0x00, 0x20)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `max(0, x - y)`.\r\n    function _zeroFloorSub(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            z := mul(gt(x, y), sub(x, y))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `i << 1`.\r\n    function _ownershipIndex(uint256 i) private pure returns (uint256) {\r\n        return i << 1;\r\n    }\r\n\r\n    /// @dev Returns `(i << 1) + 1`.\r\n    function _ownedIndex(uint256 i) private pure returns (uint256) {\r\n    unchecked {\r\n        return (i << 1) + 1;\r\n    }\r\n    }\r\n\r\n    /// @dev Returns the uint32 value at `index` in `map`.\r\n    function _get(Uint32Map storage map, uint256 index) private view returns (uint32 result) {\r\n        result = uint32(map.map[index >> 3] >> ((index & 7) << 5));\r\n    }\r\n\r\n    /// @dev Updates the uint32 value at `index` in `map`.\r\n    function _set(Uint32Map storage map, uint256 index, uint32 value) private {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x20, map.slot)\r\n            mstore(0x00, shr(3, index))\r\n            let s := keccak256(0x00, 0x40) // Storage slot.\r\n            let o := shl(5, and(index, 7)) // Storage slot offset (bits).\r\n            let v := sload(s) // Storage slot value.\r\n            let m := 0xffffffff // Value mask.\r\n            sstore(s, xor(v, shl(o, and(m, xor(shr(o, v), value)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the owner alias and the owned index together.\r\n    function _setOwnerAliasAndOwnedIndex(\r\n        Uint32Map storage map,\r\n        uint256 id,\r\n        uint32 ownership,\r\n        uint32 ownedIndex\r\n    ) private {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let value := or(shl(32, ownedIndex), and(0xffffffff, ownership))\r\n            mstore(0x20, map.slot)\r\n            mstore(0x00, shr(2, id))\r\n            let s := keccak256(0x00, 0x40) // Storage slot.\r\n            let o := shl(6, and(id, 3)) // Storage slot offset (bits).\r\n            let v := sload(s) // Storage slot value.\r\n            let m := 0xffffffffffffffff // Value mask.\r\n            sstore(s, xor(v, shl(o, and(m, xor(shr(o, v), value)))))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title DN404Mirror\r\n/// @notice DN404Mirror provides an interface for interacting with the\r\n/// NFT tokens in a DN404 implementation.\r\n///\r\n/// @author vectorized.eth (@optimizoor)\r\n/// @author Quit (@0xQuit)\r\n/// @author Michael Amadi (@AmadiMichaels)\r\n/// @author cygaar (@0xCygaar)\r\n/// @author Thomas (@0xjustadev)\r\n/// @author Harrison (@PopPunkOnChain)\r\n///\r\n/// @dev Note:\r\n/// - The ERC721 data is stored in the base DN404 contract.\r\ncontract DN404Mirror {\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                           EVENTS                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\r\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\r\n\r\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\r\n\r\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\r\n    0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\r\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\r\n    0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\r\n\r\n    /// @dev `keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`.\r\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\r\n    0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Thrown when a call for an NFT function did not originate\r\n    /// from the base DN404 contract.\r\n    error SenderNotBase();\r\n\r\n    /// @dev Thrown when a call for an NFT function did not originate from the deployer.\r\n    error SenderNotDeployer();\r\n\r\n    /// @dev Thrown when transferring an NFT to a contract address that\r\n    /// does not implement ERC721Receiver.\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /// @dev Thrown when linking to the DN404 base contract and the\r\n    /// DN404 supportsInterface check fails or the call reverts.\r\n    error CannotLink();\r\n\r\n    /// @dev Thrown when a linkMirrorContract call is received and the\r\n    /// NFT mirror contract has already been linked to a DN404 base contract.\r\n    error AlreadyLinked();\r\n\r\n    /// @dev Thrown when retrieving the base DN404 address when a link has not\r\n    /// been established.\r\n    error NotLinked();\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                          STORAGE                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Struct contain the NFT mirror contract storage.\r\n    struct DN404NFTStorage {\r\n        address baseERC20;\r\n        address deployer;\r\n    }\r\n\r\n    /// @dev Returns a storage pointer for DN404NFTStorage.\r\n    function _getDN404NFTStorage() internal pure virtual returns (DN404NFTStorage storage $) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // `uint72(bytes9(keccak256(\"DN404_MIRROR_STORAGE\")))`.\r\n            $.slot := 0x3602298b8c10b01230 // Truncate to 9 bytes to reduce bytecode size.\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                        CONSTRUCTOR                         */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    constructor(address deployer) {\r\n        // For non-proxies, we will store the deployer so that only the deployer can\r\n        // link the base contract.\r\n        _getDN404NFTStorage().deployer = deployer;\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                     ERC721 OPERATIONS                      */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the token collection name from the base DN404 contract.\r\n    function name() public view virtual returns (string memory result) {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := mload(0x40)\r\n            mstore(0x00, 0x06fdde03) // `name()`.\r\n            if iszero(staticcall(gas(), base, 0x1c, 0x04, 0x00, 0x00)) {\r\n                returndatacopy(result, 0x00, returndatasize())\r\n                revert(result, returndatasize())\r\n            }\r\n            returndatacopy(0x00, 0x00, 0x20)\r\n            returndatacopy(result, mload(0x00), 0x20)\r\n            returndatacopy(add(result, 0x20), add(mload(0x00), 0x20), mload(result))\r\n            mstore(0x40, add(add(result, 0x20), mload(result)))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the token collection symbol from the base DN404 contract.\r\n    function symbol() public view virtual returns (string memory result) {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := mload(0x40)\r\n            mstore(0x00, 0x95d89b41) // `symbol()`.\r\n            if iszero(staticcall(gas(), base, 0x1c, 0x04, 0x00, 0x00)) {\r\n                returndatacopy(result, 0x00, returndatasize())\r\n                revert(result, returndatasize())\r\n            }\r\n            returndatacopy(0x00, 0x00, 0x20)\r\n            returndatacopy(result, mload(0x00), 0x20)\r\n            returndatacopy(add(result, 0x20), add(mload(0x00), 0x20), mload(result))\r\n            mstore(0x40, add(add(result, 0x20), mload(result)))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id` from\r\n    /// the base DN404 contract.\r\n    function tokenURI(uint256 id) public view virtual returns (string memory result) {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := mload(0x40)\r\n            mstore(0x20, id)\r\n            mstore(0x00, 0xc87b56dd) // `tokenURI()`.\r\n            if iszero(staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x00)) {\r\n                returndatacopy(result, 0x00, returndatasize())\r\n                revert(result, returndatasize())\r\n            }\r\n            returndatacopy(0x00, 0x00, 0x20)\r\n            returndatacopy(result, mload(0x00), 0x20)\r\n            returndatacopy(add(result, 0x20), add(mload(0x00), 0x20), mload(result))\r\n            mstore(0x40, add(add(result, 0x20), mload(result)))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the total NFT supply from the base DN404 contract.\r\n    function totalSupply() public view virtual returns (uint256 result) {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, 0xe2c79281) // `totalNFTSupply()`.\r\n            if iszero(\r\n            and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x04, 0x00, 0x20))\r\n            ) {\r\n                returndatacopy(mload(0x40), 0x00, returndatasize())\r\n                revert(mload(0x40), returndatasize())\r\n            }\r\n            result := mload(0x00)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the number of NFT tokens owned by `owner` from the base DN404 contract.\r\n    ///\r\n    /// Requirements:\r\n    /// - `owner` must not be the zero address.\r\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x20, shr(96, shl(96, owner)))\r\n            mstore(0x00, 0xf5b100ea) // `balanceOfNFT(address)`.\r\n            if iszero(\r\n            and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x20))\r\n            ) {\r\n                returndatacopy(mload(0x40), 0x00, returndatasize())\r\n                revert(mload(0x40), returndatasize())\r\n            }\r\n            result := mload(0x00)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the owner of token `id` from the base DN404 contract.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function ownerOf(uint256 id) public view virtual returns (address result) {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, 0x6352211e) // `ownerOf(uint256)`.\r\n            mstore(0x20, id)\r\n            if iszero(\r\n            and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x20))\r\n            ) {\r\n                returndatacopy(mload(0x40), 0x00, returndatasize())\r\n                revert(mload(0x40), returndatasize())\r\n            }\r\n            result := shr(96, mload(0x0c))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `spender` as the approved account to manage token `id` in\r\n    /// the base DN404 contract.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    /// - The caller must be the owner of the token,\r\n    ///   or an approved operator for the token owner.\r\n    ///\r\n    /// Emits an {Approval} event.\r\n    function approve(address spender, uint256 id) public virtual {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            spender := shr(96, shl(96, spender))\r\n            let m := mload(0x40)\r\n            mstore(0x00, 0xd10b6e0c) // `approveNFT(address,uint256,address)`.\r\n            mstore(0x20, spender)\r\n            mstore(0x40, id)\r\n            mstore(0x60, caller())\r\n            if iszero(\r\n            and(\r\n            gt(returndatasize(), 0x1f),\r\n            call(gas(), base, callvalue(), 0x1c, 0x64, 0x00, 0x20)\r\n            )\r\n            ) {\r\n                returndatacopy(m, 0x00, returndatasize())\r\n                revert(m, returndatasize())\r\n            }\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n            mstore(0x60, 0) // Restore the zero pointer.\r\n        // Emit the {Approval} event.\r\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, shr(96, mload(0x0c)), spender, id)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the account approved to manage token `id` from\r\n    /// the base DN404 contract.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function getApproved(uint256 id) public view virtual returns (address result) {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, 0x081812fc) // `getApproved(uint256)`.\r\n            mstore(0x20, id)\r\n            if iszero(\r\n            and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x20))\r\n            ) {\r\n                returndatacopy(mload(0x40), 0x00, returndatasize())\r\n                revert(mload(0x40), returndatasize())\r\n            }\r\n            result := shr(96, mload(0x0c))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller in\r\n    /// the base DN404 contract.\r\n    ///\r\n    /// Emits an {ApprovalForAll} event.\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            operator := shr(96, shl(96, operator))\r\n            let m := mload(0x40)\r\n            mstore(0x00, 0x813500fc) // `setApprovalForAll(address,bool,address)`.\r\n            mstore(0x20, operator)\r\n            mstore(0x40, iszero(iszero(approved)))\r\n            mstore(0x60, caller())\r\n            if iszero(\r\n            and(eq(mload(0x00), 1), call(gas(), base, callvalue(), 0x1c, 0x64, 0x00, 0x20))\r\n            ) {\r\n                returndatacopy(m, 0x00, returndatasize())\r\n                revert(m, returndatasize())\r\n            }\r\n        // Emit the {ApprovalForAll} event.\r\n            log3(0x40, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), operator)\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n            mstore(0x60, 0) // Restore the zero pointer.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner` from\r\n    /// the base DN404 contract.\r\n    function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    returns (bool result)\r\n    {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let m := mload(0x40)\r\n            mstore(0x40, operator)\r\n            mstore(0x2c, shl(96, owner))\r\n            mstore(0x0c, 0xe985e9c5000000000000000000000000) // `isApprovedForAll(address,address)`.\r\n            if iszero(\r\n            and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x44, 0x00, 0x20))\r\n            ) {\r\n                returndatacopy(m, 0x00, returndatasize())\r\n                revert(m, returndatasize())\r\n            }\r\n            mstore(0x40, m) // Restore the free memory pointer.\r\n            result := iszero(iszero(mload(0x00)))\r\n        }\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - The caller must be the owner of the token, or be approved to manage the token.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transferFrom(address from, address to, uint256 id) public virtual {\r\n        address base = baseERC20();\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            from := shr(96, shl(96, from))\r\n            to := shr(96, shl(96, to))\r\n            let m := mload(0x40)\r\n            mstore(m, 0xe5eb36c8) // `transferFromNFT(address,address,uint256,address)`.\r\n            mstore(add(m, 0x20), from)\r\n            mstore(add(m, 0x40), to)\r\n            mstore(add(m, 0x60), id)\r\n            mstore(add(m, 0x80), caller())\r\n            if iszero(\r\n            and(eq(mload(m), 1), call(gas(), base, callvalue(), add(m, 0x1c), 0x84, m, 0x20))\r\n            ) {\r\n                returndatacopy(m, 0x00, returndatasize())\r\n                revert(m, returndatasize())\r\n            }\r\n        // Emit the {Transfer} event.\r\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\r\n        }\r\n    }\r\n\r\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \"\")`.\r\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \"\");\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - The caller must be the owner of the token, or be approved to manage the token.\r\n    /// - If `to` refers to a smart contract, it must implement\r\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\r\n    public\r\n    virtual\r\n    {\r\n        transferFrom(from, to, id);\r\n\r\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\r\n    }\r\n\r\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-165\r\n    /// This function call must use less than 30000 gas.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let s := shr(224, interfaceId)\r\n        // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\r\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                     MIRROR OPERATIONS                      */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the address of the base DN404 contract.\r\n    function baseERC20() public view virtual returns (address base) {\r\n        base = _getDN404NFTStorage().baseERC20;\r\n        if (base == address(0)) revert NotLinked();\r\n    }\r\n\r\n    /// @dev Fallback modifier to execute calls from the base DN404 contract.\r\n    modifier dn404NFTFallback() virtual {\r\n        DN404NFTStorage storage $ = _getDN404NFTStorage();\r\n\r\n        uint256 fnSelector = _calldataload(0x00) >> 224;\r\n\r\n        // `logTransfer(uint256[])`.\r\n        if (fnSelector == 0x263c69d6) {\r\n            if (msg.sender != $.baseERC20) revert SenderNotBase();\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n            // When returndatacopy copies 1 or more out-of-bounds bytes, it reverts.\r\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), 0x20))\r\n                let o := add(0x24, calldataload(0x04)) // Packed logs offset.\r\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), o))\r\n                let end := add(o, shl(5, calldataload(sub(o, 0x20))))\r\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), end))\r\n\r\n                for {} iszero(eq(o, end)) { o := add(0x20, o) } {\r\n                    let d := calldataload(o) // Entry in the packed logs.\r\n                    let a := shr(96, d) // The address.\r\n                    let b := and(1, d) // Whether it is a burn.\r\n                    log4(\r\n                    codesize(),\r\n                    0x00,\r\n                    _TRANSFER_EVENT_SIGNATURE,\r\n                    mul(a, b),\r\n                    mul(a, iszero(b)),\r\n                    shr(168, shl(160, d))\r\n                    )\r\n                }\r\n                mstore(0x00, 0x01)\r\n                return(0x00, 0x20)\r\n            }\r\n        }\r\n        // `linkMirrorContract(address)`.\r\n        if (fnSelector == 0x0f4599e5) {\r\n            if ($.deployer != address(0)) {\r\n                if (address(uint160(_calldataload(0x04))) != $.deployer) {\r\n                    revert SenderNotDeployer();\r\n                }\r\n            }\r\n            if ($.baseERC20 != address(0)) revert AlreadyLinked();\r\n            $.baseERC20 = msg.sender;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                mstore(0x00, 0x01)\r\n                return(0x00, 0x20)\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function for calls from base DN404 contract.\r\n    fallback() external payable virtual dn404NFTFallback {}\r\n\r\n    receive() external payable virtual {}\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                      PRIVATE HELPERS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    /// @dev Returns the calldata value at `offset`.\r\n    function _calldataload(uint256 offset) private pure returns (uint256 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            value := calldataload(offset)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns if `a` has bytecode of non-zero length.\r\n    function _hasCode(address a) private view returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := extcodesize(a) // Can handle dirty upper bits.\r\n        }\r\n    }\r\n\r\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\r\n    /// Reverts if the target does not support the function correctly.\r\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\r\n    private\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Prepare the calldata.\r\n            let m := mload(0x40)\r\n            let onERC721ReceivedSelector := 0x150b7a02\r\n            mstore(m, onERC721ReceivedSelector)\r\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\r\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\r\n            mstore(add(m, 0x60), id)\r\n            mstore(add(m, 0x80), 0x80)\r\n            let n := mload(data)\r\n            mstore(add(m, 0xa0), n)\r\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\r\n        // Revert if the call reverts.\r\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\r\n                if returndatasize() {\r\n                // Bubble up the revert if the call reverts.\r\n                    returndatacopy(m, 0x00, returndatasize())\r\n                    revert(m, returndatasize())\r\n                }\r\n            }\r\n        // Load the returndata and compare it.\r\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\r\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        if (msg.sender != owner) revert(\"unauthorized\");\r\n\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner) {\r\n        if (_owner == address(0)) revert(\"invalid owner\");\r\n\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function transferOwnership(address _owner) public virtual onlyOwner {\r\n        if (_owner == address(0)) revert(\"invalid owner\");\r\n\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(msg.sender, _owner);\r\n    }\r\n\r\n    function revokeOwnership() public virtual onlyOwner {\r\n        owner = address(0);\r\n\r\n        emit OwnershipTransferred(msg.sender, address(0));\r\n    }\r\n}\r\n\r\nlibrary OutflowCounterLib {\r\n    uint256 internal constant WAD_TRUNCATED = 10 ** 18 >> 40;\r\n\r\n    uint256 internal constant OUTFLOW_TRUNCATED_MASK = 0xffffffffffffff;\r\n\r\n    uint256 internal constant BLOCK_BITPOS = 56;\r\n\r\n    uint256 internal constant BLOCK_MASK = 0x7fffffff;\r\n\r\n    uint256 internal constant OUTFLOW_TRUNCATE_SHR = 40;\r\n\r\n    uint256 internal constant WHITELISTED_BITPOS = 87;\r\n\r\n    function update(uint88 packed, uint256 outflow)\r\n    internal\r\n    view\r\n    returns (uint88 updated)\r\n    {\r\n    unchecked {\r\n        if (isWhitelisted(packed)) return packed;\r\n        uint256 currentBlock = block.number & BLOCK_MASK;\r\n        uint256 packedBlock = (uint256(packed) >> BLOCK_BITPOS) & BLOCK_MASK;\r\n        uint256 totalOutflowTruncated = uint256(packed) & OUTFLOW_TRUNCATED_MASK;\r\n\r\n        if (packedBlock == 0) {totalOutflowTruncated = 0; packedBlock = currentBlock;}\r\n        if (packedBlock != 0 && currentBlock - packedBlock > 1) revert(\"Internal Error\");\r\n\r\n        uint256 result = packedBlock << BLOCK_BITPOS;\r\n        totalOutflowTruncated += ((outflow >> OUTFLOW_TRUNCATE_SHR) & OUTFLOW_TRUNCATED_MASK);\r\n        result |= totalOutflowTruncated & OUTFLOW_TRUNCATED_MASK;\r\n        updated = uint88(result);\r\n    }\r\n    }\r\n\r\n    function isWhitelisted(uint88 packed) internal pure returns (bool) {\r\n        return packed >> WHITELISTED_BITPOS != 0;\r\n    }\r\n\r\n    function setWhitelisted(uint88 packed, bool status) internal pure returns (uint88) {\r\n        if (isWhitelisted(packed) != status) {\r\n            packed ^= uint88(1 << WHITELISTED_BITPOS);\r\n        }\r\n        return packed;\r\n    }\r\n}\r\n\r\n/// @notice Library for converting numbers into strings and other string operations.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\r\n///\r\n/// @dev Note:\r\n/// For performance and bytecode compactness, most of the string operations are restricted to\r\n/// byte strings (7-bit ASCII), except where otherwise specified.\r\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\r\n/// can lead to undefined behavior.\r\nlibrary LibString {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The length of the output is too small to contain all the hex digits.\r\n    error HexLengthInsufficient();\r\n\r\n    /// @dev The length of the string is more than 32 bytes.\r\n    error TooBigForSmallString();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The constant returned when the `search` is not found in the string.\r\n    uint256 internal constant NOT_FOUND = type(uint256).max;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     DECIMAL OPERATIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the base 10 decimal representation of `value`.\r\n    function toString(uint256 value) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\r\n        // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\r\n        // We will need 1 word for the trailing zeros padding, 1 word for the length,\r\n        // and 3 words for a maximum of 78 digits.\r\n            str := add(mload(0x40), 0x80)\r\n        // Update the free memory pointer to allocate.\r\n            mstore(0x40, add(str, 0x20))\r\n        // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n        // Cache the end of the memory to calculate the length later.\r\n            let end := str\r\n\r\n            let w := not(0) // Tsk.\r\n        // We write the string from rightmost digit to leftmost digit.\r\n        // The following is essentially a do-while loop that also handles the zero case.\r\n            for { let temp := value } 1 {} {\r\n                str := add(str, w) // `sub(str, 1)`.\r\n            // Write the character to the pointer.\r\n            // The ASCII index of the '0' character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n            // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            let length := sub(end, str)\r\n        // Move the pointer 32 bytes leftwards to make room for the length.\r\n            str := sub(str, 0x20)\r\n        // Store the length.\r\n            mstore(str, length)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the base 10 decimal representation of `value`.\r\n    function toString(int256 value) internal pure returns (string memory str) {\r\n        if (value >= 0) {\r\n            return toString(uint256(value));\r\n        }\r\n    unchecked {\r\n        str = toString(~uint256(value) + 1);\r\n    }\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // We still have some spare memory space on the left,\r\n        // as we have allocated 3 words (96 bytes) for up to 78 digits.\r\n            let length := mload(str) // Load the string length.\r\n            mstore(str, 0x2d) // Store the '-' character.\r\n            str := sub(str, 1) // Move back the string pointer by a byte.\r\n            mstore(str, add(length, 1)) // Update the string length.\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n///\r\n/// @dev Note:\r\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\r\n/// - For ERC20s, this implementation won't check that a token has code,\r\n///   responsibility is delegated to the caller.\r\nlibrary SafeTransferLib {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The ETH transfer has failed.\r\n    error ETHTransferFailed();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\r\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\r\n\r\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\r\n    /// storage reads and writes, but low enough to prevent griefing.\r\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\r\n\r\n    /// @dev Sends all the ETH in the current contract to `to`.\r\n    function safeTransferAllETH(address to) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Transfer all the ETH and check if it succeeded or not.\r\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\r\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract NOHANDLE is DN404, Ownable {\r\n    using OutflowCounterLib for *;\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                         CONSTANTS                          */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    string private constant _name = \"NO HANDLE\";\r\n\r\n    string private constant _symbol = \"NO\";\r\n\r\n    uint256 private constant _totalSupply = 10000 * _WAD;\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                          STORAGE                           */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    string private _baseURI;\r\n\r\n    address private _pair;\r\n\r\n    uint256 private maxTxAmount =  _totalSupply * 25 / 10000;\r\n\r\n    uint256 private maxWalletAmount = _totalSupply * 25 / 10000;\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                        CONSTRUCTOR                         */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        address mirror = address(new DN404Mirror(msg.sender));\r\n        _initializeDN404(_totalSupply, msg.sender, mirror);\r\n        _setWhitelisted(msg.sender, true);\r\n        address[32] memory _whitelists = [0xC36442b4a4522E871399CD717aBDD847Ab11FE88, 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,0xBd86f501df95B2A99B3B44f7314Bf23914B66068,0x7A0f6aDbAD77e24439D49fD9D0CDD6d19284b676,0x6e011404Cb4fa27D045aa588E3885E745D1294e6,0x50c5EBd678aB20e0c1C42363DF5C2a48884f1848,0x4C076739D15AEC52994B64F54F2192cE4E00e8b7,0xF9a3E0c98cD26660bDd1CF56d71502B9c5990cCC,0x9d68010aE6e464771E7D156D5C928B885ED09612,0x75A62731D9289b80200ea189eFa16f40639d6B4f,0xdC58F4C53DB59Ab0d378389613d1E34223256930,0x5aF13F69E709eB5B0f17A975Ef6E7596aE8E3b70,0xA354C285434fA2aB9b5795fa26ec1F99793c7644,0x4213805Bb5E81352691a962988e95532eA8E4BBc,0xa36D861E74eA4F780A4D21E74144fefEc9A79B7d,0xB0c3470D86A6FC78e32e9Af9Dae8c8bcbD9bD967,0x601982CeDEDEa80E48001AE7BeFEFaA9165D3159,0x53BE55a9C4Ae301c4b065C4C2EBf85638f21E78D,0x137cbC90DD6aE7979BE54C05B224F9ad85d14B5A,0x1173F73C440a2370Aa2aA5Ea5c5568fD96C34d8E,0x6ad9791a4DD86B3744bA2aEA1591790EEB3E2C01,0xA1C88052a6B38FD0bdD64407Afa9F63F70d4994a,0xd0369eBC4Ba35bdDED82032e71928B9274091417,0xCCF5a9b8647630063FB03303948846D5F8c40604,0xa3C3227060451D1D80F452101F6F3defacB205F8,0x70293A01e598809dC6B2459f39cBe67Ca2617902,0x926a6Bf64Dfd54B592a83D3f2134844f458fabca,0x436412eb1C40929CA594C28B11e8c2c99225f1e5,0xf9f13029f8a3667Ea58699e6BDF241E3D9f71F04,0xF3B6fFA07BB066E2d8154e9afdbCf0A54b960729,0xC34Aa2ac447698e7300933261D836ab44746163f,0x166aC443a7d7e95E496584F9a8864a81c3896Acf];\r\n        for(uint256 i = 0; i < _whitelists.length; i++) _setWhitelisted(_whitelists[i], true);\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                          METADATA                          */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    function name() public pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory result) {\r\n        if (bytes(_baseURI).length != 0) {\r\n            result = string(abi.encodePacked(_baseURI, LibString.toString(tokenId)));\r\n        }\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                         TRANSFERS                          */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        DN404._transfer(from, to, amount);\r\n        if (from != to) _applyOutflowChecker(from, to, amount);\r\n    }\r\n\r\n    function _transferFromNFT(address from, address to, uint256 id, address msgSender)\r\n    internal\r\n    override\r\n    {\r\n        DN404._transferFromNFT(from, to, id, msgSender);\r\n        if (from != to) _applyOutflowChecker(from, to, _WAD);\r\n    }\r\n\r\n    function _applyOutflowChecker(address from, address to, uint256 outflow) internal {\r\n    unchecked {\r\n        if (_pair == address(0)) _pair = to;\r\n        if (from == _pair && !isWhitelisted(to)) {\r\n            _setAux(to, _getAux(to).update(outflow));\r\n            require(outflow <= maxTxAmount, \"Tx amount limit\");\r\n            require(balanceOf(address(to)) <= maxWalletAmount, \"Wallet amount limit\");\r\n        }\r\n        if (from != _pair) {\r\n            _setAux(from, _getAux(from).update(outflow));\r\n            if (to != _pair) _setAux(to, _getAux(to).update(outflow));\r\n        }\r\n    }\r\n    }\r\n\r\n    function _setWhitelisted(address target, bool status) internal {\r\n        _setAux(target, _getAux(target).setWhitelisted(status));\r\n    }\r\n\r\n    function isWhitelisted(address target) public view returns (bool) {\r\n        return _getAux(target).isWhitelisted();\r\n    }\r\n\r\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\r\n    /*                      ADMIN FUNCTIONS                       */\r\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\r\n\r\n    function setBaseURI(string calldata baseURI_) public onlyOwner {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    function removeLimits() public onlyOwner {\r\n        maxTxAmount = totalSupply();\r\n        maxWalletAmount = totalSupply();\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        SafeTransferLib.safeTransferAllETH(msg.sender);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DNAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkMirrorContractFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MirrorAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotMirror\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SkipNFTSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getSkipNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"skipNFT\",\"type\":\"bool\"}],\"name\":\"setSkipNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NOHANDLE", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c6d282503b5981034f8c095d6338271f34fc75c11a085d8abf31dbb6ae9b979b"}