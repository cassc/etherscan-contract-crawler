{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategy/CurveVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/ILiquidityGaugeStrat.sol\\\";\\nimport \\\"./CurveStrategy.sol\\\";\\n\\ncontract CurveVault is ERC20Upgradeable {\\n\\tusing SafeERC20Upgradeable for ERC20Upgradeable;\\n\\tusing AddressUpgradeable for address;\\n\\n\\tERC20Upgradeable public token;\\n\\taddress public governance;\\n\\tuint256 public withdrawalFee;\\n\\tuint256 public keeperFee;\\n\\taddress public liquidityGauge;\\n\\tuint256 public accumulatedFee;\\n\\tCurveStrategy public curveStrategy;\\n\\tuint256 public min;\\n\\tuint256 public constant MAX = 10000;\\n\\n\\tevent Earn(address _token, uint256 _amount);\\n\\tevent Deposit(address _depositor, uint256 _amount);\\n\\tevent Withdraw(address _depositor, uint256 _amount);\\n\\n\\tfunction init(\\n\\t\\tERC20Upgradeable _token,\\n\\t\\taddress _governance,\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_,\\n\\t\\tCurveStrategy _curveStrategy\\n\\t) public initializer {\\n\\t\\t__ERC20_init(name_, symbol_);\\n\\t\\ttoken = _token;\\n\\t\\tgovernance = _governance;\\n\\t\\tmin = 10000;\\n\\t\\tkeeperFee = 10; // %0.1\\n\\t\\tcurveStrategy = _curveStrategy;\\n\\t}\\n\\n\\t/// @notice function to deposit a new amount\\n\\t/// @param _staker address to stake for\\n\\t/// @param _amount amount to deposit\\n\\t/// @param _earn earn or not\\n\\tfunction deposit(\\n\\t\\taddress _staker,\\n\\t\\tuint256 _amount,\\n\\t\\tbool _earn\\n\\t) public {\\n\\t\\trequire(address(liquidityGauge) != address(0), \\\"Gauge not yet initialized\\\");\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\t\\tif (!_earn) {\\n\\t\\t\\tuint256 keeperCut = (_amount * keeperFee) / 10000;\\n\\t\\t\\t_amount -= keeperCut;\\n\\t\\t\\taccumulatedFee += keeperCut;\\n\\t\\t} else {\\n\\t\\t\\t_amount += accumulatedFee;\\n\\t\\t\\taccumulatedFee = 0;\\n\\t\\t}\\n\\t\\t_mint(address(this), _amount);\\n\\t\\tERC20Upgradeable(address(this)).approve(liquidityGauge, _amount);\\n\\t\\tILiquidityGaugeStrat(liquidityGauge).deposit(_amount, _staker);\\n\\t\\tif (_earn) {\\n\\t\\t\\tearn();\\n\\t\\t}\\n\\t\\temit Deposit(msg.sender, _amount);\\n\\t}\\n\\n\\t/// @notice function to withdraw\\n\\t/// @param _shares amount to withdraw\\n\\tfunction withdraw(uint256 _shares) public {\\n\\t\\tuint256 userTotalShares = ILiquidityGaugeStrat(liquidityGauge).balanceOf(msg.sender);\\n\\t\\trequire(_shares <= userTotalShares, \\\"Not enough staked\\\");\\n\\t\\tILiquidityGaugeStrat(liquidityGauge).withdraw(_shares, msg.sender, true);\\n\\t\\t_burn(address(this), _shares);\\n\\t\\tuint256 tokenBalance = token.balanceOf(address(this)) - accumulatedFee;\\n\\t\\tuint256 withdrawFee;\\n\\t\\tif (_shares > tokenBalance) {\\n\\t\\t\\tuint256 amountToWithdraw = _shares - tokenBalance;\\n\\t\\t\\tcurveStrategy.withdraw(address(token), amountToWithdraw);\\n\\t\\t\\twithdrawFee = (amountToWithdraw * withdrawalFee) / 10000;\\n\\t\\t\\ttoken.safeTransfer(governance, withdrawFee);\\n\\t\\t}\\n\\t\\ttoken.safeTransfer(msg.sender, _shares - withdrawFee);\\n\\t\\temit Withdraw(msg.sender, _shares - withdrawFee);\\n\\t}\\n\\n\\t/// @notice function to withdraw all curve LPs deposited\\n\\tfunction withdrawAll() external {\\n\\t\\twithdraw(balanceOf(msg.sender));\\n\\t}\\n\\n\\t/// @notice function to set the governance\\n\\t/// @param _governance governance address\\n\\tfunction setGovernance(address _governance) external {\\n\\t\\trequire(msg.sender == governance, \\\"!governance\\\");\\n\\t\\trequire(_governance != address(0), \\\"zero address\\\");\\n\\t\\tgovernance = _governance;\\n\\t}\\n\\n\\t/// @notice function to set the keeper fee\\n\\t/// @param _newFee keeper fee\\n\\tfunction setKeeperFee(uint256 _newFee) external {\\n\\t\\trequire(msg.sender == governance, \\\"!governance\\\");\\n\\t\\trequire(_newFee <= MAX, \\\"more than 100%\\\");\\n\\t\\tkeeperFee = _newFee;\\n\\t}\\n\\n\\t/// @notice function to set the gauge multi rewards\\n\\t/// @param _liquidityGauge gauge address\\n\\tfunction setLiquidityGauge(address _liquidityGauge) external {\\n\\t\\trequire(msg.sender == governance, \\\"!governance\\\");\\n\\t\\trequire(_liquidityGauge != address(0), \\\"zero address\\\");\\n\\t\\tliquidityGauge = _liquidityGauge;\\n\\t}\\n\\n\\t/// @notice function to set the curve strategy\\n\\t/// @param _newStrat curve strategy infos\\n\\tfunction setCurveStrategy(CurveStrategy _newStrat) external {\\n\\t\\trequire(msg.sender == governance, \\\"!governance\\\");\\n\\t\\trequire(address(_newStrat) != address(0), \\\"zero address\\\");\\n\\t\\t// migration (send all LPs here)\\n\\t\\tcurveStrategy.migrateLP(address(token));\\n\\t\\tcurveStrategy = _newStrat;\\n\\t\\t// deposit LPs into the new strategy\\n\\t\\tearn();\\n\\t}\\n\\n\\t/// @notice function to return the vault token decimals\\n\\tfunction decimals() public view override returns (uint8) {\\n\\t\\treturn token.decimals();\\n\\t}\\n\\n\\t/// @notice function to set the withdrawn fee\\n\\t/// @param _newFee withdrawn fee\\n\\tfunction setWithdrawnFee(uint256 _newFee) external {\\n\\t\\trequire(msg.sender == governance, \\\"!governance\\\");\\n\\t\\trequire(_newFee <= MAX, \\\"more than 100%\\\");\\n\\t\\twithdrawalFee = _newFee;\\n\\t}\\n\\n\\t/// @notice function to set the min (it needs to be lower than MAX)\\n\\t/// @param _min min amount\\n\\tfunction setMin(uint256 _min) external {\\n\\t\\trequire(msg.sender == governance, \\\"!governance\\\");\\n\\t\\trequire(_min <= MAX, \\\"more than 100%\\\");\\n\\t\\tmin = _min;\\n\\t}\\n\\n\\t/// @notice view function to fetch the available amount to send to the strategy\\n\\tfunction available() public view returns (uint256) {\\n\\t\\treturn ((token.balanceOf(address(this)) - accumulatedFee) * min) / MAX;\\n\\t}\\n\\n\\t/// @notice internal function to move funds to the strategy\\n\\tfunction earn() internal {\\n\\t\\tuint256 tokenBalance = available();\\n\\t\\ttoken.approve(address(curveStrategy), 0);\\n\\t\\ttoken.approve(address(curveStrategy), tokenBalance);\\n\\t\\tcurveStrategy.deposit(address(token), tokenBalance);\\n\\t\\temit Earn(address(token), tokenBalance);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityGaugeStrat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface ILiquidityGaugeStrat {\\n\\tstruct Reward {\\n\\t\\taddress token;\\n\\t\\taddress distributor;\\n\\t\\tuint256 period_finish;\\n\\t\\tuint256 rate;\\n\\t\\tuint256 last_update;\\n\\t\\tuint256 integral;\\n\\t}\\n\\n\\t// solhint-disable-next-line\\n\\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\\n\\n\\t// solhint-disable-next-line\\n\\tfunction claim_rewards_for(address _user, address _recipient) external;\\n\\n\\t// // solhint-disable-next-line\\n\\t// function claim_rewards_for(address _user) external;\\n\\n\\t// solhint-disable-next-line\\n\\tfunction deposit(uint256 _value, address _addr) external;\\n\\n\\t// solhint-disable-next-line\\n\\tfunction reward_tokens(uint256 _i) external view returns (address);\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 _value,\\n\\t\\taddress _addr,\\n\\t\\tbool _claim_rewards\\n\\t) external;\\n\\n\\t// solhint-disable-next-line\\n\\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\\n\\n\\tfunction balanceOf(address) external returns (uint256);\\n\\n\\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\\n\\n\\tfunction user_checkpoint(address _user) external returns (bool);\\n\\n\\tfunction commit_transfer_ownership(address) external;\\n\\n\\tfunction initialize(\\n\\t\\taddress _staking_token,\\n\\t\\taddress _admin,\\n\\t\\taddress _SDT,\\n\\t\\taddress _voting_escrow,\\n\\t\\taddress _veBoost_proxy,\\n\\t\\taddress _distributor,\\n\\t\\taddress _vault,\\n\\t\\tstring memory _symbol\\n\\t) external;\\n\\n\\tfunction add_reward(address, address) external;\\n\\n\\tfunction set_claimer(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/strategy/CurveStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"../accumulator/CurveAccumulator.sol\\\";\\nimport \\\"../interfaces/ILiquidityGauge.sol\\\";\\nimport \\\"../interfaces/IMultiRewards.sol\\\";\\nimport \\\"../staking/SdtDistributorV2.sol\\\";\\n\\ncontract CurveStrategy is BaseStrategy {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tCurveAccumulator public accumulator;\\n\\taddress public sdtDistributor;\\n\\taddress public constant CRV_FEE_D = 0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc;\\n\\taddress public constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\taddress public constant CRV_MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\taddress public constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\tmapping(address => uint256) public lGaugeType;\\n\\n\\tstruct ClaimerReward {\\n\\t\\taddress rewardToken;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tenum MANAGEFEE {\\n\\t\\tPERFFEE,\\n\\t\\tVESDTFEE,\\n\\t\\tACCUMULATORFEE,\\n\\t\\tCLAIMERREWARD\\n\\t}\\n\\n\\tevent Crv3Claimed(uint256 amount, bool notified);\\n\\n\\t/* ========== CONSTRUCTOR ========== */\\n\\tconstructor(\\n\\t\\tILocker _locker,\\n\\t\\taddress _governance,\\n\\t\\taddress _receiver,\\n\\t\\tCurveAccumulator _accumulator,\\n\\t\\taddress _veSDTFeeProxy,\\n\\t\\taddress _sdtDistributor\\n\\t) BaseStrategy(_locker, _governance, _receiver) {\\n\\t\\taccumulator = _accumulator;\\n\\t\\tveSDTFeeProxy = _veSDTFeeProxy;\\n\\t\\tsdtDistributor = _sdtDistributor;\\n\\t}\\n\\n\\t/* ========== MUTATIVE FUNCTIONS ========== */\\n\\t/// @notice function to deposit into a gauge\\n\\t/// @param _token token address\\n\\t/// @param _amount amount to deposit\\n\\tfunction deposit(address _token, uint256 _amount) external override onlyApprovedVault {\\n\\t\\tIERC20(_token).transferFrom(msg.sender, address(locker), _amount);\\n\\t\\taddress gauge = gauges[_token];\\n\\t\\trequire(gauge != address(0), \\\"!gauge\\\");\\n\\t\\tlocker.execute(_token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", gauge, 0));\\n\\t\\tlocker.execute(_token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", gauge, _amount));\\n\\n\\t\\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\\\"deposit(uint256)\\\", _amount));\\n\\t\\trequire(success, \\\"Deposit failed!\\\");\\n\\t\\temit Deposited(gauge, _token, _amount);\\n\\t}\\n\\n\\t/// @notice function to withdraw from a gauge\\n\\t/// @param _token token address\\n\\t/// @param _amount amount to withdraw\\n\\tfunction withdraw(address _token, uint256 _amount) external override onlyApprovedVault {\\n\\t\\tuint256 _before = IERC20(_token).balanceOf(address(locker));\\n\\t\\taddress gauge = gauges[_token];\\n\\t\\trequire(gauge != address(0), \\\"!gauge\\\");\\n\\t\\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _amount));\\n\\t\\trequire(success, \\\"Transfer failed!\\\");\\n\\t\\tuint256 _after = IERC20(_token).balanceOf(address(locker));\\n\\n\\t\\tuint256 _net = _after - _before;\\n\\t\\t(success, ) = locker.execute(_token, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _net));\\n\\t\\trequire(success, \\\"Transfer failed!\\\");\\n\\t\\temit Withdrawn(gauge, _token, _amount);\\n\\t}\\n\\n\\t/// @notice function to send funds into the related accumulator\\n\\t/// @param _token token address\\n\\t/// @param _amount amount to send\\n\\tfunction sendToAccumulator(address _token, uint256 _amount) external onlyGovernance {\\n\\t\\tIERC20(_token).approve(address(accumulator), _amount);\\n\\t\\taccumulator.depositToken(_token, _amount);\\n\\t}\\n\\n\\t/// @notice function to claim the reward\\n\\t/// @param _token token address\\n\\tfunction claim(address _token) external override {\\n\\t\\taddress gauge = gauges[_token];\\n\\t\\trequire(gauge != address(0), \\\"!gauge\\\");\\n\\n\\t\\tuint256 crvBeforeClaim = IERC20(CRV).balanceOf(address(locker));\\n\\n\\t\\t// Claim CRV\\n\\t\\t// within the mint() it calls the user checkpoint\\n\\t\\t(bool success, ) = locker.execute(CRV_MINTER, 0, abi.encodeWithSignature(\\\"mint(address)\\\", gauge));\\n\\t\\trequire(success, \\\"CRV mint failed!\\\");\\n\\n\\t\\tuint256 crvMinted = IERC20(CRV).balanceOf(address(locker)) - crvBeforeClaim;\\n\\n\\t\\t// Send CRV here\\n\\t\\t(success, ) = locker.execute(\\n\\t\\t\\tCRV,\\n\\t\\t\\t0,\\n\\t\\t\\tabi.encodeWithSignature(\\\"transfer(address,uint256)\\\", address(this), crvMinted)\\n\\t\\t);\\n\\t\\trequire(success, \\\"CRV transfer failed!\\\");\\n\\n\\t\\t// Distribute CRV\\n\\t\\tuint256 crvNetRewards = sendFee(gauge, CRV, crvMinted);\\n\\t\\tIERC20(CRV).approve(multiGauges[gauge], crvNetRewards);\\n\\t\\tILiquidityGauge(multiGauges[gauge]).deposit_reward_token(CRV, crvNetRewards);\\n\\t\\temit Claimed(gauge, CRV, crvMinted);\\n\\n\\t\\t// Distribute SDT to the related gauge\\n\\t\\tSdtDistributorV2(sdtDistributor).distribute(multiGauges[gauge]);\\n\\n\\t\\t// Claim rewards only for lg type 0 and if there is at least one reward token added\\n\\t\\tif (lGaugeType[gauge] == 0 && ILiquidityGauge(gauge).reward_tokens(0) != address(0)) {\\n\\t\\t\\t(success, ) = locker.execute(\\n\\t\\t\\t\\tgauge,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tabi.encodeWithSignature(\\\"claim_rewards(address,address)\\\", address(locker), address(this))\\n\\t\\t\\t);\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\t// Claim on behalf of locker\\n\\t\\t\\t\\tILiquidityGauge(gauge).claim_rewards(address(locker));\\n\\t\\t\\t}\\n\\t\\t\\taddress rewardToken;\\n\\t\\t\\tuint256 rewardsBalance;\\n\\t\\t\\tfor (uint8 i = 0; i < 8; i++) {\\n\\t\\t\\t\\trewardToken = ILiquidityGauge(gauge).reward_tokens(i);\\n\\t\\t\\t\\tif (rewardToken == address(0)) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (success) {\\n\\t\\t\\t\\t\\trewardsBalance = IERC20(rewardToken).balanceOf(address(this));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trewardsBalance = IERC20(rewardToken).balanceOf(address(locker));\\n\\t\\t\\t\\t\\t(success, ) = locker.execute(\\n\\t\\t\\t\\t\\t\\trewardToken,\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\tabi.encodeWithSignature(\\\"transfer(address,uint256)\\\", address(this), rewardsBalance)\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\trequire(success, \\\"Transfer failed\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tIERC20(rewardToken).approve(multiGauges[gauge], rewardsBalance);\\n\\t\\t\\t\\tILiquidityGauge(multiGauges[gauge]).deposit_reward_token(rewardToken, rewardsBalance);\\n\\t\\t\\t\\temit Claimed(gauge, rewardToken, rewardsBalance);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendFee(\\n\\t\\taddress _gauge,\\n\\t\\taddress _rewardToken,\\n\\t\\tuint256 _rewardsBalance\\n\\t) internal returns (uint256) {\\n\\t\\t// calculate the amount for each fee recipient\\n\\t\\tuint256 multisigFee = (_rewardsBalance * perfFee[_gauge]) / BASE_FEE;\\n\\t\\tuint256 accumulatorPart = (_rewardsBalance * accumulatorFee[_gauge]) / BASE_FEE;\\n\\t\\tuint256 veSDTPart = (_rewardsBalance * veSDTFee[_gauge]) / BASE_FEE;\\n\\t\\tuint256 claimerPart = (_rewardsBalance * claimerRewardFee[_gauge]) / BASE_FEE;\\n\\t\\t// send\\n\\t\\tIERC20(_rewardToken).approve(address(accumulator), accumulatorPart);\\n\\t\\taccumulator.depositToken(_rewardToken, accumulatorPart);\\n\\t\\tIERC20(_rewardToken).transfer(rewardsReceiver, multisigFee);\\n\\t\\tIERC20(_rewardToken).transfer(veSDTFeeProxy, veSDTPart);\\n\\t\\tIERC20(_rewardToken).transfer(msg.sender, claimerPart);\\n\\t\\treturn _rewardsBalance - multisigFee - accumulatorPart - veSDTPart - claimerPart;\\n\\t}\\n\\n\\t/// @notice function to claim 3crv every week from the curve Fee Distributor\\n\\t/// @param _notify choose if claim or claim and notify the amount to the related gauge\\n\\tfunction claim3Crv(bool _notify) external {\\n\\t\\t// Claim 3crv from the curve fee Distributor\\n\\t\\t// It will send 3crv to the crv locker\\n\\t\\tbool success;\\n\\t\\t(success, ) = locker.execute(CRV_FEE_D, 0, abi.encodeWithSignature(\\\"claim()\\\"));\\n\\t\\trequire(success, \\\"3crv claim failed\\\");\\n\\t\\t// Send 3crv from the locker to the accumulator\\n\\t\\tuint256 amountToSend = IERC20(CRV3).balanceOf(address(locker));\\n\\t\\trequire(amountToSend > 0, \\\"nothing claimed\\\");\\n\\t\\t(success, ) = locker.execute(\\n\\t\\t\\tCRV3,\\n\\t\\t\\t0,\\n\\t\\t\\tabi.encodeWithSignature(\\\"transfer(address,uint256)\\\", address(accumulator), amountToSend)\\n\\t\\t);\\n\\t\\trequire(success, \\\"3crv transfer failed\\\");\\n\\t\\tif (_notify) {\\n\\t\\t\\taccumulator.notifyAll();\\n\\t\\t}\\n\\t\\temit Crv3Claimed(amountToSend, _notify);\\n\\t}\\n\\n\\t/// @notice function to toggle a vault\\n\\t/// @param _vault vault address\\n\\tfunction toggleVault(address _vault) external override onlyGovernanceOrFactory {\\n\\t\\trequire(_vault != address(0), \\\"zero address\\\");\\n\\t\\tvaults[_vault] = !vaults[_vault];\\n\\t\\temit VaultToggled(_vault, vaults[_vault]);\\n\\t}\\n\\n\\t/// @notice function to set a gauge type\\n\\t/// @param _gauge gauge address\\n\\t/// @param _gaugeType type of gauge\\n\\tfunction setLGtype(address _gauge, uint256 _gaugeType) external onlyGovernanceOrFactory {\\n\\t\\tlGaugeType[_gauge] = _gaugeType;\\n\\t}\\n\\n\\t/// @notice function to set a new gauge\\n\\t/// It permits to set it as  address(0), for disabling it\\n\\t/// in case of migration\\n\\t/// @param _token token address\\n\\t/// @param _gauge gauge address\\n\\tfunction setGauge(address _token, address _gauge) external override onlyGovernanceOrFactory {\\n\\t\\trequire(_token != address(0), \\\"zero address\\\");\\n\\t\\t// Set new gauge\\n\\t\\tgauges[_token] = _gauge;\\n\\t\\temit GaugeSet(_gauge, _token);\\n\\t}\\n\\n\\t/// @notice function to migrate any LP to another strategy contract (hard migration)\\n\\t/// @param _token token address\\n\\tfunction migrateLP(address _token) external onlyApprovedVault {\\n\\t\\trequire(gauges[_token] != address(0), \\\"not existent gauge\\\");\\n\\t\\tmigrate(_token);\\n\\t}\\n\\n\\t/// @notice function to migrate any LP, it sends them to the vault\\n\\t/// @param _token token address\\n\\tfunction migrate(address _token) internal {\\n\\t\\taddress gauge = gauges[_token];\\n\\t\\tuint256 amount = IERC20(gauge).balanceOf(address(locker));\\n\\t\\t// Withdraw LPs from the old gauge\\n\\t\\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\\\"withdraw(uint256)\\\", amount));\\n\\t\\trequire(success, \\\"Withdraw failed!\\\");\\n\\n\\t\\t// Transfer LPs to the approved vault\\n\\t\\t(success, ) = locker.execute(_token, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, amount));\\n\\t\\trequire(success, \\\"Transfer failed!\\\");\\n\\t}\\n\\n\\t/// @notice function to set a multi gauge\\n\\t/// @param _gauge gauge address\\n\\t/// @param _multiGauge multi gauge address\\n\\tfunction setMultiGauge(address _gauge, address _multiGauge) external override onlyGovernanceOrFactory {\\n\\t\\trequire(_gauge != address(0), \\\"zero address\\\");\\n\\t\\trequire(_multiGauge != address(0), \\\"zero address\\\");\\n\\t\\tmultiGauges[_gauge] = _multiGauge;\\n\\t}\\n\\n\\t/// @notice function to set a new veSDTProxy\\n\\t/// @param _newVeSDTProxy veSdtProxy address\\n\\tfunction setVeSDTProxy(address _newVeSDTProxy) external onlyGovernance {\\n\\t\\trequire(_newVeSDTProxy != address(0), \\\"zero address\\\");\\n\\t\\tveSDTFeeProxy = _newVeSDTProxy;\\n\\t}\\n\\n\\t/// @notice function to set a new accumulator\\n\\t/// @param _newAccumulator accumulator address\\n\\tfunction setAccumulator(address _newAccumulator) external onlyGovernance {\\n\\t\\trequire(_newAccumulator != address(0), \\\"zero address\\\");\\n\\t\\taccumulator = CurveAccumulator(_newAccumulator);\\n\\t}\\n\\n\\t/// @notice function to set a new reward receiver\\n\\t/// @param _newRewardsReceiver reward receiver address\\n\\tfunction setRewardsReceiver(address _newRewardsReceiver) external onlyGovernance {\\n\\t\\trequire(_newRewardsReceiver != address(0), \\\"zero address\\\");\\n\\t\\trewardsReceiver = _newRewardsReceiver;\\n\\t}\\n\\n\\t/// @notice function to set a new governance address\\n\\t/// @param _newGovernance governance address\\n\\tfunction setGovernance(address _newGovernance) external onlyGovernance {\\n\\t\\trequire(_newGovernance != address(0), \\\"zero address\\\");\\n\\t\\tgovernance = _newGovernance;\\n\\t}\\n\\n\\tfunction setVaultGaugeFactory(address _newVaultGaugeFactory) external onlyGovernance {\\n\\t\\trequire(_newVaultGaugeFactory != address(0), \\\"zero address\\\");\\n\\t\\tvaultGaugeFactory = _newVaultGaugeFactory;\\n\\t}\\n\\n\\t/// @notice function to set new fees\\n\\t/// @param _manageFee manageFee\\n\\t/// @param _gauge gauge address\\n\\t/// @param _newFee new fee to set\\n\\tfunction manageFee(\\n\\t\\tMANAGEFEE _manageFee,\\n\\t\\taddress _gauge,\\n\\t\\tuint256 _newFee\\n\\t) external onlyGovernanceOrFactory {\\n\\t\\trequire(_gauge != address(0), \\\"zero address\\\");\\n\\t\\tif (_manageFee == MANAGEFEE.PERFFEE) {\\n\\t\\t\\t// 0\\n\\t\\t\\tperfFee[_gauge] = _newFee;\\n\\t\\t} else if (_manageFee == MANAGEFEE.VESDTFEE) {\\n\\t\\t\\t// 1\\n\\t\\t\\tveSDTFee[_gauge] = _newFee;\\n\\t\\t} else if (_manageFee == MANAGEFEE.ACCUMULATORFEE) {\\n\\t\\t\\t//2\\n\\t\\t\\taccumulatorFee[_gauge] = _newFee;\\n\\t\\t} else if (_manageFee == MANAGEFEE.CLAIMERREWARD) {\\n\\t\\t\\t// 3\\n\\t\\t\\tclaimerRewardFee[_gauge] = _newFee;\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\tperfFee[_gauge] + veSDTFee[_gauge] + accumulatorFee[_gauge] + claimerRewardFee[_gauge] <= BASE_FEE,\\n\\t\\t\\t\\\"fee to high\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice execute a function\\n\\t/// @param _to Address to sent the value to\\n\\t/// @param _value Value to be sent\\n\\t/// @param _data Call function data\\n\\tfunction execute(\\n\\t\\taddress _to,\\n\\t\\tuint256 _value,\\n\\t\\tbytes calldata _data\\n\\t) external onlyGovernance returns (bool, bytes memory) {\\n\\t\\t(bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n\\t\\treturn (success, result);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategy/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/ILocker.sol\\\";\\n\\ncontract BaseStrategy {\\n\\t/* ========== STATE VARIABLES ========== */\\n\\tILocker public locker;\\n\\taddress public governance;\\n\\taddress public rewardsReceiver;\\n\\taddress public veSDTFeeProxy;\\n\\taddress public vaultGaugeFactory;\\n\\tuint256 public constant BASE_FEE = 10_000;\\n\\tmapping(address => address) public gauges;\\n\\tmapping(address => bool) public vaults;\\n\\tmapping(address => uint256) public perfFee;\\n\\tmapping(address => address) public multiGauges;\\n\\tmapping(address => uint256) public accumulatorFee; // gauge -> fee\\n\\tmapping(address => uint256) public claimerRewardFee; // gauge -> fee\\n\\tmapping(address => uint256) public veSDTFee; // gauge -> fee\\n\\n\\t/* ========== EVENTS ========== */\\n\\tevent Deposited(address _gauge, address _token, uint256 _amount);\\n\\tevent Withdrawn(address _gauge, address _token, uint256 _amount);\\n\\tevent Claimed(address _gauge, address _token, uint256 _amount);\\n\\tevent RewardReceiverSet(address _gauge, address _receiver);\\n\\tevent VaultToggled(address _vault, bool _newState);\\n\\tevent GaugeSet(address _gauge, address _token);\\n\\n\\t/* ========== MODIFIERS ========== */\\n\\tmodifier onlyGovernance() {\\n\\t\\trequire(msg.sender == governance, \\\"!governance\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyApprovedVault() {\\n\\t\\trequire(vaults[msg.sender], \\\"!approved vault\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyGovernanceOrFactory() {\\n\\t\\trequire(msg.sender == governance || msg.sender == vaultGaugeFactory, \\\"!governance && !factory\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/* ========== CONSTRUCTOR ========== */\\n\\tconstructor(\\n\\t\\tILocker _locker,\\n\\t\\taddress _governance,\\n\\t\\taddress _receiver\\n\\t) {\\n\\t\\tlocker = _locker;\\n\\t\\tgovernance = _governance;\\n\\t\\trewardsReceiver = _receiver;\\n\\t}\\n\\n\\t/* ========== MUTATIVE FUNCTIONS ========== */\\n\\tfunction deposit(address _token, uint256 _amount) external virtual onlyApprovedVault {}\\n\\n\\tfunction withdraw(address _token, uint256 _amount) external virtual onlyApprovedVault {}\\n\\n\\tfunction claim(address _gauge) external virtual {}\\n\\n\\tfunction toggleVault(address _vault) external virtual onlyGovernanceOrFactory {}\\n\\n\\tfunction setGauge(address _token, address _gauge) external virtual onlyGovernanceOrFactory {}\\n\\n\\tfunction setMultiGauge(address _gauge, address _multiGauge) external virtual onlyGovernanceOrFactory {}\\n}\\n\"\r\n    },\r\n    \"contracts/accumulator/CurveAccumulator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./BaseAccumulator.sol\\\";\\nimport \\\"../strategy/CurveStrategy.sol\\\";\\n\\n/// @title A contract that accumulates 3crv rewards and notifies them to the LGV4\\n/// @author StakeDAO\\ncontract CurveAccumulator is BaseAccumulator {\\n\\taddress public constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\taddress public constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\taddress public strategy = 0x20F1d4Fed24073a9b9d388AfA2735Ac91f079ED6;\\n\\n\\t/* ========== CONSTRUCTOR ========== */\\n\\tconstructor(address _tokenReward, address _gauge) BaseAccumulator(_tokenReward, _gauge) {}\\n\\n\\t/* ========== MUTATIVE FUNCTIONS ========== */\\n\\t/// @notice Notify a 3crv amount to the LGV4\\n\\t/// @param _amount amount to notify after the claim\\n\\tfunction notify(uint256 _amount) external {\\n\\t\\tCurveStrategy(strategy).claim3Crv(false);\\n\\t\\t_notifyReward(tokenReward, _amount);\\n\\t\\t_distributeSDT();\\n\\t}\\n\\n\\t/// @notice Notify all 3crv accumulator balance to the LGV4\\n\\tfunction notifyAll() external {\\n\\t\\tCurveStrategy(strategy).claim3Crv(false);\\n\\t\\tuint256 crv3Amount = IERC20(CRV3).balanceOf(address(this));\\n\\t\\tuint256 crvAmount = IERC20(CRV).balanceOf(address(this));\\n\\t\\t_notifyReward(tokenReward, crv3Amount);\\n\\t\\t_notifyReward(CRV, crvAmount);\\n\\t\\t_distributeSDT();\\n\\t}\\n\\n\\tfunction changeStrategy(address _newStrategy) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\tstrategy = _newStrategy;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface ILiquidityGauge {\\n\\tstruct Reward {\\n\\t\\taddress token;\\n\\t\\taddress distributor;\\n\\t\\tuint256 period_finish;\\n\\t\\tuint256 rate;\\n\\t\\tuint256 last_update;\\n\\t\\tuint256 integral;\\n\\t}\\n\\n\\t// solhint-disable-next-line\\n\\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\\n\\n\\t// solhint-disable-next-line\\n\\tfunction claim_rewards_for(address _user, address _recipient) external;\\n\\n\\t// // solhint-disable-next-line\\n\\t// function claim_rewards_for(address _user) external;\\n\\n\\t// solhint-disable-next-line\\n\\tfunction deposit(uint256 _value, address _addr) external;\\n\\n\\t// solhint-disable-next-line\\n\\tfunction reward_tokens(uint256 _i) external view returns (address);\\n\\n\\t// solhint-disable-next-line\\n\\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\\n\\n\\tfunction balanceOf(address) external returns (uint256);\\n\\n\\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\\n\\n\\tfunction claimable_tokens(address _user) external returns (uint256);\\n\\n\\tfunction user_checkpoint(address _user) external returns (bool);\\n\\n\\tfunction commit_transfer_ownership(address) external;\\n\\n\\tfunction claim_rewards(address) external;\\n\\n\\tfunction add_reward(address, address) external;\\n\\n\\tfunction initialize(\\n\\t\\taddress staking_token,\\n\\t\\taddress admin,\\n\\t\\taddress SDT,\\n\\t\\taddress voting_escrow,\\n\\t\\taddress veBoost_proxy,\\n\\t\\taddress distributor\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IMultiRewards {\\n\\tfunction balanceOf(address) external returns (uint256);\\n\\n\\tfunction stakeFor(address, uint256) external;\\n\\n\\tfunction withdrawFor(address, uint256) external;\\n\\n\\tfunction notifyRewardAmount(address, uint256) external;\\n\\n\\tfunction mintFor(address recipient, uint256 amount) external;\\n\\n\\tfunction burnFrom(address _from, uint256 _amount) external;\\n\\n\\tfunction stakeOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/SdtDistributorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./SdtDistributorEvents.sol\\\";\\n\\n/// @title SdtDistributorV2\\n/// @notice Earn from Masterchef SDT and distribute it to gauges\\ncontract SdtDistributorV2 is ReentrancyGuardUpgradeable, AccessControlUpgradeable, SdtDistributorEvents {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t////////////////////////////////////////////////////////////////\\n\\t/// --- CONSTANTS\\n\\t///////////////////////////////////////////////////////////////\\n\\n\\t/// @notice Accounting\\n\\tuint256 public constant BASE_UNIT = 10_000;\\n\\n\\t/// @notice Address of the SDT token given as a reward.\\n\\tIERC20 public constant rewardToken = IERC20(0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F);\\n\\n\\t/// @notice Address of the masterchef.\\n\\tIMasterchef public constant masterchef = IMasterchef(0xfEA5E213bbD81A8a94D0E1eDB09dBD7CEab61e1c);\\n\\n\\t/// @notice Role for governors only.\\n\\tbytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n\\t/// @notice Role for the guardian\\n\\tbytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n\\t////////////////////////////////////////////////////////////////\\n\\t/// --- STORAGE SLOTS\\n\\t///////////////////////////////////////////////////////////////\\n\\n\\t/// @notice Time between SDT Harvest.\\n\\tuint256 public timePeriod;\\n\\n\\t/// @notice Address of the token that will be deposited in masterchef.\\n\\tIERC20 public masterchefToken;\\n\\n\\t/// @notice Address of the `GaugeController` contract.\\n\\tIGaugeController public controller;\\n\\n\\t/// @notice Address responsible for pulling rewards of type >= 2 gauges and distributing it to the\\n\\t/// associated contracts if there is not already an address delegated for this specific contract.\\n\\taddress public delegateGauge;\\n\\n\\t/// @notice Whether SDT distribution through this contract is on or no.\\n\\tbool public distributionsOn;\\n\\n\\t/// @notice Maps the address of a type >= 2 gauge to a delegate address responsible\\n\\t/// for giving rewards to the actual gauge.\\n\\tmapping(address => address) public delegateGauges;\\n\\n\\t/// @notice Maps the address of a gauge to whether it was killed or not\\n\\t/// A gauge killed in this contract cannot receive any rewards.\\n\\tmapping(address => bool) public killedGauges;\\n\\n\\t/// @notice Maps the address of a gauge delegate to whether this delegate supports the `notifyReward` interface\\n\\t/// and is therefore built for automation.\\n\\tmapping(address => bool) public isInterfaceKnown;\\n\\n\\t/// @notice Masterchef PID\\n\\tuint256 public masterchefPID;\\n\\n\\t/// @notice Timestamp of the last pull from masterchef.\\n\\tuint256 public lastMasterchefPull;\\n\\n\\t/// @notice Maps the timestamp of pull action to the amount of SDT that pulled.\\n\\tmapping(uint256 => uint256) public pulls; // day => SDT amount\\n\\n\\t/// @notice Maps the timestamp of last pull to the gauge addresses then keeps the data if particular gauge paid in the last pull.\\n\\tmapping(uint256 => mapping(address => bool)) public isGaugePaid;\\n\\n\\t/// @notice Incentive for caller.\\n\\tuint256 public claimerFee;\\n\\n\\t/// @notice Number of days to go through for past distributing.\\n\\tuint256 public lookPastDays;\\n\\n\\t////////////////////////////////////////////////////////////////\\n\\t/// --- INITIALIZATION LOGIC\\n\\t///////////////////////////////////////////////////////////////\\n\\n\\t/// @notice Initialize function\\n\\t/// @param _controller gauge controller to manage votes\\n\\t/// @param _governor governor address\\n\\t/// @param _guardian guardian address\\n\\t/// @param _delegateGauge delegate gauge address\\n\\tfunction initialize(\\n\\t\\taddress _controller,\\n\\t\\taddress _governor,\\n\\t\\taddress _guardian,\\n\\t\\taddress _delegateGauge\\n\\t) external initializer {\\n\\t\\trequire(_controller != address(0) && _guardian != address(0) && _governor != address(0), \\\"0\\\");\\n\\n\\t\\tcontroller = IGaugeController(_controller);\\n\\t\\tdelegateGauge = _delegateGauge;\\n\\n\\t\\tmasterchefToken = IERC20(address(new MasterchefMasterToken()));\\n\\t\\tdistributionsOn = false;\\n\\n\\t\\ttimePeriod = 3600 * 24; // One day in seconds\\n\\t\\tlookPastDays = 45; // for past 45 days check\\n\\n\\t\\t_setRoleAdmin(GOVERNOR_ROLE, GOVERNOR_ROLE);\\n\\t\\t_setRoleAdmin(GUARDIAN_ROLE, GOVERNOR_ROLE);\\n\\n\\t\\t_setupRole(GUARDIAN_ROLE, _guardian);\\n\\t\\t_setupRole(GOVERNOR_ROLE, _governor);\\n\\t\\t_setupRole(GUARDIAN_ROLE, _governor);\\n\\t}\\n\\n\\t/// @custom:oz-upgrades-unsafe-allow constructor\\n\\tconstructor() initializer {}\\n\\n\\t/// @notice Initialize the masterchef depositing the master token\\n\\t/// @param _pid pool id to deposit the token\\n\\tfunction initializeMasterchef(uint256 _pid) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\tmasterchefPID = _pid;\\n\\t\\tmasterchefToken.approve(address(masterchef), 1e18);\\n\\t\\tmasterchef.deposit(_pid, 1e18);\\n\\t}\\n\\n\\t////////////////////////////////////////////////////////////////\\n\\t/// --- DISTRIBUTION LOGIC\\n\\t///////////////////////////////////////////////////////////////\\n\\n\\t/// @notice Distribute SDT to Gauges\\n\\t/// @param gaugeAddr Address of the gauge to distribute.\\n\\tfunction distribute(address gaugeAddr) external nonReentrant {\\n\\t\\t_distribute(gaugeAddr);\\n\\t}\\n\\n\\t/// @notice Distribute SDT to Multiple Gauges\\n\\t/// @param gaugeAddr Array of addresses of the gauge to distribute.\\n\\tfunction distributeMulti(address[] calldata gaugeAddr) public nonReentrant {\\n\\t\\tuint256 length = gaugeAddr.length;\\n\\t\\tfor (uint256 i; i < length; i++) {\\n\\t\\t\\t_distribute(gaugeAddr[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Internal implementation of distribute logic.\\n\\t/// @param gaugeAddr Address of the gauge to distribute rewards to\\n\\tfunction _distribute(address gaugeAddr) internal {\\n\\t\\trequire(distributionsOn, \\\"not allowed\\\");\\n\\t\\t(bool success, bytes memory result) = address(controller).call(\\n\\t\\t\\tabi.encodeWithSignature(\\\"gauge_types(address)\\\", gaugeAddr)\\n\\t\\t);\\n\\t\\tif (!success || killedGauges[gaugeAddr]) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tint128 gaugeType = abi.decode(result, (int128));\\n\\n\\t\\t// Rounded to beginning of the day -> 00:00 UTC\\n\\t\\tuint256 roundedTimestamp = (block.timestamp / 1 days) * 1 days;\\n\\n\\t\\tuint256 totalDistribute;\\n\\n\\t\\tif (block.timestamp > lastMasterchefPull + timePeriod) {\\n\\t\\t\\tuint256 sdtBefore = rewardToken.balanceOf(address(this));\\n\\t\\t\\t_pullSDT();\\n\\t\\t\\tpulls[roundedTimestamp] = rewardToken.balanceOf(address(this)) - sdtBefore;\\n\\t\\t\\tlastMasterchefPull = roundedTimestamp;\\n\\t\\t}\\n\\t\\t// check past n days\\n\\t\\tfor (uint256 i; i < lookPastDays; i++) {\\n\\t\\t\\tuint256 currentTimestamp = roundedTimestamp - (i * 86_400);\\n\\n\\t\\t\\tif (pulls[currentTimestamp] > 0) {\\n\\t\\t\\t\\tbool isPaid = isGaugePaid[currentTimestamp][gaugeAddr];\\n\\t\\t\\t\\tif (isPaid) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Retrieve the amount pulled from Masterchef at the given timestamp.\\n\\t\\t\\t\\tuint256 sdtBalance = pulls[currentTimestamp];\\n\\t\\t\\t\\tuint256 gaugeRelativeWeight;\\n\\n\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\t// Makes sure the weight is checkpointed. Also returns the weight.\\n\\t\\t\\t\\t\\tgaugeRelativeWeight = controller.gauge_relative_weight_write(gaugeAddr, currentTimestamp);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tgaugeRelativeWeight = controller.gauge_relative_weight(gaugeAddr, currentTimestamp);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tuint256 sdtDistributed = (sdtBalance * gaugeRelativeWeight) / 1e18;\\n\\t\\t\\t\\ttotalDistribute += sdtDistributed;\\n\\t\\t\\t\\tisGaugePaid[currentTimestamp][gaugeAddr] = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (totalDistribute > 0) {\\n\\t\\t\\tif (gaugeType == 1) {\\n\\t\\t\\t\\trewardToken.safeTransfer(gaugeAddr, totalDistribute);\\n\\t\\t\\t\\tIStakingRewards(gaugeAddr).notifyRewardAmount(totalDistribute);\\n\\t\\t\\t} else if (gaugeType >= 2) {\\n\\t\\t\\t\\t// If it is defined, we use the specific delegate attached to the gauge\\n\\t\\t\\t\\taddress delegate = delegateGauges[gaugeAddr];\\n\\t\\t\\t\\tif (delegate == address(0)) {\\n\\t\\t\\t\\t\\t// If not, we check if a delegate common to all gauges with type >= 2 can be used\\n\\t\\t\\t\\t\\tdelegate = delegateGauge;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (delegate != address(0)) {\\n\\t\\t\\t\\t\\t// In the case where the gauge has a delegate (specific or not), then rewards are transferred to this gauge\\n\\t\\t\\t\\t\\trewardToken.safeTransfer(delegate, totalDistribute);\\n\\t\\t\\t\\t\\t// If this delegate supports a specific interface, then rewards sent are notified through this\\n\\t\\t\\t\\t\\t// interface\\n\\t\\t\\t\\t\\tif (isInterfaceKnown[delegate]) {\\n\\t\\t\\t\\t\\t\\tISdtMiddlemanGauge(delegate).notifyReward(gaugeAddr, totalDistribute);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trewardToken.safeTransfer(gaugeAddr, totalDistribute);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tILiquidityGauge(gaugeAddr).deposit_reward_token(address(rewardToken), totalDistribute);\\n\\t\\t\\t}\\n\\n\\t\\t\\temit RewardDistributed(gaugeAddr, totalDistribute, lastMasterchefPull);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Internal function to pull SDT from the MasterChef\\n\\tfunction _pullSDT() internal {\\n\\t\\tmasterchef.withdraw(masterchefPID, 0);\\n\\t}\\n\\n\\t////////////////////////////////////////////////////////////////\\n\\t/// --- RESTRICTIVE FUNCTIONS\\n\\t///////////////////////////////////////////////////////////////\\n\\n\\t/// @notice Sets the distribution state (on/off)\\n\\t/// @param _state new distribution state\\n\\tfunction setDistribution(bool _state) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\tdistributionsOn = _state;\\n\\t}\\n\\n\\t/// @notice Sets a new gauge controller\\n\\t/// @param _controller Address of the new gauge controller\\n\\tfunction setGaugeController(address _controller) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\trequire(_controller != address(0), \\\"0\\\");\\n\\t\\tcontroller = IGaugeController(_controller);\\n\\t\\temit GaugeControllerUpdated(_controller);\\n\\t}\\n\\n\\t/// @notice Sets a new delegate gauge for pulling rewards of a type >= 2 gauges or of all type >= 2 gauges\\n\\t/// @param gaugeAddr Gauge to change the delegate of\\n\\t/// @param _delegateGauge Address of the new gauge delegate related to `gaugeAddr`\\n\\t/// @param toggleInterface Whether we should toggle the fact that the `_delegateGauge` is built for automation or not\\n\\t/// @dev This function can be used to remove delegating or introduce the pulling of rewards to a given address\\n\\t/// @dev If `gaugeAddr` is the zero address, this function updates the delegate gauge common to all gauges with type >= 2\\n\\t/// @dev The `toggleInterface` parameter has been added for convenience to save one transaction when adding a gauge delegate\\n\\t/// which supports the `notifyReward` interface\\n\\tfunction setDelegateGauge(\\n\\t\\taddress gaugeAddr,\\n\\t\\taddress _delegateGauge,\\n\\t\\tbool toggleInterface\\n\\t) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\tif (gaugeAddr != address(0)) {\\n\\t\\t\\tdelegateGauges[gaugeAddr] = _delegateGauge;\\n\\t\\t} else {\\n\\t\\t\\tdelegateGauge = _delegateGauge;\\n\\t\\t}\\n\\t\\temit DelegateGaugeUpdated(gaugeAddr, _delegateGauge);\\n\\n\\t\\tif (toggleInterface) {\\n\\t\\t\\t_toggleInterfaceKnown(_delegateGauge);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Toggles the status of a gauge to either killed or unkilled\\n\\t/// @param gaugeAddr Gauge to toggle the status of\\n\\t/// @dev It is impossible to kill a gauge in the `GaugeController` contract, for this reason killing of gauges\\n\\t/// takes place in the `SdtDistributor` contract\\n\\t/// @dev This means that people could vote for a gauge in the gauge controller contract but that rewards are not going\\n\\t/// to be distributed to it in the end: people would need to remove their weights on the gauge killed to end the diminution\\n\\t/// in rewards\\n\\t/// @dev In the case of a gauge being killed, this function resets the timestamps at which this gauge has been approved and\\n\\t/// disapproves the gauge to spend the token\\n\\t/// @dev It should be cautiously called by governance as it could result in less SDT overall rewards than initially planned\\n\\t/// if people do not remove their voting weights to the killed gauge\\n\\tfunction toggleGauge(address gaugeAddr) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\tbool gaugeKilledMem = killedGauges[gaugeAddr];\\n\\t\\tif (!gaugeKilledMem) {\\n\\t\\t\\trewardToken.safeApprove(gaugeAddr, 0);\\n\\t\\t}\\n\\t\\tkilledGauges[gaugeAddr] = !gaugeKilledMem;\\n\\t\\temit GaugeToggled(gaugeAddr, !gaugeKilledMem);\\n\\t}\\n\\n\\t/// @notice Notifies that the interface of a gauge delegate is known or has changed\\n\\t/// @param _delegateGauge Address of the gauge to change\\n\\t/// @dev Gauge delegates that are built for automation should be toggled\\n\\tfunction toggleInterfaceKnown(address _delegateGauge) external onlyRole(GUARDIAN_ROLE) {\\n\\t\\t_toggleInterfaceKnown(_delegateGauge);\\n\\t}\\n\\n\\t/// @notice Toggles the fact that a gauge delegate can be used for automation or not and therefore supports\\n\\t/// the `notifyReward` interface\\n\\t/// @param _delegateGauge Address of the gauge to change\\n\\tfunction _toggleInterfaceKnown(address _delegateGauge) internal {\\n\\t\\tbool isInterfaceKnownMem = isInterfaceKnown[_delegateGauge];\\n\\t\\tisInterfaceKnown[_delegateGauge] = !isInterfaceKnownMem;\\n\\t\\temit InterfaceKnownToggled(_delegateGauge, !isInterfaceKnownMem);\\n\\t}\\n\\n\\t/// @notice Gives max approvement to the gauge\\n\\t/// @param gaugeAddr Address of the gauge\\n\\tfunction approveGauge(address gaugeAddr) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\trewardToken.safeApprove(gaugeAddr, type(uint256).max);\\n\\t}\\n\\n\\t/// @notice Set the time period to pull SDT from Masterchef\\n\\t/// @param _timePeriod new timePeriod value in seconds\\n\\tfunction setTimePeriod(uint256 _timePeriod) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\trequire(_timePeriod >= 1 days, \\\"TOO_LOW\\\");\\n\\t\\ttimePeriod = _timePeriod;\\n\\t}\\n\\n\\tfunction setClaimerFee(uint256 _newFee) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\trequire(_newFee <= BASE_UNIT, \\\"TOO_HIGH\\\");\\n\\t\\tclaimerFee = _newFee;\\n\\t}\\n\\n\\t/// @notice Set the how many days we should look back for reward distribution\\n\\t/// @param _newLookPastDays new value for how many days we should look back\\n\\tfunction setLookPastDays(uint256 _newLookPastDays) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\tlookPastDays = _newLookPastDays;\\n\\t}\\n\\n\\t/// @notice Withdraws ERC20 tokens that could accrue on this contract\\n\\t/// @param tokenAddress Address of the ERC20 token to withdraw\\n\\t/// @param to Address to transfer to\\n\\t/// @param amount Amount to transfer\\n\\t/// @dev Added to support recovering LP Rewards and other mistaken tokens\\n\\t/// from other systems to be distributed to holders\\n\\t/// @dev This function could also be used to recover SDT tokens in case the rate got smaller\\n\\tfunction recoverERC20(\\n\\t\\taddress tokenAddress,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external onlyRole(GOVERNOR_ROLE) {\\n\\t\\tIERC20(tokenAddress).safeTransfer(to, amount);\\n\\t\\temit Recovered(tokenAddress, to, amount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface ILocker {\\n\\tfunction createLock(uint256, uint256) external;\\n\\n\\tfunction claimAllRewards(address[] calldata _tokens, address _recipient) external;\\n\\n\\tfunction increaseAmount(uint256) external;\\n\\n\\tfunction increaseUnlockTime(uint256) external;\\n\\n\\tfunction release() external;\\n\\n\\tfunction claimRewards(address, address) external;\\n\\n\\tfunction claimFXSRewards(address) external;\\n\\n\\tfunction execute(\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes calldata\\n\\t) external returns (bool, bytes memory);\\n\\n\\tfunction setGovernance(address) external;\\n\\n\\tfunction voteGaugeWeight(address, uint256) external;\\n\\n\\tfunction setAngleDepositor(address) external;\\n\\n\\tfunction setFxsDepositor(address) external;\\n\\n\\tfunction setYieldDistributor(address) external;\\n\\n\\tfunction setGaugeController(address) external;\\n\\n\\tfunction setAccumulator(address _accumulator) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/accumulator/BaseAccumulator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/ILocker.sol\\\";\\nimport \\\"../interfaces/ILiquidityGauge.sol\\\";\\nimport { ISDTDistributor } from \\\"../interfaces/ISDTDistributor.sol\\\";\\n\\n/// @title BaseAccumulator\\n/// @notice A contract that defines the functions shared by all accumulators\\n/// @author StakeDAO\\ncontract BaseAccumulator {\\n\\tusing SafeERC20 for IERC20;\\n\\t/* ========== STATE VARIABLES ========== */\\n\\n\\taddress public governance;\\n\\taddress public locker;\\n\\taddress public tokenReward;\\n\\taddress public gauge;\\n\\taddress public sdtDistributor;\\n\\tuint256 public claimerFee;\\n\\n\\t/* ========== EVENTS ========== */\\n\\n\\tevent SdtDistributorUpdated(address oldDistributor, address newDistributor);\\n\\tevent GaugeSet(address oldGauge, address newGauge);\\n\\tevent RewardNotified(address gauge, address tokenReward, uint256 amountNotified, uint256 claimerFee);\\n\\tevent LockerSet(address oldLocker, address newLocker);\\n\\tevent GovernanceSet(address oldGov, address newGov);\\n\\tevent TokenRewardSet(address oldTr, address newTr);\\n\\tevent TokenDeposited(address token, uint256 amount);\\n\\tevent ERC20Rescued(address token, uint256 amount);\\n\\n\\t/* ========== CONSTRUCTOR ========== */\\n\\tconstructor(address _tokenReward, address _gauge) {\\n\\t\\ttokenReward = _tokenReward;\\n\\t\\tgauge = _gauge;\\n\\t\\tgovernance = msg.sender;\\n\\t}\\n\\n\\t/* ========== MUTATIVE FUNCTIONS ========== */\\n\\n\\t/// @notice Notify the reward using an extra token\\n\\t/// @param _tokenReward token address to notify\\n\\t/// @param _amount amount to notify\\n\\tfunction notifyExtraReward(address _tokenReward, uint256 _amount) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\t_notifyReward(_tokenReward, _amount);\\n\\t\\t_distributeSDT();\\n\\t}\\n\\n\\t/// @notice Notify the reward using all balance of extra token\\n\\t/// @param _tokenReward token address to notify\\n\\tfunction notifyAllExtraReward(address _tokenReward) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\tuint256 amount = IERC20(_tokenReward).balanceOf(address(this));\\n\\t\\t_notifyReward(_tokenReward, amount);\\n\\t\\t_distributeSDT();\\n\\t}\\n\\n\\tfunction notifyExtraReward(address[] calldata _tokens, uint256[] calldata amounts) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\t_notifyExtraReward(_tokens, amounts);\\n\\t\\t_distributeSDT();\\n\\t}\\n\\n\\tfunction _notifyExtraReward(address[] memory _tokens, uint256[] memory amounts) internal {\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ++i) {\\n\\t\\t\\t_notifyReward(_tokens[i], amounts[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction notifyAllExtraReward(address[] calldata _tokens) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\t_notifyAllExtraReward(_tokens);\\n\\t\\t_distributeSDT();\\n\\t}\\n\\n\\tfunction _notifyAllExtraReward(address[] memory _tokens) internal {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ++i) {\\n\\t\\t\\tamount = IERC20(_tokens[i]).balanceOf(address(this));\\n\\t\\t\\t_notifyReward(_tokens[i], amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _distributeSDT() internal {\\n\\t\\tif (sdtDistributor != address(0)) {\\n\\t\\t\\tISDTDistributor(sdtDistributor).distribute(gauge);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Notify the new reward to the LGV4\\n\\t/// @param _tokenReward token to notify\\n\\t/// @param _amount amount to notify\\n\\tfunction _notifyReward(address _tokenReward, uint256 _amount) internal {\\n\\t\\trequire(gauge != address(0), \\\"gauge not set\\\");\\n\\t\\tif (_amount == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tuint256 balanceBefore = IERC20(_tokenReward).balanceOf(address(this));\\n\\t\\trequire(balanceBefore >= _amount, \\\"amount not enough\\\");\\n\\t\\tif (ILiquidityGauge(gauge).reward_data(_tokenReward).distributor == address(this)) {\\n\\t\\t\\tuint256 claimerReward = (_amount * claimerFee) / 10000;\\n\\t\\t\\tIERC20(_tokenReward).transfer(msg.sender, claimerReward);\\n\\t\\t\\t_amount -= claimerReward;\\n\\t\\t\\tIERC20(_tokenReward).approve(gauge, _amount);\\n\\t\\t\\tILiquidityGauge(gauge).deposit_reward_token(_tokenReward, _amount);\\n\\n\\t\\t\\tuint256 balanceAfter = IERC20(_tokenReward).balanceOf(address(this));\\n\\n\\t\\t\\trequire(balanceBefore - balanceAfter == _amount + claimerReward, \\\"wrong amount notified\\\");\\n\\n\\t\\t\\temit RewardNotified(gauge, _tokenReward, _amount, claimerReward);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Deposit token into the accumulator\\n\\t/// @param _token token to deposit\\n\\t/// @param _amount amount to deposit\\n\\tfunction depositToken(address _token, uint256 _amount) external {\\n\\t\\trequire(_amount > 0, \\\"set an amount > 0\\\");\\n\\t\\tIERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\t\\temit TokenDeposited(_token, _amount);\\n\\t}\\n\\n\\t/// @notice Sets gauge for the accumulator which will receive and distribute the rewards\\n\\t/// @dev Can be called only by the governance\\n\\t/// @param _gauge gauge address\\n\\tfunction setGauge(address _gauge) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\trequire(_gauge != address(0), \\\"can't be zero address\\\");\\n\\t\\temit GaugeSet(gauge, _gauge);\\n\\t\\tgauge = _gauge;\\n\\t}\\n\\n\\t/// @notice Sets SdtDistributor to distribute from the Accumulator SDT Rewards to Gauge.\\n\\t/// @dev Can be called only by the governance\\n\\t/// @param _sdtDistributor gauge address\\n\\tfunction setSdtDistributor(address _sdtDistributor) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\trequire(_sdtDistributor != address(0), \\\"can't be zero address\\\");\\n\\n\\t\\temit SdtDistributorUpdated(sdtDistributor, _sdtDistributor);\\n\\t\\tsdtDistributor = _sdtDistributor;\\n\\t}\\n\\n\\t/// @notice Allows the governance to set the new governance\\n\\t/// @dev Can be called only by the governance\\n\\t/// @param _governance governance address\\n\\tfunction setGovernance(address _governance) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\trequire(_governance != address(0), \\\"can't be zero address\\\");\\n\\t\\temit GovernanceSet(governance, _governance);\\n\\t\\tgovernance = _governance;\\n\\t}\\n\\n\\t/// @notice Allows the governance to set the locker\\n\\t/// @dev Can be called only by the governance\\n\\t/// @param _locker locker address\\n\\tfunction setLocker(address _locker) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\trequire(_locker != address(0), \\\"can't be zero address\\\");\\n\\t\\temit LockerSet(locker, _locker);\\n\\t\\tlocker = _locker;\\n\\t}\\n\\n\\t/// @notice Allows the governance to set the token reward\\n\\t/// @dev Can be called only by the governance\\n\\t/// @param _tokenReward token reward address\\n\\tfunction setTokenReward(address _tokenReward) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\trequire(_tokenReward != address(0), \\\"can't be zero address\\\");\\n\\t\\temit TokenRewardSet(tokenReward, _tokenReward);\\n\\t\\ttokenReward = _tokenReward;\\n\\t}\\n\\n\\tfunction setClaimerFee(uint256 _claimerFee) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\tclaimerFee = _claimerFee;\\n\\t}\\n\\n\\t/// @notice A function that rescue any ERC20 token\\n\\t/// @param _token token address\\n\\t/// @param _amount amount to rescue\\n\\t/// @param _recipient address to send token rescued\\n\\tfunction rescueERC20(\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _recipient\\n\\t) external {\\n\\t\\trequire(msg.sender == governance, \\\"!gov\\\");\\n\\t\\trequire(_amount > 0, \\\"set an amount > 0\\\");\\n\\t\\trequire(_recipient != address(0), \\\"can't be zero address\\\");\\n\\t\\tIERC20(_token).safeTransfer(_recipient, _amount);\\n\\t\\temit ERC20Rescued(_token, _amount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISDTDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\ninterface ISDTDistributor {\\n\\tfunction distribute(address gaugeAddr) external;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/SdtDistributorEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IGaugeController.sol\\\";\\nimport \\\"../interfaces/ILiquidityGauge.sol\\\";\\nimport \\\"../interfaces/ISdtMiddlemanGauge.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\nimport \\\"../interfaces/IMasterchef.sol\\\";\\nimport \\\"./MasterchefMasterToken.sol\\\";\\n\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\n/// @title SdtDistributorEvents\\n/// @author StakeDAO Core Team\\n/// @notice All the events used in `SdtDistributor` contract\\nabstract contract SdtDistributorEvents {\\n\\tevent DelegateGaugeUpdated(address indexed _gaugeAddr, address indexed _delegateGauge);\\n\\tevent DistributionsToggled(bool _distributionsOn);\\n\\tevent GaugeControllerUpdated(address indexed _controller);\\n\\tevent GaugeToggled(address indexed gaugeAddr, bool newStatus);\\n\\tevent InterfaceKnownToggled(address indexed _delegateGauge, bool _isInterfaceKnown);\\n\\tevent RateUpdated(uint256 _newRate);\\n\\tevent Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\\n\\tevent RewardDistributed(address indexed gaugeAddr, uint256 sdtDistributed, uint256 lastMasterchefPull);\\n\\tevent UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGaugeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IGaugeController {\\n\\t//solhint-disable-next-line\\n\\tfunction gauge_types(address addr) external view returns (int128);\\n\\n\\t//solhint-disable-next-line\\n\\tfunction gauge_relative_weight_write(address addr, uint256 timestamp) external returns (uint256);\\n\\n\\t//solhint-disable-next-line\\n\\tfunction gauge_relative_weight(address addr) external view returns (uint256);\\n\\n\\t//solhint-disable-next-line\\n\\tfunction gauge_relative_weight(address addr, uint256 timestamp) external view returns (uint256);\\n\\n\\t//solhint-disable-next-line\\n\\tfunction get_total_weight() external view returns (uint256);\\n\\n\\t//solhint-disable-next-line\\n\\tfunction get_gauge_weight(address addr) external view returns (uint256);\\n\\n\\tfunction vote_for_gauge_weights(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISdtMiddlemanGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\ninterface ISdtMiddlemanGauge {\\n\\tfunction notifyReward(address gauge, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IStakingRewardsFunctions\\n/// @author StakeDAO Core Team\\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\\ninterface IStakingRewardsFunctions {\\n\\tfunction notifyRewardAmount(uint256 reward) external;\\n\\n\\tfunction recoverERC20(\\n\\t\\taddress tokenAddress,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenAmount\\n\\t) external;\\n\\n\\tfunction setNewRewardsDistribution(address newRewardsDistribution) external;\\n}\\n\\n/// @title IStakingRewards\\n/// @author StakeDAO Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IStakingRewards is IStakingRewardsFunctions {\\n\\tfunction rewardToken() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterchef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IMasterchef {\\n\\tfunction deposit(uint256, uint256) external;\\n\\n\\tfunction withdraw(uint256, uint256) external;\\n\\n\\tfunction userInfo(uint256, address) external view returns (uint256, uint256);\\n\\n\\tfunction poolInfo(uint256)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction totalAllocPoint() external view returns (uint256);\\n\\n\\tfunction sdtPerBlock() external view returns (uint256);\\n\\n\\tfunction pendingSdt(uint256, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/MasterchefMasterToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MasterchefMasterToken is ERC20, Ownable {\\n\\tconstructor() ERC20(\\\"Masterchef Master Token\\\", \\\"MMT\\\") {\\n\\t\\t_mint(msg.sender, 1e18);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/external/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n * require(hasRole(MY_ROLE, msg.sender));\\n * ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n\\tfunction __AccessControl_init() internal initializer {\\n\\t\\t__AccessControl_init_unchained();\\n\\t}\\n\\n\\tfunction __AccessControl_init_unchained() internal initializer {}\\n\\n\\tstruct RoleData {\\n\\t\\tmapping(address => bool) members;\\n\\t\\tbytes32 adminRole;\\n\\t}\\n\\n\\tmapping(bytes32 => RoleData) private _roles;\\n\\n\\tbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\t/**\\n\\t * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n\\t *\\n\\t * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n\\t * {RoleAdminChanged} not being emitted signaling this.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n\\t/**\\n\\t * @dev Emitted when `account` is granted `role`.\\n\\t *\\n\\t * `sender` is the account that originated the contract call, an admin role\\n\\t * bearer except when using {_setupRole}.\\n\\t */\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n\\t/**\\n\\t * @dev Emitted when `account` is revoked `role`.\\n\\t *\\n\\t * `sender` is the account that originated the contract call:\\n\\t * - if using `revokeRole`, it is the admin role bearer\\n\\t * - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n\\t */\\n\\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n\\t/**\\n\\t * @dev Modifier that checks that an account has a specific role. Reverts\\n\\t * with a standardized message including the required role.\\n\\t *\\n\\t * The format of the revert reason is given by the following regular expression:\\n\\t *\\n\\t * /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n\\t *\\n\\t * _Available since v4.1._\\n\\t */\\n\\tmodifier onlyRole(bytes32 role) {\\n\\t\\t_checkRole(role, msg.sender);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns `true` if `account` has been granted `role`.\\n\\t */\\n\\tfunction hasRole(bytes32 role, address account) public view override returns (bool) {\\n\\t\\treturn _roles[role].members[account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Revert with a standard message if `account` is missing `role`.\\n\\t *\\n\\t * The format of the revert reason is given by the following regular expression:\\n\\t *\\n\\t * /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n\\t */\\n\\tfunction _checkRole(bytes32 role, address account) internal view {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\trevert(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\\"AccessControl: account \\\",\\n\\t\\t\\t\\t\\t\\tStringsUpgradeable.toHexString(uint160(account), 20),\\n\\t\\t\\t\\t\\t\\t\\\" is missing role \\\",\\n\\t\\t\\t\\t\\t\\tStringsUpgradeable.toHexString(uint256(role), 32)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the admin role that controls `role`. See {grantRole} and\\n\\t * {revokeRole}.\\n\\t *\\n\\t * To change a role's admin, use {_setRoleAdmin}.\\n\\t */\\n\\tfunction getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n\\t\\treturn _roles[role].adminRole;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Grants `role` to `account`.\\n\\t *\\n\\t * If `account` had not been already granted `role`, emits a {RoleGranted}\\n\\t * event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the caller must have ``role``'s admin role.\\n\\t */\\n\\tfunction grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n\\t\\t_grantRole(role, account);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Revokes `role` from `account`.\\n\\t *\\n\\t * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the caller must have ``role``'s admin role.\\n\\t */\\n\\tfunction revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Revokes `role` from the calling account.\\n\\t *\\n\\t * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n\\t * purpose is to provide a mechanism for accounts to lose their privileges\\n\\t * if they are compromised (such as when a trusted device is misplaced).\\n\\t *\\n\\t * If the calling account had been granted `role`, emits a {RoleRevoked}\\n\\t * event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the caller must be `account`.\\n\\t */\\n\\tfunction renounceRole(bytes32 role, address account) external override {\\n\\t\\trequire(account == msg.sender, \\\"71\\\");\\n\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Grants `role` to `account`.\\n\\t *\\n\\t * If `account` had not been already granted `role`, emits a {RoleGranted}\\n\\t * event. Note that unlike {grantRole}, this function doesn't perform any\\n\\t * checks on the calling account.\\n\\t *\\n\\t * [WARNING]\\n\\t * ====\\n\\t * This function should only be called from the constructor when setting\\n\\t * up the initial roles for the system.\\n\\t *\\n\\t * Using this function in any other way is effectively circumventing the admin\\n\\t * system imposed by {AccessControl}.\\n\\t * ====\\n\\t */\\n\\tfunction _setupRole(bytes32 role, address account) internal {\\n\\t\\t_grantRole(role, account);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets `adminRole` as ``role``'s admin role.\\n\\t *\\n\\t * Emits a {RoleAdminChanged} event.\\n\\t */\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\temit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n\\t\\t_roles[role].adminRole = adminRole;\\n\\t}\\n\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\t_roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\t_roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n\\tfunction hasRole(bytes32 role, address account) external view returns (bool);\\n\\n\\tfunction getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n\\tfunction grantRole(bytes32 role, address account) external;\\n\\n\\tfunction revokeRole(bytes32 role, address account) external;\\n\\n\\tfunction renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Earn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveStrategy\",\"outputs\":[{\"internalType\":\"contract CurveStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_earn\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract CurveStrategy\",\"name\":\"_curveStrategy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CurveStrategy\",\"name\":\"_newStrat\",\"type\":\"address\"}],\"name\":\"setCurveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setKeeperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityGauge\",\"type\":\"address\"}],\"name\":\"setLiquidityGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveVault", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}