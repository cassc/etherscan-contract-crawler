{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Beneficiary is Ownable {\r\n\r\n    address public beneficiary;\r\n\r\n    function Beneficiary() public {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    function setBeneficiary(address _beneficiary) onlyOwner public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract ChestsStore is Beneficiary {\r\n\r\n\r\n    struct chestProduct {\r\n        uint256 price; // Price in wei\r\n        bool isLimited; // is limited sale chest\r\n        uint32 limit; // Sell limit\r\n        uint16 boosters; // count of boosters\r\n        uint24 raiseChance;// in 1/10 of percent\r\n        uint24 raiseStrength;// in 1/10 of percent for params or minutes for timebased boosters\r\n        uint8 onlyBoosterType;//If set chest will produce only this type\r\n        uint8 onlyBoosterStrength;\r\n    }\r\n\r\n\r\n    chestProduct[255] public chestProducts;\r\n    FishbankChests chests;\r\n\r\n\r\n    function ChestsStore(address _chests) public {\r\n        chests = FishbankChests(_chests);\r\n        //set chests to this address\r\n    }\r\n\r\n    function initChestsStore() public onlyOwner {\r\n        // Create basic chests types\r\n        setChestProduct(1, 0, 1, false, 0, 0, 0, 0, 0);\r\n        setChestProduct(2, 15 finney, 3, false, 0, 0, 0, 0, 0);\r\n        setChestProduct(3, 20 finney, 5, false, 0, 0, 0, 0, 0);\r\n    }\r\n\r\n    function setChestProduct(uint16 chestId, uint256 price, uint16 boosters, bool isLimited, uint32 limit, uint24 raiseChance, uint24 raiseStrength, uint8 onlyBoosterType, uint8 onlyBoosterStrength) onlyOwner public {\r\n        chestProduct storage newProduct = chestProducts[chestId];\r\n        newProduct.price = price;\r\n        newProduct.boosters = boosters;\r\n        newProduct.isLimited = isLimited;\r\n        newProduct.limit = limit;\r\n        newProduct.raiseChance = raiseChance;\r\n        newProduct.raiseStrength = raiseStrength;\r\n        newProduct.onlyBoosterType = onlyBoosterType;\r\n        newProduct.onlyBoosterStrength = onlyBoosterStrength;\r\n    }\r\n\r\n    function setChestPrice(uint16 chestId, uint256 price) onlyOwner public {\r\n        chestProducts[chestId].price = price;\r\n    }\r\n\r\n    function buyChest(uint16 _chestId) payable public {\r\n        chestProduct memory tmpChestProduct = chestProducts[_chestId];\r\n\r\n        require(tmpChestProduct.price > 0);\r\n        // only chests with price\r\n        require(msg.value >= tmpChestProduct.price);\r\n        //check if enough ether is send\r\n        require(!tmpChestProduct.isLimited || tmpChestProduct.limit > 0);\r\n        //check limits if they exists\r\n\r\n        chests.mintChest(msg.sender, tmpChestProduct.boosters, tmpChestProduct.raiseStrength, tmpChestProduct.raiseChance, tmpChestProduct.onlyBoosterType, tmpChestProduct.onlyBoosterStrength);\r\n\r\n        if (msg.value > chestProducts[_chestId].price) {//send to much ether send some back\r\n            msg.sender.transfer(msg.value - chestProducts[_chestId].price);\r\n        }\r\n\r\n        beneficiary.transfer(chestProducts[_chestId].price);\r\n        //send paid eth to beneficiary\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract FishbankBoosters is Ownable {\r\n\r\n    struct Booster {\r\n        address owner;\r\n        uint32 duration;\r\n        uint8 boosterType;\r\n        uint24 raiseValue;\r\n        uint8 strength;\r\n        uint32 amount;\r\n    }\r\n\r\n    Booster[] public boosters;\r\n    bool public implementsERC721 = true;\r\n    string public name = \"Fishbank Boosters\";\r\n    string public symbol = \"FISHB\";\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => uint256) public balances;\r\n    address public fishbank;\r\n    address public chests;\r\n    address public auction;\r\n\r\n    modifier onlyBoosterOwner(uint256 _tokenId) {\r\n        require(boosters[_tokenId].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyChest() {\r\n        require(chests == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function FishbankBoosters() public {\r\n        //nothing yet\r\n    }\r\n\r\n    //mints the boosters can only be called by owner. could be a smart contract\r\n    function mintBooster(address _owner, uint32 _duration, uint8 _type, uint8 _strength, uint32 _amount, uint24 _raiseValue) onlyChest public {\r\n        boosters.length ++;\r\n\r\n        Booster storage tempBooster = boosters[boosters.length - 1];\r\n\r\n        tempBooster.owner = _owner;\r\n        tempBooster.duration = _duration;\r\n        tempBooster.boosterType = _type;\r\n        tempBooster.strength = _strength;\r\n        tempBooster.amount = _amount;\r\n        tempBooster.raiseValue = _raiseValue;\r\n\r\n        Transfer(address(0), _owner, boosters.length - 1);\r\n    }\r\n\r\n    function setFishbank(address _fishbank) onlyOwner public {\r\n        fishbank = _fishbank;\r\n    }\r\n\r\n    function setChests(address _chests) onlyOwner public {\r\n        if (chests != address(0)) {\r\n            revert();\r\n        }\r\n        chests = _chests;\r\n    }\r\n\r\n    function setAuction(address _auction) onlyOwner public {\r\n        auction = _auction;\r\n    }\r\n\r\n    function getBoosterType(uint256 _tokenId) view public returns (uint8 boosterType) {\r\n        boosterType = boosters[_tokenId].boosterType;\r\n    }\r\n\r\n    function getBoosterAmount(uint256 _tokenId) view public returns (uint32 boosterAmount) {\r\n        boosterAmount = boosters[_tokenId].amount;\r\n    }\r\n\r\n    function getBoosterDuration(uint256 _tokenId) view public returns (uint32) {\r\n        if (boosters[_tokenId].boosterType == 4 || boosters[_tokenId].boosterType == 2) {\r\n            return boosters[_tokenId].duration + boosters[_tokenId].raiseValue * 60;\r\n        }\r\n        return boosters[_tokenId].duration;\r\n    }\r\n\r\n    function getBoosterStrength(uint256 _tokenId) view public returns (uint8 strength) {\r\n        strength = boosters[_tokenId].strength;\r\n    }\r\n\r\n    function getBoosterRaiseValue(uint256 _tokenId) view public returns (uint24 raiseValue) {\r\n        raiseValue = boosters[_tokenId].raiseValue;\r\n    }\r\n\r\n    //ERC721 functionality\r\n    //could split this to a different contract but doesn't make it easier to read\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        total = boosters.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner){\r\n        owner = boosters[_tokenId].owner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(boosters[_tokenId].owner == _from);\r\n        //can only transfer if previous owner equals from\r\n        boosters[_tokenId].owner = _to;\r\n        approved[_tokenId] = address(0);\r\n        //reset approved of fish on every transfer\r\n        balances[_from] -= 1;\r\n        //underflow can only happen on 0x\r\n        balances[_to] += 1;\r\n        //overflows only with very very large amounts of fish\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public\r\n    onlyBoosterOwner(_tokenId) //check if msg.sender is the owner of this fish\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        //after master modifier invoke internal transfer\r\n        return true;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    onlyBoosterOwner(_tokenId)\r\n    {\r\n        approved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(approved[_tokenId] == msg.sender || msg.sender == fishbank || msg.sender == auction);\r\n        //require msg.sender to be approved for this token or to be the fishbank contract\r\n        _transfer(_from, _to, _tokenId);\r\n        //handles event, balances and approval reset\r\n        return true;\r\n    }\r\n\r\n\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(approved[_tokenId] == msg.sender);\r\n        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FishbankChests is Ownable {\r\n\r\n    struct Chest {\r\n        address owner;\r\n        uint16 boosters;\r\n        uint16 chestType;\r\n        uint24 raiseChance;//Increace chance to catch bigger chest (1 = 1:10000)\r\n        uint8 onlySpecificType;\r\n        uint8 onlySpecificStrength;\r\n        uint24 raiseStrength;\r\n    }\r\n\r\n    Chest[] public chests;\r\n    FishbankBoosters public boosterContract;\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public minters;\r\n\r\n    modifier onlyChestOwner(uint256 _tokenId) {\r\n        require(chests[_tokenId].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinters() {\r\n        require(minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function FishbankChests(address _boosterAddress) public {\r\n        boosterContract = FishbankBoosters(_boosterAddress);\r\n    }\r\n\r\n    function addMinter(address _minter) onlyOwner public {\r\n        minters[_minter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) onlyOwner public {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    //create a chest\r\n\r\n    function mintChest(address _owner, uint16 _boosters, uint24 _raiseStrength, uint24 _raiseChance, uint8 _onlySpecificType, uint8 _onlySpecificStrength) onlyMinters public {\r\n\r\n        chests.length++;\r\n        chests[chests.length - 1].owner = _owner;\r\n        chests[chests.length - 1].boosters = _boosters;\r\n        chests[chests.length - 1].raiseStrength = _raiseStrength;\r\n        chests[chests.length - 1].raiseChance = _raiseChance;\r\n        chests[chests.length - 1].onlySpecificType = _onlySpecificType;\r\n        chests[chests.length - 1].onlySpecificStrength = _onlySpecificStrength;\r\n        Transfer(address(0), _owner, chests.length - 1);\r\n    }\r\n\r\n    function convertChest(uint256 _tokenId) onlyChestOwner(_tokenId) public {\r\n\r\n        Chest memory chest = chests[_tokenId];\r\n        uint16 numberOfBoosters = chest.boosters;\r\n\r\n        if (chest.onlySpecificType != 0) {//Specific boosters\r\n            if (chest.onlySpecificType == 1 || chest.onlySpecificType == 3) {\r\n                boosterContract.mintBooster(msg.sender, 2 days, chest.onlySpecificType, chest.onlySpecificStrength, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 5) {//Instant attack\r\n                boosterContract.mintBooster(msg.sender, 0, 5, 1, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 2) {//Freeze\r\n                uint32 freezeTime = 7 days;\r\n                if (chest.onlySpecificStrength == 2) {\r\n                    freezeTime = 14 days;\r\n                } else if (chest.onlySpecificStrength == 3) {\r\n                    freezeTime = 30 days;\r\n                }\r\n                boosterContract.mintBooster(msg.sender, freezeTime, 5, chest.onlySpecificType, chest.boosters, chest.raiseStrength);\r\n            } else if (chest.onlySpecificType == 4) {//Watch\r\n                uint32 watchTime = 12 hours;\r\n                if (chest.onlySpecificStrength == 2) {\r\n                    watchTime = 48 hours;\r\n                } else if (chest.onlySpecificStrength == 3) {\r\n                    watchTime = 3 days;\r\n                }\r\n                boosterContract.mintBooster(msg.sender, watchTime, 4, chest.onlySpecificStrength, chest.boosters, chest.raiseStrength);\r\n            }\r\n\r\n        } else {//Regular chest\r\n\r\n            for (uint8 i = 0; i < numberOfBoosters; i ++) {\r\n                uint24 random = uint16(keccak256(block.coinbase, block.blockhash(block.number - 1), i, chests.length)) % 1000\r\n                - chest.raiseChance;\r\n                //get random 0 - 9999 minus raiseChance\r\n\r\n                if (random > 850) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 1, 1, chest.raiseStrength); //Small Agility Booster\r\n                } else if (random > 700) {\r\n                    boosterContract.mintBooster(msg.sender, 7 days, 2, 1, 1, chest.raiseStrength); //Small Freezer\r\n                } else if (random > 550) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 1, 1, chest.raiseStrength); //Small Power Booster\r\n                } else if (random > 400) {\r\n                    boosterContract.mintBooster(msg.sender, 12 hours, 4, 1, 1, chest.raiseStrength); //Tiny Watch\r\n                } else if (random > 325) {\r\n                    boosterContract.mintBooster(msg.sender, 48 hours, 4, 2, 1, chest.raiseStrength); //Small Watch\r\n                } else if (random > 250) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 2, 1, chest.raiseStrength); //Mid Agility Booster\r\n                } else if (random > 175) {\r\n                    boosterContract.mintBooster(msg.sender, 14 days, 2, 2, 1, chest.raiseStrength); //Mid Freezer\r\n                } else if (random > 100) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 2, 1, chest.raiseStrength); //Mid Power Booster\r\n                } else if (random > 80) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 1, 3, 1, chest.raiseStrength); //Big Agility Booster\r\n                } else if (random > 60) {\r\n                    boosterContract.mintBooster(msg.sender, 30 days, 2, 3, 1, chest.raiseStrength); //Big Freezer\r\n                } else if (random > 40) {\r\n                    boosterContract.mintBooster(msg.sender, 2 days, 3, 3, 1, chest.raiseStrength); //Big Power Booster\r\n                } else if (random > 20) {\r\n                    boosterContract.mintBooster(msg.sender, 0, 5, 1, 1, 0); //Instant Attack\r\n                } else {\r\n                    boosterContract.mintBooster(msg.sender, 3 days, 4, 3, 1, 0); //Gold Watch\r\n                }\r\n            }\r\n        }\r\n\r\n        _transfer(msg.sender, address(0), _tokenId); //burn chest\r\n    }\r\n\r\n    //ERC721 functionality\r\n    //could split this to a different contract but doesn't make it easier to read\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        total = chests.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner){\r\n        owner = chests[_tokenId].owner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(chests[_tokenId].owner == _from); //can only transfer if previous owner equals from\r\n        chests[_tokenId].owner = _to;\r\n        approved[_tokenId] = address(0); //reset approved of fish on every transfer\r\n        balances[_from] -= 1; //underflow can only happen on 0x\r\n        balances[_to] += 1; //overflows only with very very large amounts of fish\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public\r\n    onlyChestOwner(_tokenId) //check if msg.sender is the owner of this fish\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        //after master modifier invoke internal transfer\r\n        return true;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    onlyChestOwner(_tokenId)\r\n    {\r\n        approved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(approved[_tokenId] == msg.sender);\r\n        //require msg.sender to be approved for this token\r\n        _transfer(_from, _to, _tokenId);\r\n        //handles event, balances and approval reset\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract FishbankUtils is Ownable {\r\n\r\n    uint32[100] cooldowns = [\r\n        720 minutes, 720 minutes, 720 minutes, 720 minutes, 720 minutes, //1-5\r\n        660 minutes, 660 minutes, 660 minutes, 660 minutes, 660 minutes, //6-10\r\n        600 minutes, 600 minutes, 600 minutes, 600 minutes, 600 minutes, //11-15\r\n        540 minutes, 540 minutes, 540 minutes, 540 minutes, 540 minutes, //16-20\r\n        480 minutes, 480 minutes, 480 minutes, 480 minutes, 480 minutes, //21-25\r\n        420 minutes, 420 minutes, 420 minutes, 420 minutes, 420 minutes, //26-30\r\n        360 minutes, 360 minutes, 360 minutes, 360 minutes, 360 minutes, //31-35\r\n        300 minutes, 300 minutes, 300 minutes, 300 minutes, 300 minutes, //36-40\r\n        240 minutes, 240 minutes, 240 minutes, 240 minutes, 240 minutes, //41-45\r\n        180 minutes, 180 minutes, 180 minutes, 180 minutes, 180 minutes, //46-50\r\n        120 minutes, 120 minutes, 120 minutes, 120 minutes, 120 minutes, //51-55\r\n        90 minutes,  90 minutes,  90 minutes,  90 minutes,  90 minutes,  //56-60\r\n        75 minutes,  75 minutes,  75 minutes,  75 minutes,  75 minutes,  //61-65\r\n        60 minutes,  60 minutes,  60 minutes,  60 minutes,  60 minutes,  //66-70\r\n        50 minutes,  50 minutes,  50 minutes,  50 minutes,  50 minutes,  //71-75\r\n        40 minutes,  40 minutes,  40 minutes,  40 minutes,  40 minutes,  //76-80\r\n        30 minutes,  30 minutes,  30 minutes,  30 minutes,  30 minutes,  //81-85\r\n        20 minutes,  20 minutes,  20 minutes,  20 minutes,  20 minutes,  //86-90\r\n        10 minutes,  10 minutes,  10 minutes,  10 minutes,  10 minutes,  //91-95\r\n        5 minutes,   5 minutes,   5 minutes,   5 minutes,   5 minutes    //96-100\r\n    ];\r\n\r\n\r\n    function setCooldowns(uint32[100] _cooldowns) onlyOwner public {\r\n        cooldowns = _cooldowns;\r\n    }\r\n\r\n    function getFishParams(uint256 hashSeed1, uint256 hashSeed2, uint256 fishesLength, address coinbase) external pure returns (uint32[4]) {\r\n\r\n        bytes32[5] memory hashSeeds;\r\n        hashSeeds[0] = keccak256(hashSeed1 ^ hashSeed2); //xor both seed from owner and user so no one can cheat\r\n        hashSeeds[1] = keccak256(hashSeeds[0], fishesLength);\r\n        hashSeeds[2] = keccak256(hashSeeds[1], coinbase);\r\n        hashSeeds[3] = keccak256(hashSeeds[2], coinbase, fishesLength);\r\n        hashSeeds[4] = keccak256(hashSeeds[1], hashSeeds[2], hashSeeds[0]);\r\n\r\n        uint24[6] memory seeds = [\r\n            uint24(uint(hashSeeds[3]) % 10e6 + 1), //whale chance\r\n            uint24(uint(hashSeeds[0]) % 420 + 1), //power\r\n            uint24(uint(hashSeeds[1]) % 420 + 1), //agility\r\n            uint24(uint(hashSeeds[2]) % 150 + 1), //speed\r\n            uint24(uint(hashSeeds[4]) % 16 + 1), //whale type\r\n            uint24(uint(hashSeeds[4]) % 5000 + 1) //rarity\r\n        ];\r\n\r\n        uint32[4] memory fishParams;\r\n\r\n        if (seeds[0] == 1000000) {//This is a whale 1:1 000 000 chance\r\n\r\n            if (seeds[4] == 1) {//Orca\r\n                fishParams = [140 + uint8(seeds[1] / 42), 140 + uint8(seeds[2] / 42), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 140) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 140) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            } else if (seeds[4] < 4) {//Blue whale\r\n                fishParams = [130 + uint8(seeds[1] / 42), 130 + uint8(seeds[2] / 42), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 130) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 130) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            } else {//Cachalot\r\n                fishParams = [115 + uint8(seeds[1] / 28), 115 + uint8(seeds[2] / 28), 75 + uint8(seeds[3] / 6), uint32(500000)];\r\n                if(fishParams[0] == 115) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 115) {\r\n                    fishParams[1]++;\r\n                }\r\n                if(fishParams[2] == 75) {\r\n                    fishParams[2]++;\r\n                }\r\n            }\r\n        } else {\r\n            if (seeds[5] == 5000) {//Legendary\r\n                fishParams = [85 + uint8(seeds[1] / 14), 85 + uint8(seeds[2] / 14), uint8(50 + seeds[3] / 3), uint32(1000)];\r\n                if(fishParams[0] == 85) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 85) {\r\n                    fishParams[1]++;\r\n                }\r\n            } else if (seeds[5] > 4899) {//Epic\r\n                fishParams = [50 + uint8(seeds[1] / 12), 50 + uint8(seeds[2] / 12), uint8(25 + seeds[3] / 2), uint32(300)];\r\n                if(fishParams[0] == 50) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 50) {\r\n                    fishParams[1]++;\r\n                }\r\n\r\n            } else if (seeds[5] > 4000) {//Rare\r\n                fishParams = [20 + uint8(seeds[1] / 14), 20 + uint8(seeds[2] / 14), uint8(25 + seeds[3] / 3), uint32(100)];\r\n                if(fishParams[0] == 20) {\r\n                    fishParams[0]++;\r\n                }\r\n                if(fishParams[1] == 20) {\r\n                    fishParams[1]++;\r\n                }\r\n            } else {//Common\r\n                fishParams = [uint8(seeds[1] / 21), uint8(seeds[2] / 21), uint8(seeds[3] / 3), uint32(36)];\r\n                if (fishParams[0] == 0) {\r\n                    fishParams[0] = 1;\r\n                }\r\n                if (fishParams[1] == 0) {\r\n                    fishParams[1] = 1;\r\n                }\r\n                if (fishParams[2] == 0) {\r\n                    fishParams[2] = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return fishParams;\r\n    }\r\n\r\n    function getCooldown(uint16 speed) external view returns (uint64){\r\n        return uint64(now + cooldowns[speed - 1]);\r\n    }\r\n\r\n    //Ceiling function for fish generator\r\n    function ceil(uint base, uint divider) internal pure returns (uint) {\r\n        return base / divider + ((base % divider > 0) ? 1 : 0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// @title Auction contract for any type of erc721 token\r\n/// @author Fishbank\r\n\r\ncontract ERC721 {\r\n\r\n    function implementsERC721() public pure returns (bool);\r\n\r\n    function totalSupply() public view returns (uint256 total);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool);\r\n\r\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract ERC721Auction is Beneficiary {\r\n\r\n    struct Auction {\r\n        address seller;\r\n        uint256 tokenId;\r\n        uint64 auctionBegin;\r\n        uint64 auctionEnd;\r\n        uint256 startPrice;\r\n        uint256 endPrice;\r\n    }\r\n\r\n    uint32 public auctionDuration = 7 days;\r\n\r\n    ERC721 public ERC721Contract;\r\n    uint256 public fee = 45000; //in 1 10000th of a percent so 4.5% at the start\r\n    uint256 constant FEE_DIVIDER = 1000000;\r\n    mapping(uint256 => Auction) public auctions;\r\n\r\n    event AuctionWon(uint256 indexed tokenId, address indexed winner, address indexed seller, uint256 price);\r\n\r\n    event AuctionStarted(uint256 indexed tokenId, address indexed seller);\r\n\r\n    event AuctionFinalized(uint256 indexed tokenId, address indexed seller);\r\n\r\n\r\n    function startAuction(uint256 _tokenId, uint256 _startPrice, uint256 _endPrice) external {\r\n        require(ERC721Contract.transferFrom(msg.sender, address(this), _tokenId));\r\n        //Prices must be in range from 0.01 Eth and 10 000 Eth\r\n        require(_startPrice <= 10000 ether && _endPrice <= 10000 ether);\r\n        require(_startPrice >= (1 ether / 100) && _endPrice >= (1 ether / 100));\r\n\r\n        Auction memory auction;\r\n\r\n        auction.seller = msg.sender;\r\n        auction.tokenId = _tokenId;\r\n        auction.auctionBegin = uint64(now);\r\n        auction.auctionEnd = uint64(now + auctionDuration);\r\n        require(auction.auctionEnd > auction.auctionBegin);\r\n        auction.startPrice = _startPrice;\r\n        auction.endPrice = _endPrice;\r\n\r\n        auctions[_tokenId] = auction;\r\n\r\n        AuctionStarted(_tokenId, msg.sender);\r\n    }\r\n\r\n\r\n    function buyAuction(uint256 _tokenId) payable external {\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        uint256 price = calculateBid(_tokenId);\r\n        uint256 totalFee = price * fee / FEE_DIVIDER; //safe math needed?\r\n\r\n        require(price <= msg.value); //revert if not enough ether send\r\n\r\n        if (price != msg.value) {//send back to much eth\r\n            msg.sender.transfer(msg.value - price);\r\n        }\r\n\r\n        beneficiary.transfer(totalFee);\r\n\r\n        auction.seller.transfer(price - totalFee);\r\n\r\n        if (!ERC721Contract.transfer(msg.sender, _tokenId)) {\r\n            revert();\r\n            //can't complete transfer if this fails\r\n        }\r\n\r\n        AuctionWon(_tokenId, msg.sender, auction.seller, price);\r\n\r\n        delete auctions[_tokenId];\r\n        //deletes auction\r\n    }\r\n\r\n    function saveToken(uint256 _tokenId) external {\r\n        require(auctions[_tokenId].auctionEnd < now);\r\n        //auction must have ended\r\n        require(ERC721Contract.transfer(auctions[_tokenId].seller, _tokenId));\r\n        //transfer fish back to seller\r\n\r\n        AuctionFinalized(_tokenId, auctions[_tokenId].seller);\r\n\r\n        delete auctions[_tokenId];\r\n        //delete auction\r\n    }\r\n\r\n    function ERC721Auction(address _ERC721Contract) public {\r\n        ERC721Contract = ERC721(_ERC721Contract);\r\n    }\r\n\r\n    function setFee(uint256 _fee) onlyOwner public {\r\n        if (_fee > fee) {\r\n            revert(); //fee can only be set to lower value to prevent attacks by owner\r\n        }\r\n        fee = _fee; // all is well set fee\r\n    }\r\n\r\n    function calculateBid(uint256 _tokenId) public view returns (uint256) {\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        if (now >= auction.auctionEnd) {//if auction ended return auction end price\r\n            return auction.endPrice;\r\n        }\r\n        //get hours passed\r\n        uint256 hoursPassed = (now - auction.auctionBegin) / 1 hours;\r\n        uint256 currentPrice;\r\n        //get total hours\r\n        uint16 totalHours = uint16(auctionDuration /1 hours) - 1;\r\n\r\n        if (auction.endPrice > auction.startPrice) {\r\n            currentPrice = auction.startPrice + (hoursPassed * (auction.endPrice - auction.startPrice))/ totalHours;\r\n        } else if(auction.endPrice < auction.startPrice) {\r\n            currentPrice = auction.startPrice - (hoursPassed * (auction.startPrice - auction.endPrice))/ totalHours;\r\n        } else {//start and end are the same\r\n            currentPrice = auction.endPrice;\r\n        }\r\n\r\n        return uint256(currentPrice);\r\n        //return the price at this very moment\r\n    }\r\n\r\n    /// return token if case when need to redeploy auction contract\r\n    function returnToken(uint256 _tokenId) onlyOwner public {\r\n        require(ERC721Contract.transfer(auctions[_tokenId].seller, _tokenId));\r\n        //transfer fish back to seller\r\n\r\n        AuctionFinalized(_tokenId, auctions[_tokenId].seller);\r\n\r\n        delete auctions[_tokenId];\r\n    }\r\n}\r\n\r\n\r\n/// @title Core contract of fishbank\r\n/// @author Fishbank\r\n\r\ncontract Fishbank is ChestsStore {\r\n\r\n    struct Fish {\r\n        address owner;\r\n        uint8 activeBooster;\r\n        uint64 boostedTill;\r\n        uint8 boosterStrength;\r\n        uint24 boosterRaiseValue;\r\n        uint64 weight;\r\n        uint16 power;\r\n        uint16 agility;\r\n        uint16 speed;\r\n        bytes16 color;\r\n        uint64 canFightAgain;\r\n        uint64 canBeAttackedAgain;\r\n    }\r\n\r\n    struct FishingAttempt {\r\n        address fisher;\r\n        uint256 feePaid;\r\n        address affiliate;\r\n        uint256 seed;\r\n        uint64 deadline;//till when does the contract owner have time to resolve;\r\n    }\r\n\r\n    modifier onlyFishOwner(uint256 _tokenId) {\r\n        require(fishes[_tokenId].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyResolver() {\r\n        require(msg.sender == resolver);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    Fish[] public fishes;\r\n    address public resolver;\r\n    address public auction;\r\n    address public minter;\r\n    bool public implementsERC721 = true;\r\n    string public name = \"Fishbank\";\r\n    string public symbol = \"FISH\";\r\n    bytes32[] public randomHashes;\r\n    uint256 public hashesUsed;\r\n    uint256 public aquariumCost = 1 ether / 100 * 3;//fee for fishing starts at 0.03 ether\r\n    uint256 public resolveTime = 30 minutes;//how long does the contract owner have to resolve hashes\r\n    uint16 public weightLostPartLimit = 5;\r\n    FishbankBoosters public boosters;\r\n    FishbankChests public chests;\r\n    FishbankUtils private utils;\r\n\r\n\r\n    mapping(bytes32 => FishingAttempt) public pendingFishing;//attempts that need solving;\r\n\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public affiliated;\r\n\r\n    event AquariumFished(\r\n        bytes32 hash,\r\n        address fisher,\r\n        uint256 feePaid\r\n    ); //event broadcated when someone fishes in aqaurium\r\n\r\n    event AquariumResolved(bytes32 hash, address fisher);\r\n\r\n    event Attack(\r\n        uint256 attacker,\r\n        uint256 victim,\r\n        uint256 winner,\r\n        uint64 weight,\r\n        uint256 ap, uint256 vp, uint256 random\r\n    );\r\n\r\n    event BoosterApplied(uint256 tokenId, uint256 boosterId);\r\n\r\n    /// @notice Constructor of the contract. Sets resolver, beneficiary, boosters and chests\r\n    /// @param _boosters the address of the boosters smart contract\r\n    /// @param _chests the address of the chests smart contract\r\n\r\n    function Fishbank(address _boosters, address _chests, address _utils) ChestsStore(_chests) public {\r\n\r\n        resolver = msg.sender;\r\n        beneficiary = msg.sender;\r\n        boosters = FishbankBoosters(_boosters);\r\n        chests = FishbankChests(_chests);\r\n        utils = FishbankUtils(_utils);\r\n    }\r\n\r\n    /// @notice Mints fishes according to params can only be called by the owner\r\n    /// @param _owner array of addresses the fishes should be owned by\r\n    /// @param _weight array of weights for the fishes\r\n    /// @param _power array of power levels for the fishes\r\n    /// @param _agility array of agility levels for the fishes\r\n    /// @param _speed array of speed levels for the fishes\r\n    /// @param _color array of color params for the fishes\r\n\r\n    function mintFish(address[] _owner, uint32[] _weight, uint8[] _power, uint8[] _agility, uint8[] _speed, bytes16[] _color) onlyMinter public {\r\n\r\n        for (uint i = 0; i < _owner.length; i ++) {\r\n            _mintFish(_owner[i], _weight[i], _power[i], _agility[i], _speed[i], _color[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Internal method for minting a fish\r\n    /// @param _owner address of owner for the fish\r\n    /// @param _weight weight param for fish\r\n    /// @param _power power param for fish\r\n    /// @param _agility agility param for the fish\r\n    /// @param _speed speed param for the fish\r\n    /// @param _color color param for the fish\r\n\r\n    function _mintFish(address _owner, uint32 _weight, uint8 _power, uint8 _agility, uint8 _speed, bytes16 _color) internal {\r\n\r\n        fishes.length += 1;\r\n        uint256 newFishId = fishes.length - 1;\r\n\r\n        Fish storage newFish = fishes[newFishId];\r\n\r\n        newFish.owner = _owner;\r\n        newFish.weight = _weight;\r\n        newFish.power = _power;\r\n        newFish.agility = _agility;\r\n        newFish.speed = _speed;\r\n        newFish.color = _color;\r\n\r\n        balances[_owner] ++;\r\n\r\n        Transfer(address(0), _owner, newFishId);\r\n    }\r\n\r\n    function setWeightLostPartLimit(uint8 _weightPart) onlyOwner public {\r\n        weightLostPartLimit = _weightPart;\r\n    }\r\n\r\n    /// @notice Sets the cost for fishing in the aquarium\r\n    /// @param _fee new fee for fishing in wei\r\n    function setAquariumCost(uint256 _fee) onlyOwner public {\r\n        aquariumCost = _fee;\r\n    }\r\n\r\n    /// @notice Sets address that resolves hashes for fishing can only be called by the owner\r\n    /// @param _resolver address of the resolver\r\n    function setResolver(address _resolver) onlyOwner public {\r\n        resolver = _resolver;\r\n    }\r\n\r\n\r\n    /// @notice Sets the address getting the proceedings from fishing in the aquarium\r\n    /// @param _beneficiary address of the new beneficiary\r\n    function setBeneficiary(address _beneficiary) onlyOwner public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setAuction(address _auction) onlyOwner public {\r\n        auction = _auction;\r\n    }\r\n\r\n    function setBoosters(address _boosters) onlyOwner public {\r\n        boosters = FishbankBoosters(_boosters);\r\n    }\r\n\r\n    function setMinter(address _minter) onlyOwner public {\r\n        minter = _minter;\r\n    }\r\n\r\n    function setUtils(address _utils) onlyOwner public {\r\n        utils = FishbankUtils(_utils);\r\n    }\r\n\r\n    /// batch fishing from 1 to 10 times\r\n    function batchFishAquarium(uint256[] _seeds, address _affiliate) payable public {\r\n        require(_seeds.length > 0 && _seeds.length <= 10);\r\n        require(msg.value >= aquariumCost * _seeds.length);\r\n        //must send enough ether to cover costs\r\n        require(randomHashes.length > hashesUsed + _seeds.length);\r\n        //there needs to be a hash left\r\n\r\n        if (msg.value > aquariumCost * _seeds.length) {\r\n            msg.sender.transfer(msg.value - aquariumCost * _seeds.length);\r\n            //send to much ether back\r\n        }\r\n\r\n        for (uint256 i = 0; i < _seeds.length; i ++) {\r\n            _fishAquarium(_seeds[i]);\r\n        }\r\n\r\n        if(_affiliate != address(0)) {\r\n            pendingFishing[randomHashes[hashesUsed - 1]].affiliate = _affiliate;\r\n        }\r\n    }\r\n\r\n    function _fishAquarium(uint256 _seed) internal {\r\n        //this loop prevents from using the same hash as another fishing attempt if the owner submits the same hash multiple times\r\n        while (pendingFishing[randomHashes[hashesUsed]].fisher != address(0)) {\r\n            hashesUsed++;\r\n            //increase hashesUsed and try next one\r\n        }\r\n\r\n        FishingAttempt storage newAttempt = pendingFishing[randomHashes[hashesUsed]];\r\n\r\n        newAttempt.fisher = msg.sender;\r\n        newAttempt.feePaid = aquariumCost;\r\n        //set the fee paid so it can be returned if the hash doesn't get resolved fast enough\r\n        newAttempt.seed = _seed;\r\n        //sets the seed that gets combined with the random seed of the owner\r\n        newAttempt.deadline = uint64(now + resolveTime);\r\n        //saves deadline after which the fisher can redeem his fishing fee\r\n\r\n        hashesUsed++;\r\n        //increase hashes used so it cannot be used again\r\n\r\n        AquariumFished(randomHashes[hashesUsed - 1], msg.sender, aquariumCost);\r\n        //broadcast event\r\n    }\r\n\r\n    /// @notice Call this to resolve hashes and generate fish/chests\r\n    /// @param _seed seed that corresponds to the hash\r\n    function _resolveAquarium(uint256 _seed) internal {\r\n        bytes32 tempHash = keccak256(_seed);\r\n        FishingAttempt storage tempAttempt = pendingFishing[tempHash];\r\n\r\n        require(tempAttempt.fisher != address(0));\r\n        //attempt must be set so we look if fisher is set\r\n\r\n        if (tempAttempt.affiliate != address(0) && !affiliated[tempAttempt.fisher]) {//if affiliate is set\r\n            chests.mintChest(tempAttempt.affiliate, 1, 0, 0, 0, 0);\r\n            //Chest with one random booster\r\n            affiliated[tempAttempt.fisher] = true;\r\n        }\r\n\r\n        uint32[4] memory fishParams = utils.getFishParams(_seed, tempAttempt.seed, fishes.length, block.coinbase);\r\n\r\n        _mintFish(tempAttempt.fisher, fishParams[3], uint8(fishParams[0]), uint8(fishParams[1]), uint8(fishParams[2]), bytes16(keccak256(_seed ^ tempAttempt.seed)));\r\n\r\n        beneficiary.transfer(tempAttempt.feePaid);\r\n        AquariumResolved(tempHash, tempAttempt.fisher);\r\n        //broadcast event\r\n\r\n        delete pendingFishing[tempHash];\r\n        //delete fishing attempt\r\n    }\r\n\r\n    /// @notice Batch resolve fishing attempts\r\n    /// @param _seeds array of seeds that correspond to hashes that need resolving\r\n    function batchResolveAquarium(uint256[] _seeds) onlyResolver public {\r\n        for (uint256 i = 0; i < _seeds.length; i ++) {\r\n            _resolveAquarium(_seeds[i]);\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Adds an array of hashes to be used for resolving\r\n    /// @param _hashes array of hashes to add\r\n    function addHash(bytes32[] _hashes) onlyResolver public {\r\n        for (uint i = 0; i < _hashes.length; i ++) {\r\n            randomHashes.push(_hashes[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Call this function to attack another fish\r\n    /// @param _attacker ID of fish that is attacking\r\n    /// @param _victim ID of fish to attack\r\n    function attack(uint256 _attacker, uint256 _victim) onlyFishOwner(_attacker) public {\r\n\r\n        Fish memory attacker = fishes[_attacker];\r\n        Fish memory victim = fishes[_victim];\r\n\r\n        //check if attacker is sleeping\r\n        if (attacker.activeBooster == 2 && attacker.boostedTill > now) {//if your fish is sleeping auto awake it\r\n            fishes[_attacker].activeBooster = 0;\r\n            attacker.boostedTill = uint64(now);\r\n            //set booster to invalid one so it has no effect\r\n        }\r\n\r\n        //check if victim has active sleeping booster\r\n        require(!((victim.activeBooster == 2) && victim.boostedTill >= now));\r\n        //cannot attack a sleeping fish\r\n        require(now >= attacker.canFightAgain);\r\n        //check if attacking fish is cooled down\r\n        require(now >= victim.canBeAttackedAgain);\r\n        //check if victim fish can be attacked again\r\n\r\n\r\n        if (msg.sender == victim.owner) {\r\n            uint64 weight = attacker.weight < victim.weight ? attacker.weight : victim.weight;\r\n            fishes[_attacker].weight += weight;\r\n            fishes[_victim].weight -= weight;\r\n            fishes[_attacker].canFightAgain = uint64(utils.getCooldown(attacker.speed));\r\n\r\n            if (fishes[_victim].weight == 0) {\r\n                _transfer(msg.sender, address(0), _victim);\r\n                balances[fishes[_victim].owner] --;\r\n                //burn token\r\n            } else {\r\n                fishes[_victim].canBeAttackedAgain = uint64(now + 1 hours);\r\n                //set victim cooldown 1 hour\r\n            }\r\n\r\n            Attack(_attacker, _victim, _attacker, weight, 0, 0, 0);\r\n            return;\r\n        }\r\n\r\n        if (victim.weight < 2 || attacker.weight < 2) {\r\n            revert();\r\n            //revert if one of the fish is below fighting weight\r\n        }\r\n\r\n        uint256 AP = getFightingAmounts(attacker, true);\r\n        // get attacker power\r\n        uint256 VP = getFightingAmounts(victim, false);\r\n        // get victim power\r\n\r\n        bytes32 randomHash = keccak256(block.coinbase, block.blockhash(block.number - 1), fishes.length);\r\n\r\n        uint256 max = AP > VP ? AP : VP;\r\n        uint256 attackRange = max * 2;\r\n        uint256 random = uint256(randomHash) % attackRange + 1;\r\n\r\n        uint64 weightLost;\r\n\r\n        if (random <= (max + AP - VP)) {\r\n            weightLost = _handleWin(_attacker, _victim);\r\n            Attack(_attacker, _victim, _attacker, weightLost, AP, VP, random);\r\n        } else {\r\n            weightLost = _handleWin(_victim, _attacker);\r\n            Attack(_attacker, _victim, _victim, weightLost, AP, VP, random);\r\n            //broadcast event\r\n        }\r\n\r\n        fishes[_attacker].canFightAgain = uint64(utils.getCooldown(attacker.speed));\r\n        fishes[_victim].canBeAttackedAgain = uint64(now + 1 hours);\r\n        //set victim cooldown 1 hour\r\n    }\r\n\r\n    /// @notice Handles lost gained weight after fight\r\n    /// @param _winner the winner of the fight\r\n    /// @param _loser the loser of the fight\r\n    function _handleWin(uint256 _winner, uint256 _loser) internal returns (uint64) {\r\n        Fish storage winner = fishes[_winner];\r\n        Fish storage loser = fishes[_loser];\r\n\r\n        uint64 fullWeightLost = loser.weight / sqrt(winner.weight);\r\n        uint64 maxWeightLost = loser.weight / weightLostPartLimit;\r\n\r\n        uint64 weightLost = maxWeightLost < fullWeightLost ? maxWeightLost : fullWeightLost;\r\n\r\n        if (weightLost < 1) {\r\n            weightLost = 1;\r\n            // Minimum 1\r\n        }\r\n\r\n        winner.weight += weightLost;\r\n        loser.weight -= weightLost;\r\n\r\n        return weightLost;\r\n    }\r\n\r\n    /// @notice get attack and defence from fish\r\n    /// @param _fish is Fish token\r\n    /// @param _is_attacker true if fish is attacker otherwise false\r\n    function getFightingAmounts(Fish _fish, bool _is_attacker) internal view returns (uint256){\r\n        return (getFishPower(_fish) * (_is_attacker ? 60 : 40) + getFishAgility(_fish) * (_is_attacker ? 40 : 60)) * _fish.weight;\r\n    }\r\n\r\n    /// @notice Apply a booster to a fish\r\n    /// @param _tokenId the fish the booster should be applied to\r\n    /// @param _booster the Id of the booster the token should be applied to\r\n    function applyBooster(uint256 _tokenId, uint256 _booster) onlyFishOwner(_tokenId) public {\r\n        require(msg.sender == boosters.ownerOf(_booster));\r\n        //only owner can do this\r\n        require(boosters.getBoosterAmount(_booster) >= 1);\r\n        Fish storage tempFish = fishes[_tokenId];\r\n        uint8 boosterType = uint8(boosters.getBoosterType(_booster));\r\n\r\n        if (boosterType == 1 || boosterType == 2 || boosterType == 3) {//if booster is attack or agility or sleep\r\n            tempFish.boosterStrength = boosters.getBoosterStrength(_booster);\r\n            tempFish.activeBooster = boosterType;\r\n            tempFish.boostedTill = boosters.getBoosterDuration(_booster) * boosters.getBoosterAmount(_booster) + uint64(now);\r\n            tempFish.boosterRaiseValue = boosters.getBoosterRaiseValue(_booster);\r\n        }\r\n        else if (boosterType == 4) {//watch booster\r\n            require(tempFish.boostedTill > uint64(now));\r\n            //revert on using watch on booster that has passed;\r\n            tempFish.boosterStrength = boosters.getBoosterStrength(_booster);\r\n            tempFish.boostedTill += boosters.getBoosterDuration(_booster) * boosters.getBoosterAmount(_booster);\r\n            //add time to booster\r\n        }\r\n        else if (boosterType == 5) {//Instant attack\r\n            require(boosters.getBoosterAmount(_booster) == 1);\r\n            //Can apply only one instant attack booster\r\n            tempFish.canFightAgain = 0;\r\n        }\r\n\r\n        require(boosters.transferFrom(msg.sender, address(0), _booster));\r\n        //burn booster\r\n\r\n        BoosterApplied(_tokenId, _booster);\r\n    }\r\n\r\n    /// @notice square root function used for weight gain/loss\r\n    /// @param x uint64 to get square root from\r\n    function sqrt(uint64 x) pure internal returns (uint64 y) {\r\n        uint64 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    //utlitiy function for easy testing can be removed later\r\n    function doKeccak256(uint256 _input) pure public returns (bytes32) {\r\n        return keccak256(_input);\r\n    }\r\n\r\n    function getFishPower(Fish _fish) internal view returns (uint24 power) {\r\n        power = _fish.power;\r\n        if (_fish.activeBooster == 1 && _fish.boostedTill > now) {// check if booster active\r\n            uint24 boosterPower = (10 * _fish.boosterStrength + _fish.boosterRaiseValue + 100) * power / 100 - power;\r\n            if (boosterPower < 1 && _fish.boosterStrength == 1) {\r\n                power += 1;\r\n            } else if (boosterPower < 3 && _fish.boosterStrength == 2) {\r\n                power += 3;\r\n            } else if (boosterPower < 5 && _fish.boosterStrength == 3) {\r\n                power += 5;\r\n            } else {\r\n                power = boosterPower + power;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getFishAgility(Fish _fish) internal view returns (uint24 agility) {\r\n        agility = _fish.agility;\r\n        if (_fish.activeBooster == 3 && _fish.boostedTill > now) {// check if booster active\r\n            uint24 boosterPower = (10 * _fish.boosterStrength + _fish.boosterRaiseValue + 100) * agility / 100 - agility;\r\n            if (boosterPower < 1 && _fish.boosterStrength == 1) {\r\n                agility += 1;\r\n            } else if (boosterPower < 3 && _fish.boosterStrength == 2) {\r\n                agility += 3;\r\n            } else if (boosterPower < 5 && _fish.boosterStrength == 3) {\r\n                agility += 5;\r\n            } else {\r\n                agility = boosterPower + agility;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //ERC721 functionality\r\n    //could split this to a different contract but doesn't make it easier to read\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        total = fishes.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner){\r\n        owner = fishes[_tokenId].owner;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(fishes[_tokenId].owner == _from);\r\n        //can only transfer if previous owner equals from\r\n        fishes[_tokenId].owner = _to;\r\n        approved[_tokenId] = address(0);\r\n        //reset approved of fish on every transfer\r\n        balances[_from] -= 1;\r\n        //underflow can only happen on 0x\r\n        balances[_to] += 1;\r\n        //overflows only with very very large amounts of fish\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public\r\n    onlyFishOwner(_tokenId) //check if msg.sender is the owner of this fish\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        //after master modifier invoke internal transfer\r\n        return true;\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public\r\n    onlyFishOwner(_tokenId)\r\n    {\r\n        approved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\r\n        require(approved[_tokenId] == msg.sender || msg.sender == auction);\r\n        Fish storage fish = fishes[_tokenId];\r\n\r\n        if (msg.sender == auction) {\r\n            fish.activeBooster = 2;\r\n            //Freeze for auction\r\n            fish.boostedTill = uint64(now + 7 days);\r\n            fish.boosterStrength = 1;\r\n        }\r\n        //require msg.sender to be approved for this token\r\n        _transfer(_from, _to, _tokenId);\r\n        //handles event, balances and approval reset\r\n        return true;\r\n    }\r\n\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(approved[_tokenId] == msg.sender);\r\n        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolveTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chestId\",\"type\":\"uint16\"}],\"name\":\"buyChest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address[]\"},{\"name\":\"_weight\",\"type\":\"uint32[]\"},{\"name\":\"_power\",\"type\":\"uint8[]\"},{\"name\":\"_agility\",\"type\":\"uint8[]\"},{\"name\":\"_speed\",\"type\":\"uint8[]\"},{\"name\":\"_color\",\"type\":\"bytes16[]\"}],\"name\":\"mintFish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chestId\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"boosters\",\"type\":\"uint16\"},{\"name\":\"isLimited\",\"type\":\"bool\"},{\"name\":\"limit\",\"type\":\"uint32\"},{\"name\":\"raiseChance\",\"type\":\"uint24\"},{\"name\":\"raiseStrength\",\"type\":\"uint24\"},{\"name\":\"onlyBoosterType\",\"type\":\"uint8\"},{\"name\":\"onlyBoosterStrength\",\"type\":\"uint8\"}],\"name\":\"setChestProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seeds\",\"type\":\"uint256[]\"}],\"name\":\"batchResolveAquarium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aquariumCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chestProducts\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"isLimited\",\"type\":\"bool\"},{\"name\":\"limit\",\"type\":\"uint32\"},{\"name\":\"boosters\",\"type\":\"uint16\"},{\"name\":\"raiseChance\",\"type\":\"uint24\"},{\"name\":\"raiseStrength\",\"type\":\"uint24\"},{\"name\":\"onlyBoosterType\",\"type\":\"uint8\"},{\"name\":\"onlyBoosterStrength\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_booster\",\"type\":\"uint256\"}],\"name\":\"applyBooster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightLostPartLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"doKeccak256\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingFishing\",\"outputs\":[{\"name\":\"fisher\",\"type\":\"address\"},{\"name\":\"feePaid\",\"type\":\"uint256\"},{\"name\":\"affiliate\",\"type\":\"address\"},{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_utils\",\"type\":\"address\"}],\"name\":\"setUtils\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weightPart\",\"type\":\"uint8\"}],\"name\":\"setWeightLostPartLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initChestsStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seeds\",\"type\":\"uint256[]\"},{\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"batchFishAquarium\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashesUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashes\",\"type\":\"bytes32[]\"}],\"name\":\"addHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fishes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"activeBooster\",\"type\":\"uint8\"},{\"name\":\"boostedTill\",\"type\":\"uint64\"},{\"name\":\"boosterStrength\",\"type\":\"uint8\"},{\"name\":\"boosterRaiseValue\",\"type\":\"uint24\"},{\"name\":\"weight\",\"type\":\"uint64\"},{\"name\":\"power\",\"type\":\"uint16\"},{\"name\":\"agility\",\"type\":\"uint16\"},{\"name\":\"speed\",\"type\":\"uint16\"},{\"name\":\"color\",\"type\":\"bytes16\"},{\"name\":\"canFightAgain\",\"type\":\"uint64\"},{\"name\":\"canBeAttackedAgain\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boosters\",\"type\":\"address\"}],\"name\":\"setBoosters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chestId\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setChestPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_attacker\",\"type\":\"uint256\"},{\"name\":\"_victim\",\"type\":\"uint256\"}],\"name\":\"attack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setAquariumCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boosters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_boosters\",\"type\":\"address\"},{\"name\":\"_chests\",\"type\":\"address\"},{\"name\":\"_utils\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fisher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"AquariumFished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fisher\",\"type\":\"address\"}],\"name\":\"AquariumResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"attacker\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"victim\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"ap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"Attack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"boosterId\",\"type\":\"uint256\"}],\"name\":\"BoosterApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Fishbank", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f15f61643eea73be40ad9b72c09ed381fac7a25600000000000000000000000096e666c387b1d25b490a33cdb5a32b8a1f91d3b6000000000000000000000000fa82a58605aff1f44d32b41904e7a43710f69d44", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c54e82a25b1f2611814f97a7b42581ae02b30240240d3962379aaa9d8a0c8fd6"}