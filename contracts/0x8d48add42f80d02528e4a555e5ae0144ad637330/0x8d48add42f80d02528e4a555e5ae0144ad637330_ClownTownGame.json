{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/clowntown/ClownTownGame.sol\": {\r\n      \"content\": \"/**\\n                                                                       ,----,\\n                                                                     ,/   .`|\\n  ,----..    ,--,                                                  ,`   .'  :\\n /   /   \\\\ ,--.'|                                                ;    ;     /\\n|   :     :|  | :     ,---.           .---.      ,---,         .'___,/    ,'  ,---.           .---.      ,---,\\n.   |  ;. /:  : '    '   ,'\\\\         /. ./|  ,-+-. /  |        |    :     |  '   ,'\\\\         /. ./|  ,-+-. /  |\\n.   ; /--` |  ' |   /   /   |     .-'-. ' | ,--.'|'   |        ;    |.';  ; /   /   |     .-'-. ' | ,--.'|'   |\\n;   | ;    '  | |  .   ; ,. :    /___/ \\\\: ||   |  ,\\\"' |        `----'  |  |.   ; ,. :    /___/ \\\\: ||   |  ,\\\"' |\\n|   : |    |  | :  '   | |: : .-'.. '   ' .|   | /  | |            '   :  ;'   | |: : .-'.. '   ' .|   | /  | |\\n.   | '___ '  : |__'   | .; :/___/ \\\\:     '|   | |  | |            |   |  ''   | .; :/___/ \\\\:     '|   | |  | |\\n'   ; : .'||  | '.'|   :    |.   \\\\  ' .\\\\   |   | |  |/             '   :  ||   :    |.   \\\\  ' .\\\\   |   | |  |/\\n'   | '/  :;  :    ;\\\\   \\\\  /  \\\\   \\\\   ' \\\\ ||   | |--'              ;   |.'  \\\\   \\\\  /  \\\\   \\\\   ' \\\\ ||   | |--'\\n|   :    / |  ,   /  `----'    \\\\   \\\\  |--\\\" |   |/                  '---'     `----'    \\\\   \\\\  |--\\\" |   |/\\n \\\\   \\\\ .'   ---`-'              \\\\   \\\\ |    '---'                                        \\\\   \\\\ |    '---'\\n  `---`                          '---\\\"                                                   '---\\\"\\n\\nIts \ud83e\udd21 clown's \ud83e\udd21\\n.\\nall the\\n.\\n.\\nway\\n.\\n.\\n.\\ndown\\n.\\n.\\n.\\n.\\n**/\\n\\n// SPDX-License-Identifier: CLOWNWARE\\npragma solidity 0.8.19;\\n\\nimport \\\"./IClownTownStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ClownTownGame is Ownable {\\n  int256 public VERSION = -4;\\n\\n  event CreateRound(address indexed user, uint256 roundIndex);\\n  event Wager(address indexed user, uint256 indexed roundIndex, bool sideA, uint256 amount);\\n  event ClaimWinnings(address indexed user, uint256 indexed roundIndex, uint256 amount);\\n  event ClaimCreatorFees(address indexed user, uint256 indexed roundIndex, uint256 amount);\\n\\n  uint256 public minBet;\\n  uint256 public maxBet;\\n\\n  // Pack into single storage slot\\n  uint32 public roundDuration;\\n  uint16 public maxRoundDescription;\\n  uint16 public betFeeBpsTotal;\\n  uint16 public betFeeBpsToCreator;\\n  uint16 public betFeeBpsToStakers;\\n  uint64 public numRounds;\\n\\n  IClownTownStaking public stakingContract;\\n  address payable public feeWallet;\\n  RoundInfo[] public rounds;\\n\\n  mapping(address => mapping(uint256 => bool)) _userRounds;\\n  mapping(address => uint256[]) public userRounds;\\n\\n  bool betaPeriod;\\n\\n  struct RoundInfo {\\n    address creator;\\n    string description;\\n\\n    string sideAHandle;\\n    string sideBHandle;\\n\\n    uint256 startBlock;\\n    uint256 endBlock;\\n\\n    uint256 totalSideA;\\n    uint256 totalSideB;\\n\\n    mapping(address => uint256) sideABets;\\n    mapping(address => uint256) sideBBets;\\n    mapping(address => bool) winningsClaimed;\\n\\n    uint256 unclaimedCreatorFees;\\n  }\\n\\n  constructor(\\n    IClownTownStaking _stakingContract,\\n    address payable _feeWallet,\\n    uint256 _minBet,\\n    uint256 _maxBet,\\n    uint32 _roundDuration,\\n    uint16 _maxRoundDescription,\\n    uint16 _betFeeBpsTotal,\\n    uint16 _betFeeBpsToCreator,\\n    uint16 _betFeeBpsToStakers) {\\n    require(address(_stakingContract)!=address(0));\\n    require(_feeWallet!=address(0));\\n\\n    stakingContract = _stakingContract;\\n    feeWallet = _feeWallet;\\n    setRoundParams(_minBet, _maxBet, _roundDuration, _maxRoundDescription);\\n    setBetFees(_betFeeBpsTotal, _betFeeBpsToCreator, _betFeeBpsToStakers);\\n    betaPeriod = true;\\n  }\\n\\n  function setStakingContract(IClownTownStaking _stakingContract) public onlyOwner {\\n    require(address(_stakingContract)!=address(0));\\n    stakingContract = _stakingContract;\\n  }\\n\\n  function setFeeWallet(address payable _feeWallet) public onlyOwner {\\n    require(_feeWallet!=address(0));\\n    feeWallet = _feeWallet;\\n  }\\n\\n  function setRoundParams(\\n    uint256 _minBet,\\n    uint256 _maxBet,\\n    uint32 _roundDuration,\\n    uint16 _maxRoundDescription) public onlyOwner {\\n    require(_minBet > 0);\\n    require(_maxBet >= _minBet);\\n    require(_roundDuration > 0);\\n    minBet = _minBet;\\n    maxBet = _maxBet;\\n    roundDuration = _roundDuration;\\n    maxRoundDescription = _maxRoundDescription;\\n  }\\n\\n  function setBetFees(\\n    uint16 _betFeeBpsTotal,\\n    uint16 _betFeeBpsToCreator,\\n    uint16 _betFeeBpsToStakers) public onlyOwner {\\n    require(_betFeeBpsTotal < 10000);\\n    require(_betFeeBpsToCreator+_betFeeBpsToStakers <= _betFeeBpsTotal);\\n    betFeeBpsTotal = _betFeeBpsTotal;\\n    betFeeBpsToCreator = _betFeeBpsToCreator;\\n    betFeeBpsToStakers = _betFeeBpsToStakers;\\n  }\\n\\n  // Irreversible\\n  function endBetaPeriod() public onlyOwner {\\n    betaPeriod = false;\\n  }\\n\\n  // In case of contract bug. Permanently disabled after beta period\\n  function emergencyWithdraw(\\n    address payable target,\\n    uint256 amount) public onlyOwner {\\n    require(betaPeriod);\\n    target.transfer(amount);\\n  }\\n\\n  function createRound(\\n    string calldata _description,\\n    string calldata _sideAHandle,\\n    string calldata _sideBHandle) public {\\n    require(bytes(_description).length <= maxRoundDescription);\\n    require(bytes(_sideAHandle).length <= 50);\\n    require(bytes(_sideBHandle).length <= 50);\\n\\n    rounds.push();\\n    numRounds++;\\n\\n    uint256 roundIndex = numRounds-1;\\n    RoundInfo storage round = rounds[roundIndex];\\n    round.creator = msg.sender;\\n    round.description = _description;\\n    round.sideAHandle = _sideAHandle;\\n    round.sideBHandle = _sideBHandle;\\n    round.startBlock = block.number;\\n    round.endBlock = block.number + roundDuration;\\n\\n    if (!_userRounds[msg.sender][roundIndex]) {\\n      _userRounds[msg.sender][roundIndex] = true;\\n      userRounds[msg.sender].push(roundIndex);\\n    }\\n\\n    emit CreateRound(msg.sender, roundIndex);\\n  }\\n\\n  function wager(\\n    uint32 roundIndex,\\n    bool sideA) public payable {\\n    uint256 amount = msg.value;\\n    require(amount >= minBet, \\\"wager: amount too small\\\");\\n    require(amount <= maxBet, \\\"wager: amount too big\\\");\\n    require(roundIndex < rounds.length, \\\"wager: invalid round\\\");\\n\\n    RoundInfo storage round = rounds[roundIndex];\\n    require(block.number <= round.endBlock, \\\"wager: round over\\\");\\n\\n    uint256 feeTotal = (amount * betFeeBpsTotal) / 10000;\\n    uint256 feeToCreator = (amount * betFeeBpsToCreator) / 10000;\\n    uint256 feeToStakers = (amount * betFeeBpsToStakers) / 10000;\\n    require((feeToCreator+feeToStakers)<=feeTotal); // Sanity check\\n\\n    uint256 amountAfterFee = amount - feeTotal;\\n\\n    if (sideA) {\\n      round.totalSideA += amountAfterFee;\\n      round.sideABets[msg.sender] += amountAfterFee;\\n    }\\n    else {\\n      round.totalSideB += amountAfterFee;\\n      round.sideBBets[msg.sender] += amountAfterFee;\\n    }\\n\\n    round.unclaimedCreatorFees += feeToCreator;\\n    stakingContract.addEthReward{value: feeToStakers}();\\n    feeWallet.transfer(feeTotal-feeToCreator-feeToStakers);\\n\\n    if (!_userRounds[msg.sender][roundIndex]) {\\n      _userRounds[msg.sender][roundIndex] = true;\\n      userRounds[msg.sender].push(roundIndex);\\n    }\\n\\n    emit Wager(msg.sender, roundIndex, sideA, amount);\\n  }\\n\\n  function claimWinnings(uint256 roundIndex) public {\\n    RoundInfo storage round = rounds[roundIndex];\\n    require(round.endBlock < block.number);\\n    require(!round.winningsClaimed[msg.sender]);\\n\\n    round.winningsClaimed[msg.sender] = true;\\n    uint256 winnings = currentWinnings(msg.sender, roundIndex);\\n\\n    if (winnings > 0) {\\n      payable(msg.sender).transfer(winnings);\\n      emit ClaimWinnings(msg.sender, roundIndex, winnings);\\n    }\\n  }\\n\\n  function currentWinnings(address user, uint256 roundIndex) public view returns (uint256) {\\n    RoundInfo storage round = rounds[roundIndex];\\n    if (round.totalSideA > round.totalSideB) {\\n      uint256 userBet = round.sideABets[user];\\n      return userBet + (userBet * round.totalSideB / round.totalSideA);\\n    }\\n    else if (round.totalSideB > round.totalSideA) {\\n      uint256 userBet = round.sideBBets[user];\\n      return userBet + (userBet * round.totalSideA / round.totalSideB);\\n    }\\n    else {\\n      return round.sideABets[user] + round.sideBBets[user];\\n    }\\n  }\\n\\n  function claimCreatorFees(uint256 roundIndex) public {\\n    RoundInfo storage round = rounds[roundIndex];\\n    require(round.creator==msg.sender);\\n    require(round.endBlock < block.number);\\n\\n    if (round.unclaimedCreatorFees > 0) {\\n      payable(msg.sender).transfer(round.unclaimedCreatorFees);\\n      emit ClaimCreatorFees(msg.sender, roundIndex, round.unclaimedCreatorFees);\\n      round.unclaimedCreatorFees = 0;\\n    }\\n  }\\n\\n  function numUserRounds(address user) public view returns (uint256) {\\n    return userRounds[user].length;\\n  }\\n\\n  function winningsClaimed(address user, uint256 roundIndex) public view returns (bool) {\\n    return rounds[roundIndex].winningsClaimed[user];\\n  }\\n}\"\r\n    },\r\n    \"contracts/clowntown/IClownTownStaking.sol\": {\r\n      \"content\": \"/**\\n                                                                       ,----,\\n                                                                     ,/   .`|\\n  ,----..    ,--,                                                  ,`   .'  :\\n /   /   \\\\ ,--.'|                                                ;    ;     /\\n|   :     :|  | :     ,---.           .---.      ,---,         .'___,/    ,'  ,---.           .---.      ,---,\\n.   |  ;. /:  : '    '   ,'\\\\         /. ./|  ,-+-. /  |        |    :     |  '   ,'\\\\         /. ./|  ,-+-. /  |\\n.   ; /--` |  ' |   /   /   |     .-'-. ' | ,--.'|'   |        ;    |.';  ; /   /   |     .-'-. ' | ,--.'|'   |\\n;   | ;    '  | |  .   ; ,. :    /___/ \\\\: ||   |  ,\\\"' |        `----'  |  |.   ; ,. :    /___/ \\\\: ||   |  ,\\\"' |\\n|   : |    |  | :  '   | |: : .-'.. '   ' .|   | /  | |            '   :  ;'   | |: : .-'.. '   ' .|   | /  | |\\n.   | '___ '  : |__'   | .; :/___/ \\\\:     '|   | |  | |            |   |  ''   | .; :/___/ \\\\:     '|   | |  | |\\n'   ; : .'||  | '.'|   :    |.   \\\\  ' .\\\\   |   | |  |/             '   :  ||   :    |.   \\\\  ' .\\\\   |   | |  |/\\n'   | '/  :;  :    ;\\\\   \\\\  /  \\\\   \\\\   ' \\\\ ||   | |--'              ;   |.'  \\\\   \\\\  /  \\\\   \\\\   ' \\\\ ||   | |--'\\n|   :    / |  ,   /  `----'    \\\\   \\\\  |--\\\" |   |/                  '---'     `----'    \\\\   \\\\  |--\\\" |   |/\\n \\\\   \\\\ .'   ---`-'              \\\\   \\\\ |    '---'                                        \\\\   \\\\ |    '---'\\n  `---`                          '---\\\"                                                   '---\\\"\\n\\nIts \ud83e\udd21 clown's \ud83e\udd21\\n.\\nall the\\n.\\n.\\nway\\n.\\n.\\n.\\ndown\\n.\\n.\\n.\\n.\\n**/\\n\\n// SPDX-License-Identifier: CLOWNWARE\\npragma solidity 0.8.19;\\n\\ninterface IClownTownStaking {\\n  function addEthReward() external payable;\\n  function postProcessClownReward(uint256 _amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IClownTownStaking\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_roundDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_maxRoundDescription\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_betFeeBpsTotal\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_betFeeBpsToCreator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_betFeeBpsToStakers\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimCreatorFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimWinnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"CreateRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sideA\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Wager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betFeeBpsToCreator\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betFeeBpsToStakers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betFeeBpsTotal\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"claimCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sideAHandle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sideBHandle\",\"type\":\"string\"}],\"name\":\"createRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"currentWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBetaPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRoundDescription\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRounds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"numUserRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sideAHandle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sideBHandle\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSideA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSideB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedCreatorFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_betFeeBpsTotal\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_betFeeBpsToCreator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_betFeeBpsToStakers\",\"type\":\"uint16\"}],\"name\":\"setBetFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_roundDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_maxRoundDescription\",\"type\":\"uint16\"}],\"name\":\"setRoundParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClownTownStaking\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IClownTownStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"roundIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"sideA\",\"type\":\"bool\"}],\"name\":\"wager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"winningsClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClownTownGame", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f955626299cceb10a90fe57fcedf09948c5d82ee000000000000000000000000728b56bc1837b32b7066261a953659c10d677dfd00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000001c2000000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000000000007d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}