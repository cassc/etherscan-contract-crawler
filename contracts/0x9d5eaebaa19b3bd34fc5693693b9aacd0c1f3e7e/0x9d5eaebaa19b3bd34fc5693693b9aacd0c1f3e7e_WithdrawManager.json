{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.4;\r\n\r\ninterface IExistingContract {\r\n    function StakedPabloTokens(address staker) external view returns(uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"ERC20: sending to the zero address\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\ncontract WithdrawManager is Owned {\r\n    IExistingContract public existingContract;\r\n    IERC20 public tokenContract;\r\n    mapping(address => bool) public hasWithdrawn;\r\n    mapping(address => uint256) public withdrawnAmounts; // Tracks how much each user has withdrawn.\r\n    bool public breaker = false; //  unlocked\r\n\r\n    event WithdrawCompleted(address indexed user, uint256 amount);\r\n\r\n    constructor(address _existingContractAddress, address _tokenContractAddress) {\r\n        require(_existingContractAddress != address(0), \"Invalid existing contract address\");\r\n        require(_tokenContractAddress != address(0), \"Invalid token contract address\");\r\n        existingContract = IExistingContract(_existingContractAddress);\r\n        tokenContract = IERC20(_tokenContractAddress);\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(breaker == false, \"Admin Restricted WITHDRAW\");\r\n        require(!hasWithdrawn[msg.sender], \"Withdrawal already made\");\r\n\r\n        uint256 stakedAmount = existingContract.StakedPabloTokens(msg.sender);\r\n        require(stakedAmount > 0, \"No staked tokens found\");\r\n        require(tokenContract.balanceOf(address(this)) >= stakedAmount, \"Insufficient tokens in contract for withdrawal\");\r\n\r\n        hasWithdrawn[msg.sender] = true;\r\n        withdrawnAmounts[msg.sender] += stakedAmount; // Update the withdrawn amount.\r\n\r\n        require(tokenContract.transfer(msg.sender, stakedAmount), \"Failed to transfer tokens\");\r\n\r\n        emit WithdrawCompleted(msg.sender, stakedAmount);\r\n    }\r\n\r\n    // Function to deposit ERC20 tokens into this contract for withdrawals.\r\n    function depositTokens(uint256 amount, address from) external {\r\n        require(tokenContract.transferFrom(from, address(this), amount), \"Failed to deposit tokens\");\r\n    }\r\n\r\n    function addAlreadyWithdrawn(address _staker) external onlyOwner{\r\n        require(_staker != address(0), \"Zero Address\");\r\n        hasWithdrawn[_staker] = true;\r\n    }\r\n\r\n    function setBreaker(bool _breaker) external onlyOwner {\r\n        breaker = _breaker;\r\n    }\r\n\r\n    function saveEmergencyTokens(address tokenAddress) external onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        token.transfer(owner, tokenBalance);\r\n    }\r\n\r\n    // Function to withdraw ETH sent to the contract by mistake\r\n    function saveETH() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_existingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"addAlreadyWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"existingContract\",\"outputs\":[{\"internalType\":\"contract IExistingContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"saveEmergencyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_breaker\",\"type\":\"bool\"}],\"name\":\"setBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WithdrawManager", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000900dab790465dedeb9c7a056c8b6cbf423d49405000000000000000000000000926ff6584b5905cc793cfb19bfc0ad6443671f47", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://854f455ad339da36acfce5b2f4dcbb745ce414d445245c415ca7cbfe5450c85c"}