{"SourceCode": "{\"CentralSecuritiesDepository.sol\":{\"content\":\"pragma solidity 0.5.0;\\r\\n\\r\\nimport \\\"./SecuredSwitchable.sol\\\";\\r\\n\\r\\ncontract CentralSecuritiesDepository is SecuredSwitchable {\\r\\n\\r\\n    struct CertificationTicket {\\r\\n        bool registered;\\r\\n        bytes32 ticketHash;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n      struct PromissoryNoteTicket {\\r\\n        bool registered;\\r\\n        bytes32 ticketHash;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n   \\r\\n    bytes32 private _metadataHash;\\r\\n\\r\\n    mapping(uint64 =\\u003e CertificationTicket) private _certificationTickets;\\r\\n    mapping(uint256 =\\u003e PromissoryNoteTicket) private _promissoryNoteTickets;\\r\\n\\r\\n    constructor(bytes32 metadataHash) public {\\r\\n        _metadataHash = metadataHash;\\r\\n    }\\r\\n\\r\\n    function getMetadataHash() public view returns (bytes32) {\\r\\n        return _metadataHash;\\r\\n    }\\r\\n\\r\\n    function registerTicket(uint64 ticketId, bytes32 ticketHash) public onlyAdmin onlyEnabled {\\r\\n        require(!_certificationTickets[ticketId].registered);\\r\\n        _certificationTickets[ticketId].registered = true;\\r\\n        _certificationTickets[ticketId].ticketHash = ticketHash;\\r\\n        _certificationTickets[ticketId].timestamp = now;\\r\\n    }\\r\\n\\r\\n    function getTicketHash(uint64 ticketId) public view returns (bytes32) {\\r\\n        return _certificationTickets[ticketId].ticketHash;\\r\\n    }\\r\\n\\r\\n    function getTicketTimestamp(uint64 ticketId) public view returns (uint256) {\\r\\n        return _certificationTickets[ticketId].timestamp;\\r\\n    }\\r\\n\\r\\n    function registerPromissoryNoteTicket(uint8 category, uint64 ticketId, bytes32 ticketHash) public onlyAdmin onlyEnabled{\\r\\n        uint256 pkey = ticketId | (category * 2**8);\\r\\n        require(!_promissoryNoteTickets[pkey].registered);\\r\\n        _promissoryNoteTickets[pkey].registered = true;\\r\\n        _promissoryNoteTickets[pkey].ticketHash = ticketHash;\\r\\n        _promissoryNoteTickets[pkey].timestamp = now;\\r\\n    }\\r\\n\\r\\n    function getPromissoryNoteTicketHash(uint8 category, uint64 ticketId) public view returns (bytes32) {\\r\\n        uint256 pkey = ticketId | (category * 2**8);\\r\\n        return _promissoryNoteTickets[pkey].ticketHash;\\r\\n    }\\r\\n\\r\\n    function getPromissoryNoteTicketTimestamp(uint8 category, uint64 ticketId) public view returns (uint256) {\\r\\n        uint256 pkey = ticketId | (category * 2**8);\\r\\n        return _promissoryNoteTickets[pkey].timestamp;\\r\\n    }\\r\\n}\"},\"IHasAdmin.sol\":{\"content\":\"pragma solidity 0.5.0;\\r\\n\\r\\ncontract IHasAdmin {\\r\\n\\r\\n    function isAdmin(address accountAddress) public view returns (bool);\\r\\n\\r\\n}\"},\"Secured.sol\":{\"content\":\"pragma solidity 0.5.0;\\r\\n\\r\\nimport \\\"./IHasAdmin.sol\\\";\\r\\n\\r\\ncontract Secured is IHasAdmin {\\r\\n\\r\\n    uint256 private _count;\\r\\n    mapping(address =\\u003e bool) private _admins;\\r\\n\\r\\n    constructor() public {\\r\\n        _count = 1;\\r\\n        _admins[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(_admins[msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAdmin(address accountAddress) public view returns (bool)\\r\\n    {\\r\\n        return _admins[accountAddress];\\r\\n    }\\r\\n\\r\\n    function addAdmin(address accountAddress) public onlyAdmin {\\r\\n        require(!_admins[accountAddress]);\\r\\n        _count++;\\r\\n        _admins[accountAddress] = true;\\r\\n    }\\r\\n\\r\\n    function removeAdmin(address accountAddress) public onlyAdmin {\\r\\n        require(_count \\u003e 1);\\r\\n        require(_admins[accountAddress]);\\r\\n        _count--;\\r\\n        delete _admins[accountAddress];\\r\\n    }\\r\\n\\r\\n    function transferAdmin(address fromAddress, address toAddress) public onlyAdmin {\\r\\n        require(_admins[fromAddress]);\\r\\n        require(!_admins[toAddress]);\\r\\n        delete _admins[fromAddress];\\r\\n        _admins[toAddress] = true;\\r\\n    }\\r\\n}\"},\"SecuredSwitchable.sol\":{\"content\":\"pragma solidity 0.5.0;\\r\\n\\r\\nimport \\\"./Secured.sol\\\";\\r\\n\\r\\ncontract SecuredSwitchable is Secured {\\r\\n\\r\\n    bool private _isEnabled;\\r\\n\\r\\n    modifier onlyEnabled() {\\r\\n        require(_isEnabled);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isEnabled() public view returns (bool) {\\r\\n        return _isEnabled;\\r\\n    }\\r\\n\\r\\n    function setEnabled() public onlyAdmin {\\r\\n        require(!_isEnabled);\\r\\n        _isEnabled = true;\\r\\n    }\\r\\n\\r\\n    function setDisabled() public onlyAdmin {\\r\\n        require(_isEnabled);\\r\\n        _isEnabled = false;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"ticketId\",\"type\":\"uint64\"},{\"name\":\"ticketHash\",\"type\":\"bytes32\"}],\"name\":\"registerPromissoryNoteTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticketId\",\"type\":\"uint64\"},{\"name\":\"ticketHash\",\"type\":\"bytes32\"}],\"name\":\"registerTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticketId\",\"type\":\"uint64\"}],\"name\":\"getTicketHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMetadataHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"ticketId\",\"type\":\"uint64\"}],\"name\":\"getPromissoryNoteTicketTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"ticketId\",\"type\":\"uint64\"}],\"name\":\"getPromissoryNoteTicketHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDisabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticketId\",\"type\":\"uint64\"}],\"name\":\"getTicketTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAddress\",\"type\":\"address\"},{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "CentralSecuritiesDepository", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "acc33baefdbeb1736e152848cbb10027f24583e693f6afaab5468c5e58ce5e4a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1bc4f05516ab2591de6af12c7236366749073eebd1f75e7ace8cabcdcd81dfdd"}