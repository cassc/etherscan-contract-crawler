{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/admin/IAdminBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IAdminBeaconUpgradeable {\\n  function isAdmin(address account) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/admin/UseAdminBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport \\\"./IAdminBeaconUpgradeable.sol\\\";\\n\\ncontract UseAdminBeacon is Ownable {\\n\\n  /// @notice Emitted when a non-admin tries to call an admin function\\n  error OnlyAdmin();\\n\\n  error OnlyAdminOrOwner();\\n\\n  IAdminBeaconUpgradeable public adminBeacon;\\n\\n  modifier onlyAdmin() {\\n    if (!_isAdmin(msg.sender)) revert OnlyAdmin();\\n    _;\\n  }\\n\\n  modifier onlyAdminOrOwner() {\\n    if (!_isAdmin(msg.sender) && msg.sender != owner()) revert OnlyAdminOrOwner();\\n    _;\\n  }\\n\\n  function _isAdmin(address _address) internal view returns (bool) {\\n    return adminBeacon.isAdmin(_address);\\n  }\\n\\n  function _setAdminBeacon(IAdminBeaconUpgradeable _adminBeacon) internal {\\n    adminBeacon = _adminBeacon;\\n  }\\n\\n  function setAdminBeacon(IAdminBeaconUpgradeable _adminBeacon) public virtual onlyOwner {\\n    _setAdminBeacon(_adminBeacon);\\n  }\\n}\"\r\n    },\r\n    \"contracts/minters/utils/IDelegationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n// \u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\\n// \u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\n// \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\npragma solidity ^0.8.17;\\n\\ninterface IDelegationRegistry {\\n    /** @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForContract(\\n        address delegate,\\n        address vault,\\n        address contract_\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/minters/utils/IOasis.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// IOasis.sol - Simplified interface for the Oasis NFT contract\\n\\npragma solidity ^0.8.17;\\n\\ninterface IOasis {\\n    function balanceOf(address _address) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/minters/utils/ISanctionsList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// ISanctionsList.sol - Simplified interface for the SanctionsList contract\\n\\npragma solidity ^0.8.17;\\n\\ninterface ISanctionsList {\\n    function isSanctioned(address addr) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/minters/utils/PresaleMintable/IPresaleMintableMulti.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.17;\\n\\ninterface IPresaleMintableMulti {\\n  function presaleMint(uint256 _id, address _receiver, uint256 _amount) external payable;\\n}\"\r\n    },\r\n    \"contracts/minters/utils/PresaleMintable/IPresaleMintableSingle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.17;\\n\\ninterface IPresaleMintableSingle {\\n  function presaleMint(address _receiver, uint256 _amount) external payable;\\n}\"\r\n    },\r\n    \"contracts/minters/utils/PresaleMintable/ProcessPresaleMintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.17;\\n\\nimport './IPresaleMintableMulti.sol';\\nimport './IPresaleMintableSingle.sol';\\n\\nabstract contract ProcessPresaleMintable {\\n  enum PresaleType {\\n    Single,\\n    Multi\\n  }\\n\\n  struct PresaleMinterInfo {\\n    PresaleType presaleType;\\n    address minterAddress; // casted as IPresaleMintableSingle or IPresaleMintableMulti\\n    uint256 collectionId;\\n    uint256 price;\\n  }\\n\\n  // TODO: send value along with this method\\n  function _processPresaleMinter(PresaleMinterInfo memory _presaleMinter, address _receiver, uint256 _amount, uint256 _price) internal {\\n    if (_presaleMinter.presaleType == PresaleType.Multi) {\\n      IPresaleMintableMulti(_presaleMinter.minterAddress).presaleMint{value: _price}(_presaleMinter.collectionId, _receiver, _amount);\\n    } else if (_presaleMinter.presaleType == PresaleType.Single) {\\n      IPresaleMintableSingle(_presaleMinter.minterAddress).presaleMint{value: _price}(_receiver, _amount);\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/minters/WildxyzGroup/extensions/WildxyzGroupAllowlistSigner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n// \u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\\n// \u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\n// \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n// It ain't much, but it's honest work.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\nimport '../WildxyzGroup.sol';\\n\\nabstract contract WildxyzGroupAllowlistSigner is WildxyzGroup {\\n  \\n  address allowlistSigner;\\n\\n  uint256[] public groupIds_AllowlistSigners;\\n\\n  error InvalidSignature(bytes signature, uint256 groupId);\\n\\n  // modifier validation hooks\\n\\n  modifier validateSigner(address _receiver, bytes memory _signature) {\\n    _validateSignature(_receiver, _signature);\\n    _;\\n  }\\n\\n  // internal functions\\n\\n  function _setupGroupAllowlistSigner(string memory _name, uint256 _startTime, uint256 _endTime, uint256 _price, uint256 _reserveSupply) internal returns (uint256) {\\n    uint256 groupId = _createGroup(_name, _startTime, _endTime, _price, _reserveSupply);\\n\\n    groupIds_AllowlistSigners.push(groupId);\\n\\n    return groupId;\\n  }\\n\\n  function _isAllowlistSignerGroup(uint256 _groupId) internal view returns (bool validGroup) {\\n    for (uint256 i = 0; i < groupIds_AllowlistSigners.length; i++) {\\n      if (groupIds_AllowlistSigners[i] == _groupId) {\\n        validGroup = true;\\n        break;\\n      }\\n    }\\n  }\\n\\n  function _verifySignature(address _receiver, bytes memory _signature) internal view returns (bool, uint256) {\\n    if (_signature.length != 65) return (false, 0);\\n\\n    for (uint256 i = 0; i < groupIds_AllowlistSigners.length; i++) {\\n      uint256 groupId = groupIds_AllowlistSigners[i];\\n\\n      bytes32 addressHash = keccak256(abi.encodePacked(_receiver, address(this), Strings.toString(groupId)));\\n      bytes32 message = ECDSA.toEthSignedMessageHash(addressHash);\\n      address signer = ECDSA.recover(message, _signature);\\n\\n      if (signer != address(0) && signer == allowlistSigner) {\\n        return (true, groupId);\\n      }\\n    }\\n\\n    return (false, 0);\\n  }\\n\\n  function _validateSignature(address _receiver, bytes memory _signature) internal view {\\n    (bool valid, uint256 groupId) = _verifySignature(_receiver, _signature);\\n    if (!valid) revert InvalidSignature(_signature, groupId);\\n  }\\n\\n  function _validateSignatureAndGetGroupId(address _receiver, bytes memory _signature) internal view returns (uint256) {\\n    (bool valid, uint256 groupId) = _verifySignature(_receiver, _signature);\\n    if (!valid) revert InvalidSignature(_signature, groupId);\\n\\n    return groupId;\\n  }\\n\\n  function _setAllowlistSigner(address _signer) internal {\\n    allowlistSigner = _signer;\\n  }\\n\\n  // only admin\\n\\n  function setAllowlistSigner(address _signer) public onlyAdmin {\\n    _setAllowlistSigner(_signer);\\n  }\\n\\n  // public functions\\n\\n  /** @notice Verifies the signature of the signer for a given address.\\n   * @param _receiver The address the message was signed for.\\n   * @param _signature The signature to verify.\\n   * @return valid True if the signature is valid, false otherwise.\\n   */\\n  function verifySignature(address _receiver, bytes memory _signature) public view returns (bool, uint256) {\\n    return _verifySignature(_receiver, _signature);\\n  }\\n\\n  // minting implemented in child contract\\n}\"\r\n    },\r\n    \"contracts/minters/WildxyzGroup/extensions/WildxyzGroupOasis.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n// \u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\\n// \u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\n// \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n// It ain't much, but it's honest work.\\n\\npragma solidity ^0.8.17;\\n\\nimport '../../utils/IOasis.sol';\\n\\nimport '../WildxyzGroup.sol';\\n\\nabstract contract WildxyzGroupOasis is WildxyzGroup {\\n\\n  uint256 public groupId_Oasis;\\n\\n  /// @notice Oasis NFT address.\\n  IOasis public oasis;\\n\\n  mapping(address => uint256) public addressTotalOasisSupply; // oasis specific total minted\\n\\n  uint256 public maxPerOasis;\\n\\n  mapping(uint256 => uint8) private oasisPassMints;\\n\\n  // setup\\n\\n  function _setupGroupOasis(uint256 _startTime, uint256 _endTime, uint256 _price, uint256 _reserveSupply, IOasis _oasis, uint256 _maxPerOasis) internal {\\n    groupId_Oasis = _createGroup('Oasis', _startTime, _endTime, _price, _reserveSupply);\\n    \\n    oasis = _oasis;\\n    maxPerOasis = _maxPerOasis;\\n  }\\n\\n  // callback to override to implement minting/purchase logic\\n\\n  function _processUseOasisCallback(address _receiver) internal virtual returns (uint256 tokenId) {}\\n\\n  // internal helpers\\n\\n  function _getOasisMintAllowance(address _oasisOwner, uint256 _oasisBalance) internal view returns (uint256 quantity) {\\n    for (uint256 i = 0; i < _oasisBalance; i++) {\\n      uint256 oasisId = oasis.tokenOfOwnerByIndex(_oasisOwner, i);\\n      quantity += (maxPerOasis > oasisPassMints[oasisId] ? maxPerOasis - oasisPassMints[oasisId] : 0);\\n    }\\n  }\\n\\n  function _processUseOasis(address _receiver, address _requester, uint256 _amount) internal virtual returns (uint256[] memory tokenIds, uint256[] memory oasisIds) {\\n    uint256 oasisBalance = oasis.balanceOf(_requester);\\n\\n    if (_getOasisMintAllowance(_requester, oasisBalance) == 0) revert ZeroOasisAllowance(_receiver);\\n\\n    uint256 mintsLeft = _amount;\\n    uint256 totalMinted = 0;\\n\\n    tokenIds = new uint256[](_amount);\\n    oasisIds = new uint256[](_amount);\\n\\n    for (uint256 i = 0; i < oasisBalance; i++) {\\n      uint256 oasisId = oasis.tokenOfOwnerByIndex(_requester, i);\\n      uint256 tokenAllowance = maxPerOasis - oasisPassMints[oasisId];\\n\\n      if (tokenAllowance == 0) {\\n        // Oasis pass been fully minted\\n        continue;\\n      }\\n\\n      uint8 quantityMintedWithOasis = uint8(Math.min(tokenAllowance, mintsLeft));\\n\\n      oasisPassMints[oasisId] += quantityMintedWithOasis;\\n      mintsLeft -= quantityMintedWithOasis;\\n\\n      for (uint256 j = 0; j < quantityMintedWithOasis; j++) {\\n        uint256 tokenId = _processUseOasisCallback(_receiver);\\n\\n        tokenIds[totalMinted + j] = tokenId;\\n        oasisIds[totalMinted + j] = oasisId;\\n      }\\n\\n      totalMinted += quantityMintedWithOasis;\\n    }\\n\\n    if (mintsLeft != 0) revert NotEnoughOasisMints(_requester);\\n  }\\n\\n  function _addOasisTotalSupply(address _receiver, uint256 _amount) internal virtual {\\n    // just in case they move their oasis and try to get into a different group\\n    _addAddressTotalSupply(_receiver, _amount);\\n\\n    addressTotalOasisSupply[_receiver] += _amount;\\n  }\\n\\n  // overrides\\n  \\n  function getUserGroupAllowance(address _user, uint256 _groupId) public view virtual override returns (uint256) {\\n    uint256 supplyRemaining = _remainingSupply();\\n    if (supplyRemaining == 0) {\\n      return 0;\\n    }\\n\\n    uint256 oasisBalance = oasis.balanceOf(_user);\\n\\n    if (oasisBalance > 0 || _groupId == groupId_Oasis) {\\n      // Y = # oasis * S (S = maxPerOasis)\\n      if (oasisBalance > 0) {\\n        // if user owns oasis, count max allowance as num. oasis * maxPerOasis\\n        return Math.min(_getOasisMintAllowance(_user, oasisBalance), supplyRemaining);\\n      }\\n\\n      return 0;\\n    }\\n\\n    // Y = R (R = maxPerAddress)\\n    return Math.min(maxPerAddress - addressTotalSupply[_user], supplyRemaining);\\n  }\\n\\n  function getUserGroupTotalSupply(address _user, uint256 _groupId) public view virtual override returns (uint256) {\\n    if (_groupId == groupId_Oasis) {\\n      return addressTotalOasisSupply[_user];\\n    } else {\\n      return addressTotalSupply[_user];\\n    }\\n  }\\n\\n  // only admin functions\\n\\n  function setMaxPerOasis(uint256 _maxPerOasis) public onlyAdmin {\\n    maxPerOasis = _maxPerOasis;\\n  }\\n}\"\r\n    },\r\n    \"contracts/minters/WildxyzGroup/IWildxyzGroup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n// \u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\\n// \u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\n// \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\npragma solidity ^0.8.17;\\n\\ninterface IWildxyzGroup {\\n    // enums\\n\\n    /// @dev States for the minter\\n    enum State {\\n        Setup, // also \\\"comingsoon\\\"\\n        Live, // defer to phases for state name\\n        Complete, // also \\\"soldout\\\"\\n        Paused // temporary paused state\\n    }\\n\\n    // structs\\n\\n    /// @dev Represents a minting group\\n    struct Group {\\n        string name;\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 price;\\n\\n        uint256 reserveSupply; // supply reserved for this group until reserveEndTime (>= 0 and < maxSupply)\\n    }\\n\\n    // events\\n\\n\\n    // errors\\n\\n    /// @notice Emitted when trying to call setup twice\\n    error AlreadySetup();\\n\\n    /// @notice Emitted when not in live state\\n    error NotLive();\\n\\n    /// @notice Emitted when not in complete state\\n    error NotComplete();\\n\\n    /// @notice Emitted when group is not allowed to mint yet\\n    error GroupNotLive(uint256 _groupId);\\n\\n    /// @notice Emitted when given a zero address\\n    error ZeroAddress();\\n\\n    /// @notice Emitted when given a zero amount\\n    error ZeroAmount();\\n\\n    /// @notice Emitted when setting group start time to an invalid value\\n    error InvalidGroupStartTime(uint256 _startTime);\\n\\n    /// @notice Emitted when an OFAC sanctioned address tries to interact with a function\\n    error SanctionedAddress(address _to);\\n\\n    /// @notice Emitted when a function is called by a non-delegated address\\n    error NotDelegated(address _sender, address _vault, address _contract);\\n\\n    /// @notice Emitted when failing to withdraw to wallet\\n    error FailedToWithdraw(string _walletName, address _wallet);\\n\\n    /// @notice Emitted when given a non-existing groupId\\n    error GroupDoesNotExist(uint256 _groupId);\\n\\n    /// @notice Emitted when amount requested exceeds nft max supply\\n    error MaxSupplyExceeded();\\n\\n    /// @notice Emitted when the value provided is not enough for the function\\n    error InsufficientFunds();\\n\\n    /// @notice Emitted when two or more arrays do not match in size\\n    error ArraySizeMismatch();\\n\\n    error NotEnoughOasisMints(address _receiver);\\n    error ZeroOasisAllowance(address _receiver);\\n\\n    error FailedToMint(address _receiver);\\n\\n    /// @notice Emitted when a user tries to mint too many toksns\\n    error MaxPerAddressExceeded(address _receiver, uint256 _amount);\\n\\n    /// @notice Emitted when a non-admin or non-manager tries to call an admin or manager function\\n    error OnlyAdminOrManager();\\n\\n    error ReserveSupplyExceedsMaxSupply(uint256 reserveSupply, uint256 maxSupply);\\n}\\n\"\r\n    },\r\n    \"contracts/minters/WildxyzGroup/presets/WildxyzBundlePurchase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n// \u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\\n// \u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\n// \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n// It ain't much, but it's honest work.\\n\\npragma solidity ^0.8.17;\\n\\nimport '../extensions/WildxyzGroupOasis.sol';\\nimport '../extensions/WildxyzGroupAllowlistSigner.sol';\\n\\nimport '../../utils/PresaleMintable/ProcessPresaleMintable.sol';\\n\\ncontract WildxyzBundlePurchase is WildxyzGroupOasis, WildxyzGroupAllowlistSigner, ProcessPresaleMintable {\\n\\n  uint256 public groupId_ArtistCollectors;\\n  uint256 public groupId_PartnersA;\\n  uint256 public groupId_PartnersB;\\n\\n  struct ContractInfo {\\n    State state;\\n    uint256 maxSupply;\\n    uint256 totalSupply;\\n    uint256 remainingSupply;\\n    uint256 maxPerAddress;\\n    uint256 maxPerOasis;\\n    uint256 extraTokensPerBundle;\\n    uint256 extraTokenPrice;\\n    uint256 extraTokensTotalSupply;\\n    address allowlistSigner;\\n    Group[] groups;\\n  }\\n\\n  struct UserInfo {\\n    uint256 userGroupId;\\n    uint256 bundleAllowance;\\n    uint256 extraTokenAllowance;\\n    bool isGroupLive;\\n    BundlePurchaseInfo bundlePurchaseInfo;\\n  }\\n\\n  // bundle variables\\n\\n  struct BundlePurchaseInfo {\\n    address owner;\\n\\n    uint256 numBundles;\\n    uint256 numExtraTokens;\\n\\n    uint256 value; // total eth value sent for this bundle + extra tokens\\n\\n    uint256 numExtraTokensProcessed;\\n\\n    bool processed;\\n  }\\n\\n  enum PurchaseType {\\n    Oasis,\\n    ArtistCollectors,\\n    PartnersA,\\n    PartnersB\\n  }\\n\\n  uint256 public extraTokensPerBundle = 2;\\n\\n  mapping(address => BundlePurchaseInfo) private bundlePurchaseInfo;\\n\\n  mapping(address => mapping(uint256 => uint256)) public numBundlesProcessedPerCollectionId;\\n\\n  address[] public bundleOwners;\\n\\n  uint256 public numBundleOwners;\\n\\n  uint256 public bundleTotalSupply;\\n  uint256 public extraTokensTotalSupply;\\n\\n  // presale minting logic\\n\\n  PresaleMinterInfo[] public presaleMinters; // minter to use to mint in the bundle\\n  PresaleMinterInfo public extraTokenMinter; // minter to use to mint for extra tokens\\n\\n  uint256 public numPresaleMinters;\\n\\n  uint256 public extraTokenPrice;\\n\\n  // events\\n\\n  event BundlePurchased(address indexed to, uint256 quantity, uint256 extraTokens, uint256 amount, PurchaseType purchaseType, bool isDelegated, address vault);\\n\\n  event ExtraTokensPurchased(address indexed to, uint256 quantity, uint256 amount);\\n\\n  event BundlePurchaseProcessed(address indexed to, uint256 indexed amount, uint256 indexed extraTokens);\\n\\n  // errors\\n\\n  error MustPurchaseBundleBeforeAddingExtraTokens(address to);\\n\\n  error MaxExtraTokensPerBundleExceeded(address to);\\n\\n  error NFTAlreadyExistsInBundle(address nft);\\n\\n  error NFTDoesNotExistInBundle(address nft);\\n\\n  error AlreadyProcessedBundlePurchase(address to);\\n\\n  // constructor\\n\\n  constructor (uint256 _maxSupply, uint256 _maxPerAddress, uint256 _wildRoyalty, address _wildWallet, address _artistWallet, IAdminBeaconUpgradeable _adminBeacon, ISanctionsList _sanctions, PresaleMinterInfo[] memory _presaleMinters, PresaleMinterInfo memory _extraTokenMinter)\\n    WildxyzGroup(_maxSupply, _maxPerAddress, _wildRoyalty, _wildWallet, _artistWallet, _adminBeacon, _sanctions)\\n  {\\n    for (uint256 i = 0; i < _presaleMinters.length; i++) {\\n      presaleMinters.push(_presaleMinters[i]);\\n    }\\n\\n    numPresaleMinters = _presaleMinters.length;\\n\\n    extraTokenMinter = _extraTokenMinter;\\n  }\\n  \\n  function setup(\\n    uint256[4] memory _startTimes,\\n    uint256[4] memory _endTimes,\\n    uint256[4] memory _prices,\\n    uint256[4] memory _reserveSupply,\\n    uint256 _extraTokenPrice,\\n    IOasis _oasis,\\n    uint256 _maxPerOasis,\\n    address _allowlistSigner\\n  ) public onlyOwner setupOnce {\\n    _setupGroupOasis(_startTimes[0], _endTimes[0], _prices[0], _reserveSupply[0], _oasis, _maxPerOasis);\\n\\n    groupId_ArtistCollectors = _setupGroupAllowlistSigner('Artist Collectors', _startTimes[1], _endTimes[1], _prices[1], _reserveSupply[1]);\\n\\n    groupId_PartnersA = _setupGroupAllowlistSigner('Partners Wave 1', _startTimes[2], _endTimes[2], _prices[2], _reserveSupply[2]);\\n    groupId_PartnersB = _setupGroupAllowlistSigner('Partners Wave 2', _startTimes[3], _endTimes[3], _prices[3], _reserveSupply[3]);\\n\\n    _setAllowlistSigner(_allowlistSigner);\\n\\n    extraTokenPrice = _extraTokenPrice;\\n  }\\n\\n  // required overrides\\n\\n  function _totalSupply() internal view virtual override(WildxyzGroup) returns (uint256) {\\n    return bundleTotalSupply;\\n  }\\n\\n  function getUserGroupAllowance(address _user, uint256 _groupId) public view virtual override(WildxyzGroup, WildxyzGroupOasis) returns (uint256) {\\n    return WildxyzGroupOasis.getUserGroupAllowance(_user, _groupId);\\n  }\\n\\n  function getUserGroupTotalSupply(address _user, uint256 _groupId) public view virtual override(WildxyzGroup, WildxyzGroupOasis) returns (uint256) {\\n    return WildxyzGroupOasis.getUserGroupTotalSupply(_user, _groupId);\\n  }\\n\\n  // internal functions\\n\\n  // in addition to group price checking we check this method,\\n  // maybe in the future we should override something in the base contract\\n  function _validPurchasePrice(uint256 _groupId, uint256 _value, uint256 _numBundles, uint256 _numExtraTokens) internal view {\\n    uint256 groupPrice = getGroupPrice(_groupId);\\n    uint256 totalValue = _numBundles * groupPrice + _numExtraTokens * extraTokenPrice;\\n\\n    if (_value < totalValue) revert InsufficientFunds();\\n  }\\n\\n  function _validExtraTokenAllowance(address _receiver, uint256 _amount) internal view {\\n    if (bundlePurchaseInfo[_receiver].numExtraTokens + _amount > bundlePurchaseInfo[_receiver].numBundles * extraTokensPerBundle) revert MaxExtraTokensPerBundleExceeded(_receiver);\\n  }\\n\\n  function _onBundlePurchase(address _receiver, uint256 _amount, uint256 _extraTokens, PurchaseType _purchaseType, uint256 _value) internal {\\n    BundlePurchaseInfo storage purchaseInfo = bundlePurchaseInfo[_receiver];\\n\\n    if (purchaseInfo.owner == address(0)) {\\n      purchaseInfo.owner = _receiver;\\n\\n      bundleOwners.push(_receiver);\\n\\n      numBundleOwners++;\\n    }\\n\\n    purchaseInfo.numBundles += _amount;\\n    purchaseInfo.value += _value;\\n\\n    // check extra token allowance\\n    _validExtraTokenAllowance(_receiver, _extraTokens);\\n\\n    purchaseInfo.numExtraTokens += _extraTokens;\\n\\n    // add to total supply trackers\\n    extraTokensTotalSupply += _extraTokens;\\n\\n    bundleTotalSupply += _amount;\\n\\n    _addAddressTotalSupply(_receiver, _amount);\\n\\n    // emit event\\n    emit BundlePurchased(_receiver, _amount, _extraTokens, _value, _purchaseType, false, address(0));\\n  }\\n\\n  function _onExtraTokensPurchased(address _receiver, uint256 _amount, uint256 _value) internal {\\n    BundlePurchaseInfo storage purchaseInfo = bundlePurchaseInfo[_receiver];\\n\\n    if (purchaseInfo.owner == address(0)) revert MustPurchaseBundleBeforeAddingExtraTokens(_receiver);\\n\\n    _validExtraTokenAllowance(_receiver, _amount);\\n\\n    purchaseInfo.numExtraTokens += _amount;\\n\\n    extraTokensTotalSupply += _amount;\\n\\n    purchaseInfo.value += _value;\\n  }\\n\\n  // override\\n\\n  function _processUseOasisCallback(address _receiver) internal virtual override returns (uint256 tokenId) {\\n    BundlePurchaseInfo storage purchaseInfo = bundlePurchaseInfo[_receiver];\\n\\n    if (purchaseInfo.owner == address(0)) {\\n      purchaseInfo.owner = _receiver;\\n\\n      bundleOwners.push(_receiver);\\n\\n      numBundleOwners++;\\n    }\\n\\n    purchaseInfo.numBundles++;\\n\\n    bundleTotalSupply++;\\n\\n    return 0;\\n  }\\n\\n  function _purchaseWithOasis(address _receiver, uint256 _amount, uint256 _extraTokens, uint256 _value, bool isDelegated, address vault) internal {\\n    _processUseOasis(_receiver, vault, _amount); // this calls the '_processUseOasisCallback' method\\n\\n    _onExtraTokensPurchased(msg.sender, _extraTokens, 0);\\n\\n    bundlePurchaseInfo[msg.sender].value += _value;\\n\\n    emit BundlePurchased(msg.sender, _amount, _extraTokens, _value, PurchaseType.Oasis, isDelegated, vault);\\n\\n    _addOasisTotalSupply(msg.sender, _amount);\\n  }\\n\\n function _withdraw() internal virtual override {\\n    (bool successWild, ) = wildWallet.call{value: address(this).balance}('');\\n    if (!successWild) revert FailedToWithdraw('wild', wildWallet);\\n }\\n\\n  // public functions\\n\\n  function getUserGroup(address _user, bytes memory _signature) public view virtual override returns (uint256) {\\n    // oasis takes priority\\n    if (oasis.balanceOf(_user) > 0) {\\n      return groupId_Oasis;\\n    }\\n\\n    // get and validate signer\\n    (bool isValidSigner, uint256 signerGroupId) = _verifySignature(_user, _signature);\\n    if (isValidSigner) {\\n      return signerGroupId;\\n    }\\n\\n    return numGroups; // an invalid group id\\n  }\\n\\n  function getUserExtraTokenAllowance(address _user) public view returns (uint256) {\\n    BundlePurchaseInfo storage purchaseInfo = bundlePurchaseInfo[_user];\\n    uint256 numBundles = purchaseInfo.numBundles;\\n    uint256 numExtraTokens = purchaseInfo.numExtraTokens;\\n\\n    if (numBundles == 0) return 0;\\n\\n    // in case we change the extra tokens per bundle\\n    if (numBundles * extraTokensPerBundle < numExtraTokens) return 0;\\n\\n    return numBundles * extraTokensPerBundle - numExtraTokens;\\n  }\\n\\n  function getBundleInfo(address _user) public view returns (BundlePurchaseInfo memory) {\\n    return bundlePurchaseInfo[_user];\\n  }\\n\\n  function getContractInfo() public view virtual returns (ContractInfo memory) {\\n    return ContractInfo(getState(), maxSupply, _totalSupply(), _remainingSupply(), maxPerAddress, maxPerOasis, extraTokensPerBundle, extraTokenPrice, extraTokensTotalSupply, allowlistSigner, _getGroupsArray());\\n  }\\n\\n  function getUserInfo(address _user, bytes memory _signature) public view virtual returns (UserInfo memory) {\\n    uint256 userGroupId = getUserGroup(_user, _signature);\\n\\n    return UserInfo(userGroupId, getUserGroupAllowance(_user, userGroupId), getUserExtraTokenAllowance(_user), _isGroupLive(userGroupId), getBundleInfo(_user));\\n  }\\n\\n  function getUserContractInfo(address _user, bytes memory _signature) public view returns (UserInfo memory userInfo, ContractInfo memory contractInfo) {\\n    userInfo = getUserInfo(_user, _signature);\\n    contractInfo = getContractInfo();\\n  }\\n\\n  // only admin\\n\\n  function setExtraTokensPerBundle(uint256 _extraTokensPerBundle) public onlyAdmin {\\n    extraTokensPerBundle = _extraTokensPerBundle;\\n  }\\n\\n  function setExtraTokenMinter(PresaleMinterInfo memory _extraTokenMinter) public onlyAdmin {\\n    extraTokenMinter = _extraTokenMinter;\\n  }\\n\\n  function addPresaleMinter(PresaleMinterInfo memory _presaleMinter) public onlyAdmin {\\n    // check if nft already exists\\n    for (uint256 i = 0; i < presaleMinters.length; i++) {\\n      if (presaleMinters[i].minterAddress == _presaleMinter.minterAddress) revert NFTAlreadyExistsInBundle(_presaleMinter.minterAddress);\\n    }\\n\\n    presaleMinters.push(_presaleMinter);\\n\\n    numPresaleMinters = presaleMinters.length;\\n  }\\n\\n  function removePresaleMinter(PresaleMinterInfo memory _presaleMinter) public onlyAdmin {\\n    // check if nft exists\\n    bool found = false;\\n    for (uint256 i = 0; i < presaleMinters.length; i++) {\\n      if (presaleMinters[i].minterAddress == _presaleMinter.minterAddress) {\\n        found = true;\\n        break;\\n      }\\n    }\\n\\n    if (!found) revert NFTDoesNotExistInBundle(_presaleMinter.minterAddress);\\n\\n    // remove nft\\n    for (uint256 i = 0; i < presaleMinters.length; i++) {\\n      if (presaleMinters[i].minterAddress == _presaleMinter.minterAddress) {\\n        presaleMinters[i] = presaleMinters[presaleMinters.length - 1];\\n        presaleMinters.pop();\\n        break;\\n      }\\n    }\\n\\n    numPresaleMinters = presaleMinters.length;\\n  }\\n\\n  function closeBundle() public onlyAdmin {\\n    // set all group end times to now\\n    for (uint256 i = 0; i < numGroups; i++) {\\n      groups[i].endTime = block.timestamp;\\n    }\\n  }\\n\\n  function setAllEndTimes(uint256 _endTime) public onlyAdmin {\\n    for (uint256 i = 0; i < numGroups; i++) {\\n      groups[i].endTime = _endTime;\\n    }\\n  }\\n\\n  function setAllPrices(uint256 _price) public onlyAdmin {\\n    for (uint256 i = 0; i < numGroups; i++) {\\n      groups[i].price = _price;\\n    }\\n  }\\n\\n  // only owner\\n  \\n  // function processBundleMintPerCollection(uint256 _index, uint256 _collectionId) public onlyAdmin {\\n  //   address receiver = bundleOwners[_index];\\n\\n  //   if (bundlePurchaseInfo[receiver].processed) revert AlreadyProcessedBundlePurchase(receiver);\\n\\n  //   BundlePurchaseInfo storage purchaseInfo = bundlePurchaseInfo[receiver];\\n\\n  //   uint256 numBundles = purchaseInfo.numBundles - numBundlesProcessedPerCollectionId[receiver][_collectionId];\\n  //   uint256 numExtraTokens = purchaseInfo.numExtraTokens;\\n\\n  //   // mint _collectionId presale minter\\n  //   if (numBundles > 0) {\\n  //     for (uint256 i = 0; i < presaleMinters.length; i++) {\\n  //       if (presaleMinters[i].collectionId == _collectionId) {\\n  //         _processPresaleMinter(presaleMinters[i], receiver, numBundles);\\n  //         break;\\n  //       }\\n  //     }\\n  //   }\\n\\n  //   // mint extra tokens\\n  //   if (numExtraTokens > 0 && extraTokenMinter.collectionId == _collectionId) {\\n  //     _processPresaleMinter(extraTokenMinter, receiver, numExtraTokens);\\n  //   }\\n\\n  //   emit BundlePurchaseProcessed(receiver, numBundles, numExtraTokens);\\n\\n  //   numBundlesProcessedPerCollectionId[receiver][_collectionId] += numBundles;\\n  //   purchaseInfo.numExtraTokensProcessed += numExtraTokens;\\n\\n  //   // if all collections have been processed and all extra tokens have been processed\\n  //   bool allPresaleMintersProcessed = true;\\n  //   for (uint256 i = 0; i < presaleMinters.length; i++) {\\n  //     if (numBundlesProcessedPerCollectionId[receiver][presaleMinters[i].collectionId] < purchaseInfo.numBundles) {\\n  //       allPresaleMintersProcessed = false;\\n  //       break;\\n  //     }\\n  //   }\\n  //   purchaseInfo.processed = allPresaleMintersProcessed && purchaseInfo.numExtraTokensProcessed == purchaseInfo.numExtraTokens;\\n  // }\\n\\n  // function processBundleMintBatchPerCollection(uint256 _fromIndex, uint256 _toIndex, uint256 _collectionId) public onlyAdmin {\\n  //   for (uint256 i = _fromIndex; i < _toIndex; i++) {\\n  //     processBundleMintPerCollection(i, _collectionId);\\n  //   }\\n  // }\\n\\n  function processBundleMint(uint256 _index) public onlyAdmin {\\n    address receiver = bundleOwners[_index];\\n\\n    if (bundlePurchaseInfo[receiver].processed) revert AlreadyProcessedBundlePurchase(receiver);\\n\\n    BundlePurchaseInfo storage purchaseInfo = bundlePurchaseInfo[receiver];\\n\\n    uint256 numBundles = purchaseInfo.numBundles;\\n    uint256 numExtraTokens = purchaseInfo.numExtraTokens;\\n\\n    // mint presale minters\\n    if (numBundles > 0) {\\n      for (uint256 i = 0; i < presaleMinters.length; i++) {\\n        uint256 collectionValue = numBundles * presaleMinters[i].price;\\n        uint256 tokensToMint = numBundles;\\n\\n        if (presaleMinters[i].collectionId == extraTokenMinter.collectionId) {\\n          collectionValue += numExtraTokens * extraTokenMinter.price;\\n          tokensToMint += numExtraTokens;\\n        }\\n\\n        _processPresaleMinter(presaleMinters[i], receiver, tokensToMint, collectionValue);\\n      }\\n    }\\n\\n    emit BundlePurchaseProcessed(receiver, numBundles, numExtraTokens);\\n\\n    purchaseInfo.processed = true;\\n  }\\n\\n  function processBundleMintBatch(uint256 _fromIndex, uint256 _toIndex) public onlyAdmin {\\n    for (uint256 i = _fromIndex; i < _toIndex; i++) {\\n      processBundleMint(i);\\n    }\\n  }\\n\\n  // public purchase\\n\\n  function purchaseExtraTokens(uint256 _amount)\\n    public payable virtual\\n    onlyUnsanctioned(msg.sender)\\n    whenNotPaused nonReentrant beforeEndTime\\n  {\\n    uint256 totalValue = _amount * extraTokenPrice;\\n    if (msg.value < totalValue) revert InsufficientFunds();\\n\\n    _onExtraTokensPurchased(msg.sender, _amount, msg.value);\\n\\n    emit ExtraTokensPurchased(msg.sender, _amount, msg.value);\\n  }\\n\\n  function oasisPurchase(uint256 _amount, uint256 _extraTokens)\\n    public payable virtual\\n    onlyUnsanctioned(msg.sender)\\n    whenNotPaused nonReentrant onlyLive\\n    validGroupPriceSupply(_amount, groupId_Oasis)\\n  {\\n    _validPurchasePrice(groupId_Oasis, msg.value, _amount, _extraTokens);\\n\\n    _purchaseWithOasis(msg.sender, _amount, _extraTokens, msg.value, false, msg.sender);\\n  }\\n\\n  function oasisPurchaseDelegated(uint256 _amount, uint256 _extraTokens, address _vault) \\n    public payable virtual\\n    onlyUnsanctioned(msg.sender)\\n    whenNotPaused nonReentrant onlyLive\\n    onlyDelegated(_vault, address(oasis))\\n    validGroupPriceSupply(_amount, groupId_Oasis)\\n  {\\n    _validPurchasePrice(groupId_Oasis, msg.value, _amount, _extraTokens);\\n\\n    _purchaseWithOasis(msg.sender, _amount, _extraTokens, msg.value, true, _vault);\\n  }\\n\\n  // general allowlist mint, looks up group id from signature\\n  function allowlistPurchase(uint256 _amount, uint256 _extraTokens, bytes memory _signature)\\n    public payable virtual\\n    onlyUnsanctioned(msg.sender)\\n    whenNotPaused nonReentrant onlyLive\\n  {\\n    uint256 groupId = _validateSignatureAndGetGroupId(msg.sender, _signature);\\n    _validGroupPriceSupplyAllowance(msg.sender, _amount, groupId);\\n\\n    PurchaseType purchaseType;\\n    if (groupId == groupId_ArtistCollectors) {\\n      purchaseType = PurchaseType.ArtistCollectors;\\n    } else if (groupId == groupId_PartnersA) {\\n      purchaseType = PurchaseType.PartnersA;\\n    } else if (groupId == groupId_PartnersB) {\\n      purchaseType = PurchaseType.PartnersB;\\n    }\\n\\n    _validPurchasePrice(groupId, msg.value, _amount, _extraTokens);\\n\\n    _onBundlePurchase(msg.sender, _amount, _extraTokens, purchaseType, msg.value);\\n  }\\n}\"\r\n    },\r\n    \"contracts/minters/WildxyzGroup/WildxyzGroup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n// \u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\\n// \u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\n// \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n// It ain't much, but it's honest work.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport '../../admin/UseAdminBeacon.sol';\\n\\nimport '../utils/ISanctionsList.sol';\\nimport '../utils/IDelegationRegistry.sol';\\n\\nimport './IWildxyzGroup.sol';\\n\\nabstract contract WildxyzGroup is IWildxyzGroup, UseAdminBeacon, Pausable, ReentrancyGuard {\\n  // private variables\\n\\n  mapping(uint256 => Group) internal groups;\\n  uint256 internal numGroups;\\n\\n  /// @dev One-time variable used to set up the contract.\\n  bool private isSetup = false;\\n\\n  // drop variables\\n\\n  /// @notice Max supply of NFTs available. Same as NFT contract.\\n  uint256 public maxSupply;\\n\\n  /// @notice Wildxyz royalty percentage.\\n  /// @dev Wildxyz royalty is `wildRoyalty`%. Artist royalty is `100 - wildRoyalty`% (100 - wildRoyalty).\\n  uint256 public wildRoyalty;\\n\\n  /// @notice Royalty total denominator.\\n  uint256 public royaltyTotal = 100;\\n\\n  /// @notice Wildxyz royalty wallet\\n  /// @dev This is the wallet that will receive the `wildRoyalty`% of the primary sale eth.\\n  address payable public wildWallet;\\n\\n  /// @notice Artist royalty wallet\\n  /// @dev This is the wallet that will receive the `100 - wildRoyalty`% of the primary sale eth.\\n  address payable public artistWallet;\\n\\n  /// @notice The OFAC sanctions list contract address.\\n  /// @dev Used to block unsanctioned addresses from minting NFTs.\\n  ISanctionsList public sanctionsList;\\n\\n  /// @notice The DelegateCash registry address.\\n  IDelegationRegistry public delegationRegistry = IDelegationRegistry(0x00000000000076A84feF008CDAbe6409d2FE638B);\\n\\n  // minter variables\\n\\n  uint256 public maxPerAddress;\\n\\n  mapping(address => uint256) public addressTotalSupply;\\n\\n  // modifiers\\n\\n  modifier setupOnce() {\\n    if (isSetup) revert AlreadySetup();\\n    isSetup = true;\\n    _;\\n  }\\n  \\n  modifier onlyLive() {\\n    if (getState() != State.Live) revert NotLive();\\n    _;\\n  }\\n\\n  modifier beforeEndTime() {\\n    uint256 lastGroupId = numGroups - 1;\\n    if (groups[lastGroupId].endTime != 0 && block.timestamp >= groups[lastGroupId].endTime) revert NotLive();\\n    _;\\n  }\\n\\n  modifier validGroup(uint256 _groupId) {\\n    _validGroup(_groupId);\\n    _;\\n  }\\n\\n  modifier onlyUnsanctioned(address _to) {\\n    if (sanctionsList.isSanctioned(_to)) revert SanctionedAddress(_to);\\n    _;\\n  }\\n\\n  modifier onlyDelegated(address _vault, address _contract) {\\n    if (!delegationRegistry.checkDelegateForContract(msg.sender, _vault, _contract)) revert NotDelegated(msg.sender, _vault, _contract);\\n    _;\\n  }\\n\\n  modifier nonZeroAmount(uint256 _amount) {\\n    _nonZeroAmount(_amount);\\n    _;\\n  }\\n\\n  modifier validGroupPriceSupplyAllowance(address _receiver, uint256 _amount, uint256 _groupId) {\\n    _validGroupPriceSupplyAllowance(_receiver, _amount, _groupId);\\n    _;\\n  }\\n\\n  modifier validGroupPriceSupply(uint256 _amount, uint256 _groupId) {\\n    _validGroupPriceSupply(_amount, _groupId);\\n    _;\\n  }\\n\\n  /** @notice Base constructor\\n   * @param _maxSupply The max supply of the NFT (same as WildNFT)\\n   * @param _maxPerAddress The max number of NFTs that can be minted per address\\n   * @param _wildRoyalty The royalty percentage for Wildxyz\\n   * @param _wildWallet The wallet address for Wildxyz\\n   * @param _artistWallet The wallet address for the artist\\n   * @param _adminBeacon The admin address\\n   * @param _sanctions The sanctions list contract address\\n   */\\n  constructor(uint256 _maxSupply, uint256 _maxPerAddress, uint256 _wildRoyalty, address _wildWallet, address _artistWallet, IAdminBeaconUpgradeable _adminBeacon, ISanctionsList _sanctions) {\\n    maxSupply = _maxSupply;\\n    maxPerAddress = _maxPerAddress;\\n\\n    wildRoyalty = _wildRoyalty;\\n    wildWallet = payable(_wildWallet);\\n    artistWallet = payable(_artistWallet);\\n\\n    _setAdminBeacon(_adminBeacon);\\n\\n    sanctionsList = _sanctions;\\n  }\\n\\n  // internal functions\\n\\n  function _createGroup(string memory _name, uint256 _startTime, uint256 _endTime, uint256 _price, uint256 _reserveSupply) internal onlyOwner returns (uint256 groupId) {\\n    groupId = numGroups;\\n\\n    // check if total reserve supply exceeds max supply\\n    if (_reserveSupply > maxSupply) revert ReserveSupplyExceedsMaxSupply(_reserveSupply, maxSupply);\\n\\n    groups[groupId] = Group(_name, groupId, _startTime, _endTime, _price, _reserveSupply);\\n\\n    numGroups++;\\n  }\\n\\n  // function validation hooks\\n\\n  function _isGroupLive(uint256 _groupId) internal view returns (bool) {\\n    if (_groupId >= numGroups) return false;\\n    return block.timestamp >= groups[_groupId].startTime && (groups[_groupId].endTime == 0 || block.timestamp < groups[_groupId].endTime);\\n  }\\n\\n  function _nonZeroAmount(uint256 _amount) internal pure {\\n    if (_amount < 1) revert ZeroAmount();\\n  }\\n\\n  function _validGroup(uint256 _groupId) internal view {\\n    if (_groupId >= numGroups) revert GroupDoesNotExist(_groupId);\\n  }\\n\\n  function _groupAllowed(uint256 _group) internal view {\\n    if (!_isGroupLive(_group)) revert GroupNotLive(_group);\\n  }\\n\\n  function _validPrice(uint256 _amount, uint256 _groupId) internal view {\\n    if (msg.value < _amount * groups[_groupId].price) revert InsufficientFunds();\\n  }\\n\\n  function _validSupply(uint256 _amount) internal view {\\n    if (_amount > _remainingSupply()) revert MaxSupplyExceeded();\\n  }\\n\\n  function _validAllowance(address _receiver, uint256 _amount) internal view {\\n    if (addressTotalSupply[_receiver] + _amount > maxPerAddress) revert MaxPerAddressExceeded(_receiver, _amount);\\n  }\\n\\n  function _validGroupPriceSupplyAllowance(address _receiver, uint256 _amount, uint256 _groupId) internal view virtual {\\n    _groupAllowed(_groupId);\\n    _validPrice(_amount, _groupId);\\n    _validSupply(_amount);\\n    _validAllowance(_receiver, _amount);\\n  }\\n\\n  function _validGroupPriceSupply(uint256 _amount, uint256 _groupId) internal view virtual {\\n    _groupAllowed(_groupId);\\n    _validPrice(_amount, _groupId);\\n    _validSupply(_amount);\\n  }\\n\\n  // helpers\\n\\n  /// @dev Withdraws the funds to wild and artist wallets acconting for royalty fees. Only callable by owner.\\n  function _withdraw() internal virtual {\\n    // send a fraction of the balance to wild first\\n    if (wildRoyalty > 0) {\\n      (bool successWild, ) = wildWallet.call{value: ((address(this).balance * wildRoyalty) / royaltyTotal)}('');\\n      if (!successWild) revert FailedToWithdraw('wild', wildWallet);\\n    }\\n\\n    // then, send the rest to payee\\n    (bool successPayee, ) = artistWallet.call{value: address(this).balance}('');\\n    if (!successPayee) revert FailedToWithdraw('artist', artistWallet);\\n  }\\n\\n  /// @dev Implemented in child contracts to hold total supply logic.\\n  function _totalSupply() internal view virtual returns (uint256) {}\\n\\n  /// @dev Returns adjusted maxSupply for reserve quantities.\\n  function _remainingSupply() internal view virtual returns (uint256) {\\n    if (groups[0].reserveSupply == 0 || groups[0].reserveSupply == maxSupply) return maxSupply - _totalSupply();\\n\\n    uint256 _currentGroupId; // get the last group that is live based on start time\\n    for (uint256 i = 0; i < numGroups; i++) {\\n      if (block.timestamp >= groups[i].startTime) {\\n        _currentGroupId = i;\\n      }\\n    }\\n\\n    uint256 cumulativeReserveSupply = 0; // including current _currentGroupId\\n\\n    if (_currentGroupId == numGroups - 1) {\\n      return maxSupply - _totalSupply();\\n    } else {\\n      for (uint256 i = 0; i <= _currentGroupId; i++) {\\n        cumulativeReserveSupply += groups[i].reserveSupply;\\n      }\\n      cumulativeReserveSupply = Math.min(maxSupply, cumulativeReserveSupply);\\n    }\\n\\n    return cumulativeReserveSupply - _totalSupply();\\n  }\\n\\n  function _addAddressTotalSupply(address _receiver, uint256 _amount) internal {\\n    addressTotalSupply[_receiver] += _amount;\\n  }\\n\\n  function _getGroupsArray() internal view virtual returns (Group[] memory _groups) {\\n    _groups = new Group[](numGroups);\\n    for (uint256 i = 0; i < numGroups; i++) {\\n      _groups[i] = groups[i];\\n    }\\n  }\\n\\n  // public admin-only functions\\n\\n  /** @notice Pause the minter.\\n   * @dev Sets the minter state to Paused and pauses the minter and any mint functions. Only callable by admin.\\n   */\\n  function pause() public virtual onlyAdmin {\\n    _pause();\\n  }\\n\\n  /** @notice Unpause the minter.\\n   * @dev Resumes normal minter state and any mint functions. Only callable by admin.\\n   */\\n  function unpause() public virtual onlyAdmin {\\n    _unpause();\\n  }\\n\\n  /** @notice Sets the DelegateCash contract address.\\n   * @dev Can only be called by the contract admin.\\n   * @param _delegationRegistry The new delegation registry contract address.\\n   */\\n  function setDelegationRegistry(address _delegationRegistry) external onlyAdmin {\\n    delegationRegistry = IDelegationRegistry(_delegationRegistry);\\n  }\\n\\n  /** @notice Sets the max per address.\\n   * @dev Sets the given max per address. Only callable by admin.\\n   * @param _maxPerAddress The new max per address.\\n   */\\n  function setMaxPerAddress(uint256 _maxPerAddress) public onlyAdmin {\\n    maxPerAddress = _maxPerAddress;\\n  }\\n\\n  /** @notice Sets the group price.\\n   * @dev Sets the given group price. Only callable by admin.\\n   * @param _groupId The group ID. Must be a valid group ID.\\n   * @param _price The new price of the group. Must be non-zero.\\n   */\\n  function setGroupPrice(uint256 _groupId, uint256 _price) public virtual validGroup(_groupId) nonZeroAmount(_price) onlyAdmin {\\n    groups[_groupId].price = _price;\\n  }\\n\\n  /** @notice Sets the group start time.\\n   * @dev Sets the given group start time. Only callable by admin.\\n   * @param _groupId The group ID. Must be a valid group ID.\\n   * @param _startTime The new start time of the group.\\n   */\\n  function setGroupStartTime(uint256 _groupId, uint256 _startTime) public virtual validGroup(_groupId) onlyAdmin {\\n    groups[_groupId].startTime = _startTime;\\n  }\\n\\n  /** @notice Sets the group end time.\\n   * @dev Sets the given group end time. Only callable by admin.\\n   * @param _groupId The group ID. Must be a valid group ID.\\n   * @param _endTime The new end time of the group.\\n   */\\n  function setGroupEndTime(uint256 _groupId, uint256 _endTime) public virtual validGroup(_groupId) onlyAdmin {\\n    groups[_groupId].endTime = _endTime;\\n  }\\n\\n  function setGroupName(uint256 _groupId, string memory _name) public virtual validGroup(_groupId) onlyAdmin {\\n    groups[_groupId].name = _name;\\n  }\\n\\n  // public only-owner functions\\n\\n  /** @notice Withdraws funds to wild and artist wallets.\\n   * @dev Withdraws the funds to wild and artist wallets acconting for royalty fees. Only callable by owner.\\n   */\\n  function withdraw() public virtual onlyOwner {\\n    _withdraw();\\n  }\\n\\n  // public functions\\n\\n  /** @notice Get the current minter state.\\n   * @dev Returns the current minter state. If groups are not directly one after another (ie presale), it is possible to re-enter Setup state.\\n   * @return state Minter state (0 = Setup, 1 = Live, 2 = Complete, 3 = Paused).\\n   */\\n  function getState() public view virtual returns (State) {\\n    if (paused()) {\\n      return State.Paused;\\n    }\\n\\n    // if sold out, return Complete state\\n    // NOTE: this would not work with a ReserveAuction where this minter holds the token!!!!\\n    if (_totalSupply() == maxSupply) {\\n      return State.Complete;\\n    }\\n\\n    bool allGroupsEnded = true;\\n\\n    // check if we are in any group using _isGroupLive\\n    // if we are in a group, return Live state\\n    // note: if groups are not directly one after another (ie presale), it is possible to re-enter Setup state\\n    for (uint256 groupId = 0; groupId < numGroups; groupId++) {\\n      if (_isGroupLive(groupId)) {\\n        return State.Live;\\n      }\\n\\n      if (groups[groupId].endTime == 0 || block.timestamp < groups[groupId].endTime) {\\n        allGroupsEnded = false;\\n      }\\n    }\\n\\n    if (allGroupsEnded) {\\n      return State.Complete;\\n    } else {\\n      return State.Setup;\\n    }\\n  }\\n\\n  function getUserGroup(address _user, bytes memory _signature) public view virtual returns (uint256) {}\\n\\n  // returns user allowance: Y\\n  function getUserGroupAllowance(address _user, uint256 /*_groupId*/) public view virtual returns (uint256) {\\n    uint256 supplyRemaining = _remainingSupply();\\n    if (supplyRemaining == 0) {\\n      return 0;\\n    }\\n\\n    // Y = R (R = maxPerAddress)\\n    return Math.min(maxPerAddress - addressTotalSupply[_user], supplyRemaining);\\n  }\\n\\n  function getUserGroupTotalSupply(address _user, uint256 /*_groupId*/) public view virtual returns (uint256) {\\n    return addressTotalSupply[_user];\\n  }\\n\\n  function getGroups() public view returns (Group[] memory _groups) {\\n    _groups = new Group[](numGroups);\\n    for (uint256 i = 0; i < numGroups; i++) {\\n      _groups[i] = groups[i];\\n    }\\n  }\\n\\n  function getGroup(uint256 _groupId) public view validGroup(_groupId) returns (Group memory) {\\n    return groups[_groupId];\\n  }\\n\\n  function getGroupStartTime(uint256 _groupId) public view validGroup(_groupId) returns (uint256) {\\n    return groups[_groupId].startTime;\\n  }\\n\\n  function getGroupEndTime(uint256 _groupId) public view validGroup(_groupId) returns (uint256) {\\n    return groups[_groupId].endTime;\\n  }\\n\\n  function getGroupPrice(uint256 _groupId) public view validGroup(_groupId) returns (uint256) {\\n    return groups[_groupId].price;\\n  }\\n\\n  // generic deposit\\n\\n  receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wildRoyalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wildWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_artistWallet\",\"type\":\"address\"},{\"internalType\":\"contract IAdminBeaconUpgradeable\",\"name\":\"_adminBeacon\",\"type\":\"address\"},{\"internalType\":\"contract ISanctionsList\",\"name\":\"_sanctions\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ProcessPresaleMintable.PresaleType\",\"name\":\"presaleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ProcessPresaleMintable.PresaleMinterInfo[]\",\"name\":\"_presaleMinters\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ProcessPresaleMintable.PresaleType\",\"name\":\"presaleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ProcessPresaleMintable.PresaleMinterInfo\",\"name\":\"_extraTokenMinter\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AlreadyProcessedBundlePurchase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraySizeMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"FailedToMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_walletName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"FailedToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"GroupDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"GroupNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"InvalidGroupStartTime\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MaxExtraTokensPerBundleExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MaxPerAddressExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MustPurchaseBundleBeforeAddingExtraTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"NFTAlreadyExistsInBundle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"NFTDoesNotExistInBundle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotComplete\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"NotDelegated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"NotEnoughOasisMints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminOrManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"ReserveSupplyExceedsMaxSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"SanctionedAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"ZeroOasisAllowance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"extraTokens\",\"type\":\"uint256\"}],\"name\":\"BundlePurchaseProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum WildxyzBundlePurchase.PurchaseType\",\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDelegated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"BundlePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExtraTokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ProcessPresaleMintable.PresaleType\",\"name\":\"presaleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ProcessPresaleMintable.PresaleMinterInfo\",\"name\":\"_presaleMinter\",\"type\":\"tuple\"}],\"name\":\"addPresaleMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressTotalOasisSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminBeacon\",\"outputs\":[{\"internalType\":\"contract IAdminBeaconUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraTokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"allowlistPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bundleOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bundleTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationRegistry\",\"outputs\":[{\"internalType\":\"contract IDelegationRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraTokenMinter\",\"outputs\":[{\"internalType\":\"enum ProcessPresaleMintable.PresaleType\",\"name\":\"presaleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraTokensPerBundle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraTokensTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBundleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numBundles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numExtraTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numExtraTokensProcessed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"internalType\":\"struct WildxyzBundlePurchase.BundlePurchaseInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IWildxyzGroup.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerOasis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraTokensPerBundle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraTokensTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowlistSigner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct IWildxyzGroup.Group[]\",\"name\":\"groups\",\"type\":\"tuple[]\"}],\"internalType\":\"struct WildxyzBundlePurchase.ContractInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct IWildxyzGroup.Group\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getGroupStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct IWildxyzGroup.Group[]\",\"name\":\"_groups\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum IWildxyzGroup.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getUserContractInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userGroupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bundleAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraTokenAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGroupLive\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numBundles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numExtraTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numExtraTokensProcessed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"internalType\":\"struct WildxyzBundlePurchase.BundlePurchaseInfo\",\"name\":\"bundlePurchaseInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct WildxyzBundlePurchase.UserInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IWildxyzGroup.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerOasis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraTokensPerBundle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraTokensTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowlistSigner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct IWildxyzGroup.Group[]\",\"name\":\"groups\",\"type\":\"tuple[]\"}],\"internalType\":\"struct WildxyzBundlePurchase.ContractInfo\",\"name\":\"contractInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserExtraTokenAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getUserGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getUserGroupAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"getUserGroupTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userGroupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bundleAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraTokenAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGroupLive\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numBundles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numExtraTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numExtraTokensProcessed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"internalType\":\"struct WildxyzBundlePurchase.BundlePurchaseInfo\",\"name\":\"bundlePurchaseInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct WildxyzBundlePurchase.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupId_ArtistCollectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupId_Oasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupId_PartnersA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupId_PartnersB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupIds_AllowlistSigners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerOasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBundleOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numBundlesProcessedPerCollectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPresaleMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oasis\",\"outputs\":[{\"internalType\":\"contract IOasis\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraTokens\",\"type\":\"uint256\"}],\"name\":\"oasisPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"oasisPurchaseDelegated\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presaleMinters\",\"outputs\":[{\"internalType\":\"enum ProcessPresaleMintable.PresaleType\",\"name\":\"presaleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"processBundleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toIndex\",\"type\":\"uint256\"}],\"name\":\"processBundleMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseExtraTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ProcessPresaleMintable.PresaleType\",\"name\":\"presaleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ProcessPresaleMintable.PresaleMinterInfo\",\"name\":\"_presaleMinter\",\"type\":\"tuple\"}],\"name\":\"removePresaleMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sanctionsList\",\"outputs\":[{\"internalType\":\"contract ISanctionsList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAdminBeaconUpgradeable\",\"name\":\"_adminBeacon\",\"type\":\"address\"}],\"name\":\"setAdminBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setAllEndTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setAllPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setAllowlistSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegationRegistry\",\"type\":\"address\"}],\"name\":\"setDelegationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ProcessPresaleMintable.PresaleType\",\"name\":\"presaleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ProcessPresaleMintable.PresaleMinterInfo\",\"name\":\"_extraTokenMinter\",\"type\":\"tuple\"}],\"name\":\"setExtraTokenMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extraTokensPerBundle\",\"type\":\"uint256\"}],\"name\":\"setExtraTokensPerBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setGroupEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setGroupName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setGroupPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setGroupStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerAddress\",\"type\":\"uint256\"}],\"name\":\"setMaxPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerOasis\",\"type\":\"uint256\"}],\"name\":\"setMaxPerOasis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_startTimes\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_endTimes\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_prices\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_reserveSupply\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"_extraTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"contract IOasis\",\"name\":\"_oasis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerOasis\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_allowlistSigner\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wildRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wildWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WildxyzBundlePurchase", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000640000000000000000000000002085dcb989bcabc78c47aabbc501562dea2c84d6000000000000000000000000713e32e1503ae88a38d1753728bacda69265997000000000000000000000000021962d32a32c161017976fbd963784f23e190c1f00000000000000000000000040c57923924b5c5c5455c48d93317139addac8fb0000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000100000000000000000000000062c7a26c3a829ffbaf76011166abbaacda1945bf000000000000000000000000000000000000000000000000000000000000047300000000000000000000000000000000000000000000000001aa535d3d0c00000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000062c7a26c3a829ffbaf76011166abbaacda1945bf0000000000000000000000000000000000000000000000000000000000000471000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000062c7a26c3a829ffbaf76011166abbaacda1945bf0000000000000000000000000000000000000000000000000000000000000472000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000062c7a26c3a829ffbaf76011166abbaacda1945bf000000000000000000000000000000000000000000000000000000000000047300000000000000000000000000000000000000000000000001aa535d3d0c0000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}