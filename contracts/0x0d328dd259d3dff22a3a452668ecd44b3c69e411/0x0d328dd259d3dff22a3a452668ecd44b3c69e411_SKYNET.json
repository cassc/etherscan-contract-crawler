{"SourceCode": "/* SKYNET IS THE WORLD'S FIRST TAX FREE, BUYBACK AND BURN TOKEN\r\n NEURAL MEME BASED ARTIFICAL INTELLIGENCE\r\n\r\n WEBISTE: https://www.skynettoken.vip/\r\n TELEGRAM: https://t.me/SkyNet_Portal\r\n X: https://twitter.com/SkyNetToken\r\n\r\n\r\n0 TAX\r\nUNISWAP V3 WETH AND USDC POOL, CREATING A FOREVER LASTING ARBITRAGE\r\n*/\r\n\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\r\n    }\r\n}\r\n\r\ninterface IV3SwapRouter {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external returns (uint256 amountOut);\r\n}\r\n\r\ninterface INonfungiblePositionManager {\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n    function mint(MintParams calldata params) external payable returns (\r\n        uint256 tokenId,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n    function createAndInitializePoolIfNecessary(\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        uint160 sqrtPriceX96\r\n    ) external payable returns (address pool);\r\n}\r\n\r\ninterface IUniCryptCollect {\r\n    function collect(\r\n        uint256 lockId,\r\n        address recipient,\r\n        uint128 amount0Max,\r\n        uint128 amount1Max\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n}\r\n\r\n\r\ncontract SKYNET is ERC20, Ownable {\r\n\r\n     INonfungiblePositionManager public Posman;\r\n    address private UniCryptCollect;\r\n    address private V3SwapRouter;\r\n    address public weth;\r\n    address public usdc;\r\n    address private externalAddress;\r\n    address private smartRouter;\r\n\r\n    uint256 private wethPortion = 10;\r\n    uint256 private lockWETH;\r\n    uint256 private lockUSDC;\r\n    uint256 private supply = 29_081_994 * 10 ** 18;\r\n    uint24  private feePoolWeth = 10000;\r\n    uint24  private feePoolUsdc = 10000;\r\n    uint128 constant MAX_UINT128 = type(uint128).max;\r\n    uint256 constant MAX_UINT256 = type(uint256).max;\r\n    bool    public maxWalletEnforced = false;\r\n    bool    private liquidityAdded = false;\r\n    uint256 public maxWalletAmountTier1;\r\n    uint256 public maxWalletAmountTier2;\r\n    uint256 public maxWalletTimeTier1 = 2 minutes;\r\n    uint256 public maxWalletTimeTier2 = 5 minutes;\r\n    uint256 private constant PERCENTAGE_TO_CONTRACT = 40;\r\n    uint256 private LpAmount;\r\n    uint256 public tradingStartTime;\r\n    uint256 public lastCollectTimePoolWeth;\r\n    uint256 public lastCollectTimePoolUsdc;  \r\n    uint256 public collectInterval = 15 minutes;\r\n    uint256 public buyBackInterval = 10 seconds;\r\n    address public poolWETH;\r\n    address public poolUSDC;\r\n    uint256 private contractAmount;\r\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    uint160 private sqrtPriceX96;\r\n    uint160 private sqrtPriceX96U;\r\n    uint256 private WethAmt = 1 ether; \r\n    uint256 private USDCAmt = 2275000000;\r\n    address private token0;\r\n    address private token1;\r\n    uint    private amount0Desired;\r\n    uint    private amount1Desired;\r\n    address private token0U;\r\n    address private token1U;\r\n    uint    private amount0DesiredU;\r\n    uint    private amount1DesiredU;\r\n\r\n    uint256 public lastWethBuyBackTime;\r\n    uint256 public lastUsdcBuyBackTime;\r\n    uint256 public WethBought;\r\n    uint256 public UsdcBought;\r\n    bool    public LPLocked = false;\r\n    uint256 public lastPublicCollect;\r\n    uint256 public lastManualBuyBackWeth;\r\n    uint256 public lastManualBuyBackUsdc;\r\n    uint160 private token1Weth;\r\n    uint160 private token0Weth;\r\n    uint160 private token1USDC;\r\n    uint160 private token0USDC;\r\n    bool    public wethPoolCreated = false;\r\n    bool    public usdcPoolCreated = false;\r\n    bool    private inBuyBack;\r\n\r\n    \r\n    mapping(address => bool) private excludedFromMaxWallet;\r\n    \r\n\r\nconstructor(address _uniCryptCollect, address _v3SwapRouter, address _posman, address _weth, address _usdc, address _externalAddress, address _smartRouter, uint160 _token0Weth, uint160 _token1Weth, uint160 _token0USDC, uint160 _token1USDC) ERC20(\"SkyNet AI\", \"SkyNet\") {\r\n        uint256 _contractAmount = (supply * PERCENTAGE_TO_CONTRACT) / 100;\r\n        uint256 senderAmount = supply - _contractAmount;\r\n        uint256 _LpAmount = _contractAmount /2;\r\n        LpAmount = _LpAmount;\r\n        contractAmount = _contractAmount;\r\n\r\n        _mint(address(this), _contractAmount);\r\n        _mint(msg.sender, senderAmount);\r\n        \r\n        UniCryptCollect = _uniCryptCollect;\r\n        V3SwapRouter = _v3SwapRouter;\r\n        Posman = INonfungiblePositionManager(_posman);\r\n        weth = _weth;\r\n        usdc = _usdc;\r\n        externalAddress = _externalAddress;\r\n        smartRouter = _smartRouter;\r\n        token0Weth = _token0Weth;\r\n        token1Weth = _token1Weth;\r\n        token0USDC = _token0USDC;\r\n        token1USDC = _token1USDC;\r\n\r\n        maxWalletAmountTier1 = (supply * 25) / 10000;  // .25%\r\n        maxWalletAmountTier2= (supply * 75) / 10000;  // .75%\r\n\r\n        _Ordering();\r\n\r\n        excludedFromMaxWallet[address(this)] = true;  \r\n        excludedFromMaxWallet[msg.sender] = true;\r\n        excludedFromMaxWallet[address(poolWETH)] = true;\r\n        excludedFromMaxWallet[address(poolUSDC)] = true;\r\n        excludedFromMaxWallet[address(Posman)] = true;\r\n        excludedFromMaxWallet[address(V3SwapRouter)] = true;\r\n        excludedFromMaxWallet[address(UniCryptCollect)] = true;\r\n        excludedFromMaxWallet[address(smartRouter)] = true;\r\n    }\r\n\r\n    function createPools() external onlyOwner {\r\n        require(!wethPoolCreated, \"pool already added!\");\r\n        require(!usdcPoolCreated, \"pool already added!\");\r\n\r\n        poolWETH = Posman.createAndInitializePoolIfNecessary(token0, token1, feePoolWeth, sqrtPriceX96);\r\n        poolUSDC = Posman.createAndInitializePoolIfNecessary(token0U, token1U, feePoolUsdc, sqrtPriceX96U);\r\n        wethPoolCreated = true;\r\n        usdcPoolCreated = true;\r\n    }\r\n\r\n\r\n    function _Ordering() private {\r\n        if (address(this) < weth) {\r\n            token0 = address(this);\r\n            token1 = weth;\r\n            amount0Desired = LpAmount;\r\n            amount1Desired = WethAmt;\r\n            sqrtPriceX96 =  token1Weth;       //1771595571142957102749610171\r\n            \r\n        } else {\r\n            token0 = weth;\r\n            token1 = address(this);\r\n            amount0Desired = WethAmt;\r\n            amount1Desired = LpAmount;\r\n            sqrtPriceX96 = token0Weth;   //35431911422859351420592203432321452\r\n           \r\n        }\r\n\r\n        if (address(this) < usdc) {\r\n            token0U = address(this);\r\n            token1U = usdc;\r\n            amount0DesiredU = LpAmount;\r\n            amount1DesiredU = USDCAmt;\r\n            sqrtPriceX96U =  token1USDC;       //2817895585981079558759335776\r\n            \r\n        } else {\r\n            token0U = usdc;\r\n            token1U = address(this);\r\n            amount0DesiredU = USDCAmt;\r\n            amount1DesiredU = LpAmount;\r\n            sqrtPriceX96U = token0USDC;   //2227585691856211822826824962574399\r\n           \r\n        }\r\n    }\r\n\r\n    function addLiquidity() public onlyOwner {\r\n        require(!liquidityAdded, \"Liquidity already added!\");\r\n        tradingStartTime = block.timestamp;\r\n        lastWethBuyBackTime = block.timestamp;\r\n        lastUsdcBuyBackTime = block.timestamp;\r\n        lastCollectTimePoolWeth = block.timestamp;\r\n        lastCollectTimePoolUsdc = block.timestamp;\r\n\r\n        TransferHelper.safeApprove(token0, address(Posman), amount0Desired);\r\n        TransferHelper.safeApprove(token1, address(Posman), amount1Desired); \r\n\r\n        Posman.mint(INonfungiblePositionManager.MintParams({\r\n            token0: token0,\r\n            token1: token1,\r\n            fee: feePoolWeth,\r\n            tickLower: -887200,\r\n            tickUpper: 887200,\r\n            amount0Desired: amount0Desired,\r\n            amount1Desired: amount1Desired,\r\n            amount0Min: 0,\r\n            amount1Min: 0,\r\n            recipient: msg.sender,\r\n            deadline: block.timestamp + 1200\r\n        }));\r\n        TransferHelper.safeApprove(token0U, address(Posman), amount0DesiredU);\r\n        TransferHelper.safeApprove(token1U, address(Posman), amount1DesiredU);\r\n\r\n\r\n        Posman.mint(INonfungiblePositionManager.MintParams({\r\n            token0: token0U,\r\n            token1: token1U,\r\n            fee: feePoolUsdc,\r\n            tickLower: -887200,\r\n            tickUpper: 887200,\r\n            amount0Desired: amount0DesiredU,\r\n            amount1Desired: amount1DesiredU,\r\n            amount0Min: 0,\r\n            amount1Min: 0,\r\n            recipient: msg.sender,\r\n            deadline: block.timestamp + 1200\r\n        }));\r\n\r\n         liquidityAdded = true;\r\n         maxWalletEnforced = true;\r\n         \r\n    }\r\n\r\n    function PoolIDs(uint256 _lockWETH, uint256 _lockUSDC) external onlyOwner{\r\n        lockWETH =   _lockWETH;\r\n        lockUSDC =   _lockUSDC;\r\n\r\n        LPLocked = true;\r\n    }\r\n\r\n    \r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    \r\n    if (maxWalletEnforced) {\r\n        uint256 currentTime = block.timestamp;\r\n        bool isWithinFirstTier = currentTime > tradingStartTime && currentTime <= tradingStartTime + maxWalletTimeTier1;\r\n        bool isWithinSecondTier = currentTime <= tradingStartTime + maxWalletTimeTier2;\r\n        bool isBuyFromPool = (from == poolWETH || from == poolUSDC);\r\n        uint256 maxWalletAmount = isWithinFirstTier ? maxWalletAmountTier1 : maxWalletAmountTier2;\r\n\r\n        if ((isWithinFirstTier || isWithinSecondTier) && !excludedFromMaxWallet[to]) {\r\n            // Apply max wallet restriction if it's a buy from the pool or during the first time period\r\n            if (isBuyFromPool || isWithinFirstTier) {\r\n                require(balanceOf(to) + amount <= maxWalletAmount, \"Exceeds max wallet amount\");\r\n            }\r\n        }\r\n\r\n        // Disable max wallet enforcement after the second time period\r\n        if (!isWithinSecondTier) {\r\n            maxWalletEnforced = false;\r\n        }\r\n    }\r\n\r\n    // Call collect functions for pool transfers \r\n    if ((to == poolWETH) && LPLocked) {  \r\n         if (block.timestamp - lastCollectTimePoolUsdc >= collectInterval) {\r\n            _collectForPoolUSDC();\r\n         }\r\n    }    \r\n\r\n    if ((to == poolUSDC) && LPLocked) { \r\n         if (block.timestamp - lastCollectTimePoolWeth >= collectInterval) {\r\n            _collectForPoolWETH();\r\n         }\r\n    }   \r\n\r\n    super._transfer(from, to, amount);\r\n\r\n    if (!inBuyBack) {\r\n    if ((from == poolWETH) && LPLocked) {\r\n        if (block.timestamp - buyBackInterval >= lastUsdcBuyBackTime) {\r\n            _buyBackAndBurnUsdc();\r\n        }\r\n    }\r\n\r\n    if ((from == poolUSDC) && LPLocked) {\r\n        if (block.timestamp - buyBackInterval >= lastWethBuyBackTime) {\r\n            _buyBackAndBurnWeth();\r\n        }\r\n    }\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction _collectForPoolWETH() internal {\r\n    uint256 wethBalanceBefore = IERC20(weth).balanceOf(address(this)); \r\n    bool collected = false;\r\n\r\n    // Attempt collection from Pool1\r\n    if (block.timestamp - lastCollectTimePoolWeth >= collectInterval) {\r\n        try IUniCryptCollect(UniCryptCollect).collect(lockWETH, address(this), MAX_UINT128, MAX_UINT128) {\r\n            lastCollectTimePoolWeth = block.timestamp;\r\n            collected = true;\r\n        } catch {} // Do nothing if the call fails\r\n    }\r\n    \r\n\r\n    if (collected) {\r\n        // Calculate WETH received from the collect\r\n        uint256 wethReceived = IERC20(weth).balanceOf(address(this)) - wethBalanceBefore;\r\n\r\n        // Burn tokens equivalent to the contract's balance\r\n        uint256 tokensToBurn = balanceOf(address(this));\r\n        _transfer(address(this), DEAD, tokensToBurn); // This will send the tokens to the dead address, effectively burning them.\r\n\r\n        // Send a portion of the WETH to the external address\r\n        uint256 wethToSend = (wethReceived * wethPortion) / 100; // Calculates the portion of WETH to send\r\n        IERC20(weth).transfer(externalAddress, wethToSend);\r\n    }\r\n}\r\n\r\nfunction _collectForPoolUSDC() internal {\r\n    uint256 usdcBalanceBefore = IERC20(usdc).balanceOf(address(this)); \r\n    bool collected = false;\r\n\r\n    \r\n    if (block.timestamp - lastCollectTimePoolUsdc >= collectInterval) {\r\n        try IUniCryptCollect(UniCryptCollect).collect(lockUSDC, address(this), MAX_UINT128, MAX_UINT128) {\r\n            lastCollectTimePoolUsdc = block.timestamp;\r\n            collected = true;\r\n        } catch {} // Do nothing if the call fails\r\n    }\r\n    \r\n\r\n    if (collected) {\r\n        // Calculate WETH received from the collect\r\n        uint256 usdcReceived = IERC20(usdc).balanceOf(address(this)) - usdcBalanceBefore;\r\n\r\n        // Burn tokens equivalent to the contract's balance\r\n        uint256 tokensToBurn = balanceOf(address(this));\r\n        _transfer(address(this), DEAD, tokensToBurn); // This will send the tokens to the dead address, effectively burning them.\r\n\r\n        // Send a portion of the usdc to the external address\r\n        uint256 usdcToSend = (usdcReceived * wethPortion) / 100; // Calculates the portion of WETH to send\r\n        IERC20(usdc).transfer(externalAddress, usdcToSend);\r\n    }\r\n}\r\n\r\n\r\nfunction _buyBackAndBurnWeth() internal {\r\n    if (inBuyBack) return;\r\n    inBuyBack = true;\r\n    uint256 wethBalance = IERC20(weth).balanceOf(address(this));\r\n\r\n    if (wethBalance == 0) {\r\n        return; // Exit the function early if no WETH is available for buyback\r\n    }\r\n\r\n    uint256 buyBackAmount = (wethBalance * 10) / 100; // 10% of WETH balance\r\n\r\n    if (buyBackAmount > 0) {\r\n\r\n        TransferHelper.safeApprove(weth, address(V3SwapRouter), buyBackAmount);\r\n        // Define the swap params\r\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter.ExactInputSingleParams({\r\n            tokenIn: weth,\r\n            tokenOut: address(this),\r\n            fee: feePoolWeth, \r\n            recipient: DEAD,\r\n            deadline: block.timestamp,\r\n            amountIn: buyBackAmount,\r\n            amountOutMinimum: 0,  // Accept any amount of tokens out\r\n            sqrtPriceLimitX96: 0  // No price limit\r\n        });\r\n\r\n        // Attempt the swap\r\n         try IV3SwapRouter(V3SwapRouter).exactInputSingle(params) {\r\n             WethBought += buyBackAmount;\r\n             lastWethBuyBackTime = block.timestamp;\r\n         } catch {}   \r\n        }\r\n     inBuyBack = false;\r\n    \r\n} \r\n\r\nfunction _buyBackAndBurnUsdc() internal {\r\n    if (inBuyBack) return;\r\n    inBuyBack = true;\r\n    uint256 usdcBalance = IERC20(usdc).balanceOf(address(this));\r\n\r\n    if (usdcBalance == 0) {\r\n        return; // Exit the function early if no Usdc is available for buyback\r\n    }\r\n\r\n    uint256 buyBackAmount = (usdcBalance * 10) / 100; // 10% of Usdc balance\r\n\r\n    if (buyBackAmount > 0) {\r\n                TransferHelper.safeApprove(usdc, address(V3SwapRouter), buyBackAmount);\r\n\r\n        // Define the swap params\r\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter.ExactInputSingleParams({\r\n            tokenIn: usdc,\r\n            tokenOut: address(this),\r\n            fee: feePoolUsdc, \r\n            recipient: DEAD,\r\n            deadline: block.timestamp,\r\n            amountIn: buyBackAmount,\r\n            amountOutMinimum: 0,  // Accept any amount of tokens out\r\n            sqrtPriceLimitX96: 0  // No price limit\r\n        });\r\n\r\n        // Attempt the swap\r\n         try IV3SwapRouter(V3SwapRouter).exactInputSingle(params) {\r\n             UsdcBought += buyBackAmount;\r\n             lastUsdcBuyBackTime = block.timestamp;\r\n         } catch {}   \r\n        }\r\n        inBuyBack = false;\r\n     \r\n    \r\n} \r\n\r\nfunction changeBuyBackInterval(uint256 _timeSeconds) external onlyOwner {\r\n    buyBackInterval = _timeSeconds;\r\n}\r\n\r\n\r\nfunction rescue(address token) external onlyOwner {\r\n        require(token != address(this));\r\n        if (token == address(0x0)) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 ERC20token = IERC20(token);\r\n        uint256 balance = ERC20token.balanceOf(address(this));\r\n        ERC20token.transfer(msg.sender, balance);\r\n    }\r\n\r\n// Public function that anyone can call every 7 days in the event collect needs to happen\r\nfunction manualCollect() public {\r\n    require (block.timestamp > lastPublicCollect + 69 minutes, \"Must wait  to call ManualCollect\");\r\n    _collectForPoolWETH();\r\n    _collectForPoolUSDC();\r\n\r\n    lastPublicCollect = block.timestamp;\r\n    }\r\n\r\n //Public function to buyback and burn a random amount every 36 hours\r\nfunction manualBuyBackWeth()  public {\r\n    require (block.timestamp > lastManualBuyBackWeth + 69 minutes, \"Must wait\");\r\n    _buyBackAndBurnWeth();\r\n    lastManualBuyBackWeth = block.timestamp;\r\n   }\r\n\r\nfunction manualBuyBackUsdc()  public {\r\n    require (block.timestamp > lastManualBuyBackUsdc + 69 minutes, \"Must wait\");\r\n    _buyBackAndBurnUsdc();\r\n    lastManualBuyBackUsdc = block.timestamp;\r\n   }\r\n\r\nfunction multiSendTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner {\r\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\r\n        for (uint8 i = 0; i < accounts.length; i++) {\r\n            require(balanceOf(msg.sender) >= amounts[i]);\r\n            super._transfer(msg.sender , accounts[i], amounts[i]);\r\n        }\r\n    }\r\n  \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniCryptCollect\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_v3SwapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_posman\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartRouter\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_token0Weth\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"_token1Weth\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"_token0USDC\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"_token1USDC\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockUSDC\",\"type\":\"uint256\"}],\"name\":\"PoolIDs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Posman\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UsdcBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WethBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeSeconds\",\"type\":\"uint256\"}],\"name\":\"changeBuyBackInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCollectTimePoolUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCollectTimePoolWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualBuyBackUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualBuyBackWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPublicCollect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUsdcBuyBackTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWethBuyBackTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBuyBackUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBuyBackWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmountTier1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmountTier2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletEnforced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletTimeTier1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletTimeTier2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolUSDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolWETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcPoolCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethPoolCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SKYNET", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f5c649856f900d15c83741f45ae46f5c6858234000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000256aee4a011b3160b8bd39c41477d93fd29b86cb00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000000000000000096bb89e9282c50234770bd5a7100000000000000000000000000000000000000000001b2c883ef7f8522b7b9fbc0000000000000000000000000000000000000032903bf149281e63ba74f59f36000000000000000000000000000000000000000005101d7068495e02a9749643", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c34e0976cfd48993ce6c59c6a7999c087ec8c6d32b00e7d1b07842f8c6c83309"}