{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SplitLiquidationCollateral.f.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Fixed256x18 {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return (((a * ONE) - 1) / b) + 1;\\n        }\\n    }\\n\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\\ninterface ISplitLiquidationCollateral {\\n    // --- Functions ---\\n\\n    /// @dev Returns lowest total debt that will be split.\\n    function LOW_TOTAL_DEBT() external view returns (uint256);\\n\\n    /// @dev Minimum collateralization ratio for position\\n    function MCR() external view returns (uint256);\\n\\n    /// @dev Splits collateral between protocol and liquidator.\\n    /// @param totalCollateral Amount of collateral to split.\\n    /// @param totalDebt Amount of debt to split.\\n    /// @param price Price of collateral.\\n    /// @param isRedistribution True if this is a redistribution.\\n    /// @return collateralToSendToProtocol Amount of collateral to send to protocol.\\n    /// @return collateralToSentToLiquidator Amount of collateral to send to liquidator.\\n    function split(\\n        uint256 totalCollateral,\\n        uint256 totalDebt,\\n        uint256 price,\\n        bool isRedistribution\\n    )\\n        external\\n        view\\n        returns (uint256 collateralToSendToProtocol, uint256 collateralToSentToLiquidator);\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\\nlibrary MathUtils {\\n    // --- Constants ---\\n\\n    /// @notice Represents 100%.\\n    /// @dev 1e18 is the scaling factor (100% == 1e18).\\n    uint256 public constant _100_PERCENT = Fixed256x18.ONE;\\n\\n    /// @notice Precision for Nominal ICR (independent of price).\\n    /// @dev Rationale for the value:\\n    /// - Making it \u201ctoo high\u201d could lead to overflows.\\n    /// - Making it \u201ctoo low\u201d could lead to an ICR equal to zero, due to truncation from floor division.\\n    ///\\n    /// This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 collateralToken,\\n    /// and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n    uint256 internal constant _NICR_PRECISION = 1e20;\\n\\n    /// @notice Number of minutes in 1000 years.\\n    uint256 internal constant _MINUTES_IN_1000_YEARS = 1000 * 365 days / 1 minutes;\\n\\n    // --- Functions ---\\n\\n    /// @notice Multiplies two decimal numbers and use normal rounding rules:\\n    /// - round product up if 19'th mantissa digit >= 5\\n    /// - round product down if 19'th mantissa digit < 5.\\n    /// @param x First number.\\n    /// @param y Second number.\\n    function _decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        decProd = (x * y + Fixed256x18.ONE / 2) / Fixed256x18.ONE;\\n    }\\n\\n    /// @notice Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    ///\\n    /// @dev Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. The exponent is capped to\\n    /// avoid reverting due to overflow.\\n    ///\\n    /// If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    /// negligibly different from just passing the cap, since the decayed base rate will be 0 for 1000 years or > 1000\\n    /// years.\\n    /// @param base The decimal base.\\n    /// @param exponent The exponent.\\n    /// @return The result of the exponentiation.\\n    function _decPow(uint256 base, uint256 exponent) internal pure returns (uint256) {\\n        if (exponent == 0) {\\n            return Fixed256x18.ONE;\\n        }\\n\\n        uint256 y = Fixed256x18.ONE;\\n        uint256 x = base;\\n        uint256 n = Math.min(exponent, _MINUTES_IN_1000_YEARS); // cap to avoid overflow\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 != 0) {\\n                y = _decMul(x, y);\\n            }\\n            x = _decMul(x, x);\\n            n /= 2;\\n        }\\n\\n        return _decMul(x, y);\\n    }\\n\\n    /// @notice Computes the Nominal Individual Collateral Ratio (NICR) for given collateral and debt. If debt is zero,\\n    /// it returns the maximal value for uint256 (represents \\\"infinite\\\" CR).\\n    /// @param collateral Collateral amount.\\n    /// @param debt Debt amount.\\n    /// @return NICR.\\n    function _computeNominalCR(uint256 collateral, uint256 debt) internal pure returns (uint256) {\\n        return debt > 0 ? collateral * _NICR_PRECISION / debt : type(uint256).max;\\n    }\\n\\n    /// @notice Computes the Collateral Ratio for given collateral, debt and price. If debt is zero, it returns the\\n    /// maximal value for uint256 (represents \\\"infinite\\\" CR).\\n    /// @param collateral Collateral amount.\\n    /// @param debt Debt amount.\\n    /// @param price Collateral price.\\n    /// @return Collateral ratio.\\n    function _computeCR(uint256 collateral, uint256 debt, uint256 price) internal pure returns (uint256) {\\n        return debt > 0 ? collateral * price / debt : type(uint256).max;\\n    }\\n}\\n\\ncontract SplitLiquidationCollateral is ISplitLiquidationCollateral {\\n    // --- Types ---\\n\\n    using Fixed256x18 for uint256;\\n\\n    // --- Constants ---\\n\\n    uint256 private constant LOW_TOTAL_COLLATERAL = 3000e18;\\n    uint256 private constant MEDIUM_TOTAL_COLLATERAL = 100_000e18;\\n    uint256 private constant HIGH_TOTAL_COLLATERAL = 1_000_000e18;\\n\\n    uint256 private constant LOW_REDISTRIBUTOR_REWARD_RATE = 300e14;\\n    uint256 private constant MEDIUM_REDISTRIBUTOR_REWARD_RATE = 125e14;\\n    uint256 private constant HIGH_REDISTRIBUTOR_REWARD_RATE = 50e14;\\n\\n    uint256 public constant override LOW_TOTAL_DEBT = 3000e18;\\n\\n    uint256 public constant override MCR = 130 * MathUtils._100_PERCENT / 100; // 130%\\n\\n    // --- Functions ---\\n\\n    function split(\\n        uint256 totalCollateral,\\n        uint256, /* totalDebt */\\n        uint256 price,\\n        bool isRedistribution\\n    )\\n        external\\n        pure\\n        returns (uint256 collateralToSendToProtocol, uint256 collateralToSentToLiquidator)\\n    {\\n        if (isRedistribution) {\\n            uint256 collateralValue = totalCollateral.mulDown(price);\\n            uint256 rewardRate = _calculateRedistributorRewardRate(collateralValue);\\n            collateralToSentToLiquidator = totalCollateral.mulDown(rewardRate);\\n        } else {\\n            collateralToSendToProtocol = 0;\\n            collateralToSentToLiquidator = totalCollateral;\\n        }\\n    }\\n\\n    // Formula from https://docs.raft.fi/how-it-works/returning/redistribution#redistributor-reward\\n    function _calculateRedistributorRewardRate(uint256 collateralValue) internal pure returns (uint256) {\\n        if (collateralValue <= LOW_TOTAL_COLLATERAL) {\\n            return LOW_REDISTRIBUTOR_REWARD_RATE;\\n        }\\n        if (collateralValue <= MEDIUM_TOTAL_COLLATERAL) {\\n            return _calculateRewardRateFormula(\\n                collateralValue,\\n                LOW_TOTAL_COLLATERAL,\\n                MEDIUM_TOTAL_COLLATERAL,\\n                LOW_REDISTRIBUTOR_REWARD_RATE,\\n                MEDIUM_REDISTRIBUTOR_REWARD_RATE\\n            );\\n        }\\n        if (collateralValue <= HIGH_TOTAL_COLLATERAL) {\\n            return _calculateRewardRateFormula(\\n                collateralValue,\\n                MEDIUM_TOTAL_COLLATERAL,\\n                HIGH_TOTAL_COLLATERAL,\\n                MEDIUM_REDISTRIBUTOR_REWARD_RATE,\\n                HIGH_REDISTRIBUTOR_REWARD_RATE\\n            );\\n        }\\n        return HIGH_REDISTRIBUTOR_REWARD_RATE;\\n    }\\n\\n    function _calculateRewardRateFormula(\\n        uint256 amount,\\n        uint256 amountUpperBound,\\n        uint256 amountLowerBound,\\n        uint256 rewardRateUpperBound,\\n        uint256 rewardRateLowerBound\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return rewardRateUpperBound\\n            - (rewardRateUpperBound - rewardRateLowerBound).mulDown(amount - amountUpperBound).divDown(\\n                amountLowerBound - amountUpperBound\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@balancer-labs/=node_modules/@balancer-labs/\",\r\n      \"@balancer-labs/v2-interfaces/contracts/=lib/balancer-v2-monorepo/pkg/interfaces/contracts/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@redstone-finance/=node_modules/@redstone-finance/\",\r\n      \"@smartcontractkit/chainlink/=lib/chainlink/contracts/src/v0.8/\",\r\n      \"@tempusfinance/=node_modules/@tempusfinance/\",\r\n      \"@tempusfinance/tempus-utils/contracts/=lib/tempus-utils/contracts/\",\r\n      \"balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"tempus-utils/=lib/tempus-utils/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"LOW_TOTAL_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRedistribution\",\"type\":\"bool\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralToSendToProtocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralToSentToLiquidator\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SplitLiquidationCollateral", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}