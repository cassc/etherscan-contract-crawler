{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n\r\n// @title Abstract ERC20 token interface\r\ncontract AbstractToken {\r\n\tfunction balanceOf(address owner) public view returns (uint256 balance);\r\n\tfunction transfer(address to, uint256 value) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n\tfunction approve(address spender, uint256 value) public returns (bool success);\r\n\tfunction allowance(address owner, address spender) public view returns (uint256 remaining);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/// @title Owned - Add an owner to the contract.\r\ncontract Owned {\r\n\r\n\taddress public owner = msg.sender;\r\n\taddress public potentialOwner;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyPotentialOwner {\r\n\t\trequire(msg.sender == potentialOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\tevent NewOwner(address old, address current);\r\n\tevent NewPotentialOwner(address old, address potential);\r\n\r\n\tfunction setOwner(address _new)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\temit NewPotentialOwner(owner, _new);\r\n\t\tpotentialOwner = _new;\r\n\t}\r\n\r\n\tfunction confirmOwnership()\r\n\t\tpublic\r\n\t\tonlyPotentialOwner\r\n\t{\r\n\t\temit NewOwner(owner, potentialOwner);\r\n\t\towner = potentialOwner;\r\n\t\tpotentialOwner = address(0);\r\n\t}\r\n}\r\n\r\n\r\n/// @title SafeMath contract - Math operations with safety checks.\r\n/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\nlibrary SafeMath {\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\n/// @title StandardToken - Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract StandardToken is AbstractToken, Owned {\r\n\tusing SafeMath for uint256;\r\n\r\n\t/*\r\n\t *  Data structures\r\n\t */\r\n\tmapping (address => uint256) internal balances;\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\tuint256 public totalSupply;\r\n\r\n\t/*\r\n\t *  Read and write storage functions\r\n\t */\r\n\t/// @dev Transfers sender's tokens to a given address. Returns success.\r\n\t/// @param _to Address of token receiver.\r\n\t/// @param _value Number of tokens to transfer.\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\treturn _transfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\t/// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n\t/// @param _from Address from where tokens are withdrawn.\r\n\t/// @param _to Address to where tokens are sent.\r\n\t/// @param _value Number of tokens to transfer.\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\treturn _transfer(_from, _to, _value);\r\n\t}\r\n\r\n\t/// @dev Returns number of tokens owned by given address.\r\n\t/// @param _owner Address of token owner.\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t/// @dev Sets approved amount of tokens for spender. Returns success.\r\n\t/// @param _spender Address of allowed account.\r\n\t/// @param _value Number of approved tokens.\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t * Read storage functions\r\n\t */\r\n\t/// @dev Returns number of allowed tokens for given address.\r\n\t/// @param _owner Address of token owner.\r\n\t/// @param _spender Address of token spender.\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Private transfer, can only be called by this contract.\r\n\t* @param _from The address of the sender.\r\n\t* @param _to The address of the recipient.\r\n\t* @param _value The amount to send.\r\n\t* @return success True if the transfer was successful, or throws.\r\n\t*/\r\n\tfunction _transfer(address _from, address _to, uint256 _value) private returns (bool success) {\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_to != address(0));\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n/// @title BurnableToken contract - Implements burnable functionality of the ERC-20 token\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract BurnableToken is StandardToken {\r\n\r\n\taddress public burner;\r\n\r\n\tmodifier onlyBurner {\r\n\t\trequire(msg.sender == burner);\r\n\t\t_;\r\n\t}\r\n\r\n\tevent NewBurner(address burner);\r\n\r\n\tfunction setBurner(address _burner)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\tburner = _burner;\r\n\t\temit NewBurner(_burner);\r\n\t}\r\n\r\n\tfunction burn(uint256 amount)\r\n\t\tpublic\r\n\t\tonlyBurner\r\n\t{\r\n\t\trequire(balanceOf(msg.sender) >= amount);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(amount);\r\n\t\ttotalSupply = totalSupply.sub(amount);\r\n\t\temit Transfer(msg.sender, address(0x0000000000000000000000000000000000000000), amount);\r\n\t}\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard ERC20 with additional features.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract Token is BurnableToken {\r\n\r\n\t// Time of the contract creation\r\n\tuint256 public creationTime;\r\n\r\n\tconstructor() public {\r\n\t\t/* solium-disable-next-line security/no-block-members */\r\n\t\tcreationTime = now;\r\n\t}\r\n\r\n\t/// @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n\tfunction transferERC20Token(AbstractToken _token, address _to, uint256 _value)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\treturns (bool success)\r\n\t{\r\n\t\trequire(_token.balanceOf(address(this)) >= _value);\r\n\t\tuint256 receiverBalance = _token.balanceOf(_to);\r\n\t\trequire(_token.transfer(_to, _value));\r\n\r\n\t\tuint256 receiverNewBalance = _token.balanceOf(_to);\r\n\t\tassert(receiverNewBalance == receiverBalance.add(_value));\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev Increases approved amount of tokens for spender. Returns success.\r\n\tfunction increaseApproval(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev Decreases approved amount of tokens for spender. Returns success.\r\n\tfunction decreaseApproval(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_value > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_value);\r\n\t\t}\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/// @title Token contract - Implements Standard ERC20 Token for Inmediate project.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract InmediateToken is Token {\r\n\r\n\t/// TOKEN META DATA\r\n\tstring constant public name = 'Inmediate';\r\n\tstring constant public symbol = 'DIT';\r\n\tuint8  constant public decimals = 8;\r\n\r\n\r\n\t/// ALLOCATIONS\r\n\t// To calculate vesting periods we assume that 1 month is always equal to 30 days \r\n\r\n\r\n\t/*** Initial Investors' tokens ***/\r\n\r\n\t// 400,000,000 (40%) tokens are distributed among initial investors\r\n\t// These tokens will be distributed without vesting\r\n\r\n\taddress public investorsAllocation = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\r\n\tuint256 public investorsTotal = 400000000e8;\r\n\r\n\r\n\t/*** Tokens reserved for the Inmediate team ***/\r\n\r\n\t// 100,000,000 (10%) tokens will be eventually available for the team\r\n\t// These tokens will be distributed querterly after a 6 months cliff\r\n\t// 20,000,000 will be unlocked immediately after 6 months\r\n\t// 10,000,000 tokens will be unlocked quarterly within 2 years after the cliff\r\n\r\n\taddress public teamAllocation  = address(0x1111111111111111111111111111111111111111);\r\n\tuint256 public teamTotal = 100000000e8;\r\n\tuint256 public teamPeriodAmount = 10000000e8;\r\n\tuint256 public teamCliff = 6 * 30 days;\r\n\tuint256 public teamUnlockedAfterCliff = 20000000e8;\r\n\tuint256 public teamPeriodLength = 3 * 30 days;\r\n\tuint8   public teamPeriodsNumber = 8;\r\n\r\n\t/*** Tokens reserved for Advisors ***/\r\n\r\n\t// 50,000,000 (5%) tokens will be eventually available for advisors\r\n\t// These tokens will be distributed querterly after a 6 months cliff\r\n\t// 10,000,000 will be unlocked immediately after 6 months\r\n\t// 10,000,000 tokens will be unlocked quarterly within a year after the cliff\r\n\r\n\taddress public advisorsAllocation  = address(0x2222222222222222222222222222222222222222);\r\n\tuint256 public advisorsTotal = 50000000e8;\r\n\tuint256 public advisorsPeriodAmount = 10000000e8;\r\n\tuint256 public advisorsCliff = 6 * 30 days;\r\n\tuint256 public advisorsUnlockedAfterCliff = 10000000e8;\r\n\tuint256 public advisorsPeriodLength = 3 * 30 days;\r\n\tuint8   public advisorsPeriodsNumber = 4;\r\n\r\n\r\n\t/*** Tokens reserved for pre- and post- ICO Bounty ***/\r\n\r\n\t// 50,000,000 (5%) tokens will be spent on various bounty campaigns\r\n\t// These tokens are available immediately, without vesting\r\n\r\n\r\n\taddress public bountyAllocation  = address(0x3333333333333333333333333333333333333333);\r\n\tuint256 public bountyTotal = 50000000e8;\r\n\r\n\r\n\t/*** Liquidity pool ***/\r\n\r\n\t// 150,000,000 (15%) tokens will be used to manage token volatility\r\n\t// These tokens are available immediately, without vesting\r\n\r\n\r\n\taddress public liquidityPoolAllocation  = address(0x4444444444444444444444444444444444444444);\r\n\tuint256 public liquidityPoolTotal = 150000000e8;\r\n\r\n\r\n\t/*** Tokens reserved for Contributors ***/\r\n\r\n\t// 250,000,000 (25%) tokens will be used to reward parties that contribute to the ecosystem\r\n\t// These tokens are available immediately, without vesting\r\n\r\n\r\n\taddress public contributorsAllocation  = address(0x5555555555555555555555555555555555555555);\r\n\tuint256 public contributorsTotal = 250000000e8;\r\n\r\n\r\n\t/// CONSTRUCTOR\r\n\r\n\tconstructor() public {\r\n\t\t//  Overall, 1,000,000,000 tokens exist\r\n\t\ttotalSupply = 1000000000e8;\r\n\r\n\t\tbalances[investorsAllocation] = investorsTotal;\r\n\t\tbalances[teamAllocation] = teamTotal;\r\n\t\tbalances[advisorsAllocation] = advisorsTotal;\r\n\t\tbalances[bountyAllocation] = bountyTotal;\r\n\t\tbalances[liquidityPoolAllocation] = liquidityPoolTotal;\r\n\t\tbalances[contributorsAllocation] = contributorsTotal;\r\n\t\t\r\n\r\n\t\t// Unlock some tokens without vesting\r\n\t\tallowed[investorsAllocation][msg.sender] = investorsTotal;\r\n\t\tallowed[bountyAllocation][msg.sender] = bountyTotal;\r\n\t\tallowed[liquidityPoolAllocation][msg.sender] = liquidityPoolTotal;\r\n\t\tallowed[contributorsAllocation][msg.sender] = contributorsTotal;\r\n\t}\r\n\r\n\t/// DISTRIBUTION\r\n\r\n\tfunction distributeInvestorsTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(transferFrom(investorsAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\t/// VESTED ALLOCATIONS\r\n\r\n\tfunction withdrawTeamTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner \r\n\t{\r\n\t\tallowed[teamAllocation][msg.sender] = allowance(teamAllocation, msg.sender);\r\n\t\trequire(transferFrom(teamAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\tfunction withdrawAdvisorsTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner \r\n\t{\r\n\t\tallowed[advisorsAllocation][msg.sender] = allowance(advisorsAllocation, msg.sender);\r\n\t\trequire(transferFrom(advisorsAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\r\n\t/// UNVESTED ALLOCATIONS\r\n\r\n\tfunction withdrawBountyTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(transferFrom(bountyAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\tfunction withdrawLiquidityPoolTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(transferFrom(liquidityPoolAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\tfunction withdrawContributorsTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(transferFrom(contributorsAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\t\r\n\t/// OVERRIDEN FUNCTIONS\r\n\r\n\t/// @dev Overrides StandardToken.sol function\r\n\tfunction allowance(address _owner, address _spender)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 remaining)\r\n\t{   \r\n\t\tif (_spender != owner) {\r\n\t\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\r\n\t\tuint256 unlockedTokens;\r\n\t\tuint256 spentTokens;\r\n\r\n\t\tif (_owner == teamAllocation) {\r\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\r\n\t\t\t\tteamCliff, teamUnlockedAfterCliff,\r\n\t\t\t\tteamPeriodLength, teamPeriodAmount, teamPeriodsNumber\r\n\t\t\t);\r\n\t\t\tspentTokens = balanceOf(teamAllocation) < teamTotal ? teamTotal.sub(balanceOf(teamAllocation)) : 0;\r\n\t\t} else if (_owner == advisorsAllocation) {\r\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\r\n\t\t\t\tadvisorsCliff, advisorsUnlockedAfterCliff,\r\n\t\t\t\tadvisorsPeriodLength, advisorsPeriodAmount, advisorsPeriodsNumber\r\n\t\t\t);\r\n\t\t\tspentTokens = balanceOf(advisorsAllocation) < advisorsTotal ? advisorsTotal.sub(balanceOf(advisorsAllocation)) : 0;\r\n\t\t} else {\r\n\t\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\r\n\t\treturn unlockedTokens.sub(spentTokens);\r\n\t}\r\n\r\n\t/// @dev Overrides Owned.sol function\r\n\tfunction confirmOwnership()\r\n\t\tpublic\r\n\t\tonlyPotentialOwner\r\n\t{   \r\n\t\t// Forbids the old owner to distribute investors' tokens\r\n\t\tallowed[investorsAllocation][owner] = 0;\r\n\r\n\t\t// Allows the new owner to distribute investors' tokens\r\n\t\tallowed[investorsAllocation][msg.sender] = balanceOf(investorsAllocation);\r\n\r\n\t\t// Forbidsthe old owner to withdraw any tokens from the reserves\r\n\t\tallowed[teamAllocation][owner] = 0;\r\n\t\tallowed[advisorsAllocation][owner] = 0;\r\n\t\tallowed[bountyAllocation][owner] = 0;\r\n\t\tallowed[liquidityPoolAllocation][owner] = 0;\r\n\t\tallowed[contributorsAllocation][owner] = 0;\r\n\r\n\t\t// Allows the new owner to withdraw tokens from the unvested allocations\r\n\t\tallowed[bountyAllocation][msg.sender] = balanceOf(bountyAllocation);\r\n\t\tallowed[liquidityPoolAllocation][msg.sender] = balanceOf(liquidityPoolAllocation);\r\n\t\tallowed[contributorsAllocation][msg.sender] = balanceOf(contributorsAllocation);\r\n\t\t\r\n\t\tsuper.confirmOwnership();\r\n\t}\r\n\r\n\t/// PRIVATE FUNCTIONS\r\n\r\n\tfunction _calculateUnlockedTokens(\r\n\t\tuint256 _cliff,\r\n\t\tuint256 _unlockedAfterCliff,\r\n\t\tuint256 _periodLength,\r\n\t\tuint256 _periodAmount,\r\n\t\tuint8 _periodsNumber\r\n\t)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256) \r\n\t{\r\n\t\t/* solium-disable-next-line security/no-block-members */\r\n\t\tif (now < creationTime.add(_cliff)) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t/* solium-disable-next-line security/no-block-members */\r\n\t\tuint256 periods = now.sub(creationTime.add(_cliff)).div(_periodLength);\r\n\t\tperiods = periods > _periodsNumber ? _periodsNumber : periods;\r\n\t\treturn _unlockedAfterCliff.add(periods.mul(_periodAmount));\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"teamUnlockedAfterCliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamCliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityPoolTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawAdvisorsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"distributeInvestorsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsCliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPeriodAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidityPoolTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawContributorsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burner\",\"type\":\"address\"}],\"name\":\"setBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPeriodsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsPeriodLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPeriodLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsPeriodAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsUnlockedAfterCliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityPoolAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsPeriodsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"NewBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "InmediateToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0e4282d0745e0a65f83bffcadea870d4a35748d04f1e819b5d38f009cb610e7b"}