{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/custom/BitRot/BitRotGenerative.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IBitRotRenderer.sol\\\";\\nimport \\\"../../onchain/ERC721GenerativeOnchain.sol\\\";\\n\\n/**\\n * @title BitRotGenerative (ERC721)\\n */\\ncontract BitRotGenerative is ERC721GenerativeOnchain {\\n    /**\\n     * @notice Throw when mint details are queried for a token that hasn't been minted\\n     */\\n    error InvalidTokenId();\\n\\n    /**\\n     * @notice Data partially used to seed outputs\\n     */\\n    struct SeedDetails {\\n        bytes32 previousBlockHash;\\n        uint256 blockTimestamp;\\n    }\\n\\n    /**\\n     * @notice BitRotRenderer address\\n     */\\n    IBitRotRenderer public renderer;\\n\\n    /**\\n     * @notice Store the block hash for every minted token batch\\n     */\\n    mapping(uint256 => SeedDetails) private _startTokenIdToSeedDetails;\\n\\n    /**\\n     * @notice Store the first token id of each minted batch\\n     */\\n    uint256[] private _startTokenIds;\\n\\n    /**\\n     * @notice Store the image previews base uri\\n     */\\n    string private _previewsBaseUri;\\n\\n    /**\\n     * @notice Emit when BitRotRenderer is updated\\n     */\\n    event RendererUpdated(address indexed newRenderer);\\n\\n    /* solhint-disable not-rely-on-block-hash */\\n    /**\\n     * @notice See {IERC721GeneralMint-mintOneToOneRecipient}\\n     * @dev Update BitRot mint details\\n     */\\n    function mintOneToOneRecipient(address recipient) external override onlyMinter nonReentrant returns (uint256) {\\n        if (_mintFrozen == 1) {\\n            _revert(MintFrozen.selector);\\n        }\\n\\n        uint256 tempSupply = _nextTokenId();\\n        _requireLimitSupply(tempSupply);\\n\\n        _mint(recipient, 1);\\n\\n        _startTokenIds.push(tempSupply);\\n        _startTokenIdToSeedDetails[tempSupply] = SeedDetails(blockhash(block.number - 1), block.timestamp);\\n\\n        return tempSupply;\\n    }\\n\\n    /* solhint-enable not-rely-on-block-hash */\\n\\n    /**\\n     * @notice See {IERC721GeneralMint-mintAmountToOneRecipient}\\n     * @dev Update BitRot mint details\\n     */\\n    function mintAmountToOneRecipient(address recipient, uint256 amount) external override onlyMinter nonReentrant {\\n        if (_mintFrozen == 1) {\\n            _revert(MintFrozen.selector);\\n        }\\n        uint256 tempSupply = _nextTokenId() - 1; // cache\\n\\n        _mint(recipient, amount);\\n\\n        _requireLimitSupply(tempSupply + amount);\\n\\n        _startTokenIds.push(tempSupply + 1);\\n        _startTokenIdToSeedDetails[tempSupply + 1] = SeedDetails(blockhash(block.number - 1), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Update BitRot renderer\\n     */\\n    function updateRenderer(address newRenderer) external onlyOwner {\\n        renderer = IBitRotRenderer(newRenderer);\\n\\n        emit RendererUpdated(newRenderer);\\n    }\\n\\n    /**\\n     * @notice Update previews base uri\\n     */\\n    function updatePreviewsBaseUri(string memory newPreviewsBaseUri) external onlyOwner {\\n        _previewsBaseUri = newPreviewsBaseUri;\\n    }\\n\\n    /**\\n     * @notice Override tokenURI to use BitRotRenderer\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        SeedDetails memory seedDetails = getSeedDetails(tokenId);\\n\\n        return\\n            renderer.tokenURI(\\n                seedDetails.previousBlockHash,\\n                tokenId,\\n                seedDetails.blockTimestamp,\\n                address(this),\\n                _previewsBaseUri\\n            );\\n    }\\n\\n    function getSeedDetails(uint256 tokenId) public view returns (SeedDetails memory) {\\n        uint256 nextTokenId = _nextTokenId();\\n        uint256[] memory tempStartTokenIds = _startTokenIds;\\n        uint256 numBatches = tempStartTokenIds.length;\\n\\n        if (numBatches == 0) {\\n            _revert(InvalidTokenId.selector);\\n        }\\n\\n        uint256 previousStartTokenId = tempStartTokenIds[0];\\n        if (numBatches == 1) {\\n            if (tokenId >= previousStartTokenId && tokenId < nextTokenId) {\\n                return _startTokenIdToSeedDetails[previousStartTokenId];\\n            } else {\\n                _revert(InvalidTokenId.selector);\\n            }\\n        }\\n\\n        for (uint256 i = 1; i < numBatches; i++) {\\n            if (tokenId >= previousStartTokenId && tokenId < tempStartTokenIds[i]) {\\n                return _startTokenIdToSeedDetails[previousStartTokenId];\\n            }\\n\\n            previousStartTokenId = tempStartTokenIds[i];\\n        }\\n\\n        if (tokenId >= previousStartTokenId && tokenId < nextTokenId) {\\n            return _startTokenIdToSeedDetails[previousStartTokenId];\\n        } else {\\n            _revert(InvalidTokenId.selector);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/custom/BitRot/interfaces/IBitRotRenderer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @notice BitRotRenderer interface as it pertains to BitRotGenerative\\n */\\ninterface IBitRotRenderer {\\n    function tokenURI(\\n        bytes32 blockHash,\\n        uint256 tokenId,\\n        uint256 timestamp,\\n        address storageContract,\\n        string memory previewsBaseUri\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/erc721a/ERC721AStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/* solhint-disable */\\n\\nlibrary ERC721AStorage {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    struct Layout {\\n        // =============================================================\\n        //                            STORAGE\\n        // =============================================================\\n\\n        // The next token ID to be minted.\\n        uint256 _currentIndex;\\n        // The number of tokens burned.\\n        uint256 _burnCounter;\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to ownership details\\n        // An empty struct value does not necessarily mean the token is unowned.\\n        // See {_packedOwnershipOf} implementation for details.\\n        //\\n        // Bits Layout:\\n        // - [0..159]   `addr`\\n        // - [160..223] `startTimestamp`\\n        // - [224]      `burned`\\n        // - [225]      `nextInitialized`\\n        // - [232..255] `extraData`\\n        mapping(uint256 => uint256) _packedOwnerships;\\n        // Mapping owner address to address data.\\n        //\\n        // Bits Layout:\\n        // - [0..63]    `balance`\\n        // - [64..127]  `numberMinted`\\n        // - [128..191] `numberBurned`\\n        // - [192..255] `aux`\\n        mapping(address => uint256) _packedAddressData;\\n        // Mapping from token ID to approved address.\\n        mapping(uint256 => ERC721AStorage.TokenApprovalRef) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"ERC721A.contracts.storage.ERC721A\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/erc721a/ERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC721AUpgradeable.sol\\\";\\nimport { ERC721AStorage } from \\\"./ERC721AStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721ReceiverUpgradeable {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n * @author Chiru Labs, modified by ishan@highlight.xyz\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, IERC721AUpgradeable, ContextUpgradeable {\\n    using ERC721AStorage for ERC721AStorage.Layout;\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721AStorage.layout()._name = name_;\\n        ERC721AStorage.layout()._symbol = symbol_;\\n        ERC721AStorage.layout()._currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return ERC721AStorage.layout()._currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return ERC721AStorage.layout()._currentIndex - ERC721AStorage.layout()._burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return ERC721AStorage.layout()._currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return ERC721AStorage.layout()._burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) _revert(BalanceQueryForZeroAddress.selector);\\n        return ERC721AStorage.layout()._packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return\\n            (ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return\\n            (ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = ERC721AStorage.layout()._packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        ERC721AStorage.layout()._packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) _revert(URIQueryForNonexistentToken.selector);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, \\\"/\\\", _toString(tokenId))) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Added by Highlight to facilitate updating of name and symbol\\n     */\\n    function _setContractMetadata(string calldata newName, string calldata newSymbol) internal {\\n        ERC721AStorage.layout()._name = newName;\\n        ERC721AStorage.layout()._symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(ERC721AStorage.layout()._packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Returns whether the ownership slot at `index` is initialized.\\n     * An uninitialized slot does not necessarily mean that the slot has no owner.\\n     */\\n    function _ownershipIsInitialized(uint256 index) internal view virtual returns (bool) {\\n        return ERC721AStorage.layout()._packedOwnerships[index] != 0;\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (ERC721AStorage.layout()._packedOwnerships[index] == 0) {\\n            ERC721AStorage.layout()._packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256 packed) {\\n        if (_startTokenId() <= tokenId) {\\n            packed = ERC721AStorage.layout()._packedOwnerships[tokenId];\\n            // If the data at the starting slot does not exist, start the scan.\\n            if (packed == 0) {\\n                if (tokenId >= ERC721AStorage.layout()._currentIndex) _revert(OwnerQueryForNonexistentToken.selector);\\n                // Invariant:\\n                // There will always be an initialized ownership slot\\n                // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                // before an unintialized ownership slot\\n                // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                // Hence, `tokenId` will not underflow.\\n                //\\n                // We can directly compare the packed value.\\n                // If the address is zero, packed will be zero.\\n                for (;;) {\\n                    unchecked {\\n                        packed = ERC721AStorage.layout()._packedOwnerships[--tokenId];\\n                    }\\n                    if (packed == 0) continue;\\n                    if (packed & _BITMASK_BURNED == 0) return packed;\\n                    // Otherwise, the token is burned, and we must revert.\\n                    // This handles the case of batch burned tokens, where only the burned bit\\n                    // of the starting slot is set, and remaining slots are left uninitialized.\\n                    _revert(OwnerQueryForNonexistentToken.selector);\\n                }\\n            }\\n            // Otherwise, the data exists and we can skip the scan.\\n            // This is possible because we have already achieved the target condition.\\n            // This saves 2143 gas on transfers of initialized tokens.\\n            // If the token is not burned, return `packed`. Otherwise, revert.\\n            if (packed & _BITMASK_BURNED == 0) return packed;\\n        }\\n        _revert(OwnerQueryForNonexistentToken.selector);\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        _approve(to, tokenId, true);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) _revert(ApprovalQueryForNonexistentToken.selector);\\n\\n        return ERC721AStorage.layout()._tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        ERC721AStorage.layout()._operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return ERC721AStorage.layout()._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool result) {\\n        if (_startTokenId() <= tokenId) {\\n            if (tokenId < ERC721AStorage.layout()._currentIndex) {\\n                uint256 packed;\\n                while ((packed = ERC721AStorage.layout()._packedOwnerships[tokenId]) == 0) --tokenId;\\n                result = packed & _BITMASK_BURNED == 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (isApprovedForAll(owner, spender) || _isSenderApprovedOrOwner(getApproved(tokenId), owner, spender));\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(\\n        uint256 tokenId\\n    ) private view returns (uint256 approvedAddressSlot, address approvedAddress) {\\n        ERC721AStorage.TokenApprovalRef storage tokenApproval = ERC721AStorage.layout()._tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n        from = address(uint160(uint256(uint160(from)) & _BITMASK_ADDRESS));\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) _revert(TransferFromIncorrectOwner.selector);\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --ERC721AStorage.layout()._packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++ERC721AStorage.layout()._packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (ERC721AStorage.layout()._packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != ERC721AStorage.layout()._currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        ERC721AStorage.layout()._packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n        uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\\n        assembly {\\n            // Emit the `Transfer` event.\\n            log4(\\n                0, // Start of data (0, since no data).\\n                0, // End of data (0, since no data).\\n                _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                from, // `from`.\\n                toMasked, // `to`.\\n                tokenId // `tokenId`.\\n            )\\n        }\\n        if (toMasked == 0) _revert(TransferToZeroAddress.selector);\\n\\n        _afterTokenTransfers(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try\\n            ERC721A__IERC721ReceiverUpgradeable(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data)\\n        returns (bytes4 retval) {\\n            return retval == ERC721A__IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\\n            }\\n            assembly {\\n                revert(add(32, reason), mload(reason))\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = ERC721AStorage.layout()._currentIndex;\\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            ERC721AStorage.layout()._packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            ERC721AStorage.layout()._packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\\n\\n            if (toMasked == 0) _revert(MintToZeroAddress.selector);\\n\\n            uint256 end = startTokenId + quantity;\\n            uint256 tokenId = startTokenId;\\n\\n            do {\\n                assembly {\\n                    // Emit the `Transfer` event.\\n                    log4(\\n                        0, // Start of data (0, since no data).\\n                        0, // End of data (0, since no data).\\n                        _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                        0, // `address(0)`.\\n                        toMasked, // `to`.\\n                        tokenId // `tokenId`.\\n                    )\\n                }\\n                // The `!=` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n            } while (++tokenId != end);\\n\\n            ERC721AStorage.layout()._currentIndex = end;\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(address to, uint256 quantity, bytes memory _data) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = ERC721AStorage.layout()._currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        _revert(TransferToNonERC721ReceiverImplementer.selector);\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (ERC721AStorage.layout()._currentIndex != end) _revert(bytes4(0));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    // =============================================================\\n    //                       APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_approve(to, tokenId, false)`.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _approve(to, tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId, bool approvalCheck) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        if (approvalCheck && _msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                _revert(ApprovalCallerNotOwnerNorApproved.selector);\\n            }\\n\\n        ERC721AStorage.layout()._tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\\n        }\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            ERC721AStorage.layout()._packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (ERC721AStorage.layout()._packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != ERC721AStorage.layout()._currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        ERC721AStorage.layout()._packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            ERC721AStorage.layout()._burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = ERC721AStorage.layout()._packedOwnerships[index];\\n        if (packed == 0) _revert(OwnershipNotInitializedForExtraData.selector);\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        ERC721AStorage.layout()._packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(address from, address to, uint24 previousExtraData) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(address from, address to, uint256 prevOwnershipPacked) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n\\n    /**\\n     * @dev For more efficient reverts.\\n     */\\n    function _revert(bytes4 errorSelector) internal pure virtual {\\n        assembly {\\n            mstore(0x00, errorSelector)\\n            revert(0x00, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/erc721a/ERC721AURIStorageUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC721AUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @title Appending URI storage utilities onto template ERC721A contract\\n * @author highlight.xyz, OpenZeppelin\\n * @dev ERC721 token with storage based token URI management. OpenZeppelin template edited by Highlight\\n */\\n/* solhint-disable */\\nabstract contract ERC721AURIStorageUpgradeable is Initializable, ERC721AUpgradeable {\\n    /**\\n     * @notice Throw when token doesn't exist\\n     */\\n    error TokenDoesNotExist();\\n\\n    function __ERC721URIStorage_init() internal onlyInitializing {}\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {}\\n\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) internal _tokenURIs;\\n\\n    /**\\n     * @dev Hashed rotation key data\\n     */\\n    bytes internal _hashedRotationKeyData;\\n\\n    /**\\n     * @dev Hashed base uri data\\n     */\\n    bytes internal _hashedBaseURIData;\\n\\n    /**\\n     * @dev Rotation key\\n     */\\n    uint256 internal _rotationKey;\\n\\n    /**\\n     * @dev Contract baseURI\\n     */\\n    string public baseURI;\\n\\n    /**\\n     * @notice Emitted when base uri is set\\n     * @param oldBaseUri Old base uri\\n     * @param newBaseURI New base uri\\n     */\\n    event BaseURISet(string oldBaseUri, string newBaseURI);\\n\\n    /**\\n     * @dev Set contract baseURI\\n     */\\n    function _setBaseURI(string memory newBaseURI) internal {\\n        emit BaseURISet(baseURI, newBaseURI);\\n\\n        baseURI = newBaseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            _revert(TokenDoesNotExist.selector);\\n        }\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no token URI, return the base URI.\\n        if (bytes(_tokenURI).length == 0) {\\n            return super.tokenURI(tokenId);\\n        }\\n\\n        return _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/erc721a/IERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity 0.8.10;\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/ERC721Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../royaltyManager/interfaces/IRoyaltyManager.sol\\\";\\nimport \\\"../tokenManager/interfaces/ITokenManager.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../utils/ERC2981/IERC2981Upgradeable.sol\\\";\\nimport \\\"../utils/ERC165/ERC165CheckerUpgradeable.sol\\\";\\nimport \\\"../metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"../observability/IObservability.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title Base ERC721\\n * @author highlight.xyz\\n * @notice Core piece of Highlight NFT contracts (v2)\\n */\\nabstract contract ERC721Base is\\n    OwnableUpgradeable,\\n    IERC2981Upgradeable,\\n    ERC2771ContextUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /**\\n     * @notice Throw when token or royalty manager is invalid\\n     */\\n    error InvalidManager();\\n\\n    /**\\n     * @notice Throw when token or royalty manager does not exist\\n     */\\n    error ManagerDoesNotExist();\\n\\n    /**\\n     * @notice Throw when sender is unauthorized to perform action\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * @notice Throw when sender is not a minter\\n     */\\n    error NotMinter();\\n\\n    /**\\n     * @notice Throw when token manager or royalty manager swap is blocked\\n     */\\n    error ManagerSwapBlocked();\\n\\n    /**\\n     * @notice Throw when token manager or royalty manager remove is blocked\\n     */\\n    error ManagerRemoveBlocked();\\n\\n    /**\\n     * @notice Throw when setting default or granular royalty is blocked\\n     */\\n    error RoyaltySetBlocked();\\n\\n    /**\\n     * @notice Throw when royalty BPS is invalid\\n     */\\n    error RoyaltyBPSInvalid();\\n\\n    /**\\n     * @notice Throw when minter registration is invalid\\n     */\\n    error MinterRegistrationInvalid();\\n\\n    /**\\n     * @notice Set of minters allowed to mint on contract\\n     */\\n    EnumerableSet.AddressSet internal _minters;\\n\\n    /**\\n     * @notice Global token/edition manager default\\n     */\\n    address public defaultManager;\\n\\n    /**\\n     * @notice Token/edition managers per token grouping.\\n     *      Edition ID if implemented by Editions contract, and token ID if implemented by General contract.\\n     */\\n    mapping(uint256 => address) internal _managers;\\n\\n    /**\\n     * @notice Default royalty for entire contract\\n     */\\n    IRoyaltyManager.Royalty internal _defaultRoyalty;\\n\\n    /**\\n     * @notice Royalty per token grouping.\\n     *      Edition ID if implemented by Editions contract, and token ID if implemented by General contract.\\n     */\\n    mapping(uint256 => IRoyaltyManager.Royalty) internal _royalties;\\n\\n    /**\\n     * @notice Royalty manager - optional contract that defines the conditions around setting royalties\\n     */\\n    address public royaltyManager;\\n\\n    /**\\n     * @notice Freezes minting on smart contract forever\\n     */\\n    uint8 internal _mintFrozen;\\n\\n    /**\\n     * @notice Observability contract\\n     */\\n    IObservability public observability;\\n\\n    /**\\n     * @notice Emitted when minter is registered or unregistered\\n     * @param minter Minter that was changed\\n     * @param registered True if the minter was registered, false if unregistered\\n     */\\n    event MinterRegistrationChanged(address indexed minter, bool indexed registered);\\n\\n    /**\\n     * @notice Emitted when token managers are set for token/edition ids\\n     * @param _ids Edition / token ids\\n     * @param _tokenManagers Token managers to set for tokens / editions\\n     */\\n    event GranularTokenManagersSet(uint256[] _ids, address[] _tokenManagers);\\n\\n    /**\\n     * @notice Emitted when token managers are removed for token/edition ids\\n     * @param _ids Edition / token ids to remove token managers for\\n     */\\n    event GranularTokenManagersRemoved(uint256[] _ids);\\n\\n    /**\\n     * @notice Emitted when default token manager changed\\n     * @param newDefaultTokenManager New default token manager. Zero address if old one was removed\\n     */\\n    event DefaultTokenManagerChanged(address indexed newDefaultTokenManager);\\n\\n    /**\\n     * @notice Emitted when default royalty is set\\n     * @param recipientAddress Royalty recipient\\n     * @param royaltyPercentageBPS Percentage of sale (in basis points) owed to royalty recipient\\n     */\\n    event DefaultRoyaltySet(address indexed recipientAddress, uint16 indexed royaltyPercentageBPS);\\n\\n    /**\\n     * @notice Emitted when royalties are set for edition / token ids\\n     * @param ids Token / edition ids\\n     * @param _newRoyalties New royalties for each token / edition\\n     */\\n    event GranularRoyaltiesSet(uint256[] ids, IRoyaltyManager.Royalty[] _newRoyalties);\\n\\n    /**\\n     * @notice Emitted when royalty manager is updated\\n     * @param newRoyaltyManager New royalty manager. Zero address if old one was removed\\n     */\\n    event RoyaltyManagerChanged(address indexed newRoyaltyManager);\\n\\n    /**\\n     * @notice Emitted when mints are frozen permanently\\n     */\\n    event MintsFrozen();\\n\\n    /**\\n     * @notice Restricts calls to minters\\n     */\\n    modifier onlyMinter() {\\n        if (!_minters.contains(_msgSender())) {\\n            _revert(NotMinter.selector);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Restricts calls if input royalty bps is over 10000\\n     */\\n    modifier royaltyValid(uint16 _royaltyBPS) {\\n        if (!_royaltyBPSValid(_royaltyBPS)) {\\n            _revert(RoyaltyBPSInvalid.selector);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Registers a minter\\n     * @param minter New minter\\n     */\\n    function registerMinter(address minter) external onlyOwner {\\n        if (!_minters.add(minter)) {\\n            _revert(MinterRegistrationInvalid.selector);\\n        }\\n\\n        emit MinterRegistrationChanged(minter, true);\\n        observability.emitMinterRegistrationChanged(minter, true);\\n    }\\n\\n    /**\\n     * @notice Unregisters a minter\\n     * @param minter Minter to unregister\\n     */\\n    function unregisterMinter(address minter) external onlyOwner {\\n        if (!_minters.remove(minter)) {\\n            _revert(MinterRegistrationInvalid.selector);\\n        }\\n\\n        emit MinterRegistrationChanged(minter, false);\\n        observability.emitMinterRegistrationChanged(minter, false);\\n    }\\n\\n    /**\\n     * @notice Sets granular token managers if current token manager(s) allow it\\n     * @param _ids Edition / token ids\\n     * @param _tokenManagers Token managers to set for tokens / editions\\n     */\\n    function setGranularTokenManagers(\\n        uint256[] calldata _ids,\\n        address[] calldata _tokenManagers\\n    ) external nonReentrant {\\n        address msgSender = _msgSender();\\n        address tempOwner = owner();\\n\\n        uint256 idsLength = _ids.length;\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            if (!_isValidTokenManager(_tokenManagers[i])) {\\n                _revert(InvalidManager.selector);\\n            }\\n            address currentTokenManager = tokenManager(_ids[i]);\\n            if (currentTokenManager == address(0)) {\\n                if (msgSender != tempOwner) {\\n                    _revert(Unauthorized.selector);\\n                }\\n            } else {\\n                if (!ITokenManager(currentTokenManager).canSwap(msgSender, _ids[i], _managers[i])) {\\n                    _revert(ManagerSwapBlocked.selector);\\n                }\\n            }\\n\\n            _managers[_ids[i]] = _tokenManagers[i];\\n        }\\n\\n        emit GranularTokenManagersSet(_ids, _tokenManagers);\\n        observability.emitGranularTokenManagersSet(_ids, _tokenManagers);\\n    }\\n\\n    /**\\n     * @notice Remove granular token managers\\n     * @param _ids Edition / token ids to remove token managers for\\n     */\\n    function removeGranularTokenManagers(uint256[] calldata _ids) external nonReentrant {\\n        address msgSender = _msgSender();\\n\\n        uint256 idsLength = _ids.length;\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            address currentTokenManager = _managers[_ids[i]];\\n            if (currentTokenManager == address(0)) {\\n                _revert(ManagerDoesNotExist.selector);\\n            }\\n            if (!ITokenManager(currentTokenManager).canRemoveItself(msgSender, _ids[i])) {\\n                _revert(ManagerRemoveBlocked.selector);\\n            }\\n\\n            _managers[_ids[i]] = address(0);\\n        }\\n\\n        emit GranularTokenManagersRemoved(_ids);\\n        observability.emitGranularTokenManagersRemoved(_ids);\\n    }\\n\\n    /**\\n     * @notice Set default token manager if current token manager allows it\\n     * @param _defaultTokenManager New default token manager\\n     */\\n    function setDefaultTokenManager(address _defaultTokenManager) external nonReentrant {\\n        if (!_isValidTokenManager(_defaultTokenManager)) {\\n            _revert(InvalidManager.selector);\\n        }\\n        address msgSender = _msgSender();\\n\\n        address currentTokenManager = defaultManager;\\n        if (currentTokenManager == address(0)) {\\n            if (msgSender != owner()) {\\n                _revert(Unauthorized.selector);\\n            }\\n        } else {\\n            if (!ITokenManager(currentTokenManager).canSwap(msgSender, 0, _defaultTokenManager)) {\\n                _revert(ManagerSwapBlocked.selector);\\n            }\\n        }\\n\\n        defaultManager = _defaultTokenManager;\\n\\n        emit DefaultTokenManagerChanged(_defaultTokenManager);\\n        observability.emitDefaultTokenManagerChanged(_defaultTokenManager);\\n    }\\n\\n    /**\\n     * @notice Removes default token manager if current token manager allows it\\n     */\\n    function removeDefaultTokenManager() external nonReentrant {\\n        address msgSender = _msgSender();\\n\\n        address currentTokenManager = defaultManager;\\n        if (currentTokenManager == address(0)) {\\n            _revert(ManagerDoesNotExist.selector);\\n        }\\n        if (!ITokenManager(currentTokenManager).canRemoveItself(msgSender, 0)) {\\n            _revert(ManagerRemoveBlocked.selector);\\n        }\\n\\n        defaultManager = address(0);\\n\\n        emit DefaultTokenManagerChanged(address(0));\\n        observability.emitDefaultTokenManagerChanged(address(0));\\n    }\\n\\n    /**\\n     * @notice Sets default royalty if royalty manager allows it\\n     * @param _royalty New default royalty\\n     */\\n    function setDefaultRoyalty(\\n        IRoyaltyManager.Royalty calldata _royalty\\n    ) external nonReentrant royaltyValid(_royalty.royaltyPercentageBPS) {\\n        address msgSender = _msgSender();\\n\\n        address _royaltyManager = royaltyManager;\\n        if (_royaltyManager == address(0)) {\\n            if (msgSender != owner()) {\\n                _revert(Unauthorized.selector);\\n            }\\n        } else {\\n            if (!IRoyaltyManager(_royaltyManager).canSetDefaultRoyalty(_royalty, msgSender)) {\\n                _revert(RoyaltySetBlocked.selector);\\n            }\\n        }\\n\\n        _defaultRoyalty = _royalty;\\n\\n        emit DefaultRoyaltySet(_royalty.recipientAddress, _royalty.royaltyPercentageBPS);\\n        observability.emitDefaultRoyaltySet(_royalty.recipientAddress, _royalty.royaltyPercentageBPS);\\n    }\\n\\n    /**\\n     * @notice Sets granular royalties (per token-grouping) if royalty manager allows it\\n     * @param ids Token / edition ids\\n     * @param _newRoyalties New royalties for each token / edition\\n     */\\n    function setGranularRoyalties(\\n        uint256[] calldata ids,\\n        IRoyaltyManager.Royalty[] calldata _newRoyalties\\n    ) external nonReentrant {\\n        address msgSender = _msgSender();\\n        address tempOwner = owner();\\n\\n        address _royaltyManager = royaltyManager;\\n        uint256 idsLength = ids.length;\\n        if (_royaltyManager == address(0)) {\\n            if (msgSender != tempOwner) {\\n                _revert(Unauthorized.selector);\\n            }\\n\\n            for (uint256 i = 0; i < idsLength; i++) {\\n                if (!_royaltyBPSValid(_newRoyalties[i].royaltyPercentageBPS)) {\\n                    _revert(RoyaltyBPSInvalid.selector);\\n                }\\n                _royalties[ids[i]] = _newRoyalties[i];\\n            }\\n        } else {\\n            for (uint256 i = 0; i < idsLength; i++) {\\n                if (!_royaltyBPSValid(_newRoyalties[i].royaltyPercentageBPS)) {\\n                    _revert(RoyaltyBPSInvalid.selector);\\n                }\\n                if (!IRoyaltyManager(_royaltyManager).canSetGranularRoyalty(ids[i], _newRoyalties[i], msgSender)) {\\n                    _revert(RoyaltySetBlocked.selector);\\n                }\\n                _royalties[ids[i]] = _newRoyalties[i];\\n            }\\n        }\\n\\n        emit GranularRoyaltiesSet(ids, _newRoyalties);\\n        observability.emitGranularRoyaltiesSet(ids, _newRoyalties);\\n    }\\n\\n    /**\\n     * @notice Sets royalty manager if current one allows it\\n     * @param _royaltyManager New royalty manager\\n     */\\n    function setRoyaltyManager(address _royaltyManager) external nonReentrant {\\n        if (!_isValidRoyaltyManager(_royaltyManager)) {\\n            _revert(InvalidManager.selector);\\n        }\\n        address msgSender = _msgSender();\\n\\n        address currentRoyaltyManager = royaltyManager;\\n        if (currentRoyaltyManager == address(0)) {\\n            if (msgSender != owner()) {\\n                _revert(Unauthorized.selector);\\n            }\\n        } else {\\n            if (!IRoyaltyManager(currentRoyaltyManager).canSwap(_royaltyManager, msgSender)) {\\n                _revert(ManagerSwapBlocked.selector);\\n            }\\n        }\\n\\n        royaltyManager = _royaltyManager;\\n\\n        emit RoyaltyManagerChanged(_royaltyManager);\\n        observability.emitRoyaltyManagerChanged(_royaltyManager);\\n    }\\n\\n    /**\\n     * @notice Removes royalty manager if current one allows it\\n     */\\n    function removeRoyaltyManager() external nonReentrant {\\n        address msgSender = _msgSender();\\n\\n        address currentRoyaltyManager = royaltyManager;\\n        if (currentRoyaltyManager == address(0)) {\\n            _revert(ManagerDoesNotExist.selector);\\n        }\\n        if (!IRoyaltyManager(currentRoyaltyManager).canRemoveItself(msgSender)) {\\n            _revert(ManagerRemoveBlocked.selector);\\n        }\\n\\n        royaltyManager = address(0);\\n\\n        emit RoyaltyManagerChanged(address(0));\\n        observability.emitRoyaltyManagerChanged(address(0));\\n    }\\n\\n    /**\\n     * @notice Freeze mints on contract forever\\n     */\\n    function freezeMints() external onlyOwner nonReentrant {\\n        _mintFrozen = 1;\\n\\n        emit MintsFrozen();\\n        observability.emitMintsFrozen();\\n    }\\n\\n    /**\\n     * @notice Return allowed minters on contract\\n     */\\n    function minters() external view returns (address[] memory) {\\n        return _minters.values();\\n    }\\n\\n    /**\\n     * @notice Conforms to ERC-2981. Editions should overwrite to return royalty for entire edition\\n     * @param _tokenGroupingId Token id if on general, and edition id if on editions\\n     * @param _salePrice Sale price of token\\n     */\\n    function royaltyInfo(\\n        uint256 _tokenGroupingId,\\n        uint256 _salePrice\\n    ) public view virtual override returns (address receiver, uint256 royaltyAmount) {\\n        IRoyaltyManager.Royalty memory royalty = _royalties[_tokenGroupingId];\\n        if (royalty.recipientAddress == address(0)) {\\n            royalty = _defaultRoyalty;\\n        }\\n\\n        receiver = royalty.recipientAddress;\\n        royaltyAmount = (_salePrice * uint256(royalty.royaltyPercentageBPS)) / 10000;\\n    }\\n\\n    /**\\n     * @notice Returns the token manager for the id passed in.\\n     * @param id Token ID or Edition ID for Editions implementing contracts\\n     */\\n    function tokenManager(uint256 id) public view returns (address manager) {\\n        manager = defaultManager;\\n        address granularManager = _managers[id];\\n\\n        if (granularManager != address(0)) {\\n            manager = granularManager;\\n        }\\n    }\\n\\n    /**\\n     * @notice Initializes the contract, setting the creator as the initial owner.\\n     * @param _creator Contract creator\\n     * @param defaultRoyalty Default royalty for the contract\\n     * @param _defaultTokenManager Default token manager for the contract\\n     */\\n    function __ERC721Base_initialize(\\n        address _creator,\\n        IRoyaltyManager.Royalty memory defaultRoyalty,\\n        address _defaultTokenManager\\n    ) internal onlyInitializing royaltyValid(defaultRoyalty.royaltyPercentageBPS) {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _transferOwnership(_creator);\\n\\n        if (defaultRoyalty.recipientAddress != address(0)) {\\n            _defaultRoyalty = defaultRoyalty;\\n        }\\n\\n        if (_defaultTokenManager != address(0)) {\\n            defaultManager = _defaultTokenManager;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns true if address is a valid tokenManager\\n     * @param _tokenManager Token manager being checked\\n     */\\n    function _isValidTokenManager(address _tokenManager) internal view returns (bool) {\\n        return _tokenManager.supportsInterface(type(ITokenManager).interfaceId);\\n    }\\n\\n    /**\\n     * @notice Returns true if address is a valid royaltyManager\\n     * @param _royaltyManager Royalty manager being checked\\n     */\\n    function _isValidRoyaltyManager(address _royaltyManager) internal view returns (bool) {\\n        return _royaltyManager.supportsInterface(type(IRoyaltyManager).interfaceId);\\n    }\\n\\n    /**\\n     * @notice Used for meta-transactions\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @dev For more efficient reverts.\\n     */\\n    function _revert(bytes4 errorSelector) internal pure virtual {\\n        assembly {\\n            mstore(0x00, errorSelector)\\n            revert(0x00, 0x04)\\n        }\\n    }\\n\\n    /**\\n     * @notice Used for meta-transactions\\n     */\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @notice Returns true if royalty bps passed in is valid (<= 10000)\\n     * @param _royaltyBPS Royalty basis points\\n     */\\n    function _royaltyBPSValid(uint16 _royaltyBPS) private pure returns (bool) {\\n        return _royaltyBPS <= 10000;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/ERC721GeneralSequenceBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC721Base.sol\\\";\\nimport \\\"../metadata/MetadataEncryption.sol\\\";\\nimport \\\"../tokenManager/interfaces/IPostTransfer.sol\\\";\\nimport \\\"../tokenManager/interfaces/IPostBurn.sol\\\";\\nimport \\\"./interfaces/IERC721GeneralMint.sol\\\";\\nimport \\\"./erc721a/ERC721AURIStorageUpgradeable.sol\\\";\\n\\n/**\\n * @title Generalized Base ERC721\\n * @author highlight.xyz\\n * @notice Generalized Base NFT smart contract\\n */\\nabstract contract ERC721GeneralSequenceBase is ERC721Base, ERC721AURIStorageUpgradeable, IERC721GeneralMint {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Throw when attempting to mint, while mint is frozen\\n     */\\n    error MintFrozen();\\n\\n    /**\\n     * @notice Throw when requested token is not in range within bounds of limit supply\\n     */\\n    error TokenNotInRange();\\n\\n    /**\\n     * @notice Throw when new supply is over limit supply\\n     */\\n    error OverLimitSupply();\\n\\n    /**\\n     * @notice Throw when array lengths are mismatched\\n     */\\n    error MismatchedArrayLengths();\\n\\n    /**\\n     * @notice Throw when string is empty\\n     */\\n    error EmptyString();\\n\\n    /**\\n     * @notice Contract metadata\\n     */\\n    string public contractURI;\\n\\n    /**\\n     * @notice Limit the supply to take advantage of over-promising in summation with multiple mint vectors\\n     */\\n    uint256 public limitSupply;\\n\\n    /**\\n     * @notice Emitted when uris are set for tokens\\n     * @param ids IDs of tokens to set uris for\\n     * @param uris Uris to set on tokens\\n     */\\n    event TokenURIsSet(uint256[] ids, string[] uris);\\n\\n    /**\\n     * @notice Emitted when limit supply is set\\n     * @param newLimitSupply Limit supply to set\\n     */\\n    event LimitSupplySet(uint256 indexed newLimitSupply);\\n\\n    /**\\n     * @notice See {IERC721GeneralMint-mintOneToOneRecipient}\\n     */\\n    function mintOneToOneRecipient(address recipient) external virtual onlyMinter nonReentrant returns (uint256) {\\n        if (_mintFrozen == 1) {\\n            _revert(MintFrozen.selector);\\n        }\\n\\n        uint256 tempSupply = _nextTokenId();\\n        _requireLimitSupply(tempSupply);\\n\\n        _mint(recipient, 1);\\n\\n        return tempSupply;\\n    }\\n\\n    /**\\n     * @notice See {IERC721GeneralMint-mintAmountToOneRecipient}\\n     */\\n    function mintAmountToOneRecipient(address recipient, uint256 amount) external virtual onlyMinter nonReentrant {\\n        if (_mintFrozen == 1) {\\n            _revert(MintFrozen.selector);\\n        }\\n        uint256 tempSupply = _nextTokenId() - 1; // cache\\n\\n        _mint(recipient, amount);\\n\\n        _requireLimitSupply(tempSupply + amount);\\n    }\\n\\n    /**\\n     * @notice See {IERC721GeneralMint-mintOneToMultipleRecipients}\\n     */\\n    function mintOneToMultipleRecipients(address[] calldata recipients) external onlyMinter nonReentrant {\\n        if (_mintFrozen == 1) {\\n            _revert(MintFrozen.selector);\\n        }\\n        uint256 recipientsLength = recipients.length;\\n        uint256 tempSupply = _nextTokenId() - 1; // cache\\n\\n        for (uint256 i = 0; i < recipientsLength; i++) {\\n            _mint(recipients[i], 1);\\n        }\\n\\n        _requireLimitSupply(tempSupply + recipientsLength);\\n    }\\n\\n    /**\\n     * @notice See {IERC721GeneralMint-mintSameAmountToMultipleRecipients}\\n     */\\n    function mintSameAmountToMultipleRecipients(\\n        address[] calldata recipients,\\n        uint256 amount\\n    ) external onlyMinter nonReentrant {\\n        if (_mintFrozen == 1) {\\n            _revert(MintFrozen.selector);\\n        }\\n        uint256 recipientsLength = recipients.length;\\n        uint256 tempSupply = _nextTokenId() - 1; // cache\\n\\n        for (uint256 i = 0; i < recipientsLength; i++) {\\n            _mint(recipients[i], amount);\\n        }\\n\\n        _requireLimitSupply(tempSupply + recipientsLength * amount);\\n    }\\n\\n    /* solhint-disable no-empty-blocks */\\n\\n    /**\\n     * @notice Mint a chosen token id to a single recipient\\n     * @dev Unavailable for ERC721GeneralSequenceBase, keep interface adhered for backwards compatiblity\\n     */\\n    function mintSpecificTokenToOneRecipient(address recipient, uint256 tokenId) external {}\\n\\n    /**\\n     * @notice Mint chosen token ids to a single recipient\\n     * @dev Unavailable for ERC721GeneralSequenceBase, keep interface adhered for backwards compatiblity\\n     */\\n    function mintSpecificTokensToOneRecipient(address recipient, uint256[] calldata tokenIds) external {}\\n\\n    /* solhint-enable no-empty-blocks */\\n\\n    /**\\n     * @notice Override base URI system for select tokens, with custom per-token metadata\\n     * @param ids IDs of tokens to override base uri system for with custom uris\\n     * @param uris Custom uris\\n     */\\n    function setTokenURIs(uint256[] calldata ids, string[] calldata uris) external nonReentrant {\\n        uint256 idsLength = ids.length;\\n        if (idsLength != uris.length) {\\n            _revert(MismatchedArrayLengths.selector);\\n        }\\n\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            _setTokenURI(ids[i], uris[i]);\\n        }\\n\\n        emit TokenURIsSet(ids, uris);\\n        observability.emitTokenURIsSet(ids, uris);\\n    }\\n\\n    /**\\n     * @notice Set base uri\\n     * @param newBaseURI New base uri to set\\n     */\\n    function setBaseURI(string calldata newBaseURI) external nonReentrant {\\n        if (bytes(newBaseURI).length == 0) {\\n            _revert(EmptyString.selector);\\n        }\\n\\n        address _manager = defaultManager;\\n\\n        if (_manager == address(0)) {\\n            if (_msgSender() != owner()) {\\n                _revert(Unauthorized.selector);\\n            }\\n        } else {\\n            if (!ITokenManager(_manager).canUpdateMetadata(_msgSender(), 0, bytes(newBaseURI))) {\\n                _revert(Unauthorized.selector);\\n            }\\n        }\\n\\n        _setBaseURI(newBaseURI);\\n        observability.emitBaseUriSet(newBaseURI);\\n    }\\n\\n    /**\\n     * @notice Set limit supply\\n     * @param _limitSupply Limit supply to set\\n     */\\n    function setLimitSupply(uint256 _limitSupply) external onlyOwner nonReentrant {\\n        // allow it to be 0, for post-mint\\n        limitSupply = _limitSupply;\\n\\n        emit LimitSupplySet(_limitSupply);\\n        observability.emitLimitSupplySet(_limitSupply);\\n    }\\n\\n    /**\\n     * @notice Set contract name\\n     * @param newName New name\\n     * @param newSymbol New symbol\\n     * @param newContractUri New contractURI\\n     */\\n    function setContractMetadata(\\n        string calldata newName,\\n        string calldata newSymbol,\\n        string calldata newContractUri\\n    ) external onlyOwner {\\n        _setContractMetadata(newName, newSymbol);\\n        contractURI = newContractUri;\\n\\n        observability.emitContractMetadataSet(newName, newSymbol, newContractUri);\\n    }\\n\\n    /**\\n     * @notice See {IERC721-burn}. Overrides default behaviour to check associated tokenManager.\\n     */\\n    function burn(uint256 tokenId) public nonReentrant {\\n        address _manager = tokenManager(tokenId);\\n        address msgSender = _msgSender();\\n\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostBurn).interfaceId)) {\\n            address owner = ownerOf(tokenId);\\n            IPostBurn(_manager).postBurn(msgSender, owner, tokenId);\\n        } else {\\n            // default to restricting burn to owner or operator if a valid TM isn't present\\n            if (!_isApprovedOrOwner(msgSender, tokenId)) {\\n                _revert(Unauthorized.selector);\\n            }\\n        }\\n\\n        _burn(tokenId);\\n\\n        observability.emitTransfer(msgSender, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @notice Overrides tokenURI to first rotate the token id\\n     * @param tokenId ID of token to get uri for\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        return ERC721AURIStorageUpgradeable.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @notice See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165Upgradeable, ERC721AUpgradeable) returns (bool) {\\n        return ERC721AUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Hook called after transfers\\n     * @param from Account token is being transferred from\\n     * @param to Account token is being transferred to\\n     * @param tokenId ID of token being transferred\\n     */\\n    function _afterTokenTransfers(address from, address to, uint256 tokenId) internal override {\\n        address _manager = tokenManager(tokenId);\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostTransfer).interfaceId)) {\\n            IPostTransfer(_manager).postSafeTransferFrom(_msgSender(), from, to, tokenId, \\\"\\\");\\n        }\\n\\n        observability.emitTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Used for meta-transactions\\n     */\\n    function _msgSender() internal view virtual override(ERC721Base, ContextUpgradeable) returns (address sender) {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @notice Used for meta-transactions\\n     */\\n    function _msgData() internal view virtual override(ERC721Base, ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @dev For more efficient reverts.\\n     */\\n    function _revert(bytes4 errorSelector) internal pure virtual override(ERC721AUpgradeable, ERC721Base) {\\n        ERC721AUpgradeable._revert(errorSelector);\\n    }\\n\\n    /**\\n     * @notice Override base URI system for select tokens, with custom per-token metadata\\n     * @param tokenId Token to set uri for\\n     * @param _uri Uri to set on token\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata _uri) private {\\n        address _manager = tokenManager(tokenId);\\n        address msgSender = _msgSender();\\n\\n        address tempOwner = owner();\\n        if (_manager == address(0)) {\\n            if (msgSender != tempOwner) {\\n                _revert(Unauthorized.selector);\\n            }\\n        } else {\\n            if (!ITokenManager(_manager).canUpdateMetadata(msgSender, tokenId, bytes(_uri))) {\\n                _revert(Unauthorized.selector);\\n            }\\n        }\\n\\n        _tokenURIs[tokenId] = _uri;\\n    }\\n\\n    /**\\n     * @notice Require the new supply of tokens after mint to be less than limit supply\\n     * @param newSupply New supply\\n     */\\n    function _requireLimitSupply(uint256 newSupply) internal view {\\n        uint256 _limitSupply = limitSupply;\\n        if (_limitSupply != 0 && newSupply > _limitSupply) {\\n            _revert(OverLimitSupply.selector);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/IERC721GeneralMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @notice General721 mint interface\\n * @author highlight.xyz\\n */\\ninterface IERC721GeneralMint {\\n    /**\\n     * @notice Mint one token to one recipient\\n     * @param recipient Recipient of minted NFT\\n     */\\n    function mintOneToOneRecipient(address recipient) external returns (uint256);\\n\\n    /**\\n     * @notice Mint an amount of tokens to one recipient\\n     * @param recipient Recipient of minted NFTs\\n     * @param amount Amount of NFTs minted\\n     */\\n    function mintAmountToOneRecipient(address recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice Mint one token to multiple recipients. Useful for use-cases like airdrops\\n     * @param recipients Recipients of minted NFTs\\n     */\\n    function mintOneToMultipleRecipients(address[] calldata recipients) external;\\n\\n    /**\\n     * @notice Mint the same amount of tokens to multiple recipients\\n     * @param recipients Recipients of minted NFTs\\n     * @param amount Amount of NFTs minted to each recipient\\n     */\\n    function mintSameAmountToMultipleRecipients(address[] calldata recipients, uint256 amount) external;\\n\\n    /**\\n     * @notice Mint a chosen token id to a single recipient\\n     * @param recipient Recipient of chosen NFT\\n     * @param tokenId ID of NFT to mint\\n     */\\n    function mintSpecificTokenToOneRecipient(address recipient, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Mint chosen token ids to a single recipient\\n     * @param recipient Recipient of chosen NFT\\n     * @param tokenIds IDs of NFTs to mint\\n     */\\n    function mintSpecificTokensToOneRecipient(address recipient, uint256[] calldata tokenIds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/onchain/ERC721GenerativeOnchain.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../ERC721Base.sol\\\";\\nimport \\\"../../tokenManager/interfaces/IPostTransfer.sol\\\";\\nimport \\\"../../tokenManager/interfaces/IPostBurn.sol\\\";\\nimport \\\"../interfaces/IERC721GeneralMint.sol\\\";\\nimport \\\"../ERC721GeneralSequenceBase.sol\\\";\\nimport \\\"./OnchainFileStorage.sol\\\";\\n\\n/**\\n * @title Generative ERC721\\n * @dev Inherits from OnchainFileStorage for file handling\\n * @author highlight.xyz\\n * @notice Generative NFT smart contract\\n */\\ncontract ERC721GenerativeOnchain is ERC721GeneralSequenceBase, OnchainFileStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Generative Code URI\\n     */\\n    string private _generativeCodeURI;\\n\\n    /**\\n     * @notice Initialize the contract\\n     * @param data Data to initialize the contract\\n     * @ param creator Creator/owner of contract\\n     * @ param _contractURI Contract metadata\\n     * @ param defaultRoyalty Default royalty object for contract (optional)\\n     * @ param _defaultTokenManager Default token manager for contract (optional)\\n     * @ param _name Name of token edition\\n     * @ param _symbol Symbol of the token edition\\n     * @ param trustedForwarder Trusted minimal forwarder\\n     * @ param initialMinter Initial minter to register\\n     * @ param _generativeCodeURI Generative code URI\\n     * @ param newBaseURI Base URI for contract\\n     * @ param _limitSupply Initial limit supply\\n     * @ param useMarketplaceFiltererRegistry Denotes whether to use marketplace filterer registry\\n     * @param _observability Observability contract address\\n     */\\n    function initialize(bytes calldata data, address _observability) external initializer {\\n        (\\n            address creator,\\n            string memory _contractURI,\\n            IRoyaltyManager.Royalty memory defaultRoyalty,\\n            address _defaultTokenManager,\\n            string memory _name,\\n            string memory _symbol,\\n            address trustedForwarder,\\n            address initialMinter,\\n            string memory _codeURI,\\n            string memory newBaseURI,\\n            uint256 _limitSupply,\\n            bool useMarketplaceFiltererRegistry\\n        ) = abi.decode(\\n                data,\\n                (\\n                    address,\\n                    string,\\n                    IRoyaltyManager.Royalty,\\n                    address,\\n                    string,\\n                    string,\\n                    address,\\n                    address,\\n                    string,\\n                    string,\\n                    uint256,\\n                    bool\\n                )\\n            );\\n\\n        __ERC721URIStorage_init();\\n        __ERC721Base_initialize(creator, defaultRoyalty, _defaultTokenManager);\\n        __ERC2771ContextUpgradeable__init__(trustedForwarder);\\n        __ERC721A_init(_name, _symbol);\\n        // deprecate but keep input for backwards-compatibility:\\n        // __MarketplaceFilterer__init__(useMarketplaceFiltererRegistry);\\n        _minters.add(initialMinter);\\n        contractURI = _contractURI;\\n        _generativeCodeURI = _codeURI;\\n        IObservability(_observability).emitGenerativeSeriesDeployed(address(this));\\n        observability = IObservability(_observability);\\n\\n        if (bytes(newBaseURI).length > 0) {\\n            _setBaseURI(newBaseURI);\\n            // don't emit on observability contract here\\n        }\\n\\n        if (_limitSupply > 0) {\\n            limitSupply = _limitSupply;\\n            // don't emit on observability contract here\\n        }\\n    }\\n\\n    function generativeCodeUri() external view returns (string memory) {\\n        return _generativeCodeURI;\\n    }\\n\\n    /**\\n     * @notice Used for meta-transactions\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        override(ERC721GeneralSequenceBase, ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC721GeneralSequenceBase._msgSender();\\n    }\\n\\n    /**\\n     * @notice Used for meta-transactions\\n     */\\n    function _msgData() internal view override(ERC721GeneralSequenceBase, ContextUpgradeable) returns (bytes calldata) {\\n        return ERC721GeneralSequenceBase._msgData();\\n    }\\n\\n    /**\\n     * @dev For more efficient reverts.\\n     */\\n    function _revert(\\n        bytes4 errorSelector\\n    ) internal pure virtual override(ERC721GeneralSequenceBase, OnchainFileStorage) {\\n        ERC721GeneralSequenceBase._revert(errorSelector);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/onchain/OnchainFileStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title Onchain File Storage\\n * @notice Introduces file handling to place utilities onchain\\n * @author highlight.xyz\\n */\\nabstract contract OnchainFileStorage is OwnableUpgradeable {\\n    /**\\n     * @notice File existence errors\\n     */\\n    error FileAlreadyRegistered();\\n    error FileNotRegistered();\\n\\n    /**\\n     * @notice File storage\\n     * @dev File-scoped bytecode addresses (pointers) holding contents\\n     */\\n    mapping(bytes => address[]) private _fileStorage;\\n\\n    /**\\n     * @notice File storage path names\\n     * @dev Store registered file names (all will be present as keys in `fileStorage`)\\n     */\\n    bytes[] private _files;\\n\\n    /**\\n     * @notice Add a file via its name and associated storage bytecode addresses\\n     */\\n    function addFile(string calldata fileName, address[] calldata fileStorageAddresses) external onlyOwner {\\n        bytes memory _fileName = bytes(fileName);\\n        if (_fileStorage[_fileName].length != 0) {\\n            _revert(FileAlreadyRegistered.selector);\\n        }\\n\\n        _files.push(_fileName);\\n        _fileStorage[_fileName] = fileStorageAddresses;\\n    }\\n\\n    /**\\n     * @notice Remove a file from registered list of file names, and its associated storage bytecode addresses\\n     */\\n    function removeFile(string calldata fileName) external onlyOwner {\\n        bytes memory _fileName = bytes(fileName);\\n        if (_fileStorage[_fileName].length == 0) {\\n            _revert(FileNotRegistered.selector);\\n        }\\n\\n        bytes[] memory oldFiles = _files;\\n        bytes[] memory newFiles = new bytes[](oldFiles.length - 1);\\n        uint256 fileIndexOffset = 0;\\n        uint256 oldFilesLength = oldFiles.length;\\n\\n        for (uint256 i = 0; i < oldFilesLength; i++) {\\n            if (keccak256(oldFiles[i]) == keccak256(_fileName)) {\\n                fileIndexOffset = 1;\\n            } else {\\n                newFiles[i - fileIndexOffset] = oldFiles[i];\\n            }\\n        }\\n\\n        _files = newFiles;\\n        delete _fileStorage[_fileName];\\n    }\\n\\n    /**\\n     * @notice Return registered file names\\n     */\\n    function files() external view returns (string[] memory) {\\n        bytes[] memory fileNames = _files;\\n        string[] memory fileNamesHumanReadable = new string[](fileNames.length);\\n\\n        for (uint256 i = 0; i < fileNames.length; i++) {\\n            fileNamesHumanReadable[i] = string(fileNames[i]);\\n        }\\n\\n        return fileNamesHumanReadable;\\n    }\\n\\n    /**\\n     * @notice Return storage bytecode addresses for a file\\n     */\\n    function fileStorage(string calldata fileName) external view returns (address[] memory) {\\n        bytes memory _fileName = bytes(fileName);\\n        if (_fileStorage[_fileName].length == 0) {\\n            _revert(FileNotRegistered.selector);\\n        }\\n\\n        return _fileStorage[bytes(fileName)];\\n    }\\n\\n    /**\\n     * @notice Return file contents\\n     */\\n    function fileContents(string calldata fileName) external view returns (string memory) {\\n        bytes memory _fileName = bytes(fileName);\\n        if (_fileStorage[_fileName].length == 0) {\\n            _revert(FileNotRegistered.selector);\\n        }\\n\\n        address[] memory fileStorageAddresses = _fileStorage[bytes(fileName)];\\n        uint256 fileStorageAddressesLength = fileStorageAddresses.length;\\n        string memory contents = \\\"\\\";\\n\\n        for (uint256 i = 0; i < fileStorageAddressesLength; i++) {\\n            contents = string(\\n                abi.encodePacked(\\n                    contents,\\n                    string(_readBytecode(fileStorageAddresses[i], 1, fileStorageAddresses[i].code.length - 1))\\n                )\\n            );\\n        }\\n\\n        return contents;\\n    }\\n\\n    /**\\n     * @notice Read bytecode at an address\\n     * @ author SOLMATE\\n     */\\n    function _readBytecode(address pointer, uint256 start, uint256 size) private view returns (bytes memory data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            data := mload(0x40)\\n\\n            // Update the free memory pointer to prevent overriding our data.\\n            // We use and(x, not(31)) as a cheaper equivalent to sub(x, mod(x, 32)).\\n            // Adding 31 to size and running the result through the logic above ensures\\n            // the memory pointer remains word-aligned, following the Solidity convention.\\n            mstore(0x40, add(data, and(add(add(size, 32), 31), not(31))))\\n\\n            // Store the size of the data in the first 32 byte chunk of free memory.\\n            mstore(data, size)\\n\\n            // Copy the code into memory right after the 32 bytes we used to store the size.\\n            extcodecopy(pointer, add(data, 32), start, size)\\n        }\\n    }\\n\\n    /**\\n     * @dev For more efficient reverts.\\n     */\\n    function _revert(bytes4 errorSelector) internal pure virtual {\\n        assembly {\\n            mstore(0x00, errorSelector)\\n            revert(0x00, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metadata/MetadataEncryption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Utilities for metadata encryption and decryption\\n * @author highlight.xyz\\n */\\nabstract contract MetadataEncryption {\\n    /// @dev See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\\n    function encryptDecrypt(bytes memory data, bytes calldata key) public pure returns (bytes memory result) {\\n        // Store data length on stack for later use\\n        uint256 length = data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Set result to free memory pointer\\n            result := mload(0x40)\\n            // Increase free memory pointer by lenght + 32\\n            mstore(0x40, add(add(result, length), 32))\\n            // Set result length\\n            mstore(result, length)\\n        }\\n\\n        // Iterate over the data stepping by 32 bytes\\n        for (uint256 i = 0; i < length; i += 32) {\\n            // Generate hash of the key and offset\\n            bytes32 hash = keccak256(abi.encodePacked(key, i));\\n\\n            bytes32 chunk;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // Read 32-bytes data chunk\\n                chunk := mload(add(data, add(i, 32)))\\n            }\\n            // XOR the chunk with hash\\n            chunk ^= hash;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // Write 32-byte encrypted chunk\\n                mstore(add(result, add(i, 32)), chunk)\\n            }\\n        }\\n    }\\n\\n    function _sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n        require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n        uint256 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return x;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *      Openzeppelin contract slightly modified by ishan@ highlight.xyz to be upgradeable.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable {\\n    address private _trustedForwarder;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function __ERC2771ContextUpgradeable__init__(address trustedForwarder) internal onlyInitializing {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /* solhint-disable no-inline-assembly */\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/observability/IObservability.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../royaltyManager/interfaces/IRoyaltyManager.sol\\\";\\n\\n/**\\n * @title IObservability\\n * @author highlight.xyz\\n * @notice Interface to interact with the Highlight observability singleton\\n * @dev Singleton to coalesce select Highlight protocol events\\n */\\ninterface IObservability {\\n    /**************************\\n      ERC721Base / ERC721MinimizedBase events\\n     **************************/\\n\\n    /**\\n     * @notice Emitted when minter is registered or unregistered\\n     * @param contractAddress Initial contract that emitted event\\n     * @param minter Minter that was changed\\n     * @param registered True if the minter was registered, false if unregistered\\n     */\\n    event MinterRegistrationChanged(address indexed contractAddress, address indexed minter, bool indexed registered);\\n\\n    /**\\n     * @notice Emitted when token managers are set for token/edition ids\\n     * @param contractAddress Initial contract that emitted event\\n     * @param _ids Edition / token ids\\n     * @param _tokenManagers Token managers to set for tokens / editions\\n     */\\n    event GranularTokenManagersSet(address indexed contractAddress, uint256[] _ids, address[] _tokenManagers);\\n\\n    /**\\n     * @notice Emitted when token managers are removed for token/edition ids\\n     * @param contractAddress Initial contract that emitted event\\n     * @param _ids Edition / token ids to remove token managers for\\n     */\\n    event GranularTokenManagersRemoved(address indexed contractAddress, uint256[] _ids);\\n\\n    /**\\n     * @notice Emitted when default token manager changed\\n     * @param contractAddress Initial contract that emitted event\\n     * @param newDefaultTokenManager New default token manager. Zero address if old one was removed\\n     */\\n    event DefaultTokenManagerChanged(address indexed contractAddress, address indexed newDefaultTokenManager);\\n\\n    /**\\n     * @notice Emitted when default royalty is set\\n     * @param contractAddress Initial contract that emitted event\\n     * @param recipientAddress Royalty recipient\\n     * @param royaltyPercentageBPS Percentage of sale (in basis points) owed to royalty recipient\\n     */\\n    event DefaultRoyaltySet(\\n        address indexed contractAddress,\\n        address indexed recipientAddress,\\n        uint16 indexed royaltyPercentageBPS\\n    );\\n\\n    /**\\n     * @notice Emitted when royalties are set for edition / token ids\\n     * @param contractAddress Initial contract that emitted event\\n     * @param ids Token / edition ids\\n     * @param _newRoyalties New royalties for each token / edition\\n     */\\n    event GranularRoyaltiesSet(address indexed contractAddress, uint256[] ids, IRoyaltyManager.Royalty[] _newRoyalties);\\n\\n    /**\\n     * @notice Emitted when royalty manager is updated\\n     * @param contractAddress Initial contract that emitted event\\n     * @param newRoyaltyManager New royalty manager. Zero address if old one was removed\\n     */\\n    event RoyaltyManagerChanged(address indexed contractAddress, address indexed newRoyaltyManager);\\n\\n    /**\\n     * @notice Emitted when mints are frozen permanently\\n     * @param contractAddress Initial contract that emitted event\\n     */\\n    event MintsFrozen(address indexed contractAddress);\\n\\n    /**\\n     * @notice Emitted when contract metadata is set\\n     * @param contractAddress Initial contract that emitted event\\n     * @param name New name\\n     * @param symbol New symbol\\n     * @param contractURI New contract uri\\n     */\\n    event ContractMetadataSet(address indexed contractAddress, string name, string symbol, string contractURI);\\n\\n    /**************************\\n      ERC721General events\\n     **************************/\\n\\n    /**\\n     * @notice Emitted when hashed metadata config is set\\n     * @param contractAddress Initial contract that emitted event\\n     * @param hashedURIData Hashed uri data\\n     * @param hashedRotationData Hashed rotation key\\n     * @param _supply Supply of tokens to mint w/ reveal\\n     */\\n    event HashedMetadataConfigSet(\\n        address indexed contractAddress,\\n        bytes hashedURIData,\\n        bytes hashedRotationData,\\n        uint256 indexed _supply\\n    );\\n\\n    /**\\n     * @notice Emitted when metadata is revealed\\n     * @param contractAddress Initial contract that emitted event\\n     * @param key Key used to decode hashed data\\n     * @param newRotationKey Actual rotation key to be used\\n     */\\n    event Revealed(address indexed contractAddress, bytes key, uint256 newRotationKey);\\n\\n    /**************************\\n      ERC721GeneralBase events\\n     **************************/\\n\\n    /**\\n     * @notice Emitted when uris are set for tokens\\n     * @param contractAddress Initial contract that emitted event\\n     * @param ids IDs of tokens to set uris for\\n     * @param uris Uris to set on tokens\\n     */\\n    event TokenURIsSet(address indexed contractAddress, uint256[] ids, string[] uris);\\n\\n    /**\\n     * @notice Emitted when limit supply is set\\n     * @param contractAddress Initial contract that emitted event\\n     * @param newLimitSupply Limit supply to set\\n     */\\n    event LimitSupplySet(address indexed contractAddress, uint256 indexed newLimitSupply);\\n\\n    /**************************\\n      ERC721StorageUri events\\n     **************************/\\n\\n    /**\\n     * @notice Emits when a series collection has its base uri set\\n     * @param contractAddress Contract with updated base uri\\n     * @param newBaseUri New base uri\\n     */\\n    event BaseUriSet(address indexed contractAddress, string newBaseUri);\\n\\n    /**************************\\n      ERC721Editions / ERC721SingleEdition events\\n     **************************/\\n\\n    // Not adding EditionCreated, EditionMintedToOneRecipient, EditionMintedToRecipients\\n    // EditionCreated - handled by MetadataInitialized\\n    // EditionMintedToOneRecipient / EditionMintedToRecipients - handled via mint module events\\n\\n    /**************************\\n      Deployment events\\n     **************************/\\n\\n    /**\\n     * @notice Emitted when Generative Series contract is deployed\\n     * @param deployer Contract deployer\\n     * @param contractAddress Address of contract that was deployed\\n     */\\n    event GenerativeSeriesDeployed(address indexed deployer, address indexed contractAddress);\\n\\n    /**\\n     * @notice Emitted when Series contract is deployed\\n     * @param deployer Contract deployer\\n     * @param contractAddress Address of contract that was deployed\\n     */\\n    event SeriesDeployed(address indexed deployer, address indexed contractAddress);\\n\\n    /**\\n     * @notice Emitted when MultipleEditions contract is deployed\\n     * @param deployer Contract deployer\\n     * @param contractAddress Address of contract that was deployed\\n     */\\n    event MultipleEditionsDeployed(address indexed deployer, address indexed contractAddress);\\n\\n    /**\\n     * @notice Emitted when SingleEdition contract is deployed\\n     * @param deployer Contract deployer\\n     * @param contractAddress Address of contract that was deployed\\n     */\\n    event SingleEditionDeployed(address indexed deployer, address indexed contractAddress);\\n\\n    /**************************\\n      ERC721 events\\n     **************************/\\n\\n    /**\\n     * @notice Emitted when `tokenId` token is transferred from `from` to `to` on contractAddress\\n     * @param contractAddress NFT contract token resides on\\n     * @param from Token sender\\n     * @param to Token receiver\\n     * @param tokenId Token being sent\\n     */\\n    event Transfer(address indexed contractAddress, address indexed from, address to, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Emit MinterRegistrationChanged\\n     */\\n    function emitMinterRegistrationChanged(address minter, bool registered) external;\\n\\n    /**\\n     * @notice Emit GranularTokenManagersSet\\n     */\\n    function emitGranularTokenManagersSet(uint256[] calldata _ids, address[] calldata _tokenManagers) external;\\n\\n    /**\\n     * @notice Emit GranularTokenManagersRemoved\\n     */\\n    function emitGranularTokenManagersRemoved(uint256[] calldata _ids) external;\\n\\n    /**\\n     * @notice Emit DefaultTokenManagerChanged\\n     */\\n    function emitDefaultTokenManagerChanged(address newDefaultTokenManager) external;\\n\\n    /**\\n     * @notice Emit DefaultRoyaltySet\\n     */\\n    function emitDefaultRoyaltySet(address recipientAddress, uint16 royaltyPercentageBPS) external;\\n\\n    /**\\n     * @notice Emit GranularRoyaltiesSet\\n     */\\n    function emitGranularRoyaltiesSet(\\n        uint256[] calldata ids,\\n        IRoyaltyManager.Royalty[] calldata _newRoyalties\\n    ) external;\\n\\n    /**\\n     * @notice Emit RoyaltyManagerChanged\\n     */\\n    function emitRoyaltyManagerChanged(address newRoyaltyManager) external;\\n\\n    /**\\n     * @notice Emit MintsFrozen\\n     */\\n    function emitMintsFrozen() external;\\n\\n    /**\\n     * @notice Emit ContractMetadataSet\\n     */\\n    function emitContractMetadataSet(\\n        string calldata name,\\n        string calldata symbol,\\n        string calldata contractURI\\n    ) external;\\n\\n    /**\\n     * @notice Emit HashedMetadataConfigSet\\n     */\\n    function emitHashedMetadataConfigSet(\\n        bytes calldata hashedURIData,\\n        bytes calldata hashedRotationData,\\n        uint256 _supply\\n    ) external;\\n\\n    /**\\n     * @notice Emit Revealed\\n     */\\n    function emitRevealed(bytes calldata key, uint256 newRotationKey) external;\\n\\n    /**\\n     * @notice Emit TokenURIsSet\\n     */\\n    function emitTokenURIsSet(uint256[] calldata ids, string[] calldata uris) external;\\n\\n    /**\\n     * @notice Emit LimitSupplySet\\n     */\\n    function emitLimitSupplySet(uint256 newLimitSupply) external;\\n\\n    /**\\n     * @notice Emit BaseUriSet\\n     */\\n    function emitBaseUriSet(string calldata newBaseUri) external;\\n\\n    /**\\n     * @notice Emit GenerativeSeriesDeployed\\n     */\\n    function emitGenerativeSeriesDeployed(address contractAddress) external;\\n\\n    /**\\n     * @notice Emit SeriesDeployed\\n     */\\n    function emitSeriesDeployed(address contractAddress) external;\\n\\n    /**\\n     * @notice Emit MultipleEditionsDeployed\\n     */\\n    function emitMultipleEditionsDeployed(address contractAddress) external;\\n\\n    /**\\n     * @notice Emit SingleEditionDeployed\\n     */\\n    function emitSingleEditionDeployed(address contractAddress) external;\\n\\n    /**\\n     * @notice Emit Transfer\\n     */\\n    function emitTransfer(address from, address to, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/royaltyManager/interfaces/IRoyaltyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IRoyaltyManager\\n * @author highlight.xyz\\n * @notice Enables interfacing with custom royalty managers that define conditions on setting royalties for\\n *         NFT contracts\\n */\\ninterface IRoyaltyManager {\\n    /**\\n     * @notice Struct containing values required to adhere to ERC-2981\\n     * @param recipientAddress Royalty recipient - can be EOA, royalty splitter contract, etc.\\n     * @param royaltyPercentageBPS Royalty cut, in basis points\\n     */\\n    struct Royalty {\\n        address recipientAddress;\\n        uint16 royaltyPercentageBPS;\\n    }\\n\\n    /**\\n     * @notice Defines conditions around being able to swap royalty manager for another one\\n     * @param newRoyaltyManager New royalty manager being swapped in\\n     * @param sender msg sender\\n     */\\n    function canSwap(address newRoyaltyManager, address sender) external view returns (bool);\\n\\n    /**\\n     * @notice Defines conditions around being able to remove current royalty manager\\n     * @param sender msg sender\\n     */\\n    function canRemoveItself(address sender) external view returns (bool);\\n\\n    /**\\n     * @notice Defines conditions around being able to set granular royalty (per token or per edition)\\n     * @param id Edition / token ID whose royalty is being set\\n     * @param royalty Royalty being set\\n     * @param sender msg sender\\n     */\\n    function canSetGranularRoyalty(uint256 id, Royalty calldata royalty, address sender) external view returns (bool);\\n\\n    /**\\n     * @notice Defines conditions around being able to set default royalty\\n     * @param royalty Royalty being set\\n     * @param sender msg sender\\n     */\\n    function canSetDefaultRoyalty(Royalty calldata royalty, address sender) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/interfaces/IPostBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @author highlight.xyz\\n * @notice If token managers implement this, transfer actions will call\\n *      postBurn on the token manager.\\n */\\ninterface IPostBurn {\\n    /**\\n     * @notice Hook called by contract after burn, if token manager of burned token implements this\\n     *      interface.\\n     * @param operator Operator burning tokens\\n     * @param sender Msg sender\\n     * @param id Burned token's id or id of edition of token that is burned\\n     */\\n    function postBurn(address operator, address sender, uint256 id) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/interfaces/IPostTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @author highlight.xyz\\n * @notice If token managers implement this, transfer actions will call\\n *      postSafeTransferFrom or postTransferFrom on the token manager.\\n */\\ninterface IPostTransfer {\\n    /**\\n     * @notice Hook called by community after safe transfers, if token manager of transferred token implements this\\n     *      interface.\\n     * @param operator Operator transferring tokens\\n     * @param from Token(s) sender\\n     * @param to Token(s) recipient\\n     * @param id Transferred token's id\\n     * @param data Arbitrary data\\n     */\\n    function postSafeTransferFrom(address operator, address from, address to, uint256 id, bytes memory data) external;\\n\\n    /**\\n     * @notice Hook called by community after transfers, if token manager of transferred token implements\\n     *         this interface.\\n     * @param operator Operator transferring tokens\\n     * @param from Token(s) sender\\n     * @param to Token(s) recipient\\n     * @param id Transferred token's id\\n     */\\n    function postTransferFrom(address operator, address from, address to, uint256 id) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/interfaces/ITokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ITokenManager\\n * @author highlight.xyz\\n * @notice Enables interfacing with custom token managers\\n */\\ninterface ITokenManager {\\n    /**\\n     * @notice Returns whether metadata updater is allowed to update\\n     * @param sender Updater\\n     * @param id Token/edition who's uri is being updated\\n     *           If id is 0, implementation should decide behaviour for base uri update\\n     * @param newData Token's new uri if called by general contract, and any metadata field if called by editions\\n     * @return If invocation can update metadata\\n     */\\n    function canUpdateMetadata(address sender, uint256 id, bytes calldata newData) external returns (bool);\\n\\n    /**\\n     * @notice Returns whether token manager can be swapped for another one by invocator\\n     * @notice Default token manager implementations should ignore id\\n     * @param sender Swapper\\n     * @param id Token grouping id (token id or edition id)\\n     * @param newTokenManager New token manager being swapped to\\n     * @return If invocation can swap token managers\\n     */\\n    function canSwap(address sender, uint256 id, address newTokenManager) external returns (bool);\\n\\n    /**\\n     * @notice Returns whether token manager can be removed\\n     * @notice Default token manager implementations should ignore id\\n     * @param sender Swapper\\n     * @param id Token grouping id (token id or edition id)\\n     * @return If invocation can remove token manager\\n     */\\n    function canRemoveItself(address sender, uint256 id) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/ERC165CheckerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\n/* solhint-disable */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\n/* solhint-disable */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC2981/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981Upgradeable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../ERC165/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\n/* solhint-disable */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerRemoveBlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerSwapBlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterRegistrationInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverLimitSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyBPSInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltySetBlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBPS\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDefaultTokenManager\",\"type\":\"address\"}],\"name\":\"DefaultTokenManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBPS\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct IRoyaltyManager.Royalty[]\",\"name\":\"_newRoyalties\",\"type\":\"tuple[]\"}],\"name\":\"GranularRoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"GranularTokenManagersRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokenManagers\",\"type\":\"address[]\"}],\"name\":\"GranularTokenManagersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLimitSupply\",\"type\":\"uint256\"}],\"name\":\"LimitSupplySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"name\":\"MinterRegistrationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintsFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRenderer\",\"type\":\"address\"}],\"name\":\"RendererUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyManager\",\"type\":\"address\"}],\"name\":\"RoyaltyManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"TokenURIsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"fileStorageAddresses\",\"type\":\"address[]\"}],\"name\":\"addFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"}],\"name\":\"fileContents\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"}],\"name\":\"fileStorage\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"files\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generativeCodeUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSeedDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"previousBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BitRotGenerative.SeedDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_observability\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintAmountToOneRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintOneToMultipleRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintOneToOneRecipient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintSameAmountToMultipleRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintSpecificTokenToOneRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"mintSpecificTokensToOneRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observability\",\"outputs\":[{\"internalType\":\"contract IObservability\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"registerMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDefaultTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"}],\"name\":\"removeFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"removeGranularTokenManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeRoyaltyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderer\",\"outputs\":[{\"internalType\":\"contract IBitRotRenderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenGroupingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newContractUri\",\"type\":\"string\"}],\"name\":\"setContractMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyManager.Royalty\",\"name\":\"_royalty\",\"type\":\"tuple\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultTokenManager\",\"type\":\"address\"}],\"name\":\"setDefaultTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyManager.Royalty[]\",\"name\":\"_newRoyalties\",\"type\":\"tuple[]\"}],\"name\":\"setGranularRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenManagers\",\"type\":\"address[]\"}],\"name\":\"setGranularTokenManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitSupply\",\"type\":\"uint256\"}],\"name\":\"setLimitSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyManager\",\"type\":\"address\"}],\"name\":\"setRoyaltyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"unregisterMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newPreviewsBaseUri\",\"type\":\"string\"}],\"name\":\"updatePreviewsBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRenderer\",\"type\":\"address\"}],\"name\":\"updateRenderer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BitRotGenerative", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}