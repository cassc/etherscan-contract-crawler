{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nlibrary Constants {\\n    /// @notice Flooring protocol\\n    /// @dev floor token amount of 1 NFT (with 18 decimals)\\n    uint256 public constant FLOOR_TOKEN_AMOUNT = 1_000_000 ether;\\n    /// @dev The minimum vip level required to use `proxy collection`\\n    uint8 public constant PROXY_COLLECTION_VIP_THRESHOLD = 3;\\n\\n    /// @notice Rolling Bucket Constant Conf\\n    uint256 public constant BUCKET_SPAN_1 = 259199 seconds; // BUCKET_SPAN minus 1, used for rounding up\\n    uint256 public constant BUCKET_SPAN = 3 days;\\n    uint256 public constant MAX_LOCKING_BUCKET = 240;\\n    uint256 public constant MAX_LOCKING_PERIOD = 720 days; // MAX LOCKING BUCKET * BUCKET_SPAN\\n\\n    /// @notice Auction Config\\n    uint256 public constant FREE_AUCTION_PERIOD = 24 hours;\\n    uint256 public constant AUCTION_INITIAL_PERIODS = 24 hours;\\n    uint256 public constant AUCTION_COMPLETE_GRACE_PERIODS = 2 days;\\n    /// @dev minimum bid per NFT when someone starts aution on expired safebox\\n    uint256 public constant AUCTION_ON_EXPIRED_MINIMUM_BID = 1000 ether;\\n    /// @dev admin fee charged per NFT when someone starts aution on expired safebox\\n    uint256 public constant AUCTION_ON_EXPIRED_SAFEBOX_COST = 2000 ether;\\n    /// @dev admin fee charged per NFT when owner starts aution on himself safebox\\n    uint256 public constant AUCTION_COST = 2000 ether;\\n\\n    /// @notice Raffle Config\\n    uint256 public constant RAFFLE_COST = 5000 ether;\\n    uint256 public constant RAFFLE_COMPLETE_GRACE_PERIODS = 2 days;\\n\\n    /// @notice Private offer Config\\n    uint256 public constant PRIVATE_OFFER_DURATION = 24 hours;\\n    uint256 public constant PRIVATE_OFFER_COMPLETE_GRACE_DURATION = 2 days;\\n    uint256 public constant PRIVATE_OFFER_COST = 0;\\n\\n    uint256 public constant ADD_FREE_NFT_REWARD = 0;\\n\\n    /// @notice Lock/Unlock config\\n    uint256 public constant LOCKING_RAMP_UP_THRESHOLD = 20;\\n\\n    uint256 public constant LOCKING_PCT_TO_SAFEBOX_MAINT_MIN = 6000 ether;\\n    uint256 public constant LOCKING_PCT_TO_SAFEBOX_MAINT_MAX = 1728000 ether;\\n\\n    /// @notice Activities Fee Rate\\n\\n    /// @notice Fee rate used to distribute funds that collected from Auctions on expired safeboxes.\\n    /// these auction would be settled using credit token\\n    uint256 public constant FREE_AUCTION_FEE_RATE_BIPS = 2000; // 20%\\n    /// @notice Fee rate settled with credit token\\n    uint256 public constant CREDIT_FEE_RATE_BIPS = 150; // 2%\\n    /// @notice Fee rate settled with specified token\\n    uint256 public constant SPEC_FEE_RATE_BIPS = 300; // 3%\\n    /// @notice Fee rate settled with all other tokens\\n    uint256 public constant COMMON_FEE_RATE_BIPS = 500; // 5%\\n\\n    uint256 public constant VIP_LEVEL_COUNT = 8;\\n\\n    struct AuctionBidOption {\\n        uint256 extendDurationSecs;\\n        uint256 minimumRaisePct;\\n        uint256 vipLevel;\\n    }\\n\\n    function getVipLockingBuckets(uint256 vipLevel) internal pure returns (uint256 buckets) {\\n        require(vipLevel < VIP_LEVEL_COUNT);\\n        assembly {\\n            switch vipLevel\\n            case 1 { buckets := 1 }\\n            case 2 { buckets := 5 }\\n            case 3 { buckets := 20 }\\n            case 4 { buckets := 60 }\\n            case 5 { buckets := 120 }\\n            case 6 { buckets := 240 }\\n            case 7 { buckets := MAX_LOCKING_BUCKET }\\n        }\\n    }\\n\\n    function getVipLevel(uint256 totalCredit) internal pure returns (uint8) {\\n        if (totalCredit < 50_000 ether) {\\n            return 0;\\n        } else if (totalCredit < 200_000 ether) {\\n            return 1;\\n        } else if (totalCredit < 500_000 ether) {\\n            return 2;\\n        } else if (totalCredit < 2_000_000 ether) {\\n            return 3;\\n        } else if (totalCredit < 5_000_000 ether) {\\n            return 4;\\n        } else if (totalCredit < 20_000_000 ether) {\\n            return 5;\\n        } else if (totalCredit < 50_000_000 ether) {\\n            return 6;\\n        } else {\\n            return 7;\\n        }\\n    }\\n\\n    function getVipBalanceRequirements(uint256 vipLevel) internal pure returns (uint256 required) {\\n        require(vipLevel < VIP_LEVEL_COUNT);\\n\\n        assembly {\\n            switch vipLevel\\n            case 1 { required := 50000 }\\n            case 2 { required := 200000 }\\n            case 3 { required := 500000 }\\n            case 4 { required := 2000000 }\\n            case 5 { required := 5000000 }\\n            case 6 { required := 20000000 }\\n            case 7 { required := 50000000 }\\n        }\\n\\n        /// credit token should be scaled with 18 decimals(1 ether == 10**18)\\n        unchecked {\\n            return required * 1 ether;\\n        }\\n    }\\n\\n    function getBidOption(uint256 idx) internal pure returns (AuctionBidOption memory) {\\n        require(idx < 4);\\n        AuctionBidOption[4] memory bidOptions = [\\n            AuctionBidOption({extendDurationSecs: 5 minutes, minimumRaisePct: 1, vipLevel: 0}),\\n            AuctionBidOption({extendDurationSecs: 8 hours, minimumRaisePct: 10, vipLevel: 3}),\\n            AuctionBidOption({extendDurationSecs: 16 hours, minimumRaisePct: 20, vipLevel: 5}),\\n            AuctionBidOption({extendDurationSecs: 24 hours, minimumRaisePct: 40, vipLevel: 7})\\n        ];\\n        return bidOptions[idx];\\n    }\\n\\n    function raffleDurations(uint256 idx) internal pure returns (uint256 vipLevel, uint256 duration) {\\n        require(idx < 6);\\n\\n        vipLevel = idx;\\n        assembly {\\n            switch idx\\n            case 1 { duration := 1 }\\n            case 2 { duration := 2 }\\n            case 3 { duration := 3 }\\n            case 4 { duration := 5 }\\n            case 5 { duration := 7 }\\n        }\\n        unchecked {\\n            duration *= 1 days;\\n        }\\n    }\\n\\n    function getVipRequiredStakingWithDiscount(uint256 requiredStaking, uint8 vipLevel)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (vipLevel < 3) {\\n            return requiredStaking;\\n        }\\n        unchecked {\\n            /// the higher vip level, more discount for staking\\n            ///  discount range: 10% - 50%\\n            return requiredStaking * (100 - (vipLevel - 2) * 10) / 100;\\n        }\\n    }\\n\\n    function getRequiredStakingForLockRatio(uint256 locked, uint256 totalManaged) internal pure returns (uint256) {\\n        if (totalManaged < Constants.LOCKING_RAMP_UP_THRESHOLD) {\\n            return 6000 ether;\\n        }\\n\\n        unchecked {\\n            uint256 lockingRatioPct = locked * 100 / totalManaged;\\n            if (lockingRatioPct <= 40) {\\n                return 6000 ether;\\n            } else if (lockingRatioPct < 60) {\\n                return 6600 ether + ((lockingRatioPct - 40) >> 1) * 600 ether;\\n            } else if (lockingRatioPct < 70) {\\n                return 13200 ether + ((lockingRatioPct - 60) >> 1) * 1200 ether;\\n            } else if (lockingRatioPct < 80) {\\n                return 20400 ether + ((lockingRatioPct - 70) >> 1) * 2400 ether;\\n            } else if (lockingRatioPct < 90) {\\n                return 34800 ether + ((lockingRatioPct - 80) >> 1) * 4800 ether;\\n            } else if (lockingRatioPct < 100) {\\n                /// 108000 * 2^x\\n                return 108000 ether << ((lockingRatioPct - 90) >> 1);\\n            } else {\\n                return 1728000 ether;\\n            }\\n        }\\n    }\\n\\n    function getVipClaimCostWithDiscount(uint256 cost, uint8 vipLevel) internal pure returns (uint256) {\\n        if (vipLevel < 3) {\\n            return cost;\\n        }\\n\\n        unchecked {\\n            uint256 discount = 4000 ether << (vipLevel - 3);\\n            if (cost < discount) {\\n                return 0;\\n            } else {\\n                return cost - discount;\\n            }\\n        }\\n    }\\n\\n    function getClaimExpiredCost(uint256 locked, uint256 totalManaged, uint8 vipLevel)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 realCost = getClaimCost(locked, totalManaged);\\n        return getVipClaimCostWithDiscount(realCost, vipLevel);\\n    }\\n\\n    function getClaimRandomCost(uint256 locked, uint256 totalManaged, uint8 vipLevel) internal pure returns (uint256) {\\n        uint256 realCost = getClaimCost(locked, totalManaged);\\n        return getVipClaimCostWithDiscount(realCost, vipLevel);\\n    }\\n\\n    function getClaimCost(uint256 locked, uint256 totalManaged) private pure returns (uint256) {\\n        if (totalManaged < Constants.LOCKING_RAMP_UP_THRESHOLD) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            uint256 lockingRatioPct = locked * 100 / totalManaged;\\n\\n            if (lockingRatioPct <= 60) {\\n                return 0;\\n            } else if (lockingRatioPct < 100) {\\n                uint256 cost = 1 ether;\\n                assembly {\\n                    switch shr(1, sub(lockingRatioPct, 60))\\n                    case 0 { cost := mul(cost, 400) }\\n                    case 1 { cost := mul(cost, 600) }\\n                    case 2 { cost := mul(cost, 800) }\\n                    case 3 { cost := mul(cost, 1200) }\\n                    case 4 { cost := mul(cost, 1600) }\\n                    case 5 { cost := mul(cost, 2400) }\\n                    case 6 { cost := mul(cost, 3200) }\\n                    case 7 { cost := mul(cost, 4800) }\\n                    case 8 { cost := mul(cost, 6400) }\\n                    case 9 { cost := mul(cost, 9600) }\\n                    case 10 { cost := mul(cost, 12800) }\\n                    case 11 { cost := mul(cost, 19200) }\\n                    case 12 { cost := mul(cost, 25600) }\\n                    case 13 { cost := mul(cost, 38400) }\\n                    case 14 { cost := mul(cost, 51200) }\\n                    case 15 { cost := mul(cost, 76800) }\\n                    case 16 { cost := mul(cost, 102400) }\\n                    case 17 { cost := mul(cost, 153600) }\\n                    case 18 { cost := mul(cost, 204800) }\\n                    case 19 { cost := mul(cost, 307200) }\\n                }\\n                return cost;\\n            } else {\\n                return 307200 ether;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nlibrary Errors {\\n    /// @notice Safe Box error\\n    error SafeBoxHasExpire();\\n    error SafeBoxNotExist();\\n    error SafeBoxHasNotExpire();\\n    error SafeBoxAlreadyExist();\\n    error NoMatchingSafeBoxKey();\\n    error SafeBoxKeyAlreadyExist();\\n\\n    /// @notice Auction error\\n    error AuctionHasNotCompleted();\\n    error AuctionHasExpire();\\n    error AuctionBidIsNotHighEnough();\\n    error AuctionBidTokenMismatch();\\n    error AuctionSelfBid();\\n    error AuctionInvalidBidAmount();\\n    error AuctionNotExist();\\n    error SafeBoxAuctionWindowHasPassed();\\n\\n    /// @notice Activity common error\\n    error NftHasActiveActivities();\\n    error ActivityHasNotCompleted();\\n    error ActivityHasExpired();\\n    error ActivityNotExist();\\n\\n    /// @notice User account error\\n    error InsufficientCredit();\\n    error InsufficientBalanceForVipLevel();\\n    error NoPrivilege();\\n\\n    /// @notice Parameter error\\n    error InvalidParam();\\n    error NftCollectionNotSupported();\\n    error NftCollectionAlreadySupported();\\n    error ClaimableNftInsufficient();\\n    error TokenNotSupported();\\n}\\n\"\r\n    },\r\n    \"src/FlooringGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interface/IFlooring.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport {TicketRecord, SafeBoxKey, SafeBox} from \\\"./logic/Structs.sol\\\";\\n\\ncontract FlooringGetter {\\n    IFlooring public immutable _flooring;\\n\\n    uint256 constant COLLECTION_STATES_SLOT = 101;\\n    uint256 constant USER_ACCOUNTS_SLOT = 102;\\n    uint256 constant SUPPORTED_TOKENS_SLOT = 103;\\n    uint256 constant COLLECTION_PROXY_SLOT = 104;\\n\\n    uint256 constant MASK_32 = (1 << 32) - 1;\\n    uint256 constant MASK_48 = (1 << 48) - 1;\\n    uint256 constant MASK_64 = (1 << 64) - 1;\\n    uint256 constant MASK_96 = (1 << 96) - 1;\\n    uint256 constant MASK_128 = (1 << 128) - 1;\\n    uint256 constant MASK_160 = (1 << 160) - 1;\\n\\n    constructor(address flooring) {\\n        _flooring = IFlooring(flooring);\\n    }\\n\\n    function supportedToken(address token) public view returns (bool) {\\n        uint256 val = uint256(_flooring.extsload(keccak256(abi.encode(token, SUPPORTED_TOKENS_SLOT))));\\n\\n        return val != 0;\\n    }\\n\\n    function collectionProxy(address proxy) public view returns (address) {\\n        address underlying =\\n            address(uint160(uint256(_flooring.extsload(keccak256(abi.encode(proxy, COLLECTION_PROXY_SLOT))))));\\n        return underlying;\\n    }\\n\\n    function fragmentTokenOf(address collection) public view returns (address token) {\\n        bytes32 val = _flooring.extsload(keccak256(abi.encode(collection, COLLECTION_STATES_SLOT)));\\n        assembly {\\n            token := val\\n        }\\n    }\\n\\n    function collectionInfo(address collection)\\n        public\\n        view\\n        returns (\\n            address fragmentToken,\\n            uint256 freeNftLength,\\n            uint64 lastUpdatedBucket,\\n            uint64 nextKeyId,\\n            uint64 activeSafeBoxCnt,\\n            uint64 infiniteCnt,\\n            uint64 nextActivityId\\n        )\\n    {\\n        bytes memory val = _flooring.extsload(keccak256(abi.encode(collection, COLLECTION_STATES_SLOT)), 9);\\n\\n        assembly {\\n            fragmentToken := mload(add(val, 0x20))\\n            freeNftLength := mload(add(val, mul(3, 0x20)))\\n\\n            let cntVal := mload(add(val, mul(8, 0x20)))\\n            lastUpdatedBucket := and(cntVal, MASK_64)\\n            nextKeyId := and(shr(64, cntVal), MASK_64)\\n            activeSafeBoxCnt := and(shr(128, cntVal), MASK_64)\\n            infiniteCnt := and(shr(192, cntVal), MASK_64)\\n\\n            cntVal := mload(add(val, mul(9, 0x20)))\\n            nextActivityId := and(cntVal, MASK_64)\\n        }\\n    }\\n\\n    function getFreeNftIds(address collection, uint256 startIdx, uint256 size)\\n        public\\n        view\\n        returns (uint256[] memory nftIds)\\n    {\\n        bytes32 collectionSlot = keccak256(abi.encode(collection, COLLECTION_STATES_SLOT));\\n        bytes32 nftIdsSlot = bytes32(uint256(collectionSlot) + 2);\\n        uint256 freeNftLength = uint256(_flooring.extsload(nftIdsSlot));\\n\\n        if (startIdx >= freeNftLength || size == 0) {\\n            return nftIds;\\n        }\\n\\n        uint256 maxLen = freeNftLength - startIdx;\\n        if (size < maxLen) {\\n            maxLen = size;\\n        }\\n\\n        bytes memory arrVal = _flooring.extsload(bytes32(uint256(keccak256(abi.encode(nftIdsSlot))) + startIdx), maxLen);\\n\\n        nftIds = new uint256[](maxLen);\\n        assembly {\\n            for {\\n                let i := 0x20\\n                let end := mul(add(1, maxLen), 0x20)\\n            } lt(i, end) { i := add(i, 0x20) } { mstore(add(nftIds, i), mload(add(arrVal, i))) }\\n        }\\n    }\\n\\n    function getSafeBox(address collection, uint256 nftId) public view returns (SafeBox memory safeBox) {\\n        bytes32 collectionSlot = keccak256(abi.encode(underlyingCollection(collection), COLLECTION_STATES_SLOT));\\n        bytes32 safeBoxMapSlot = bytes32(uint256(collectionSlot) + 3);\\n\\n        uint256 val = uint256(_flooring.extsload(keccak256(abi.encode(nftId, safeBoxMapSlot))));\\n\\n        safeBox.keyId = uint64(val & MASK_64);\\n        safeBox.expiryTs = uint32(val >> 64);\\n        safeBox.owner = address(uint160(val >> 96));\\n    }\\n\\n    function getAuction(address collection, uint256 nftId)\\n        public\\n        view\\n        returns (\\n            uint96 endTime,\\n            address bidTokenAddress,\\n            uint128 minimumBid,\\n            uint128 lastBidAmount,\\n            address lastBidder,\\n            address triggerAddress,\\n            bool isSelfTriggered,\\n            uint64 activityId,\\n            uint32 feeRateBips\\n        )\\n    {\\n        bytes32 collectionSlot = keccak256(abi.encode(underlyingCollection(collection), COLLECTION_STATES_SLOT));\\n        bytes32 auctionMapSlot = bytes32(uint256(collectionSlot) + 4);\\n\\n        bytes memory val = _flooring.extsload(keccak256(abi.encode(nftId, auctionMapSlot)), 4);\\n\\n        assembly {\\n            let slotVal := mload(add(val, 0x20))\\n            endTime := and(slotVal, MASK_96)\\n            bidTokenAddress := shr(96, slotVal)\\n\\n            slotVal := mload(add(val, 0x40))\\n            minimumBid := and(slotVal, MASK_96)\\n            triggerAddress := shr(96, slotVal)\\n\\n            slotVal := mload(add(val, 0x60))\\n            lastBidAmount := and(slotVal, MASK_96)\\n            lastBidder := shr(96, slotVal)\\n\\n            slotVal := mload(add(val, 0x80))\\n            isSelfTriggered := and(slotVal, 0xFF)\\n            activityId := and(shr(8, slotVal), MASK_64)\\n            feeRateBips := and(shr(72, slotVal), MASK_32)\\n        }\\n    }\\n\\n    function getRaffle(address collection, uint256 nftId)\\n        public\\n        view\\n        returns (\\n            uint48 endTime,\\n            uint48 maxTickets,\\n            address token,\\n            uint96 ticketPrice,\\n            uint96 collectedFund,\\n            uint64 activityId,\\n            address owner,\\n            uint48 ticketSold,\\n            uint32 feeRateBips,\\n            bool isSettling,\\n            uint256 ticketsArrLen\\n        )\\n    {\\n        bytes32 raffleMapSlot =\\n            bytes32(uint256(keccak256(abi.encode(underlyingCollection(collection), COLLECTION_STATES_SLOT))) + 5);\\n\\n        bytes memory val = _flooring.extsload(keccak256(abi.encode(nftId, raffleMapSlot)), 4);\\n\\n        assembly {\\n            let slotVal := mload(add(val, 0x20))\\n            endTime := and(slotVal, MASK_48)\\n            maxTickets := and(shr(48, slotVal), MASK_48)\\n            token := and(shr(96, slotVal), MASK_160)\\n\\n            slotVal := mload(add(val, 0x40))\\n            ticketPrice := and(slotVal, MASK_96)\\n            collectedFund := and(shr(96, slotVal), MASK_96)\\n            activityId := and(shr(192, slotVal), MASK_64)\\n\\n            slotVal := mload(add(val, 0x60))\\n            owner := and(slotVal, MASK_160)\\n            ticketSold := and(shr(160, slotVal), MASK_48)\\n            feeRateBips := and(shr(208, slotVal), MASK_32)\\n            isSettling := and(shr(240, slotVal), 0xFF)\\n\\n            ticketsArrLen := mload(add(val, 0x80))\\n        }\\n    }\\n\\n    function getRaffleTicketRecords(address collection, uint256 nftId, uint256 startIdx, uint256 size)\\n        public\\n        view\\n        returns (TicketRecord[] memory tickets)\\n    {\\n        bytes32 collectionSlot = keccak256(abi.encode(underlyingCollection(collection), COLLECTION_STATES_SLOT));\\n        bytes32 raffleMapSlot = bytes32(uint256(collectionSlot) + 5);\\n        bytes32 ticketRecordsSlot = bytes32(uint256(keccak256(abi.encode(nftId, raffleMapSlot))) + 3);\\n        uint256 totalRecordsLen = uint256(_flooring.extsload(ticketRecordsSlot));\\n\\n        if (startIdx >= totalRecordsLen || size == 0) {\\n            return tickets;\\n        }\\n\\n        uint256 maxLen = totalRecordsLen - startIdx;\\n        if (size < maxLen) {\\n            maxLen = size;\\n        }\\n\\n        bytes memory arrVal =\\n            _flooring.extsload(bytes32(uint256(keccak256(abi.encode(ticketRecordsSlot))) + startIdx), maxLen);\\n\\n        tickets = new TicketRecord[](maxLen);\\n        for (uint256 i; i < maxLen; ++i) {\\n            uint256 element;\\n            assembly {\\n                element := mload(add(arrVal, mul(add(i, 1), 0x20)))\\n            }\\n            tickets[i].buyer = address(uint160(element & MASK_160));\\n            tickets[i].startIdx = uint48((element >> 160) & MASK_48);\\n            tickets[i].endIdx = uint48((element >> 208) & MASK_48);\\n        }\\n    }\\n\\n    function getPrivateOffer(address collection, uint256 nftId)\\n        public\\n        view\\n        returns (uint96 endTime, address token, uint96 price, address owner, address buyer, uint64 activityId)\\n    {\\n        bytes32 collectionSlot = keccak256(abi.encode(underlyingCollection(collection), COLLECTION_STATES_SLOT));\\n        bytes32 offerMapSlot = bytes32(uint256(collectionSlot) + 6);\\n\\n        bytes memory val = _flooring.extsload(keccak256(abi.encode(nftId, offerMapSlot)), 3);\\n\\n        assembly {\\n            let slotVal := mload(add(val, 0x20))\\n            endTime := and(slotVal, MASK_96)\\n            token := and(shr(96, slotVal), MASK_160)\\n\\n            slotVal := mload(add(val, 0x40))\\n            price := and(slotVal, MASK_96)\\n            owner := and(shr(96, slotVal), MASK_160)\\n\\n            slotVal := mload(add(val, 0x60))\\n            buyer := and(slotVal, MASK_160)\\n            activityId := and(shr(160, slotVal), MASK_64)\\n        }\\n    }\\n\\n    function tokenBalance(address user, address token) public view returns (uint256) {\\n        bytes32 userSlot = keccak256(abi.encode(user, USER_ACCOUNTS_SLOT));\\n        bytes32 tokenMapSlot = bytes32(uint256(userSlot) + 4);\\n\\n        bytes32 balance = _flooring.extsload(keccak256(abi.encode(token, tokenMapSlot)));\\n\\n        return uint256(balance);\\n    }\\n\\n    function userAccount(address user)\\n        public\\n        view\\n        returns (\\n            uint256 minMaintCredit,\\n            address firstCollection,\\n            uint8 minMaintVipLevel,\\n            uint256[] memory vipKeyCnts,\\n            uint256 lockedCredit\\n        )\\n    {\\n        bytes32 userSlot = keccak256(abi.encode(user, USER_ACCOUNTS_SLOT));\\n\\n        bytes memory val = _flooring.extsload(userSlot, 3);\\n\\n        uint256 vipInfo;\\n        assembly {\\n            let slotVal := mload(add(val, 0x20))\\n            minMaintCredit := and(slotVal, MASK_96)\\n            firstCollection := and(shr(96, slotVal), MASK_160)\\n\\n            vipInfo := mload(add(val, 0x40))\\n            lockedCredit := mload(add(val, 0x60))\\n        }\\n\\n        vipKeyCnts = new uint256[](Constants.VIP_LEVEL_COUNT);\\n        minMaintVipLevel = uint8((vipInfo >> 240) & 0xFF);\\n        for (uint256 i; i < Constants.VIP_LEVEL_COUNT; ++i) {\\n            vipKeyCnts[i] = (vipInfo >> (i * 24)) & 0xFFFFFF;\\n        }\\n    }\\n\\n    function userCollection(address user, address collection, uint256 nftId)\\n        public\\n        view\\n        returns (uint256 totalLockingCredit, address next, SafeBoxKey memory key)\\n    {\\n        bytes32 userSlot = keccak256(abi.encode(user, USER_ACCOUNTS_SLOT));\\n        bytes32 collectionSlot = keccak256(abi.encode(underlyingCollection(collection), bytes32(uint256(userSlot) + 3)));\\n        bytes32 collectionKeysSlot = keccak256(abi.encode(nftId, collectionSlot));\\n\\n        uint256 val = uint256(_flooring.extsload(bytes32(uint256(collectionSlot) + 1)));\\n        totalLockingCredit = (val & MASK_96);\\n        next = address(uint160((val >> 96) & MASK_160));\\n\\n        val = uint256(_flooring.extsload(collectionKeysSlot));\\n        key.lockingCredit = uint96(val & MASK_96);\\n        key.keyId = uint64((val >> 96) & MASK_64);\\n        key.vipLevel = uint8((val >> 160) & 0xFF);\\n    }\\n\\n    function underlyingCollection(address collection) private view returns (address) {\\n        address underlying = collectionProxy(collection);\\n        if (underlying == address(0)) {\\n            return collection;\\n        }\\n        return underlying;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/FlooringPeriphery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {UUPSUpgradeable} from \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\n\\nimport {IFlooring} from \\\"./interface/IFlooring.sol\\\";\\nimport {OwnedUpgradeable} from \\\"./library/OwnedUpgradeable.sol\\\";\\nimport {CurrencyTransfer} from \\\"./library/CurrencyTransfer.sol\\\";\\nimport {ERC721Transfer} from \\\"./library/ERC721Transfer.sol\\\";\\nimport {TicketRecord, SafeBoxKey, SafeBox} from \\\"./logic/Structs.sol\\\";\\nimport \\\"./logic/SafeBox.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport {FlooringGetter} from \\\"./FlooringGetter.sol\\\";\\n\\ncontract FlooringPeriphery is FlooringGetter, OwnedUpgradeable, UUPSUpgradeable, IERC721Receiver {\\n    address public immutable uniswapRouter;\\n    address public immutable WETH9;\\n\\n    constructor(address flooring, address uniswapV3Router, address _WETH9) FlooringGetter(flooring) {\\n        uniswapRouter = uniswapV3Router;\\n        WETH9 = _WETH9;\\n    }\\n\\n    // required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function initialize() public initializer {\\n        __Owned_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    function fragmentAndSell(\\n        address collection,\\n        uint256[] calldata tokenIds,\\n        ISwapRouter.ExactInputParams memory swapParam\\n    ) external returns (uint256 swapOut) {\\n        uint256 fragmentTokenAmount = tokenIds.length * Constants.FLOOR_TOKEN_AMOUNT;\\n\\n        address floorToken = fragmentTokenOf(collection);\\n\\n        /// approve all\\n        approveAllERC721(collection, address(_flooring));\\n        approveAllERC20(floorToken, uniswapRouter, fragmentTokenAmount);\\n\\n        /// transfer tokens into this\\n        ERC721Transfer.safeBatchTransferFrom(collection, msg.sender, address(this), tokenIds);\\n\\n        /// fragment\\n        _flooring.fragmentNFTs(collection, tokenIds, address(this));\\n\\n        swapOut = ISwapRouter(uniswapRouter).exactInput(swapParam);\\n    }\\n\\n    function buyAndClaimExpired(\\n        address collection,\\n        uint256[] calldata tokenIds,\\n        address swapTokenIn,\\n        ISwapRouter.ExactOutputParams memory swapParam\\n    ) external payable returns (uint256 tokenCost) {\\n        uint256 fragmentTokenAmount = tokenIds.length * Constants.FLOOR_TOKEN_AMOUNT;\\n\\n        address floorToken = fragmentTokenOf(collection);\\n\\n        approveAllERC20(floorToken, address(_flooring), fragmentTokenAmount);\\n\\n        tokenCost = swapExactOutput(msg.sender, swapTokenIn, swapParam);\\n\\n        _flooring.claimExpiredNfts(collection, tokenIds, 0, msg.sender);\\n    }\\n\\n    function buyAndClaimVault(\\n        address collection,\\n        uint256 claimCnt,\\n        address swapTokenIn,\\n        ISwapRouter.ExactOutputParams memory swapParam\\n    ) external payable returns (uint256 tokenCost) {\\n        uint256 fragmentTokenAmount = claimCnt * Constants.FLOOR_TOKEN_AMOUNT;\\n\\n        address floorToken = fragmentTokenOf(collection);\\n\\n        approveAllERC20(floorToken, address(_flooring), fragmentTokenAmount);\\n\\n        tokenCost = swapExactOutput(msg.sender, swapTokenIn, swapParam);\\n\\n        _flooring.claimRandomNFT(collection, claimCnt, 0, msg.sender);\\n    }\\n\\n    function swapExactOutput(address payer, address tokenIn, ISwapRouter.ExactOutputParams memory param)\\n        internal\\n        returns (uint256 amountIn)\\n    {\\n        if (tokenIn == WETH9 && address(this).balance >= param.amountInMaximum) {\\n            amountIn = ISwapRouter(uniswapRouter).exactOutput{value: param.amountInMaximum}(param);\\n            IPeripheryPayments(uniswapRouter).refundETH();\\n            if (address(this).balance > 0) {\\n                CurrencyTransfer.safeTransfer(CurrencyTransfer.NATIVE, payer, address(this).balance);\\n            }\\n        } else {\\n            approveAllERC20(tokenIn, uniswapRouter, param.amountInMaximum);\\n            CurrencyTransfer.safeTransferFrom(tokenIn, payer, address(this), param.amountInMaximum);\\n            amountIn = ISwapRouter(uniswapRouter).exactOutput(param);\\n\\n            if (param.amountInMaximum > amountIn) {\\n                CurrencyTransfer.safeTransfer(tokenIn, payer, param.amountInMaximum - amountIn);\\n            }\\n        }\\n    }\\n\\n    function approveAllERC20(address token, address spender, uint256 desireAmount) private {\\n        if (desireAmount == 0) {\\n            return;\\n        }\\n        uint256 allowance = IERC20(token).allowance(address(this), spender);\\n        if (allowance < desireAmount) {\\n            IERC20(token).approve(spender, type(uint256).max);\\n        }\\n    }\\n\\n    function approveAllERC721(address collection, address spender) private {\\n        bool approved = IERC721(collection).isApprovedForAll(address(this), spender);\\n        if (!approved) {\\n            IERC721(collection).setApprovalForAll(spender, true);\\n        }\\n    }\\n\\n    function onERC721Received(address, /*operator*/ address, /*from*/ uint256, /*tokenId*/ bytes calldata /*data*/ )\\n        external\\n        pure\\n        override\\n        returns (bytes4)\\n    {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interface/IFlooring.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./IMulticall.sol\\\";\\n\\ninterface IFlooring is IERC721Receiver, IMulticall {\\n    /// Admin Operations\\n\\n    /// @notice Add new collection for Flooring Protocol\\n    function supportNewCollection(address _originalNFT, address fragmentToken) external;\\n\\n    /// @notice Add new token which will be used as settlement token in Flooring Protocol\\n    /// @param addOrRemove `true` means add token, `false` means remove token\\n    function supportNewToken(address _tokenAddress, bool addOrRemove) external;\\n\\n    /// @notice set proxy collection config\\n    /// Note. the `tokenId`s of the proxy collection and underlying collection must be correspond one by one\\n    /// eg. Paraspace Derivative Token BAYC(nBAYC) -> BAYC\\n    function setCollectionProxy(address proxyCollection, address underlyingCollection) external;\\n\\n    /// @notice withdraw platform fee accumulated.\\n    /// Note. withdraw from `address(this)`'s account.\\n    function withdrawPlatformFee(address token, uint256 amount) external;\\n\\n    /// @notice Deposit and lock credit token on behalf of receiver\\n    /// user can not withdraw these tokens until `unlockCredit` is called.\\n    function addAndLockCredit(address receiver, uint256 amount) external;\\n\\n    /// @notice Unlock user credit token to allow withdraw\\n    /// used to release investors' funds as time goes\\n    /// Note. locked credit can be used to operate safeboxes(lock/unlock...)\\n    function unlockCredit(address receiver, uint256 amount) external;\\n\\n    /// User Operations\\n\\n    /// @notice User deposits token to the Floor Contract\\n    /// @param onBehalfOf deposit token into `onBehalfOf`'s account.(note. the tokens of msg.sender will be transfered)\\n    function addTokens(address onBehalfOf, address token, uint256 amount) external payable;\\n\\n    /// @notice User removes token from Floor Contract\\n    /// @param receiver who will receive the funds.(note. the token of msg.sender will be transfered)\\n    function removeTokens(address token, uint256 amount, address receiver) external;\\n\\n    /// @notice Lock specified `nftIds` into Flooring Safeboxes and receive corresponding Fragment Tokens of the `collection`\\n    /// @param expiryTs when the safeboxes expired, `0` means infinite lock without expiry\\n    /// @param vipLevel vip tier required in this lock operation\\n    /// @param maxCredit maximum credit can be locked in this operation, if real cost exceeds this limit, the tx will fail\\n    /// @param onBehalfOf who will receive the safebox and fragment tokens.(note. the NFTs of the msg.sender will be transfered)\\n    function lockNFTs(\\n        address collection,\\n        uint256[] memory nftIds,\\n        uint256 expiryTs,\\n        uint256 vipLevel,\\n        uint256 maxCredit,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /// @notice Extend the exist safeboxes with longer lock duration with more credit token staked\\n    /// @param expiryTs new expiry timestamp, should bigger than previous expiry\\n    function extendKeys(\\n        address collection,\\n        uint256[] memory nftIds,\\n        uint256 expiryTs,\\n        uint256 vipLevel,\\n        uint256 maxCredit\\n    ) external returns (uint256);\\n\\n    /// @notice Unlock specified `nftIds` which had been locked previously\\n    ///         sender's wallet should have enough Fragment Tokens of the `collection` which will be burned to redeem the NFTs\\n    /// @param expiryTs the latest nft's expiry, we need this to clear locking records\\n    ///                 if the value smaller than the latest nft's expiry, the tx will fail\\n    ///                 if part of `nftIds` were locked infinitely, just skip these expiry\\n    /// @param receiver who will receive the NFTs.\\n    ///                 note. - The safeboxes of the msg.sender will be removed.\\n    ///                       - The Fragment Tokens of the msg.sender will be burned.\\n    function unlockNFTs(address collection, uint256 expiryTs, uint256[] memory nftIds, address receiver) external;\\n\\n    /// @notice Fragment specified `nftIds` into Floor Vault and receive Fragment Tokens without any locking\\n    ///         after fragmented, any one has enough Fragment Tokens can redeem there `nftIds`\\n    /// @param onBehalfOf who will receive the fragment tokens.(note. the NFTs of the msg.sender will be transfered)\\n    function fragmentNFTs(address collection, uint256[] memory nftIds, address onBehalfOf) external;\\n\\n    /// @notice Claim `nftIds` which had been locked and had expired\\n    ///         sender's wallet should have enough Fragment Tokens of the `collection` which will be burned to redeem the NFTs\\n    /// @param maxCredit maximum credit can be costed in this operation, if real cost exceeds this limit, the tx will fail\\n    /// @param receiver who will receive the NFTs.\\n    ///                 note. - the msg.sender will pay the redemption cost.\\n    ///                       - The Fragment Tokens of the msg.sender will be burned.\\n    function claimExpiredNfts(address collection, uint256[] memory nftIds, uint256 maxCredit, address receiver)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Randomly claim `claimCnt` NFTs from Floor Vault\\n    ///         sender's wallet should have enough Fragment Tokens of the `collection` which will be burned to redeem the NFTs\\n    /// @param maxCredit maximum credit can be costed in this operation, if real cost exceeds this limit, the tx will fail\\n    /// @param receiver who will receive the NFTs.\\n    ///                 note. - the msg.sender will pay the redemption cost.\\n    ///                       - The Fragment Tokens of the msg.sender will be burned.\\n    function claimRandomNFT(address collection, uint256 claimCnt, uint256 maxCredit, address receiver)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Start auctions on specified `nftIds` with an initial bid price(`bidAmount`)\\n    ///         This kind of auctions will be settled with Floor Credit Token\\n    /// @param bidAmount initial bid price\\n    function initAuctionOnExpiredSafeBoxes(address collection, uint256[] memory nftIds, uint256 bidAmount) external;\\n\\n    /// @notice Owner starts auctions on his locked Safeboxes\\n    /// @param maxExpiry the latest nft's expiry, we need this to clear locking records\\n    /// @param token which token should be used to settle auctions(bid, settle)\\n    /// @param minimumBid minimum bid price when someone place a bid on the auction\\n    function ownerInitAuctions(\\n        address collection,\\n        uint256[] memory nftIds,\\n        uint256 maxExpiry,\\n        address token,\\n        uint256 minimumBid\\n    ) external;\\n\\n    /// @notice Place a bid on specified `nftId`'s action\\n    /// @param bidAmount bid price\\n    /// @param bidOptionIdx which option used to extend auction expiry and bid price\\n    function placeBidOnAuction(address collection, uint256 nftId, uint256 bidAmount, uint256 bidOptionIdx) external;\\n\\n    /// @notice Place a bid on specified `nftId`'s action\\n    /// @param token which token should be transfered to the Flooring for bidding. `0x0` means ETH(native)\\n    /// @param amountToTransfer how many `token` should to transfered\\n    function placeBidOnAuction(\\n        address collection,\\n        uint256 nftId,\\n        uint256 bidAmount,\\n        uint256 bidOptionIdx,\\n        address token,\\n        uint256 amountToTransfer\\n    ) external payable;\\n\\n    /// @notice Settle auctions of `nftIds`\\n    function settleAuctions(address collection, uint256[] memory nftIds) external;\\n\\n    struct RaffleInitParam {\\n        address collection;\\n        uint256[] nftIds;\\n        /// @notice which token used to buy and settle raffle\\n        address ticketToken;\\n        /// @notice price per ticket\\n        uint96 ticketPrice;\\n        /// @notice max tickets amount can be sold\\n        uint32 maxTickets;\\n        /// @notice durationIdx used to get how long does raffles last\\n        uint256 duration;\\n        /// @notice the largest epxiry of nfts, we need this to clear locking records\\n        uint256 maxExpiry;\\n    }\\n\\n    /// @notice Owner start raffles on locked `nftIds`\\n    function ownerInitRaffles(RaffleInitParam memory param) external;\\n\\n    /// @notice Buy `nftId`'s raffle tickets\\n    /// @param ticketCnt how many tickets should be bought in this operation\\n    function buyRaffleTickets(address collectionId, uint256 nftId, uint256 ticketCnt) external;\\n\\n    /// @notice Buy `nftId`'s raffle tickets\\n    /// @param token which token should be transfered to the Flooring for buying. `0x0` means ETH(native)\\n    /// @param amountToTransfer how many `token` should to transfered\\n    function buyRaffleTickets(\\n        address collectionId,\\n        uint256 nftId,\\n        uint256 ticketCnt,\\n        address token,\\n        uint256 amountToTransfer\\n    ) external payable;\\n\\n    /// @notice Settle raffles of `nftIds`\\n    function settleRaffles(address collectionId, uint256[] memory nftIds) external;\\n\\n    struct PrivateOfferInitParam {\\n        address collection;\\n        uint256[] nftIds;\\n        /// @notice the largest epxiry of nfts, we need this to clear locking records\\n        uint256 maxExpiry;\\n        /// @notice who will receive the otc offers\\n        address receiver;\\n        /// @notice which token used to settle offers\\n        address token;\\n        /// @notice price of the offers\\n        uint96 price;\\n    }\\n\\n    /// @notice Owner start private offers(otc) on locked `nftIds`\\n    function ownerInitPrivateOffers(PrivateOfferInitParam memory param) external;\\n\\n    /// @notice Owner or Receiver cancel the private offers of `nftIds`\\n    function cancelPrivateOffers(address collectionId, uint256[] memory nftIds) external;\\n\\n    /// @notice Receiver accept the private offers of `nftIds`\\n    function buyerAcceptPrivateOffers(address collectionId, uint256[] memory nftIds) external;\\n\\n    /// @notice Receiver accept the private offers of `nftIds`\\n    /// @param token which token should be transfered to the Flooring for buying. `0x0` means ETH(native)\\n    /// @param amountToTransfer how many `token` should to transfered\\n    function buyerAcceptPrivateOffers(\\n        address collectionId,\\n        uint256[] memory nftIds,\\n        address token,\\n        uint256 amountToTransfer\\n    ) external payable;\\n\\n    /// @notice Clear expired or mismatching safeboxes of `nftIds` in user account\\n    /// @param onBehalfOf whose account will be recalculated\\n    /// @return credit amount has been released\\n    function removeExpiredKeyAndRestoreCredit(address collection, uint256[] memory nftIds, address onBehalfOf)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Update user's staking credit status by iterating all active collections in user account\\n    /// @param onBehalfOf whose account will be recalculated\\n    /// @return availableCredit how many credit available to use after this opeartion\\n    function recalculateAvailableCredit(address onBehalfOf) external returns (uint256 availableCredit);\\n\\n    /// Util operations\\n\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param slot Key of slot to sload\\n    /// @return value The value of the slot as bytes32\\n    function extsload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param slot Key of slot to start sloading from\\n    /// @param nSlots Number of slots to load into return value\\n    /// @return value The value of the sload-ed slots concatenated as dynamic bytes\\n    function extsload(bytes32 slot, uint256 nSlots) external view returns (bytes memory value);\\n\\n    function creditToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interface/IFragmentToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface IFragmentToken {\\n    error CallerIsNotTrustedContract();\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interface/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedMulticall();\\n\\n    struct CallData {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n\\n    /// @notice Allow trusted caller to call specified addresses through the Contract\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param calls The encoded function data and target for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via calls\\n    function extMulticall(CallData[] calldata calls) external returns (bytes[] memory);\\n}\\n\"\r\n    },\r\n    \"src/library/CurrencyTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nlibrary CurrencyTransfer {\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n    /// @notice Thrown when an NATIVE transfer fails\\n    error NativeTransferFailed();\\n\\n    address public constant NATIVE = address(0);\\n\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        // ref\\n        // https://docs.soliditylang.org/en/latest/internals/layout_in_memory.html\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/v7/src/utils/SafeTransferLib.sol\\n        // https://github.com/Uniswap/v4-core/blob/main/contracts/types/Currency.sol\\n        bool success;\\n\\n        if (token == NATIVE) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // We'll write our calldata to this slot below, but restore it later.\\n                let memPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(4, to) // Append the \\\"to\\\" argument.\\n                mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                        // Counterintuitively, this call() must be positioned after the or() in the\\n                        // surrounding and() because and() evaluates its arguments from right to left.\\n                        call(gas(), token, 0, 0, 68, 0, 32)\\n                    )\\n\\n                mstore(0x60, 0) // Restore the zero slot to zero.\\n                mstore(0x40, memPointer) // Restore the memPointer.\\n            }\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, from) // Append and mask the \\\"from\\\" argument.\\n            mstore(36, to) // Append and mask the \\\"to\\\" argument.\\n            // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n            mstore(68, amount)\\n\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                    // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                    // Counterintuitively, this call must be positioned second to the or() call in the\\n                    // surrounding and() call or else returndatasize() will be zero during the computation.\\n                    call(gas(), token, 0, 0, 100, 0, 32)\\n                )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        if (!success) revert ERC20TransferFailed();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/library/ERC721Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nlibrary ERC721Transfer {\\n    /// @notice Thrown when an ERC721 transfer fails\\n    error ERC721TransferFailed();\\n\\n    function safeTransferFrom(address collection, address from, address to, uint256 tokenId) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x42842e0e00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, from) // Append and mask the \\\"from\\\" argument.\\n            mstore(36, to) // Append and mask the \\\"to\\\" argument.\\n            // Append the \\\"tokenId\\\" argument. Masking not required as it's a full 32 byte type.\\n            mstore(68, tokenId)\\n\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                    // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                    // Counterintuitively, this call must be positioned second to the or() call in the\\n                    // surrounding and() call or else returndatasize() will be zero during the computation.\\n                    call(gas(), collection, 0, 0, 100, 0, 32)\\n                )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        if (!success) revert ERC721TransferFailed();\\n    }\\n\\n    function safeBatchTransferFrom(address collection, address from, address to, uint256[] memory tokenIds) internal {\\n        unchecked {\\n            uint256 len = tokenIds.length;\\n            for (uint256 i; i < len; ++i) {\\n                safeTransferFrom(collection, from, to, tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/library/OwnedUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract OwnedUpgradeable {\\n    error Unauthorized();\\n\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) revert Unauthorized();\\n\\n        _;\\n    }\\n\\n    function __Owned_init() internal {\\n        owner = msg.sender;\\n    }\\n\\n    function setOwner(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/logic/SafeBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {SafeBox, SafeBoxKey} from \\\"./Structs.sol\\\";\\n\\nlibrary SafeBoxLib {\\n    uint64 public constant SAFEBOX_KEY_NOTATION = type(uint64).max;\\n\\n    function isInfiniteSafeBox(SafeBox storage safeBox) internal view returns (bool) {\\n        return safeBox.expiryTs == 0;\\n    }\\n\\n    function isSafeBoxExpired(SafeBox storage safeBox) internal view returns (bool) {\\n        return safeBox.expiryTs != 0 && safeBox.expiryTs < block.timestamp;\\n    }\\n\\n    function _isSafeBoxExpired(SafeBox memory safeBox) internal view returns (bool) {\\n        return safeBox.expiryTs != 0 && safeBox.expiryTs < block.timestamp;\\n    }\\n\\n    function isKeyMatchingSafeBox(SafeBox storage safeBox, SafeBoxKey storage safeBoxKey)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return safeBox.keyId == safeBoxKey.keyId;\\n    }\\n\\n    function _isKeyMatchingSafeBox(SafeBox memory safeBox, SafeBoxKey memory safeBoxKey) internal pure returns (bool) {\\n        return safeBox.keyId == safeBoxKey.keyId;\\n    }\\n\\n    function encodeSafeBoxKey(SafeBoxKey memory key) internal pure returns (uint256) {\\n        uint256 val = key.lockingCredit;\\n        val |= (uint256(key.keyId) << 96);\\n        val |= (uint256(key.vipLevel) << 160);\\n        return val;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/logic/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interface/IFragmentToken.sol\\\";\\n\\nstruct SafeBox {\\n    /// Either matching a key OR Constants.SAFEBOX_KEY_NOTATION meaning temporarily\\n    /// held by a bidder in auction.\\n    uint64 keyId;\\n    /// The timestamp that the safe box expires.\\n    uint32 expiryTs;\\n    /// The owner of the safebox. It maybe outdated due to expiry\\n    address owner;\\n}\\n\\nstruct PrivateOffer {\\n    /// private offer end time\\n    uint96 endTime;\\n    /// which token used to accpet the offer\\n    address token;\\n    /// price of the offer\\n    uint96 price;\\n    address owner;\\n    /// who should receive the offer\\n    address buyer;\\n    uint64 activityId;\\n}\\n\\nstruct AuctionInfo {\\n    /// The end time for the auction.\\n    uint96 endTime;\\n    /// Bid token address.\\n    address bidTokenAddress;\\n    /// Minimum Bid.\\n    uint96 minimumBid;\\n    /// The person who trigger the auction at the beginning.\\n    address triggerAddress;\\n    uint96 lastBidAmount;\\n    address lastBidder;\\n    /// Whether the auction is triggered by the NFT owner itself\uff1f\\n    bool isSelfTriggered;\\n    uint64 activityId;\\n    uint32 feeRateBips;\\n}\\n\\nstruct TicketRecord {\\n    /// who buy the tickets\\n    address buyer;\\n    /// Start index of tickets\\n    /// [startIdx, endIdx)\\n    uint48 startIdx;\\n    /// End index of tickets\\n    uint48 endIdx;\\n}\\n\\nstruct RaffleInfo {\\n    /// raffle end time\\n    uint48 endTime;\\n    /// max tickets amount the raffle can sell\\n    uint48 maxTickets;\\n    /// which token used to buy the raffle tickets\\n    address token;\\n    /// price per ticket\\n    uint96 ticketPrice;\\n    /// total funds collected by selling tickets\\n    uint96 collectedFund;\\n    uint64 activityId;\\n    address owner;\\n    /// total sold tickets amount\\n    uint48 ticketSold;\\n    uint32 feeRateBips;\\n    /// whether the raffle is being settling\\n    bool isSettling;\\n    /// tickets sold records\\n    TicketRecord[] tickets;\\n}\\n\\nstruct CollectionState {\\n    /// The address of the Floor Token cooresponding to the NFTs.\\n    IFragmentToken floorToken;\\n    /// Records the active safe box in each time bucket.\\n    mapping(uint256 => uint256) countingBuckets;\\n    /// Stores all of the NFTs that has been fragmented but *without* locked up limit.\\n    uint256[] freeTokenIds;\\n    /// Huge map for all the `SafeBox`es in one collection.\\n    mapping(uint256 => SafeBox) safeBoxes;\\n    /// Stores all the ongoing auctions: nftId => `AuctionInfo`.\\n    mapping(uint256 => AuctionInfo) activeAuctions;\\n    /// Stores all the ongoing raffles: nftId => `RaffleInfo`.\\n    mapping(uint256 => RaffleInfo) activeRaffles;\\n    /// Stores all the ongoing private offers: nftId => `PrivateOffer`.\\n    mapping(uint256 => PrivateOffer) activePrivateOffers;\\n    /// The last bucket time the `countingBuckets` is updated.\\n    uint64 lastUpdatedBucket;\\n    /// Next Key Id. This should start from 1, we treat key id `SafeboxLib.SAFEBOX_KEY_NOTATION` as temporarily\\n    /// being used for activities(auction/raffle).\\n    uint64 nextKeyId;\\n    /// Active Safe Box Count.\\n    uint64 activeSafeBoxCnt;\\n    /// The number of infinite lock count.\\n    uint64 infiniteCnt;\\n    /// Next Activity Id. This should start from 1\\n    uint64 nextActivityId;\\n}\\n\\nstruct UserFloorAccount {\\n    /// @notice it should be maximum of the `totalLockingCredit` across all collections\\n    uint96 minMaintCredit;\\n    /// @notice used to iterate collection accounts\\n    /// packed with `minMaintCredit` to reduce storage slot access\\n    address firstCollection;\\n    /// @notice user vip level related info\\n    /// 0 - 239 bits: store SafeBoxKey Count per vip level, per level using 24 bits\\n    /// 240 - 247 bits: store minMaintVipLevel\\n    /// 248 - 255 bits: remaining\\n    uint256 vipInfo;\\n    /// @notice Locked Credit amount which cannot be withdrawn and will be released as time goes.\\n    uint256 lockedCredit;\\n    mapping(address => CollectionAccount) accounts;\\n    mapping(address => uint256) tokenAmounts;\\n}\\n\\nstruct SafeBoxKey {\\n    /// locked credit amount of this safebox\\n    uint96 lockingCredit;\\n    /// corresponding key id of the safebox\\n    uint64 keyId;\\n    /// which vip level the safebox locked\\n    uint8 vipLevel;\\n}\\n\\nstruct CollectionAccount {\\n    mapping(uint256 => SafeBoxKey) keys;\\n    /// total locking credit of all `keys` in this collection\\n    uint96 totalLockingCredit;\\n    /// track next collection as linked list\\n    address next;\\n}\\n\\n/// Internal Structure\\nstruct LockParam {\\n    address proxyCollection;\\n    address collection;\\n    uint256[] nftIds;\\n    uint256 expiryTs;\\n    uint256 vipLevel;\\n    uint256 maxCreditCost;\\n    address creditToken;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flooring\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV3Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_flooring\",\"outputs\":[{\"internalType\":\"contract IFlooring\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"swapTokenIn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"swapParam\",\"type\":\"tuple\"}],\"name\":\"buyAndClaimExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCost\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimCnt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTokenIn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"swapParam\",\"type\":\"tuple\"}],\"name\":\"buyAndClaimVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCost\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"collectionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fragmentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freeNftLength\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lastUpdatedBucket\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextKeyId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"activeSafeBoxCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"infiniteCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextActivityId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"collectionProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"swapParam\",\"type\":\"tuple\"}],\"name\":\"fragmentAndSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"fragmentTokenOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"bidTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minimumBid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastBidAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"lastBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"triggerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSelfTriggered\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"activityId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"feeRateBips\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getFreeNftIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getPrivateOffer\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"endTime\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"activityId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getRaffle\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"maxTickets\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"ticketPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"collectedFund\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"activityId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"ticketSold\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"feeRateBips\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isSettling\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ticketsArrLen\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getRaffleTicketRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endIdx\",\"type\":\"uint48\"}],\"internalType\":\"struct TicketRecord[]\",\"name\":\"tickets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getSafeBox\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"keyId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"expiryTs\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct SafeBox\",\"name\":\"safeBox\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"supportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minMaintCredit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"firstCollection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"minMaintVipLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"vipKeyCnts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lockedCredit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"userCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLockingCredit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"lockingCredit\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"keyId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"vipLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct SafeBoxKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FlooringPeriphery", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000003eb879cc9a0ef4c6f1d870a40ae187768c278da2000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}