{"SourceCode": "/**\r\n *Submitted for verification at basescan.org on 2024-04-07\r\n*/\r\n\r\n// $PEPE. The most memeable memecoin in existence. \r\n\r\n// PEPE is a groundbreaking project on the ETH chain, \r\n// pioneering the ERC314 protocol to build a comprehensive token service platform, \r\n// enhancing efficiency and reducing transaction costs within the blockchain ecosystem.\r\n\r\n// https://twitter.com/pepe314eth\r\n// https://pepecoins.us/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\ninterface IEERC314 {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event AddLiquidity(uint32 _blockToUnlockLiquidity, uint256 value);\r\n  event RemoveLiquidity(uint256 value);\r\n  event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out);\r\n}\r\n\r\nabstract contract ERC314 is IEERC314 {\r\n  mapping(address account => uint256) private _balances;\r\n  mapping(address account => uint256) private _lastTxTime;\r\n  mapping(address account => uint32) private lastTransaction;\r\n\r\n  uint256 private _totalSupply;\r\n  uint256 public _maxWallet;\r\n  uint32 public blockToUnlockLiquidity;\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  address public owner;\r\n  address public liquidityProvider;\r\n\r\n  bool public tradingEnable;\r\n  bool public liquidityAdded;\r\n  bool public maxWalletEnable;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  modifier onlyLiquidityProvider() {\r\n    require(msg.sender == liquidityProvider, 'You are not the liquidity provider');\r\n    _;\r\n  }\r\n\r\n  constructor(string memory name_, string memory symbol_, uint256 totalSupply_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _totalSupply = totalSupply_;\r\n    _maxWallet = totalSupply_ / 10;\r\n    owner = msg.sender;\r\n    tradingEnable = false;\r\n    maxWalletEnable = true;\r\n\r\n    _balances[msg.sender] = (totalSupply_ * 10) / 100;\r\n    uint256 liquidityAmount = totalSupply_ - _balances[msg.sender];\r\n    _balances[address(this)] = liquidityAmount;\r\n\r\n    liquidityAdded = false;\r\n  }\r\n\r\n  function name() public view virtual returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view virtual returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view virtual returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  function totalSupply() public view virtual returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) public view virtual returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public virtual returns (bool) {\r\n    // sell or transfer\r\n    if (to == address(this)) {\r\n      sell(value);\r\n    } else {\r\n      _transfer(msg.sender, to, value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 value) internal virtual {\r\n    if (to != address(0)) {\r\n      require(lastTransaction[msg.sender] != block.number, \"You can't make two transactions in the same block\");\r\n      lastTransaction[msg.sender] = uint32(block.number);\r\n\r\n      require(block.timestamp >= _lastTxTime[msg.sender] + 30, 'Sender must wait for cooldown');\r\n      _lastTxTime[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    require(_balances[from] >= value, 'ERC20: transfer amount exceeds balance');\r\n\r\n    unchecked {\r\n      _balances[from] = _balances[from] - value;\r\n    }\r\n\r\n    if (to == address(0)) {\r\n      unchecked {\r\n        _totalSupply -= value;\r\n      }\r\n    } else {\r\n      unchecked {\r\n        _balances[to] += value;\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  function getReserves() public view returns (uint256, uint256) {\r\n    return (address(this).balance, _balances[address(this)]);\r\n  }\r\n\r\n  function enableTrading(bool _tradingEnable) external onlyOwner {\r\n    tradingEnable = _tradingEnable;\r\n  }\r\n\r\n  function enableMaxWallet(bool _maxWalletEnable) external onlyOwner {\r\n    maxWalletEnable = _maxWalletEnable;\r\n  }\r\n\r\n  function setMaxWallet(uint256 _maxWallet_) external onlyOwner {\r\n    _maxWallet = _maxWallet_;\r\n  }\r\n\r\n  function renounceOwnership() external onlyOwner {\r\n    owner = address(0);\r\n  }\r\n\r\n  function addLiquidity(uint32 _blockToUnlockLiquidity) public payable onlyOwner {\r\n    require(liquidityAdded == false, 'Liquidity already added');\r\n\r\n    liquidityAdded = true;\r\n\r\n    require(msg.value > 0, 'No ETH sent');\r\n    require(block.number < _blockToUnlockLiquidity, 'Block number too low');\r\n\r\n    blockToUnlockLiquidity = _blockToUnlockLiquidity;\r\n    tradingEnable = true;\r\n    liquidityProvider = msg.sender;\r\n\r\n    emit AddLiquidity(_blockToUnlockLiquidity, msg.value);\r\n  }\r\n\r\n  function removeLiquidity() public onlyLiquidityProvider {\r\n    require(block.number > blockToUnlockLiquidity, 'Liquidity locked');\r\n\r\n    tradingEnable = false;\r\n\r\n    payable(msg.sender).transfer(address(this).balance);\r\n\r\n    emit RemoveLiquidity(address(this).balance);\r\n  }\r\n\r\n  function extendLiquidityLock(uint32 _blockToUnlockLiquidity) public onlyLiquidityProvider {\r\n    require(blockToUnlockLiquidity < _blockToUnlockLiquidity, \"You can't shorten duration\");\r\n\r\n    blockToUnlockLiquidity = _blockToUnlockLiquidity;\r\n  }\r\n\r\n  function getAmountOut(uint256 value, bool _buy) public view returns (uint256) {\r\n    (uint256 reserveETH, uint256 reserveToken) = getReserves();\r\n\r\n    if (_buy) {\r\n      return (value * reserveToken) / (reserveETH + value);\r\n    } else {\r\n      return (value * reserveETH) / (reserveToken + value);\r\n    }\r\n  }\r\n\r\n  function buy() internal {\r\n    require(tradingEnable, 'Trading not enable');\r\n\r\n    uint256 token_amount = (msg.value * _balances[address(this)]) / (address(this).balance);\r\n\r\n    if (maxWalletEnable) {\r\n      require(token_amount + _balances[msg.sender] <= _maxWallet, 'Max wallet exceeded');\r\n    }\r\n\r\n    uint256 user_amount = (token_amount / 10000) * 9900;\r\n    uint256 burn_amount = token_amount - user_amount;\r\n\r\n    _transfer(address(this), msg.sender, user_amount);\r\n    _transfer(address(this), address(0), burn_amount);\r\n\r\n    emit Swap(msg.sender, msg.value, 0, 0, user_amount);\r\n  }\r\n\r\n  function sell(uint256 sell_amount) internal {\r\n    require(tradingEnable, 'Trading not enable');\r\n\r\n    uint256 swap_amount = (sell_amount / 10000) * 9900;\r\n    uint256 burn_amount = sell_amount - swap_amount;\r\n\r\n    uint256 ethAmount = (swap_amount * address(this).balance) / (_balances[address(this)] + swap_amount);\r\n\r\n    require(ethAmount > 0, 'Sell amount too low');\r\n    require(address(this).balance >= ethAmount, 'Insufficient ETH in reserves');\r\n\r\n    _transfer(msg.sender, address(this), swap_amount);\r\n    _transfer(msg.sender, address(0), burn_amount);\r\n\r\n    payable(msg.sender).transfer(ethAmount);\r\n\r\n    emit Swap(msg.sender, 0, sell_amount, ethAmount, 0);\r\n  }\r\n\r\n  receive() external payable {\r\n    buy();\r\n  }\r\n}\r\n\r\ncontract Doge314 is ERC314 {\r\n  constructor() ERC314('PEPE314', 'PEPE314', 6_900_000_000 * 10 ** 18) {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_blockToUnlockLiquidity\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockToUnlockLiquidity\",\"type\":\"uint32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockToUnlockLiquidity\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_maxWalletEnable\",\"type\":\"bool\"}],\"name\":\"enableMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingEnable\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockToUnlockLiquidity\",\"type\":\"uint32\"}],\"name\":\"extendLiquidityLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_buy\",\"type\":\"bool\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet_\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Doge314", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://74b6f5223570aaa61fbbd6277243e22ef4b7b6ab0564dbb9b6a51ad6312f2899"}