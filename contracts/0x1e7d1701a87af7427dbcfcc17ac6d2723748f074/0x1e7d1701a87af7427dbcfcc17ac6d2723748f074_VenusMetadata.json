{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VenusMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// :...:!?Y7~~!?J77!~!!5BP5~~P&&&G&&&&&&&&&&#@@@@&@@@@&&@@@@@@@@@&@@@@@@@@@@&@@@@@@@@@@&@@@@@@@@@@\\n// ::.:5BGJ!~?PP?:.:^7?#&GP~.^?B@#@@@@@@@@@@#@@@@@@@@@&&@@@@@@@@@&&@@@@@@@@@#@@@@@@@@@@B@@@@@@@@@@\\n// ^^^YPJ?J?YP?:....~Y5##BG?:..:7Y&@@@@@@@@@#@@@@@@@@@&#@@&&##BGPJ?J??7777??75PGGG&@@@@B@@@@@@@@@@\\n// 7!!77777!!!:...^7G&GBBBG?:^^:::7GBPPGBB##P#BGP555YJ??YJ?7!!~^^::.......::^^!7?JYG#&@B@@@@@@@@@@\\n// ???????7!!77?YPB&&&P##BJ:..:::^^:~7?J????!J??77!~~~^^^^^::...............:::^^~!7?5GP@@@@@@@@@@\\n// ~!!7?J5PYP##&&&&##BYY?~^~~~^^~^^^~!!77!77!???777!~^::....................:::::^~!7?Y?G#&@@@@@@&\\n// ^::::^~!~7JY55PPPY?~~~~!7???77~7777??????!777!7777!~^^:......................:^~~!?J?G#&@@@@@@@\\n// ~~:...........::^^~^~~~~~~~~~!~!77????JJJ7YYY?7!!~~~^^::....................::^~~7?J?G#&&@@@@@@\\n// ::^^:......................:::::::^^~~~!7!?JYYYJ?!^::^:::...................:^~!?JYPJ#&&&@@@@@@\\n// ..::::..............................:::^^^7??JY55Y?~:....................::^!7JJY5PG5&&&&@@@@@@\\n// ....:::::............................:::^^~!77JYYYY?~^:............::::^^^~~!!!7777?7PB#&@@@@@&\\n// ......:::..............^^!77!^:.........::^~!7?JY5PY??!^:.........:::::::::^~~!!!77?!5G#&@@@@@@\\n// .........::...........:^!?7Y5J!~:........:^^!!7?JYYJ?Y?77~::........:::::::^^^^~~~!!~?5B##&@@@@\\n// .........::.......... .:^~~!!~^^........:::^~!!77777!777??77~^:........::::::.....:::^!J5GBB&@@\\n// ..........::........... ................:::^^~!!!!!~^^^^^~!777^:.......................:~J5PPB#\\n// ..........:^:........................:::::^^^~~!!~^^::::::^!77~~^:.....................::~??555\\n// ...........:~^:...........   ........:::::^^~~!!~^:::.:::^^~~!~!7!^.....................:^!7JYJ\\n// :...........:~^:..........   .......:::^^^^~~!~^:.........^~^~~!777~:..................::::^^~!\\n// ~::..........:!~^:::..............::^~~~~~!7!^.............:^~!!!!77!^:...............:::::::::\\n// #G5?~::.......:~!!~^^:::::::::::^^~!!77??7?7^...............:^~~~^~!~~~^:...............::^^^::\\n// B###BP57^.......:!7!7!~~~~~^^~~!!!7??JYJ?~~:................:^^~^:::::^^^^::::..........::::^^^\\n// ###BBBBB5YJ!^:....:^!77?????77!?JJJJ?7!^^:..................:^:::....:::::^::::::..........:::^\\n// ##&&####PPBBGPJ!:..:.:::^~~!!!~7!~~^^:::....................:::.........::::::^^:::...........:\\n// ##&&&&&#PB#GPG##GJ~:........::::::::::::..::::::...........::::.............::::^^::::.........\\n// author: jolan.eth\\n\\ncontract VenusMetadata is Ownable {\\n    string public CENSORED;\\n    string public UNCENSORED;\\n\\n    mapping(uint256 => string) airdropCID;\\n\\n    constructor() {}\\n\\n    function setCIDs(string memory censored, string memory uncensored)\\n        public\\n        onlyOwner\\n    {\\n        CENSORED = censored;\\n        UNCENSORED = uncensored;\\n    }\\n\\n    function setAirdropCID(uint256 id, string memory cid) public onlyOwner {\\n        airdropCID[id] = cid;\\n    }\\n\\n    function generateMetadata(\\n        uint256 id,\\n        string memory name,\\n        bool state\\n    ) public view returns (string memory) {\\n        if (id > 250)\\n            return string(abi.encodePacked(\\\"ipfs://\\\", airdropCID[id]));\\n        else if (id > 0 && id <= 250)\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        \\\"data:application/json;base64,\\\",\\n                        _encode(\\n                            bytes(\\n                                string(\\n                                    abi.encodePacked(\\n                                        \\\"{\\\",\\n                                        '\\\"name\\\":\\\"',\\n                                        bytes(name).length > 0\\n                                            ? name\\n                                            : string(\\n                                                abi.encodePacked(\\n                                                    \\\"The Censored Venus #\\\",\\n                                                    _serialize(id)\\n                                                )\\n                                            ),\\n                                        '\\\",',\\n                                        '\\\"description\\\":\\\"The Censored Venus is an NFT collection that explores the theme of nudity censorship in art. This collection was created based on the original artwork painted in oil on canvas (130 x 80 cm) by Pascal Boyart in October 2022.\\\",',\\n                                        '\\\"image\\\":\\\"ipfs://',\\n                                        state\\n                                            ? string(\\n                                                abi.encodePacked(\\n                                                    UNCENSORED,\\n                                                    \\\"/\\\",\\n                                                    _serialize(id),\\n                                                    \\\"_uncensored.jpg\\\"\\n                                                )\\n                                            )\\n                                            : string(\\n                                                abi.encodePacked(\\n                                                    CENSORED,\\n                                                    \\\"/\\\",\\n                                                    _serialize(id),\\n                                                    \\\"_censored.gif\\\"\\n                                                )\\n                                            ),\\n                                        '\\\",',\\n                                        '\\\"attributes\\\":[',\\n                                        \\\"{\\\",\\n                                        '\\\"trait_type\\\":\\\"Status\\\",',\\n                                        '\\\"value\\\":\\\"',\\n                                        state ? \\\"Uncensored\\\" : \\\"Censored\\\",\\n                                        '\\\"',\\n                                        \\\"}\\\"\\n                                        \\\"]\\\",\\n                                        \\\"}\\\"\\n                                    )\\n                                )\\n                            )\\n                        )\\n                    )\\n                );\\n        else revert DoNotExist();\\n    }\\n\\n    function _toString(uint256 value) private pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n\\n        uint256 digits;\\n        uint256 tmp = value;\\n\\n        while (tmp != 0) {\\n            digits++;\\n            tmp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function _encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes\\n            memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n\\n    function _serialize(uint256 _tokenId)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        string memory tmp;\\n        if (_tokenId < 1000)\\n            tmp = string(abi.encodePacked(\\\"\\\", _toString(_tokenId)));\\n        if (_tokenId < 100)\\n            tmp = string(abi.encodePacked(\\\"0\\\", _toString(_tokenId)));\\n        if (_tokenId < 10)\\n            tmp = string(abi.encodePacked(\\\"00\\\", _toString(_tokenId)));\\n\\n        result = tmp;\\n    }\\n\\n    error DoNotExist();\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DoNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CENSORED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNCENSORED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"generateMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"setAirdropCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"censored\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uncensored\",\"type\":\"string\"}],\"name\":\"setCIDs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VenusMetadata", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}