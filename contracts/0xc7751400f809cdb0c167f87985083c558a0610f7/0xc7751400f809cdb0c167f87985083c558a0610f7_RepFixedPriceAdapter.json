{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/RepFixedPriceAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IChainlinkAggregator} from '../interfaces/IChainlinkAggregator.sol';\\nimport {ICLSynchronicityPriceAdapter} from '../interfaces/ICLSynchronicityPriceAdapter.sol';\\nimport {IMaticRateProvider} from '../interfaces/IMaticRateProvider.sol';\\n\\n/**\\n * @title RepFixedPriceAdapter\\n * @author BGD Labs\\n * @notice Price adapter that returns calculated average price for REP / ETH\\n * based on the values from 01/09/2023 till 31/10/2023\\n */\\ncontract RepFixedPriceAdapter is ICLSynchronicityPriceAdapter {\\n  /**\\n   * @notice Number of decimals in the output of this price adapter\\n   */\\n  uint8 public constant DECIMALS = 18;\\n\\n  /**\\n   * @notice Description price adapter\\n   */\\n  string public constant DESCRIPTION = 'REP / ETH';\\n\\n  /**\\n   * @notice Calculated price\\n   */\\n  int256 public constant PRICE = 462569569300000;\\n\\n  /// @inheritdoc ICLSynchronicityPriceAdapter\\n  function description() external pure returns (string memory) {\\n    return DESCRIPTION;\\n  }\\n\\n  /// @inheritdoc ICLSynchronicityPriceAdapter\\n  function decimals() external pure returns (uint8) {\\n    return DECIMALS;\\n  }\\n\\n  /*\\n   * @dev Price adapter that returns calculated average price for REP / ETH\\n   * based on the values from 01/09/2023 till 31/10/2023\\n   */\\n  /// @inheritdoc ICLSynchronicityPriceAdapter\\n  function latestAnswer() public view virtual override returns (int256) {\\n    return PRICE;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IChainlinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IChainlinkAggregator {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICLSynchronicityPriceAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICLSynchronicityPriceAdapter {\\n  /**\\n   * @notice Calculates the current answer based on the aggregators.\\n   * @return int256 latestAnswer\\n   */\\n  function latestAnswer() external view returns (int256);\\n\\n  /**\\n   * @notice Returns the description of the feed\\n   * @return string desciption\\n   */\\n  function description() external view returns (string memory);\\n\\n  /**\\n   * @notice Returns the feed decimals\\n   * @return uint8 decimals\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  error DecimalsAboveLimit();\\n  error DecimalsNotEqual();\\n  error RatioOutOfBounds();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMaticRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMaticRateProvider {\\n  function getRate() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DecimalsAboveLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RatioOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RepFixedPriceAdapter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}