{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WFEG.sol\": {\r\n      \"content\": \"pragma solidity = 0.8.14;\\n\\n//--- Context ---//\\nabstract contract Context {\\n    constructor() {\\n    }\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\n//--- Ownable ---//\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IFactoryV2 {\\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\\n}\\n\\ninterface IV2Pair {\\n    function factory() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function sync() external;\\n}\\n\\ninterface IRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to, uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IRouter02 is IRouter01 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\\n\\n\\n//--- Interface for ERC20 ---//\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n//--- Contract v2 ---//\\ncontract WFEG is Context, Ownable, IERC20 {\\n\\n    function totalSupply() external pure override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply; }\\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\n    function name() external pure override returns (string memory) { return _name; }\\n    function getOwner() external view override returns (address) { return owner(); }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return balance[account];\\n    }\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _noFee;\\n    mapping (address => bool) private liquidityAdd;\\n    mapping (address => bool) private isLpPair;\\n    mapping (address => bool) private isPresaleAddress;\\n    mapping (address => uint256) private balance;\\n\\n    uint256 constant public _totalSupply = 420_690_000 * 10** 9;\\n    uint256 constant public swapThreshold = _totalSupply / 5_000;\\n    uint256 constant public buyfee = 10;\\n    uint256 constant public sellfee = 10;\\n    uint256 constant public transferfee = 0;\\n    uint256 constant public fee_denominator = 1_000;\\n    bool private canSwapFees = true;\\n    address payable private marketingAddress = payable(0x9bB74eEc5BDa46addf9BB92e4FAd6F134fFA78d5);\\n\\n    IRouter02 public swapRouter;\\n    string constant private _name = \\\"Wrapped FEG\\\";\\n    string constant private _symbol = \\\"WFEG\\\";\\n    uint8 constant private _decimals = 9;\\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address public lpPair;\\n    bool public isTradingEnabled = false;\\n    bool private inSwap;\\n\\n    modifier inSwapFlag {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n\\n    event _enableTrading();\\n    event _setPresaleAddress(address account, bool enabled);\\n    event _toggleCanSwapFees(bool enabled);\\n    event _changePair(address newLpPair);\\n    event _changeWallets(address marketing);\\n\\n\\n    constructor () {\\n        _noFee[msg.sender] = true;\\n\\n        if (block.chainid == 56) {\\n            swapRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        } else if (block.chainid == 97) {\\n            swapRouter = IRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\\n            swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        } else if (block.chainid == 43114) {\\n            swapRouter = IRouter02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\\n        } else if (block.chainid == 250) {\\n            swapRouter = IRouter02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\\n        } else {\\n            revert(\\\"Chain not valid\\\");\\n        }\\n        liquidityAdd[msg.sender] = true;\\n        balance[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n        lpPair = IFactoryV2(swapRouter.factory()).createPair(swapRouter.WETH(), address(this));\\n        isLpPair[lpPair] = true;\\n        _approve(msg.sender, address(swapRouter), type(uint256).max);\\n        _approve(address(this), address(swapRouter), type(uint256).max);\\n    }\\n\\n    receive() external payable {}\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(address sender, address spender, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: Zero Address\\\");\\n        require(spender != address(0), \\\"ERC20: Zero Address\\\");\\n\\n        _allowances[sender][spender] = amount;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            _allowances[sender][msg.sender] -= amount;\\n        }\\n\\n        return _transfer(sender, recipient, amount);\\n    }\\n    function isNoFeeWallet(address account) external view returns(bool) {\\n        return _noFee[account];\\n    }\\n\\n    function setNoFeeWallet(address account, bool enabled) public onlyOwner {\\n        _noFee[account] = enabled;\\n    }\\n\\n    function isLimitedAddress(address ins, address out) internal view returns (bool) {\\n\\n        bool isLimited = ins != owner()\\n        && out != owner() && msg.sender != owner()\\n        && !liquidityAdd[ins]  && !liquidityAdd[out] && out != DEAD && out != address(0) && out != address(this);\\n        return isLimited;\\n    }\\n\\n    function is_buy(address ins, address out) internal view returns (bool) {\\n        bool _is_buy = !isLpPair[out] && isLpPair[ins];\\n        return _is_buy;\\n    }\\n\\n    function is_sell(address ins, address out) internal view returns (bool) {\\n        bool _is_sell = isLpPair[out] && !isLpPair[ins];\\n        return _is_sell;\\n    }\\n\\n    function canSwap(address ins, address out) internal view returns (bool) {\\n        bool canswap = canSwapFees && !isPresaleAddress[ins] && !isPresaleAddress[out];\\n\\n        return canswap;\\n    }\\n\\n    function changeLpPair(address newPair) external onlyOwner {\\n        isLpPair[newPair] = true;\\n        emit _changePair(newPair);\\n    }\\n\\n    function toggleCanSwapFees(bool yesno) external onlyOwner {\\n        require(canSwapFees != yesno,\\\"Bool is the same\\\");\\n        canSwapFees = yesno;\\n        emit _toggleCanSwapFees(yesno);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\\n        bool takeFee = true;\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        if (isLimitedAddress(from,to)) {\\n            require(isTradingEnabled,\\\"Trading is not enabled\\\");\\n        }\\n\\n\\n        if(is_sell(from, to) &&  !inSwap && canSwap(from, to)) {\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if(contractTokenBalance >= swapThreshold) { internalSwap(contractTokenBalance); }\\n        }\\n\\n        if (_noFee[from] || _noFee[to]){\\n            takeFee = false;\\n        }\\n\\n        balance[from] -= amount; uint256 amountAfterFee = (takeFee) ? takeTaxes(from, is_buy(from, to), is_sell(from, to), amount) : amount;\\n        balance[to] += amountAfterFee; emit Transfer(from, to, amountAfterFee);\\n\\n        return true;\\n\\n    }\\n\\n    function changeWallets(address marketing) external onlyOwner {\\n        marketingAddress = payable(marketing);\\n        emit _changeWallets(marketing);\\n    }\\n\\n\\n    function takeTaxes(address from, bool isbuy, bool issell, uint256 amount) internal returns (uint256) {\\n        uint256 fee;\\n        if (isbuy)  fee = buyfee;  else if (issell)  fee = sellfee;  else  fee = transferfee;\\n        if (fee == 0)  return amount;\\n        uint256 feeAmount = amount * fee / fee_denominator;\\n        if (feeAmount > 0) {\\n\\n            balance[address(this)] += feeAmount;\\n            emit Transfer(from, address(this), feeAmount);\\n\\n        }\\n        return amount - feeAmount;\\n    }\\n\\n    function internalSwap(uint256 contractTokenBalance) internal inSwapFlag {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = swapRouter.WETH();\\n\\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\\n        }\\n\\n        try swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            contractTokenBalance,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        ) {} catch {\\n            return;\\n        }\\n        bool success;\\n\\n        if(address(this).balance > 0) {(success,) = marketingAddress.call{value: address(this).balance, gas: 35000}(\\\"\\\");}\\n\\n    }\\n\\n    function setPresaleAddress(address presale, bool yesno) external onlyOwner {\\n        require(isPresaleAddress[presale] != yesno,\\\"Same bool\\\");\\n        isPresaleAddress[presale] = yesno;\\n        _noFee[presale] = yesno;\\n        liquidityAdd[presale] = yesno;\\n        emit _setPresaleAddress(presale, yesno);\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        require(!isTradingEnabled, \\\"Trading already enabled\\\");\\n        isTradingEnabled = true;\\n        emit _enableTrading();\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLpPair\",\"type\":\"address\"}],\"name\":\"_changePair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"name\":\"_changeWallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"_enableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_setPresaleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_toggleCanSwapFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"changeLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"name\":\"changeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNoFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setNoFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"toggleCanSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WFEG", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}