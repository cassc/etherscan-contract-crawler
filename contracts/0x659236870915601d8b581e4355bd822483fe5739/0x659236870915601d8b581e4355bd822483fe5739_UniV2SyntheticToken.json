{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.12;\n\n\n// \n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \nstruct AttoDecimal {\n    uint256 mantissa;\n}\n\nlibrary AttoDecimalLib {\n    using SafeMath for uint256;\n\n    uint256 internal constant BASE = 10;\n    uint256 internal constant EXPONENTIATION = 18;\n    uint256 internal constant ONE_MANTISSA = BASE**EXPONENTIATION;\n\n    function convert(uint256 integer) internal pure returns (AttoDecimal memory) {\n        return AttoDecimal({mantissa: integer.mul(ONE_MANTISSA)});\n    }\n\n    function add(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\n        return AttoDecimal({mantissa: a.mantissa.add(b.mantissa)});\n    }\n\n    function sub(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\n        return AttoDecimal({mantissa: a.mantissa.sub(b.mantissa)});\n    }\n\n    function mul(AttoDecimal memory a, uint256 b) internal pure returns (AttoDecimal memory) {\n        return AttoDecimal({mantissa: a.mantissa.mul(b)});\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (AttoDecimal memory) {\n        return AttoDecimal({mantissa: a.mul(ONE_MANTISSA).div(b)});\n    }\n\n    function div(AttoDecimal memory a, uint256 b) internal pure returns (AttoDecimal memory) {\n        return AttoDecimal({mantissa: a.mantissa.div(b)});\n    }\n\n    function div(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\n        return AttoDecimal({mantissa: a.mantissa.mul(ONE_MANTISSA).div(b.mantissa)});\n    }\n\n    function floor(AttoDecimal memory a) internal pure returns (uint256) {\n        return a.mantissa.div(ONE_MANTISSA);\n    }\n\n    function lte(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (bool) {\n        return a.mantissa <= b.mantissa;\n    }\n}\n\n// \nabstract contract Owned {\n    address public nominatedOwner;\n    address public owner;\n\n    event OwnerChanged(address oldOwner, address newOwner);\n    event OwnerNominated(address newOwner);\n\n    constructor(address _owner) internal {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n        emit OwnerChanged(owner, nominatedOwner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n        _;\n    }\n}\n\n// \n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// \ncontract TokensStorage {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 private _rewardPool;\n    uint256 private _rewardSupply;\n    uint256 private _totalSupply;\n    IERC20 private _rewardsToken;\n    IERC20 private _stakingToken;\n    mapping(address => uint256) private _balances;\n    mapping(address => uint256) private _claimed;\n    mapping(address => uint256) private _rewards;\n\n    function rewardPool() public view returns (uint256) {\n        return _rewardPool;\n    }\n\n    function rewardSupply() public view returns (uint256) {\n        return _rewardSupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function rewardsToken() public view returns (IERC20) {\n        return _rewardsToken;\n    }\n\n    function stakingToken() public view returns (IERC20) {\n        return _stakingToken;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function claimedOf(address account) public view returns (uint256) {\n        return _claimed[account];\n    }\n\n    function rewardOf(address account) public view returns (uint256) {\n        return _rewards[account];\n    }\n\n    constructor(IERC20 rewardsToken_, IERC20 stakingToken_) public {\n        _rewardsToken = rewardsToken_;\n        _stakingToken = stakingToken_;\n    }\n\n    function _onMint(address account, uint256 amount) internal virtual {}\n    function _onBurn(address account, uint256 amount) internal virtual {}\n\n    function _stake(address account, uint256 amount) internal {\n        _stakingToken.safeTransferFrom(account, address(this), amount);\n        _balances[account] = _balances[account].add(amount);\n        _totalSupply = _totalSupply.add(amount);\n        _onMint(account, amount);\n    }\n\n    function _unstake(address account, uint256 amount) internal {\n        _stakingToken.safeTransfer(account, amount);\n        _balances[account] = _balances[account].sub(amount);\n        _totalSupply = _totalSupply.sub(amount);\n        _onBurn(account, amount);\n    }\n\n    function _increaseRewardPool(address owner, uint256 amount) internal {\n        _rewardsToken.safeTransferFrom(owner, address(this), amount);\n        _rewardSupply = _rewardSupply.add(amount);\n        _rewardPool = _rewardPool.add(amount);\n    }\n\n    function _reduceRewardPool(address owner, uint256 amount) internal {\n        _rewardsToken.safeTransfer(owner, amount);\n        _rewardSupply = _rewardSupply.sub(amount);\n        _rewardPool = _rewardPool.sub(amount);\n    }\n\n    function _addReward(address account, uint256 amount) internal {\n        _rewards[account] = _rewards[account].add(amount);\n        _rewardPool = _rewardPool.sub(amount);\n    }\n\n    function _withdraw(address account, uint256 amount) internal {\n        _rewardsToken.safeTransfer(account, amount);\n        _claimed[account] = _claimed[account].sub(amount);\n    }\n\n    function _claim(address account, uint256 amount) internal {\n        _rewards[account] = _rewards[account].sub(amount);\n        _rewardSupply = _rewardSupply.sub(amount);\n        _claimed[account] = _claimed[account].add(amount);\n    }\n\n    function _transferBalance(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n    }\n}\n\n// \ncontract UniV2Staking is Owned, TokensStorage {\n    using SafeMath for uint256;\n    using AttoDecimalLib for AttoDecimal;\n\n    function getBlockNumber() internal virtual view returns (uint256) {\n        return block.number;\n    }\n\n    function getTimestamp() internal virtual view returns (uint256) {\n        return block.timestamp;\n    }\n\n    uint256 public constant REWARD_UNLOCKING_TIME = 8 days;\n    uint256 public constant SECONDS_PER_BLOCK = 15;\n    uint256 public constant BLOCKS_PER_DAY = 1 days / SECONDS_PER_BLOCK;\n    uint256 public constant MAX_DISTRIBUTION_DURATION = 90 days * BLOCKS_PER_DAY;\n\n    mapping(address => uint256) public rewardUnlockingTime;\n\n    uint256 private _lastUpdateBlockNumber;\n    uint256 private _perBlockReward;\n    uint256 private _blockNumberOfDistributionEnding;\n    AttoDecimal private _rewardPerToken;\n    mapping(address => AttoDecimal) private _paidRates;\n\n    function lastUpdateBlockNumber() public view returns (uint256) {\n        return _lastUpdateBlockNumber;\n    }\n\n    function perBlockReward() public view returns (uint256) {\n        return _perBlockReward;\n    }\n\n    function blockNumberOfDistributionEnding() public view returns (uint256) {\n        return _blockNumberOfDistributionEnding;\n    }\n\n    function getRewardPerToken() internal view returns (AttoDecimal memory) {\n        uint256 lastRewardBlockNumber = Math.min(getBlockNumber(), _blockNumberOfDistributionEnding);\n        if (lastRewardBlockNumber <= _lastUpdateBlockNumber) return _rewardPerToken;\n        return _getRewardPerToken(lastRewardBlockNumber);\n    }\n\n    function _getRewardPerToken(uint256 forBlockNumber) internal view returns (AttoDecimal memory) {\n        uint256 totalSupply_ = totalSupply();\n        if (totalSupply_ == 0) return AttoDecimalLib.convert(0);\n        uint256 totalReward = forBlockNumber.sub(_lastUpdateBlockNumber).mul(_perBlockReward);\n        AttoDecimal memory newRewardPerToken = AttoDecimalLib.div(totalReward, totalSupply_);\n        return _rewardPerToken.add(newRewardPerToken);\n    }\n\n    function rewardPerToken()\n        external\n        view\n        returns (\n            uint256 mantissa,\n            uint256 base,\n            uint256 exponentiation\n        )\n    {\n        return (getRewardPerToken().mantissa, AttoDecimalLib.BASE, AttoDecimalLib.EXPONENTIATION);\n    }\n\n    function paidRateOf(address account)\n        external\n        view\n        returns (\n            uint256 mantissa,\n            uint256 base,\n            uint256 exponentiation\n        )\n    {\n        return (_paidRates[account].mantissa, AttoDecimalLib.BASE, AttoDecimalLib.EXPONENTIATION);\n    }\n\n    function earnedOf(address account) public view returns (uint256) {\n        AttoDecimal memory rewardPerToken_ = getRewardPerToken();\n        if (rewardPerToken_.lte(_paidRates[account])) return 0;\n        uint256 balance = balanceOf(account);\n        if (balance == 0) return 0;\n        AttoDecimal memory ratesDiff = rewardPerToken_.sub(_paidRates[account]);\n        return ratesDiff.mul(balance).floor();\n    }\n\n    event RewardStrategyChanged(uint256 perBlockReward, uint256 duration);\n\n    constructor(\n        IERC20 rewardsToken_,\n        IERC20 stakingToken_,\n        address owner_\n    ) public Owned(owner_) TokensStorage(rewardsToken_, stakingToken_) {}\n\n    function stake(uint256 amount) public onlyPositiveAmount(amount) {\n        _lockRewards(msg.sender);\n        _stake(msg.sender, amount);\n    }\n\n    function unstake(uint256 amount) public onlyPositiveAmount(amount) {\n        require(amount <= balanceOf(msg.sender), \"Unstaking amount exceeds staked balance\");\n        _lockRewards(msg.sender);\n        _unstake(msg.sender, amount);\n    }\n\n    function claim(uint256 amount) public onlyPositiveAmount(amount) {\n        _lockRewards(msg.sender);\n        require(amount <= rewardOf(msg.sender), \"Claiming amount exceeds received rewards\");\n        rewardUnlockingTime[msg.sender] = getTimestamp().add(REWARD_UNLOCKING_TIME);\n        _claim(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) public onlyPositiveAmount(amount) {\n        require(getTimestamp() >= rewardUnlockingTime[msg.sender], \"Reward not unlocked yet\");\n        require(amount <= claimedOf(msg.sender), \"Withdrawing amount exceeds claimed balance\");\n        _withdraw(msg.sender, amount);\n    }\n\n    function setRewardStrategy(uint256 perBlockReward_, uint256 duration) public onlyOwner returns (bool succeed) {\n        require(duration > 0, \"Duration is zero\");\n        require(duration <= MAX_DISTRIBUTION_DURATION, \"Distribution duration too long\");\n        _lockRates();\n        uint256 currentBlockNumber = getBlockNumber();\n        uint256 nextDistributionRequiredPool = perBlockReward_.mul(duration);\n        uint256 notDistributedReward = _blockNumberOfDistributionEnding <= currentBlockNumber\n            ? 0\n            : _blockNumberOfDistributionEnding.sub(currentBlockNumber).mul(_perBlockReward);\n        if (nextDistributionRequiredPool > notDistributedReward) {\n            _increaseRewardPool(owner, nextDistributionRequiredPool.sub(notDistributedReward));\n        } else if (nextDistributionRequiredPool < notDistributedReward) {\n            _reduceRewardPool(owner, notDistributedReward.sub(nextDistributionRequiredPool));\n        }\n        _perBlockReward = perBlockReward_;\n        _blockNumberOfDistributionEnding = currentBlockNumber.add(duration);\n        emit RewardStrategyChanged(perBlockReward_, duration);\n        return true;\n    }\n\n    function lockRewards() public {\n        _lockRewards(msg.sender);\n    }\n\n    function _moveStake(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        _lockRewards(from);\n        _lockRewards(to);\n        _transferBalance(from, to, amount);\n    }\n\n    function _lockRates(uint256 blockNumber) private {\n        _rewardPerToken = _getRewardPerToken(blockNumber);\n        _lastUpdateBlockNumber = blockNumber;\n    }\n\n    function _lockRates() private {\n        uint256 currentBlockNumber = getBlockNumber();\n        if (_perBlockReward > 0 && currentBlockNumber >= _blockNumberOfDistributionEnding) {\n            _lockRates(_blockNumberOfDistributionEnding);\n            _perBlockReward = 0;\n        }\n        _lockRates(currentBlockNumber);\n    }\n\n    function _lockRewards(address account) private {\n        _lockRates();\n        uint256 earned = earnedOf(account);\n        if (earned > 0) _addReward(account, earned);\n        _paidRates[account] = _rewardPerToken;\n    }\n\n    modifier onlyPositiveAmount(uint256 amount) {\n        require(amount > 0, \"Amount is not positive\");\n        _;\n    }\n}\n\n// \ncontract UniV2SyntheticToken is UniV2Staking {\n    uint256 public decimals;\n    string public name;\n    string public symbol;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 decimals_,\n        IERC20 rewardsToken_,\n        IERC20 stakingToken_,\n        address owner_\n    ) public UniV2Staking(rewardsToken_, stakingToken_, owner_) {\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n    }\n\n    function _onMint(address account, uint256 amount) internal override {\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _onBurn(address account, uint256 amount) internal override {\n        emit Transfer(account, address(0), amount);\n    }\n\n    function transfer(address recipient, uint256 amount) external onlyPositiveAmount(amount) returns (bool) {\n        require(balanceOf(recipient) >= amount, \"Transfer amount exceeds balance\");\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external onlyPositiveAmount(amount) returns (bool) {\n        require(_allowances[sender][recipient] >= amount, \"Transfer amount exceeds allowance\");\n        _transfer(sender, recipient, amount);\n        _allowances[sender][recipient] = _allowances[sender][recipient].sub(amount);\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        _moveStake(sender, recipient, amount);\n        emit Transfer(sender, recipient, amount);\n    }\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perBlockReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DISTRIBUTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_UNLOCKING_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumberOfDistributionEnding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"paidRateOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponentiation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponentiation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardUnlockingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perBlockReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setRewardStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succeed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniV2SyntheticToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000002baecdf43734f22fd5c152db08e3c27233f0c7d200000000000000000000000099b1db3318aa3040f336fb65c55400e164ddcd7f000000000000000000000000d4eee3d50588d7dee8dcc42635e50093e0aa8cc0000000000000000000000000000000000000000000000000000000000000001b4d44414f204f4d2d45544820556e692d5632204c5020546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000b6d64616f4f6d4574684c50000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}