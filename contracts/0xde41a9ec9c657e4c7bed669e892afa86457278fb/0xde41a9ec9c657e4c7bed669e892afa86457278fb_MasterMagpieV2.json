{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBaseRewardPool {\\n    function stakingDecimals() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function rewardPerToken(address token) external view returns (uint256);\\n\\n    function rewardTokenInfos()\\n        external\\n        view\\n        returns\\n        (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        );\\n\\n    function earned(address account, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allEarned(address account)\\n        external\\n        view\\n        returns (uint256[] memory pendingBonusRewards);\\n\\n    function queueNewRewards(uint256 _rewards, address token)\\n        external\\n        returns (bool);\\n\\n    function getReward(address _account, address _receiver) external returns (bool);\\n\\n    function getRewards(address _account, address _receiver, address[] memory _rewardTokens) external;\\n\\n    function updateFor(address account) external;\\n\\n    function updateManager(address _rewardManager, bool _allowed) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IHarvesttablePoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPoolHelper.sol\\\";\\n\\n\\ninterface IHarvesttablePoolHelper is IPoolHelper {\\n    function harvest() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILocker {\\n\\n    struct UserUnlocking {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 amountInCoolDown; // total amount comitted to the unlock slot, never changes except when reseting slot\\n    }    \\n\\n    function getUserUnlockingSchedule(address _user) external view returns (UserUnlocking[] memory slots);\\n    function getUserAmountInCoolDown(address _user) external view returns (uint256);\\n    function totalLocked() external view returns (uint256);\\n    function getFullyUnlock(address _user) external view returns(uint256 unlockedAmount);\\n    function getRewardablePercentWAD(address _user) external view returns(uint256 percent);\\n    function totalAmountInCoolDown() external view returns (uint256);\\n    function getUserNthUnlockSlot(address _user, uint256 n) external view returns (\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 amountInCoolDown\\n    );\\n\\n    function getUserUnlockSlotLength(address _user) external view returns (uint256);\\n    function getNextAvailableUnlockSlot(address _user) external view returns (uint256);\\n    function getUserTotalLocked(address _user) external view returns (uint256);\\n    function lock(uint256 _amount) external;\\n    function lockFor(uint256 _amount, address _for) external;\\n    function startUnlock(uint256 _amountToCoolDown) external;\\n    function cancelUnlock(uint256 _slotIndex) external;\\n    function unlock(uint256 slotIndex) external;    \\n}\"\r\n    },\r\n    \"contracts/interfaces/IMasterMagpie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMasterMagpie {\\n    function poolLength() external view returns (uint256);\\n\\n    function setPoolManagerStatus(address _address, bool _bool) external;\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _stakingTokenToken,\\n        address _rewarder,\\n        address _helper,\\n        bool _helperNeedsHarvest\\n    ) external;\\n\\n    function createRewarder(\\n        address _stakingToken,\\n        address mainRewardToken\\n    ) external returns (address);\\n\\n    function set(\\n        address _stakingToken,\\n        uint256 _allocPoint,\\n        address _helper,\\n        address _rewarder,\\n        bool _helperNeedsHarvest\\n    ) external;\\n\\n    // View function to see pending GMPs on frontend.\\n    function getPoolInfo(\\n        address token\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 emission,\\n            uint256 allocpoint,\\n            uint256 sizeOfPool,\\n            uint256 totalPoint\\n        );\\n\\n    function rewarderBonusTokenInfo(\\n        address _stakingToken\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        );\\n\\n    function pendingTokens(\\n        address _stakingToken,\\n        address _user,\\n        address token\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _pendingGMP,\\n            address _bonusTokenAddress,\\n            string memory _bonusTokenSymbol,\\n            uint256 _pendingBonusToken\\n        );\\n\\n    function allPendingTokens(\\n        address _stakingToken,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingMGP,\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        );\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(address _stakingToken) external;\\n\\n    function deposit(address _stakingToken, uint256 _amount) external;\\n\\n    function withdraw(address _stakingToken, uint256 _amount) external;\\n\\n    function depositFor(\\n        address _stakingToken,\\n        uint256 _amount,\\n        address sender\\n    ) external;\\n\\n    function withdrawFor(\\n        address _stakingToken,\\n        uint256 _amount,\\n        address _sender\\n    ) external;\\n\\n    function depositVlMGPFor(uint256 _amount, address sender) external;\\n\\n    function withdrawVlMGPFor(uint256 _amount, address sender) external;\\n\\n    function depositMWomSVFor(uint256 _amount, address sender) external;\\n\\n    function withdrawMWomSVFor(uint256 _amount, address sender) external;\\n\\n    function multiclaimFor(\\n        address[] calldata _stakingTokens,\\n        address[][] calldata _rewardTokens,\\n        address user_address\\n    ) external;\\n\\n    function multiclaimOnBehalf(\\n        address[] memory _stakingTokens,\\n        address[][] calldata _rewardTokens,\\n        address user_address\\n    ) external;\\n\\n    function emergencyWithdraw(address _stakingToken, address sender) external;\\n\\n    function updateEmissionRate(uint256 _gmpPerSec) external;\\n\\n    function stakingInfo(\\n        address _stakingToken,\\n        address _user\\n    ) external view returns (uint256 depositAmount, uint256 availableAmount);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMasterMagpieV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMasterMagpie {\\n    function poolLength() external view returns (uint256);\\n\\n    function setPoolManagerStatus(address _address, bool _bool) external;\\n\\n    function add(uint256 _allocPoint, address _stakingTokenToken, address _rewarder, address _helper, bool _helperNeedsHarvest, bool _transferStakingToken) external;\\n\\n    function set(address _stakingToken, uint256 _allocPoint, address _helper,\\n        address _rewarder, bool _helperNeedsHarvest, bool _transferStakingToken) external;\\n\\n    function createRewarder(address _stakingTokenToken, address mainRewardToken) external\\n        returns (address);\\n\\n    // View function to see pending GMPs on frontend.\\n    function getPoolInfo(address token) external view\\n        returns (\\n            uint256 emission,\\n            uint256 allocpoint,\\n            uint256 sizeOfPool,\\n            uint256 totalPoint\\n        );\\n\\n    function rewarderBonusTokenInfo(address _stakingToken) external view\\n        returns (address[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function pendingTokens(address _stakingToken, address _user, address token) external view\\n        returns (\\n            uint256 _pendingGMP,\\n            address _bonusTokenAddress,\\n            string memory _bonusTokenSymbol,\\n            uint256 _pendingBonusToken\\n        );\\n\\n    function allPendingTokens(address _stakingToken, address _user)external view\\n        returns (\\n            uint256 pendingMGP,\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        );\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(address _stakingToken) external;\\n\\n    function deposit(address _stakingToken, uint256 _amount) external;\\n\\n    function withdraw(address _stakingToken, uint256 _amount) external;\\n\\n    function depositFor(address _stakingToken, uint256 _amount, address sender) external;\\n\\n    function withdrawFor(address _stakingToken, uint256 _amount, address _sender ) external;\\n\\n    function depositVlMGPFor(uint256 _amount, address sender) external;\\n\\n    function withdrawVlMGPFor(uint256 _amount, address sender) external;\\n\\n    function depositMWomSVFor(uint256 _amount, address sender) external;\\n\\n    function withdrawMWomSVFor(uint256 _amount, address sender) external;    \\n\\n    function multiclaimFor(address[] calldata _stakingTokens, address[][] calldata _rewardTokens, address user_address) external;\\n\\n    function multiclaimOnBehalf(address[] memory _stakingTokens, address[][] calldata _rewardTokens, address user_address) external;\\n\\n    function emergencyWithdraw(address _stakingToken, address sender) external;\\n\\n    function updateEmissionRate(uint256 _gmpPerSec) external;\\n\\n    function stakingInfo(address _stakingToken, address _user)\\n        external\\n        view\\n        returns (uint256 depositAmount, uint256 availableAmount);\\n\\n    function calLpSupply(address _stakingToken) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IMintableERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address, uint256) external;\\n    function faucet(uint256) external;\\n\\n    function burn(address, uint256) external;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPoolHelper {\\n    function totalStaked() external view returns (uint256);\\n\\n    function balance(address _address) external view returns (uint256);\\n\\n    function deposit(uint256 amount, uint256 minimumAmount) external;\\n\\n    function withdraw(uint256 amount, uint256 minimumAmount) external;\\n\\n    function isNative() external view returns (bool);\\n\\n    function pid() external view returns (uint256);\\n\\n    function depositToken() external view returns (address);\\n\\n    function lpToken() external view returns (address);\\n\\n    function rewarder() external view returns (address);\\n\\n    function stakingToken() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IReferralStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReferralStorage {\\n    function getMyRefererInfo(address _account) external view returns (bytes32, address);\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;    \\n    function setTier(uint256 _tierId, uint256 _totalRebate) external; \\n    function setSharePercent(uint256 _sharePercent) external;\\n    function forceSetCodeOwner(bytes32 _code, address _newAccount) external;\\n    function trigger(address _referee, uint256 _amount) external;\\n    function updateTotalFactor(address _account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISimpleHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISimpleHelper {\\n    function depositFor(uint256 _amount, address _for) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IvlmgpPBaseRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBaseRewardPool.sol\\\";\\n\\ninterface IvlmgpPBaseRewarder is IBaseRewardPool {\\n    \\n    function queueMGP(uint256 _amount, address _user, address _receiver) external returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWNative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWNative {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IMasterWombat.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMasterWombat {\\n\\n    function getAssetPid(address lp) external view returns(uint256);\\n    \\n    function depositFor(uint256 pid, uint256 amount, address account) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids) external returns (\\n        uint256 transfered,\\n        uint256[] memory amounts,\\n        uint256[] memory additionalRewards\\n    );\\n\\n    function pendingTokens(uint256 _pid, address _user) external view\\n        returns (\\n            uint256 pendingRewards,\\n            IERC20[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n    );\\n\\n    function migrate(uint256[] calldata _pids) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/wombat/IWombatStakingV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWombatStaking {\\n    function convertWOM(uint256 amount) external returns (uint256);\\n\\n    function masterWombat() external view returns (address);\\n\\n    function deposit(\\n        address _lpToken,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address _for,\\n        address _from\\n    ) external returns(uint256);\\n\\n    function depositLP(address _lpToken, uint256 _lpAmount, address _for) external;\\n\\n    function withdraw(\\n        address _lpToken,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address _sender\\n    ) external;\\n\\n    function withdrawLP(address _lpToken, uint256 _lpAmount, address _sender) external;\\n\\n    function getPoolLp(address _lpToken) external view returns (address);\\n\\n    function harvest(address _lpToken) external;\\n\\n    function vote(\\n        address[] calldata _lpVote,\\n        int256[] calldata _deltas,\\n        address[] calldata _rewarders,\\n        address caller\\n    ) external returns (address[][] memory rewardTokens, uint256[][] memory feeAmounts);\\n\\n    function voter() external view returns (address);\\n\\n    function pendingBribeCallerFee(\\n        address[] calldata pendingPools\\n    )\\n        external\\n        view\\n        returns (IERC20[][] memory rewardTokens, uint256[][] memory callerFeeAmount);\\n}\"\r\n    },\r\n    \"contracts/libraries/MagpieFactoryLibV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {MintableERC20} from \\\"./MintableERC20.sol\\\";\\nimport {BaseRewardPoolV4} from \\\"../rewards/BaseRewardPoolV4.sol\\\";\\nimport {WombatPoolHelperV4} from \\\"../wombat/WombatPoolHelperV4.sol\\\";\\n\\nlibrary MagpieFactoryLibV2 {\\n\\n    function createRewarder(\\n        address _stakingToken,\\n        address _mainRewardToken,\\n        address _masterMagpie,\\n        address _rewardManager\\n    ) external returns (address) {\\n        BaseRewardPoolV4 _rewarder = new BaseRewardPoolV4(\\n            _stakingToken,\\n            _mainRewardToken,\\n            _masterMagpie,\\n            _rewardManager\\n        );\\n        return address(_rewarder);\\n    }\\n\\n    function createWombatPoolHelper(\\n        uint256 _pid,\\n        address _depositToken,\\n        address _lpToken,\\n        address _wombatStaking,\\n        address _masterMagpie,\\n        address _rewarder,\\n        address _mWom,\\n        bool _isNative\\n    ) public returns (address) {\\n        WombatPoolHelperV4 pool = new WombatPoolHelperV4(\\n            _pid,\\n            _depositToken,\\n            _lpToken,\\n            _wombatStaking,\\n            _masterMagpie,\\n            _rewarder,\\n            _mWom,\\n            _isNative\\n        );\\n        return address(pool);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MintableERC20 is ERC20, Ownable {\\n    /*\\n    The ERC20 deployed will be owned by the others contracts of the protocol, specifically by\\n    MasterMagpie and WombatStaking, forbidding the misuse of these functions for nefarious purposes\\n    */\\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {} \\n\\n    function mint(address account, uint256 amount) external virtual onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external virtual onlyOwner {\\n        _burn(account, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Mgp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\\n\\n/// @title MGP\\n/// @author Magpie Team\\ncontract MGP is ERC20('Magpie Token', 'MGP'), ERC20Permit('Magpie Token') {\\n    constructor(address _receipient, uint256 _totalSupply) {\\n        _mint(_receipient, _totalSupply);\\n    }\\n}\"\r\n    },\r\n    \"contracts/rewards/BaseRewardPoolV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IMasterMagpieV2.sol\\\";\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\n\\n/// @title A contract for managing rewards for a pool\\n/// @author Magpie Team\\n/// @notice You can use this contract for getting informations about rewards for a specific pools\\n\\n/// @dev Changes in BaseRewardPoolV4 are:\\n// The usage of receipt token to get the totalStaked is replaced by _calLpSupply() from masterMagpie\\n\\ncontract BaseRewardPoolV4 is Ownable, IBaseRewardPool {\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ State Variables ============ */\\n\\n    uint256 public constant DENOMINATOR = 10**12;\\n\\n    address public immutable stakingToken;\\n    address public immutable operator;          // master magpie\\n    uint256 public immutable stakingTokenDecimals;\\n\\n    address[] public rewardTokens;\\n\\n    struct Reward {\\n        uint256 rewardPerTokenStored;\\n        uint256 queuedRewards;\\n        uint256 historicalRewards;\\n    }\\n\\n    mapping(address => Reward) public rewards;                           // [rewardToken]\\n    // amount by [rewardToken][account], \\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;                 \\n    mapping(address => mapping(address => uint256)) public userRewards;  // amount by [rewardToken][account]\\n    mapping(address => bool) public isRewardToken;\\n    mapping(address => bool) public managers;\\n\\n    /* ============ Events ============ */\\n\\n    event RewardAdded(uint256 _reward, address indexed _token);\\n    event Staked(address indexed _user, uint256 _amount);\\n    event Withdrawn(address indexed _user, uint256 _amount);\\n    event RewardPaid(address indexed _user, address indexed _receiver, uint256 _reward, address indexed _token);\\n    event ManagerUpdated(address indexed _manager, bool _allowed);\\n    event EmergencyWithdrawn(address indexed _manager, address _token, uint256 _amount);\\n\\n    /* ============ Errors ============ */\\n\\n    error OnlyManager();\\n    error OnlyMasterMagpie();\\n    error NotAllowZeroAddress();\\n    error MustBeRewardToken();\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _masterMagpie,\\n        address _rewardManager\\n    ) {\\n        if(\\n            _stakingToken == address(0) ||\\n            _masterMagpie  == address(0) ||\\n            _rewardManager  == address(0)\\n        ) revert NotAllowZeroAddress();\\n\\n        stakingToken = _stakingToken;\\n        stakingTokenDecimals = IERC20Metadata(stakingToken).decimals();\\n        operator = _masterMagpie;\\n\\n        if (_rewardToken != address(0)) {\\n            rewards[_rewardToken] = Reward({\\n                rewardPerTokenStored: 0,\\n                queuedRewards: 0,\\n                historicalRewards: 0\\n            });\\n            rewardTokens.push(_rewardToken);\\n\\n            isRewardToken[_rewardToken] = true;\\n        }\\n\\n        managers[_rewardManager] = true;\\n    }\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManager() {\\n        if (!managers[msg.sender])\\n            revert OnlyManager();\\n        _;\\n    }\\n\\n    modifier onlyMasterMagpie() {\\n        if (msg.sender != operator)\\n            revert OnlyMasterMagpie();\\n        _;\\n    }\\n\\n    modifier updateReward(address _account) {\\n        _updateFor(_account);\\n        _;\\n    }\\n\\n    modifier updateRewards(address _account, address[] memory _rewards) {\\n        uint256 length = _rewards.length;\\n        uint256 userShare = balanceOf(_account);\\n        \\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = _rewards[index];\\n            // if a reward stopped queuing, no need to recalculate to save gas fee\\n            if (userRewardPerTokenPaid[rewardToken][_account] == rewardPerToken(rewardToken))\\n                continue;\\n            userRewards[rewardToken][_account] = _earned(_account, rewardToken, userShare);\\n            userRewardPerTokenPaid[rewardToken][_account] = rewardPerToken(rewardToken);\\n        }\\n        _;\\n    }  \\n\\n    /* ============ External Getters ============ */\\n\\n    /// @notice Returns current amount of staked tokens\\n    /// @return Returns current amount of staked tokens\\n    function totalStaked() public override virtual view returns (uint256) {\\n        return IMasterMagpie(operator).calLpSupply(stakingToken);\\n    }\\n\\n    /// @notice Returns amount of staked tokens in master magpie by account\\n    /// @param _account Address account\\n    /// @return Returns amount of staked tokens by account\\n    function balanceOf(address _account) public override virtual view returns (uint256) {\\n        (uint256 staked, ) =  IMasterMagpie(operator).stakingInfo(stakingToken, _account);\\n        return staked;\\n    }\\n\\n    function stakingDecimals() external override virtual view returns (uint256) {\\n        return stakingTokenDecimals;\\n    }\\n\\n    /// @notice Returns amount of reward token per staking tokens in pool in 10**12\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token per staking tokens in pool in 10**12\\n    function rewardPerToken(address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return rewards[_rewardToken].rewardPerTokenStored;\\n    }\\n\\n    function rewardTokenInfos()\\n        override\\n        external\\n        view\\n        returns\\n        (\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols\\n        )\\n    {\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        bonusTokenAddresses = new address[](rewardTokensLength);\\n        bonusTokenSymbols = new string[](rewardTokensLength);\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            bonusTokenAddresses[i] = rewardTokens[i];\\n            bonusTokenSymbols[i] = IERC20Metadata(address(bonusTokenAddresses[i])).symbol();\\n        }\\n    }\\n\\n    /// @notice Returns amount of reward token earned by a user\\n    /// @param _account Address account\\n    /// @param _rewardToken Address reward token\\n    /// @return Returns amount of reward token earned by a user\\n    function earned(address _account, address _rewardToken)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _earned(_account, _rewardToken, balanceOf(_account));\\n    }\\n\\n    /// @notice Returns amount of all reward tokens\\n    /// @param _account Address account\\n    /// @return pendingBonusRewards as amounts of all rewards.\\n    function allEarned(address _account)\\n        external\\n        override\\n        view\\n        returns (\\n            uint256[] memory pendingBonusRewards\\n        )\\n    {\\n        uint256 length = rewardTokens.length;\\n        pendingBonusRewards = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            pendingBonusRewards[i] = earned(_account, rewardTokens[i]);\\n        }\\n\\n        return pendingBonusRewards;\\n    }\\n\\n    function getRewardLength() external view returns(uint256) {\\n        return rewardTokens.length;\\n    }    \\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Updates the reward information for one account\\n    /// @param _account Address account\\n    function updateFor(address _account) override external {\\n        _updateFor(_account);\\n    }\\n\\n    function getReward(address _account, address _receiver)\\n        public\\n        onlyMasterMagpie\\n        updateReward(_account)\\n        returns (bool)\\n    {\\n        uint256 length = rewardTokens.length;\\n\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            uint256 reward = userRewards[rewardToken][_account]; // updated during updateReward modifier\\n            if (reward > 0) {\\n                _sendReward(rewardToken, _account, _receiver, reward);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getRewards(address _account, address _receiver, address[] memory _rewardTokens) override\\n        external\\n        onlyMasterMagpie\\n        updateRewards(_account, _rewardTokens)\\n    {\\n        uint256 length = _rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = _rewardTokens[index];\\n            uint256 reward = userRewards[rewardToken][_account]; // updated during updateReward modifier\\n            if (reward > 0) {\\n                _sendReward(rewardToken, _account, _receiver, reward);\\n            }\\n        }\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only possible to donate already registered token\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function donateRewards(uint256 _amountReward, address _rewardToken) external {\\n        if (!isRewardToken[_rewardToken])\\n            revert MustBeRewardToken();\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    function updateManager(address _rewardManager, bool _allowed) external onlyOwner {\\n        managers[_rewardManager] = _allowed;\\n\\n        emit ManagerUpdated(_rewardManager, managers[_rewardManager]);\\n    }\\n\\n    /// @notice Sends new rewards to be distributed to the users staking. Only callable by manager\\n    /// @param _amountReward Amount of reward token to be distributed\\n    /// @param _rewardToken Address reward token\\n    function queueNewRewards(uint256 _amountReward, address _rewardToken)\\n        override\\n        external\\n        onlyManager\\n        returns (bool)\\n    {\\n        if (!isRewardToken[_rewardToken]) {\\n            rewardTokens.push(_rewardToken);\\n            isRewardToken[_rewardToken] = true;\\n        }\\n\\n        _provisionReward(_amountReward, _rewardToken);\\n        return true;\\n    }\\n\\n    function emergencyWithdraw(address _rewardToken, address _to) external onlyManager {\\n        uint256 amount = IERC20(_rewardToken).balanceOf(address(this));\\n        IERC20(_rewardToken).safeTransfer(_to, amount);\\n        emit EmergencyWithdrawn(_to, _rewardToken, amount);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _provisionReward(uint256 _amountReward, address _rewardToken) internal {\\n        IERC20(_rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountReward\\n        );\\n        Reward storage rewardInfo = rewards[_rewardToken];\\n        rewardInfo.historicalRewards =\\n            rewardInfo.historicalRewards +\\n            _amountReward;\\n\\n        uint256 totalStake = totalStaked();\\n        if (totalStake == 0) {\\n            rewardInfo.queuedRewards += _amountReward;\\n        } else {\\n            if (rewardInfo.queuedRewards > 0) {\\n                _amountReward += rewardInfo.queuedRewards;\\n                rewardInfo.queuedRewards = 0;\\n            }\\n            rewardInfo.rewardPerTokenStored =\\n                rewardInfo.rewardPerTokenStored +\\n                (_amountReward * 10**stakingTokenDecimals * DENOMINATOR) /\\n                totalStake;\\n        }\\n        emit RewardAdded(_amountReward, _rewardToken);\\n    }\\n\\n    function _earned(address _account, address _rewardToken, uint256 _userShare) internal view returns (uint256) {\\n        return ((_userShare *\\n            (rewardPerToken(_rewardToken) -\\n                userRewardPerTokenPaid[_rewardToken][_account])) /\\n            (10**stakingTokenDecimals * DENOMINATOR)) + userRewards[_rewardToken][_account];\\n    }\\n\\n    function _sendReward(address _rewardToken, address _account, address _receiver, uint256 _amount) internal {\\n        userRewards[_rewardToken][_account] = 0;\\n        IERC20(_rewardToken).safeTransfer(_receiver, _amount);\\n        emit RewardPaid(_account, _receiver, _amount, _rewardToken);\\n    }\\n\\n    function _updateFor(address _account) internal {\\n        uint256 length = rewardTokens.length;\\n        for (uint256 index = 0; index < length; ++index) {\\n            address rewardToken = rewardTokens[index];\\n            // if a reward stopped queuing, no need to recalculate to save gas fee\\n            if (userRewardPerTokenPaid[rewardToken][_account] == rewardPerToken(rewardToken))\\n                continue;\\n\\n            userRewards[rewardToken][_account] = earned(_account, rewardToken);\\n            userRewardPerTokenPaid[rewardToken][_account] = rewardPerToken(rewardToken);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/rewards/MasterMagpieV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nimport \\\"../Mgp.sol\\\";\\nimport \\\"./BaseRewardPoolV4.sol\\\";\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\nimport \\\"../interfaces/IvlmgpPBaseRewarder.sol\\\";\\nimport \\\"../interfaces/IHarvesttablePoolHelper.sol\\\";\\nimport \\\"../interfaces/ILocker.sol\\\";\\nimport \\\"../interfaces/IReferralStorage.sol\\\";\\nimport \\\"../libraries/MagpieFactoryLibV2.sol\\\";\\n\\n\\n// MasterMagpie is a boss. He says \\\"go f your blocks lego boy, I'm gonna use timestamp instead\\\".\\n// And to top it off, it takes no risks. Because the biggest risk is operator error.\\n// So we make it virtually impossible for the operator of this contract to cause a bug with people's harvests.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once MGP is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n/// @title A contract for managing all reward pools\\n/// @author Magpie Team\\n/// @notice You can use this contract for depositing MGP, MWOM, and Liquidity Pool tokens.\\n/// @dev All the ___For() function are function which are supposed to be called by other contract designed by Magpie's team\\n\\n\\n/// Note MasterMagpieV2 is only on Ethereum Mainnet right now.\\n/// @dev Changes in the MasterMagpieV2 are:\\n\\n// The stakingToken of masterMagpie now is NOT the receipt token but the LP token of the wombat Pool\\n\\n// The transfer of all staking tokens to and from the masterMagpie now has been removed except when the staking Token in mWom,\\n// which gets transferred to masterMagpie upon deposit and transferred from masterMagpie upon withdraw.\\n\\n// The MPGRewardPool variable is only for backward compatibility, to avoid storage collision when\\n// upgrading the masterMagpie on Arb and BNB, removed all the logic related to it.\\n\\n// Added the totalDeposit mapping to get the totalDeposit in a pool which was accomplished before by \\n// 'IERC20(stakingToken).balanceOf(masterMagpie)' where staking token used to be the receipt token.\\n// totalDeposit gives the amount of LP staked by wombatStaking into wombat exchange.\\n\\n// calLpSupply() is now public instead of internal so baseRewardPool can use it to get totalStaked \\n// which was earlier achieved by IERC20(stakingToken).totalSupply() in baseRewardPool.\\n\\n// removed the functions to set compounder, mgp, mwomsv and added the config methods that sets the\\n// vlmgp, mgp, compounder and mWomSV together.\\n\\n\\n\\ncontract MasterMagpieV2 is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Structs ============ */\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many staking tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 available; // in case of locking\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of MGPs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accMGPPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws staking tokens to a pool. Here's what happens:\\n        //   1. The pool's `accMGPPerShare` (and `lastRewardTimestamp`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        address stakingToken; // Address of staking token contract to be staked.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. MGPs to distribute per second.\\n        uint256 lastRewardTimestamp; // Last timestamp that MGPs distribution occurs.\\n        uint256 accMGPPerShare; // Accumulated MGPs per share, times 1e12. See below.\\n        address rewarder;\\n        address helper;\\n        bool    helperNeedsHarvest;\\n        uint256 totalDeposit;\\n        bool transferStakingToken;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // The MGP TOKEN!\\n    MGP public mgp;\\n\\n    ILocker public vlmgp;\\n\\n    // MGP tokens created per second.\\n    uint256 public mgpPerSec;\\n\\n    // Registered staking tokens \\n    address[] public registeredToken;\\n    // Info of each pool.\\n    mapping(address => PoolInfo) public tokenToPoolInfo;\\n    // Set of all staking tokens that have been added as pools\\n    mapping(address => bool) private openPools;\\n    // Info of each user that stakes staking tokens [_staking][_account]\\n    mapping(address => mapping(address => UserInfo)) private userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    // The timestamp when MGP mining starts.\\n    uint256 public startTimestamp;\\n\\n    mapping(address => bool) public PoolManagers;\\n\\n    address public compounder;\\n\\n    /* ==== variable added for first upgrade === */\\n\\n    mapping(address => bool) public MPGRewardPool; //  No use anymore, just to avoid storage collision while upgrading on Arb &BNB`\\n\\n    /* ==== variable added for second upgrade === */\\n\\n    mapping(address => mapping (address => uint256)) public unClaimedMgp; // unclaimed mgp reward before lastRewardTimestamp\\n    mapping(address => address) public legacyRewarder; // old rewarder\\n\\n    /* ==== variable added for third upgrade === */\\n\\n    address public referral;\\n\\n    /* ==== variable added for fourth upgrade === */\\n\\n    ILocker public mWomSV;\\n\\n    /* ============ Events ============ */\\n\\n    event Add(\\n        uint256 _allocPoint,\\n        address indexed _stakingToken,\\n        IBaseRewardPool indexed _rewarder\\n    );\\n    event Set(\\n        address indexed _stakingToken,\\n        uint256 _allocPoint,\\n        IBaseRewardPool indexed _rewarder\\n    );\\n    event Deposit(\\n        address indexed _user,\\n        address indexed _stakingToken,\\n        uint256 _amount\\n    );\\n    event Withdraw(\\n        address indexed _user,\\n        address indexed _stakingToken,\\n        uint256 _amount\\n    );\\n    event UpdatePool(\\n        address indexed _stakingToken,\\n        uint256 _lastRewardTimestamp,\\n        uint256 _lpSupply,\\n        uint256 _accMGPPerShare\\n    );\\n    event HarvestMGP(\\n        address indexed _account,\\n        address indexed _receiver,\\n        uint256 _amount,\\n        bool isLock\\n    );\\n    event EmergencyWithdraw(\\n        address indexed _user,\\n        address indexed _stakingToken,\\n        uint256 _amount\\n    );\\n    event UpdateEmissionRate(address indexed _user, uint256 _oldMgpPerSec, uint256 _newMgpPerSec);\\n    event UpdatePoolAlloc(address _stakingToken, uint256 _oldAllocPoint, uint256 _newAllocPoint);\\n    event PoolManagerStatus(address _account, bool _status);\\n    event CompounderUpdated(address _newCompounder, address _oldCompounder);\\n    event VLMGPUpdated(address _newVlmgp, address _oldVlmgp);\\n    event MWomSVpdated(address _mWomSV, address _oldMWomSV);\\n    event DepositNotAvailable(address indexed _user,  address indexed _stakingToken, uint256 _amount);\\n    event MGPSet(address _mgp);\\n    event LockFreePoolUpdated(address _stakingToken, bool _isRewardMGP);    \\n\\n    /* ============ Errors ============ */\\n\\n    error OnlyPoolManager();\\n    error OnlyPoolHelper();\\n    error OnlyActivePool();\\n    error PoolExsisted();\\n    error InvalidStakingToken();\\n    error WithdrawAmountExceedsStaked();\\n    error UnlockAmountExceedsLocked();\\n    error MustBeContractOrZero();\\n    error OnlyCompounder();\\n    error OnlyLocker();\\n    error MGPsetAlready();\\n    error MustBeContract();\\n    error LengthMismatch();\\n\\n    /* ============ Constructor ============ */    \\n\\n    function __MasterMagpie_init(\\n        address _mgp,\\n        uint256 _mgpPerSec,\\n        uint256 _startTimestamp\\n    ) public initializer {\\n\\n        __Ownable_init();        \\n        mgp = MGP(_mgp);\\n        mgpPerSec = _mgpPerSec;\\n        startTimestamp = _startTimestamp;\\n        totalAllocPoint = 0;\\n        PoolManagers[owner()] = true;\\n    }\\n\\n    /* ============ Modifiers ============ */\\n    \\n    modifier _onlyPoolManager() {\\n        if (!PoolManagers[msg.sender])\\n            revert OnlyPoolManager();\\n        _;\\n    }\\n\\n    modifier _onlyPoolHelper(address _stakedToken) {\\n        if (msg.sender != tokenToPoolInfo[_stakedToken].helper)\\n            revert OnlyPoolHelper();\\n        _;            \\n    }\\n\\n    modifier _onlyWhiteListedLocker() {\\n        if(msg.sender != address(mWomSV) && msg.sender != address(vlmgp))\\n            revert OnlyLocker();\\n        _;\\n    }\\n\\n    modifier _onlyCompounder() {\\n        if (msg.sender != compounder)\\n            revert OnlyCompounder();\\n        _;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    /// @notice Returns number of registered tokens, tokens having a registered pool.\\n    /// @return Returns number of registered tokens\\n    function poolLength() external view returns (uint256) {\\n        return registeredToken.length;\\n    }\\n\\n    /// @notice Gives information about a Pool. Used for APR calculation and Front-End\\n    /// @param _stakingToken Staking token of the pool we want to get information from\\n    /// @return emission - Emissions of MGP from the contract, allocpoint - Allocated emissions of MGP to the pool,sizeOfPool - size of Pool, totalPoint total allocation points\\n\\n    function getPoolInfo(address _stakingToken)\\n        external\\n        view\\n        returns (\\n            uint256 emission,\\n            uint256 allocpoint,\\n            uint256 sizeOfPool,\\n            uint256 totalPoint\\n        )\\n    {\\n        PoolInfo memory pool = tokenToPoolInfo[_stakingToken];\\n        return (\\n            (mgpPerSec * pool.allocPoint / totalAllocPoint),\\n            pool.allocPoint,\\n            calLpSupply(_stakingToken),\\n            totalAllocPoint\\n        );\\n    }\\n\\n    /// @notice Provides available amount for a specific user for a specific pool.\\n    /// @param _stakingToken Staking token of the pool\\n    /// @param _user Address of the user\\n\\n    function stakingInfo(address _stakingToken, address _user)\\n        public\\n        view\\n        returns (uint256 stakedAmount, uint256 availableAmount)\\n    {\\n        return (userInfo[_stakingToken][_user].amount, userInfo[_stakingToken][_user].available);\\n    }\\n\\n    /// @notice View function to see pending reward tokens on frontend.\\n    /// @param _stakingToken Staking token of the pool\\n    /// @param _user Address of the user\\n    /// @param _rewardToken Specific pending reward token, apart from MGP\\n    /// @return pendingMGP - Expected amount of MGP the user can claim, bonusTokenAddress - token, bonusTokenSymbol - token Symbol,  pendingBonusToken - Expected amount of token the user can claim\\n    function pendingTokens(\\n        address _stakingToken,\\n        address _user,\\n        address _rewardToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingMGP,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        )\\n    {\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n        pendingMGP = _calMGPReward(_stakingToken, _user);\\n\\n        // If it's a multiple reward farm, we return info about the specific bonus token\\n        if (address(pool.rewarder) != address(0)) {\\n            (bonusTokenAddress, bonusTokenSymbol) = (\\n                _rewardToken,\\n                IERC20Metadata(_rewardToken).symbol()\\n            );\\n            pendingBonusToken = IBaseRewardPool(pool.rewarder).earned(\\n                _user,\\n                _rewardToken\\n            );\\n        }\\n    }\\n\\n    function allPendingTokens(address _stakingToken, address _user)\\n        external view returns (\\n            uint256 pendingMGP,\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        )\\n    {\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n        pendingMGP = _calMGPReward(_stakingToken, _user);\\n\\n        // If it's a multiple reward farm, we return all info about the bonus tokens\\n        if (address(pool.rewarder) != address(0)) {\\n            (bonusTokenAddresses, bonusTokenSymbols) = IBaseRewardPool(pool.rewarder).rewardTokenInfos();\\n            pendingBonusRewards = IBaseRewardPool(pool.rewarder).allEarned(_user);\\n        }\\n    }\\n\\n    function rewarderBonusTokenInfo(address _stakingToken) public view\\n        returns (address[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols)\\n    {\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n        if (address(pool.rewarder) == address(0)) {\\n            return (bonusTokenAddresses, bonusTokenSymbols);\\n        }\\n\\n        (bonusTokenAddresses, bonusTokenSymbols) = IBaseRewardPool(pool.rewarder).rewardTokenInfos();\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Deposits staking token to the pool, updates pool and distributes rewards\\n    /// @param _stakingToken Staking token of the pool\\n    /// @param _amount Amount to deposit to the pool\\n    function deposit(address _stakingToken, uint256 _amount) external whenNotPaused nonReentrant {\\n        _deposit(_stakingToken, msg.sender, _amount, false);\\n    }\\n\\n    /// @notice Withdraw staking tokens from Master Mgapie.\\n    /// @param _stakingToken Staking token of the pool\\n    /// @param _amount amount to withdraw\\n    function withdraw(address _stakingToken, uint256 _amount) external whenNotPaused nonReentrant {\\n        _withdraw(_stakingToken, msg.sender, _amount, false);\\n    }\\n\\n    /// @notice Deposit staking tokens to Master Magpie. Can only be called by pool helper\\n    /// @param _stakingToken Staking token of the pool\\n    /// @param _amount Amount to deposit\\n    /// @param _for Address of the user the pool helper is depositing for, and also harvested reward will be sent to\\n    function depositFor(\\n        address _stakingToken,\\n        uint256 _amount,\\n        address _for\\n    ) external whenNotPaused _onlyPoolHelper(_stakingToken) nonReentrant {\\n        _deposit(_stakingToken, _for, _amount, false);\\n    }\\n\\n    /// @notice Withdraw staking tokens from Mastser Magpie for a specific user. Can only be called by pool helper\\n    /// @param _stakingToken Staking token of the pool\\n    /// @param _amount amount to withdraw   \\n    /// @param _for address of the user to withdraw for, and also harvested reward will be sent to\\n    function withdrawFor(\\n        address _stakingToken,\\n        uint256 _amount,\\n        address _for\\n    ) external whenNotPaused _onlyPoolHelper(_stakingToken) nonReentrant {\\n        _withdraw(_stakingToken, _for, _amount, false);\\n    }\\n\\n    /// @notice Update reward variables of the given pool to be up-to-date.\\n    /// @param _stakingToken Staking token of the pool\\n    function updatePool(address _stakingToken) public whenNotPaused {\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n        if (block.timestamp <= pool.lastRewardTimestamp || totalAllocPoint == 0) {\\n            return;\\n        }\\n        uint256 lpSupply = calLpSupply(_stakingToken);\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }        \\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n        uint256 mgpReward = (multiplier * mgpPerSec * pool.allocPoint) / totalAllocPoint;\\n        \\n        pool.accMGPPerShare = pool.accMGPPerShare + ((mgpReward * 1e12) / lpSupply);\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _stakingToken,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accMGPPerShare\\n        );\\n    }    \\n\\n    /// @notice Update reward variables for all pools. Be mindful of gas costs!\\n    function massUpdatePools() public whenNotPaused {\\n        for (uint256 pid = 0; pid < registeredToken.length; ++pid) {\\n            updatePool(registeredToken[pid]);\\n        }\\n    }\\n\\n    /// @notice Claims for each of the pools with specified rewards to claim for each pool\\n    function multiclaimSpec(address[] calldata _stakingTokens, address[][] memory _rewardTokens)\\n        external whenNotPaused\\n    {\\n        _multiClaim(_stakingTokens, msg.sender, msg.sender, _rewardTokens);\\n    }\\n\\n    /// @notice Claims for each of the pools with specified rewards to claim for each pool\\n    function multiclaimFor(address[] calldata _stakingTokens, address[][] memory _rewardTokens, address _account)\\n        external whenNotPaused\\n    {\\n        _multiClaim(_stakingTokens, _account, _account, _rewardTokens);\\n    }\\n\\n    /// @notice Claims for each of the pools with specified rewards to claim for each pool. ONLY callable by compounder!!!!!!\\n    function multiclaimOnBehalf(address[] calldata _stakingTokens, address[][] memory _rewardTokens, address _account)\\n        external whenNotPaused _onlyCompounder\\n    {\\n        _multiClaim(_stakingTokens, _account, msg.sender, _rewardTokens);\\n    }\\n\\n    /// @notice Claim for all rewards for the pools\\n    function multiclaim(address[] calldata _stakingTokens)\\n        external whenNotPaused\\n    {\\n        address[][] memory rewardTokens = new address[][](_stakingTokens.length);\\n        _multiClaim(_stakingTokens, msg.sender, msg.sender, rewardTokens);\\n    }\\n\\n    /* ============ VLMGP interaction Functions ============ */\\n\\n    function depositVlMGPFor(\\n        uint256 _amount,\\n        address _for\\n    ) external whenNotPaused _onlyWhiteListedLocker {\\n        _deposit(address(vlmgp), _for, _amount, true);\\n    }\\n    \\n    function withdrawVlMGPFor(\\n        uint256 _amount,\\n        address _for\\n    ) external whenNotPaused _onlyWhiteListedLocker {\\n        _withdraw(address(vlmgp), _for, _amount, true);\\n    }\\n\\n    function depositMWomSVFor(\\n        uint256 _amount,\\n        address _for\\n    ) external whenNotPaused _onlyWhiteListedLocker {\\n        _deposit(address(mWomSV), _for, _amount, true);\\n    }\\n    \\n    function withdrawMWomSVFor(\\n        uint256 _amount,\\n        address _for\\n    ) external whenNotPaused _onlyWhiteListedLocker {\\n        _withdraw(address(mWomSV), _for, _amount, true);\\n    }    \\n\\n    function calLpSupply(address _stakingToken) public view returns (uint256) {\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n        if (_stakingToken == address(vlmgp)) {\\n            return IERC20(address(vlmgp)).totalSupply();\\n        }\\n        if (_stakingToken == address(mWomSV)) {\\n            return IERC20(address(mWomSV)).totalSupply();\\n        }\\n        return pool.totalDeposit;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /// @notice internal function to deal with deposit staking token\\n    function _deposit(address _stakingToken, address _account, uint256 _amount, bool _isLock) internal {\\n        updatePool(_stakingToken);\\n\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n        UserInfo storage user = userInfo[_stakingToken][_account];\\n\\n        if (user.amount > 0) {\\n            _harvestMGP(_stakingToken, _account);\\n        }\\n        _harvestBaseRewarder(_stakingToken, _account);\\n\\n        user.amount = user.amount + _amount;\\n        pool.totalDeposit += _amount;\\n        if (!_isLock) {\\n            user.available = user.available + _amount;\\n        }\\n        if(pool.transferStakingToken){\\n            IERC20(pool.stakingToken).safeTransferFrom(address(msg.sender), address(this), _amount);\\n        }\\n        user.rewardDebt = (user.amount * pool.accMGPPerShare) / 1e12;\\n\\n        if (_amount > 0)\\n            if (!_isLock)\\n                emit Deposit(_account, _stakingToken, _amount);\\n            else\\n                emit DepositNotAvailable(_account, _stakingToken, _amount);\\n    }\\n\\n    /// @notice internal function to deal with withdraw staking token\\n    function _withdraw(address _stakingToken, address _account, uint256 _amount, bool _isLock) internal {\\n        _harvestAndUnstake(_stakingToken, _account, _amount, _isLock);\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n        if(pool.transferStakingToken){\\n            IERC20(pool.stakingToken).safeTransfer(_account, _amount);\\n        }\\n        emit Withdraw(_account, _stakingToken, _amount);\\n    }\\n\\n    function _harvestAndUnstake(address _stakingToken, address _account, uint256 _amount, bool _isLock) internal {\\n        updatePool(_stakingToken);\\n\\n        UserInfo storage user = userInfo[_stakingToken][_account];\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n\\n        if (!_isLock && user.available < _amount)\\n            revert WithdrawAmountExceedsStaked();\\n        else if(user.amount < _amount && _isLock)\\n            revert UnlockAmountExceedsLocked();\\n        \\n        _harvestMGP(_stakingToken, _account);\\n        _harvestBaseRewarder(_stakingToken, _account);\\n\\n        user.amount = user.amount - _amount;\\n        pool.totalDeposit -= _amount;\\n        \\n        if(!_isLock)\\n            user.available = user.available - _amount;\\n        user.rewardDebt = (user.amount * tokenToPoolInfo[_stakingToken].accMGPPerShare) / 1e12;\\n    }\\n\\n    function _multiClaim(address[] calldata _stakingTokens, address _user, address _receiver, address[][] memory _rewardTokens) internal nonReentrant {\\n        uint256 length = _stakingTokens.length;\\n        if (length != _rewardTokens.length) revert LengthMismatch();\\n\\n        uint256 totalClaimableMGP;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            address _stakingToken = _stakingTokens[i];\\n            UserInfo storage user = userInfo[_stakingToken][_user];\\n            \\n            updatePool(_stakingToken);\\n            uint256 claimableMgp = _calNewMGP(_stakingToken, _user) + unClaimedMgp[_stakingToken][_user];\\n\\n            totalClaimableMGP += claimableMgp;\\n            unClaimedMgp[_stakingToken][_user] = 0;\\n            user.rewardDebt = (user.amount * tokenToPoolInfo[_stakingToken].accMGPPerShare) / 1e12;\\n            _claimBaseRewarder(_stakingToken, _user, _receiver, _rewardTokens[i]);\\n        }\\n\\n        if (totalClaimableMGP > 0) {\\n            _sendMGP(_user, _receiver, totalClaimableMGP);\\n        }\\n\\n        uint256 totalReward = totalClaimableMGP;\\n\\n        if (totalReward > 0 && referral != address(0)) {\\n            IReferralStorage(referral).trigger(_user, totalReward);\\n        }\\n    }\\n\\n    /// @notice calculate MGP reward based at current timestamp, for frontend only\\n    function _calMGPReward(address _stakingToken, address _user) internal view returns(uint256 pendingMGP) {\\n        PoolInfo storage pool = tokenToPoolInfo[_stakingToken];\\n        UserInfo storage user = userInfo[_stakingToken][_user];\\n        uint256 accMGPPerShare = pool.accMGPPerShare;\\n        uint256 lpSupply = calLpSupply(_stakingToken);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 mgpReward = (multiplier * mgpPerSec * pool.allocPoint) /\\n            totalAllocPoint;\\n            accMGPPerShare = accMGPPerShare + (mgpReward * 1e12) / lpSupply;\\n        }\\n\\n        pendingMGP = (user.amount * accMGPPerShare) / 1e12 - user.rewardDebt;\\n        pendingMGP += unClaimedMgp[_stakingToken][_user];\\n    }\\n\\n    /// @notice Harvest MGP for an account\\n    /// only update the reward counting but not sending them to user\\n    function _harvestMGP(address _stakingToken, address _account) internal {\\n        // Harvest MGP\\n        uint256 pending = _calNewMGP(_stakingToken, _account);\\n        unClaimedMgp[_stakingToken][_account] += pending;\\n    }\\n\\n    /// @notice calculate MGP reward based on current accMGPPerShare\\n    function _calNewMGP(address _stakingToken, address _account) view internal returns(uint256) {\\n        UserInfo storage user = userInfo[_stakingToken][_account];\\n        uint256 pending = (user.amount * tokenToPoolInfo[_stakingToken].accMGPPerShare) /\\n            1e12 -\\n            user.rewardDebt;\\n        return pending;\\n    }\\n\\n    /// @notice Harvest reward token in BaseRewarder for an account. NOTE: Baserewarder use user staking token balance as source to\\n    /// calculate reward token amount\\n    function _claimBaseRewarder(address _stakingToken, address _account, address _receiver, address[] memory _rewardTokens) internal {\\n        IBaseRewardPool rewarder = IBaseRewardPool(tokenToPoolInfo[_stakingToken].rewarder);\\n        if (address(rewarder) != address(0)) {\\n            if (_rewardTokens.length > 0)\\n                rewarder.getRewards(_account, _receiver, _rewardTokens);\\n            else\\n                // if not specifiying any reward token, just claim them all\\n                rewarder.getReward(_account, _receiver);\\n        }\\n    }\\n\\n    /// only update the reward counting on in base rewarder but not sending them to user\\n    function _harvestBaseRewarder(address _stakingToken, address _account) internal {\\n        IBaseRewardPool rewarder = IBaseRewardPool(tokenToPoolInfo[_stakingToken].rewarder);\\n        if (address(rewarder) != address(0))\\n            rewarder.updateFor(_account);\\n    }\\n\\n    function _sendMGP(address _account, address _receiver, uint256 _amount) internal {\\n        IERC20(mgp).safeTransfer(_receiver, _amount);\\n\\n        emit HarvestMGP(_account, _receiver, _amount, false);\\n    }\\n\\n\\n    /* ============ Admin Functions ============ */\\n    /// @notice Used to give edit rights to the pools in this contract to a Pool Manager\\n    /// @param _account Pool Manager Adress\\n    /// @param _allowedManager True gives rights, False revokes them\\n    function setPoolManagerStatus(address _account, bool _allowedManager)\\n        external\\n        onlyOwner\\n    {\\n        PoolManagers[_account] = _allowedManager;    \\n\\n        emit PoolManagerStatus(_account, PoolManagers[_account]);\\n    }\\n\\n    function config(address _mgp, address _compounder, address _vlmgp, address _mWomSV) external onlyOwner{\\n        mgp= MGP(_mgp);\\n        compounder = _compounder;\\n        vlmgp = ILocker(_vlmgp);\\n        mWomSV = ILocker(_mWomSV);\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }   \\n\\n    /// @notice Add a new pool. Can only be called by a PoolManager.\\n    /// @param _allocPoint Allocation points of MGP to the pool\\n    /// @param _stakingToken Staking token of the pool\\n    /// @param _rewarder Address of the rewarder for the pool\\n    /// @param _helper Address of the helper for the pool\\n    /// @param _helperNeedsHarvest Address of the helper for the pool\\n    function add(\\n        uint256 _allocPoint,\\n        address _stakingToken,\\n        address _rewarder,\\n        address _helper,\\n        bool _helperNeedsHarvest,\\n        bool _transferStakingToken\\n    ) external _onlyPoolManager {\\n        if (!Address.isContract(address(_stakingToken)))\\n            revert InvalidStakingToken();\\n\\n        if (!Address.isContract(address(_helper)) && address(_helper) != address(0))\\n            revert MustBeContractOrZero();\\n\\n        if (!Address.isContract(address(_rewarder)) && address(_rewarder) != address(0))\\n            revert MustBeContractOrZero();\\n\\n        if (openPools[_stakingToken])\\n            revert PoolExsisted();\\n\\n        massUpdatePools();\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        registeredToken.push(_stakingToken);\\n\\n        tokenToPoolInfo[_stakingToken] = PoolInfo({\\n            stakingToken: _stakingToken,\\n            allocPoint: _allocPoint,\\n            lastRewardTimestamp: lastRewardTimestamp,\\n            accMGPPerShare: 0,\\n            rewarder: _rewarder,\\n            helper: _helper,\\n            helperNeedsHarvest: _helperNeedsHarvest,\\n            totalDeposit: 0,\\n            transferStakingToken: _transferStakingToken\\n        });\\n        openPools[_stakingToken] = true;\\n        emit Add(_allocPoint, _stakingToken, IBaseRewardPool(_rewarder));\\n    }\\n\\n    /// @notice Updates the given pool's MGP allocation point, rewarder address and locker address if overwritten. Can only be called by a Pool Manager.\\n    /// @param _stakingToken Staking token of the pool\\n    /// @param _allocPoint Allocation points of MGP to the pool\\n    /// @param _rewarder Address of the rewarder for the pool\\n    function set(\\n        address _stakingToken,\\n        uint256 _allocPoint,\\n        address _helper,\\n        address _rewarder,\\n        bool _helperNeedsHarvest,\\n        bool _transferStakingToken\\n    ) external _onlyPoolManager {\\n        if (!Address.isContract(address(_rewarder)) \\n            && address(_rewarder) != address(0))\\n            revert MustBeContractOrZero();\\n\\n        if (!Address.isContract(address(_helper)) \\n            && address(_helper) != address(0))\\n            revert MustBeContractOrZero();            \\n\\n        if (!openPools[_stakingToken])\\n            revert OnlyActivePool();\\n\\n        massUpdatePools();\\n\\n        totalAllocPoint = \\n            totalAllocPoint - \\n            tokenToPoolInfo[_stakingToken].allocPoint +\\n            _allocPoint;\\n\\n        tokenToPoolInfo[_stakingToken].allocPoint = _allocPoint;\\n        tokenToPoolInfo[_stakingToken].rewarder = _rewarder;\\n        tokenToPoolInfo[_stakingToken].helper = _helper;\\n        tokenToPoolInfo[_stakingToken].helperNeedsHarvest = _helperNeedsHarvest;\\n        tokenToPoolInfo[_stakingToken].transferStakingToken = _transferStakingToken;\\n\\n        emit Set(\\n            _stakingToken,\\n            _allocPoint,\\n            IBaseRewardPool(tokenToPoolInfo[_stakingToken].rewarder)\\n        );\\n    }\\n\\n    function createRewarder(\\n        address _stakingToken,\\n        address mainRewardToken\\n    ) external _onlyPoolManager returns (address) {\\n        address rewarder = MagpieFactoryLibV2.createRewarder(\\n            _stakingToken,\\n            mainRewardToken,\\n            address(this),\\n            msg.sender\\n        );\\n\\n        return rewarder;\\n    }\\n\\n    function setLegacyRewarder(address _stakingToken, address _legacyRewarder) external onlyOwner {\\n        legacyRewarder[_stakingToken] = _legacyRewarder;\\n    }\\n\\n    function setReferral(address _referral) external onlyOwner {\\n        referral = _referral;\\n    }    \\n\\n    /// @notice Update the emission rate of MGP for MasterMagpie\\n    /// @param _mgpPerSec new emission per second\\n    function updateEmissionRate(uint256 _mgpPerSec) public onlyOwner {        \\n        massUpdatePools();\\n        uint256 oldEmissionRate = mgpPerSec;\\n        mgpPerSec = _mgpPerSec;\\n\\n        emit UpdateEmissionRate(msg.sender, oldEmissionRate, mgpPerSec);\\n    }\\n\\n    function updatePoolsAlloc(address[] calldata _stakingTokens, uint256[] calldata _allocPoints) external onlyOwner {\\n        massUpdatePools();\\n\\n        if (_stakingTokens.length != _allocPoints.length)\\n            revert LengthMismatch();\\n\\n        for (uint256 i = 0; i < _stakingTokens.length; i++) {\\n            uint256 oldAllocPoint = tokenToPoolInfo[_stakingTokens[i]].allocPoint;\\n\\n            totalAllocPoint = totalAllocPoint - oldAllocPoint + _allocPoints[i];\\n\\n            tokenToPoolInfo[_stakingTokens[i]].allocPoint = _allocPoints[i];\\n\\n            emit UpdatePoolAlloc(_stakingTokens[i], oldAllocPoint, _allocPoints[i]);\\n        }\\n    }\\n\\n    // BaseRewarePool manager functions\\n\\n    function updateRewarderManager(address _rewarder, address _manager, bool _allowed) external onlyOwner {\\n        IBaseRewardPool rewarder = IBaseRewardPool(_rewarder);\\n        rewarder.updateManager(_manager, _allowed);\\n    }\\n}\"\r\n    },\r\n    \"contracts/wombat/WombatPoolHelperV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/IBaseRewardPool.sol\\\";\\nimport \\\"../interfaces/IHarvesttablePoolHelper.sol\\\";\\nimport \\\"../interfaces/wombat/IWombatStakingV2.sol\\\";\\nimport \\\"../interfaces/wombat/IMasterWombat.sol\\\";\\nimport \\\"../interfaces/IMasterMagpie.sol\\\";\\nimport \\\"../interfaces/IMintableERC20.sol\\\";\\nimport \\\"../interfaces/IWNative.sol\\\";\\nimport \\\"../interfaces/ISimpleHelper.sol\\\";\\n/// @title WombatPoolHelper\\n/// @author Magpie Team\\n/// @notice This contract is the main contract that user will intreact with in order to stake stable in Wombat Pool\\n\\n/// @dev PoolHelperV4 is currently only on Ethereum Mainnet.\\n// Difference between V4 and V1 are:\\n// 1. The withdrawLP functionality to withdraw LP token from masterWombat\\n// 2. The functionality to claim rewards with withdraw of deposit tokens or LP tokens\\n// 3. The stakingToken(used to be the receipt token on masterMagpie) and its related logic are now removed.\\n\\ncontract WombatPoolHelperV4 {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Constants ============ */\\n\\n    address public immutable depositToken; // token to deposit into wombat\\n    address public immutable lpToken; // lp token receive from wombat, also the pool identified on womabtStaking\\n    address public immutable mWom;\\n\\n    address public immutable masterMagpieV2;\\n    address public immutable wombatStakingV2;\\n    address public immutable rewarderV4;\\n\\n    uint256 public immutable pid; // pid on master wombat\\n\\n    bool public immutable isNative;\\n\\n    /* ============ Events ============ */\\n\\n    event NewDeposit(address indexed _user, uint256 _amount);\\n    event NewLpDeposit(address indexed _user, uint256 _amount);\\n    event NewWithdraw(address indexed _user, uint256 _amount);\\n    event NewLpWithdraw(address indexed _user, uint256 _amount);\\n\\n    /* ============ Errors ============ */\\n\\n    error NotNativeToken();\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        uint256 _pid,\\n        address _depositToken,\\n        address _lpToken,\\n        address _wombatStaking,\\n        address _masterMagpie,\\n        address _rewarder,\\n        address _mWom,\\n        bool _isNative\\n    ) {\\n        pid = _pid;\\n        depositToken = _depositToken;\\n        lpToken = _lpToken;\\n        wombatStakingV2 = _wombatStaking;\\n        masterMagpieV2 = _masterMagpie;\\n        rewarderV4 = _rewarder;\\n        mWom = _mWom;\\n        isNative = _isNative;\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    /// notice get the amount of total staked LP token in master magpie\\n    function totalStaked() external view returns (uint256) {\\n        return IBaseRewardPool(rewarderV4).totalStaked();\\n    }\\n\\n    /// @notice get the total amount of shares of a user\\n    /// @param _address the user\\n    /// @return the amount of shares\\n    function balance(\\n        address _address\\n    ) external view returns (uint256) {\\n        return IBaseRewardPool(rewarderV4).balanceOf(_address);\\n    }\\n\\n    /// @notice returns the number of pending MGP of the contract for the given pool\\n    /// returns pendingTokens the number of pending MGP\\n    function pendingWom() external view returns (uint256 pendingTokens) {\\n        (pendingTokens, , , ) = IMasterWombat(\\n            IWombatStaking(wombatStakingV2).masterWombat()\\n        ).pendingTokens(pid, wombatStakingV2);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice deposit stables in wombat pool, autostake in master magpie\\n    /// @param _amount the amount of stables to deposit\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _minimumLiquidity\\n    ) external {\\n        _deposit(_amount, _minimumLiquidity, msg.sender, msg.sender);\\n    }\\n\\n    function depositFor(uint256 _amount, address _for) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(depositToken).safeApprove(wombatStakingV2, _amount);\\n        _deposit(_amount, 0, _for, address(this));\\n    }\\n\\n    function depositLP(uint256 _lpAmount) external {\\n        IWombatStaking(wombatStakingV2).depositLP(lpToken, _lpAmount, msg.sender);\\n        _stake(_lpAmount, msg.sender);\\n\\n        emit NewLpDeposit(msg.sender, _lpAmount);\\n    }\\n\\n    function depositNative(uint256 _minimumLiquidity) external payable {\\n        if (!isNative) revert NotNativeToken();\\n        // Dose need to limit the amount must > 0?\\n\\n        // Swap the BNB to wBNB\\n        _wrapNative();\\n        // depsoit wBNB to the pool\\n        IWNative(depositToken).approve(wombatStakingV2, msg.value);\\n        _deposit(msg.value, _minimumLiquidity, msg.sender, address(this));\\n        IWNative(depositToken).approve(wombatStakingV2, 0);\\n    }\\n\\n    /// @notice withdraw stables from wombat pool, auto unstake from master Magpie\\n    /// @param _liquidity the amount of liquidity to withdraw\\n    function withdraw(\\n        uint256 _liquidity,\\n        uint256 _minAmount\\n    ) external {\\n        _withdraw(_liquidity, _minAmount, false);\\n    }\\n\\n    function withdrawAndClaim(\\n        uint256 _liquidity,\\n        uint256 _minAmount,\\n        bool _isClaim\\n    ) external {\\n        _withdraw(_liquidity, _minAmount, _isClaim);\\n    }\\n\\n    function withdrawLP(uint256 _amount, bool claim) external {\\n        // withdraw from wombat exchange and harvest rewards to base rewarder\\n        IWombatStaking(wombatStakingV2).withdrawLP(lpToken, _amount, msg.sender);\\n        // unstke from Master Wombat and trigger reward distribution from basereward\\n        _unstake(_amount, msg.sender);\\n        // claim all rewards\\n        if (claim) _claimRewards(msg.sender);\\n        emit NewLpWithdraw(msg.sender, _amount);\\n    }\\n\\n    function harvest() external {\\n        IWombatStaking(wombatStakingV2).harvest(lpToken);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _withdraw(\\n        uint256 _liquidity,\\n        uint256 _minAmount,\\n        bool _claim\\n    ) internal {\\n        // we have to withdraw from wombat exchange to harvest reward to base rewarder\\n        IWombatStaking(wombatStakingV2).withdraw(\\n            lpToken,\\n            _liquidity,\\n            _minAmount,\\n            msg.sender\\n        );\\n        // then we unstake from master wombat to trigger reward distribution from basereward\\n        _unstake(_liquidity, msg.sender);\\n\\n        if (_claim) _claimRewards(msg.sender);\\n        emit NewWithdraw(msg.sender, _liquidity);\\n    }\\n\\n    function _claimRewards(address _for) internal {\\n        address[] memory stakingTokens = new address[](1);\\n        stakingTokens[0] = lpToken;\\n        address[][] memory rewardTokens = new address[][](1);\\n        IMasterMagpie(masterMagpieV2).multiclaimFor(\\n            stakingTokens,\\n            rewardTokens,\\n            _for\\n        );\\n    }\\n\\n    function _deposit(\\n        uint256 _amount,\\n        uint256 _minimumLiquidity,\\n        address _for,\\n        address _from\\n    ) internal {\\n        uint256 lpReceived = IWombatStaking(wombatStakingV2).deposit(\\n            lpToken,\\n            _amount,\\n            _minimumLiquidity,\\n            _for,\\n            _from\\n        );\\n        _stake(lpReceived, _for);\\n\\n        emit NewDeposit(_for, _amount);\\n    }\\n\\n    function _wrapNative() internal {\\n        IWNative(depositToken).deposit{value: msg.value}();\\n    }\\n\\n    /// @notice stake the receipt token in the masterchief of GMP on behalf of the caller\\n    function _stake(uint256 _amount, address _sender) internal {\\n        IMasterMagpie(masterMagpieV2).depositFor(lpToken, _amount, _sender);\\n    }\\n\\n    /// @notice unstake from the masterchief of GMP on behalf of the caller\\n    function _unstake(uint256 _amount, address _sender) internal {\\n        IMasterMagpie(masterMagpieV2).withdrawFor(lpToken, _amount, _sender);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/MagpieFactoryLibV2.sol\": {\r\n        \"MagpieFactoryLibV2\": \"0xadacb526ebfb55b496b38dfeeb189a104340e6b9\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidStakingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MGPsetAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeContractOrZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyActivePool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCompounder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLocker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPoolHelper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPoolManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolExsisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnlockAmountExceedsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawAmountExceedsStaked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IBaseRewardPool\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCompounder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldCompounder\",\"type\":\"address\"}],\"name\":\"CompounderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositNotAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"HarvestMGP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isRewardMGP\",\"type\":\"bool\"}],\"name\":\"LockFreePoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_mgp\",\"type\":\"address\"}],\"name\":\"MGPSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_mWomSV\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldMWomSV\",\"type\":\"address\"}],\"name\":\"MWomSVpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"PoolManagerStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IBaseRewardPool\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMgpPerSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMgpPerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_accMGPPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldAllocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newAllocPoint\",\"type\":\"uint256\"}],\"name\":\"UpdatePoolAlloc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newVlmgp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldVlmgp\",\"type\":\"address\"}],\"name\":\"VLMGPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MPGRewardPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PoolManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mgp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mgpPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"__MasterMagpie_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_helperNeedsHarvest\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_transferStakingToken\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allPendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingMGP\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingBonusRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"calLpSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compounder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mgp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compounder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vlmgp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mWomSV\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainRewardToken\",\"type\":\"address\"}],\"name\":\"createRewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"depositMWomSVFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"depositVlMGPFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeOfPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"legacyRewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mWomSV\",\"outputs\":[{\"internalType\":\"contract ILocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mgp\",\"outputs\":[{\"internalType\":\"contract MGP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mgpPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingTokens\",\"type\":\"address[]\"}],\"name\":\"multiclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_rewardTokens\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"multiclaimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_rewardTokens\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"multiclaimOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_rewardTokens\",\"type\":\"address[][]\"}],\"name\":\"multiclaimSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingMGP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bonusTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pendingBonusToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"rewarderBonusTokenInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_helperNeedsHarvest\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_transferStakingToken\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legacyRewarder\",\"type\":\"address\"}],\"name\":\"setLegacyRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowedManager\",\"type\":\"bool\"}],\"name\":\"setPoolManagerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMGPPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"helperNeedsHarvest\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferStakingToken\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unClaimedMgp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mgpPerSec\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"updatePoolsAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"updateRewarderManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vlmgp\",\"outputs\":[{\"internalType\":\"contract ILocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"withdrawMWomSVFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"withdrawVlMGPFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterMagpieV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}