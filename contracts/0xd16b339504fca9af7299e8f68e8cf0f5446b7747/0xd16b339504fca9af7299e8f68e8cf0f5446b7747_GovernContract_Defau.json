{"SourceCode": "{\"EMPgov_default.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nimport \\\"./EMPgov_interface.sol\\\";\\nimport \\\"./IERC20.sol\\\";  // Import the ERC20 interface.\\n\\ncontract GovernContract_Default is GovernContract { \\n    address dictatorAddr;\\n    address allowedContractAddr;\\n\\n    event Log(string message);\\n    event LogAddress(string message, address _addr);\\n\\n    constructor(address _dictatorAddr) {\\n        emit Log(\\\"DEFAULT How constructor!\\\");\\n        dictatorAddr = _dictatorAddr;\\n        allowedContractAddr = address(this);    // guards from changes\\n    }\\n\\n    // This modifier checks for whether the sender of the transaction/interaction is the dictator\\n    modifier onlyAuthorized() {\\n        emit Log(\\\"Modifier of OnlyAuthorized is being checked\\\");\\n        require(msg.sender == dictatorAddr, \\\"Only the dictator can perofrm this action!\\\");\\n        emit Log(\\\"Passed?\\\");\\n        _;\\n    }\\n\\n\\n    // This modifier checks for whether the dictator has allowed for this change to take place\\n    // It checks whether the address of the decision-making contract is what the dictator has authorized\\n    modifier contractAuthorized(address newGovernContractAddr) {\\n        emit Log(\\\"Modifier of ContractAuthorized is being checked\\\");\\n        emit LogAddress(\\\"Dictator address:\\\",dictatorAddr);\\n        emit LogAddress(\\\"Allowed governance address:\\\",allowedContractAddr);\\n        emit LogAddress(\\\"Attempted governance address:\\\",newGovernContractAddr);\\n        emit LogAddress(\\\"THIS decision address:\\\",address(this));\\n        require(newGovernContractAddr == allowedContractAddr,\\n                 \\\"Only a specific contract can be used as replacement!\\\");\\n        emit Log(\\\"Passed?\\\");\\n        _;\\n    }\\n\\n    // authorizes the change in the decision-making process\\n    // The function will return \\\"true\\\" if the condition of the dictator having authorized the specific\\n    // decision-making process contract to replace the existing one in the caller is met\\n    function changeDecisionProcess(address newDecisonContractAddr, address motionerAddr) external\\n     contractAuthorized(newDecisonContractAddr) returns (bool) {\\n        emit Log(\\\"Change will be allowed.?\\\");\\n        emit LogAddress(\\\"Motion made by address:\\\", motionerAddr);\\n        // we do not reset the address of candidate contract...\\n        // ...as the only change possible is to return to this contract!!\\n        return true;\\n    }\\n\\n    // a function that stores the internal address of the decision-making contract to which we will transition\\n    // The function can only be executed by the dictator\\n    // (This function is needed because if there were a simple method of giving up power, anyone can subsequently\\n    // specify an arbitrary, non-approved by the dictator, decision-making contract. Therefore, the dictator needs\\n    // to approve a specific contract to which they surrender their power.\\n    function initiateChange(address newDecisonContractAddr) external\\n     onlyAuthorized() {\\n        emit Log(\\\"The dictator is initiating change to a new contract!\\\");\\n        allowedContractAddr = newDecisonContractAddr;\\n    }\\n\\n    // a function that is asked to accept a law as having been proposed\\n    function notifyOfProposedLaw(address associatedLawContract, address motionerAddr) external returns (bool) {\\n        emit LogAddress(\\\"The dictatorship was notified of a proposed law\\\", associatedLawContract);\\n        emit LogAddress(\\\"Motion made by address:\\\", motionerAddr);\\n        // Always \\\"accept\\\" any proposed laws, even though dicators seldom regard opinions...\\n        return true;\\n    }\\n\\n    // a function that is asked to specify if a law is to be approved\\n    // (The incoming law contract address can be used to check for the _specific_ law to be approved.)\\n    function notifyOfApprovingLaw(address associatedLawContract, address motionerAddr) external returns (bool) {\\n        emit LogAddress(\\\"The dictatorship was notified to approve a law\\\", associatedLawContract);\\n        emit LogAddress(\\\"Motion made by address:\\\", motionerAddr);\\n        // Only accept if the approver is the dictator, regardless of what contract this is\\n        if(motionerAddr == dictatorAddr) {\\n            emit LogAddress(\\\"Motioner is the dictator. Sender:\\\", motionerAddr);\\n            return true;\\n        } else {\\n            emit LogAddress(\\\"Motioner is NOT the dictator. Sender:\\\", motionerAddr);\\n        }\\n        return false;\\n    }\\n\\n    // a function that is asked to accept the removal of an existing law\\n    function notifyOfProposedLawRemoval(address associatedLawContract, address motionerAddr) external returns (bool) {\\n        emit LogAddress(\\\"The dictatorship was notified of a proposal to remove a law\\\", associatedLawContract);\\n        emit LogAddress(\\\"Motion made by address:\\\", motionerAddr);\\n        // Always \\\"accept\\\" any proposed law removals, even though dicators seldom regard opinions...\\n        return true;\\n    }\\n\\n    // a function that is asked to specify if removal of a specific law is to be approved\\n    // (The incoming law contract address can be used to check for the _specific_ law to be removed.)\\n    function notifyOfApprovingLawRemoval(address associatedLawContract, address motionerAddr) external returns (bool) {\\n        emit LogAddress(\\\"The dictatorship was notified to remove a law\\\", associatedLawContract);\\n        emit LogAddress(\\\"Motion made by address:\\\", motionerAddr);\\n        // Only accept if the approver is the dictator, regardless of what contract this is\\n        if(motionerAddr == dictatorAddr) {\\n            emit LogAddress(\\\"Motioner is the dictator. Sender:\\\", motionerAddr);\\n            return true;\\n        } else {\\n            emit LogAddress(\\\"Motioner is NOT the dictator. Sender:\\\", motionerAddr);\\n        }\\n        return false;\\n    }\\n\\n//--- these functions are for DEBUGGING\\n    // a function to interact with the contract to make sure it is there...\\n    function simplePing() external {\\n        emit Log(\\\"Pong from HowContract_Default!\\\");\\n    }\\n\\n    // a function that always returns \\\"true\\\" to be used for \\\"require()\\\" calls debugging\\n    function returnTrue() external returns (bool) {\\n        emit Log(\\\"Returning TRUE from HowContract_Default!\\\");\\n        return true;\\n        //return false;    // uncomment this to demonstrate \\\"require()\\\" failing!\\n    }\\n\\n}\\n\"},\"EMPgov_interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nimport \\\"./IERC20.sol\\\";  // Import the ERC20 interface.\\n\\ninterface GovernContract { \\n    // a function that can contain \\\"emit LOG(\\\"\\\");\\\" to help with EVM testing\\n    function simplePing() external;\\n\\n    // a function to respond back with \\\"true\\\" or \\\"false\\\" to change the decision process (to change this contract)\\n    function changeDecisionProcess(address newDecisonContractAddr, address motionerAddr) external returns (bool);\\n\\n    // a function to notify this governance contract that a law has been proposed\\n    // (It is meant to return \\\"true\\\" if everything went well; things can go wrong, like proposing a law twice.)\\n    function notifyOfProposedLaw(address associatedLawContract, address motionerAddr) external returns (bool);\\n\\n    // a function to notify this governance contract to dictate if a proposed law has been approved\\n    // (It is meant to return \\\"true\\\" if this _specific_ law is approved and \\\"false\\\" if not. The key factor\\n    // here is the specificity of the contract to be approved; the governance contract can keep track of what\\n    // this means, and also who is performing this interaction/transaction.)\\n    function notifyOfApprovingLaw(address associatedLawContract, address motionerAddr) external returns (bool);\\n\\n    // a function to notify this governance contract of a proposal to remove an existing law\\n    // (It is meant to return \\\"true\\\" if everything went well; things can go wrong, like a law not existing\\n    function notifyOfProposedLawRemoval(address associatedLawContract, address motionerAddr) external returns (bool);\\n\\n    // a function to notify this governance contract to dictate if the removal of an existing law is approved\\n    // (It is meant to return \\\"true\\\" if this _specific_ law is approved for removal and \\\"false\\\" if not. The key factor\\n    // here is the specificity of the contract to be removed; the governance contract can keep track of what\\n    // this means, and also who is performing this interaction/transaction.)\\n    function notifyOfApprovingLawRemoval(address associatedLawContract, address motionerAddr) external returns (bool);\\n\\n    // a function that is meant to return \\\"true\\\" used for debugging\\n    // This function is useful for testing when using a \\\"require()\\\" inside another smart contract.\\n    // For example, suppose contract \\\"ProcessContract\\\" uses this \\\"HowContract\\\" to determine the\\n    // conditions of the execution of one of its methods, say, \\\"makeInternalChanges()\\\". The method\\n    // can be decorated with a \\\"modifier\\\" that checks for execution conditions, like this:\\n    // function makeInternalChanges() {\\n    //    require(how.isChangePossible(),\\\"Cannot make changes!\\\");\\n    //    // code that makes changes goes here\\n    // }\\n    // The function\\u0027s implementation will always return true, and allow execution. But we can hardwire\\n    // a \\\"false\\\" to be returned for testing failure of the condition.\\n    function returnTrue() external returns (bool) ;\\n\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dictatorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDecisonContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"motionerAddr\",\"type\":\"address\"}],\"name\":\"changeDecisionProcess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDecisonContractAddr\",\"type\":\"address\"}],\"name\":\"initiateChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"associatedLawContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"motionerAddr\",\"type\":\"address\"}],\"name\":\"notifyOfApprovingLaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"associatedLawContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"motionerAddr\",\"type\":\"address\"}],\"name\":\"notifyOfApprovingLawRemoval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"associatedLawContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"motionerAddr\",\"type\":\"address\"}],\"name\":\"notifyOfProposedLaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"associatedLawContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"motionerAddr\",\"type\":\"address\"}],\"name\":\"notifyOfProposedLawRemoval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnTrue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simplePing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GovernContract_Default", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f7157b3296839c578d6b7be97cc8ce039b5be17e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://16fc547936ff3f1e59d92c56bd096663f61e4fcc574aa20b8be8c000997013cd"}