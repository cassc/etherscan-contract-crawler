{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/common/oneInch/OneInchDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary OneInchDecoder {\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n    }\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset; // targetToken\\n        address takerAsset; // foundryToken\\n        address maker;\\n        address receiver;   \\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;  // destinationAmountIn\\n        uint256 offsets;\\n        bytes interactions; // concat(makerAssetData, takerAssetData, getMakingAmount, getTakingAmount, predicate, permit, preIntercation, postInteraction)\\n    }\\n    struct OrderRFQ {\\n        uint256 info;  // lowest 64 bits is the order id, next 64 bits is the expiration timestamp\\n        address makerAsset; // targetToken\\n        address takerAsset; // foundryToken\\n        address maker;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n    }\\n\\n    // Define the function signatures\\n    bytes4 public constant selectorUnoswap =\\n        bytes4(\\n            keccak256(\\\"unoswapTo(address,address,uint256,uint256,uint256[])\\\")\\n        );\\n    bytes4 public constant selectorUniswapV3Swap =\\n        bytes4(keccak256(\\\"uniswapV3SwapTo(address,uint256,uint256,uint256[])\\\"));\\n    bytes4 public constant selectorSwap =\\n        bytes4(\\n            keccak256(\\n                \\\"swap(address,(address,address,address,address,uint256,uint256,uint256),bytes,bytes)\\\"\\n            )\\n        );\\n    bytes4 public constant selectorFillOrderTo =\\n        bytes4(\\n            keccak256(\\n                \\\"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address)\\\"\\n            )\\n        );\\n    bytes4 public constant selectorFillOrderRFQTo =\\n        bytes4(\\n            keccak256(\\n                \\\"fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,address)\\\"\\n            )\\n        );\\n        \\n    function decodeUnoswap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            address srcToken,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory pools\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (recipient, srcToken, amount, minReturn, pools) = abi.decode(\\n            params,\\n            (address, address, uint256, uint256, uint256[])\\n        );\\n    }\\n\\n    function decodeUniswapV3Swap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory pools\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (recipient, amount, minReturn, pools) = abi.decode(\\n            params,\\n            (address, uint256, uint256, uint256[])\\n        );\\n    }\\n\\n   function decodeSwap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address executor,\\n            SwapDescription memory desc,\\n            bytes memory permit,\\n            bytes memory swapData\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (executor, desc, permit, swapData) = abi.decode(\\n            params,\\n            (address, SwapDescription, bytes, bytes)\\n        );\\n    }\\n\\n    function decodeSwap2(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            uint256 amount,\\n            uint256 minReturn\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Decode the parameters, skipping the first 4 bytes\\n        (, SwapDescription memory desc, , ) = decodeSwap(data);\\n\\n        // Return only the values of the SwapDescription\\n        return (desc.dstReceiver, desc.amount, desc.minReturnAmount);\\n    }\\n\\n    function decodeFillOrderTo(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            Order memory order_,\\n            bytes memory signature,\\n            bytes memory interaction,\\n            uint256 makingAmount,\\n            uint256 takingAmount,  // destinationAmountIn\\n            uint256 skipPermitAndThresholdAmount,\\n            address target  // receiverAddress\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (order_, signature, interaction, makingAmount, takingAmount, skipPermitAndThresholdAmount, target) = abi.decode(\\n            params,\\n            (Order, bytes, bytes, uint256, uint256,uint256, address)\\n        );\\n    }\\n\\n    function decodeFillOrderRFQTo(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            OrderRFQ memory order,\\n            bytes memory signature,\\n            uint256 flagsAndAmount,\\n            address target // receiverAddress\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (order, signature, flagsAndAmount, target) = abi.decode(\\n            params,\\n            (OrderRFQ, bytes, uint256, address)\\n        );\\n    }\\n\\n    // Helper function to slice bytes array\\n    function slice(\\n        bytes memory data,\\n        uint256 start,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        bytes memory part = new bytes(length);\\n        for (uint256 i = 0; i < length; i++) {\\n            part[i] = data[i + start];\\n        }\\n        return part;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeFillOrderRFQTo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OneInchDecoder.OrderRFQ\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"flagsAndAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeFillOrderTo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OneInchDecoder.Order\",\"name\":\"order_\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skipPermitAndThresholdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct OneInchDecoder.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeSwap2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeUniswapV3Swap\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeUnoswap\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectorFillOrderRFQTo\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectorFillOrderTo\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectorSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectorUniswapV3Swap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectorUnoswap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OneInchDecoder", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}