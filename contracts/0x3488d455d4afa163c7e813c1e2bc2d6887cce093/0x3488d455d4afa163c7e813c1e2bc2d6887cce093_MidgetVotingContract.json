{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MidgetVotingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract MidgetVotingContract is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /* EVENTS  */\\r\\n    event VoteCasted(address voter, uint256 pollID, bool vote);\\r\\n    event PollCreated(address creator, uint256 pollID, string description);\\r\\n    event PollEdited(uint256 pollID, bool isValid);\\r\\n    event UserProfileImgEdited(address user);\\r\\n\\r\\n    /* ContractInfo */\\r\\n    struct ContractInfo {\\r\\n        uint256 pollCount;\\r\\n        uint256 minTokenBalanceToVote;\\r\\n        uint256 minTokenBalanceToCreatePoll;\\r\\n        uint256 maxCreatingCountPerWeek;\\r\\n        uint256 currentBlockTime;\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    /* UserInfo */\\r\\n    struct UserInfo {\\r\\n        uint256 userVoteCount;\\r\\n        uint256 userPollCount;\\r\\n        uint256 userWeekPollCount;\\r\\n        string userProfileImg;\\r\\n    }\\r\\n\\r\\n    /* POLL */\\r\\n    struct Poll {\\r\\n        uint256 pollId;\\r\\n        uint256 yeaVotes;\\r\\n        uint256 nayVotes;\\r\\n        string description;\\r\\n        address creator;\\r\\n        address[] voters;\\r\\n        bool isValid;\\r\\n    }\\r\\n\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 public pollCount;\\r\\n    uint256 public startedAt;\\r\\n    uint256 public minTokenBalanceToVote = 1 * 10 ** _decimals;\\r\\n    uint256 public minTokenBalanceToCreatePoll = 10 * 10 ** _decimals;\\r\\n    uint256 public maxCreatingCountPerWeek = 1;\\r\\n\\r\\n    uint256 public constant WEEK_IN_SECOND = 7 * 86400;\\r\\n\\r\\n    mapping(address => uint256) public _userVoteCount;\\r\\n    mapping(address => uint256) public _userPollCount;\\r\\n    mapping(address => string) public _userProfileImg;\\r\\n    mapping(address => mapping(uint256 => bool)) public _userHasVoted;\\r\\n    mapping(address => uint256) public _userWeekPollCount;\\r\\n\\r\\n    Poll[] public polls;\\r\\n    IERC20 public token;\\r\\n\\r\\n    constructor(address _token) {\\r\\n        require(_token != address(0));\\r\\n        token = IERC20(_token);\\r\\n        startedAt = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Modifier that checks for a valid poll ID.\\r\\n     */\\r\\n    modifier validPoll(uint256 _pollId) {\\r\\n        require(_pollId >= 0 && _pollId < pollCount, \\\"Not a valid poll Id.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* CALL METHODS */\\r\\n\\r\\n    /*\\r\\n     * Creates a new poll.\\r\\n     */\\r\\n    function createPoll(\\r\\n        string memory _description\\r\\n    ) external returns (uint256 pollId) {\\r\\n        if (msg.sender != owner()) {\\r\\n            require(\\r\\n                token.balanceOf(msg.sender) >= minTokenBalanceToCreatePoll,\\r\\n                \\\"Insufficient token balance.\\\"\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                _userWeekPollCount[msg.sender] < maxCreatingCountPerWeek,\\r\\n                \\\"Exceeded max creating count per week\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        pollId = pollCount++;\\r\\n\\r\\n        polls.push();\\r\\n        Poll storage newPoll = polls[pollId];\\r\\n\\r\\n        newPoll.pollId = pollId;\\r\\n        newPoll.creator = msg.sender;\\r\\n        newPoll.description = _description;\\r\\n        newPoll.isValid = true;\\r\\n\\r\\n        _userPollCount[msg.sender] += 1;\\r\\n        _userWeekPollCount[msg.sender] += 1;\\r\\n\\r\\n        emit PollCreated(msg.sender, pollCount, _description);\\r\\n\\r\\n        return pollId;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Casts a vote for a given poll.\\r\\n     */\\r\\n    function castVote(uint256 _pollId, bool _vote) external validPoll(_pollId) {\\r\\n        if (msg.sender != owner()) {\\r\\n            require(\\r\\n                token.balanceOf(msg.sender) >= minTokenBalanceToVote,\\r\\n                \\\"Insufficient token balance.\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            !_getIfUserHasVoted(_pollId, msg.sender),\\r\\n            \\\"User has already voted.\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            token.balanceOf(msg.sender) / (10 ** _decimals) > _userVoteCount[msg.sender],\\r\\n            \\\"Voted count has been exceeded.\\\"\\r\\n        );\\r\\n\\r\\n        Poll storage curPoll = polls[_pollId];\\r\\n\\r\\n        if (_vote) {\\r\\n            curPoll.yeaVotes += 1;\\r\\n        } else {\\r\\n            curPoll.nayVotes += 1;\\r\\n        }\\r\\n\\r\\n        curPoll.voters.push(msg.sender);\\r\\n\\r\\n        _userVoteCount[msg.sender] += 1;\\r\\n        _userHasVoted[msg.sender][_pollId] = true;\\r\\n\\r\\n        emit VoteCasted(msg.sender, _pollId, _vote);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * toggle valid status of a specific poll.\\r\\n     */\\r\\n    function toggleValidStatus(\\r\\n        uint256 _pollId,\\r\\n        bool _isValid\\r\\n    ) external onlyOwner {\\r\\n        Poll storage curPoll = polls[_pollId];\\r\\n        curPoll.isValid = _isValid;\\r\\n\\r\\n        emit PollEdited(_pollId, _isValid);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * update user profile image.\\r\\n     */\\r\\n    function updateUserProfileImg(string memory _imgUrl) external {\\r\\n        _userProfileImg[msg.sender] = _imgUrl;\\r\\n\\r\\n        emit UserProfileImgEdited(msg.sender);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * update minTokenBalanceToVote.\\r\\n     */\\r\\n    function updateMinTokenBalanceToVote(\\r\\n        uint256 _minTokenBalanceToVote\\r\\n    ) external onlyOwner {\\r\\n        minTokenBalanceToVote = _minTokenBalanceToVote;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * update maxCreatingCountPerWeek.\\r\\n     */\\r\\n    function updateMaxCreatingCountPerWeek(\\r\\n        uint256 _maxCreatingCountPerWeek\\r\\n    ) external onlyOwner {\\r\\n        maxCreatingCountPerWeek = _maxCreatingCountPerWeek;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * update minTokenBalanceToCreatePoll.\\r\\n     */\\r\\n    function updateMinTokenBalanceToCreatePoll(\\r\\n        uint256 _minTokenBalanceToCreatePoll\\r\\n    ) external onlyOwner {\\r\\n        minTokenBalanceToCreatePoll = _minTokenBalanceToCreatePoll;\\r\\n    }\\r\\n\\r\\n    /* VIEW METHODS */\\r\\n\\r\\n    /*\\r\\n     * Get contract info\\r\\n     */\\r\\n    function getContractInfo() public view returns (ContractInfo memory) {\\r\\n        return ContractInfo({\\r\\n            pollCount: pollCount,\\r\\n            minTokenBalanceToVote: minTokenBalanceToVote,\\r\\n            minTokenBalanceToCreatePoll: minTokenBalanceToCreatePoll,\\r\\n            maxCreatingCountPerWeek: maxCreatingCountPerWeek,\\r\\n            currentBlockTime: block.timestamp,\\r\\n            contractOwner: owner()\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Get user info\\r\\n     */\\r\\n    function getUserInfo(address _user) public view returns (UserInfo memory) {\\r\\n        return UserInfo({\\r\\n            userVoteCount: _userVoteCount[_user],\\r\\n            userPollCount: _userPollCount[_user],\\r\\n            userWeekPollCount: _userWeekPollCount[_user],\\r\\n            userProfileImg: _userProfileImg[_user]\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Get valid polls\\r\\n     */\\r\\n    function getPolls(\\r\\n        uint256 _fromIndex,\\r\\n        uint256 _count,\\r\\n        bool _isAll\\r\\n    ) public view returns (Poll[] memory) {\\r\\n        if (_isAll) {\\r\\n            return polls;\\r\\n        } else {\\r\\n            Poll[] memory validPolls = new Poll[](_count);\\r\\n\\r\\n            for(uint i = 0; i < _count; i++){\\r\\n                if(polls[_fromIndex + i].isValid && (_fromIndex + i) < pollCount) {\\r\\n                    validPolls[i] = polls[_fromIndex + i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return validPolls;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Get week index\\r\\n     */\\r\\n    function _getWeekIndex() internal view returns (uint256) {\\r\\n        return (block.timestamp - startedAt) / WEEK_IN_SECOND;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Checks if a user has voted for a specific poll.\\r\\n     */\\r\\n    function _getIfUserHasVoted(\\r\\n        uint256 _pollId,\\r\\n        address _user\\r\\n    ) internal view returns (bool) {\\r\\n        return _userHasVoted[_user][_pollId];\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pollID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"PollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pollID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"PollEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserProfileImgEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pollID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"VoteCasted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WEEK_IN_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userHasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userPollCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userProfileImg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userWeekPollCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createPoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pollCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenBalanceToVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenBalanceToCreatePoll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCreatingCountPerWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"internalType\":\"struct MidgetVotingContract.ContractInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAll\",\"type\":\"bool\"}],\"name\":\"getPolls\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yeaVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nayVotes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct MidgetVotingContract.Poll[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPollCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userWeekPollCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userProfileImg\",\"type\":\"string\"}],\"internalType\":\"struct MidgetVotingContract.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCreatingCountPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenBalanceToCreatePoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenBalanceToVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pollCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"polls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yeaVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nayVotes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"toggleValidStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCreatingCountPerWeek\",\"type\":\"uint256\"}],\"name\":\"updateMaxCreatingCountPerWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenBalanceToCreatePoll\",\"type\":\"uint256\"}],\"name\":\"updateMinTokenBalanceToCreatePoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenBalanceToVote\",\"type\":\"uint256\"}],\"name\":\"updateMinTokenBalanceToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imgUrl\",\"type\":\"string\"}],\"name\":\"updateUserProfileImg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MidgetVotingContract", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000009168d55be879a7f40ace7fe52b8fd703cdaef03", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}