{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/UTB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {Roles} from \\\"decent-bridge/src/utils/Roles.sol\\\";\\nimport {SwapParams} from \\\"./swappers/SwapParams.sol\\\";\\nimport {IUTB} from \\\"./interfaces/IUTB.sol\\\";\\nimport {IUTBExecutor} from \\\"./interfaces/IUTBExecutor.sol\\\";\\nimport {IERC20} from \\\"forge-std/interfaces/IERC20.sol\\\";\\nimport {IWETH} from \\\"decent-bridge/src/interfaces/IWETH.sol\\\";\\nimport {IUTBFeeManager} from \\\"./interfaces/IUTBFeeManager.sol\\\";\\nimport {IBridgeAdapter} from \\\"./interfaces/IBridgeAdapter.sol\\\";\\nimport {ISwapper} from \\\"./interfaces/ISwapper.sol\\\";\\nimport {SwapInstructions, FeeData, Fee, BridgeInstructions, SwapAndExecuteInstructions} from \\\"./CommonTypes.sol\\\";\\n\\n\\ncontract UTB is IUTB, Roles {\\n    constructor() Roles(msg.sender) {}\\n\\n    IUTBExecutor public executor;\\n    IUTBFeeManager public feeManager;\\n    IWETH public wrapped;\\n    mapping(uint8 => address) public swappers;\\n    mapping(uint8 => address) public bridgeAdapters;\\n    bool public isActive = true;\\n\\n    /**\\n     * @dev only support calling swapAndExecute and bridgeAndExecute if active\\n     */\\n    modifier isUtbActive() {\\n        if (!isActive) revert UTBPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers fees from the sender to the fee recipients.\\n     * @param feeData The bridge fee in native, as well as utb fee tokens and amounts.\\n     * @param packedInfo The fees and swap instructions which were used to generate the signature.\\n     * @param signature The ECDSA signature to verify the fee structure.\\n     */\\n    function _retrieveAndCollectFees(\\n        FeeData calldata feeData,\\n        bytes memory packedInfo,\\n        bytes calldata signature\\n    ) private returns (uint256 value) {\\n        if (address(feeManager) != address(0)) {\\n            feeManager.verifySignature(packedInfo, signature);\\n            value += feeData.bridgeFee;\\n            Fee[] memory fees = feeData.appFees;\\n            for (uint i = 0; i < fees.length; i++) {\\n                Fee memory fee = fees[i];\\n                if (fee.token != address(0)) {\\n                    IERC20(fee.token).transferFrom(\\n                        msg.sender,\\n                        fee.recipient,\\n                        fee.amount\\n                    );\\n                } else {\\n                    (bool success, ) = address(fee.recipient).call{value: fee.amount}(\\\"\\\");\\n                    value += fee.amount;\\n                    if (!success) revert ProtocolFeeCannotBeFetched();\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Refunds leftover native to the specified refund address.\\n     * @param to The address receiving the refund.\\n     * @param leftover The amount of leftover native.\\n     */\\n    function _refundLeftover(address to, uint256 leftover) internal {\\n        if (leftover > 0) {\\n            (bool success, ) = to.call{value: leftover}(\\\"\\\");\\n            require(success, \\\"failed to refund leftover\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the executor.\\n     * @param _executor The address of the executor.\\n     */\\n    function setExecutor(address _executor) public onlyAdmin {\\n        executor = IUTBExecutor(_executor);\\n    }\\n\\n    /**\\n     * @dev Sets the wrapped native token.\\n     * @param _wrapped The address of the wrapped token.\\n     */\\n    function setWrapped(address _wrapped) public onlyAdmin {\\n        wrapped = IWETH(_wrapped);\\n    }\\n\\n    /**\\n     * @dev Sets the fee manager.\\n     * @param _feeManager The address of the fee manager.\\n     */\\n    function setFeeManager(address _feeManager) public onlyAdmin {\\n        feeManager = IUTBFeeManager(_feeManager);\\n    }\\n\\n    /**\\n     * @dev toggles active state\\n     */\\n    function toggleActive() public onlyAdmin {\\n        isActive = !isActive;\\n    }\\n\\n    /**\\n     * @dev Performs a swap with the requested swapper and swap calldata.\\n     * @param swapInstructions The swapper ID and calldata to execute a swap.\\n     * @param retrieveTokenIn Flag indicating whether to transfer ERC20 for the swap.\\n     */\\n    function performSwap(\\n        SwapInstructions memory swapInstructions,\\n        bool retrieveTokenIn\\n    ) private returns (address tokenOut, uint256 amountOut, uint256 value) {\\n        ISwapper swapper = ISwapper(swappers[swapInstructions.swapperId]);\\n\\n        SwapParams memory swapParams = abi.decode(\\n            swapInstructions.swapPayload,\\n            (SwapParams)\\n        );\\n\\n        if (swapParams.tokenIn == address(0)) {\\n            if (msg.value < swapParams.amountIn) revert NotEnoughNative();\\n            wrapped.deposit{value: swapParams.amountIn}();\\n            value += swapParams.amountIn;\\n            swapParams.tokenIn = address(wrapped);\\n            swapInstructions.swapPayload = swapper.updateSwapParams(\\n                swapParams,\\n                swapInstructions.swapPayload\\n            );\\n        } else if (retrieveTokenIn) {\\n            IERC20(swapParams.tokenIn).transferFrom(\\n                msg.sender,\\n                address(this),\\n                swapParams.amountIn\\n            );\\n        }\\n\\n        IERC20(swapParams.tokenIn).approve(\\n            address(swapper),\\n            swapParams.amountIn\\n        );\\n\\n        (tokenOut, amountOut) = swapper.swap(swapInstructions.swapPayload);\\n\\n        if (tokenOut == address(0)) {\\n            wrapped.withdraw(amountOut);\\n        }\\n    }\\n\\n    /// @inheritdoc IUTB\\n    function swapAndExecute(\\n        SwapAndExecuteInstructions calldata instructions,\\n        FeeData calldata feeData,\\n        bytes calldata signature\\n    )\\n        public\\n        payable\\n        isUtbActive\\n    {\\n        uint256 value = _retrieveAndCollectFees(feeData, abi.encode(instructions, feeData), signature);\\n        value += _swapAndExecute(\\n            instructions.swapInstructions,\\n            instructions.target,\\n            instructions.paymentOperator,\\n            instructions.payload,\\n            instructions.refund\\n        );\\n        _refundLeftover(instructions.refund, msg.value - value);\\n        emit Swapped();\\n    }\\n\\n    /**\\n     * @dev Swaps currency from the incoming to the outgoing token and executes a transaction with payment.\\n     * @param swapInstructions The swapper ID and calldata to execute a swap.\\n     * @param target The address of the target contract for the payment transaction.\\n     * @param paymentOperator The operator address for payment transfers requiring ERC20 approvals.\\n     * @param payload The calldata to execute the payment transaction.\\n     * @param refund The account receiving any refunds, typically the EOA which initiated the transaction.\\n     */\\n    function _swapAndExecute(\\n        SwapInstructions memory swapInstructions,\\n        address target,\\n        address paymentOperator,\\n        bytes memory payload,\\n        address refund\\n    ) private returns (uint256 value) {\\n        address tokenOut;\\n        uint256 amountOut;\\n        (tokenOut, amountOut, value) = performSwap(swapInstructions, true);\\n        if (tokenOut == address(0)) {\\n            executor.execute{value: amountOut}(\\n                target,\\n                paymentOperator,\\n                payload,\\n                tokenOut,\\n                amountOut,\\n                refund\\n            );\\n        } else {\\n            IERC20(tokenOut).approve(address(executor), amountOut);\\n            executor.execute(\\n                target,\\n                paymentOperator,\\n                payload,\\n                tokenOut,\\n                amountOut,\\n                refund\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs the pre bridge swap and modifies the post bridge swap to utilize the bridged amount.\\n     * @param instructions The bridge data, token swap data, and payment transaction payload.\\n     */\\n    function swapAndModifyPostBridge(\\n        BridgeInstructions memory instructions\\n    )\\n        private\\n        returns (\\n            uint256 amount2Bridge,\\n            BridgeInstructions memory updatedInstructions,\\n            uint256 value\\n        )\\n    {\\n        address tokenOut;\\n        uint256 amountOut;\\n        (tokenOut, amountOut, value) = performSwap(\\n            instructions.preBridge, true\\n        );\\n\\n        SwapParams memory newPostSwapParams = abi.decode(\\n            instructions.postBridge.swapPayload,\\n            (SwapParams)\\n        );\\n\\n        newPostSwapParams.amountIn = IBridgeAdapter(\\n            bridgeAdapters[instructions.bridgeId]\\n        ).getBridgedAmount(amountOut, tokenOut, newPostSwapParams.tokenIn, instructions.additionalArgs);\\n\\n        updatedInstructions = instructions;\\n\\n        updatedInstructions.postBridge.swapPayload = ISwapper(swappers[\\n            instructions.postBridge.swapperId\\n        ]).updateSwapParams(\\n            newPostSwapParams,\\n            instructions.postBridge.swapPayload\\n        );\\n\\n        amount2Bridge = amountOut;\\n    }\\n\\n    /**\\n     * @dev Checks if the bridge token is native, and approves the bridge adapter to transfer ERC20 if required.\\n     * @param instructions The bridge data, token swap data, and payment transaction payload.\\n     * @param amt2Bridge The amount of the bridge token being transferred to the bridge adapter.\\n     */\\n    function approveAndCheckIfNative(\\n        BridgeInstructions memory instructions,\\n        uint256 amt2Bridge\\n    ) private returns (bool) {\\n        IBridgeAdapter bridgeAdapter = IBridgeAdapter(bridgeAdapters[instructions.bridgeId]);\\n        address bridgeToken = bridgeAdapter.getBridgeToken(\\n            instructions.additionalArgs\\n        );\\n        if (bridgeToken != address(0)) {\\n            IERC20(bridgeToken).approve(address(bridgeAdapter), amt2Bridge);\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @inheritdoc IUTB\\n    function bridgeAndExecute(\\n        BridgeInstructions calldata instructions,\\n        FeeData calldata feeData,\\n        bytes calldata signature\\n    )\\n        public\\n        payable\\n        isUtbActive\\n        returns (bytes memory)\\n    {\\n        uint256 feeValue = _retrieveAndCollectFees(feeData, abi.encode(instructions, feeData), signature);\\n\\n        (\\n            uint256 amt2Bridge,\\n            BridgeInstructions memory updatedInstructions,\\n            uint256 swapValue\\n        ) = swapAndModifyPostBridge(instructions);\\n\\n        _refundLeftover(instructions.refund, msg.value - feeValue - swapValue);\\n\\n        return callBridge(amt2Bridge, feeData.bridgeFee, updatedInstructions);\\n    }\\n\\n    /**\\n     * @dev Calls the bridge adapter to bridge funds, and approves the bridge adapter to transfer ERC20 if required.\\n     * @param amt2Bridge The amount of the bridge token being bridged via the bridge adapter.\\n     * @param bridgeFee The fee being transferred to the bridge adapter and finally to the bridge.\\n     * @param instructions The bridge data, token swap data, and payment transaction payload.\\n     */\\n    function callBridge(\\n        uint256 amt2Bridge,\\n        uint bridgeFee,\\n        BridgeInstructions memory instructions\\n    ) private returns (bytes memory) {\\n        bool native = approveAndCheckIfNative(instructions, amt2Bridge);\\n        emit BridgeCalled();\\n        return\\n            IBridgeAdapter(bridgeAdapters[instructions.bridgeId]).bridge{\\n                value: bridgeFee + (native ? amt2Bridge : 0)\\n            }(\\n                amt2Bridge,\\n                instructions.postBridge,\\n                instructions.dstChainId,\\n                instructions.target,\\n                instructions.paymentOperator,\\n                instructions.payload,\\n                instructions.additionalArgs,\\n                instructions.refund\\n            );\\n    }\\n\\n    /// @inheritdoc IUTB\\n    function receiveFromBridge(\\n        SwapInstructions memory postBridge,\\n        address target,\\n        address paymentOperator,\\n        bytes memory payload,\\n        address refund,\\n        uint8 bridgeId\\n    ) public payable {\\n        if (msg.sender != bridgeAdapters[bridgeId]) revert OnlyBridgeAdapter();\\n        emit RecievedFromBridge();\\n        _swapAndExecute(postBridge, target, paymentOperator, payload, refund);\\n    }\\n\\n    /// @inheritdoc IUTB\\n    function registerSwapper(address swapper) public onlyAdmin {\\n        ISwapper s = ISwapper(swapper);\\n        swappers[s.getId()] = swapper;\\n    }\\n\\n    /// @inheritdoc IUTB\\n    function registerBridge(address bridge) public onlyAdmin {\\n        IBridgeAdapter b = IBridgeAdapter(bridge);\\n        bridgeAdapters[b.getId()] = bridge;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/src/utils/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nabstract contract Roles is AccessControl {\\n    constructor(address admin) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Only admin\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/swappers/SwapParams.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary SwapDirection {\\n    uint8 constant EXACT_IN = 0;\\n    uint8 constant EXACT_OUT = 1;\\n}\\n\\nstruct SwapParams {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address tokenIn;\\n    address tokenOut;\\n    uint8 direction;\\n    // if direction is exactAmountIn\\n    // then amount out will be the minimum amount out\\n    // if direction is exactAmountOutA\\n    // then amount in is maximum amount in\\n    bytes path;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUTB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {SwapInstructions, FeeData, BridgeInstructions, SwapAndExecuteInstructions} from \\\"../CommonTypes.sol\\\";\\n\\ninterface IUTB {\\n\\n    event Swapped();\\n    event BridgeCalled();\\n    event RecievedFromBridge();\\n\\n    /// @notice Thrown when protocol fees cannot be collected\\n    error ProtocolFeeCannotBeFetched();\\n\\n    /// @notice Thrown when UTB is paused\\n    error UTBPaused();\\n\\n    /// @notice Thrown when not enough native is passed for swap\\n    error NotEnoughNative();\\n\\n    /// @notice Thrown when receive from bridge is not called from a bridge adapter\\n    error OnlyBridgeAdapter();\\n\\n    /**\\n     * @dev Swaps currency from the incoming to the outgoing token and executes a transaction with payment.\\n     * @param instructions The token swap data and payment transaction payload.\\n     * @param feeData The bridge fee in native, as well as utb fee tokens and amounts.\\n     * @param signature The ECDSA signature to verify the fee structure.\\n     */\\n    function swapAndExecute(\\n        SwapAndExecuteInstructions memory instructions,\\n        FeeData memory feeData,\\n        bytes memory signature\\n    ) external payable;\\n\\n    /**\\n     * @dev Bridges funds in native or ERC20 and a payment transaction payload to the destination chain\\n     * @param instructions The bridge data, token swap data, and payment transaction payload.\\n     * @param feeData The bridge fee in native, as well as utb fee tokens and amounts.\\n     * @param signature The ECDSA signature to verify the fee structure.\\n     */\\n    function bridgeAndExecute(\\n        BridgeInstructions memory instructions,\\n        FeeData memory feeData,\\n        bytes memory signature\\n    ) external payable returns (bytes memory);\\n\\n    /**\\n     * @dev Receives funds from the bridge adapter, executes a swap, and executes a payment transaction.\\n     * @param postBridge The swapper ID and calldata to execute a swap.\\n     * @param target The address of the target contract for the payment transaction.\\n     * @param paymentOperator The operator address for payment transfers requiring ERC20 approvals.\\n     * @param payload The calldata to execute the payment transaction.\\n     * @param refund The account receiving any refunds, typically the EOA which initiated the transaction.\\n     */\\n    function receiveFromBridge(\\n        SwapInstructions memory postBridge,\\n        address target,\\n        address paymentOperator,\\n        bytes memory payload,\\n        address refund,\\n        uint8 bridgeId\\n    ) external payable;\\n\\n    /**\\n     * @dev Registers and maps a bridge adapter to a bridge adapter ID.\\n     * @param bridge The address of the bridge adapter.\\n     */\\n    function registerBridge(address bridge) external;\\n\\n    /**\\n     * @dev Registers and maps a swapper to a swapper ID.\\n     * @param swapper The address of the swapper.\\n     */\\n    function registerSwapper(address swapper) external;\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setFeeManager(address _feeManager) external;\\n\\n    function setWrapped(address _wrapped) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUTBExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IUTBExecutor {\\n\\n    /**\\n     * @dev Executes a payment transaction with native OR ERC20.\\n     * @param target The address of the target contract for the payment transaction.\\n     * @param paymentOperator The operator address for payment transfers requiring ERC20 approvals.\\n     * @param payload The calldata to execute the payment transaction.\\n     * @param token The token being transferred, zero address for native.\\n     * @param amount The amount of native or ERC20 being sent with the payment transaction.\\n     * @param refund The account receiving any refunds, typically the EOA that initiated the transaction.\\n     */\\n    function execute(\\n        address target,\\n        address paymentOperator,\\n        bytes memory payload,\\n        address token,\\n        uint256 amount,\\n        address refund\\n    ) external payable;\\n\\n    /**\\n     * @dev Executes a payment transaction with native AND/OR ERC20.\\n     * @param target The address of the target contract for the payment transaction.\\n     * @param paymentOperator The operator address for payment transfers requiring ERC20 approvals.\\n     * @param payload The calldata to execute the payment transaction.\\n     * @param token The token being transferred, zero address for native.\\n     * @param amount The amount of native or ERC20 being sent with the payment transaction.\\n     * @param refund The account receiving any refunds, typically the EOA that initiated the transaction.\\n     * @param extraNative Forwards additional gas or native fees required to executing the payment transaction.\\n     */\\n    function execute(\\n        address target,\\n        address paymentOperator,\\n        bytes memory payload,\\n        address token,\\n        uint256 amount,\\n        address refund,\\n        uint256 extraNative\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\n/// @dev Interface of the ERC20 standard as defined in the EIP.\\n/// @dev This includes the optional name, symbol, and decimals metadata.\\ninterface IERC20 {\\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\\n    /// is the new allowance.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Returns the amount of tokens in existence.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Returns the amount of tokens owned by `account`.\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\\n    /// to spend on behalf of `owner`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\n    /// `amount` is then deducted from the caller's allowance.\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the name of the token.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the symbol of the token.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Returns the decimals places of the token.\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/src/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"forge-std/interfaces/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUTBFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IUTBFeeManager {\\n\\n    /// @notice Thrown if incorrect signature\\n    error WrongSig();\\n\\n    /// @notice Thrown if sig length != 65\\n    error WrongSigLength();\\n\\n    /**\\n     * @dev Verifies packed info containing fees in either native or ERC20.\\n     * @param packedInfo The fees and swap instructions used to generate the signature.\\n     * @param signature The ECDSA signature to verify the fee structure.\\n     */\\n    function verifySignature(\\n      bytes memory packedInfo,\\n      bytes memory signature\\n    ) external;\\n\\n    /**\\n     * @dev Sets the signer used for fee verification.\\n     * @param _signer The address of the signer.\\n     */\\n    function setSigner(address _signer) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IBridgeAdapter.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {SwapInstructions} from \\\"../CommonTypes.sol\\\";\\n\\ninterface IBridgeAdapter {\\n\\n    error NoDstBridge();\\n\\n    function getId() external returns (uint8);\\n\\n    function getBridgeToken(\\n        bytes calldata additionalArgs\\n    ) external returns (address);\\n\\n    function getBridgedAmount(\\n        uint256 amt2Bridge,\\n        address preBridgeToken,\\n        address postBridgeToken,\\n        bytes calldata additionalArgs\\n    ) external returns (uint256);\\n\\n    function bridge(\\n        uint256 amt2Bridge,\\n        SwapInstructions memory postBridge,\\n        uint256 dstChainId,\\n        address target,\\n        address paymentOperator,\\n        bytes memory payload,\\n        bytes calldata additionalArgs,\\n        address refund\\n    ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISwapper.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport {SwapParams} from \\\"../swappers/SwapParams.sol\\\";\\n\\ninterface ISwapper {\\n    error RouterNotSet();\\n\\n    function getId() external returns (uint8);\\n\\n    function swap(\\n        bytes memory swapPayload\\n    ) external returns (address tokenOut, uint256 amountOut);\\n\\n    function updateSwapParams(\\n        SwapParams memory newSwapParams,\\n        bytes memory payload\\n    ) external returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"src/CommonTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct SwapInstructions {\\n    uint8 swapperId;\\n    bytes swapPayload;\\n}\\n\\nstruct FeeData {\\n    bytes4 appId;\\n    bytes4 affiliateId;\\n    uint bridgeFee;\\n    Fee[] appFees;\\n}\\n\\nstruct Fee {\\n    address recipient;\\n    address token;\\n    uint amount;\\n}\\n\\nstruct SwapAndExecuteInstructions {\\n    SwapInstructions swapInstructions;\\n    address target;\\n    address paymentOperator;\\n    address refund;\\n    bytes payload;\\n}\\n\\nstruct BridgeInstructions {\\n    SwapInstructions preBridge;\\n    SwapInstructions postBridge;\\n    uint8 bridgeId;\\n    uint256 dstChainId;\\n    address target;\\n    address paymentOperator;\\n    address refund;\\n    bytes payload;\\n    bytes additionalArgs;\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/decent-bridge/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@uniswap/swap-contracts/=lib/swap-router-contracts/contracts/\",\r\n      \"decent-bridge/=lib/decent-bridge/\",\r\n      \"better-deployer/=lib/decent-bridge/lib/better-deployer/src/\",\r\n      \"forge-toolkit/=lib/forge-toolkit/src/\",\r\n      \"openzeppelin-contracts/=lib/decent-bridge/lib/openzeppelin-contracts/contracts/\",\r\n      \"solidity-examples/=lib/solidity-examples/contracts/\",\r\n      \"@openzeppelin/=lib/decent-bridge/lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin/contracts/=lib/decent-bridge/lib/openzeppelin-contracts/contracts/\",\r\n      \"LayerZero/=lib/forge-toolkit/lib/LayerZero/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/decent-bridge/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin/=lib/decent-bridge/lib/openzeppelin-contracts/contracts/\",\r\n      \"solidity-stringutils/=lib/decent-bridge/lib/solidity-stringutils/\",\r\n      \"swap-router-contracts/=lib/swap-router-contracts/contracts/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/decent-bridge/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/decent-bridge/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/decent-bridge/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/decent-bridge/lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts:openzeppelin/=lib/decent-bridge/lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyBridgeAdapter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeeCannotBeFetched\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UTBPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BridgeCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RecievedFromBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Swapped\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"bridgeAdapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"swapperId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"swapPayload\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapInstructions\",\"name\":\"preBridge\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"swapperId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"swapPayload\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapInstructions\",\"name\":\"postBridge\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"bridgeId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refund\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"additionalArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct BridgeInstructions\",\"name\":\"instructions\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"appId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"affiliateId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Fee[]\",\"name\":\"appFees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FeeData\",\"name\":\"feeData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"bridgeAndExecute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"contract IUTBExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract IUTBFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"swapperId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"swapPayload\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapInstructions\",\"name\":\"postBridge\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"refund\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"bridgeId\",\"type\":\"uint8\"}],\"name\":\"receiveFromBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"registerBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"registerSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"}],\"name\":\"setWrapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"swapperId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"swapPayload\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapInstructions\",\"name\":\"swapInstructions\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refund\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapAndExecuteInstructions\",\"name\":\"instructions\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"appId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"affiliateId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Fee[]\",\"name\":\"appFees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FeeData\",\"name\":\"feeData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"swapAndExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UTB", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}