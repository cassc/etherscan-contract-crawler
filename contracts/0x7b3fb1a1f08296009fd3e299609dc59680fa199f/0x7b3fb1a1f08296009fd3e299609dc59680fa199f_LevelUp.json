{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n// LevelUp\r\n//https://leveluptoken.xyz\r\n//https://twitter.com/LevelUpERC\r\n//https://t.me/LevelUpERC\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n        \r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract LevelUp is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    mapping (address => uint256) private _balOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n    mapping (address => bool) private _isOutFromFee;\r\n    mapping (address => bool) private isBlacklisted;\r\n\r\n\r\n    uint256 private time;\r\n    uint256 private bTime;\r\n\r\n\r\n\r\n    uint256 private _totalSupply = 1 * 10**5 * 10**18;\r\n\r\n    struct TaxStructure {\r\n        uint256 totalPc;\r\n        uint256 pcDevelopment;\r\n        uint256 pcMarketing;\r\n        uint256 pcLP;\r\n    }\r\n\r\n    TaxStructure private sellTax = TaxStructure(50,30,10,10);\r\n    TaxStructure private buyTax = TaxStructure(30,10,10,10);\r\n    TaxStructure private ZERO = TaxStructure(0,0,0,0);\r\n    TaxStructure private initialTax = TaxStructure(0,0,0,0);\r\n    TaxStructure private initialSellTax = TaxStructure(250,250,0,0);\r\n\r\n\r\n    string private constant _symbol = unicode\"LevelUp\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n\r\n    uint256 private _maxTxAmount = _totalSupply.div(100);\r\n    uint256 private _maxWalletAmount = _totalSupply.div(50);\r\n\r\n    uint256 private liquidityParkedTokens = 0;\r\n    uint256 private developmentParkedTokens = 0;\r\n    uint256 private marketingParkedTokens = 0;\r\n    uint256 private minBalance = _totalSupply.div(10000);\r\n    string private constant _name = unicode\"LevelUp\";\r\n\r\n\r\n    address payable private _developmentWallet;\r\n    address payable private _marketingWallet;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n\r\n\r\n    address private uniswapV2PairAddress;\r\n\r\n\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n\r\n    constructor () payable {\r\n        _developmentWallet = payable(0x92420f5fBef1760cA19759EE7E885b80De9557e6);\r\n        _marketingWallet = payable(0xa5440d54046fd968fC2BCc9543baCfC1C86E0D68);\r\n        _balOwned[owner()] = _totalSupply;\r\n\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2PairAddress = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\r\n\r\n        _isOutFromFee[owner()] = true;\r\n        _isOutFromFee[address(this)] = true;\r\n        _isOutFromFee[uniswapV2PairAddress] = true;\r\n\r\n\r\n        emit Transfer(address(0),address(this),_totalSupply);\r\n    }\r\n\r\n\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balOwned[account];\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"Exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n  \r\n   // Update Buy Tax\r\n    function updateBuyTax(uint256 _development,uint256 _marketing,uint256 _lp) external onlyOwner {\r\n        buyTax.pcLP = _lp;\r\n        buyTax.pcDevelopment = _development;\r\n        buyTax.pcMarketing = _marketing ; \r\n        buyTax.totalPc = _development.add(_lp).add(_marketing);\r\n        require(buyTax.totalPc < 90,\"Buy tax must be lower as 9%\");\r\n    }\r\n\r\n\r\n    // Update Sell Tax\r\n    function updateSellTax(uint256 _development,uint256 _marketing,uint256 _lp) external onlyOwner {\r\n        sellTax.pcLP = _lp;\r\n        sellTax.pcDevelopment = _development;\r\n        sellTax.pcMarketing = _marketing;\r\n        sellTax.totalPc = _development.add(_lp).add(_marketing);\r\n        require(sellTax.totalPc < 90,\"Sell tax must be lower as 9%\");\r\n    }\r\n\r\n\r\n\r\n    // Update Wallet and TX Limits\r\n    function updateLimits(uint256 maxTransactionPer,uint256 maxWalletPer) external onlyOwner {\r\n        require(maxTransactionPer > 1 && maxWalletPer > 1,\"Can not change limits below 1%\");\r\n        _maxTxAmount = _totalSupply.mul(maxTransactionPer).div(100);\r\n        _maxWalletAmount = _totalSupply.mul(maxWalletPer).div(100);\r\n    }\r\n\r\n\r\n    // Remove buy and sell limits\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _totalSupply;\r\n    }\r\n\r\n\r\n   // Exclude From Fees\r\n    function excludeFromFees(address[] calldata target) external onlyOwner{\r\n        for(uint i=0;i<target.length;i++)\r\n            _isOutFromFee[target[i]] = true;\r\n    }\r\n\r\n\r\n\r\n   // Approve\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"Approve from 0\");\r\n        require(spender != address(0), \"Approve from 0\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"Transfer from 0 \");\r\n        require(to != address(0), \"Transfer from 0\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n            require(tradingOpen,\"trading != true\");\r\n            require(!isBlacklisted[from] && !isBlacklisted[to]);\r\n\r\n            TaxStructure storage _tax = ZERO;\r\n            if(!_isOutFromFee[to]){\r\n                require((_balOwned[to] + amount) <= _maxWalletAmount,\"Wallet limit\");\r\n                require(amount <= _maxTxAmount,\"Tx Limit\");\r\n                if (from == uniswapV2PairAddress && to != address(uniswapV2Router)){\r\n                    _tax = buyTax;\r\n                }\r\n                if(bTime > block.number){\r\n                    _tax = initialTax;\r\n                }\r\n            }\r\n\r\n            else if (to == uniswapV2PairAddress && from != address(uniswapV2Router) && ! _isOutFromFee[from]) {\r\n                if(block.timestamp > time){\r\n                    _tax = sellTax;\r\n                }else{\r\n                    _tax = initialSellTax;\r\n                }\r\n            }\r\n            \r\n            \r\n            if (!inSwap && from != uniswapV2PairAddress && swapEnabled && !_isOutFromFee[from] && balanceOf(address(this)) > minBalance) {\r\n                    swapBack();\r\n            }\r\n\r\n            if(_tax.totalPc>0){\r\n                uint256 txTax = amount.mul(_tax.totalPc).div(1000);\r\n                amount = amount.sub(txTax);\r\n                liquidityParkedTokens = liquidityParkedTokens.add(txTax.mul(_tax.pcLP).div(_tax.totalPc));\r\n                developmentParkedTokens = developmentParkedTokens.add(txTax.mul(_tax.pcDevelopment).div(_tax.totalPc));\r\n                marketingParkedTokens = marketingParkedTokens.add(txTax.mul(_tax.pcMarketing).div(_tax.totalPc));\r\n                _transferStandard(from,address(this),txTax);\r\n            }\r\n        }\r\n        \t\t\r\n        _transferStandard(from,to,amount);\r\n    }\r\n\r\n\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n\r\n\r\n\r\n    function addLiquidity(uint256 tokenAmount,uint256 ethValue) private {\r\n        _approve(address(this),address(uniswapV2Router),tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethValue}(address(this),tokenAmount,0,0,address(0xdEaD),block.timestamp);\r\n    }\r\n\r\n\r\n\r\n    function swapBack() private lockTheSwap {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = liquidityParkedTokens + developmentParkedTokens + marketingParkedTokens;\r\n        bool success;\r\n\r\n        if (contractTokenBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractTokenBalance > minBalance * 20) {\r\n            contractTokenBalance = minBalance * 20;\r\n        }\r\n\r\n        uint256 liquidityTokens = (contractTokenBalance * liquidityParkedTokens) / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractTokenBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForDevelopment = ethBalance.mul(developmentParkedTokens).div(totalTokensToSwap);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(marketingParkedTokens).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForDevelopment - ethForMarketing;\r\n\r\n        liquidityParkedTokens = 0;\r\n        developmentParkedTokens = 0;\r\n        marketingParkedTokens = 0;\r\n\r\n        (success, ) = address(_marketingWallet).call{value: ethForMarketing}(\"\");\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n        }\r\n\r\n        (success, ) = address(_developmentWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n\r\n    }\r\n    \r\n\r\n    // Enable Trading Function\r\n    function Enable() external onlyOwner {\r\n        require(!tradingOpen,\"trading is already enabled\");\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        time = block.timestamp + (5 minutes);\r\n        bTime = block.number + 0;\r\n    }\r\n    \r\n\r\n    // Blacklist Function\r\n    function setBlacklist(address[] memory _isBlacklisted) public onlyOwner {\r\n        for (uint i = 0; i < _isBlacklisted.length; i++) {\r\n            isBlacklisted[_isBlacklisted[i]] = true;\r\n        }\r\n    }\r\n    \r\n    // Remove Blacklist Function\r\n    function removeBlacklist(address[] memory notbot) public onlyOwner {\r\n        for(uint i=0;i<notbot.length;i++){isBlacklisted[notbot[i]] = false;}\r\n    }\r\n\r\n    // Transfer Function\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        _balOwned[sender] = _balOwned[sender].sub(tAmount);\r\n        _balOwned[recipient] = _balOwned[recipient].add(tAmount); \r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    // Manual CA Swap \r\n    function manualSwap() external onlyOwner{\r\n        swapBack();\r\n    }\r\n\r\n\r\n     // Recover Stuck CA Tokens\r\n    function recoverTokens(address tokenAddress) external onlyOwner {\r\n        require(tokenAddress != uniswapV2PairAddress);\r\n        IERC20 _token = IERC20(tokenAddress);\r\n        _token.transfer(msg.sender,_token.balanceOf(address(this)));\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_isBlacklisted\",\"type\":\"address[]\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"name\":\"updateBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransactionPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletPer\",\"type\":\"uint256\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"name\":\"updateSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LevelUp", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0374335ff0fd48d2b379d3b7221eb1335781cccf9f5874f55aa52d84ea286f90"}