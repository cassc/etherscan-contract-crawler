{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nSimplified thanks to higher solidity version\\r\\nBut same functionality\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\nabstract contract ERC20 is IERC20 \\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) internal _balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public override allowance;\\r\\n\\r\\n    uint256 public override totalSupply;\\r\\n\\r\\n    string public override name;\\r\\n    string public override symbol;\\r\\n    uint8 public override decimals = 18;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory _name, string memory _symbol) \\r\\n    {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address a) public virtual override view returns (uint256) { return _balanceOf[a]; }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 oldAllowance = allowance[sender][msg.sender];\\r\\n        if (oldAllowance != uint256(-1)) {\\r\\n            _approve(sender, msg.sender, oldAllowance.sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        _balanceOf[account] = _balanceOf[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balanceOf[account] = _balanceOf[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        allowance[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 _decimals) internal {\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\"},\"ERC31337.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA wrapped token, where the underlying token can be swept\\r\\nand used for other purposes\\r\\nGoverned by an installable floor calculator contract\\r\\nSweepable by designated sweeper addresses\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./WrappedERC20.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\n\\r\\ncontract ERC31337 is WrappedERC20, IERC31337\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IFloorCalculator public override floorCalculator;\\r\\n    \\r\\n    mapping (address =\\u003e bool) public override sweepers;\\r\\n\\r\\n    constructor(IERC20 _wrappedToken, string memory _name, string memory _symbol)\\r\\n        WrappedERC20(_wrappedToken, _name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setFloorCalculator(IFloorCalculator _floorCalculator) public override ownerOnly()\\r\\n    {\\r\\n        floorCalculator = _floorCalculator;\\r\\n    }\\r\\n\\r\\n    function setSweeper(address sweeper, bool allow) public override ownerOnly()\\r\\n    {\\r\\n        sweepers[sweeper] = allow;\\r\\n    }\\r\\n\\r\\n    function sweepFloor(address to) public override returns (uint256 amountSwept)\\r\\n    {\\r\\n        require (to != address(0));\\r\\n        require (sweepers[msg.sender], \\\"Sweepers only\\\");\\r\\n        amountSwept = floorCalculator.calculateSubFloor(wrappedToken, this);\\r\\n        if (amountSwept \\u003e 0) {\\r\\n            wrappedToken.safeTransfer(to, amountSwept);\\r\\n        }\\r\\n    }\\r\\n}\"},\"GatedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA standard ERC20 with an extra hook: An installable transfer\\r\\ngate allowing for token tax and burn on transfer\\r\\n*/\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IGatedERC20.sol\\\";\\r\\n\\r\\nabstract contract GatedERC20 is ERC20, TokensRecoverable, IGatedERC20\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    ITransferGate public override transferGate;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setTransferGate(ITransferGate _transferGate) public override ownerOnly()\\r\\n    {\\r\\n        transferGate = _transferGate;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \\r\\n    {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        ITransferGate _transferGate = transferGate;\\r\\n        uint256 remaining = amount;\\r\\n        if (address(_transferGate) != address(0)) {\\r\\n            (uint256 burn, TransferGateTarget[] memory targets) = _transferGate.handleTransfer(msg.sender, sender, recipient, amount);            \\r\\n            if (burn \\u003e 0) {\\r\\n                amount = remaining = remaining.sub(burn, \\\"Burn too much\\\");\\r\\n                _burn(sender, burn);\\r\\n            }\\r\\n            for (uint256 x = 0; x \\u003c targets.length; ++x) {\\r\\n                (address dest, uint256 amt) = (targets[x].destination, targets[x].amount);\\r\\n                remaining = remaining.sub(amt, \\\"Transfer too much\\\");\\r\\n                _balanceOf[dest] = _balanceOf[dest].add(amt);\\r\\n                emit Transfer(sender, dest, amt);\\r\\n            }\\r\\n        }\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\\r\\n        emit Transfer(sender, recipient, remaining);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IERC20 \\r\\n{\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address _account) external view returns (uint256);\\r\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IERC31337.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\n\\r\\ninterface IERC31337 is IWrappedERC20\\r\\n{\\r\\n    function floorCalculator() external view returns (IFloorCalculator);\\r\\n    function sweepers(address _sweeper) external view returns (bool);\\r\\n    \\r\\n    function setFloorCalculator(IFloorCalculator _floorCalculator) external;\\r\\n    function setSweeper(address _sweeper, bool _allow) external;\\r\\n    function sweepFloor(address _to) external returns (uint256 amountSwept);\\r\\n}\"},\"IFloorCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IFloorCalculator\\r\\n{\\r\\n    function calculateSubFloor(IERC20 wrappedToken, IERC20 backingToken) external view returns (uint256);\\r\\n}\"},\"IGatedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\n\\r\\ninterface IGatedERC20 is IERC20\\r\\n{\\r\\n    function transferGate() external view returns (ITransferGate);\\r\\n\\r\\n    function setTransferGate(ITransferGate _transferGate) external;\\r\\n}\"},\"IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IOwned\\r\\n{\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n    function claimOwnership() external;\\r\\n}\"},\"IPonzoMaBobberG1.sol\":{\"content\":\"// SPDX-License-Identifier: P-P-P-PONZO!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPonzoMaBobberG1\\r\\n{\\r\\n    //function balancePriceBase(uint256 amount) external;\\r\\n    //function balancePriceElite(uint256 amount) external;\\r\\n    function pumpItPonzo (uint256 PUMPIT, address token) external;\\r\\n    function pumpRooted(address token, uint256 amountToSpend) external;\\r\\n    function sweepTheFloor() external;\\r\\n    function zapEliteToBase(uint256 liquidity) external;\\r\\n    function zapBaseToElite(uint256 liquidity) external;\\r\\n    function wrapToElite(uint256 baseAmount) external;\\r\\n    function unwrapElite(uint256 eliteAmount) external;\\r\\n    function addLiquidity(address eliteOrBase, uint256 baseAmount) external;\\r\\n    function removeLiquidity(address eliteOrBase, uint256 tokens) external;    \\r\\n    function buyRooted(address token, uint256 amountToSpend) external;\\r\\n    function sellRooted(address token, uint256 amountToSpend) external;\\r\\n    \\r\\n}\"},\"ITokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ITokensRecoverable\\r\\n{\\r\\n    function recoverTokens(IERC20 token) external;\\r\\n}\"},\"ITransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nstruct TransferGateTarget\\r\\n{\\r\\n    address destination;\\r\\n    uint256 amount;\\r\\n}\\r\\n\\r\\ninterface ITransferGate\\r\\n{\\r\\n    function handleTransfer(address msgSender, address from, address to, uint256 amount) external\\r\\n        returns (uint256 burn, TransferGateTarget[] memory targets);\\r\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20Events.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20, IWrappedERC20Events\\r\\n{    \\r\\n    function deposit() external payable;\\r\\n    function withdraw(uint256 _amount) external;\\r\\n}\\r\\n\"},\"IWrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20Events.sol\\\";\\r\\n\\r\\ninterface IWrappedERC20 is IERC20, IWrappedERC20Events\\r\\n{\\r\\n    function wrappedToken() external view returns (IERC20);\\r\\n    function depositTokens(uint256 _amount) external;\\r\\n    function withdrawTokens(uint256 _amount) external;\\r\\n}\"},\"IWrappedERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IWrappedERC20Events\\r\\n{\\r\\n    event Deposit(address indexed from, uint256 amount);\\r\\n    event Withdrawal(address indexed to, uint256 amount);\\r\\n}\\r\\n\"},\"KETH.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nTechnically a wrapped WETH\\r\\nSo a wrapped wrapped ethereum\\r\\nBut also accepts raw ETH\\r\\nAlso functions exactly like WETH (deposit/withdraw/direct send)\\r\\n*/\\r\\n\\r\\nimport \\\"./ERC31337.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract KETH is ERC31337, IWETH\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e bool) public freeParticipant;\\r\\n    uint16 public burnRate; \\r\\n\\r\\n    constructor (IWETH _weth) ERC31337(_weth, \\\"RootKit ETH\\\", \\\"KETH\\\")\\r\\n    {\\r\\n        _mint(msg.sender, 2000 ether);\\r\\n    }\\r\\n\\r\\n    receive() external payable\\r\\n    {\\r\\n        if (msg.sender != address(wrappedToken)) {\\r\\n            deposit();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deposit() public payable override\\r\\n    {\\r\\n        uint256 amount = msg.value;\\r\\n        IWETH(address(wrappedToken)).deposit{ value: amount }();\\r\\n        _mint(msg.sender, amount);\\r\\n        emit Deposit(msg.sender, amount); \\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount) public override\\r\\n    {\\r\\n        _burn(msg.sender, _amount);\\r\\n        IWETH(address(wrappedToken)).withdraw(_amount);\\r\\n        emit Withdrawal(msg.sender, _amount);\\r\\n        (bool success,) = msg.sender.call{ value: _amount }(\\\"\\\");\\r\\n        require (success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function setFreeParticipant(address participant, bool free) public ownerOnly()\\r\\n    {\\r\\n        freeParticipant[participant] = free;\\r\\n    }\\r\\n\\r\\n    function setBurnRate(uint16 _burnRate) public ownerOnly()\\r\\n    {\\r\\n        require (_burnRate \\u003c= 2000 , \\\"Dump tax rate should be less than or equal to 20%\\\"); // protecting everyone from Ponzo\\r\\n        \\r\\n        burnRate = _burnRate;\\r\\n    }\\r\\n    \\r\\n    function burn(uint256 amount) public\\r\\n    {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \\r\\n    {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        if (burnRate \\u003e 0 \\u0026\\u0026 !freeParticipant[sender] \\u0026\\u0026 !freeParticipant[recipient]) {\\r\\n            uint256 burnAmount = amount * burnRate / 10000;\\r\\n            amount = amount.sub(burnAmount, \\\"Burn too much\\\");\\r\\n            _burn(sender, burnAmount);\\r\\n        }\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n}\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nProvides ownerOnly() modifier\\r\\nAllows for ownership transfer but requires the new\\r\\nowner to claim (accept) ownership\\r\\nSafer because no accidental transfers or renouncing\\r\\n*/\\r\\n\\r\\nimport \\\"./IOwned.sol\\\";\\r\\n\\r\\nabstract contract Owned is IOwned\\r\\n{\\r\\n    address public override owner = msg.sender;\\r\\n    address internal pendingOwner;\\r\\n\\r\\n    modifier ownerOnly()\\r\\n    {\\r\\n        require (msg.sender == owner, \\\"Owner only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public override ownerOnly()\\r\\n    {\\r\\n        pendingOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public override\\r\\n    {\\r\\n        require (pendingOwner == msg.sender);\\r\\n        pendingOwner = address(0);\\r\\n        emit OwnershipTransferred(owner, msg.sender);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n}\"},\"PonzoMaBobberG1.sol\":{\"content\":\"// SPDX-License-Identifier: P-P-P-PONZO!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./RootKitTransferGate.sol\\\";\\r\\nimport \\\"./UniswapV2Library.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IPonzoMaBobberG1.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\n\\r\\n\\r\\ncontract PonzoMaBobberG1 is TokensRecoverable, IPonzoMaBobberG1\\r\\n\\r\\n    /*\\r\\n        Rooted-Ponzo-Ma-BobberV69.sol\\r\\n        Status: Fully functional ReKETH Edition     \\r\\n        Calibration: Saving the day\\r\\n        \\r\\n        The Ponzo-Ma-Bobber is a contract with access to critical system control\\r\\n        functions and liquidity tokens for ERC31337 / rooted token sets. it uses\\r\\n        the ERC-31337 sweeper functionality to streamline forced unit-value gain\\r\\n\\r\\n        Created by @ProfessorPonzo\\r\\n    */\\r\\n\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    IUniswapV2Router02 immutable uniswapV2Router;\\r\\n    IUniswapV2Factory immutable uniswapV2Factory;\\r\\n    IERC20 rooted;\\r\\n    IERC20 base;\\r\\n    IERC31337 elite;\\r\\n    IERC20 rootedEliteLP;\\r\\n    IERC20 rootedBaseLP;\\r\\n    IFloorCalculator calculator;\\r\\n    RootKitTransferGate gate;\\r\\n    mapping (address =\\u003e bool) public infinitePumpers;\\r\\n\\r\\n    constructor(IUniswapV2Router02 _uniswapV2Router)\\r\\n    {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        IUniswapV2Factory _uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n        uniswapV2Factory = _uniswapV2Factory;\\r\\n    }\\r\\n\\r\\n    function calibrate(IERC20 _base, IERC20 _rootedToken, IERC31337 _elite, IFloorCalculator _calculator, RootKitTransferGate _gate) public ownerOnly(){\\r\\n        base = _base;       \\r\\n        gate = _gate;\\r\\n        elite = _elite;\\r\\n        rooted = _rootedToken;\\r\\n        calculator = _calculator;\\r\\n\\r\\n        _base.approve(address(uniswapV2Router), uint256(-1));\\r\\n        _base.approve(address(_elite), uint256(-1));\\r\\n        _rootedToken.approve(address(uniswapV2Router), uint256(-1));\\r\\n        rootedBaseLP = IERC20(uniswapV2Factory.getPair(address(_base), address(_rootedToken)));\\r\\n        rootedBaseLP.approve(address(uniswapV2Router), uint256(-1));\\r\\n        _elite.approve(address(uniswapV2Router), uint256(-1));\\r\\n        rootedEliteLP = IERC20(uniswapV2Factory.getPair(address(_elite), address(_rootedToken)));\\r\\n        rootedEliteLP.approve(address(uniswapV2Router), uint256(-1));\\r\\n    }\\r\\n\\r\\n    function balancePriceBase(uint256 amount) public {\\r\\n        require(elite.balanceOf(address(this)) == 0, \\\"kETH starting balance must be zero\\\");\\r\\n        uint256 startingBalance = base.balanceOf(address(this));\\r\\n        amount = buyRootedToken(address(base), amount);\\r\\n        amount = sellRootedToken(address(elite), amount);\\r\\n        elite.withdrawTokens(amount);\\r\\n        require(startingBalance \\u003c= base.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function balancePriceElite(uint256 amount) public {\\r\\n        require(elite.balanceOf(address(this)) == 0, \\\"kETH starting balance must be zero\\\");\\r\\n        uint256 startingBalance = base.balanceOf(address(this));\\r\\n        elite.depositTokens(amount);\\r\\n        amount = buyRootedToken(address(elite), amount);\\r\\n        amount = sellRootedToken(address(base), amount);\\r\\n        require(startingBalance \\u003c= base.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n        // The Pump Button is really fun\\r\\n    function setInfinitePumper(address pumper, bool infinite) public ownerOnly() {\\r\\n        infinitePumpers[pumper] = infinite;\\r\\n    }\\r\\n        // Removes liquidity and buys from either pool \\r\\n    function pumpItPonzo (uint256 PUMPIT, address token) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        gate.setUnrestricted(true);\\r\\n        PUMPIT = removeLiq(token, PUMPIT);\\r\\n        buyRootedToken(token, PUMPIT);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n    function pumpRooted(address token, uint256 amountToSpend) public override { \\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        buyRootedToken(token, amountToSpend);\\r\\n    }\\r\\n\\r\\n        // Sweeps the Base token under the floor to this address\\r\\n    function sweepTheFloor() public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        elite.sweepFloor(address(this));\\r\\n    }\\r\\n        // Move liquidity from Elite pool ---\\u003e\\u003e Base pool\\r\\n    function zapEliteToBase(uint256 liquidity) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        gate.setUnrestricted(true);\\r\\n        liquidity = removeLiq(address(elite), liquidity);\\r\\n        elite.withdrawTokens(liquidity);\\r\\n        addLiq(address(base), liquidity);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n        // Move liquidity from Base pool ---\\u003e\\u003e Elite pool\\r\\n    function zapBaseToElite(uint256 liquidity) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        gate.setUnrestricted(true);\\r\\n        liquidity = removeLiq(address(base), liquidity);\\r\\n        elite.depositTokens(liquidity);\\r\\n        addLiq(address(elite), liquidity);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n    function wrapToElite(uint256 baseAmount) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        elite.depositTokens(baseAmount);\\r\\n    }\\r\\n    function unwrapElite(uint256 eliteAmount) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        elite.withdrawTokens(eliteAmount);\\r\\n    }\\r\\n    function addLiquidity(address eliteOrBase, uint256 baseAmount) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        gate.setUnrestricted(true);\\r\\n        addLiq(eliteOrBase, baseAmount);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n    function removeLiquidity (address eliteOrBase, uint256 tokens) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        gate.setUnrestricted(true);\\r\\n        removeLiq(eliteOrBase, tokens);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n    function buyRooted(address token, uint256 amountToSpend) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        buyRootedToken(token, amountToSpend);\\r\\n    }\\r\\n    function sellRooted(address token, uint256 amountToSpend) public override {\\r\\n        require (msg.sender == owner || infinitePumpers[msg.sender], \\\"You Wish!!!\\\");\\r\\n        sellRootedToken(token, amountToSpend);\\r\\n    }\\r\\n    function addLiq(address eliteOrBase, uint256 baseAmount) internal {\\r\\n        uniswapV2Router.addLiquidity(address(eliteOrBase), address(rooted), baseAmount, rooted.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\r\\n    }\\r\\n    function removeLiq(address eliteOrBase, uint256 tokens) internal returns (uint256) {\\r\\n        (tokens,) = uniswapV2Router.removeLiquidity(address(eliteOrBase), address(rooted), tokens, 0, 0, address(this), block.timestamp);\\r\\n        return tokens;\\r\\n    }\\r\\n    function buyRootedToken(address token, uint256 amountToSpend) internal returns (uint256) {\\r\\n        uint256[] memory amounts = uniswapV2Router.swapExactTokensForTokens(amountToSpend, 0, buyPath(token), address(this), block.timestamp);\\r\\n        amountToSpend = amounts[1]; \\r\\n        return amountToSpend;\\r\\n    }\\r\\n    function sellRootedToken(address token, uint256 amountToSpend) internal returns (uint256) {\\r\\n        uint256[] memory amounts = uniswapV2Router.swapExactTokensForTokens(amountToSpend, 0, sellPath(token), address(this), block.timestamp);\\r\\n        amountToSpend = amounts[1]; \\r\\n        return amountToSpend;\\r\\n    }\\r\\n    function buyPath(address token) internal view returns(address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(token);\\r\\n        path[1] = address(rooted);\\r\\n        return path;\\r\\n    }\\r\\n    function sellPath(address token) internal view returns(address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(rooted);\\r\\n        path[1] = address(token);\\r\\n        return path;\\r\\n    }\\r\\n}\"},\"RootKit.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nRootKit\\r\\nBecause my suggestions of WootKit and GrootKit were overruled\\r\\n*/\\r\\n\\r\\nimport \\\"./GatedERC20.sol\\\";\\r\\n\\r\\ncontract RootKit is GatedERC20(\\\"RootKit\\\", \\\"ROOT\\\")\\r\\n{\\r\\n    constructor()\\r\\n    {\\r\\n        _mint(msg.sender, 10000 ether);\\r\\n    }\\r\\n}\"},\"RootKitTransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA transfer gate (GatedERC20) for use with RootKit tokens\\r\\n\\r\\nIt:\\r\\n    Allows customization of tax and burn rates\\r\\n    Allows transfer to/from approved Uniswap pools\\r\\n    Disallows transfer to/from non-approved Uniswap pools\\r\\n    (doesn\\u0027t interfere with other crappy AMMs)\\r\\n    Allows transfer to/from anywhere else\\r\\n    Allows for free transfers if permission granted\\r\\n    Allows for unrestricted transfers if permission granted\\r\\n    Provides a safe and tax-free liquidity adding function\\r\\n*/\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./RootKit.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\n\\r\\nstruct RootKitTransferGateParameters\\r\\n{\\r\\n    address dev;\\r\\n    uint16 stakeRate; // 10000 = 100%\\r\\n    uint16 burnRate; // 10000 = 100%\\r\\n    uint16 devRate;  // 10000 = 100%\\r\\n    address stake;\\r\\n}\\r\\n\\r\\ncontract RootKitTransferGate is TokensRecoverable, ITransferGate\\r\\n{   \\r\\n    using Address for address;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    enum AddressState\\r\\n    {\\r\\n        Unknown,\\r\\n        NotPool,\\r\\n        DisallowedPool,\\r\\n        AllowedPool\\r\\n    }\\r\\n\\r\\n    RootKitTransferGateParameters public parameters;\\r\\n    IUniswapV2Router02 immutable internal uniswapV2Router;\\r\\n    IUniswapV2Factory immutable internal uniswapV2Factory;\\r\\n    RootKit immutable internal rootKit;\\r\\n\\r\\n    mapping (address =\\u003e AddressState) public addressStates;\\r\\n    IERC20[] public allowedPoolTokens;\\r\\n    \\r\\n    bool public unrestricted;\\r\\n    mapping (address =\\u003e bool) public unrestrictedControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipant;\\r\\n\\r\\n    mapping (address =\\u003e uint256) public liquiditySupply;\\r\\n    address public mustUpdate;    \\r\\n\\r\\n    constructor(RootKit _rootKit, IUniswapV2Router02 _uniswapV2Router)\\r\\n    {\\r\\n        rootKit = _rootKit;\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\r\\n    }\\r\\n\\r\\n    function allowedPoolTokensCount() public view returns (uint256) { return allowedPoolTokens.length; }\\r\\n\\r\\n    function setUnrestrictedController(address unrestrictedController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        unrestrictedControllers[unrestrictedController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFreeParticipant(address participant, bool free) public ownerOnly()\\r\\n    {\\r\\n        freeParticipant[participant] = free;\\r\\n    }\\r\\n\\r\\n    function setUnrestricted(bool _unrestricted) public\\r\\n    {\\r\\n        require (unrestrictedControllers[msg.sender], \\\"Not an unrestricted controller\\\");\\r\\n        unrestricted = _unrestricted;\\r\\n    }\\r\\n\\r\\n    function setParameters(address _dev, address _stake, uint16 _stakeRate, uint16 _burnRate, uint16 _devRate) public ownerOnly()\\r\\n    {\\r\\n        require (_stakeRate \\u003c= 10000 \\u0026\\u0026 _burnRate \\u003c= 10000 \\u0026\\u0026 _devRate \\u003c= 10000 \\u0026\\u0026 _stakeRate + _burnRate + _devRate \\u003c= 10000, \\\"\\u003e 100%\\\");\\r\\n        require (_dev != address(0) \\u0026\\u0026 _stake != address(0));\\r\\n        require (_stakeRate \\u003c= 500 \\u0026\\u0026 _burnRate \\u003c= 500 \\u0026\\u0026 _devRate \\u003c= 10, \\\"Sanity\\\");\\r\\n        \\r\\n        RootKitTransferGateParameters memory _parameters;\\r\\n        _parameters.dev = _dev;\\r\\n        _parameters.stakeRate = _stakeRate;\\r\\n        _parameters.burnRate = _burnRate;\\r\\n        _parameters.devRate = _devRate;\\r\\n        _parameters.stake = _stake;\\r\\n        parameters = _parameters;\\r\\n    }\\r\\n\\r\\n    function allowPool(IERC20 token) public ownerOnly()\\r\\n    {\\r\\n        address pool = uniswapV2Factory.getPair(address(rootKit), address(token));\\r\\n        if (pool == address(0)) {\\r\\n            pool = uniswapV2Factory.createPair(address(rootKit), address(token));\\r\\n        }\\r\\n        AddressState state = addressStates[pool];\\r\\n        require (state != AddressState.AllowedPool, \\\"Already allowed\\\");\\r\\n        addressStates[pool] = AddressState.AllowedPool;\\r\\n        allowedPoolTokens.push(token);\\r\\n        liquiditySupply[pool] = IERC20(pool).totalSupply();\\r\\n    }\\r\\n\\r\\n    function safeAddLiquidity(IERC20 token, uint256 tokenAmount, uint256 rootKitAmount, uint256 minTokenAmount, uint256 minRootKitAmount, address to, uint256 deadline) public\\r\\n        returns (uint256 rootKitUsed, uint256 tokenUsed, uint256 liquidity)\\r\\n    {\\r\\n        address pool = uniswapV2Factory.getPair(address(rootKit), address(token));\\r\\n        require (pool != address(0) \\u0026\\u0026 addressStates[pool] == AddressState.AllowedPool, \\\"Pool not approved\\\");\\r\\n        require (!unrestricted);\\r\\n        unrestricted = true;\\r\\n\\r\\n        uint256 tokenBalance = token.balanceOf(address(this));\\r\\n        token.safeTransferFrom(msg.sender, address(this), tokenAmount);\\r\\n        rootKit.transferFrom(msg.sender, address(this), rootKitAmount);\\r\\n        rootKit.approve(address(uniswapV2Router), rootKitAmount);\\r\\n        token.safeApprove(address(uniswapV2Router), tokenAmount);\\r\\n        (rootKitUsed, tokenUsed, liquidity) = uniswapV2Router.addLiquidity(address(rootKit), address(token), rootKitAmount, tokenAmount, minRootKitAmount, minTokenAmount, to, deadline);\\r\\n        liquiditySupply[pool] = IERC20(pool).totalSupply();\\r\\n        if (mustUpdate == pool) {\\r\\n            mustUpdate = address(0);\\r\\n        }\\r\\n\\r\\n        if (rootKitUsed \\u003c rootKitAmount) {\\r\\n            rootKit.transfer(msg.sender, rootKitAmount - rootKitUsed);\\r\\n        }\\r\\n        tokenBalance = token.balanceOf(address(this)).sub(tokenBalance); // we do it this way in case there\\u0027s a burn\\r\\n        if (tokenBalance \\u003e 0) {\\r\\n            token.safeTransfer(msg.sender, tokenBalance);\\r\\n        }\\r\\n        \\r\\n        unrestricted = false;\\r\\n    }\\r\\n\\r\\n    function handleTransfer(address, address from, address to, uint256 amount) public virtual override\\r\\n        returns (uint256 burn, TransferGateTarget[] memory targets)\\r\\n    {\\r\\n        {\\r\\n            address mustUpdateAddress = mustUpdate;\\r\\n            if (mustUpdateAddress != address(0)) {\\r\\n                mustUpdate = address(0);\\r\\n                uint256 newSupply = IERC20(mustUpdateAddress).totalSupply();\\r\\n                uint256 oldSupply = liquiditySupply[mustUpdateAddress];\\r\\n                if (newSupply != oldSupply) {\\r\\n                    liquiditySupply[mustUpdateAddress] = unrestricted ? newSupply : (newSupply \\u003e oldSupply ? newSupply : oldSupply);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        {\\r\\n            AddressState fromState = addressStates[from];\\r\\n            AddressState toState = addressStates[to];\\r\\n            if (fromState != AddressState.AllowedPool \\u0026\\u0026 toState != AddressState.AllowedPool) {\\r\\n                if (fromState == AddressState.Unknown) { fromState = detectState(from); }\\r\\n                if (toState == AddressState.Unknown) { toState = detectState(to); }\\r\\n                require (unrestricted || (fromState != AddressState.DisallowedPool \\u0026\\u0026 toState != AddressState.DisallowedPool), \\\"Pool not approved\\\");\\r\\n            }\\r\\n            if (toState == AddressState.AllowedPool) {\\r\\n                mustUpdate = to;\\r\\n            }\\r\\n            if (fromState == AddressState.AllowedPool) {\\r\\n                if (unrestricted) {\\r\\n                    liquiditySupply[from] = IERC20(from).totalSupply();\\r\\n                }\\r\\n                require (IERC20(from).totalSupply() \\u003e= liquiditySupply[from], \\\"Cannot remove liquidity\\\");            \\r\\n            }\\r\\n        }\\r\\n        if (unrestricted || freeParticipant[from] || freeParticipant[to]) {\\r\\n            return (0, new TransferGateTarget[](0));\\r\\n        }\\r\\n        RootKitTransferGateParameters memory params = parameters;\\r\\n        // \\\"amount\\\" will never be \\u003e totalSupply which is capped at 10k, so these multiplications will never overflow\\r\\n        burn = amount * params.burnRate / 10000;\\r\\n        targets = new TransferGateTarget[]((params.devRate \\u003e 0 ? 1 : 0) + (params.stakeRate \\u003e 0 ? 1 : 0));\\r\\n        uint256 index = 0;\\r\\n        if (params.stakeRate \\u003e 0) {\\r\\n            targets[index].destination = params.stake;\\r\\n            targets[index++].amount = amount * params.stakeRate / 10000;\\r\\n        }\\r\\n        if (params.devRate \\u003e 0) {\\r\\n            targets[index].destination = params.dev;\\r\\n            targets[index].amount = amount * params.devRate / 10000;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAddressState(address a, AddressState state) public ownerOnly()\\r\\n    {\\r\\n        addressStates[a] = state;\\r\\n    }\\r\\n\\r\\n    function detectState(address a) public returns (AddressState state) \\r\\n    {\\r\\n        state = AddressState.NotPool;\\r\\n        if (a.isContract()) {\\r\\n            try this.throwAddressState(a)\\r\\n            {\\r\\n                assert(false);\\r\\n            }\\r\\n            catch Error(string memory result) {\\r\\n                // if (bytes(result).length == 1) {\\r\\n                //     state = AddressState.NotPool;\\r\\n                // }\\r\\n                if (bytes(result).length == 2) {\\r\\n                    state = AddressState.DisallowedPool;\\r\\n                }\\r\\n            }\\r\\n            catch {\\r\\n            }\\r\\n        }\\r\\n        addressStates[a] = state;\\r\\n        return state;\\r\\n    }\\r\\n    \\r\\n    // Not intended for external consumption\\r\\n    // Always throws\\r\\n    // We want to call functions to probe for things, but don\\u0027t want to open ourselves up to\\r\\n    // possible state-changes\\r\\n    // So we return a value by reverting with a message\\r\\n    function throwAddressState(address a) external view\\r\\n    {\\r\\n        try IUniswapV2Pair(a).factory() returns (address factory)\\r\\n        {\\r\\n            // don\\u0027t care if it\\u0027s some crappy alt-amm\\r\\n            if (factory == address(uniswapV2Factory)) {\\r\\n                // these checks for token0/token1 are just for additional\\r\\n                // certainty that we\\u0027re interacting with a uniswap pair\\r\\n                try IUniswapV2Pair(a).token0() returns (address token0)\\r\\n                {\\r\\n                    if (token0 == address(rootKit)) {\\r\\n                        revert(\\\"22\\\");\\r\\n                    }\\r\\n                    try IUniswapV2Pair(a).token1() returns (address token1)\\r\\n                    {\\r\\n                        if (token1 == address(rootKit)) {\\r\\n                            revert(\\\"22\\\");\\r\\n                        }                        \\r\\n                    }\\r\\n                    catch { \\r\\n                    }                    \\r\\n                }\\r\\n                catch { \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        catch {             \\r\\n        }\\r\\n        revert(\\\"1\\\");\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nModified to remove some junk\\r\\nAlso modified to remove silly restrictions (traps!) within safeApprove\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nO wherefore art thou 8 point O\\r\\n*/\\r\\n\\r\\nlibrary SafeMath \\r\\n{\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) \\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n    \\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"TokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nAllows recovery of unexpected tokens (airdrops, etc)\\r\\nInheriters can customize logic by overriding canRecoverTokens\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./ITokensRecoverable.sol\\\";\\r\\n\\r\\nabstract contract TokensRecoverable is Owned, ITokensRecoverable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function recoverTokens(IERC20 token) public override ownerOnly() \\r\\n    {\\r\\n        require (canRecoverTokens(token));\\r\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal virtual view returns (bool) \\r\\n    { \\r\\n        return address(token) != address(this); \\r\\n    }\\r\\n}\"},\"UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, \\u0027UniswapV2Library: IDENTICAL_ADDRESSES\\u0027);\\r\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\u0027UniswapV2Library: ZERO_ADDRESS\\u0027);\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex\\u0027ff\\u0027,\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex\\u002796e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\u0027 // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n        require(amountA \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_AMOUNT\\u0027);\\r\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\r\\n        require(amountOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i \\u003c path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i \\u003e 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\"},\"WrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nWraps any ERC20\\r\\nSimilar to WETH except for ERC20 tokens instead of ETH\\r\\ndepositTokens/withdrawTokens are like deposit/withdraw in WETH\\r\\nInheriters can hook into depositTokens and withdrawTokens\\r\\nby overriding _beforeDepositTokens and _beforeWithdrawTokens\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract WrappedERC20 is ERC20, IWrappedERC20, TokensRecoverable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 public immutable override wrappedToken;\\r\\n\\r\\n    constructor (IERC20 _wrappedToken, string memory _name, string memory _symbol)\\r\\n        ERC20(_name, _symbol)\\r\\n    {        \\r\\n        if (_wrappedToken.decimals() != 18) {\\r\\n            _setupDecimals(_wrappedToken.decimals());\\r\\n        }\\r\\n        wrappedToken = _wrappedToken;\\r\\n    }\\r\\n\\r\\n    function depositTokens(uint256 _amount) public override\\r\\n    {\\r\\n        _beforeDepositTokens(_amount);\\r\\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\\r\\n        wrappedToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 received = wrappedToken.balanceOf(address(this)).sub(myBalance);\\r\\n        _mint(msg.sender, received);\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(uint256 _amount) public override\\r\\n    {\\r\\n        _beforeWithdrawTokens(_amount);\\r\\n        _burn(msg.sender, _amount);\\r\\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\\r\\n        wrappedToken.safeTransfer(msg.sender, _amount);\\r\\n        require (wrappedToken.balanceOf(address(this)) == myBalance.sub(_amount), \\\"Transfer not exact\\\");\\r\\n        emit Withdrawal(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal virtual override view returns (bool) \\r\\n    {\\r\\n        return token != this \\u0026\\u0026 token != wrappedToken;\\r\\n    }\\r\\n\\r\\n    function _beforeDepositTokens(uint256 _amount) internal virtual view { }\\r\\n    function _beforeWithdrawTokens(uint256 _amount) internal virtual view { }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorCalculator\",\"outputs\":[{\"internalType\":\"contract IFloorCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeParticipant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_burnRate\",\"type\":\"uint16\"}],\"name\":\"setBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFloorCalculator\",\"name\":\"_floorCalculator\",\"type\":\"address\"}],\"name\":\"setFloorCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"}],\"name\":\"setFreeParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sweeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setSweeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSwept\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sweepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KETH", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ecf27f11850be6a47d76e69ee8d2a12f949ed1068a3bbc095ac37f1d97b4098a"}