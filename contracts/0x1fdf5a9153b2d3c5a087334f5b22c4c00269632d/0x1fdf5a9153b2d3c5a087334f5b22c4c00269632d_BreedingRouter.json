{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/breeding/Breeding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"../interfaces/GeneScienceInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/GatchaItem.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/FadeAwayBunnyNFT.sol\\\";\\nimport \\\"../interfaces/IPillToken.sol\\\";\\n\\ncontract BreedingRouter is Ownable, Pausable, ERC721Holder, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /// in Ethereum, the average block time is between 12 to 14 seconds and is evaluated after each block\\n    /// for calculation countDownBlock;\\n    uint256 public constant secondsPerBlock = 12;\\n    uint256 public constant maxFertility = 7;\\n    uint256 public constant timestampPerDay = uint256(1 days);\\n    uint256 public maxPillForStaking = 10000000 * 10**18;\\n    uint256 public totalPillClaimed = 254671655242666660000000 + 1315417591000000000000000;\\n\\n    uint256 public breedCostPerDay = 600 * 10**18;\\n    // 33.33%\\n    uint256 public rentFee = 3333;\\n    uint256 public itemNum = 20;\\n    uint256 public nyanKeeCost = 10000 * 10**18;\\n    // config later\\n    uint256 public resetFerdilityCost = 10000000 * 10**18;\\n    // config later\\n    uint256 public turnOnBreedGen1Cost = 10000000 * 10**18;\\n\\n    uint256 public dripRate = 4000; // same with rewardRate, 10000 = 100%\\n    uint256 public finalRewardBlock; // The block number when token rewarding has to end.\\n    uint256 public rewardPerDay = 100 * 1e18; // 100 PILL per day\\n    uint256 public itemEffectBlock = 50400; // 7 days with 12s each block\\n    uint256 public constant blockPerDay = 7200; // 1 day with 12s each block\\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public itemPrice = 800 * 10**18;\\n    uint256 public dripCost = 400 * 1e18;\\n    FadeAwayBunnyNFT public nftAddress;\\n    GatchaItem public gatchaItem;\\n    IPillToken public rewardToken;\\n    GeneScienceInterface public geneScience;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 harvestedReward;\\n        mapping(uint256 => uint256) itemEndBlock;\\n        EnumerableSet.UintSet nftIds;\\n        mapping(uint256 => uint256) lastRewardBlock;\\n    }\\n    mapping(address => UserInfo) private userInfo;\\n    //// SuicideRate in zoom 10000 -> 30% = 3000, 60% = 6000\\n    uint16[] public intToSuicideRate;\\n    struct LeaseMarket {\\n        // price by day\\n        uint256 price;\\n        uint256 timestampLease;\\n        uint256 timestampRent;\\n        address renter;\\n        address owner;\\n        // duration for rent\\n        uint256 duration;\\n        bool usedToBreed;\\n    }\\n    struct Breeding {\\n        // bunny id 1\\n        uint256 bunnyId1;\\n        // bunny id 2\\n        uint256 bunnyId2;\\n        // bunny contract\\n        address bunnyContract;\\n        // owner who breeding\\n        address owner;\\n        // owner who breeding\\n        address rentedBunnyOwner;\\n        // time give breeding\\n        uint256 timestampBreeding;\\n        // time duration for breeding\\n        uint256 duration;\\n        /// block number\\n        uint256 cooldownEndBlock;\\n        /// block number\\n        uint256 successRate;\\n        /// is use ryankee\\n        bool useRyanKee;\\n        // is Rented Bunnies.\\n        bool isRentedBunny;\\n    }\\n\\n    mapping(uint256 => LeaseMarket) public tokenIdLeaseMarket;\\n    mapping(uint256 => Breeding) public tokenIdBreedings;\\n    mapping(uint256 => uint256) public idToBreedCounts;\\n    event Deposit(address indexed user, uint256 indexed nftId);\\n    event Withdraw(address indexed user, uint256 indexed nftId);\\n    event Harvest(address indexed user, uint256 indexed nftId, uint256 amount);\\n    event ApplyItem(address indexed user, uint256 indexed nftId, uint256 itemExpireBlock);\\n\\n    event UserLeaseBunny(address _user, uint256 _tokenId, uint256 _price);\\n    event UserCancelLeaseBunny(address _user, uint256 _tokenId);\\n    event UserRentBunny(address _owner, address _user, uint256 _tokenId, uint256 _price, uint256 _duration);\\n    event UserRentExtensionBunny(address _owner, address _user, uint256 _tokenId, uint256 _price, uint256 _duration);\\n    event UserBreedBunny(\\n        address _user,\\n        address _rentedBunnyOwner,\\n        uint256 _bunnyId1,\\n        uint256 _bunnyId2,\\n        bool _isRentedBunny,\\n        uint256 _duration\\n    );\\n    event UserGiveBirth(address _user, uint256 _bunnyId1, uint256 _bunnyId2, uint256 _childrenBunnyId);\\n    event UserGatchaBunny(address _user, uint256 _bunnyId1, uint256 _itemId);\\n    event UserBuyGatchaItem(address _user, uint256 _itemId);\\n\\n    constructor(\\n        IPillToken _rewardToken,\\n        FadeAwayBunnyNFT _nftAddress,\\n        GatchaItem _gatchaItem,\\n        uint256 _finalRewardBlock\\n    ) {\\n        rewardToken = _rewardToken;\\n        nftAddress = _nftAddress;\\n        gatchaItem = _gatchaItem;\\n        finalRewardBlock = _finalRewardBlock;\\n    }\\n\\n    /// @dev Update the address of the genetic contract, can only be called by the Owner.\\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\\n    function setGeneScienceAddress(address _address) external onlyOwner {\\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\\n        require(candidateContract.isGeneScience());\\n        // Set the new contract address\\n        geneScience = candidateContract;\\n    }\\n\\n    function setNFTAddress(FadeAwayBunnyNFT _nftAddress) external onlyOwner {\\n        nftAddress = _nftAddress;\\n    }\\n\\n    function setGatChaItem(GatchaItem _gatchaItem) external onlyOwner {\\n        gatchaItem = _gatchaItem;\\n    }\\n\\n    function setRewardToken(IPillToken _rewardToken) external onlyOwner {\\n        rewardToken = _rewardToken;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setItemNum(uint256 _itemNum) external onlyOwner {\\n        itemNum = _itemNum;\\n    }\\n\\n    function getFertility(uint256 tokenId) public view returns (uint256) {\\n        require(tokenId >= 0, \\\"invalid token id\\\");\\n        /// bunny gen 1 have breed count = 255 util have turn on breeding\\n        if (idToBreedCounts[tokenId] == 255) {\\n            return 0;\\n        } else {\\n            return maxFertility.sub(idToBreedCounts[tokenId]);\\n        }\\n    }\\n\\n    function configCost(\\n        uint256 _breedCostPerDay,\\n        uint256 _dripCost,\\n        uint256 _nyankeeCost,\\n        uint256 _gatchaItemPrice,\\n        uint256 _resetFerdilityCost,\\n        uint256 _turnOnBreedGen1Cost,\\n        uint256 _dripRate,\\n        uint256 _rentFeePercen,\\n        uint256 _maxPillForStaking\\n    ) external onlyOwner {\\n        breedCostPerDay = _breedCostPerDay;\\n        dripCost = _dripCost;\\n        nyanKeeCost = _nyankeeCost;\\n        itemPrice = _gatchaItemPrice;\\n        resetFerdilityCost = _resetFerdilityCost;\\n        turnOnBreedGen1Cost = _turnOnBreedGen1Cost;\\n        dripRate = _dripRate;\\n        rentFee = _rentFeePercen;\\n        maxPillForStaking = _maxPillForStaking;\\n    }\\n\\n    function resetFerdility(uint256 tokenId) external {\\n        (, , , , uint16 generation) = nftAddress.bunnies(tokenId);\\n        require(generation == 0, \\\"that function only provice for gen 0\\\");\\n        require(rewardToken.balanceOf(msg.sender) >= resetFerdilityCost, \\\"Not enougn token for this function\\\");\\n        ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, resetFerdilityCost);\\n        idToBreedCounts[tokenId] = 0;\\n    }\\n\\n    function changeGen1Ferdility(uint256 tokenId) external {\\n        (, , , , uint16 generation) = nftAddress.bunnies(tokenId);\\n        require(generation == 1, \\\"that function only provice for gen 1\\\");\\n        require(rewardToken.balanceOf(msg.sender) >= turnOnBreedGen1Cost, \\\"Not enougn token for this function\\\");\\n\\n        ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, turnOnBreedGen1Cost);\\n        idToBreedCounts[tokenId] = 0;\\n    }\\n\\n    // because use bytes32 can't split it live strings\\n    function _parseBytes32(bytes32 gens, uint8 index) internal pure returns (bytes1 result) {\\n        uint8 start = (index - 1) * 8;\\n        assembly {\\n            result := shl(start, gens)\\n        }\\n    }\\n\\n    function setIntToSuicideRate(uint16[] calldata suicideRates) external onlyOwner {\\n        intToSuicideRate = suicideRates;\\n    }\\n\\n    function cancelLease(uint256 tokenId) external {\\n        LeaseMarket storage leaseMarket = tokenIdLeaseMarket[tokenId];\\n        require(leaseMarket.owner == msg.sender, \\\"you are not owner\\\");\\n        withdraw(tokenId);\\n        delete tokenIdLeaseMarket[tokenId];\\n        emit UserCancelLeaseBunny(msg.sender, tokenId);\\n    }\\n\\n    function lease(uint256 tokenId, uint256 price) external {\\n        require(!paused(), \\\"contract paused\\\");\\n        if (!isUserStakedNft(msg.sender, tokenId)) {\\n            require(nftAddress.ownerOf(tokenId) == msg.sender, \\\" you are not owners\\\");\\n            // lease are still staking\\n            deposit(tokenId, false);\\n        }\\n        LeaseMarket memory leaseMarket;\\n        leaseMarket.owner = msg.sender;\\n        leaseMarket.price = price;\\n        leaseMarket.timestampLease = block.timestamp;\\n        leaseMarket.renter = address(0);\\n        tokenIdLeaseMarket[tokenId] = leaseMarket;\\n        emit UserLeaseBunny(msg.sender, tokenId, price);\\n    }\\n\\n    function _rent(uint256 tokenId, uint256 durationInDay) internal {\\n        require(!paused(), \\\"contract paused\\\");\\n        LeaseMarket storage leaseMarket = tokenIdLeaseMarket[tokenId];\\n        require(rewardToken.balanceOf(msg.sender) >= leaseMarket.price.mul(durationInDay), \\\"Not enougn token for rent\\\");\\n        require(\\n            rewardToken.allowance(msg.sender, address(this)) >= leaseMarket.price.mul(durationInDay),\\n            \\\"Please approval for contract can use Pill token\\\"\\n        );\\n        require(leaseMarket.renter == address(0), \\\"Bunny not available for rent\\\");\\n\\n        ERC20(address(rewardToken)).safeTransferFrom(msg.sender, address(this), leaseMarket.price.mul(durationInDay));\\n\\n        // transfer rent fee market for fee recient;\\n        ERC20(address(rewardToken)).safeTransfer(\\n            burnAddress,\\n            leaseMarket.price.mul(durationInDay).mul(rentFee).div(10000)\\n        );\\n\\n        // transfer rent fee for owner;\\n        ERC20(address(rewardToken)).safeTransfer(\\n            leaseMarket.owner,\\n            leaseMarket.price.mul(durationInDay).sub(leaseMarket.price.mul(durationInDay).mul(rentFee).div(10000))\\n        );\\n        leaseMarket.renter = msg.sender;\\n        leaseMarket.timestampRent = block.timestamp;\\n        leaseMarket.duration = durationInDay.mul(timestampPerDay);\\n        emit UserRentBunny(leaseMarket.owner, msg.sender, tokenId, leaseMarket.price, leaseMarket.duration);\\n    }\\n\\n    function _calculateBreedTime(\\n        bool isUseNyanKee,\\n        uint256 fertility1,\\n        uint256 fertility2,\\n        uint256 breedBoots1,\\n        uint256 breedBoots2\\n    ) internal pure returns (uint256) {\\n        /// calculate in zoom 10000, smart contract don't have decimal;\\n        uint256 nyanKeeRate = 0;\\n        if (isUseNyanKee) {\\n            nyanKeeRate = 1500;\\n        }\\n        uint256 group1 = uint256(10000) + (breedBoots1 + breedBoots2).div(2);\\n        uint256 group2 = ((fertility1.mul(10000) + fertility2.mul(10000)).mul(30000)).div(10000);\\n        uint256 group3 = 720000 - group2;\\n        uint256 group4 = group3.mul(10000).div(group1);\\n        uint256 breedTimeInDay = uint256(10000 - nyanKeeRate).mul(group4).div(10000).div(10000);\\n        return breedTimeInDay;\\n    }\\n\\n    function estimateBreedTimeAndCost(\\n        uint256 bunnyId1,\\n        uint256 bunnyId2,\\n        bool useNyanKee\\n    ) external view returns (uint256, uint256) {\\n        uint256 breedingDay = _getBreedingTime(bunnyId1, bunnyId2, useNyanKee);\\n        if (useNyanKee) {\\n            return (breedingDay, breedingDay.mul(breedCostPerDay).add(nyanKeeCost));\\n        } else {\\n            return (breedingDay, breedingDay.mul(breedCostPerDay));\\n        }\\n    }\\n\\n    function _calculateSuccessRate(uint256 suicideRate1, uint256 suicideRate2) internal pure returns (uint256) {\\n        /// calculate in zoom 10000, smart contract don't have decimal;\\n        uint256 successRate = (20000 - suicideRate1 - suicideRate2).mul(10000).div(20000);\\n        /// return sucess rate in zoom 10000;\\n        return successRate;\\n    }\\n\\n    function getSuccessRate(uint256 bunnyId1, uint256 bunnyId2) public view returns (uint256) {\\n        /// calculate in zoom 10000, smart contract don't have decimal;\\n        (bytes32 gens1, , , , ) = nftAddress.bunnies(bunnyId1);\\n        (bytes32 gens2, , , , ) = nftAddress.bunnies(bunnyId2);\\n\\n        uint256 suicideRate1 = intToSuicideRate[uint8(_parseBytes32(gens1, 3))];\\n        uint256 suicideRate2 = intToSuicideRate[uint8(_parseBytes32(gens2, 3))];\\n        uint256 successRate = _calculateSuccessRate(suicideRate1, suicideRate2);\\n        /// return sucess rate in zoom 10000;\\n        return successRate;\\n    }\\n\\n    // breed time in day\\n    function _getBreedingTime(\\n        uint256 bunnyId1,\\n        uint256 bunnyId2,\\n        bool useNyanKee\\n    ) internal view returns (uint256) {\\n        (bytes32 gens1, , , , ) = nftAddress.bunnies(bunnyId1);\\n        (bytes32 gens2, , , , ) = nftAddress.bunnies(bunnyId2);\\n        // breed boots = 50% - SuicideRate\\n        // but get intToSuicideRate from secound pair\\n        uint256 breedBoots1 = 5000 - intToSuicideRate[uint8(_parseBytes32(gens1, 3))];\\n        uint256 breedBoots2 = 5000 - intToSuicideRate[uint8(_parseBytes32(gens2, 3))];\\n        uint256 fertility1 = getFertility(bunnyId1);\\n        uint256 fertility2 = getFertility(bunnyId2);\\n        /// return day in int\\n        uint256 breedingTimeInDay = _calculateBreedTime(useNyanKee, fertility1, fertility2, breedBoots1, breedBoots2);\\n        /// return breed day\\n        return breedingTimeInDay;\\n    }\\n\\n    // ignore check owner of rented Bunny\\n    // check rented bunny valid by time and duration\\n    // can't breed staking bunny, just write this function for bunny in wallet\\n    function _breedingWithRentedBunny(\\n        uint256 bunnyId1,\\n        uint256 rentedBunnyId,\\n        bool useNyanKee\\n    ) internal returns (uint256) {\\n        require(!paused(), \\\"contract paused\\\");\\n        require(\\n            nftAddress.isApprovedForAll(msg.sender, address(this)) == true,\\n            \\\"Please approval for contract can take your bunny\\\"\\n        );\\n        require(bunnyId1 != rentedBunnyId, \\\"need 2 bunny to breed\\\");\\n\\n        if (!isUserStakedNft(msg.sender, bunnyId1)) {\\n            require(nftAddress.ownerOf(bunnyId1) == msg.sender, \\\"you are not owner of bunnies\\\");\\n            nftAddress.safeTransferFrom(msg.sender, address(this), bunnyId1);\\n        } else {\\n            _stopStakingForBreeding(bunnyId1, msg.sender);\\n            //// staking without lease\\n            LeaseMarket storage userLease = tokenIdLeaseMarket[bunnyId1];\\n            require(userLease.owner == address(0), \\\"bunny have been lease out\\\");\\n        }\\n\\n        uint256 breedTimeInDay = _getBreedingTime(bunnyId1, rentedBunnyId, useNyanKee);\\n        _rent(rentedBunnyId, breedTimeInDay);\\n        LeaseMarket storage rentedBunny = tokenIdLeaseMarket[rentedBunnyId];\\n\\n        require(getFertility(bunnyId1) >= 2, \\\"Not enough Ferdility\\\");\\n        if (useNyanKee) {\\n            require(\\n                rewardToken.allowance(msg.sender, address(this)) >= nyanKeeCost,\\n                \\\"Please approval for contract can take Pill token\\\"\\n            );\\n            require(rewardToken.balanceOf(msg.sender) >= nyanKeeCost, \\\"Not enough token for NyanKee\\\");\\n            ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, nyanKeeCost);\\n        }\\n        // for test\\n        // uint256 breedingTime = 100;\\n        // uint256 pillCost = 200 * 10**18;\\n        uint256 breedingTime = timestampPerDay.mul(breedTimeInDay);\\n        uint256 pillCost = breedTimeInDay.mul(breedCostPerDay);\\n\\n        require(\\n            rewardToken.allowance(msg.sender, address(this)) >= pillCost,\\n            \\\"Please approval for contract can take Pill token\\\"\\n        );\\n\\n        require(rewardToken.balanceOf(msg.sender) >= pillCost, \\\"not enough pill\\\");\\n        ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, pillCost);\\n\\n        // Parent bunny descrease to 2.. rented bunny don't descrease\\n        idToBreedCounts[bunnyId1] = idToBreedCounts[bunnyId1] + 2;\\n\\n        rentedBunny.usedToBreed = true;\\n        // escow bunny to contract\\n\\n        _stopStakingForBreeding(rentedBunnyId, rentedBunny.owner);\\n\\n        uint256 successRate = getSuccessRate(bunnyId1, rentedBunnyId);\\n\\n        Breeding memory breed;\\n        breed.bunnyId1 = bunnyId1;\\n        breed.bunnyId2 = rentedBunnyId;\\n        breed.bunnyContract = address(nftAddress);\\n        breed.owner = msg.sender;\\n        breed.rentedBunnyOwner = rentedBunny.owner;\\n        breed.isRentedBunny = true;\\n        breed.useRyanKee = useNyanKee;\\n        breed.duration = breedingTime;\\n        breed.timestampBreeding = block.timestamp;\\n        /// estimate block target;\\n        breed.successRate = successRate;\\n        breed.cooldownEndBlock = block.number + breedingTime.div(secondsPerBlock);\\n\\n        tokenIdBreedings[bunnyId1] = breed;\\n\\n        emit UserBreedBunny(msg.sender, rentedBunny.owner, bunnyId1, rentedBunnyId, true, breedingTime);\\n\\n        return bunnyId1;\\n    }\\n\\n    // check owner of bunies\\n    // escow bunies to contract.\\n    // can use staked bunny for breed, stop staking while they breed\\n    function _breedingWithBunnies(\\n        uint256 bunnyId1,\\n        uint256 bunnyId2,\\n        bool useNyanKee\\n    ) internal returns (uint256) {\\n        require(!paused(), \\\"contract paused\\\");\\n        require(\\n            nftAddress.isApprovedForAll(msg.sender, address(this)) == true,\\n            \\\"Please approval for contract can take your bunny\\\"\\n        );\\n        require(bunnyId1 != bunnyId2, \\\"need 2 bunny to breed\\\");\\n\\n        // escow bunny to contract\\n        if (!isUserStakedNft(msg.sender, bunnyId1)) {\\n            require(nftAddress.ownerOf(bunnyId1) == msg.sender, \\\"you are not owner of bunnies\\\");\\n            nftAddress.safeTransferFrom(msg.sender, address(this), bunnyId1);\\n        } else {\\n            //// staking without lease\\n            LeaseMarket storage userLease = tokenIdLeaseMarket[bunnyId1];\\n            require(userLease.owner == address(0), \\\"bunny have been lease out\\\");\\n            _stopStakingForBreeding(bunnyId1, msg.sender);\\n        }\\n        if (!isUserStakedNft(msg.sender, bunnyId2)) {\\n            require(nftAddress.ownerOf(bunnyId2) == msg.sender, \\\"you are not owner of bunnies\\\");\\n            nftAddress.safeTransferFrom(msg.sender, address(this), bunnyId2);\\n        } else {\\n            //// staking without lease\\n            LeaseMarket storage userLease = tokenIdLeaseMarket[bunnyId2];\\n            require(userLease.owner == address(0), \\\"bunny have been lease out\\\");\\n            _stopStakingForBreeding(bunnyId2, msg.sender);\\n        }\\n\\n        if (useNyanKee) {\\n            require(rewardToken.balanceOf(msg.sender) >= nyanKeeCost, \\\"Not enough token for NyanKee\\\");\\n            ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, nyanKeeCost);\\n        }\\n        require(getFertility(bunnyId1) > 0, \\\"Not enough Ferdility\\\");\\n        require(getFertility(bunnyId2) > 0, \\\"Not enough Ferdility\\\");\\n\\n        uint256 breedTimeInDay = _getBreedingTime(bunnyId1, bunnyId2, useNyanKee);\\n        // for test\\n        // uint256 breedingTime = 100;\\n        // uint256 pillCost = 200 * 10**18;\\n        uint256 breedingTime = timestampPerDay.mul(breedTimeInDay);\\n        uint256 pillCost = breedTimeInDay.mul(breedCostPerDay);\\n        require(rewardToken.balanceOf(msg.sender) >= pillCost, \\\"not enough pill\\\");\\n        ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, pillCost);\\n\\n        // inscrease Breed Count 1\\n        idToBreedCounts[bunnyId1] = idToBreedCounts[bunnyId1] + 1;\\n        idToBreedCounts[bunnyId2] = idToBreedCounts[bunnyId2] + 1;\\n        uint256 successRate = getSuccessRate(bunnyId1, bunnyId2);\\n\\n        Breeding memory breed;\\n        breed.bunnyId1 = bunnyId1;\\n        breed.bunnyId2 = bunnyId2;\\n        breed.bunnyContract = address(nftAddress);\\n        breed.owner = msg.sender;\\n        breed.rentedBunnyOwner = msg.sender;\\n        breed.isRentedBunny = false;\\n        breed.useRyanKee = useNyanKee;\\n        breed.duration = breedingTime;\\n        breed.timestampBreeding = block.timestamp;\\n        breed.successRate = successRate;\\n        /// estimate block;\\n        breed.cooldownEndBlock = block.number + breedingTime.div(secondsPerBlock);\\n        tokenIdBreedings[bunnyId1] = breed;\\n        emit UserBreedBunny(msg.sender, msg.sender, bunnyId1, bunnyId2, false, breedingTime);\\n\\n        return bunnyId1;\\n    }\\n\\n    function breedingWithBunnies(\\n        uint256 bunnyId1,\\n        uint256 bunnyId2,\\n        bool useNyanKee\\n    ) external returns (uint256) {\\n        return _breedingWithBunnies(bunnyId1, bunnyId2, useNyanKee);\\n    }\\n\\n    function gatchaBunny(uint256 tokenId, uint256[] memory itemIds) external {\\n        require(!paused(), \\\"contract paused\\\");\\n        require(nftAddress.ownerOf(tokenId) == msg.sender, \\\"you are not owner of bunny\\\");\\n        for (uint256 i = 0; i < itemIds.length; i++) {\\n            gatchaItem.safeTransferFrom(msg.sender, burnAddress, itemIds[i], 1, \\\"0x\\\");\\n            emit UserGatchaBunny(msg.sender, tokenId, itemIds[i]);\\n        }\\n    }\\n\\n    function buyGatchaItem(uint256 quantity) external {\\n        require(!paused(), \\\"contract paused\\\");\\n        require(rewardToken.balanceOf(msg.sender) >= itemPrice * quantity, \\\"Not enougn token for this function\\\");\\n        ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, itemPrice * quantity);\\n        for (uint256 i = 0; i < quantity; i++) {\\n            uint256 itemId = _rand(i, true);\\n            gatchaItem.mint(msg.sender, itemId, 1);\\n            emit UserBuyGatchaItem(msg.sender, itemId);\\n        }\\n    }\\n\\n    function gatchaBunnyWithRandomItem(uint256 tokenId) external {\\n        require(!paused(), \\\"contract paused\\\");\\n        require(nftAddress.ownerOf(tokenId) == msg.sender, \\\"you are not owner of bunny\\\");\\n        ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, itemPrice);\\n        uint256 itemId = _rand(tokenId, true);\\n        emit UserBuyGatchaItem(msg.sender, itemId);\\n        emit UserGatchaBunny(msg.sender, tokenId, itemId);\\n    }\\n\\n    function breedingWithRentedBunny(\\n        uint256 bunnyId1,\\n        uint256 rentedBunnyId,\\n        bool useNyanKee\\n    ) external returns (uint256) {\\n        return _breedingWithRentedBunny(bunnyId1, rentedBunnyId, useNyanKee);\\n    }\\n\\n    function giveBirth(uint256 tokenId) external returns (uint256) {\\n        Breeding storage breed = tokenIdBreedings[tokenId];\\n        require(!paused(), \\\"contract paused\\\");\\n        require(_isPregnant(tokenId), \\\"bunny don't breeding yet\\\");\\n        require(_canGiveBirth(tokenId), \\\"can't give birth now\\\");\\n        require(msg.sender == breed.owner || msg.sender == breed.rentedBunnyOwner, \\\"You are not owner\\\");\\n        (bytes32 gens1, , , , ) = nftAddress.bunnies(breed.bunnyId1);\\n        (bytes32 gens2, , , , ) = nftAddress.bunnies(breed.bunnyId2);\\n\\n        // Call the sooper-sekret gene mixing operation.\\n        bytes32 childGenes = geneScience.mixGenes(uint256(gens1), uint256(gens2), breed.cooldownEndBlock - 1);\\n        // random 0->9999\\n        uint256 random = _rand(breed.bunnyId1, false);\\n        // suceesRate in zoom 10000 -> 80% = 8000 (1>8000 == true).\\n        uint256 childrenBunnyId = 0;\\n        if (random + 1 <= breed.successRate) {\\n            childrenBunnyId = nftAddress.createFadeAwayBunny(\\n                breed.bunnyId1,\\n                breed.bunnyId2,\\n                1,\\n                childGenes,\\n                address(this)\\n            );\\n        }\\n        // Make the new bunny!\\n        // new born bunny alway gen 1\\n\\n        if (!breed.isRentedBunny) {\\n            // if user use 2 bunnies for breeding -> give them back.\\n            _depositFromBreeding(breed.owner, breed.bunnyId1);\\n            _depositFromBreeding(breed.owner, breed.bunnyId2);\\n            if (childrenBunnyId > 0) {\\n                idToBreedCounts[childrenBunnyId] = 255;\\n                _depositFromBreeding(breed.owner, childrenBunnyId);\\n            }\\n        } else {\\n            /// give back rented bunny for Lease Market\\n            _updateBunnyRentState(breed.bunnyId2, true);\\n            _depositFromBreeding(breed.owner, breed.bunnyId1);\\n            LeaseMarket storage rentedBunny = tokenIdLeaseMarket[breed.bunnyId2];\\n            _depositFromBreeding(rentedBunny.owner, breed.bunnyId2);\\n            if (childrenBunnyId > 0) {\\n                // bunny gen 1 can't breed\\n                idToBreedCounts[childrenBunnyId] = 255;\\n                _depositFromBreeding(breed.owner, childrenBunnyId);\\n            }\\n        }\\n        emit UserGiveBirth(msg.sender, breed.bunnyId1, breed.bunnyId2, childrenBunnyId);\\n        delete tokenIdBreedings[tokenId];\\n        return childrenBunnyId;\\n    }\\n\\n    function _updateBunnyRentState(uint256 tokenId, bool isGiveBirth) internal returns (bool) {\\n        LeaseMarket storage rentedBunny = tokenIdLeaseMarket[tokenId];\\n        require(rentedBunny.timestampRent >= 0, \\\"Bunny not yet rented\\\");\\n        if (isGiveBirth) {\\n            //// alway give back lease market when breed done.\\n            rentedBunny.usedToBreed = false;\\n            rentedBunny.renter = address(0);\\n            rentedBunny.duration = 0;\\n            rentedBunny.timestampRent = 0;\\n            return true;\\n        } else if (rentedBunny.timestampRent + rentedBunny.duration <= block.timestamp) {\\n            rentedBunny.usedToBreed = false;\\n            rentedBunny.renter = address(0);\\n            rentedBunny.duration = 0;\\n            rentedBunny.timestampRent = 0;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function updateBunnyRentState(uint256 tokenId) external {\\n        _updateBunnyRentState(tokenId, false);\\n    }\\n\\n    function _rand(uint256 index, bool randomItem) internal view returns (uint256) {\\n        uint256 seed = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp +\\n                        block.difficulty +\\n                        ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) +\\n                        block.gaslimit +\\n                        ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) +\\n                        block.number +\\n                        index\\n                )\\n            )\\n        );\\n        /// return rd value from 0 - 9999\\n        if (!randomItem) {\\n            return (seed - ((seed / 10000) * 10000));\\n        } else {\\n            return (seed - ((seed / itemNum) * itemNum));\\n        }\\n    }\\n\\n    function _canGiveBirth(uint256 tokenId) internal view returns (bool) {\\n        Breeding storage breed = tokenIdBreedings[tokenId];\\n        if (breed.timestampBreeding == 0) return false;\\n        return (breed.timestampBreeding + breed.duration <= block.timestamp);\\n    }\\n\\n    function canGiveBirth(uint256 tokenId) external view returns (bool) {\\n        return _canGiveBirth(tokenId);\\n    }\\n\\n    function _isPregnant(uint256 tokenId) internal view returns (bool) {\\n        return tokenIdBreedings[tokenId].timestampBreeding > 0;\\n    }\\n\\n    function isPregnant(uint256 tokenId) external view returns (bool) {\\n        return _isPregnant(tokenId);\\n    }\\n\\n    // Update item effect block by the owner\\n    function setItemEffectBlock(uint256 _itemEffectBlock) public onlyOwner {\\n        itemEffectBlock = _itemEffectBlock;\\n    }\\n\\n    // Update reward rate by the owner\\n    function setRewardPerDay(uint256 _rewardPerDay) public onlyOwner {\\n        rewardPerDay = _rewardPerDay;\\n    }\\n\\n    // Update final reward block by the owner\\n    function setFinalRewardBlock(uint256 _finalRewardBlock) public onlyOwner {\\n        finalRewardBlock = _finalRewardBlock;\\n    }\\n\\n    function getUserInfo(address _user) external view returns (uint256, uint256) {\\n        UserInfo storage user = userInfo[_user];\\n\\n        return (user.amount, user.harvestedReward);\\n    }\\n\\n    function getApliedItemInfo(address _user, uint256 _tokenId) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        return user.itemEndBlock[_tokenId];\\n    }\\n\\n    //check deposited nft.\\n    function depositsOf(address _user) external view returns (uint256[] memory) {\\n        UserInfo storage user = userInfo[_user];\\n        EnumerableSet.UintSet storage depositSet = user.nftIds;\\n        uint256[] memory tokenIds = new uint256[](depositSet.length());\\n\\n        for (uint256 i; i < depositSet.length(); i++) {\\n            tokenIds[i] = depositSet.at(i);\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    function deposit(uint256 _nftId, bool _applyItem) public {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        nftAddress.safeTransferFrom(address(msg.sender), address(this), _nftId);\\n        user.amount = user.amount.add(1);\\n        user.lastRewardBlock[_nftId] = block.number;\\n        user.nftIds.add(_nftId);\\n        emit Deposit(msg.sender, _nftId);\\n        if (_applyItem) {\\n            applyItem(_nftId);\\n        }\\n    }\\n\\n    function _depositFromBreeding(address userAddress, uint256 _nftId) internal {\\n        UserInfo storage user = userInfo[userAddress];\\n        user.amount = user.amount.add(1);\\n        user.lastRewardBlock[_nftId] = block.number;\\n        user.nftIds.add(_nftId);\\n        emit Deposit(userAddress, _nftId);\\n    }\\n\\n    function batchDeposit(uint256[] memory _nftIds) public nonReentrant {\\n        uint256 i;\\n        for (i = 0; i < _nftIds.length; i++) {\\n            deposit(_nftIds[i], false);\\n        }\\n    }\\n\\n    function viewNftRate(uint256 _nftId) public view returns (uint16) {\\n        (bytes32 genes, , , , uint16 generation) = nftAddress.bunnies(_nftId);\\n\\n        if (generation == 1) {\\n            return 10000;\\n        }\\n\\n        uint16 earnRateInt = 10000 + (5000 - intToSuicideRate[uint8(_parseBytes32(genes, 3))]);\\n        return earnRateInt;\\n    }\\n\\n    function isUserStakedNft(address _user, uint256 _nftId) public view returns (bool) {\\n        UserInfo storage user = userInfo[_user];\\n\\n        return user.nftIds.contains(_nftId);\\n    }\\n\\n    function viewReward(address _user, uint256 _nftId) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint16 nftRate = viewNftRate(_nftId);\\n        uint256 maxBlock;\\n\\n        if (block.number > finalRewardBlock) {\\n            maxBlock = finalRewardBlock;\\n        } else {\\n            maxBlock = block.number;\\n        }\\n\\n        if (user.lastRewardBlock[_nftId] >= maxBlock) {\\n            return 0;\\n        }\\n\\n        if (user.itemEndBlock[_nftId] != 0 && user.lastRewardBlock[_nftId] <= user.itemEndBlock[_nftId]) {\\n            if (maxBlock <= user.itemEndBlock[_nftId]) {\\n                return\\n                    rewardPerDay.mul(maxBlock - user.lastRewardBlock[_nftId]).mul(dripRate).mul(nftRate).div(1e8).div(\\n                        blockPerDay\\n                    );\\n            } else {\\n                uint256 itemPeriod = user.itemEndBlock[_nftId] - user.lastRewardBlock[_nftId];\\n                uint256 normalPeriod = maxBlock - user.itemEndBlock[_nftId];\\n                uint256 tmpItemRate = dripRate;\\n                uint256 itemPeriodReward = rewardPerDay.mul(itemPeriod).mul(tmpItemRate).mul(nftRate).div(1e8).div(\\n                    blockPerDay\\n                );\\n                uint256 normalPeriodReward = rewardPerDay.mul(normalPeriod).mul(nftRate).div(10000).div(blockPerDay);\\n                return itemPeriodReward + normalPeriodReward;\\n            }\\n        } else {\\n            return rewardPerDay.mul(maxBlock - user.lastRewardBlock[_nftId]).mul(nftRate).div(10000).div(blockPerDay);\\n        }\\n    }\\n\\n    function harvest(uint256 _nftId) public {\\n        require(isUserStakedNft(msg.sender, _nftId), \\\"harvest:: this nft is not yours\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 reward = viewReward(msg.sender, _nftId);\\n        if (maxPillForStaking - totalPillClaimed == 0) {\\n            return;\\n        }\\n        if (maxPillForStaking - totalPillClaimed < reward) {\\n            reward = maxPillForStaking - totalPillClaimed;\\n        }\\n        if (reward == 0) {\\n            return;\\n        }\\n        totalPillClaimed = totalPillClaimed + reward;\\n        user.lastRewardBlock[_nftId] = block.number;\\n        user.harvestedReward = user.harvestedReward + reward;\\n        rewardToken.mint(msg.sender, reward);\\n\\n        emit Harvest(msg.sender, _nftId, reward);\\n    }\\n\\n    function _harvestForSomeOne(uint256 _nftId, address _owner) internal {\\n        require(isUserStakedNft(_owner, _nftId), \\\"harvest:: this nft is not user\\\");\\n        UserInfo storage user = userInfo[_owner];\\n        uint256 reward = viewReward(_owner, _nftId);\\n        if (maxPillForStaking - totalPillClaimed == 0) {\\n            return;\\n        }\\n        if (maxPillForStaking - totalPillClaimed < reward) {\\n            reward = maxPillForStaking - totalPillClaimed;\\n        }\\n        if (reward == 0) {\\n            return;\\n        }\\n        totalPillClaimed = totalPillClaimed + reward;\\n\\n        user.lastRewardBlock[_nftId] = block.number;\\n        user.harvestedReward = user.harvestedReward + reward;\\n        rewardToken.mint(_owner, reward);\\n\\n        emit Harvest(_owner, _nftId, reward);\\n    }\\n\\n    function harvestAll() public nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        EnumerableSet.UintSet storage depositSet = user.nftIds;\\n\\n        for (uint256 i; i < depositSet.length(); i++) {\\n            harvest(depositSet.at(i));\\n        }\\n    }\\n\\n    function batchHarvest(uint256[] memory _nftIds) public nonReentrant {\\n        uint256 i;\\n        for (i = 0; i < _nftIds.length; i++) {\\n            harvest(_nftIds[i]);\\n        }\\n    }\\n\\n    function batchWithdraw(uint256[] memory _nftIds) public nonReentrant {\\n        uint256 i;\\n        for (i = 0; i < _nftIds.length; i++) {\\n            withdraw(_nftIds[i]);\\n        }\\n    }\\n\\n    function _stopStakingForBreeding(uint256 _nftId, address _owner) internal {\\n        require(isUserStakedNft(_owner, _nftId), \\\"stop staking:: this nft is not yours\\\");\\n        UserInfo storage user = userInfo[_owner];\\n        _harvestForSomeOne(_nftId, _owner);\\n        user.amount = user.amount.sub(1);\\n        user.nftIds.remove(_nftId);\\n        emit Withdraw(msg.sender, _nftId);\\n    }\\n\\n    function withdraw(uint256 _nftId) public {\\n        require(isUserStakedNft(msg.sender, _nftId), \\\"withdraw:: this nft is not yours\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        LeaseMarket storage leaseMarket = tokenIdLeaseMarket[_nftId];\\n        if (leaseMarket.owner == msg.sender) {\\n            delete tokenIdLeaseMarket[_nftId];\\n            emit UserCancelLeaseBunny(msg.sender, _nftId);\\n        }\\n        harvest(_nftId);\\n        user.amount = user.amount.sub(1);\\n        nftAddress.safeTransferFrom(address(this), address(msg.sender), _nftId);\\n        user.nftIds.remove(_nftId);\\n        emit Withdraw(msg.sender, _nftId);\\n    }\\n\\n    function applyItem(uint256 _nftId) public nonReentrant {\\n        require(isUserStakedNft(msg.sender, _nftId), \\\"applyItem:: this nft is not yours!\\\");\\n        require(rewardToken.balanceOf(msg.sender) >= dripCost, \\\"applyItem:: not enough Pill for DRIP cost!\\\");\\n        ERC20(address(rewardToken)).safeTransferFrom(msg.sender, burnAddress, dripCost);\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(block.number >= user.itemEndBlock[_nftId], \\\"applyItem:: only 1 ecstasy can be used at a time!\\\");\\n        harvest(_nftId);\\n        user.itemEndBlock[_nftId] = block.number + itemEffectBlock;\\n        emit ApplyItem(msg.sender, _nftId, block.number + itemEffectBlock);\\n    }\\n\\n    function batchApplyItem(uint256[] memory _nftIds) public {\\n        for (uint8 i = 0; i < _nftIds.length; i++) {\\n            applyItem(_nftIds[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/FadeAwayBunnyNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\ninterface FadeAwayBunnyNFT is IERC721 {\\n    function bunnies(uint256 _id)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            uint64,\\n            uint32,\\n            uint32,\\n            uint16\\n        );\\n\\n    function createFadeAwayBunny(\\n        uint256 _matronId,\\n        uint256 _sireId,\\n        uint256 _generation,\\n        bytes32 _genes,\\n        address _owner\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/GatchaItem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\ninterface GatchaItem is IERC1155 {\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/GeneScienceInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n\\nabstract contract GeneScienceInterface {\\n    /// @dev simply a boolean to indicate this is the contract we expect to be\\n    function isGeneScience() public pure virtual returns (bool);\\n\\n    /// @dev given genes of kitten 1 & 2, return a genetic combination - may have a random factor\\n    /// @param genes1 genes of mom\\n    /// @param genes2 genes of sire\\n    /// @return the genes that are supposed to be passed down the child\\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public virtual returns (bytes32);\\n\\n    function randomGenes(uint256 lastBlock) public virtual returns (bytes32);\\n}\"\r\n    },\r\n    \"src/interfaces/IPillToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IPillToken is IERC20 {\\n    function mint(address _user, uint256 _amount) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPillToken\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract FadeAwayBunnyNFT\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"contract GatchaItem\",\"name\":\"_gatchaItem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_finalRewardBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemExpireBlock\",\"type\":\"uint256\"}],\"name\":\"ApplyItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rentedBunnyOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bunnyId1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bunnyId2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isRentedBunny\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"UserBreedBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"UserBuyGatchaItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"UserCancelLeaseBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bunnyId1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"UserGatchaBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bunnyId1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bunnyId2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_childrenBunnyId\",\"type\":\"uint256\"}],\"name\":\"UserGiveBirth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"UserLeaseBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"UserRentBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"UserRentExtensionBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"applyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"batchApplyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"batchHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breedCostPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bunnyId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bunnyId2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useNyanKee\",\"type\":\"bool\"}],\"name\":\"breedingWithBunnies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bunnyId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentedBunnyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useNyanKee\",\"type\":\"bool\"}],\"name\":\"breedingWithRentedBunny\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyGatchaItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"canGiveBirth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelLease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"changeGen1Ferdility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_breedCostPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dripCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nyankeeCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gatchaItemPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resetFerdilityCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_turnOnBreedGen1Cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dripRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentFeePercen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPillForStaking\",\"type\":\"uint256\"}],\"name\":\"configCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_applyItem\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bunnyId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bunnyId2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useNyanKee\",\"type\":\"bool\"}],\"name\":\"estimateBreedTimeAndCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"gatchaBunny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"gatchaBunnyWithRandomItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatchaItem\",\"outputs\":[{\"internalType\":\"contract GatchaItem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"internalType\":\"contract GeneScienceInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApliedItemInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFertility\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bunnyId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bunnyId2\",\"type\":\"uint256\"}],\"name\":\"getSuccessRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"giveBirth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToBreedCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"intToSuicideRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isPregnant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"isUserStakedNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemEffectBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"lease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFertility\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPillForStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"contract FadeAwayBunnyNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanKeeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resetFerdility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetFerdilityCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IPillToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalRewardBlock\",\"type\":\"uint256\"}],\"name\":\"setFinalRewardBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GatchaItem\",\"name\":\"_gatchaItem\",\"type\":\"address\"}],\"name\":\"setGatChaItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"suicideRates\",\"type\":\"uint16[]\"}],\"name\":\"setIntToSuicideRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemEffectBlock\",\"type\":\"uint256\"}],\"name\":\"setItemEffectBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemNum\",\"type\":\"uint256\"}],\"name\":\"setItemNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FadeAwayBunnyNFT\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerDay\",\"type\":\"uint256\"}],\"name\":\"setRewardPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPillToken\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdBreedings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bunnyId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bunnyId2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bunnyContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rentedBunnyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestampBreeding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useRyanKee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRentedBunny\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdLeaseMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampRent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usedToBreed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPillClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOnBreedGen1Cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateBunnyRentState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"viewNftRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"viewReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BreedingRouter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000d8cce39be1a3fb15c648dbf13ba4c47b77e1d873000000000000000000000000b49b0a61725a69f36f06c394720dea462e797fb40000000000000000000000009044200e0884e4d068a43a3e2a1db0537065284a00000000000000000000000000000000000000000000000000005af3107a3fff", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}