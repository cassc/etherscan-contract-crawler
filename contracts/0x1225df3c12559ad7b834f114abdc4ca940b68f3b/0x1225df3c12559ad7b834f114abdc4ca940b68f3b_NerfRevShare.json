{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/NeRFStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NONE\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\r\\n\\r\\ncontract NerfRevShare is Ownable {\\r\\n    struct StakeInfo {\\r\\n        uint128 stake;\\r\\n        uint64 startTs;\\r\\n        bool claimed;\\r\\n        uint256 totalAddedAtStartStake;\\r\\n        uint256 totalWithdrawnAtStartStake;\\r\\n        \\r\\n    }\\r\\n\\r\\n    struct StakeLevel {\\r\\n        uint64 maxTimeElapsed;\\r\\n        uint64 penalty;\\r\\n    }\\r\\n\\r\\n    IERC20 tok;\\r\\n    IUniswapV2Router02 rtr;\\r\\n    address[] tradePath;\\r\\n    uint256 totalStaked = 0;\\r\\n    uint256 totalAdded = 0;\\r\\n    uint256 totalWithdrawn = 0;\\r\\n    StakeLevel[] public stakeLevels;\\r\\n    bool newStakesEnabled;\\r\\n\\r\\n\\r\\n    mapping (address => StakeInfo[]) stakes;\\r\\n    /// Receive function - swaps ETH for tokens to add to pool.\\r\\n    receive() payable external {\\r\\n        // Allow ETH to be received, but swap to tokens\\r\\n        rtr.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0, tradePath, address(this), block.timestamp);\\r\\n        // Automatically adds to pool, there's nothing else we need to do\\r\\n        processAddedTokens();\\r\\n    }\\r\\n\\r\\n    // Internal correction call that ensures tokens are accounted for\\r\\n    function processAddedTokens() internal {\\r\\n        uint256 bal = tok.balanceOf(address(this));\\r\\n        if ((bal - totalStaked) > (totalAdded - totalWithdrawn)) {\\r\\n            // Correction needs to occur as tokens have been added \\r\\n            totalAdded += (bal - totalStaked) - (totalAdded - totalWithdrawn);\\r\\n        } else if ((bal - totalStaked) < (totalAdded - totalWithdrawn)) {\\r\\n            // Somehow tokens have been withdrawn without tracking, so correct\\r\\n            totalWithdrawn += (totalAdded - totalWithdrawn) - (bal - totalStaked);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    constructor (address stakingToken, address router, address[] memory path) {\\r\\n        tok = IERC20(stakingToken);\\r\\n        rtr = IUniswapV2Router02(router);\\r\\n        tradePath = path;\\r\\n        totalStaked = 0;\\r\\n        // Create default penalty levels\\r\\n        //stakeLevels = new StakeLevel[](3);\\r\\n        stakeLevels.push(StakeLevel(1 weeks, 10000));\\r\\n        stakeLevels.push(StakeLevel(2 weeks, 5000));\\r\\n        stakeLevels.push(StakeLevel(4 weeks, 2500));\\r\\n        newStakesEnabled = false;\\r\\n    }\\r\\n\\r\\n    function setStakeEnabled(bool enabled) external onlyOwner {\\r\\n        newStakesEnabled = enabled;\\r\\n    }\\r\\n\\r\\n    /// Sets a new router. Only callable by owner. \\r\\n    /// @param newRouter the new router address.\\r\\n    function setNewRouter(address newRouter) external onlyOwner {\\r\\n        rtr = IUniswapV2Router02(newRouter);\\r\\n    }\\r\\n    /// Sets a new trade path. Only callable by owner.\\r\\n    /// @param newPath the new trade path.\\r\\n    function setNewTradePath(address[] calldata newPath) external onlyOwner {\\r\\n        tradePath = newPath;\\r\\n    }\\r\\n\\r\\n    function setNewStakeLevels(StakeLevel[] calldata newLevels) external onlyOwner {\\r\\n        // Check the levels are compliant with rules\\r\\n\\r\\n        // You need at least one level\\r\\n        require(newLevels.length > 0, \\\"Not enough levels.\\\");\\r\\n        // Wipe the old levels\\r\\n        delete(stakeLevels);\\r\\n        uint64 maxLevel = 0;\\r\\n        // Penalty is out of 10,000\\r\\n        uint64 maxPenalty = 10001;\\r\\n        for (uint256 i = 0; i < newLevels.length; i++) {\\r\\n            // Check penalties are less and min time elapsed is more\\r\\n            require(newLevels[i].maxTimeElapsed > maxLevel, \\\"Not greater than the last time elapsed.\\\");\\r\\n            require(newLevels[i].penalty < maxPenalty, \\\"Not less than the last penalty.\\\");\\r\\n            maxLevel = newLevels[i].maxTimeElapsed;\\r\\n            maxPenalty = newLevels[i].penalty;\\r\\n            stakeLevels.push(StakeLevel(newLevels[i].maxTimeElapsed, newLevels[i].penalty));\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function transferStake(uint256 stakeId, address recipient) external returns (uint256 recipientStakeId) {\\r\\n        StakeInfo memory stk = stakes[_msgSender()][stakeId];\\r\\n        require(!stk.claimed, \\\"Can't transfer a claimed stake.\\\");\\r\\n        // Set the old stake as claimed\\r\\n        stakes[_msgSender()][stakeId].claimed = true;\\r\\n        // Get the new stake ID\\r\\n        recipientStakeId = stakes[recipient].length;\\r\\n        // Push it\\r\\n        stakes[recipient].push(stk);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// Start a stake.\\r\\n    /// @param amount the amount of tokens to stake\\r\\n    /// @return stakeId the stake ID of the started stake.\\r\\n    function startStake(uint256 amount) external returns (uint256 stakeId) {\\r\\n        processAddedTokens();\\r\\n        require(newStakesEnabled, \\\"No new stakes at this time.\\\");\\r\\n        // Grab the tokens\\r\\n        bool txfer = tok.transferFrom(_msgSender(), address(this), amount);\\r\\n        require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n        // Generate an index\\r\\n        stakeId = stakes[_msgSender()].length;\\r\\n        // Append the stake amount\\r\\n        totalStaked += amount;\\r\\n\\r\\n        stakes[_msgSender()].push(StakeInfo(uint120(amount), uint64(block.timestamp), false, totalAdded, totalWithdrawn));\\r\\n    }\\r\\n\\r\\n\\r\\n    /// Ends a stake, returning the tokens and any rewards (if applicable).\\r\\n    /// @param stakeId the stake ID of the stake to end.\\r\\n    function endStake(uint256 stakeId) external {\\r\\n        processAddedTokens();\\r\\n        // Find the stake\\r\\n        StakeInfo memory stk = stakes[_msgSender()][stakeId];\\r\\n        require(!stk.claimed, \\\"Already claimed.\\\");\\r\\n        // Set BEFORE we do anything else, to prevent re-entrancy\\r\\n        stakes[_msgSender()][stakeId].claimed = true;\\r\\n        // Calculate the rate - if the stake is under a week, they get nothing\\r\\n        uint256 stakedTime = block.timestamp - stk.startTs;\\r\\n        // Is the stake under the first stake level\\r\\n\\r\\n        uint256 stakeShare = (stk.stake * 100000) / totalStaked;\\r\\n        uint256 totalBal = (totalAdded - stk.totalAddedAtStartStake) - (totalWithdrawn - stk.totalWithdrawnAtStartStake);\\r\\n\\r\\n        uint256 fullShare = (stakeShare * totalBal / 100000);\\r\\n        if (stakedTime > stakeLevels[stakeLevels.length-1].maxTimeElapsed) {\\r\\n            // No penalty, so shortcut\\r\\n            bool txfer = tok.transfer(_msgSender(), fullShare + stk.stake);\\r\\n            require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n            totalStaked = totalStaked - stk.stake;\\r\\n            // Do the withdraw\\r\\n            totalWithdrawn += fullShare;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < stakeLevels.length; i++) {\\r\\n            if (stakedTime < stakeLevels[i].maxTimeElapsed) {\\r\\n                // Then apply the stakes penalty\\r\\n                uint256 penalty = (fullShare * stakeLevels[i].penalty) / 10000;\\r\\n                bool txfer = tok.transfer(_msgSender(), fullShare - penalty + stk.stake);\\r\\n                require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n                // This is the same across everything - we have to subtract only the unstake\\r\\n                totalStaked = totalStaked - stk.stake;\\r\\n                totalWithdrawn += (fullShare - penalty);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n     /// Ends a stake, returning the tokens and any rewards (if applicable), and splits the withdraw.\\r\\n    /// @param stakeId the stake ID of the stake to end.\\r\\n    /// @param withdraw2 the second address to withdraw to.\\r\\n    function endStakeLarge(uint256 stakeId, address withdraw2) external {\\r\\n        processAddedTokens();\\r\\n        // Find the stake\\r\\n        StakeInfo memory stk = stakes[_msgSender()][stakeId];\\r\\n        require(!stk.claimed, \\\"Already claimed.\\\");\\r\\n        // Set BEFORE we do anything else, to prevent re-entrancy\\r\\n        stakes[_msgSender()][stakeId].claimed = true;\\r\\n        // Calculate the rate - if the stake is under a week, they get nothing\\r\\n        uint256 stakedTime = block.timestamp - stk.startTs;\\r\\n        // Is the stake under the first stake level\\r\\n\\r\\n        uint256 stakeShare = (stk.stake * 100000) / totalStaked;\\r\\n        uint256 totalBal = (totalAdded - stk.totalAddedAtStartStake) - (totalWithdrawn - stk.totalWithdrawnAtStartStake);\\r\\n\\r\\n        uint256 fullShare = (stakeShare * totalBal / 100000);\\r\\n        if (stakedTime > stakeLevels[stakeLevels.length-1].maxTimeElapsed) {\\r\\n            // No penalty, so shortcut\\r\\n            uint256 amt = (fullShare + stk.stake)/2;\\r\\n            uint256 amt2 = (fullShare + stk.stake) - amt;\\r\\n            bool txfer = tok.transfer(_msgSender(), amt);\\r\\n            require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n            bool txfer2 = tok.transfer(withdraw2, amt2);\\r\\n            require(txfer2, \\\"Failed to transfer tokens.\\\");\\r\\n            totalStaked = totalStaked - stk.stake;\\r\\n            // Do the withdraw\\r\\n            totalWithdrawn += fullShare;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < stakeLevels.length; i++) {\\r\\n            if (stakedTime < stakeLevels[i].maxTimeElapsed) {\\r\\n                // Then apply the stakes penalty\\r\\n                uint256 penalty = (fullShare * stakeLevels[i].penalty) / 10000;\\r\\n                uint256 amt = (fullShare - penalty + stk.stake)/2;\\r\\n                uint256 amt2 = (fullShare - penalty + stk.stake) - amt;\\r\\n                bool txfer = tok.transfer(_msgSender(), amt);\\r\\n                require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n                bool txfer2 = tok.transfer(withdraw2, amt2);\\r\\n                require(txfer2, \\\"Failed to transfer tokens.\\\");\\r\\n                // This is the same across everything - we have to subtract only the unstake\\r\\n                totalStaked = totalStaked - stk.stake;\\r\\n                totalWithdrawn += (fullShare - penalty);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Gets the stake list of an account.\\r\\n    /// @param account the account to get stakes for.\\r\\n    /// @return stakeList the list of stakes.\\r\\n    function getStakesForUser(address account) external view returns (StakeInfo[] memory stakeList) {\\r\\n        stakeList = stakes[account];\\r\\n\\r\\n    }\\r\\n    /// Gets a stake specified by the account and stake ID.\\r\\n    /// @param account the account to get the stake for.\\r\\n    /// @param stakeId the stake ID to get.\\r\\n    /// @return stake the stake.\\r\\n    function getStake(address account, uint256 stakeId) external view returns (StakeInfo memory stake) {\\r\\n        return stakes[account][stakeId];\\r\\n    }\\r\\n\\r\\n    /// Allows backdating of a stake start. Only callable by owner.\\r\\n    /// @param account the account that the stake is for.\\r\\n    /// @param stakeId the stake ID to backdate.\\r\\n    /// @param newTimestamp the timestamp to set as the new stake start.\\r\\n    function overrideStakeTimestamp(address account, uint256 stakeId, uint256 newTimestamp) external onlyOwner { \\r\\n        // Read the stake\\r\\n        StakeInfo memory stk = stakes[account][stakeId];\\r\\n        // Confirm that timestamp is only becoming older\\r\\n        require(stk.startTs > newTimestamp, \\\"Can't set timestamp to be newer than original.\\\");\\r\\n        // Set new timestamp\\r\\n        stk.startTs = uint64(newTimestamp);\\r\\n        // Set the stake back\\r\\n        stakes[account][stakeId] = stk;\\r\\n    }\\r\\n    /// Allows backdating of stake starts. Only callable by owner.\\r\\n    /// @param accounts the list of accounts that the stakes are for.\\r\\n    /// @param stakeIds the stake IDs to backdate.\\r\\n    /// @param newTimestamps the timestamps to set as the new stake starts.\\r\\n    function overrideStakeTimestamps(address[] calldata accounts, uint256[] calldata stakeIds, uint256[] calldata newTimestamps) external onlyOwner {\\r\\n        require(accounts.length == stakeIds.length && accounts.length == newTimestamps.length, \\\"Arrays are incorrect lengths.\\\");\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            StakeInfo memory stk = stakes[accounts[i]][stakeIds[i]];\\r\\n            // Confirm that timestamp is only becoming older\\r\\n            require(stk.startTs > newTimestamps[i], \\\"Can't set timestamp to be newer than original.\\\");\\r\\n            // Set new timestamp\\r\\n            stk.startTs = uint64(newTimestamps[i]);\\r\\n            // Set the stake back\\r\\n            stakes[accounts[i]][stakeIds[i]] = stk;\\r\\n        }\\r\\n    }\\r\\n    /// Internal function for adding tokens to stake. \\r\\n    /// @dev Does not do important checks - only call where checks are done.\\r\\n    /// @param account account stake lookup\\r\\n    /// @param stakeId stake to add to\\r\\n    /// @param bonusAmount amount to add\\r\\n    function addExtraStakeInternal(address account, uint256 stakeId, uint256 bonusAmount) internal {\\r\\n        StakeInfo memory stk = stakes[account][stakeId];\\r\\n        require(!stk.claimed, \\\"Already claimed.\\\");\\r\\n        // Add the bonus in and add to the staked amount\\r\\n        stk.stake = stk.stake + uint128(bonusAmount);\\r\\n        stakes[account][stakeId] = stk;\\r\\n    }\\r\\n    /// Allows adding bonus tokens to a stake. Only callable by owner.\\r\\n    /// @param account the account that the stake is for.\\r\\n    /// @param stakeId the stake ID to add tokens to.\\r\\n    /// @param bonusAmount the amount of tokens to add.\\r\\n    function addStakeBonus(address account, uint256 stakeId, uint256 bonusAmount) external onlyOwner {\\r\\n        bool txfer = tok.transferFrom(_msgSender(), address(this), bonusAmount);\\r\\n        require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n        addExtraStakeInternal(account, stakeId, bonusAmount);\\r\\n        totalStaked += bonusAmount;\\r\\n    }\\r\\n    /// Allows adding bonus tokens to stakes. Only callable by owner.\\r\\n    /// @param accounts the list of accounts that the stakes are for.\\r\\n    /// @param stakeIds the stake IDs to add tokens to.\\r\\n    /// @param bonusAmounts the amounts of tokens to add.\\r\\n    function addStakeBonuses(address[] calldata accounts, uint256[] calldata stakeIds, uint256[] calldata bonusAmounts) external onlyOwner {\\r\\n        require(accounts.length == stakeIds.length && accounts.length == bonusAmounts.length, \\\"Arrays are incorrect lengths.\\\");\\r\\n        uint256 bonusTotal = 0;\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            addExtraStakeInternal(accounts[i], stakeIds[i], bonusAmounts[i]);\\r\\n            bonusTotal += bonusAmounts[i];\\r\\n        }\\r\\n        // Transfer token total at the end\\r\\n        bool txfer = tok.transferFrom(_msgSender(), address(this), bonusTotal);\\r\\n        require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n        totalStaked += bonusTotal;\\r\\n\\r\\n    }\\r\\n    /// Allows adding referral bonus tokens to a stake. Only callable by owner.\\r\\n    /// @param account the account that the stake is for.\\r\\n    /// @param stakeId the stake ID to add tokens to.\\r\\n    /// @param bonusAmount the amount of tokens to add.\\r\\n    function addReferralBonus(address account, uint256 stakeId, uint256 bonusAmount) external onlyOwner {\\r\\n        bool txfer = tok.transferFrom(_msgSender(), address(this), bonusAmount);\\r\\n        require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n        addExtraStakeInternal(account, stakeId, bonusAmount);\\r\\n        totalStaked += bonusAmount;\\r\\n    }\\r\\n    /// Allows adding referral bonus tokens to stakes. Only callable by owner.\\r\\n    /// @param accounts the list of accounts that the stakes are for.\\r\\n    /// @param stakeIds the stake IDs to add tokens to.\\r\\n    /// @param bonusAmounts the amounts of tokens to add.\\r\\n    function addReferralBonuses(address[] calldata accounts, uint256[] calldata stakeIds, uint256[] calldata bonusAmounts) external onlyOwner {\\r\\n        require(accounts.length == stakeIds.length && accounts.length == bonusAmounts.length, \\\"Arrays are incorrect lengths.\\\");\\r\\n        uint256 bonusTotal = 0;\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            addExtraStakeInternal(accounts[i], stakeIds[i], bonusAmounts[i]);\\r\\n            bonusTotal += bonusAmounts[i];\\r\\n        }\\r\\n        // Transfer token total at the end\\r\\n        bool txfer = tok.transferFrom(_msgSender(), address(this), bonusTotal);\\r\\n        require(txfer, \\\"Failed to transfer tokens.\\\");\\r\\n        totalStaked += bonusTotal;\\r\\n\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"addReferralBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bonusAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addReferralBonuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"addStakeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bonusAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addStakeBonuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"endStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"withdraw2\",\"type\":\"address\"}],\"name\":\"endStakeLarge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"stake\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startTs\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalAddedAtStartStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawnAtStartStake\",\"type\":\"uint256\"}],\"internalType\":\"struct NerfRevShare.StakeInfo\",\"name\":\"stake\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakesForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"stake\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startTs\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalAddedAtStartStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawnAtStartStake\",\"type\":\"uint256\"}],\"internalType\":\"struct NerfRevShare.StakeInfo[]\",\"name\":\"stakeList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"overrideStakeTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"overrideStakeTimestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"maxTimeElapsed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"penalty\",\"type\":\"uint64\"}],\"internalType\":\"struct NerfRevShare.StakeLevel[]\",\"name\":\"newLevels\",\"type\":\"tuple[]\"}],\"name\":\"setNewStakeLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newPath\",\"type\":\"address[]\"}],\"name\":\"setNewTradePath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setStakeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLevels\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"maxTimeElapsed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"penalty\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"startStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"recipientStakeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NerfRevShare", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000af8942831f3a096f708b8b31f191b8958cf176c50000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000af8942831f3a096f708b8b31f191b8958cf176c5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}