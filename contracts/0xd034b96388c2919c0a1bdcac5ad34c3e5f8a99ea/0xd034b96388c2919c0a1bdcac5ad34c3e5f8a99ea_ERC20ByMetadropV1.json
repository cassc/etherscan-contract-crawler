{"SourceCode": "// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MM                                                                                                                                                            MM\r\n// MM   ^                                    #####  #####   ####       # ######  ####  #####    #      # #    # #    #  ####                                     MM\r\n// MM   |                                    #    # #    # #    #      # #      #    #   #      #      # ##   # #   #  #                                         MM\r\n// MM   |                                    #    # #    # #    #      # #####  #        #      #      # # #  # ####    ####                                     MM\r\n// MM   ^                                    #####  #####  #    #      # #      #        #      #      # #  # # #  #        #                                    MM\r\n// MM   |                                    #      #   #  #    # #    # #      #    #   #      #      # #   ## #   #  #    #                                    MM\r\n// MM   |                                    #      #    #  ####   ####  ######  ####    #      ###### # #    # #    #  ####                                     MM\r\n// MM   ^                                                                                                                                                        MM\r\n// MM   |                                                                                                                                                        MM\r\n// MM   |________ Click 'Read Contract', then select:                                                                                                            MM\r\n// MM                * _1___website                                                                                                                              MM\r\n// MM                * _2___twitter (or X...)                                                                                                                    MM\r\n// MM                * _3___telegram                                                                                                                             MM\r\n// MM                * _4___discord                                                                                                                              MM\r\n// MM                                                                                                                                                            MM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXKXWMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0dccdKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:,;dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc,.,xNMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo;..  .oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOo;..   .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:..    ;KMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl,.      .lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl,..      .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOo;..       ;KMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc'.         .lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl,.          .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl,.           ;KMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:'.            .lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc'.             .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc'.              ;KMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:..               .lNMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:..                .kMMMMMMMMMMMMMMMMMMMMMMMMMWKxc'.                 ;KMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo;..                  .lNMMMMMMMMMMMMMMMMMMMMMMNOxo;..                   .kMMMMMMMMMMMMMMMMMMMMMMN0d:..                    ;KMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMWXkl,.                      .lNMMMMMMMMMMMMMMMMMMWXOo,...                      .kMMMMMMMMMMMMMMMMMMMNOo;..                       ;KMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMWKxc'.                         .lNMMMMMMMMMMMMMMMWXkl,.                           .kMMMMMMMMMMMMMMMWXkl,.                           ;KMMMM\r\n// MMMMMMMMMMMMMMMMMMMW0d:'.                            .lNMMMMMMMMMMMMWKxc'.                              .kMMMMMMMMMMMMWKkc'.                              ;KMMMM\r\n// MMMMMMMMMMMMMMMMN0d:..                               .cXMMMMMMMMMN0d:..                                 .oWMMMMMMMMWKxc'.                                 ;KMMMM\r\n// MMMMMMMMMMMMWNOo;..                                   .lKWMMMWNOo;..                                     .oKWMMWN0d:..                                    ;KMMMM\r\n// MMMMMMMMMWXkl,.                                        .'codol,..                                         ..;clc,..                                       ;KMMMM\r\n// MMMMMMWKxc'.                                                                                                                                              :XMMMM\r\n// MMMMXxc'.                                                                                                                                                'kWMMMM\r\n// MMW0:.                                                                                                                                                ..:OWMMMMM\r\n// MMK:.                                                                                                                                              ..;o0NMMMMMMM\r\n// MMO'                                         .....                                             ..''..                                           ..:d0NMMMMMMMMMM\r\n// MMO'                                     ..,lxO0Oxc..                                       .'cx0XXKkc..                                     .'cxKWMMMMMMMMMMMMM\r\n// MMO'                                  ..;oOXWMMMMMWO,                                   ..,lkXWMMMMMMWx.                                  .,lkXWMMMMMMMMMMMMMMMM\r\n// MMO'                               ..:d0NMMMMMMMMMMNo.                               ..;oONWMMMMMMMMMMK;                               .,oOXWMMMMMMMMMMMMMMMMMMM\r\n// MMO'                            ..:d0NMMMMMMMMMMMMMWo.                            ..:d0NMMMMMMMMMMMMMMX:                           ..;oONMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMO'                         .'cxKWMMMMMMMMMMMMMMMMWo.                        .';cxKWMMMMMMMMMMMMMMMMMX:                        ..:d0NMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMO'                      .,lkXWMMMMMMMMMMMMMMMMMMMWo.                     .,ckKNWMMMMMMMMMMMMMMMMMMMMX:                     .'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMO'                  ..;oOXMMMMMMMMMMMMMMMMMMMMMMMWo.                 ..,lkXWMMMMMMMMMMMMMMMMMMMMMMMMX:                  .,lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMO'               ..:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMWo.              ..;oONWMMMMMMMMMMMMMMMMMMMMMMMMMMMX:              ..,oOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMO'            ..:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo.           ..:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:           ..;oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMO'         .'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo.        .'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:        ..:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMO'      .,lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo.     .'ckKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:     .'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MM0,  ..;oOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk'. .,lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd...,lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMW0dld0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0xxONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMWX00000XWMMMMMMWX00000KWMNK000000000000KWNK0000000000000KXWMMWX0000KNMMMMMMMNKK00000000KKNWMMMMMWX000000000KKXWMMMMMMMMMWXK0OO0KXWMMMMMMNK000000000KXNMMMMMMM\r\n// MMMK:..''.;OMMMMMMK:..'..;0M0;............:00;..............oNMWO;.''..lXMMMMMWd'..........',:d0WMMNl...........':dKMMMMNOo;'......';oONMMMO;..........';lOWMMMM\r\n// MMMK; .;;..cXMMMMNo..,;. 'OMO' .,looooooookXXxooooc. .,looodOWM0;..:o' .oNMMMMWo.. .:oooooo:'. .lXMXc. .cdddddo:. .;0MW0:...;lddddl;...:OWMO' .,loooool,. .dNMMM\r\n// MMMK;  :d, .xWMMMO, .dc. 'OMO' .lNMMMMMMMMMMMMMMMMO' .lNMMMMMMXc. 'kNo. .xWMMMWo.. .kMMMMMMWKl. .lNXc. ,0MMMMMMNo. .xWO,..;kNMMMMMMNk;. 'kWO' .lNMMMMMM0,  ;KMMM\r\n// MMMK;  :0o. ;KMMXc..cKl. 'OMO' .'looooooo0MMMMMMMMO' .lNMMMMMNo. .dWMK:. 'OMMMWo.. .kMMMMMMMMX:. ,OXc. 'xXKXXK0d,..:0Nl. 'kMMMMMMMMMMO' .cXO' .cKXXXXX0o. .lXMMM\r\n// MMMK;  :XK: .oNWx. ,ONl. 'OMO'  .''''''',xWMMMMMMMO' .lNMMMMWx. .:0NNNk' .;0MMWo.. .kMMMMMMMMNl. 'OXc. ..........:xXMXc. ,0MMMMMMMMMM0;  :XO'  .'''''....'oXMMMM\r\n// MMMK;  :XWx. ,OK:..oNNl. 'OMO' .cKXXXXXXXWMMMMMMMMO' .lNMMMWO,  ..,,,,,.  .cXMWo.. .kMMMMMMMWk, .:KXc. .:ooool:..;oKMWd. .lXMMMMMMMMNo. .oWO' .,looooooxOXWMMMMM\r\n// MMMK;  :KMXl..co..:KMNl. 'OMO' .:0KKKKKKKKXWMMMMMMO' .lNMMMK:. .:ccccccc,. .oNWo.. .oKKKKK0kl'..,OWXc. ,0MMMMMNx. .cXMXo. .;d0XXXX0x:. .lXMO' .lNMMMMMMMMMMMMMMM\r\n// MMMK;  :XMMO, ....kWMNl. 'OMO'  ..........:KMMMMMMO' .lNMMXc. .oNMMMMMMMK:. .xNo.. ...........,oKWMXc. ,0MMMMMMXc. .dNMWOc'....''....'cONMMk' .lNMMMMMMMMMMMMMMM\r\n// MMMNkookNMMWOooookNMMWOooxXMXxooooooooooooxXMMMMMMXxooOWMMKdooxXMMMMMMMMM0dookN0doloooooooodx0NWMMMWOooxXMMMMMMMKdookNMMMWXOxolcclodOXWMMMMXdooOWMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n\r\n// SPDX-License-Identifier: BUSL 1.0\r\n// Metadrop Contracts (v2.1.0)\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableMap.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * The following map types are supported:\r\n *\r\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\r\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\r\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\r\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\r\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableMap.\r\n * ====\r\n */\r\nlibrary EnumerableMap {\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct Bytes32ToBytes32Map {\r\n        // Storage of keys\r\n        EnumerableSet.Bytes32Set _keys;\r\n        mapping(bytes32 => bytes32) _values;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\r\n        map._values[key] = value;\r\n        return map._keys.add(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\r\n        delete map._values[key];\r\n        return map._keys.remove(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\r\n        return map._keys.contains(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\r\n        return map._keys.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of entries inside the\r\n     * array, and it may change when more entries are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\r\n        bytes32 key = map._keys.at(index);\r\n        return (key, map._values[key]);\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`. O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\r\n        bytes32 value = map._values[key];\r\n        if (value == bytes32(0)) {\r\n            return (contains(map, key), bytes32(0));\r\n        } else {\r\n            return (true, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`. O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\r\n        bytes32 value = map._values[key];\r\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(\r\n        Bytes32ToBytes32Map storage map,\r\n        bytes32 key,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes32) {\r\n        bytes32 value = map._values[key];\r\n        require(value != 0 || contains(map, key), errorMessage);\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the an array containing all the keys\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\r\n        return map._keys.values();\r\n    }\r\n\r\n    // UintToUintMap\r\n\r\n    struct UintToUintMap {\r\n        Bytes32ToBytes32Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\r\n        return set(map._inner, bytes32(key), bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\r\n        return remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\r\n        return contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToUintMap storage map) internal view returns (uint256) {\r\n        return length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the element stored at position `index` in the map. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\r\n        (bytes32 key, bytes32 value) = at(map._inner, index);\r\n        return (uint256(key), uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`. O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\r\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\r\n        return (success, uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`. O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\r\n        return uint256(get(map._inner, bytes32(key)));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\r\n        return uint256(get(map._inner, bytes32(key), errorMessage));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the an array containing all the keys\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = keys(map._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Bytes32ToBytes32Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the element stored at position `index` in the map. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = at(map._inner, index);\r\n        return (uint256(key), address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`. O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\r\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\r\n        return (success, address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`. O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(\r\n        UintToAddressMap storage map,\r\n        uint256 key,\r\n        string memory errorMessage\r\n    ) internal view returns (address) {\r\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the an array containing all the keys\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = keys(map._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressToUintMap\r\n\r\n    struct AddressToUintMap {\r\n        Bytes32ToBytes32Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\r\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\r\n        return remove(map._inner, bytes32(uint256(uint160(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\r\n        return contains(map._inner, bytes32(uint256(uint160(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\r\n        return length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the element stored at position `index` in the map. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\r\n        (bytes32 key, bytes32 value) = at(map._inner, index);\r\n        return (address(uint160(uint256(key))), uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`. O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\r\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\r\n        return (success, uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`. O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\r\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(\r\n        AddressToUintMap storage map,\r\n        address key,\r\n        string memory errorMessage\r\n    ) internal view returns (uint256) {\r\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the an array containing all the keys\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\r\n        bytes32[] memory store = keys(map._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Bytes32ToUintMap\r\n\r\n    struct Bytes32ToUintMap {\r\n        Bytes32ToBytes32Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\r\n        return set(map._inner, key, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\r\n        return remove(map._inner, key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\r\n        return contains(map._inner, key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\r\n        return length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the element stored at position `index` in the map. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\r\n        (bytes32 key, bytes32 value) = at(map._inner, index);\r\n        return (key, uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`. O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\r\n        (bool success, bytes32 value) = tryGet(map._inner, key);\r\n        return (success, uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`. O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\r\n        return uint256(get(map._inner, key));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(\r\n        Bytes32ToUintMap storage map,\r\n        bytes32 key,\r\n        string memory errorMessage\r\n    ) internal view returns (uint256) {\r\n        return uint256(get(map._inner, key, errorMessage));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the an array containing all the keys\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = keys(map._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/ERC20FactoryV1/ERC20/IERC20ConfigByMetadropV1.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n\r\n/**\r\n *\r\n * @title IERC20ByMetadrop.sol. Interface for metadrop ERC20 standard\r\n *\r\n * @author metadrop https://metadrop.com/\r\n *\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20ConfigByMetadropV1 {\r\n  struct ERC20Config {\r\n    bytes baseParameters;\r\n    bytes supplyParameters;\r\n    bytes taxParameters;\r\n  }\r\n\r\n  struct ERC20BaseParameters {\r\n    string name;\r\n    string symbol;\r\n    string website;\r\n    string twitter;\r\n    string telegram;\r\n    string otherSocials;\r\n  }\r\n\r\n  struct ERC20SupplyParameters {\r\n    uint256 maxSupply;\r\n    uint256 lpSupply;\r\n    uint256 projectSupply;\r\n    uint256 maxTokensPerWallet;\r\n    uint256 maxTokensPerTxn;\r\n    uint256 lpLockupInDays;\r\n    bool addLiquidityOnCreate;\r\n    address projectTreasury;\r\n    address metadropTreasury;\r\n  }\r\n\r\n  struct ERC20TaxParameters {\r\n    uint256 projectBuyTaxBasisPoints;\r\n    uint256 projectSellTaxBasisPoints;\r\n    uint256 maxProjectBuyTaxBasisPoints;\r\n    uint256 maxProjectSellTaxBasisPoints;\r\n    uint256 taxSwapThresholdBasisPoints;\r\n    uint256 metadropBuyTaxBasisPoints;\r\n    uint256 metadropSellTaxBasisPoints;\r\n    uint256 maxMetadropBuyTaxBasisPoints;\r\n    uint256 maxMetadropSellTaxBasisPoints;\r\n    uint256 metadropTaxPeriodInDays;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/Global/IConfigStructures.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n\r\n/**\r\n *\r\n * @title IConfigStructures.sol. Interface for common config structures used accross the platform\r\n *\r\n * @author metadrop https://metadrop.com/\r\n *\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IConfigStructures {\r\n  enum DropStatus {\r\n    approved,\r\n    deployed,\r\n    cancelled\r\n  }\r\n\r\n  enum TemplateStatus {\r\n    live,\r\n    terminated\r\n  }\r\n\r\n  // The current status of the mint:\r\n  //   - notEnabled: This type of mint is not part of this drop\r\n  //   - notYetOpen: This type of mint is part of the drop, but it hasn't started yet\r\n  //   - open: it's ready for ya, get in there.\r\n  //   - finished: been and gone.\r\n  //   - unknown: theoretically impossible.\r\n  enum MintStatus {\r\n    notEnabled,\r\n    notYetOpen,\r\n    open,\r\n    finished,\r\n    unknown\r\n  }\r\n\r\n  struct SubListConfig {\r\n    uint256 start;\r\n    uint256 end;\r\n    uint256 phaseMaxSupply;\r\n  }\r\n\r\n  struct PrimarySaleModuleInstance {\r\n    address instanceAddress;\r\n    string instanceDescription;\r\n  }\r\n\r\n  struct NFTModuleConfig {\r\n    uint256 templateId;\r\n    bytes configData;\r\n    bytes vestingData;\r\n  }\r\n\r\n  struct PrimarySaleModuleConfig {\r\n    uint256 templateId;\r\n    bytes configData;\r\n  }\r\n\r\n  struct ProjectBeneficiary {\r\n    address payable payeeAddress;\r\n    uint256 payeeShares;\r\n  }\r\n\r\n  struct VestingConfig {\r\n    uint256 start;\r\n    uint256 projectUpFrontShare;\r\n    uint256 projectVestedShare;\r\n    uint256 vestingPeriodInDays;\r\n    uint256 vestingCliff;\r\n    ProjectBeneficiary[] projectPayees;\r\n  }\r\n\r\n  struct RoyaltySplitterModuleConfig {\r\n    uint256 templateId;\r\n    bytes configData;\r\n  }\r\n\r\n  struct InLifeModuleConfig {\r\n    uint256 templateId;\r\n    bytes configData;\r\n  }\r\n\r\n  struct InLifeModules {\r\n    InLifeModuleConfig[] modules;\r\n  }\r\n\r\n  struct NFTConfig {\r\n    uint256 supply;\r\n    string name;\r\n    string symbol;\r\n    bytes32 positionProof;\r\n    bool includePriorPhasesInMintTracking;\r\n    bool singleMetadataCollection;\r\n    uint256 reservedAllocation;\r\n    uint256 assistanceRequestWindowInSeconds;\r\n  }\r\n\r\n  struct Template {\r\n    TemplateStatus status;\r\n    uint16 templateNumber;\r\n    uint32 loadedDate;\r\n    address payable templateAddress;\r\n    string templateDescription;\r\n  }\r\n\r\n  struct RoyaltyDetails {\r\n    address newRoyaltyPaymentSplitterInstance;\r\n    uint96 royaltyFromSalesInBasisPoints;\r\n  }\r\n\r\n  struct SignedDropMessageDetails {\r\n    uint256 messageTimeStamp;\r\n    bytes32 messageHash;\r\n    bytes messageSignature;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/ERC20FactoryV1/ERC20/IERC20ByMetadropV1.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Metadrop core ERC-20 contract, interface\r\n */\r\ninterface IERC20ByMetadropV1 is\r\n  IERC20,\r\n  IERC20ConfigByMetadropV1,\r\n  IERC20Metadata,\r\n  IConfigStructures\r\n{\r\n  struct SocialLinks {\r\n    string linkType;\r\n    string link;\r\n  }\r\n\r\n  event AutoSwapThresholdUpdated(uint256 oldThreshold, uint256 newThreshold);\r\n\r\n  event ProjectTaxBasisPointsChanged(\r\n    uint256 oldBuyBasisPoints,\r\n    uint256 newBuyBasisPoints,\r\n    uint256 oldSellBasisPoints,\r\n    uint256 newSellBasisPoints\r\n  );\r\n\r\n  event MetadropTaxBasisPointsChanged(\r\n    uint256 oldBuyBasisPoints,\r\n    uint256 newBuyBasisPoints,\r\n    uint256 oldSellBasisPoints,\r\n    uint256 newSellBasisPoints\r\n  );\r\n\r\n  event LiquidityPoolCreated(address addedPool);\r\n\r\n  event LiquidityPoolAdded(address addedPool);\r\n\r\n  event LiquidityPoolRemoved(address removedPool);\r\n\r\n  event InitialLiquidityAdded(uint256 tokenA, uint256 tokenB, uint256 lpToken);\r\n\r\n  event LiquidityLocked();\r\n\r\n  event RevenueAutoSwap();\r\n\r\n  event SetLimitsEnabled(bool enabled);\r\n\r\n  event TreasuryUpdated(address treasury);\r\n\r\n  event UnlimitedAddressAdded(address addedUnlimted);\r\n\r\n  event UnlimitedAddressRemoved(address removedUnlimted);\r\n\r\n  /**\r\n   * @dev function {addInitialLiquidity}\r\n   *\r\n   * Add initial liquidity to the uniswap pair\r\n   *\r\n   * @param lockerFee_ The locker fee in wei. This must match the required fee from the external locker contract.\r\n   */\r\n  function addInitialLiquidity(uint256 lockerFee_) external payable;\r\n\r\n  /**\r\n   * @dev function {isLiquidityPool}\r\n   *\r\n   * Return if an address is a liquidity pool\r\n   *\r\n   * @param queryAddress_ The address being queried\r\n   * @return bool The address is / isn't a liquidity pool\r\n   */\r\n  function isLiquidityPool(address queryAddress_) external view returns (bool);\r\n\r\n  /**\r\n   * @dev function {addLiquidityPool} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to add a liquidity pool to the pool enumerable set\r\n   *\r\n   * @param newLiquidityPool_ The address of the new liquidity pool\r\n   */\r\n  function addLiquidityPool(address newLiquidityPool_) external;\r\n\r\n  /**\r\n   * @dev function {removeLiquidityPool} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to remove a liquidity pool\r\n   *\r\n   * @param removedLiquidityPool_ The address of the old removed liquidity pool\r\n   */\r\n  function removeLiquidityPool(address removedLiquidityPool_) external;\r\n\r\n  /**\r\n   * @dev function {isUnlimited}\r\n   *\r\n   * Return if an address is unlimited (is not subject to per txn and per wallet limits)\r\n   *\r\n   * @param queryAddress_ The address being queried\r\n   * @return bool The address is / isn't unlimited\r\n   */\r\n  function isUnlimited(address queryAddress_) external view returns (bool);\r\n\r\n  /**\r\n   * @dev function {addUnlimited} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to add an unlimited address\r\n   *\r\n   * @param newUnlimited_ The address of the new unlimited address\r\n   */\r\n  function addUnlimited(address newUnlimited_) external;\r\n\r\n  /**\r\n   * @dev function {removeUnlimited} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to remove an unlimited address\r\n   *\r\n   * @param removedUnlimited_ The address of the old removed unlimited address\r\n   */\r\n  function removeUnlimited(address removedUnlimited_) external;\r\n\r\n  /**\r\n   * @dev function {setLimitsEnabledStatus} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to enable / disable tokens per txn and per holder validation.\r\n   *\r\n   * @param enabled_ Should limits be on?\r\n   */\r\n  function setLimitsEnabledStatus(bool enabled_) external;\r\n\r\n  /**\r\n   * @dev function {setProjectTreasury} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to set the treasury address\r\n   *\r\n   * @param projectTreasury_ New treasury address\r\n   */\r\n  function setProjectTreasury(address projectTreasury_) external;\r\n\r\n  /**\r\n   * @dev function {setSwapThresholdBasisPoints} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to set the autoswap threshold\r\n   *\r\n   * @param swapThresholdBasisPoints_ New swap threshold in basis points\r\n   */\r\n  function setSwapThresholdBasisPoints(\r\n    uint16 swapThresholdBasisPoints_\r\n  ) external;\r\n\r\n  /**\r\n   * @dev function {withdrawETH} onlyOwner\r\n   *\r\n   * Allows the owner to withdraw ETH\r\n   *\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawETH(uint256 amount_) external;\r\n\r\n  /**\r\n   * @dev function {withdrawERC20} onlyOwner\r\n   *\r\n   * A withdraw function to allow ERC20s to be withdrawn.\r\n   *\r\n   * @param token_ The address of the token being withdrawn\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\r\n\r\n  /**\r\n   * @dev function {setProjectTaxRates} onlyTaxAdmin\r\n   *\r\n   * Change the tax rates, subject to max rate\r\n   *\r\n   * @param newProjectBuyTaxBasisPoints_ The new buy tax rate\r\n   * @param newProjectSellTaxBasisPoints_ The new sell tax rate\r\n   */\r\n  function setProjectTaxRates(\r\n    uint16 newProjectBuyTaxBasisPoints_,\r\n    uint16 newProjectSellTaxBasisPoints_\r\n  ) external;\r\n\r\n  /**\r\n   * @dev function {setMetadropTaxRates} onlyTaxAdmin\r\n   *\r\n   * Change the tax rates, subject to max rate and minimum tax period.\r\n   *\r\n   * @param newMetadropBuyTaxBasisPoints_ The new buy tax rate\r\n   * @param newMetadropSellTaxBasisPoints_ The new sell tax rate\r\n   */\r\n  function setMetadropTaxRates(\r\n    uint16 newMetadropBuyTaxBasisPoints_,\r\n    uint16 newMetadropSellTaxBasisPoints_\r\n  ) external;\r\n}\r\n\r\n\r\n// File contracts/Global/IErrors.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n\r\n/**\r\n *\r\n * @title IErrors.sol. Interface for error definitions used across the platform\r\n *\r\n * @author metadrop https://metadrop.com/\r\n *\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IErrors {\r\n  enum BondingCurveErrorType {\r\n    OK, //                                                  No error\r\n    INVALID_NUMITEMS, //                                    The numItem value is 0\r\n    SPOT_PRICE_OVERFLOW //                                  The updated spot price doesn't fit into 128 bits\r\n  }\r\n\r\n  error AdapterParamsMustBeEmpty(); //                      The adapter parameters on this LZ call must be empty.\r\n\r\n  error AddressAlreadySet(); //                             The address being set can only be set once, and is already non-0.\r\n\r\n  error AllowanceDecreasedBelowZero(); //                   You cannot decrease the allowance below zero.\r\n\r\n  error AlreadyInitialised(); //                            The contract is already initialised: it cannot be initialised twice!\r\n\r\n  error ApprovalCallerNotOwnerNorApproved(); //             The caller must own the token or be an approved operator.\r\n\r\n  error ApproveFromTheZeroAddress(); //                     Approval cannot be called from the zero address (indeed, how have you??).\r\n\r\n  error ApproveToTheZeroAddress(); //                       Approval cannot be given to the zero address.\r\n\r\n  error ApprovalQueryForNonexistentToken(); //              The token does not exist.\r\n\r\n  error AuctionStatusIsNotEnded(); //                       Throw if the action required the auction to be closed, and it isn't.\r\n\r\n  error AuctionStatusIsNotOpen(); //                        Throw if the action requires the auction to be open, and it isn't.\r\n\r\n  error AuxCallFailed(\r\n    address[] modules,\r\n    uint256 value,\r\n    bytes data,\r\n    uint256 txGas\r\n  ); //                                                     An auxilliary call from the drop factory failed.\r\n\r\n  error BalanceQueryForZeroAddress(); //                    Cannot query the balance for the zero address.\r\n\r\n  error BidMustBeBelowTheFloorWhenReducingQuantity(); //    Only bids that are below the floor can reduce the quantity of the bid.\r\n\r\n  error BidMustBeBelowTheFloorForRefundDuringAuction(); //  Only bids that are below the floor can be refunded during the auction.\r\n\r\n  error BondingCurveError(BondingCurveErrorType error); //  An error of the type specified has occured in bonding curve processing.\r\n\r\n  error BurnExceedsBalance(); //                            The amount you have selected to burn exceeds the addresses balance.\r\n\r\n  error BurnFromTheZeroAddress(); //                        Tokens cannot be burned from the zero address. (Also, how have you called this!?!)\r\n\r\n  error CallerIsNotFactory(); //                            The caller of this function must match the factory address in storage.\r\n\r\n  error CallerIsNotFactoryOrProjectOwner(); //              The caller of this function must match the factory address OR project owner address.\r\n\r\n  error CallerIsNotTheOwner(); //                           The caller is not the owner of this contract.\r\n\r\n  error CallerIsNotTheTaxAdmin(); //                        The caller is not the tax admin of this contract.\r\n\r\n  error CallerMustBeLzApp(); //                             The caller must be an LZ application.\r\n\r\n  error CallerIsNotPlatformAdmin(address caller); //        The caller of this function must be part of the platformAdmin group.\r\n\r\n  error CallerIsNotSuperAdmin(address caller); //           The caller of this function must match the superAdmin address in storage.\r\n\r\n  error CannotSetNewOwnerToTheZeroAddress(); //             You can't set the owner of this contract to the zero address (address(0)).\r\n\r\n  error CannotSetToZeroAddress(); //                        The corresponding address cannot be set to the zero address (address(0)).\r\n\r\n  error CannotSetNewTaxAdminToTheZeroAddress(); //          Cannot transfer the tax admin to the zero address (address(0)).\r\n\r\n  error CollectionAlreadyRevealed(); //                     The collection is already revealed; you cannot call reveal again.\r\n\r\n  error ContractIsPaused(); //                              The call requires the contract to be unpaused, and it is paused.\r\n\r\n  error ContractIsNotPaused(); //                           The call required the contract to be paused, and it is NOT paused.\r\n\r\n  error DecreasedAllowanceBelowZero(); //                   The request would decrease the allowance below zero, and that is not allowed.\r\n\r\n  error DestinationIsNotTrustedSource(); //                 The destination that is being called through LZ has not been set as trusted.\r\n\r\n  error GasLimitIsTooLow(); //                              The gas limit for the LayerZero call is too low.\r\n\r\n  error IncorrectConfirmationValue(); //                    You need to enter the right confirmation value to call this funtion (usually 69420).\r\n\r\n  error IncorrectPayment(); //                              The function call did not include passing the correct payment.\r\n\r\n  error InitialLiquidityAlreadyAdded(); //                  Initial liquidity has already been added. You can't do it again.\r\n\r\n  error InsufficientAllowance(); //                         There is not a high enough allowance for this operation.\r\n\r\n  error InvalidAdapterParams(); //                          The current adapter params for LayerZero on this contract won't work :(.\r\n\r\n  error InvalidAddress(); //                                An address being processed in the function is not valid.\r\n\r\n  error InvalidEndpointCaller(); //                         The calling address is not a valid LZ endpoint. The LZ endpoint was set at contract creation\r\n  //                                                        and cannot be altered after. Check the address LZ endpoint address on the contract.\r\n\r\n  error InvalidMinGas(); //                                 The minimum gas setting for LZ in invalid.\r\n\r\n  error InvalidOracleSignature(); //                        The signature provided with the contract call is not valid, either in format or signer.\r\n\r\n  error InvalidPayload(); //                                The LZ payload is invalid\r\n\r\n  error InvalidReceiver(); //                               The address used as a target for funds is not valid.\r\n\r\n  error InvalidSourceSendingContract(); //                  The LZ message is being related from a source contract on another chain that is NOT trusted.\r\n\r\n  error InvalidTotalShares(); //                            Total shares must equal 100 percent in basis points.\r\n\r\n  error ListLengthMismatch(); //                            Two or more lists were compared and they did not match length.\r\n\r\n  error LiquidityPoolMustBeAContractAddress(); //           Cannot add a non-contract as a liquidity pool.\r\n\r\n  error LiquidityPoolCannotBeAddressZero(); //              Cannot add a liquidity pool from the zero address.\r\n\r\n  error LPLockUpMustFitUint96(); //                         LP lockup is held in a uint96, so must fit.\r\n\r\n  error NoTrustedPathRecord(); //                           LZ needs a trusted path record for this to work. What's that, you ask?\r\n\r\n  error MaxBidQuantityIs255(); //                           Validation: as we use a uint8 array to track bid positions the max bid quantity is 255.\r\n\r\n  error MaxPublicMintAllowanceExceeded(\r\n    uint256 requested,\r\n    uint256 alreadyMinted,\r\n    uint256 maxAllowance\r\n  ); //                                                     The calling address has requested a quantity that would exceed the max allowance.\r\n\r\n  error MaxSupplyTooHigh(); //                              Max supply must fit in a uint128.\r\n\r\n  error MaxTokensPerWalletExceeded(); //                    The transfer would exceed the max tokens per wallet limit.\r\n\r\n  error MaxTokensPerTxnExceeded(); //                       The transfer would exceed the max tokens per transaction limit.\r\n\r\n  error MetadataIsLocked(); //                              The metadata on this contract is locked; it cannot be altered!\r\n\r\n  error MetadropFactoryOnlyOncePerReveal(); //              This function can only be called (a) by the factory and, (b) just one time!\r\n\r\n  error MetadropModulesOnly(); //                           Can only be called from a metadrop contract.\r\n\r\n  error MetadropOracleCannotBeAddressZero(); //             The metadrop Oracle cannot be the zero address (address(0)).\r\n\r\n  error MinGasLimitNotSet(); //                             The minimum gas limit for LayerZero has not been set.\r\n\r\n  error MintERC2309QuantityExceedsLimit(); //               The `quantity` minted with ERC2309 exceeds the safety limit.\r\n\r\n  error MintingIsClosedForever(); //                        Minting is, as the error suggests, so over (and locked forever).\r\n\r\n  error MintToZeroAddress(); //                             Cannot mint to the zero address.\r\n\r\n  error MintZeroQuantity(); //                              The quantity of tokens minted must be more than zero.\r\n\r\n  error NewBuyTaxBasisPointsExceedsMaximum(); //            Project owner trying to set the tax rate too high.\r\n\r\n  error NewSellTaxBasisPointsExceedsMaximum(); //           Project owner trying to set the tax rate too high.\r\n\r\n  error NoETHForLiquidityPair(); //                         No ETH has been provided for the liquidity pair.\r\n\r\n  error TaxPeriodStillInForce(); //                         The minimum tax period has not yet expired.\r\n\r\n  error NoPaymentDue(); //                                  No payment is due for this address.\r\n\r\n  error NoRefundForCaller(); //                             Error thrown when the calling address has no refund owed.\r\n\r\n  error NoStoredMessage(); //                               There is no stored message matching the passed parameters.\r\n\r\n  error NoTokenForLiquidityPair(); //                       There is no token to add to the LP.\r\n\r\n  error OperationDidNotSucceed(); //                        The operation failed (vague much?).\r\n\r\n  error OracleSignatureHasExpired(); //                     A signature has been provided but it is too old.\r\n\r\n  error OwnershipNotInitializedForExtraData(); //           The `extraData` cannot be set on an uninitialized ownership slot.\r\n\r\n  error OwnerQueryForNonexistentToken(); //                 The token does not exist.\r\n\r\n  error ParametersDoNotMatchSignedMessage(); //             The parameters passed with the signed message do not match the message itself.\r\n\r\n  error PassedConfigDoesNotMatchApproved(); //              The config provided on the call does not match the approved config.\r\n\r\n  error PauseCutOffHasPassed(); //                          The time period in which we can pause has passed; this contract can no longer be paused.\r\n\r\n  error PaymentMustCoverPerMintFee(); //                    The payment passed must at least cover the per mint fee for the quantity requested.\r\n\r\n  error PermitDidNotSucceed(); //                           The safeERC20 permit failed.\r\n\r\n  error PlatformAdminCannotBeAddressZero(); //              We cannot use the zero address (address(0)) as a platformAdmin.\r\n\r\n  error PlatformTreasuryCannotBeAddressZero(); //           The treasury address cannot be set to the zero address.\r\n\r\n  error ProjectOwnerCannotBeAddressZero(); //               The project owner has to be a non zero address.\r\n\r\n  error ProofInvalid(); //                                  The provided proof is not valid with the provided arguments.\r\n\r\n  error QuantityExceedsRemainingCollectionSupply(); //      The requested quantity would breach the collection supply.\r\n\r\n  error QuantityExceedsRemainingPhaseSupply(); //           The requested quantity would breach the phase supply.\r\n\r\n  error QuantityExceedsMaxPossibleCollectionSupply(); //    The requested quantity would breach the maximum trackable supply\r\n\r\n  error ReferralIdAlreadyUsed(); //                         This referral ID has already been used; they are one use only.\r\n\r\n  error RequestingMoreThanRemainingAllocation(\r\n    uint256 previouslyMinted,\r\n    uint256 requested,\r\n    uint256 remainingAllocation\r\n  ); //                                                     Number of tokens requested for this mint exceeds the remaining allocation (taking the\r\n  //                                                        original allocation from the list and deducting minted tokens).\r\n\r\n  error RoyaltyFeeWillExceedSalePrice(); //                 The ERC2981 royalty specified will exceed the sale price.\r\n\r\n  error ShareTotalCannotBeZero(); //                        The total of all the shares cannot be nothing.\r\n\r\n  error SliceOutOfBounds(); //                              The bytes slice operation was out of bounds.\r\n\r\n  error SliceOverflow(); //                                 The bytes slice operation overlowed.\r\n\r\n  error SuperAdminCannotBeAddressZero(); //                 The superAdmin cannot be the sero address (address(0)).\r\n\r\n  error SupplyTotalMismatch(); //                           The sum of the team supply and lp supply does not match.\r\n\r\n  error SupportWindowIsNotOpen(); //                        The project owner has not requested support within the support request expiry window.\r\n\r\n  error TaxFreeAddressCannotBeAddressZero(); //             A tax free address cannot be address(0)\r\n\r\n  error TemplateCannotBeAddressZero(); //                   The address for a template cannot be address zero (address(0)).\r\n\r\n  error TemplateNotFound(); //                              There is no template that matches the passed template Id.\r\n\r\n  error ThisMintIsClosed(); //                              It's over (well, this mint is, anyway).\r\n\r\n  error TotalSharesMustMatchDenominator(); //               The total of all shares must equal the denominator value.\r\n\r\n  error TransferAmountExceedsBalance(); //                  The transfer amount exceeds the accounts available balance.\r\n\r\n  error TransferCallerNotOwnerNorApproved(); //             The caller must own the token or be an approved operator.\r\n\r\n  error TransferFailed(); //                                The transfer has failed.\r\n\r\n  error TransferFromIncorrectOwner(); //                    The token must be owned by `from`.\r\n\r\n  error TransferToNonERC721ReceiverImplementer(); //        Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n\r\n  error TransferFromZeroAddress(); //                       Cannot transfer from the zero address. Indeed, this surely is impossible, and likely a waste to check??\r\n\r\n  error TransferToZeroAddress(); //                         Cannot transfer to the zero address.\r\n\r\n  error UnrecognisedVRFMode(); //                           Currently supported VRF modes are 0: chainlink and 1: arrng\r\n\r\n  error URIQueryForNonexistentToken(); //                   The token does not exist.\r\n\r\n  error ValueExceedsMaximum(); //                           The value sent exceeds the maximum allowed (super useful explanation huh?).\r\n\r\n  error VRFCoordinatorCannotBeAddressZero(); //             The VRF coordinator cannot be the zero address (address(0)).\r\n}\r\n\r\n\r\n// File contracts/ERC20FactoryV1/ERC20Factory/IERC20FactoryByMetadropV1.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Metadrop ERC-20 factory, interface\r\n */\r\ninterface IERC20FactoryByMetadropV1 is\r\n  IConfigStructures,\r\n  IErrors,\r\n  IERC20ConfigByMetadropV1\r\n{\r\n  event ERC20Created(\r\n    string metaId,\r\n    address indexed deployer,\r\n    address contractInstance,\r\n    string symbol,\r\n    string name\r\n  );\r\n\r\n  /**\r\n   * @dev function {setMetadropOracleAddress} onlyPlatformAdmin\r\n   *\r\n   * Set the metadrop trusted oracle address\r\n   *\r\n   * @param metadropOracleAddress_ Trusted metadrop oracle address\r\n   */\r\n  function setMetadropOracleAddress(address metadropOracleAddress_) external;\r\n\r\n  /**\r\n   * @dev function {setMessageValidityInSeconds} onlyPlatformAdmin\r\n   *\r\n   * Set the validity period of signed messages\r\n   *\r\n   * @param messageValidityInSeconds_ Validity period in seconds for messages signed by the trusted oracle\r\n   */\r\n  function setMessageValidityInSeconds(\r\n    uint256 messageValidityInSeconds_\r\n  ) external;\r\n\r\n  /**\r\n   * @dev function {setPlatformTreasury} onlySuperAdmin\r\n   *\r\n   * Set the address that platform fees will be paid to / can be withdrawn to.\r\n   * Note that this is restricted to the highest authority level, the super\r\n   * admin. Platform admins can trigger a withdrawal to the treasury, but only\r\n   * the default admin can set or alter the treasury address. It is recommended\r\n   * that the default admin is highly secured and restrited e.g. a multi-sig.\r\n   *\r\n   * @param platformTreasury_ New treasury address\r\n   */\r\n  function setPlatformTreasury(address platformTreasury_) external;\r\n\r\n  /**\r\n   * @dev function {withdrawETH} onlyPlatformAdmin\r\n   *\r\n   * A withdraw function to allow ETH to be withdrawn to the treasury\r\n   *\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawETH(uint256 amount_) external;\r\n\r\n  /**\r\n   * @dev function {withdrawERC20} onlyPlatformAdmin\r\n   *\r\n   * A withdraw function to allow ERC20s to be withdrawn to the treasury\r\n   *\r\n   * @param token_ The contract address of the token being withdrawn\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\r\n\r\n  /**\r\n   * @dev function {createERC20}\r\n   *\r\n   * Create an ERC-20\r\n   *\r\n   * @param metaId_ The drop Id being approved\r\n   * @param salt_ Salt for create2\r\n   * @param erc20Config_ ERC20 configuration\r\n   * @param signedMessage_ The signed message object\r\n   * @param lockerFee_ The fee for the unicrypt locker\r\n   * @param deploymentFee_ The fee for deployment, if any\r\n   * @return deployedAddress_ The deployed ERC20 contract address\r\n   */\r\n  function createERC20(\r\n    string calldata metaId_,\r\n    bytes32 salt_,\r\n    ERC20Config calldata erc20Config_,\r\n    SignedDropMessageDetails calldata signedMessage_,\r\n    uint256 lockerFee_,\r\n    uint256 deploymentFee_\r\n  ) external payable returns (address deployedAddress_);\r\n\r\n  /**\r\n   * @dev function {createConfigHash}\r\n   *\r\n   * Create the config hash\r\n   *\r\n   * @param metaId_ The drop Id being approved\r\n   * @param salt_ Salt for create2\r\n   * @param erc20Config_ ERC20 configuration\r\n   * @param messageTimeStamp_ When the message for this config hash was signed\r\n   * @param lockerFee_ The fee for the unicrypt locker\r\n   * @param deploymentFee_ The fee for deployment, if any\r\n   * @param deployer_ Address performing the deployment\r\n   * @return configHash_ The bytes32 config hash\r\n   */\r\n  function createConfigHash(\r\n    string calldata metaId_,\r\n    bytes32 salt_,\r\n    ERC20Config calldata erc20Config_,\r\n    uint256 messageTimeStamp_,\r\n    uint256 lockerFee_,\r\n    uint256 deploymentFee_,\r\n    address deployer_\r\n  ) external pure returns (bytes32 configHash_);\r\n}\r\n\r\n\r\n// File contracts/Global/Revert.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n\r\n/**\r\n *\r\n * @title Revert.sol. For efficient reverts\r\n *\r\n * @author metadrop https://metadrop.com/\r\n *\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Revert {\r\n  /**\r\n   * @dev For more efficient reverts.\r\n   */\r\n  function _revert(bytes4 errorSelector) internal pure {\r\n    assembly {\r\n      mstore(0x00, errorSelector)\r\n      revert(0x00, 0x04)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/Global/OZ/Ownable.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is IErrors, Revert, Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    _checkOwner();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if the sender is not the owner.\r\n   */\r\n  function _checkOwner() internal view virtual {\r\n    if (owner() != _msgSender()) {\r\n      _revert(CallerIsNotTheOwner.selector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby disabling any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    if (newOwner == address(0)) {\r\n      _revert(CannotSetNewOwnerToTheZeroAddress.selector);\r\n    }\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.9.1\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Global/OZ/SafeERC20.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using Address for address;\r\n\r\n  /**\r\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n   * non-reverting calls are assumed to be successful.\r\n   */\r\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n   */\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeCall(token.transferFrom, (from, to, value))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n   * non-reverting calls are assumed to be successful.\r\n   */\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 oldAllowance = token.allowance(address(this), spender);\r\n    forceApprove(token, spender, oldAllowance + value);\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n   * non-reverting calls are assumed to be successful.\r\n   */\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    unchecked {\r\n      uint256 oldAllowance = token.allowance(address(this), spender);\r\n      if (oldAllowance < value) {\r\n        revert IErrors.DecreasedAllowanceBelowZero();\r\n      }\r\n      forceApprove(token, spender, oldAllowance - value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n   * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n   * 0 before setting it to a non-zero value.\r\n   */\r\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n    if (!_callOptionalReturnBool(token, approvalCall)) {\r\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n      _callOptionalReturn(token, approvalCall);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n   * Revert on invalid signature.\r\n   */\r\n  function safePermit(\r\n    IERC20Permit token,\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) internal {\r\n    uint256 nonceBefore = token.nonces(owner);\r\n    token.permit(owner, spender, value, deadline, v, r, s);\r\n    uint256 nonceAfter = token.nonces(owner);\r\n    if (nonceAfter != (nonceBefore + 1)) {\r\n      revert IErrors.PermitDidNotSucceed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data, \"call fail\");\r\n    if ((returndata.length != 0) && !abi.decode(returndata, (bool))) {\r\n      revert IErrors.OperationDidNotSucceed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   *\r\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n   */\r\n  function _callOptionalReturnBool(\r\n    IERC20 token,\r\n    bytes memory data\r\n  ) private returns (bool) {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n    // and not revert is the subcall reverts.\r\n\r\n    (bool success, bytes memory returndata) = address(token).call(data);\r\n    return\r\n      success &&\r\n      (returndata.length == 0 || abi.decode(returndata, (bool))) &&\r\n      address(token).code.length > 0;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/Global/TaxAdmin.sol\r\n\r\n// \r\n// Metadrop Contracts (v2.1.0)\r\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract TaxAdmin is IErrors, Revert, Context {\r\n  address private _taxAdmin;\r\n\r\n  event TaxAdminTransferred(\r\n    address indexed previousTaxAdmin,\r\n    address indexed newTaxAdmin\r\n  );\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the tax admin.\r\n   */\r\n  modifier onlyTaxAdmin() {\r\n    _checkTaxAdmin();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current tax admin.\r\n   */\r\n  function taxAdmin() public view virtual returns (address) {\r\n    return _taxAdmin;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if the sender is not the tax admin.\r\n   */\r\n  function _checkTaxAdmin() internal view virtual {\r\n    if (taxAdmin() != _msgSender()) {\r\n      _revert(CallerIsNotTheTaxAdmin.selector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without a tax admin. It will not be possible to call\r\n   * `onlyTaxAdmin` functions. Can only be called by the current tax admin.\r\n   *\r\n   * NOTE: Renouncing taxAdmin will leave the contract without an tax admim,\r\n   * thereby disabling any functionality that is only available to the tax admin.\r\n   */\r\n  function renounceTaxAdmin() public virtual onlyTaxAdmin {\r\n    _transferTaxAdmin(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the tax admin of the contract to a new account (`newTaxAdmin`).\r\n   * Can only be called by the current tax admin.\r\n   */\r\n  function transferTaxAdmin(address newTaxAdmin) public virtual onlyTaxAdmin {\r\n    if (newTaxAdmin == address(0)) {\r\n      _revert(CannotSetNewTaxAdminToTheZeroAddress.selector);\r\n    }\r\n    _transferTaxAdmin(newTaxAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the tax admin of the contract to a new account (`newTaxAdmin`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferTaxAdmin(address newTaxAdmin) internal virtual {\r\n    address oldTaxAdmin = _taxAdmin;\r\n    _taxAdmin = newTaxAdmin;\r\n    emit TaxAdminTransferred(oldTaxAdmin, newTaxAdmin);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/ThirdParty/omnus/ERC20Spendable/IERC20Spendable.sol\r\n\r\n// \r\n// Omnus Contracts v3\r\n// https://omn.us/spendable\r\n// https://github.com/omnus/ERC20Spendable\r\n// npm: @omnus/ERC20Spendable\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title ERC-7492 IERC20Spendable.sol\r\n *\r\n * @author omnus\r\n * https://omn.us\r\n *\r\n * @dev Implementation of {IERC20Spendable} interface.\r\n *\r\n * {ERC-7492 ERC20Spendable} allows ERC20s to operate as 'spendable' items, i.e. an ERC20 token that\r\n * can trigger an action on another contract at the same time as being transfered. Similar to ERC677\r\n * and the hooks in ERC777, but with more of an empasis on interoperability (returned values) than\r\n * ERC677 and specifically scoped interaction rather than the general hooks of ERC777.\r\n *\r\n * For more detailed notes please see our guide https://omn.us/how-to-implement-erc20-spendable\r\n */\r\n\r\ninterface IERC20Spendable {\r\n  /// @dev Error {ERC20SpendableInvalidReveiver} The called contract does not support ERC20Spendable.\r\n  error ERC20SpendableInvalidReveiver(address receiver);\r\n\r\n  /// @dev Event {SpendReceipt} issued on successful return from the {ERC20SpendableReceiver} call.\r\n  event SpendReceipt(\r\n    address spender,\r\n    address receiver,\r\n    uint256 amount,\r\n    bytes sentArguments,\r\n    bytes returnedArguments\r\n  );\r\n\r\n  /**\r\n   * @dev {spend} Allows the transfer of the owners token to the receiver, a call on the receiver,\r\n   * and then the return of information from the receiver back up the call stack.\r\n   *\r\n   * Overloaded method - call this if you are not specifying any arguments.\r\n   *\r\n   * @param receiver_ The receiving address for this token spend. Contracts must implement\r\n   * ERCSpendableReceiver to receive spendadle tokens. For more detail see {ERC20SpendableReceiver}.\r\n   * @param spent_ The amount of token being spent. This will be transfered as part of this call and\r\n   * provided as an argument on the call to {onERC20SpendableReceived} on the {ERC20SpendableReceiver}.\r\n   */\r\n  function spend(address receiver_, uint256 spent_) external;\r\n\r\n  /**\r\n   * @dev {spend} Allows the transfer of the owners token to the receiver, a call on the receiver, and\r\n   * the return of information from the receiver back up the call stack.\r\n   *\r\n   * Overloaded method - call this to specify a bytes argument.\r\n   *\r\n   * @param receiver_ The receiving address for this token spend. Contracts must implement\r\n   * ERCSpendableReceiver to receive spendadle tokens. For more detail see {ERC20SpendableReceiver}.\r\n   * @param spent_ The amount of token being spent. This will be transfered as part of this call and\r\n   * provided as an argument on the call to {onERC20SpendableReceived} on the {ERC20SpendableReceiver}.\r\n   * @param arguments_ Bytes argument to send with the call. See {mock} contracts for details on encoding\r\n   * and decoding arguments from bytes.\r\n   */\r\n  function spend(\r\n    address receiver_,\r\n    uint256 spent_,\r\n    bytes memory arguments_\r\n  ) external;\r\n}\r\n\r\n\r\n// File contracts/ThirdParty/omnus/ERC20Spendable/IERC20SpendableReceiver.sol\r\n\r\n// \r\n// Omnus Contracts v3\r\n// https://omn.us/spendable\r\n// https://github.com/omnus/ERC20Spendable\r\n// npm: @omnus/ERC20Spendable\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title ERC-7492 IERC20SpendableReceiver.sol\r\n *\r\n * @author omnus\r\n * https://omn.us\r\n *\r\n * @dev Implementation of {IERC20SpendableReceiver} interface.\r\n *\r\n * {ERC-7492 ERC20Spendable} allows ERC20s to operate as 'spendable' items, i.e. an ERC20 token that\r\n * can trigger an action on another contract at the same time as being transfered. Similar to ERC677\r\n * and the hooks in ERC777, but with more of an empasis on interoperability (returned values) than\r\n * ERC677 and specifically scoped interaction rather than the general hooks of ERC777.\r\n *\r\n * For more detailed notes please see our guide https://omn.us/how-to-implement-erc20-spendable\r\n */\r\n\r\ninterface IERC20SpendableReceiver {\r\n  ///\u00a0@dev Error {CallMustBeFromSpendableToken}. The call to this method can only be from a designated spendable token.\r\n  error CallMustBeFromSpendableToken();\r\n\r\n  /**\r\n   * @dev {onERC20SpendableReceived} External function called by ERC20SpendableTokens. This\r\n   * validates that the token is valid and then calls the internal {_handleSpend} method.\r\n   * You must overried {_handleSpend} in your contract to perform processing you wish to occur\r\n   * on token spend.\r\n   *\r\n   * This method will pass back the valid bytes4 selector and any bytes argument passed from\r\n   * {_handleSpend}.\r\n   *\r\n   * @param spender_ The address spending the ERC20Spendable\r\n   * @param spent_ The amount of token spent\r\n   * @param arguments_ Bytes sent with the call\r\n   */\r\n  function onERC20SpendableReceived(\r\n    address spender_,\r\n    uint256 spent_,\r\n    bytes memory arguments_\r\n  ) external returns (bytes4 retval_, bytes memory returnArguments_);\r\n}\r\n\r\n\r\n// File contracts/ThirdParty/omnus/ERC20Spendable/ERC20Spendable.sol\r\n\r\n// \r\n// Omnus Contracts v3\r\n// https://omn.us/spendable\r\n// https://github.com/omnus/ERC20Spendable\r\n// npm: @omnus/ERC20Spendable\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n/**\r\n * @title ERC-7492 ERC20Spendable.sol\r\n *\r\n * @author omnus\r\n * https://omn.us\r\n *\r\n * @dev Implementation of {ERC20Spendable}.\r\n *\r\n * {ERC-7492 ERC20Spendable} allows ERC20s to operate as 'spendable' items, i.e. an ERC20 token that\r\n * can trigger an action on another contract at the same time as being transfered. Similar to ERC677\r\n * and the hooks in ERC777, but with more of an empasis on interoperability (returned values) than\r\n * ERC677 and specifically scoped interaction rather than the general hooks of ERC777.\r\n *\r\n * For more detailed notes please see our guide https://omn.us/how-to-implement-erc20-spendable\r\n */\r\nabstract contract ERC20Spendable is Context, IERC20Spendable {\r\n  /**\r\n   * @dev {spend} Allows the transfer of the owners token to the receiver, a call on the receiver,\r\n   * and then the return of information from the receiver back up the call stack.\r\n   *\r\n   * Overloaded method - call this if you are not specifying any arguments.\r\n   *\r\n   * @param receiver_ The receiving address for this token spend. Contracts must implement\r\n   * ERCSpendableReceiver to receive spendadle tokens. For more detail see {ERC20SpendableReceiver}.\r\n   * @param spent_ The amount of token being spent. This will be transfered as part of this call and\r\n   * provided as an argument on the call to {onERC20SpendableReceived} on the {ERC20SpendableReceiver}.\r\n   */\r\n  function spend(address receiver_, uint256 spent_) public virtual {\r\n    spend(receiver_, spent_, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev {spend} Allows the transfer of the owners token to the receiver, a call on the receiver, and\r\n   * the return of information from the receiver back up the call stack.\r\n   *\r\n   * Overloaded method - call this to specify a bytes argument.\r\n   *\r\n   * @param receiver_ The receiving address for this token spend. Contracts must implement\r\n   * ERCSpendableReceiver to receive spendadle tokens. For more detail see {ERC20SpendableReceiver}.\r\n   * @param spent_ The amount of token being spent. This will be transfered as part of this call and\r\n   * provided as an argument on the call to {onERC20SpendableReceived} on the {ERC20SpendableReceiver}.\r\n   * @param arguments_ Bytes argument to send with the call. See {mock} contracts for details on encoding\r\n   * and decoding arguments from bytes.\r\n   */\r\n  function spend(\r\n    address receiver_,\r\n    uint256 spent_,\r\n    bytes memory arguments_\r\n  ) public virtual {\r\n    /**\r\n     * @dev Transfer tokens to the receiver contract IF this is a non-0 amount. Don't try and transfer 0,\r\n     * which leavesopen the possibility that the call is free. If not, the function call after will fail\r\n     * and revert. Why would a {spend} method call ever be free? For example, a service provider may be\r\n     * taking their ERC20 token as payment for a service. But they want to offer it for free, perhaps for a\r\n     * limited time. Under this situation the spend callcan be used in all cases, but sending 0 token while\r\n     * it is free, removing the need for different interfaces.\r\n     *\r\n     * We use the standard ERC20 public transfer method for the transfer, which means two things:\r\n     * 1) This can only be called by the token owner (but that is the entire point!)\r\n     * 2) We inherit all of the security checks in this method (e.g. owner has sufficient balance etc.)\r\n     */\r\n    if (spent_ != 0) {\r\n      transfer(receiver_, spent_);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform actions on the receiver and return arguments back up the callstack. In addition to allowing\r\n     * the execution of the hook within the receiver, this call provides the same feature as onERC721Received\r\n     * in the ERC721 standard.\r\n     */\r\n    if (receiver_.code.length > 0) {\r\n      try\r\n        IERC20SpendableReceiver(receiver_).onERC20SpendableReceived(\r\n          _msgSender(),\r\n          spent_,\r\n          arguments_\r\n        )\r\n      returns (bytes4 retval, bytes memory returnedArguments) {\r\n        if (\r\n          retval != IERC20SpendableReceiver.onERC20SpendableReceived.selector\r\n        ) {\r\n          revert ERC20SpendableInvalidReveiver(receiver_);\r\n        }\r\n        emit SpendReceipt(\r\n          _msgSender(),\r\n          receiver_,\r\n          spent_,\r\n          arguments_,\r\n          returnedArguments\r\n        );\r\n        /// @dev Handle returned values. Specify an override {_handleReceipt} method in your ERC20 contract if\r\n        /// you wish to handle returned arguments.\r\n        _handleReceipt(returnedArguments);\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert ERC20SpendableInvalidReveiver(receiver_);\r\n        } else {\r\n          /// @solidity memory-safe-assembly\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev {_handleReceipt} Internal function called on completion of a call to {onERC20SpendableReceived}\r\n   * on the {ERC20SpendableReceiver}.\r\n   *\r\n   * When making a token {ERC20Spendable} if you wish to process receipts you need to override\r\n   * {_handleReceipt} in your contract. For an example, see {mock} contract {MockSpendableERC20ReturnedArgs}.\r\n   *\r\n   * @param returnedArguments_ Bytes argument to returned from the call. See {mock} contracts for details on\r\n   * encoding and decoding arguments from bytes.\r\n   */\r\n  function _handleReceipt(bytes memory returnedArguments_) internal virtual {}\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}. This can be used to determine if an ERC20 is ERC20Spendable. For\r\n   * example, a DEX may check this value, and make use of a single {spend} transaction (rather than the current\r\n   * model of [approve -> pull]) if the ERC20Spendable interface is supported.\r\n   *\r\n   * @param interfaceId_ The bytes4 interface identifier being checked.\r\n   */\r\n  function supportsInterface(\r\n    bytes4 interfaceId_\r\n  ) public view virtual returns (bool) {\r\n    // The interface IDs are constants representing the first 4 bytes\r\n    // of the XOR of all function selectors in the interface.\r\n    // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\r\n    // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\r\n    return interfaceId_ == type(IERC20Spendable).interfaceId;\r\n  }\r\n\r\n  /**\r\n   * @dev override this in your implementation\r\n   *\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address to, uint256 amount) public virtual returns (bool) {}\r\n}\r\n\r\n\r\n// File contracts/ThirdParty/Unicrypt/IUniswapV2Locker.sol\r\n\r\n// Interface definition for UniswapV2Locker.sol\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERCBurn {\r\n  function burn(uint256 _amount) external;\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IMigrator {\r\n  function migrate(\r\n    address lpToken,\r\n    uint256 amount,\r\n    uint256 unlockDate,\r\n    address owner\r\n  ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Locker {\r\n  struct UserInfo {\r\n    EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\r\n    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\r\n  }\r\n\r\n  struct TokenLock {\r\n    uint256 lockDate; // the date the token was locked\r\n    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\r\n    uint256 initialAmount; // the initial lock amount\r\n    uint256 unlockDate; // the date the token can be withdrawn\r\n    uint256 lockID; // lockID nonce per uni pair\r\n    address owner;\r\n  }\r\n\r\n  struct FeeStruct {\r\n    uint256 ethFee; // Small eth fee to prevent spam on the platform\r\n    IERCBurn secondaryFeeToken; // UNCX or UNCL\r\n    uint256 secondaryTokenFee; // optional, UNCX or UNCL\r\n    uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\r\n    uint256 liquidityFee; // fee on univ2 liquidity tokens\r\n    uint256 referralPercent; // fee for referrals\r\n    IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\r\n    uint256 referralHold; // balance the referrer must hold to qualify as a referrer\r\n    uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\r\n  }\r\n\r\n  function setDev(address payable _devaddr) external;\r\n\r\n  /**\r\n   * @notice set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\r\n   */\r\n  function setMigrator(IMigrator _migrator) external;\r\n\r\n  function setSecondaryFeeToken(address _secondaryFeeToken) external;\r\n\r\n  /**\r\n   * @notice referrers need to hold the specified token and hold amount to be elegible for referral fees\r\n   */\r\n  function setReferralTokenAndHold(\r\n    IERCBurn _referralToken,\r\n    uint256 _hold\r\n  ) external;\r\n\r\n  function setFees(\r\n    uint256 _referralPercent,\r\n    uint256 _referralDiscount,\r\n    uint256 _ethFee,\r\n    uint256 _secondaryTokenFee,\r\n    uint256 _secondaryTokenDiscount,\r\n    uint256 _liquidityFee\r\n  ) external;\r\n\r\n  /**\r\n   * @notice whitelisted accounts dont pay flatrate fees on locking\r\n   */\r\n  function whitelistFeeAccount(address _user, bool _add) external;\r\n\r\n  /**\r\n   * @notice Creates a new lock\r\n   * @param _lpToken the univ2 token address\r\n   * @param _amount amount of LP tokens to lock\r\n   * @param _unlock_date the unix timestamp (in seconds) until unlock\r\n   * @param _referral the referrer address if any or address(0) for none\r\n   * @param _fee_in_eth fees can be paid in eth or in a secondary token such as UNCX with a discount on univ2 tokens\r\n   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\r\n   */\r\n  function lockLPToken(\r\n    address _lpToken,\r\n    uint256 _amount,\r\n    uint256 _unlock_date,\r\n    address payable _referral,\r\n    bool _fee_in_eth,\r\n    address payable _withdrawer\r\n  ) external payable;\r\n\r\n  /**\r\n   * @notice extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\r\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\r\n   */\r\n  function relock(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _unlock_date\r\n  ) external;\r\n\r\n  /**\r\n   * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\r\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\r\n   */\r\n  function withdraw(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  /**\r\n   * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\r\n   */\r\n  function incrementLock(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  /**\r\n   * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\r\n   * and withdraw a smaller portion\r\n   */\r\n  function splitLock(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _amount\r\n  ) external payable;\r\n\r\n  /**\r\n   * @notice transfer a lock to a new owner, e.g. presale project -> project owner\r\n   */\r\n  function transferLockOwnership(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    address payable _newOwner\r\n  ) external;\r\n\r\n  /**\r\n   * @notice migrates liquidity to uniswap v3\r\n   */\r\n  function migrate(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  function getNumLocksForToken(\r\n    address _lpToken\r\n  ) external view returns (uint256);\r\n\r\n  function getNumLockedTokens() external view returns (uint256);\r\n\r\n  function getLockedTokenAtIndex(\r\n    uint256 _index\r\n  ) external view returns (address);\r\n\r\n  // user functions\r\n  function getUserNumLockedTokens(\r\n    address _user\r\n  ) external view returns (uint256);\r\n\r\n  function getUserLockedTokenAtIndex(\r\n    address _user,\r\n    uint256 _index\r\n  ) external view returns (address);\r\n\r\n  function getUserNumLocksForToken(\r\n    address _user,\r\n    address _lpToken\r\n  ) external view returns (uint256);\r\n\r\n  function getUserLockForTokenAtIndex(\r\n    address _user,\r\n    address _lpToken,\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256, uint256, uint256, uint256, uint256, address);\r\n\r\n  // whitelist\r\n  function getWhitelistedUsersLength() external view returns (uint256);\r\n\r\n  function getWhitelistedUserAtIndex(\r\n    uint256 _index\r\n  ) external view returns (address);\r\n\r\n  function getUserWhitelistStatus(address _user) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/ERC20FactoryV1/ERC20/ERC20ByMetadropV1.sol\r\n\r\npragma solidity 0.8.19;\r\n/**\r\n * @dev Metadrop core ERC-20 contract\r\n *\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20ByMetadropV1 is\r\n  Context,\r\n  ERC20Spendable,\r\n  IERC20ByMetadropV1,\r\n  Ownable,\r\n  TaxAdmin\r\n{\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public constant version = 100010001000000000;\r\n  uint256 internal constant BP_DENOM = 10000;\r\n  uint256 internal constant ROUND_DEC = 100000000000;\r\n\r\n  IUniswapV2Locker internal immutable unicryptLocker;\r\n  IUniswapV2Router02 internal immutable uniswapRouter;\r\n  uint256 public immutable lpSupply;\r\n  uint256 public immutable projectSupply;\r\n  uint256 public immutable maxTokensPerTransaction;\r\n  uint256 public immutable maxTokensPerWallet;\r\n  uint256 public immutable maxProjectBuyTaxBasisPoints;\r\n  uint256 public immutable maxProjectSellTaxBasisPoints;\r\n  uint256 public immutable maxMetadropBuyTaxBasisPoints;\r\n  uint256 public immutable maxMetadropSellTaxBasisPoints;\r\n  uint256 public immutable lpLockupInDays;\r\n  address public immutable metadropTreasury;\r\n  address public immutable uniswapV2Pair;\r\n  address internal immutable metadropV1Factory;\r\n  uint256 internal immutable metadropTaxPeriodInDays;\r\n  bool internal immutable tokenHasTax;\r\n  bool internal immutable tokenHasLimits;\r\n\r\n  /** @dev {Storage Slot 1} Vars read / written as part of transfers packed to a single\r\n   * slot for warm reads / writes.\r\n   *   Slot 1:\r\n   *      128\r\n   *       32\r\n   *   16 * 5\r\n   *    8 * 2\r\n   *   ------\r\n   *      256\r\n   *   ------ */\r\n  uint128 public projectTaxPendingSwap;\r\n  uint32 public fundedDate;\r\n  uint16 public projectBuyTaxBasisPoints;\r\n  uint16 public projectSellTaxBasisPoints;\r\n  uint16 public metadropBuyTaxBasisPoints;\r\n  uint16 public metadropSellTaxBasisPoints;\r\n  uint16 public swapThresholdBasisPoints;\r\n  /** @dev {autoSwapEnabled} We start with {autoSwapEnabled} OFF, as we don't want to\r\n   * call this when  processing initial liquidity from this address. We turn this on when\r\n   * liquidity has been loaded, and use this bool to control processing during auto-swaps\r\n   * from that point onwards. */\r\n  bool private autoSwapEnabled = false;\r\n\r\n  /** @dev {limitsEnabled} Similarly, we don't validate txn limits during liquidity loading. This is\r\n   * automatically set to true when liquidity loading is complete.\r\n   *\r\n   * This can be set back to false by the tax admin. This is a neccesary fallback\r\n   * position where on-chain actions cannot meet the validation and need to occur.\r\n   * For example, someone may stake token into a staking contract over a number\r\n   * of transactions until the staked balance is higher than the per txn limit.\r\n   * If the developer of the staking contract has not considered the per txn\r\n   * limit, and the 'unstake' method simply remits the entire user balance in\r\n   * one txn, then this token would now be trapped in the staking contract. Under\r\n   * these circumstances the limit can be turned off to allow the transaction to\r\n   * proceed.\r\n   *\r\n   * After a given amount of time any successful token will have\r\n   * become distributed such that a per transaction limit is less relevant. */\r\n  bool private limitsEnabled = false;\r\n\r\n  /** @dev {Storage Slot 2} Not read in transfers etc:\r\n   *      160\r\n   *   ------\r\n   *      160\r\n   *   ------ */\r\n  address public projectTreasury;\r\n\r\n  /** @dev {Storage Slot 3} Only written to if metadrop tax applies, otherwise no writes occur.\r\n   * Note that although a uint128 supply limit applies to this contract we store this\r\n   * as a uint256. As the evm uses uint256 for all vars we save the gas cost of the\r\n   * implicit cast by using uint256, given there are no other vars we can sensibly\r\n   * pack with. For the project tax we pack a uint128 with other vars read and written\r\n   * as part of transfer processing, allowing a warm write.\r\n   *   Slot 3:\r\n   *      256\r\n   *   ------\r\n   *      256\r\n   *   ------ */\r\n  uint256 public metadropTaxPendingSwap;\r\n\r\n  /** @dev {Storage Slot 4} Not read as part of transfers etc.\r\n   *    256\r\n   * ------\r\n   *    256\r\n   * ------ */\r\n  uint256 private _totalSupply;\r\n\r\n  /** @dev {Storage Slot 5 to n} Not read as part of transfers etc. */\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  /** @dev {Social Links} These shouldn't have _ prefix as they are public, but we want these at the top */\r\n  string public _1___website;\r\n  string public _2___twitter;\r\n  string public _3___telegram;\r\n  string public _4___discord;\r\n\r\n  /** @dev {_balances} Addresses balances */\r\n  mapping(address => uint256) private _balances;\r\n\r\n  /** @dev {_allowances} Addresses allocance details */\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  /** @dev {_liquidityPools} Enumerable set for liquidity pool addresses */\r\n  EnumerableSet.AddressSet private _liquidityPools;\r\n\r\n  /** @dev {_liquidityPools} Enumerable set for addresses where limits do not apply */\r\n  EnumerableSet.AddressSet private _unlimited;\r\n\r\n  /**\r\n   * @dev {constructor}\r\n   *\r\n   * @param integrationAddresses_ The project owner, uniswap router and unicrypt locker.\r\n   * @param baseParams_ configuration of this ERC20.\r\n   * @param supplyParams_ Supply configuration of this ERC20.\r\n   * @param taxParams_  Tax configuration of this ERC20\r\n   */\r\n  constructor(\r\n    address[3] memory integrationAddresses_,\r\n    bytes memory baseParams_,\r\n    bytes memory supplyParams_,\r\n    bytes memory taxParams_\r\n  ) {\r\n    _decodeBaseParams(integrationAddresses_[0], baseParams_);\r\n    uniswapRouter = IUniswapV2Router02(integrationAddresses_[1]);\r\n    unicryptLocker = IUniswapV2Locker(integrationAddresses_[2]);\r\n\r\n    ERC20SupplyParameters memory supplyParams = abi.decode(\r\n      supplyParams_,\r\n      (ERC20SupplyParameters)\r\n    );\r\n\r\n    ERC20TaxParameters memory taxParams = abi.decode(\r\n      taxParams_,\r\n      (ERC20TaxParameters)\r\n    );\r\n\r\n    tokenHasLimits = _processSupplyParams(supplyParams);\r\n    projectTreasury = supplyParams.projectTreasury;\r\n    metadropTreasury = supplyParams.metadropTreasury;\r\n    lpSupply = supplyParams.lpSupply * (10 ** decimals());\r\n    projectSupply = supplyParams.projectSupply * (10 ** decimals());\r\n    maxTokensPerWallet = supplyParams.maxTokensPerWallet * (10 ** decimals());\r\n    maxTokensPerTransaction = supplyParams.maxTokensPerTxn * (10 ** decimals());\r\n    lpLockupInDays = supplyParams.lpLockupInDays;\r\n\r\n    tokenHasTax = _processTaxParams(taxParams);\r\n    maxProjectBuyTaxBasisPoints = taxParams.maxProjectBuyTaxBasisPoints;\r\n    maxProjectSellTaxBasisPoints = taxParams.maxProjectSellTaxBasisPoints;\r\n    maxMetadropBuyTaxBasisPoints = taxParams.maxMetadropBuyTaxBasisPoints;\r\n    maxMetadropSellTaxBasisPoints = taxParams.maxMetadropSellTaxBasisPoints;\r\n    metadropTaxPeriodInDays = taxParams.metadropTaxPeriodInDays;\r\n    swapThresholdBasisPoints = uint16(taxParams.taxSwapThresholdBasisPoints);\r\n\r\n    metadropV1Factory = _msgSender();\r\n\r\n    _mintBalances(lpSupply, projectSupply);\r\n\r\n    uniswapV2Pair = _createPair();\r\n  }\r\n\r\n  /**\r\n   * @dev {onlyOwnerOrFactory}\r\n   *\r\n   * Throws if called by any account other than the owner OR factory.\r\n   */\r\n  modifier onlyOwnerOrFactory() {\r\n    if (metadropV1Factory != _msgSender() && owner() != _msgSender()) {\r\n      _revert(CallerIsNotFactoryOrProjectOwner.selector);\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev function {_decodeBaseParams}\r\n   *\r\n   * Decode NFT Parameters\r\n   *\r\n   * @param projectOwner_ The owner of this contract\r\n   * @param encodedBaseParams_ The base params encoded into a bytes array\r\n   */\r\n  function _decodeBaseParams(\r\n    address projectOwner_,\r\n    bytes memory encodedBaseParams_\r\n  ) internal {\r\n    _transferOwnership(projectOwner_);\r\n    _transferTaxAdmin(projectOwner_);\r\n\r\n    (\r\n      _name,\r\n      _symbol,\r\n      _1___website,\r\n      _2___twitter,\r\n      _3___telegram,\r\n      _4___discord\r\n    ) = abi.decode(\r\n      encodedBaseParams_,\r\n      (string, string, string, string, string, string)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev function {_processSupplyParams}\r\n   *\r\n   * Process provided supply params\r\n   *\r\n   * @param erc20SupplyParameters_ The supply params encoded into a bytes array\r\n   */\r\n  function _processSupplyParams(\r\n    ERC20SupplyParameters memory erc20SupplyParameters_\r\n  ) internal returns (bool tokenHasLimits_) {\r\n    if (\r\n      erc20SupplyParameters_.maxSupply !=\r\n      (erc20SupplyParameters_.lpSupply + erc20SupplyParameters_.projectSupply)\r\n    ) {\r\n      _revert(SupplyTotalMismatch.selector);\r\n    }\r\n\r\n    if (erc20SupplyParameters_.maxSupply > type(uint128).max) {\r\n      _revert(MaxSupplyTooHigh.selector);\r\n    }\r\n\r\n    if (erc20SupplyParameters_.lpLockupInDays > type(uint96).max) {\r\n      _revert(LPLockUpMustFitUint96.selector);\r\n    }\r\n\r\n    _unlimited.add(erc20SupplyParameters_.projectTreasury);\r\n    _unlimited.add(address(this));\r\n    _unlimited.add(address(0));\r\n\r\n    if (\r\n      erc20SupplyParameters_.maxTokensPerTxn == 0 &&\r\n      erc20SupplyParameters_.maxTokensPerWallet == 0\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_processTaxParams}\r\n   *\r\n   * Process provided tax params\r\n   *\r\n   * @param erc20TaxParameters_ The tax params encoded into a bytes array\r\n   */\r\n  function _processTaxParams(\r\n    ERC20TaxParameters memory erc20TaxParameters_\r\n  ) internal returns (bool tokenHasTax_) {\r\n    /**\r\n     * @dev We use the immutable var {tokenHasTax} to avoid unneccesary storage writes and reads. If this\r\n     * token does NOT have tax applied then there is no need to store or read these parameters, and we can\r\n     * avoid this simply by checking the immutable var. Pass back the value for this var from this method.\r\n     */\r\n    if (\r\n      erc20TaxParameters_.projectBuyTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.projectSellTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.metadropBuyTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.metadropSellTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.maxProjectBuyTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.maxProjectSellTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.maxMetadropBuyTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.maxMetadropSellTaxBasisPoints == 0\r\n    ) {\r\n      return false;\r\n    } else {\r\n      projectBuyTaxBasisPoints = uint16(\r\n        erc20TaxParameters_.projectBuyTaxBasisPoints\r\n      );\r\n      projectSellTaxBasisPoints = uint16(\r\n        erc20TaxParameters_.projectSellTaxBasisPoints\r\n      );\r\n      metadropBuyTaxBasisPoints = uint16(\r\n        erc20TaxParameters_.metadropBuyTaxBasisPoints\r\n      );\r\n      metadropSellTaxBasisPoints = uint16(\r\n        erc20TaxParameters_.metadropSellTaxBasisPoints\r\n      );\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_mintBalances}\r\n   *\r\n   * Mint initial balances\r\n   *\r\n   * @param lpMint_ The number of tokens for liquidity\r\n   * @param projectMint_ The number of tokens for the project treasury\r\n   */\r\n  function _mintBalances(uint256 lpMint_, uint256 projectMint_) internal {\r\n    if (lpMint_ > 0) {\r\n      _mint(address(this), lpMint_);\r\n    }\r\n    if (projectMint_ > 0) {\r\n      _mint(projectTreasury, projectMint_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_createPair}\r\n   *\r\n   * Create the uniswap pair\r\n   *\r\n   * @return uniswapV2Pair_ The pair address\r\n   */\r\n  function _createPair() internal returns (address uniswapV2Pair_) {\r\n    if (_totalSupply > 0) {\r\n      uniswapV2Pair_ = IUniswapV2Factory(uniswapRouter.factory()).createPair(\r\n        address(this),\r\n        uniswapRouter.WETH()\r\n      );\r\n\r\n      _liquidityPools.add(uniswapV2Pair_);\r\n      emit LiquidityPoolCreated(uniswapV2Pair_);\r\n    }\r\n    _unlimited.add(address(uniswapRouter));\r\n    _unlimited.add(uniswapV2Pair_);\r\n    return (uniswapV2Pair_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {addInitialLiquidity}\r\n   *\r\n   * Add initial liquidity to the uniswap pair\r\n   *\r\n   * @param lockerFee_ The locker fee in wei. This must match the required fee from the external locker contract.\r\n   */\r\n  function addInitialLiquidity(\r\n    uint256 lockerFee_\r\n  ) public payable onlyOwnerOrFactory {\r\n    if (lockerFee_ >= msg.value) {\r\n      // The amount of ETH MUST exceed the locker fee, otherwise what liquidity are we adding?\r\n      _revert(NoETHForLiquidityPair.selector);\r\n    }\r\n    _addInitialLiquidity((msg.value - lockerFee_), lockerFee_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_addInitialLiquidity}\r\n   *\r\n   * Add initial liquidity to the uniswap pair (internal function that does the work)\r\n   *\r\n   * @param ethAmount_ The amount of ETH passed into the call\r\n   * @param lockerFee_ The locker fee in wei. This must match the required fee from the external locker contract.\r\n   */\r\n  function _addInitialLiquidity(\r\n    uint256 ethAmount_,\r\n    uint256 lockerFee_\r\n  ) internal {\r\n    // Funded date is the date of first funding. We can only add initial liquidity once. If this date is set,\r\n    // we cannot proceed\r\n    if (fundedDate == 0) {\r\n      fundedDate = uint32(block.timestamp);\r\n    } else {\r\n      _revert(InitialLiquidityAlreadyAdded.selector);\r\n    }\r\n\r\n    // Can only do this if this contract holds tokens:\r\n    if (balanceOf(address(this)) == 0) {\r\n      _revert(NoTokenForLiquidityPair.selector);\r\n    }\r\n\r\n    // Approve the uniswap router for an inifinite amount (max uint256)\r\n    // This means that we don't need to worry about later incrememtal\r\n    // approvals on tax swaps, as the uniswap router allowance will never\r\n    // be decreased (see code in decreaseAllowance for reference)\r\n    _approve(address(this), address(uniswapRouter), type(uint256).max);\r\n\r\n    // Add the liquidity:\r\n    (uint256 amountA, uint256 amountB, uint256 lpTokens) = uniswapRouter\r\n      .addLiquidityETH{value: ethAmount_}(\r\n      address(this),\r\n      balanceOf(address(this)),\r\n      0,\r\n      0,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n\r\n    emit InitialLiquidityAdded(amountA, amountB, lpTokens);\r\n\r\n    autoSwapEnabled = true;\r\n    limitsEnabled = true;\r\n\r\n    // Lock the liqidity:\r\n    _lockInitialLiquidity(lockerFee_, lpTokens);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_lockInitialLiquidity}\r\n   *\r\n   * Lock initial liquidity on locker contract\r\n   *\r\n   * @param lockerFee_ The locker fee in wei. This must match the required fee from the external locker contract.\r\n   * @param lpTokens_ The amount of LP tokens to be locked\r\n   */\r\n  function _lockInitialLiquidity(\r\n    uint256 lockerFee_,\r\n    uint256 lpTokens_\r\n  ) internal {\r\n    IERC20(uniswapV2Pair).approve(address(unicryptLocker), lpTokens_);\r\n\r\n    unicryptLocker.lockLPToken{value: lockerFee_}(\r\n      uniswapV2Pair,\r\n      IERC20(uniswapV2Pair).balanceOf(address(this)),\r\n      block.timestamp + (lpLockupInDays * 1 days),\r\n      payable(address(0)),\r\n      true,\r\n      payable(projectTreasury)\r\n    );\r\n\r\n    emit LiquidityLocked();\r\n  }\r\n\r\n  /**\r\n   * @dev function {isLiquidityPool}\r\n   *\r\n   * Return if an address is a liquidity pool\r\n   *\r\n   * @param queryAddress_ The address being queried\r\n   * @return bool The address is / isn't a liquidity pool\r\n   */\r\n  function isLiquidityPool(address queryAddress_) public view returns (bool) {\r\n    /** @dev We check the uniswapV2Pair address first as this is an immutable variable and therefore does not need\r\n     * to be fetched from storage, saving gas if this address IS the uniswapV2Pool. We also add this address\r\n     * to the enumerated set for ease of reference (for example it is returned in the getter), and it does\r\n     * not add gas to any other calls, that still complete in 0(1) time.\r\n     */\r\n    return (queryAddress_ == uniswapV2Pair ||\r\n      _liquidityPools.contains(queryAddress_));\r\n  }\r\n\r\n  /**\r\n   * @dev function {addLiquidityPool} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to add a liquidity pool to the pool enumerable set\r\n   *\r\n   * @param newLiquidityPool_ The address of the new liquidity pool\r\n   */\r\n  function addLiquidityPool(address newLiquidityPool_) public onlyTaxAdmin {\r\n    // Don't allow calls that didn't pass an address:\r\n    if (newLiquidityPool_ == address(0)) {\r\n      _revert(LiquidityPoolCannotBeAddressZero.selector);\r\n    }\r\n    // Only allow smart contract addresses to be added, as only these can be pools:\r\n    if (newLiquidityPool_.code.length == 0) {\r\n      _revert(LiquidityPoolMustBeAContractAddress.selector);\r\n    }\r\n    // Add this to the enumerated list:\r\n    _liquidityPools.add(newLiquidityPool_);\r\n    emit LiquidityPoolAdded(newLiquidityPool_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {removeLiquidityPool} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to remove a liquidity pool\r\n   *\r\n   * @param removedLiquidityPool_ The address of the old removed liquidity pool\r\n   */\r\n  function removeLiquidityPool(\r\n    address removedLiquidityPool_\r\n  ) public onlyTaxAdmin {\r\n    // Remove this from the enumerated list:\r\n    _liquidityPools.remove(removedLiquidityPool_);\r\n    emit LiquidityPoolRemoved(removedLiquidityPool_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {isUnlimited}\r\n   *\r\n   * Return if an address is unlimited (is not subject to per txn and per wallet limits)\r\n   *\r\n   * @param queryAddress_ The address being queried\r\n   * @return bool The address is / isn't unlimited\r\n   */\r\n  function isUnlimited(address queryAddress_) public view returns (bool) {\r\n    return (_unlimited.contains(queryAddress_));\r\n  }\r\n\r\n  /**\r\n   * @dev function {addUnlimited} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to add an unlimited address\r\n   *\r\n   * @param newUnlimited_ The address of the new unlimited address\r\n   */\r\n  function addUnlimited(address newUnlimited_) public onlyTaxAdmin {\r\n    // Add this to the enumerated list:\r\n    _unlimited.add(newUnlimited_);\r\n    emit UnlimitedAddressAdded(newUnlimited_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {removeUnlimited} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to remove an unlimited address\r\n   *\r\n   * @param removedUnlimited_ The address of the old removed unlimited address\r\n   */\r\n  function removeUnlimited(address removedUnlimited_) public onlyTaxAdmin {\r\n    // Remove this from the enumerated list:\r\n    _unlimited.remove(removedUnlimited_);\r\n    emit UnlimitedAddressRemoved(removedUnlimited_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {setLimitsEnabledStatus} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to enable / disable tokens per txn and per holder validation.\r\n   *\r\n   * @param enabled_ Should limits be on?\r\n   */\r\n  function setLimitsEnabledStatus(bool enabled_) public onlyTaxAdmin {\r\n    limitsEnabled = enabled_;\r\n    emit SetLimitsEnabled(enabled_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {setProjectTreasury} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to set the treasury address\r\n   *\r\n   * @param projectTreasury_ New treasury address\r\n   */\r\n  function setProjectTreasury(address projectTreasury_) public onlyTaxAdmin {\r\n    projectTreasury = projectTreasury_;\r\n    emit TreasuryUpdated(projectTreasury_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {setSwapThresholdBasisPoints} onlyTaxAdmin\r\n   *\r\n   * Allows the tax admin to set the autoswap threshold\r\n   *\r\n   * @param swapThresholdBasisPoints_ New swap threshold in basis points\r\n   */\r\n  function setSwapThresholdBasisPoints(\r\n    uint16 swapThresholdBasisPoints_\r\n  ) public onlyTaxAdmin {\r\n    uint256 oldswapThresholdBasisPoints = swapThresholdBasisPoints;\r\n    swapThresholdBasisPoints = swapThresholdBasisPoints_;\r\n    emit AutoSwapThresholdUpdated(\r\n      oldswapThresholdBasisPoints,\r\n      swapThresholdBasisPoints_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev function {withdrawETH} onlyOwner\r\n   *\r\n   * Allows the owner to withdraw ETH\r\n   *\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawETH(uint256 amount_) external onlyOwner {\r\n    (bool success, ) = owner().call{value: amount_}(\"\");\r\n    if (!success) {\r\n      _revert(TransferFailed.selector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {withdrawERC20} onlyOwner\r\n   *\r\n   * A withdraw function to allow ERC20s to be withdrawn.\r\n   *\r\n   * @param token_ The address of the token being withdrawn\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawERC20(IERC20 token_, uint256 amount_) external onlyOwner {\r\n    token_.safeTransfer(owner(), amount_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {setProjectTaxRates} onlyTaxAdmin\r\n   *\r\n   * Change the tax rates, subject to max rate\r\n   *\r\n   * @param newProjectBuyTaxBasisPoints_ The new buy tax rate\r\n   * @param newProjectSellTaxBasisPoints_ The new sell tax rate\r\n   */\r\n  function setProjectTaxRates(\r\n    uint16 newProjectBuyTaxBasisPoints_,\r\n    uint16 newProjectSellTaxBasisPoints_\r\n  ) external onlyTaxAdmin {\r\n    // Cannot increase above the maximum:\r\n    if (newProjectBuyTaxBasisPoints_ > maxProjectBuyTaxBasisPoints) {\r\n      _revert(NewBuyTaxBasisPointsExceedsMaximum.selector);\r\n    }\r\n    // Cannot increase above the maximum:\r\n    if (newProjectSellTaxBasisPoints_ > maxProjectSellTaxBasisPoints) {\r\n      _revert(NewSellTaxBasisPointsExceedsMaximum.selector);\r\n    }\r\n\r\n    uint16 oldBuyTaxBasisPoints = projectBuyTaxBasisPoints;\r\n    projectBuyTaxBasisPoints = newProjectBuyTaxBasisPoints_;\r\n\r\n    uint16 oldSellTaxBasisPoints = projectSellTaxBasisPoints;\r\n    projectSellTaxBasisPoints = newProjectSellTaxBasisPoints_;\r\n\r\n    emit ProjectTaxBasisPointsChanged(\r\n      oldBuyTaxBasisPoints,\r\n      newProjectBuyTaxBasisPoints_,\r\n      oldSellTaxBasisPoints,\r\n      newProjectSellTaxBasisPoints_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev function {setMetadropTaxRates} onlyTaxAdmin\r\n   *\r\n   * Change the tax rates, subject to max rate and minimum tax period.\r\n   *\r\n   * @param newMetadropBuyTaxBasisPoints_ The new buy tax rate\r\n   * @param newMetadropSellTaxBasisPoints_ The new sell tax rate\r\n   */\r\n  function setMetadropTaxRates(\r\n    uint16 newMetadropBuyTaxBasisPoints_,\r\n    uint16 newMetadropSellTaxBasisPoints_\r\n  ) external onlyTaxAdmin {\r\n    // Cannot increase above the maximum:\r\n    if (newMetadropBuyTaxBasisPoints_ > maxMetadropBuyTaxBasisPoints) {\r\n      _revert(NewBuyTaxBasisPointsExceedsMaximum.selector);\r\n    }\r\n\r\n    // Cannot increase above the maximum:\r\n    if (newMetadropSellTaxBasisPoints_ > maxMetadropSellTaxBasisPoints) {\r\n      _revert(NewSellTaxBasisPointsExceedsMaximum.selector);\r\n    }\r\n\r\n    // Reducing the basis points can only occur after the tax period:\r\n    if (\r\n      (newMetadropBuyTaxBasisPoints_ < metadropBuyTaxBasisPoints ||\r\n        newMetadropSellTaxBasisPoints_ < metadropSellTaxBasisPoints) &&\r\n      block.timestamp < (fundedDate + (metadropTaxPeriodInDays * 1 days))\r\n    ) {\r\n      _revert(TaxPeriodStillInForce.selector);\r\n    }\r\n\r\n    uint16 oldBuyTaxBasisPoints = metadropBuyTaxBasisPoints;\r\n    uint16 oldSellTaxBasisPoints = metadropSellTaxBasisPoints;\r\n\r\n    metadropBuyTaxBasisPoints = newMetadropBuyTaxBasisPoints_;\r\n    metadropSellTaxBasisPoints = newMetadropSellTaxBasisPoints_;\r\n\r\n    emit MetadropTaxBasisPointsChanged(\r\n      oldBuyTaxBasisPoints,\r\n      newMetadropBuyTaxBasisPoints_,\r\n      oldSellTaxBasisPoints,\r\n      newMetadropSellTaxBasisPoints_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the default value returned by this function, unless\r\n   * it's overridden.\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Provide easy to view tax total:\r\n   */\r\n  function _totalBuyTaxBasisPoints() internal view returns (uint256) {\r\n    return projectBuyTaxBasisPoints + metadropBuyTaxBasisPoints;\r\n  }\r\n\r\n  /**\r\n   * @dev Provide easy to view tax total:\r\n   */\r\n  function _totalSellTaxBasisPoints() internal view returns (uint256) {\r\n    return projectSellTaxBasisPoints + metadropSellTaxBasisPoints;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   */\r\n  function balanceOf(\r\n    address account\r\n  ) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(\r\n    address to,\r\n    uint256 amount\r\n  ) public virtual override(ERC20Spendable, IERC20) returns (bool) {\r\n    address owner = _msgSender();\r\n    _transfer(\r\n      owner,\r\n      to,\r\n      amount,\r\n      (isLiquidityPool(owner) || isLiquidityPool(to))\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * NOTE: Does not update the allowance if the current allowance\r\n   * is the maximum `uint256`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` and `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``from``'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    address spender = _msgSender();\r\n    _spendAllowance(from, spender, amount);\r\n    _transfer(from, to, amount, (isLiquidityPool(from) || isLiquidityPool(to)));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  ) public virtual returns (bool) {\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) public virtual returns (bool) {\r\n    address owner = _msgSender();\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance < subtractedValue) {\r\n      _revert(AllowanceDecreasedBelowZero.selector);\r\n    }\r\n    unchecked {\r\n      _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves `amount` of tokens from `from` to `to`.\r\n   *\r\n   * This internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    bool applyTax\r\n  ) internal virtual {\r\n    _beforeTokenTransfer(from, to, amount);\r\n\r\n    // Perform pre-tax validation (e.g. amount doesn't exceed balance, max txn amount)\r\n    uint256 fromBalance = _pretaxValidationAndLimits(from, to, amount);\r\n\r\n    // Perform autoswap if eligible\r\n    _autoSwap(from, to);\r\n\r\n    // Process taxes\r\n    uint256 amountMinusTax = _taxProcessing(applyTax, to, from, amount);\r\n\r\n    // Perform post-tax validation (e.g. total balance after post-tax amount applied)\r\n    _posttaxValidationAndLimits(to, amountMinusTax);\r\n\r\n    _balances[from] = fromBalance - amount;\r\n    _balances[to] += amountMinusTax;\r\n\r\n    emit Transfer(from, to, amountMinusTax);\r\n\r\n    _afterTokenTransfer(from, to, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_pretaxValidationAndLimits}\r\n   *\r\n   * Perform validation on pre-tax amounts\r\n   *\r\n   * @param from_ From address for the transaction\r\n   * @param to_ To address for the transaction\r\n   * @param amount_ Amount of the transaction\r\n   */\r\n  function _pretaxValidationAndLimits(\r\n    address from_,\r\n    address to_,\r\n    uint256 amount_\r\n  ) internal view returns (uint256 fromBalance_) {\r\n    if (from_ == address(0)) {\r\n      _revert(TransferFromZeroAddress.selector);\r\n    }\r\n\r\n    if (to_ == address(0)) {\r\n      _revert(TransferToZeroAddress.selector);\r\n    }\r\n\r\n    fromBalance_ = _balances[from_];\r\n\r\n    if (fromBalance_ < amount_) {\r\n      _revert(TransferAmountExceedsBalance.selector);\r\n    }\r\n\r\n    // Liquidity pools aren't always going to round cleanly. This can (and does)\r\n    // mean that a limit of 5,000 tokens (for example) will trigger on a transfer\r\n    // of 5,000 tokens, as the transfer is actually for 5,000.00000000000000213.\r\n    // While 4,999 will work fine, it isn't hugely user friendly. So we buffer\r\n    // the limit with rounding decimals, which in all cases are considerably less\r\n    // than one whole token:\r\n    uint256 roundedLimited;\r\n\r\n    unchecked {\r\n      roundedLimited = maxTokensPerTransaction + ROUND_DEC;\r\n    }\r\n\r\n    if (\r\n      tokenHasLimits &&\r\n      limitsEnabled &&\r\n      (maxTokensPerTransaction != 0) &&\r\n      (amount_ > roundedLimited) &&\r\n      ((isLiquidityPool(from_) && !isUnlimited(to_)) ||\r\n        (isLiquidityPool(to_) && !isUnlimited(from_)))\r\n    ) {\r\n      _revert(MaxTokensPerTxnExceeded.selector);\r\n    }\r\n\r\n    return (fromBalance_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_posttaxValidationAndLimits}\r\n   *\r\n   * Perform validation on post-tax amounts\r\n   *\r\n   * @param to_ To address for the transaction\r\n   * @param amount_ Amount of the transaction\r\n   */\r\n  function _posttaxValidationAndLimits(\r\n    address to_,\r\n    uint256 amount_\r\n  ) internal view returns (uint256 fromBalance_) {\r\n    // Liquidity pools aren't always going to round cleanly. This can (and does)\r\n    // mean that a limit of 5,000 tokens (for example) will trigger on a max holding\r\n    // of 5,000 tokens, as the transfer to achieve that is actually for\r\n    // 5,000.00000000000000213. While 4,999 will work fine, it isn't hugely user friendly.\r\n    // So we buffer the limit with rounding decimals, which in all cases are considerably\r\n    // less than one whole token:\r\n    uint256 roundedLimited;\r\n\r\n    unchecked {\r\n      roundedLimited = maxTokensPerWallet + ROUND_DEC;\r\n    }\r\n    if (\r\n      tokenHasLimits &&\r\n      limitsEnabled &&\r\n      (maxTokensPerWallet != 0) &&\r\n      (amount_ + balanceOf(to_) > roundedLimited) &&\r\n      !isUnlimited(to_) &&\r\n      !isLiquidityPool(to_)\r\n    ) {\r\n      _revert(MaxTokensPerWalletExceeded.selector);\r\n    }\r\n\r\n    return (fromBalance_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_taxProcessing}\r\n   *\r\n   * Perform tax processing\r\n   *\r\n   * @param applyTax_ Do we apply tax to this transaction?\r\n   * @param to_ The reciever of the token\r\n   * @param from_ The sender of the token\r\n   * @param sentAmount_ The amount being send\r\n   * @return amountLessTax_ The amount that will be recieved, i.e. the send amount minus tax\r\n   */\r\n  function _taxProcessing(\r\n    bool applyTax_,\r\n    address to_,\r\n    address from_,\r\n    uint256 sentAmount_\r\n  ) internal returns (uint256 amountLessTax_) {\r\n    if (to_ == address(uniswapRouter) || from_ == address(uniswapRouter)) {\r\n      return (sentAmount_);\r\n    }\r\n    amountLessTax_ = sentAmount_;\r\n    unchecked {\r\n      if (tokenHasTax && applyTax_ && autoSwapEnabled) {\r\n        uint256 tax;\r\n\r\n        // on sell\r\n        if (isLiquidityPool(to_) && _totalSellTaxBasisPoints() > 0) {\r\n          if (projectSellTaxBasisPoints > 0) {\r\n            uint256 projectTax = ((sentAmount_ * projectSellTaxBasisPoints) /\r\n              BP_DENOM);\r\n            projectTaxPendingSwap += uint128(projectTax);\r\n            tax += projectTax;\r\n          }\r\n          if (metadropSellTaxBasisPoints > 0) {\r\n            uint256 metadropTax = ((sentAmount_ * metadropSellTaxBasisPoints) /\r\n              BP_DENOM);\r\n            metadropTaxPendingSwap += uint128(metadropTax);\r\n            tax += metadropTax;\r\n          }\r\n        }\r\n        // on buy\r\n        else if (isLiquidityPool(from_) && _totalBuyTaxBasisPoints() > 0) {\r\n          if (projectBuyTaxBasisPoints > 0) {\r\n            uint256 projectTax = ((sentAmount_ * projectBuyTaxBasisPoints) /\r\n              BP_DENOM);\r\n            projectTaxPendingSwap += uint128(projectTax);\r\n            tax += projectTax;\r\n          }\r\n          if (metadropBuyTaxBasisPoints > 0) {\r\n            uint256 metadropTax = ((sentAmount_ * metadropBuyTaxBasisPoints) /\r\n              BP_DENOM);\r\n            metadropTaxPendingSwap += uint128(metadropTax);\r\n            tax += metadropTax;\r\n          }\r\n        }\r\n\r\n        if (tax > 0) {\r\n          _balances[address(this)] += tax;\r\n          emit Transfer(from_, address(this), tax);\r\n          amountLessTax_ -= tax;\r\n        }\r\n      }\r\n    }\r\n    return (amountLessTax_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_autoSwap}\r\n   *\r\n   * Automate the swap of accumulated tax fees to native token\r\n   *\r\n   * @param from_ The sender of the token\r\n   */\r\n  function _autoSwap(address from_, address to_) internal {\r\n    if (tokenHasTax) {\r\n      uint256 taxBalance = balanceOf(address(this));\r\n\r\n      if (_eligibleForSwap(from_, to_, taxBalance)) {\r\n        // Store that a swap back is in progress:\r\n        autoSwapEnabled = false;\r\n        // Perform the auto swap to native token:\r\n        _swapTaxForNative(taxBalance);\r\n        // Flag that the autoswap is complete:\r\n        autoSwapEnabled = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_eligibleForSwap}\r\n   *\r\n   * Is the current transfer eligible for autoswap\r\n   *\r\n   * @param from_ The sender of the token\r\n   * @param taxBalance_ The current accumulated tax balance\r\n   */\r\n  function _eligibleForSwap(\r\n    address from_,\r\n    address to_,\r\n    uint256 taxBalance_\r\n  ) internal view returns (bool) {\r\n    return (taxBalance_ >=\r\n      ((_totalSupply * swapThresholdBasisPoints) / BP_DENOM) &&\r\n      autoSwapEnabled &&\r\n      !isLiquidityPool(from_) &&\r\n      from_ != address(uniswapRouter) &&\r\n      to_ != address(uniswapRouter));\r\n  }\r\n\r\n  /**\r\n   * @dev function {_swapTaxForNative}\r\n   *\r\n   * Swap tokens taken as tax for native token\r\n   *\r\n   * @param taxBalance_ The current accumulated tax balance\r\n   */\r\n  function _swapTaxForNative(uint256 taxBalance_) internal {\r\n    uint256 preSwapBalance = address(this).balance;\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = uniswapRouter.WETH();\r\n\r\n    uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      taxBalance_,\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n\r\n    uint256 postSwapBalance = address(this).balance;\r\n\r\n    uint256 balanceToDistribute = postSwapBalance - preSwapBalance;\r\n\r\n    uint256 projectBalanceToDistribute = (balanceToDistribute *\r\n      projectTaxPendingSwap) / (projectTaxPendingSwap + metadropTaxPendingSwap);\r\n\r\n    uint256 metadropBalanceToDistribute = (balanceToDistribute *\r\n      metadropTaxPendingSwap) /\r\n      (projectTaxPendingSwap + metadropTaxPendingSwap);\r\n\r\n    (projectTaxPendingSwap, metadropTaxPendingSwap) = (0, 0);\r\n\r\n    // Distribute to treasuries:\r\n    bool success;\r\n    (success, ) = projectTreasury.call{value: projectBalanceToDistribute}(\"\");\r\n    if (!success) {\r\n      _revert(TransferFailed.selector);\r\n    }\r\n\r\n    (success, ) = metadropTreasury.call{value: metadropBalanceToDistribute}(\"\");\r\n    if (!success) {\r\n      _revert(TransferFailed.selector);\r\n    }\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    if (account == address(0)) {\r\n      _revert(MintToZeroAddress.selector);\r\n    }\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply += amount;\r\n    unchecked {\r\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n      _balances[account] += amount;\r\n    }\r\n    emit Transfer(address(0), account, amount);\r\n\r\n    _afterTokenTransfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    if (account == address(0)) {\r\n      _revert(BurnFromTheZeroAddress.selector);\r\n    }\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    if (accountBalance < amount) {\r\n      _revert(BurnExceedsBalance.selector);\r\n    }\r\n\r\n    unchecked {\r\n      _balances[account] = accountBalance - amount;\r\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n      _totalSupply -= amount;\r\n    }\r\n\r\n    emit Transfer(account, address(0), amount);\r\n\r\n    _afterTokenTransfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    if (owner == address(0)) {\r\n      _revert(ApproveFromTheZeroAddress.selector);\r\n    }\r\n\r\n    if (spender == address(0)) {\r\n      _revert(ApproveToTheZeroAddress.selector);\r\n    }\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n   *\r\n   * Does not update the allowance amount in case of infinite allowance.\r\n   * Revert if not enough allowance is available.\r\n   *\r\n   * Might emit an {Approval} event.\r\n   */\r\n  function _spendAllowance(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance != type(uint256).max) {\r\n      if (currentAllowance < amount) {\r\n        _revert(InsufficientAllowance.selector);\r\n      }\r\n\r\n      unchecked {\r\n        _approve(owner, spender, currentAllowance - amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys a `value` amount of tokens from the caller.\r\n   *\r\n   * See {ERC20-_burn}.\r\n   */\r\n  function burn(uint256 value) public virtual {\r\n    _burn(_msgSender(), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys a `value` amount of tokens from `account`, deducting from\r\n   * the caller's allowance.\r\n   *\r\n   * See {ERC20-_burn} and {ERC20-allowance}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have allowance for ``accounts``'s tokens of at least\r\n   * `value`.\r\n   */\r\n  function burnFrom(address account, uint256 value) public virtual {\r\n    _spendAllowance(account, _msgSender(), value);\r\n    _burn(account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * has been transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n\r\n  receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"integrationAddresses_\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"baseParams_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"supplyParams_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"taxParams_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdapterParamsMustBeEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowanceDecreasedBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionStatusIsNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionStatusIsNotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"}],\"name\":\"AuxCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidMustBeBelowTheFloorForRefundDuringAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidMustBeBelowTheFloorWhenReducingQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IErrors.BondingCurveErrorType\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"BondingCurveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotFactoryOrProjectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotPlatformAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotSuperAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotTheTaxAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerMustBeLzApp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetNewOwnerToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetNewTaxAdminToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionAlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DestinationIsNotTrustedSource\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20SpendableInvalidReveiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GasLimitIsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectConfirmationValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialLiquidityAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAdapterParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracleSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSourceSendingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTotalShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPLockUpMustFitUint96\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPoolCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPoolMustBeAContractAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBidQuantityIs255\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"}],\"name\":\"MaxPublicMintAllowanceExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokensPerTxnExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokensPerWalletExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadataIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropFactoryOnlyOncePerReveal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropModulesOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropOracleCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinGasLimitNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintingIsClosedForever\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewBuyTaxBasisPointsExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewSellTaxBasisPointsExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoETHForLiquidityPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPaymentDue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRefundForCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStoredMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokenForLiquidityPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTrustedPathRecord\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationDidNotSucceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleSignatureHasExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParametersDoNotMatchSignedMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PassedConfigDoesNotMatchApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseCutOffHasPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentMustCoverPerMintFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDidNotSucceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlatformAdminCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlatformTreasuryCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectOwnerCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsMaxPossibleCollectionSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsRemainingCollectionSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsRemainingPhaseSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferralIdAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"previouslyMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAllocation\",\"type\":\"uint256\"}],\"name\":\"RequestingMoreThanRemainingAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeWillExceedSalePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShareTotalCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SuperAdminCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyTotalMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupportWindowIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxFreeAddressCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxPeriodStillInForce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThisMintIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSharesMustMatchDenominator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnrecognisedVRFMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VRFCoordinatorCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueExceedsMaximum\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"AutoSwapThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpToken\",\"type\":\"uint256\"}],\"name\":\"InitialLiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellBasisPoints\",\"type\":\"uint256\"}],\"name\":\"MetadropTaxBasisPointsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellBasisPoints\",\"type\":\"uint256\"}],\"name\":\"ProjectTaxBasisPointsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RevenueAutoSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetLimitsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sentArguments\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnedArguments\",\"type\":\"bytes\"}],\"name\":\"SpendReceipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTaxAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTaxAdmin\",\"type\":\"address\"}],\"name\":\"TaxAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedUnlimted\",\"type\":\"address\"}],\"name\":\"UnlimitedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedUnlimted\",\"type\":\"address\"}],\"name\":\"UnlimitedAddressRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_1___website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_2___twitter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_3___telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_4___discord\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockerFee_\",\"type\":\"uint256\"}],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityPool_\",\"type\":\"address\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUnlimited_\",\"type\":\"address\"}],\"name\":\"addUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundedDate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"}],\"name\":\"isLiquidityPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"}],\"name\":\"isUnlimited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLockupInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMetadropBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMetadropSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProjectBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProjectSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropTaxPendingSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectTaxPendingSwap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedLiquidityPool_\",\"type\":\"address\"}],\"name\":\"removeLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedUnlimited_\",\"type\":\"address\"}],\"name\":\"removeUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceTaxAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"}],\"name\":\"setLimitsEnabledStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newMetadropBuyTaxBasisPoints_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newMetadropSellTaxBasisPoints_\",\"type\":\"uint16\"}],\"name\":\"setMetadropTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newProjectBuyTaxBasisPoints_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newProjectSellTaxBasisPoints_\",\"type\":\"uint16\"}],\"name\":\"setProjectTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectTreasury_\",\"type\":\"address\"}],\"name\":\"setProjectTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"swapThresholdBasisPoints_\",\"type\":\"uint16\"}],\"name\":\"setSwapThresholdBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"spent_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"arguments_\",\"type\":\"bytes\"}],\"name\":\"spend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"spent_\",\"type\":\"uint256\"}],\"name\":\"spend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxAdmin\",\"type\":\"address\"}],\"name\":\"transferTaxAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20ByMetadropV1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000184d65746164726f70204552432054656d706c6174652056310000000000000000000000000000000000000000000000000000000000000000000000000000000a4d45544144524f5056310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000107777772e6d65746164726f702e636f6d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d406d65746164726f706dersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19245ee2029b8faea52b6190ee79b47594ce318b51364775bc7ff9c8d94d0a0c"}