{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract DigitUp {\r\n    uint256 public totalSupply = 10000000 * 10 ** 18;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint256) public stakingBalance;\r\n    mapping(address => uint8) public adBoostLevel; // 0: No boost, 1: Level 1, 2: Level 2, 3: Level 3\r\n    address public owner;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n    event AdBoosted(address indexed user, uint8 level);\r\n\r\n    constructor() {\r\n        balances[msg.sender] = totalSupply;\r\n        owner = msg.sender;\r\n         balances[owner] = totalSupply;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function stakeTokens(uint256 _amount) public {\r\n        require(balances[msg.sender] >= _amount, \"Insufficient balance\");\r\n        balances[msg.sender] -= _amount;\r\n        stakingBalance[msg.sender] += _amount;\r\n        emit Staked(msg.sender, _amount);\r\n    }\r\n\r\n    function unstakeTokens(uint256 _amount) public {\r\n        require(stakingBalance[msg.sender] >= _amount, \"Insufficient staked balance\");\r\n        stakingBalance[msg.sender] -= _amount;\r\n        balances[msg.sender] += _amount;\r\n        emit Unstaked(msg.sender, _amount);\r\n    }\r\n\r\n    function setAdBoostLevel(uint8 _level) public onlyOwner {\r\n        require(_level <= 3, \"Invalid level. Must be between 0 and 3.\");\r\n        adBoostLevel[msg.sender] = _level;\r\n        emit AdBoosted(msg.sender, _level);\r\n    }\r\n\r\n    function calculateRewards(address _user) public view returns(uint256) {\r\n        uint256 baseReward = stakingBalance[_user]; // Replace with your reward calculation logic\r\n        uint256 boostMultiplier = 1 + adBoostLevel[_user]; // 1x for Level 0, 2x for Level 1, 3x for Level 2, 4x for Level 3\r\n        uint256 boostedReward = baseReward * boostMultiplier;\r\n        return boostedReward;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"AdBoosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adBoostLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"setAdBoostLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DigitUp", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dee57033ec056fbbb0ea012d66bf88e6ad21128a447eb8b373cae7b2d9c316b6"}