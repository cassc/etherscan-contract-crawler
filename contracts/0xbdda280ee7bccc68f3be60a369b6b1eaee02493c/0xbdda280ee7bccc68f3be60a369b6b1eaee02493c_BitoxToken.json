{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/base/BaseExchangeableTokenInterface.sol\r\n\r\ninterface BaseExchangeableTokenInterface {\r\n\r\n    // Sender interface must have:\r\n    // mapping(address => uint) private exchangedWith;\r\n    // mapping(address => uint) private exchangedBy;\r\n\r\n    // Receiver interface must have:\r\n    // mapping(address => uint) private exchangesReceived;\r\n\r\n    /// @dev Fired if token exchange complete\r\n    event Exchange(address _from, address _targetContract, uint _amount);\r\n\r\n    /// @dev Fired if token exchange and spent complete\r\n    event ExchangeSpent(address _from, address _targetContract, address _to, uint _amount);\r\n\r\n    // Sender interface\r\n    function exchangeToken(address _targetContract, uint _amount) external returns (bool success, uint creditedAmount);\r\n\r\n    function exchangeAndSpend(address _targetContract, uint _amount, address _to) external returns (bool success);\r\n\r\n    function __exchangerCallback(address _targetContract, address _exchanger, uint _amount) external returns (bool success);\r\n\r\n    // Receiver interface\r\n    function __targetExchangeCallback(uint _amount) external returns (bool success);\r\n\r\n    function __targetExchangeAndSpendCallback(address _to, uint _amount) external returns (bool success);\r\n}\r\n\r\n// File: contracts/flavours/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Lockable.sol\r\n\r\n/**\r\n * @title Lockable\r\n * @dev Base contract which allows children to\r\n *      implement main operations locking mechanism.\r\n */\r\ncontract Lockable is Ownable {\r\n    event Lock();\r\n    event Unlock();\r\n\r\n    bool public locked = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n    *       only when the contract is not locked.\r\n     */\r\n    modifier whenNotLocked() {\r\n        require(!locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n     *      only when the contract is locked.\r\n     */\r\n    modifier whenLocked() {\r\n        require(locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to lock, triggers locked state\r\n     */\r\n    function lock() public onlyOwner whenNotLocked {\r\n        locked = true;\r\n        emit Lock();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner\r\n     *      to unlock, returns to unlocked state\r\n     */\r\n    function unlock() public onlyOwner whenLocked {\r\n        locked = false;\r\n        emit Unlock();\r\n    }\r\n}\r\n\r\n// File: contracts/base/BaseFixedERC20Token.sol\r\n\r\ncontract BaseFixedERC20Token is Lockable {\r\n    using SafeMath for uint;\r\n\r\n    /// @dev ERC20 Total supply\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) public balances;\r\n\r\n    mapping(address => mapping(address => uint)) private allowed;\r\n\r\n    /// @dev Fired if token is transferred according to ERC20 spec\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /// @dev Fired if token withdrawal is approved according to ERC20 spec\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param owner_ The address to query the the balance of\r\n     * @return An uint representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner_) public view returns (uint balance) {\r\n        return balances[owner_];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param to_ The address to transfer to.\r\n     * @param value_ The amount to be transferred.\r\n     */\r\n    function transfer(address to_, uint value_) public whenNotLocked returns (bool) {\r\n        require(to_ != address(0) && value_ <= balances[msg.sender]);\r\n        // SafeMath.sub will throw an exception if there is not enough balance\r\n        balances[msg.sender] = balances[msg.sender].sub(value_);\r\n        balances[to_] = balances[to_].add(value_);\r\n        emit Transfer(msg.sender, to_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from_ address The address which you want to send tokens from\r\n     * @param to_ address The address which you want to transfer to\r\n     * @param value_ uint the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from_, address to_, uint value_) public whenNotLocked returns (bool) {\r\n        require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\r\n        balances[from_] = balances[from_].sub(value_);\r\n        balances[to_] = balances[to_].add(value_);\r\n        allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\r\n        emit Transfer(from_, to_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering\r\n     *\r\n     * To change the approve amount you first have to reduce the addresses\r\n     * allowance to zero by calling `approve(spender_, 0)` if it is not\r\n     * already 0 to mitigate the race condition described in:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param spender_ The address which will spend the funds.\r\n     * @param value_ The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender_, uint value_) public whenNotLocked returns (bool) {\r\n        if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\r\n            revert();\r\n        }\r\n        allowed[msg.sender][spender_] = value_;\r\n        emit Approval(msg.sender, spender_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\r\n     * @param owner_ address The address which owns the funds\r\n     * @param spender_ address The address which will spend the funds\r\n     * @return A uint specifying the amount of tokens still available for the spender\r\n     */\r\n    function allowance(address owner_, address spender_) public view returns (uint) {\r\n        return allowed[owner_][spender_];\r\n    }\r\n}\r\n\r\n// File: contracts/base/BaseTokenExchangeInterface.sol\r\n\r\ninterface BaseTokenExchangeInterface {\r\n    // Token exchange service contract must have:\r\n    // address[] private registeredTokens;\r\n\r\n    /// @dev Fired if token exchange complete\r\n    event Exchange(address _from, address _by, uint _value, address _target);\r\n\r\n    /// @dev Fired if token exchange and spent complete\r\n    event ExchangeAndSpent(address _from, address _by, uint _value, address _target, address _to);\r\n\r\n    function registerToken(address _token) external returns (bool success);\r\n\r\n    function exchangeToken(address _targetContract, uint _amount) external returns (bool success, uint creditedAmount);\r\n\r\n    function exchangeAndSpend(address _targetContract, uint _amount, address _to) external returns (bool success);\r\n}\r\n\r\n// File: contracts/base/BaseExchangeableToken.sol\r\n\r\n/**\r\n * @dev ERC20 and EIP-823 (exchangeable) compliant token.\r\n */\r\ncontract BaseExchangeableToken is BaseExchangeableTokenInterface, BaseFixedERC20Token {\r\n    using SafeMath for uint;\r\n\r\n    BaseTokenExchangeInterface public exchange;\r\n\r\n    /// @dev Fired if token is change exchange. (extends EIP-823)\r\n    event ExchangeChanged(address _exchange);\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n     *      only when the exchange contract is set.\r\n     */\r\n    modifier whenConfigured() {\r\n        require(exchange != address(0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n     *      only by exchange contract\r\n     */\r\n    modifier onlyExchange() {\r\n        require(msg.sender == address(exchange));\r\n        _;\r\n    }\r\n\r\n    // Sender interface\r\n    /// @dev number of tokens exchanged to another tokens for each token address\r\n    mapping(address => uint) private exchangedWith;\r\n\r\n    /// @dev number of tokens exchanged to another tokens for each user address\r\n    mapping(address => uint) private exchangedBy;\r\n\r\n    // Receiver interface\r\n    /// @dev number of tokens exchanged from another tokens for each token address\r\n    mapping(address => uint) private exchangesReceived;\r\n\r\n    /// @dev change exchange for this token. (extends EIP-823)\r\n    function changeExchange(address _exchange) public onlyOwner {\r\n        require(_exchange != address(0));\r\n        exchange = BaseTokenExchangeInterface(_exchange);\r\n        emit ExchangeChanged(_exchange);\r\n    }\r\n\r\n    // Sender interface\r\n    /**\r\n     * @dev exchange amount of this token to target token\r\n     * @param _targetContract target token contract\r\n     * @param _amount amount of tokens to exchange\r\n     * @return (true, creditedAmount) on success.\r\n     *          (false, 0) on:\r\n     *              nothing =)\r\n     *          revert on:\r\n     *              exchangeToken in exchange contract return (false, 0)\r\n     *              exchange address is not configured\r\n     *              balance of tokens less then amount to exchange\r\n     */\r\n    function exchangeToken(address _targetContract, uint _amount) public whenConfigured returns (bool success, uint creditedAmount) {\r\n        require(_targetContract != address(0) && _amount <= balances[msg.sender]);\r\n        (success, creditedAmount) = exchange.exchangeToken(_targetContract, _amount);\r\n        if (!success) {\r\n            revert();\r\n        }\r\n        emit Exchange(msg.sender, _targetContract, _amount);\r\n        return (success, creditedAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev exchange amount of this token to target token and transfer to specified address\r\n     * @param _targetContract target token contract\r\n     * @param _amount amount of tokens to exchange\r\n     * @param _to address for transferring exchanged tokens\r\n     * @return true on success.\r\n     *          false on:\r\n     *              nothing =)\r\n     *          revert on:\r\n     *              exchangeTokenAndSpend in exchange contract return false\r\n     *              exchange address is not configured\r\n     *              balance of tokens less then amount to exchange\r\n     */\r\n    function exchangeAndSpend(address _targetContract, uint _amount, address _to) public whenConfigured returns (bool success) {\r\n        require(_targetContract != address(0) && _to != address(0) && _amount <= balances[msg.sender]);\r\n        success = exchange.exchangeAndSpend(_targetContract, _amount, _to);\r\n        if (!success) {\r\n            revert();\r\n        }\r\n        emit ExchangeSpent(msg.sender, _targetContract, _to, _amount);\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * @dev send amount of this token to exchange. Must be called only from exchange contract\r\n     * @param _targetContract target token contract\r\n     * @param _exchanger address of user, who exchange tokens\r\n     * @param _amount amount of tokens to exchange\r\n     * @return true on success.\r\n     *          false on:\r\n     *              balance of tokens less then amount to exchange\r\n     *          revert on:\r\n     *              exchange address is not configured\r\n     *              called not by configured exchange address\r\n     */\r\n    function __exchangerCallback(address _targetContract, address _exchanger, uint _amount) public whenConfigured onlyExchange returns (bool success) {\r\n        require(_targetContract != address(0));\r\n        if (_amount > balances[_exchanger]) {\r\n            return false;\r\n        }\r\n        balances[_exchanger] = balances[_exchanger].sub(_amount);\r\n        exchangedWith[_targetContract] = exchangedWith[_targetContract].add(_amount);\r\n        exchangedBy[_exchanger] = exchangedBy[_exchanger].add(_amount);\r\n        return true;\r\n    }\r\n\r\n    // Receiver interface\r\n    /**\r\n     * @dev receive amount of tokens from exchange. Must be called only from exchange contract\r\n     * @param _amount amount of tokens to receive\r\n     * @return true on success.\r\n     *          false on:\r\n     *              nothing =)\r\n     *          revert on:\r\n     *              exchange address is not configured\r\n     *              called not by configured exchange address\r\n     */\r\n    function __targetExchangeCallback(uint _amount) public whenConfigured onlyExchange returns (bool success) {\r\n        balances[tx.origin] = balances[tx.origin].add(_amount);\r\n        exchangesReceived[tx.origin] = exchangesReceived[tx.origin].add(_amount);\r\n        emit Exchange(tx.origin, this, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev receive amount of tokens from exchange and transfer to specified address. Must be called only from exchange contract\r\n     * @param _amount amount of tokens to receive\r\n     * @param _to address for transferring exchanged tokens\r\n     * @return true on success.\r\n     *          false on:\r\n     *              nothing =)\r\n     *          revert on:\r\n     *              exchange address is not configured\r\n     *              called not by configured exchange address\r\n     */\r\n    function __targetExchangeAndSpendCallback(address _to, uint _amount) public whenConfigured onlyExchange returns (bool success) {\r\n        balances[_to] = balances[_to].add(_amount);\r\n        exchangesReceived[_to] = exchangesReceived[_to].add(_amount);\r\n        emit ExchangeSpent(tx.origin, this, _to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/BitoxToken.sol\r\n\r\n/**\r\n * @title Bitox token contract.\r\n */\r\ncontract BitoxToken is BaseExchangeableToken {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"BitoxTokens\";\r\n\r\n    string public constant symbol = \"BITOX\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint internal constant ONE_TOKEN = 1e18;\r\n\r\n    constructor(uint totalSupplyTokens_) public {\r\n        locked = false;\r\n        totalSupply = totalSupplyTokens_ * ONE_TOKEN;\r\n        address creator = msg.sender;\r\n        balances[creator] = totalSupply;\r\n\r\n        emit Transfer(0, this, totalSupply);\r\n        emit Transfer(this, creator, balances[creator]);\r\n    }\r\n\r\n    // Disable direct payments\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"changeExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"__targetExchangeAndSpendCallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetContract\",\"type\":\"address\"},{\"name\":\"_exchanger\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"__exchangerCallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetContract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"exchangeAndSpend\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"__targetExchangeCallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetContract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exchangeToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"creditedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupplyTokens_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"ExchangeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_targetContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_targetContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeSpent\",\"type\":\"event\"}]", "ContractName": "BitoxToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c987c971703fdb0670a9f74d0f213e25e58d20ff738e816290c7234688c62031"}