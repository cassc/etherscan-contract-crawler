{"SourceCode": "// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/bridge/DepositManager.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\ninterface IDepositManagerStorage {\r\n    function bulkSend(address[] calldata token, address[] calldata user, uint[] calldata amount) external;\r\n}\r\n\r\ninterface IDepositManagerState {\r\n    function addState(address token, address user, uint amount) external;\r\n}\r\n\r\ncontract DepositManager {\r\n    address public owner;\r\n    IDepositManagerStorage public _managerStorage;\r\n    IDepositManagerState public _managerState;\r\n    uint256 public _fee;\r\n\r\n    constructor(uint fee){\r\n        _fee = fee;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    event DepositERC20(address, address, uint);\r\n    event DepositEther(address, uint);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not the owner!\");\r\n        _;\r\n    }\r\n\r\n    function depositEther() public payable {\r\n        require(msg.value > _fee, \"The amount of eth must be more than the fee\");\r\n        \r\n        uint amount = msg.value - _fee;\r\n        (bool sent, ) = payable(address(_managerStorage)).call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        _managerState.addState(address(0), msg.sender, amount);\r\n\r\n        emit DepositEther(msg.sender, amount);\r\n    }\r\n\r\n    function depositERC20(IERC20 token, uint amount) public payable {\r\n        require(msg.value >= _fee, \"Fee is not enough\");\r\n        \r\n        (bool sent, ) = payable(address(_managerStorage)).call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n\r\n        (bool success) = token.transferFrom(msg.sender, address(_managerStorage), amount);\r\n        require(success, \"Failed to send token\");\r\n        _managerState.addState(address(token), msg.sender, amount);\r\n\r\n        emit DepositERC20(msg.sender, address(token) , amount);\r\n    }\r\n\r\n    function setManagerStorage(IDepositManagerStorage managerStorage) public onlyOwner {\r\n        _managerStorage = managerStorage;\r\n    }\r\n\r\n    function setManagerState(IDepositManagerState managerState) public onlyOwner {\r\n        _managerState = managerState;\r\n    }\r\n\r\n    function setNewOwner(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setFee(uint fee) external onlyOwner {\r\n        _fee = fee;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DepositERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DepositEther\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_managerState\",\"outputs\":[{\"internalType\":\"contract IDepositManagerState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_managerStorage\",\"outputs\":[{\"internalType\":\"contract IDepositManagerStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositManagerState\",\"name\":\"managerState\",\"type\":\"address\"}],\"name\":\"setManagerState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositManagerStorage\",\"name\":\"managerStorage\",\"type\":\"address\"}],\"name\":\"setManagerStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DepositManager", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000002386f26fc10000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://80a0c1e4e99e1be03420a483f670eff997b96d0e7b501c3cdbd946597f18ddb6"}