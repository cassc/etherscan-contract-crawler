// SPDX-License-Identifier: AGPL-3.0-or-later

pragma solidity >=0.8.6;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IERC4626 is IERC20 {
    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);

    event Withdraw(
        address indexed caller,
        address indexed receiver,
        address indexed owner,
        uint256 assets,
        uint256 shares
    );

    /**
     * @notice Total amount of the underlying asset that is “managed” by Vault.
     */
    function totalAssets() external view returns (uint256);

    /**
     * @notice Mints `shares` Vault shares to `receiver` by depositing exactly `amount` of underlying tokens.
     * @return shares Shares minted.
     */
    function deposit(uint256 assets, address receiver) external returns (uint256 shares);

    /**
     * @notice Mints exactly `shares` Vault shares to `receiver` by depositing amount of underlying tokens.
     * @return assets Assets deposited.
     */
    function mint(uint256 shares, address receiver) external returns (uint256 assets);

    /**
     * @notice Burns exactly `shares` from `owner` and sends `assets` of underlying tokens to `receiver`.
     * @return assets Assets withdrawn.
     */
    function redeem(
        uint256 shares,
        address receiver,
        address owner
    ) external returns (uint256 assets);

    /**
     * @notice Burns `shares` from `owner` and sends exactly `assets` of underlying tokens to `receiver`.
     * @return shares Shares burned.
     */
    function withdraw(
        uint256 assets,
        address receiver,
        address owner
    ) external returns (uint256 shares);

    /**
     * @notice Outputs the amount of shares that would be generated by depositing `assets`.
     */
    function previewDeposit(uint256 assets) external view returns (uint256 shares);

    /**
     * @notice Outputs the amount of asset tokens would be necessary to generate the amount of `shares`.
     */
    function previewMint(uint256 shares) external view returns (uint256 amount);

    /**
     * @notice Outputs the amount of shares would be burned to withdraw the `assets` amount.
     */
    function previewWithdraw(uint256 assets) external view returns (uint256 shares);

    /**
     * @notice Outputs the amount of asset tokens would be withdrawn burning a given amount of shares.
     */
    function previewRedeem(uint256 shares) external view returns (uint256 amount);

    /**
     * @notice The amount of shares that the Vault would exchange for
     * the amount of assets provided, in an ideal scenario where all the conditions are met.
     */
    function convertToShares(uint256 assets) external view returns (uint256);

    /**
     * @notice The amount of assets that the Vault would exchange for
     * the amount of shares provided, in an ideal scenario where all the conditions are met.
     */
    function convertToAssets(uint256 shares) external view returns (uint256);

    /**
     * @notice Maximum amount of the underlying asset that can be deposited into
     * the Vault for the `receiver`, through a `deposit` call.
     */
    function maxDeposit(address owner) external view returns (uint256);

    /**
     * @notice Maximum amount of shares that can be minted from the Vault for
     * the `receiver`, through a `mint` call.
     */
    function maxMint(address receiver) external view returns (uint256 maxShares);

    /**
     * @notice Maximum amount of the underlying asset that can be withdrawn from
     * the `owner` balance in the Vault, through a `withdraw` call.
     */
    function maxWithdraw(address owner) external view returns (uint256 maxAssets);

    /**
     * @notice Maximum amount of Vault shares that can be redeemed from
     * the `owner` balance in the Vault, through a `redeem` call.
     */
    function maxRedeem(address owner) external view returns (uint256 maxShares);
}