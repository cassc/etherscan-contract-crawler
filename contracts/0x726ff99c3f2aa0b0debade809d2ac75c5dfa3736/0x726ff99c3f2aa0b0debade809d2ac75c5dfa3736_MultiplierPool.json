{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/multiplier/MultiplierPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IStakingRewards.sol\\\";\\n\\nimport \\\"../interfaces/multiplier/IMultiStake.sol\\\";\\n\\nimport \\\"./MultiplierMath.sol\\\";\\nimport \\\"./FundablePool.sol\\\";\\n\\n/**\\n * @title Multiplier Pool for Float Protocol\\n * @dev The Multiplier Pool provides `rewardTokens` for `stakeTokens` with a\\n * token-over-time distribution, with the function being equal to their\\n * \\\"stake-seconds\\\" divided by the global \\\"stake-seconds\\\".\\n * This is designed to align token distribution with long term stakers.\\n * The longer the hold, the higher the proportion of the pool; and the higher\\n * the multiplier.\\n *\\n * THIS DOES NOT WORK WITH FEE TOKENS / REBASING TOKENS - Use Token Geyser V2 instead.\\n *\\n * This contract was only possible due to a number of existing\\n * open-source contracts including:\\n * - The original [Synthetix rewards contract](https://etherscan.io/address/0xDCB6A51eA3CA5d3Fd898Fd6564757c7aAeC3ca92#code) developed by k06a\\n * - Ampleforth's Token Geyser [V1](https://github.com/ampleforth/token-geyser) and [V2](https://github.com/ampleforth/token-geyser-v2)\\n * - [GYSR.io Token Geyser](https://github.com/gysr-io/core)\\n * - [Alchemist's Aludel](https://github.com/alchemistcoin/alchemist/tree/main/contracts/aludel)\\n */\\ncontract MultiplierPool is\\n  IMultiStake,\\n  AccessControl,\\n  MultiplierMath,\\n  FundablePool\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== CONSTANTS ========== */\\n  bytes32 public constant RECOVER_ROLE = keccak256(\\\"RECOVER_ROLE\\\");\\n  bytes32 public constant ADJUSTER_ROLE = keccak256(\\\"ADJUSTER_ROLE\\\");\\n\\n  /* ========== STATE VARIABLES ========== */\\n  IERC20 public immutable stakeToken;\\n\\n  IBonusScaling.BonusScaling public bonusScaling;\\n\\n  uint256 public hardLockPeriod;\\n\\n  uint256 public lastUpdateTime;\\n\\n  /// @dev {cached} total staked\\n  uint256 internal _totalStaked;\\n\\n  /// @dev {cached} total staked seconds\\n  uint256 internal _totalStakeSeconds;\\n\\n  struct UserData {\\n    // [eD] {cached} total stake from individual stakes\\n    uint256 totalStake;\\n    Stake[] stakes;\\n  }\\n\\n  mapping(address => UserData) internal _users;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  /**\\n   * @notice Construct a new MultiplierPool\\n   * @param _admin The default role controller\\n   * @param _funder The reward distributor\\n   * @param _rewardToken The reward token to distribute\\n   * @param _stakingToken The staking token used to qualify for rewards\\n   * @param _bonusScaling The starting bonus scaling amount\\n   * @param _hardLockPeriod The period for a hard lock to apply (no unstake)\\n   */\\n  constructor(\\n    address _admin,\\n    address _funder,\\n    address _rewardToken,\\n    address _stakingToken,\\n    IBonusScaling.BonusScaling memory _bonusScaling,\\n    uint256 _hardLockPeriod\\n  ) FundablePool(_funder, _rewardToken) {\\n    stakeToken = IERC20(_stakingToken);\\n    bonusScaling = _bonusScaling;\\n    hardLockPeriod = _hardLockPeriod;\\n\\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    _setupRole(ADJUSTER_ROLE, _admin);\\n    _setupRole(RECOVER_ROLE, _admin);\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  event Staked(address indexed user, uint256 amount);\\n  event Withdrawn(address indexed user, uint256 amount);\\n  event Recovered(address token, uint256 amount);\\n\\n  /* ========== VIEWS ========== */\\n\\n  /**\\n   * @notice The total reward producing staked supply (total quantity to distribute)\\n   */\\n  function totalSupply() public view virtual returns (uint256) {\\n    return _totalStaked;\\n  }\\n\\n  function getUserData(address user)\\n    external\\n    view\\n    returns (UserData memory userData)\\n  {\\n    return _users[user];\\n  }\\n\\n  function getCurrentTotalStakeSeconds() public view returns (uint256) {\\n    return getFutureTotalStakeSeconds(block.timestamp);\\n  }\\n\\n  function getFutureTotalStakeSeconds(uint256 timestamp)\\n    public\\n    view\\n    returns (uint256 totalStakeSeconds)\\n  {\\n    totalStakeSeconds = calculateTotalStakeSeconds(\\n      _totalStaked,\\n      _totalStakeSeconds,\\n      lastUpdateTime,\\n      timestamp\\n    );\\n  }\\n\\n  /**\\n   * @notice The total staked balance of the staker.\\n   */\\n  function balanceOf(address staker) public view virtual returns (uint256) {\\n    return _users[staker].totalStake;\\n  }\\n\\n  function earned(address staker) external view virtual returns (uint256) {\\n    UnstakeOutput memory out =\\n      simulateUnstake(\\n        _users[staker].stakes,\\n        balanceOf(staker),\\n        getCurrentTotalStakeSeconds(),\\n        unlockedRewardAmount().add(pendingRewardAmount(block.timestamp)),\\n        block.timestamp,\\n        bonusScaling\\n      );\\n    return out.rewardDue;\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * @notice Stakes `amount` tokens from `msg.sender`\\n   *\\n   * Emits a {Staked} event.\\n   * Can emit a {RewardsUnlocked} event if additional rewards are now available.\\n   */\\n  function stake(uint256 amount) external virtual {\\n    _update();\\n    _stakeFor(msg.sender, msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Stakes `amount` tokens from `msg.sender` on behalf of `staker`\\n   *\\n   * Emits a {Staked} event.\\n   * Can emit a {RewardsUnlocked} event if additional rewards are now available.\\n   */\\n  function stakeFor(address staker, uint256 amount) external virtual {\\n    _update();\\n    _stakeFor(msg.sender, staker, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw an `amount` from the pool including any rewards due for that stake\\n   *\\n   * Emits a {Withdrawn} event.\\n   * Can emit a {RewardsPaid} event if due rewards.\\n   * Can emit a {RewardsUnlocked} event if additional rewards are now available.\\n   */\\n  function withdraw(uint256 amount) external virtual {\\n    _update();\\n    _unstake(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Exit the pool, taking any rewards due and any staked tokens\\n   *\\n   * Emits a {Withdrawn} event.\\n   * Can emit a {RewardsPaid} event if due rewards.\\n   * Can emit a {RewardsUnlocked} event if additional rewards are now available.\\n   */\\n  function exit() external virtual {\\n    _update();\\n    _unstake(msg.sender, balanceOf(msg.sender));\\n  }\\n\\n  /**\\n   * @notice Retrieve any rewards due to `msg.sender`\\n   *\\n   * Can emit a {RewardsPaid} event if due rewards.\\n   * Can emit a {RewardsUnlocked} event if additional rewards are now available.\\n   *\\n   * Requirements:\\n   * - `msg.sender` must have some tokens staked\\n   */\\n  function getReward() external virtual {\\n    _update();\\n    address staker = msg.sender;\\n    uint256 totalStake = balanceOf(staker);\\n    uint256 reward = _unstakeAccounting(staker, totalStake);\\n    _stakeAccounting(staker, totalStake);\\n\\n    if (reward != 0) {\\n      _distributeRewards(staker, reward);\\n    }\\n  }\\n\\n  /**\\n   * @dev Stakes `amount` tokens from `payer` to `staker`, increasing the total supply.\\n   *\\n   * Emits a {Staked} event.\\n   *\\n   * Requirements:\\n   * - `staker` cannot be zero address.\\n   * - `payer` must have at least `amount` tokens\\n   * - `payer` must approve this contract for at least `amount`\\n   */\\n  function _stakeFor(\\n    address payer,\\n    address staker,\\n    uint256 amount\\n  ) internal virtual {\\n    require(staker != address(0), \\\"MultiplierPool/ZeroAddressS\\\");\\n    require(amount != 0, \\\"MultiplierPool/NoAmount\\\");\\n\\n    _beforeStake(payer, staker, amount);\\n\\n    _stakeAccounting(staker, amount);\\n\\n    emit Staked(staker, amount);\\n    stakeToken.safeTransferFrom(payer, address(this), amount);\\n  }\\n\\n  /**\\n   * @dev Withdraws `amount` tokens from `staker`, reducing the total supply.\\n   *\\n   * Emits a {Withdrawn} event.\\n   *\\n   * Requirements:\\n   * - `staker` cannot be zero address.\\n   * - `staker` must have at least `amount` staked.\\n   */\\n  function _unstake(address staker, uint256 amount) internal virtual {\\n    // Sense check input\\n    require(staker != address(0), \\\"MultiplierPool/ZeroAddressW\\\");\\n    require(amount != 0, \\\"MultiplierPool/NoAmount\\\");\\n\\n    _beforeWithdraw(staker, amount);\\n\\n    uint256 reward = _unstakeAccounting(staker, amount);\\n\\n    if (reward != 0) {\\n      _distributeRewards(staker, reward);\\n    }\\n\\n    emit Withdrawn(staker, amount);\\n    stakeToken.safeTransfer(staker, amount);\\n  }\\n\\n  /**\\n   * @dev Performs necessary accounting for unstake operation\\n   * Assumes:\\n   * - `staker` is a valid address\\n   * - `amount` is non-zero\\n   * - `_update` has been called (and hence `_totalStakeSeconds` / `lockedRewardAmount` / `lastUpdateTime`)\\n   * - `rewardDue` will be transfered to `staker` after accounting\\n   * - `amount` will be transfered back to `staker` after accounting\\n   * - `Withdraw` / `RewardsPaid` will be emitted\\n   *\\n   * State:\\n   * - `_users[staker].stakes` will remove entries necessary to cover amount\\n   * - `_users[staker].totalStake` will be decreased\\n   * - `_totalStaked` will be reduced by amount\\n   * - `_totalStakeSeconds` will be reduced by unstaked stake seconds\\n   * @param staker Staker address to unstake from\\n   * @param amount Stake Tokens to be unstaked\\n   */\\n  function _unstakeAccounting(address staker, uint256 amount)\\n    internal\\n    virtual\\n    returns (uint256 rewardDue)\\n  {\\n    // Fetch User storage reference\\n    UserData storage userData = _users[staker];\\n\\n    require(userData.totalStake >= amount, \\\"MultiplierPool/ExceedsStake\\\");\\n    // {cached} value would be de-synced\\n    assert(_totalStaked >= amount);\\n\\n    UnstakeOutput memory out =\\n      simulateUnstake(\\n        userData.stakes,\\n        amount,\\n        getCurrentTotalStakeSeconds(),\\n        unlockedRewardAmount(),\\n        block.timestamp,\\n        bonusScaling\\n      );\\n\\n    // Update storage data\\n    if (out.newStakesCount == 0) {\\n      delete userData.stakes;\\n    } else {\\n      // Remove all fully unstaked amounts\\n      while (userData.stakes.length > out.newStakesCount) {\\n        userData.stakes.pop();\\n      }\\n\\n      if (out.lastStakeAmount != 0) {\\n        userData.stakes[out.newStakesCount.sub(1)].amount = out.lastStakeAmount;\\n      }\\n    }\\n\\n    // Update {cached} totals\\n    userData.totalStake = userData.totalStake.sub(amount);\\n    _totalStaked = _totalStaked.sub(amount);\\n    _totalStakeSeconds = out.newTotalStakeSeconds;\\n\\n    // Calculate rewards\\n    rewardDue = out.rewardDue;\\n  }\\n\\n  /**\\n   * @dev Performs necessary accounting for stake operation\\n   * Assumes:\\n   * - `staker` is a valid address\\n   * - `amount` is non-zero\\n   * - `_update` has been called (and hence `_totalStakeSeconds` / `lockedRewardAmount` / `lastUpdateTime` are modified)\\n   * - `amount` has been transfered to the contract\\n   *\\n   * State:\\n   * - `_users[staker].stakes` will add a new entry for amount\\n   * - `_users[staker].totalStake` will be increased\\n   * - `_totalStaked` will be increased by amount\\n   * @param staker Staker address to stake for\\n   * @param amount Stake tokens to be staked\\n   */\\n  function _stakeAccounting(address staker, uint256 amount) internal {\\n    UserData storage userData = _users[staker];\\n\\n    // Add new stake entry\\n    userData.stakes.push(Stake(amount, block.timestamp));\\n\\n    // Update {cached} totals\\n    _totalStaked = _totalStaked.add(amount);\\n    userData.totalStake = userData.totalStake.add(amount);\\n  }\\n\\n  /**\\n   * @dev Updates the Pool to:\\n   * - Releases token rewards for the current timestamp\\n   * - Updates the `_totalStakeSeconds` for the entire `_totalStake`\\n   * - Set `lastUpdateTime` to be block.timestamp\\n   */\\n  function _update() internal {\\n    _unlockRewards();\\n\\n    _totalStakeSeconds = _totalStakeSeconds.add(\\n      calculateStakeSeconds(_totalStaked, lastUpdateTime, block.timestamp)\\n    );\\n    lastUpdateTime = block.timestamp;\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  /* ----- FUNDER_ROLE ----- */\\n\\n  /**\\n   * @notice Fund pool by locking up reward tokens for future distribution\\n   * @param amount number of reward tokens to lock up as funding\\n   * @param duration period (seconds) over which funding will be unlocked\\n   * @param start time (seconds) at which funding begins to unlock\\n   */\\n  function fund(\\n    uint256 amount,\\n    uint256 duration,\\n    uint256 start\\n  ) external onlyFunder {\\n    _update();\\n    if (rewardToken == stakeToken) {\\n      uint256 allowed =\\n        rewardToken.balanceOf(address(this)).sub(totalRewardAmount).sub(\\n          _totalStaked\\n        );\\n\\n      require(allowed >= amount, \\\"FundablePool/InsufficentBalance\\\");\\n    }\\n    _fund(amount, duration, start);\\n  }\\n\\n  /**\\n   * @notice Clean a pool by expiring old rewards\\n   */\\n  function clean() external onlyFunder {\\n    _cleanRewardSchedules();\\n  }\\n\\n  /* ----- ADJUSTER_ROLE ----- */\\n  /**\\n   * @notice Modify the bonus scaling once started\\n   * @dev Adjusters should be timelocked.\\n   * @param _bonusScaling Bonus Scaling parameters (min, max, period)\\n   */\\n  function modifyBonusScaling(BonusScaling memory _bonusScaling) external {\\n    require(hasRole(ADJUSTER_ROLE, msg.sender), \\\"MultiplierPool/AdjusterRole\\\");\\n    bonusScaling = _bonusScaling;\\n  }\\n\\n  /**\\n   * @notice Modify the hard lock (allows release after a set period)\\n   * @dev Adjusters should be timelocked.\\n   * @param _hardLockPeriod [seconds] length of time to refuse release of staked funds\\n   */\\n  function modifyHardLock(uint256 _hardLockPeriod) external {\\n    require(hasRole(ADJUSTER_ROLE, msg.sender), \\\"MultiplierPool/AdjusterRole\\\");\\n    hardLockPeriod = _hardLockPeriod;\\n  }\\n\\n  /* ----- RECOVER_ROLE ----- */\\n\\n  /**\\n   * @notice Provide accidental token retrieval.\\n   * @dev Sourced from synthetix/contracts/StakingRewards.sol\\n   */\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external {\\n    require(hasRole(RECOVER_ROLE, msg.sender), \\\"MultiplierPool/RecoverRole\\\");\\n    require(\\n      tokenAddress != address(stakeToken),\\n      \\\"MultiplierPool/NoRecoveryOfStake\\\"\\n    );\\n    require(\\n      tokenAddress != address(rewardToken),\\n      \\\"MultiplierPool/NoRecoveryOfReward\\\"\\n    );\\n\\n    emit Recovered(tokenAddress, tokenAmount);\\n\\n    IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n  }\\n\\n  /* ========== HOOKS ========== */\\n\\n  /**\\n   * @dev Hook that is called before any staking of tokens.\\n   *\\n   * Calling conditions:\\n   *\\n   * - `amount` of `payer`'s tokens will be staked into the pool\\n   * - `staker` can withdraw.\\n   * N.B. this is not called on claiming rewards\\n   */\\n  function _beforeStake(\\n    address payer,\\n    address staker,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called before any withdrawal of tokens.\\n   *\\n   * Calling conditions:\\n   *\\n   * - `amount` of ``from``'s tokens will be withdrawn into the pool\\n   * N.B. this is not called on claiming rewards\\n   */\\n  function _beforeWithdraw(address from, uint256) internal virtual {\\n    // Check hard lock - was the last stake > hardLockPeriod\\n    Stake[] memory userStakes = _users[from].stakes;\\n    Stake memory lastStake = userStakes[userStakes.length.sub(1)];\\n    require(\\n      lastStake.timestamp.add(hardLockPeriod) <= block.timestamp,\\n      \\\"MultiplierPool/HardLockNotPassed\\\"\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"synthetix/contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\ninterface IStakingRewards {\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Mutative\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/interfaces/multiplier/IMultiStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\ninterface IMultiStake {\\n  struct Stake {\\n    // [e18] Staked token amount\\n    uint256 amount;\\n    // [seconds] block timestamp at point of stake\\n    uint256 timestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/multiplier/MultiplierMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../external-lib/SafeDecimalMath.sol\\\";\\n\\nimport \\\"../interfaces/multiplier/IMultiStake.sol\\\";\\nimport \\\"../interfaces/multiplier/IBonusScaling.sol\\\";\\n\\ncontract MultiplierMath is IBonusScaling, IMultiStake {\\n  using SafeMath for uint256;\\n  using SafeDecimalMath for uint256;\\n\\n  struct UnstakeOutput {\\n    // [e18] amount left staked in last stake array\\n    uint256 lastStakeAmount;\\n    // [e18] number of stakes left\\n    uint256 newStakesCount;\\n    // [e18] stake seconds\\n    uint256 rawStakeSeconds;\\n    // [e18] bonus weighted stake seconds\\n    uint256 bonusWeightedStakeSeconds;\\n    // [e18] reward tokens due\\n    uint256 rewardDue;\\n    // [e18] total stake seconds adjusting for new unstaking\\n    uint256 newTotalStakeSeconds;\\n  }\\n\\n  /**\\n   * @notice Calculate accrued stake seconds given a period\\n   * @param amount [eD] token amount\\n   * @param start [seconds] epoch timestamp\\n   * @param end [seconds] epoch timestamp up to\\n   * @return stakeSeconds accrued stake seconds\\n   */\\n  function calculateStakeSeconds(\\n    uint256 amount,\\n    uint256 start,\\n    uint256 end\\n  ) internal pure returns (uint256 stakeSeconds) {\\n    uint256 duration = end.sub(start);\\n    stakeSeconds = duration.mul(amount);\\n    return stakeSeconds;\\n  }\\n\\n  /**\\n   * @dev Calculate the time bonus\\n   * @param bs BonusScaling used to calculate time bonus\\n   * @param duration length of time staked for\\n   * @return bonus [e18] fixed point fraction, UNIT = +100%\\n   */\\n  function timeBonus(BonusScaling memory bs, uint256 duration)\\n    internal\\n    pure\\n    returns (uint256 bonus)\\n  {\\n    if (duration >= bs.period) {\\n      return bs.max;\\n    }\\n\\n    uint256 bonusScale = bs.max.sub(bs.min);\\n    uint256 bonusAddition = bonusScale.mul(duration).div(bs.period);\\n    bonus = bs.min.add(bonusAddition);\\n  }\\n\\n  /**\\n   * @dev Calculate total stake seconds\\n   */\\n  function calculateTotalStakeSeconds(\\n    uint256 cachedTotalStakeAmount,\\n    uint256 cachedTotalStakeSeconds,\\n    uint256 lastUpdateTimestamp,\\n    uint256 timestamp\\n  ) internal pure returns (uint256 totalStakeSeconds) {\\n    if (timestamp == lastUpdateTimestamp) return cachedTotalStakeSeconds;\\n\\n    uint256 additionalStakeSeconds =\\n      calculateStakeSeconds(\\n        cachedTotalStakeAmount,\\n        lastUpdateTimestamp,\\n        timestamp\\n      );\\n\\n    totalStakeSeconds = cachedTotalStakeSeconds.add(additionalStakeSeconds);\\n  }\\n\\n  /**\\n   * @dev Calculates reward from a given set of stakes\\n   * - Should check for total stake before calling\\n   * @param stakes Set of stakes\\n   */\\n  function simulateUnstake(\\n    Stake[] memory stakes,\\n    uint256 amountToUnstake,\\n    uint256 totalStakeSeconds,\\n    uint256 unlockedRewardAmount,\\n    uint256 timestamp,\\n    BonusScaling memory bs\\n  ) internal pure returns (UnstakeOutput memory out) {\\n    uint256 stakesToDrop = 0;\\n    while (amountToUnstake > 0) {\\n      uint256 targetIndex = stakes.length.sub(stakesToDrop).sub(1);\\n      Stake memory lastStake = stakes[targetIndex];\\n\\n      uint256 currentAmount;\\n      if (lastStake.amount > amountToUnstake) {\\n        // set current amount to remaining unstake amount\\n        currentAmount = amountToUnstake;\\n        // amount of last stake is reduced\\n        out.lastStakeAmount = lastStake.amount.sub(amountToUnstake);\\n      } else {\\n        // set current amount to amount of last stake\\n        currentAmount = lastStake.amount;\\n        // add to stakes to drop\\n        stakesToDrop += 1;\\n      }\\n\\n      amountToUnstake = amountToUnstake.sub(currentAmount);\\n\\n      // Calculate staked seconds from amount\\n      uint256 stakeSeconds =\\n        calculateStakeSeconds(currentAmount, lastStake.timestamp, timestamp);\\n\\n      // [e18] fixed point time bonus, 100% + X%\\n      uint256 bonus =\\n        SafeDecimalMath.UNIT.add(\\n          timeBonus(bs, timestamp.sub(lastStake.timestamp))\\n        );\\n\\n      out.rawStakeSeconds = out.rawStakeSeconds.add(stakeSeconds);\\n      out.bonusWeightedStakeSeconds = out.bonusWeightedStakeSeconds.add(\\n        stakeSeconds.multiplyDecimal(bonus)\\n      );\\n    }\\n\\n    // Update virtual caches\\n    out.newTotalStakeSeconds = totalStakeSeconds.sub(out.rawStakeSeconds);\\n\\n    //              M_time * h\\n    // R = K *  ------------------\\n    //          H - h + M_time * h\\n    //\\n    // R - rewards due\\n    // K - total unlocked rewards\\n    // M_time - bonus related to time\\n    // h - user stake seconds\\n    // H - total stake seconds\\n    // H-h - new total stake seconds\\n    // R = 0 if H = 0\\n    if (totalStakeSeconds != 0) {\\n      out.rewardDue = unlockedRewardAmount\\n        .mul(out.bonusWeightedStakeSeconds)\\n        .div(out.newTotalStakeSeconds.add(out.bonusWeightedStakeSeconds));\\n    }\\n\\n    return\\n      UnstakeOutput(\\n        out.lastStakeAmount,\\n        stakes.length.sub(stakesToDrop),\\n        out.rawStakeSeconds,\\n        out.bonusWeightedStakeSeconds,\\n        out.rewardDue,\\n        out.newTotalStakeSeconds\\n      );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/multiplier/FundablePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nabstract contract FundablePool is AccessControl {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  struct RewardSchedule {\\n    // [eR] Amount of reward token contributed. (immutable)\\n    uint256 amount;\\n    // [seconds] Duration of funding round (immutable)\\n    uint256 duration;\\n    // [seconds] Epoch timestamp for start time (immutable)\\n    uint256 start;\\n    // [eR] Amount still locked\\n    uint256 amountLocked;\\n    // [seconds] Last updated epoch timestamp\\n    uint256 updated;\\n  }\\n\\n  /* ========== CONSTANTS ========== */\\n  bytes32 public constant FUNDER_ROLE = keccak256(\\\"FUNDER_ROLE\\\");\\n\\n  /* ========== STATE VARIABLES ========== */\\n  IERC20 public immutable rewardToken;\\n\\n  /// @notice [eR] {cached} total reward amount <=> rewardToken.balanceOf\\n  uint256 public totalRewardAmount;\\n\\n  /// @notice [eR] {cached} locked reward amount\\n  uint256 public lockedRewardAmount;\\n\\n  /// @dev All non-expired reward schedules\\n  RewardSchedule[] internal _rewardSchedules;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n  /**\\n   * @notice Construct a new FundablePool\\n   */\\n  constructor(address _funder, address _rewardToken) {\\n    rewardToken = IERC20(_rewardToken);\\n    _setupRole(FUNDER_ROLE, _funder);\\n  }\\n\\n  /* ========== EVENTS ========== */\\n  event RewardsFunded(uint256 amount, uint256 start, uint256 duration);\\n  event RewardsUnlocked(uint256 amount);\\n  event RewardsPaid(address indexed user, uint256 reward);\\n  event RewardsExpired(uint256 amount, uint256 start);\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier onlyFunder() {\\n    require(hasRole(FUNDER_ROLE, msg.sender), \\\"FundablePool/OnlyFunder\\\");\\n    _;\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  /**\\n   * @notice All active/pending reward schedules\\n   */\\n  function rewardSchedules() external view returns (RewardSchedule[] memory) {\\n    return _rewardSchedules;\\n  }\\n\\n  /**\\n   * @notice Rewards that are unlocked\\n   */\\n  function unlockedRewardAmount() public view returns (uint256) {\\n    return totalRewardAmount.sub(lockedRewardAmount);\\n  }\\n\\n  /**\\n   * @notice Rewards that are pending unlock (will be unlocked on next update)\\n   */\\n  function pendingRewardAmount(uint256 timestamp)\\n    public\\n    view\\n    returns (uint256 unlockedRewards)\\n  {\\n    for (uint256 i = 0; i < _rewardSchedules.length; i++) {\\n      unlockedRewards = unlockedRewards.add(unlockable(i, timestamp));\\n    }\\n  }\\n\\n  /**\\n   * @notice Compute the number of unlockable rewards for the given RewardSchedule\\n   * @param idx index of RewardSchedule\\n   * @return the number of unlockable rewards\\n   */\\n  function unlockable(uint256 idx, uint256 timestamp)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    RewardSchedule memory rs = _rewardSchedules[idx];\\n\\n    // If still to start, then 0 unlocked\\n    if (timestamp <= rs.start) {\\n      return 0;\\n    }\\n    // If all used of rs used up, there is 0 left to unlock\\n    if (rs.amountLocked == 0) {\\n      return 0;\\n    }\\n\\n    // if there is dust left, use it up.\\n    if (timestamp >= rs.start.add(rs.duration)) {\\n      return rs.amountLocked;\\n    }\\n\\n    // N.B. rs.update >= rs.start;\\n    // => rs.start <= timeElapsed < rs.start + rs.duration\\n    uint256 timeElapsed = timestamp.sub(rs.updated);\\n    return timeElapsed.mul(rs.amount).div(rs.duration);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  /* ----- Funder ----- */\\n\\n  /**\\n   * @notice Fund pool using locked up reward tokens for future distribution\\n   * @dev Assumes: onlyFunder\\n   * @param amount number of reward tokens to lock up as funding\\n   * @param duration period (seconds) over which funding will be unlocked\\n   * @param start time (seconds) at which funding begins to unlock\\n   */\\n  function _fund(\\n    uint256 amount,\\n    uint256 duration,\\n    uint256 start\\n  ) internal {\\n    require(duration != 0, \\\"FundablePool/ZeroDuration\\\");\\n    require(start >= block.timestamp, \\\"FundablePool/HistoricFund\\\");\\n\\n    uint256 allowed =\\n      rewardToken.balanceOf(address(this)).sub(totalRewardAmount);\\n\\n    require(allowed >= amount, \\\"FundablePool/InsufficentBalance\\\");\\n\\n    // Update {cached} values\\n    totalRewardAmount = totalRewardAmount.add(amount);\\n    lockedRewardAmount = lockedRewardAmount.add(amount);\\n\\n    // create new funding\\n    _rewardSchedules.push(\\n      RewardSchedule({\\n        amount: amount,\\n        amountLocked: amount,\\n        updated: start,\\n        start: start,\\n        duration: duration\\n      })\\n    );\\n\\n    emit RewardsFunded(amount, start, duration);\\n  }\\n\\n  /**\\n   * @notice Clean up stale reward schedules\\n   * @dev Assumes: onlyFunder\\n   */\\n  function _cleanRewardSchedules() internal {\\n    // check for stale reward schedules to expire\\n    uint256 removed = 0;\\n    // Gas will hit cap before this becomes an overflow problem\\n    uint256 originalSize = _rewardSchedules.length;\\n    for (uint256 i = 0; i < originalSize; i++) {\\n      uint256 idx = i - removed;\\n      RewardSchedule storage funding = _rewardSchedules[idx];\\n\\n      if (\\n        unlockable(idx, block.timestamp) == 0 &&\\n        block.timestamp >= funding.start.add(funding.duration)\\n      ) {\\n        emit RewardsExpired(funding.amount, funding.start);\\n\\n        // remove at idx by copying last element here, then popping off last\\n        // (we don't care about order)\\n        _rewardSchedules[idx] = _rewardSchedules[_rewardSchedules.length - 1];\\n        _rewardSchedules.pop();\\n        removed++;\\n      }\\n    }\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  /**\\n   * @dev Unlocks reward tokens based on funding schedules\\n   * @return unlockedRewards number of rewards unlocked\\n   */\\n  function _unlockRewards() internal returns (uint256 unlockedRewards) {\\n    // get unlockable rewards for each funding schedule\\n    for (uint256 i = 0; i < _rewardSchedules.length; i++) {\\n      uint256 unlockableRewardAtIdx = unlockable(i, block.timestamp);\\n      RewardSchedule storage funding = _rewardSchedules[i];\\n      if (unlockableRewardAtIdx != 0) {\\n        funding.amountLocked = funding.amountLocked.sub(unlockableRewardAtIdx);\\n        funding.updated = block.timestamp;\\n        unlockedRewards = unlockedRewards.add(unlockableRewardAtIdx);\\n      }\\n    }\\n\\n    if (unlockedRewards != 0) {\\n      // Update {cached} lockedRewardAmount\\n      lockedRewardAmount = lockedRewardAmount.sub(unlockedRewards);\\n      emit RewardsUnlocked(unlockedRewards);\\n    }\\n  }\\n\\n  /**\\n   * @dev Distribute reward tokens to user\\n   *\\n   * Assumptions:\\n   * - `user` deserves this amount\\n   *\\n   * @param user address of user receiving reward\\n   * @param amount number of reward tokens to be distributed\\n   */\\n  function _distributeRewards(address user, uint256 amount) internal {\\n    assert(amount <= totalRewardAmount);\\n\\n    // update {cached} totalRewardAmount\\n    totalRewardAmount = totalRewardAmount.sub(amount);\\n\\n    rewardToken.safeTransfer(user, amount);\\n    emit RewardsPaid(user, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/external-lib/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\nlibrary SafeDecimalMath {\\n  using SafeMath for uint256;\\n\\n  /* Number of decimal places in the representations. */\\n  uint8 public constant decimals = 18;\\n  uint8 public constant highPrecisionDecimals = 27;\\n\\n  /* The number representing 1.0. */\\n  uint256 public constant UNIT = 10**uint256(decimals);\\n\\n  /* The number representing 1.0 for higher fidelity numbers. */\\n  uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\\n  uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\\n    10**uint256(highPrecisionDecimals - decimals);\\n\\n  /**\\n   * @return Provides an interface to UNIT.\\n   */\\n  function unit() external pure returns (uint256) {\\n    return UNIT;\\n  }\\n\\n  /**\\n   * @return Provides an interface to PRECISE_UNIT.\\n   */\\n  function preciseUnit() external pure returns (uint256) {\\n    return PRECISE_UNIT;\\n  }\\n\\n  /**\\n   * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n   * decimals.\\n   *\\n   * @dev A unit factor is divided out after the product of x and y is evaluated,\\n   * so that product must be less than 2**256. As this is an integer division,\\n   * the internal division always rounds down. This helps save on gas. Rounding\\n   * is more expensive on gas.\\n   */\\n  function multiplyDecimal(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    /* Divide by UNIT to remove the extra factor introduced by the product. */\\n    return x.mul(y) / UNIT;\\n  }\\n\\n  /**\\n   * @return The result of safely multiplying x and y, interpreting the operands\\n   * as fixed-point decimals of the specified precision unit.\\n   *\\n   * @dev The operands should be in the form of a the specified unit factor which will be\\n   * divided out after the product of x and y is evaluated, so that product must be\\n   * less than 2**256.\\n   *\\n   * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n   * Rounding is useful when you need to retain fidelity for small decimal numbers\\n   * (eg. small fractions or percentages).\\n   */\\n  function _multiplyDecimalRound(\\n    uint256 x,\\n    uint256 y,\\n    uint256 precisionUnit\\n  ) private pure returns (uint256) {\\n    /* Divide by UNIT to remove the extra factor introduced by the product. */\\n    uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n    if (quotientTimesTen % 10 >= 5) {\\n      quotientTimesTen += 10;\\n    }\\n\\n    return quotientTimesTen / 10;\\n  }\\n\\n  /**\\n   * @return The result of safely multiplying x and y, interpreting the operands\\n   * as fixed-point decimals of a precise unit.\\n   *\\n   * @dev The operands should be in the precise unit factor which will be\\n   * divided out after the product of x and y is evaluated, so that product must be\\n   * less than 2**256.\\n   *\\n   * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n   * Rounding is useful when you need to retain fidelity for small decimal numbers\\n   * (eg. small fractions or percentages).\\n   */\\n  function multiplyDecimalRoundPrecise(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n  }\\n\\n  /**\\n   * @return The result of safely multiplying x and y, interpreting the operands\\n   * as fixed-point decimals of a standard unit.\\n   *\\n   * @dev The operands should be in the standard unit factor which will be\\n   * divided out after the product of x and y is evaluated, so that product must be\\n   * less than 2**256.\\n   *\\n   * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n   * Rounding is useful when you need to retain fidelity for small decimal numbers\\n   * (eg. small fractions or percentages).\\n   */\\n  function multiplyDecimalRound(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return _multiplyDecimalRound(x, y, UNIT);\\n  }\\n\\n  /**\\n   * @return The result of safely dividing x and y. The return value is a high\\n   * precision decimal.\\n   *\\n   * @dev y is divided after the product of x and the standard precision unit\\n   * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n   * this is an integer division, the result is always rounded down.\\n   * This helps save on gas. Rounding is more expensive on gas.\\n   */\\n  function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n    /* Reintroduce the UNIT factor that will be divided out by y. */\\n    return x.mul(UNIT).div(y);\\n  }\\n\\n  /**\\n   * @return The result of safely dividing x and y. The return value is as a rounded\\n   * decimal in the precision unit specified in the parameter.\\n   *\\n   * @dev y is divided after the product of x and the specified precision unit\\n   * is evaluated, so the product of x and the specified precision unit must\\n   * be less than 2**256. The result is rounded to the nearest increment.\\n   */\\n  function _divideDecimalRound(\\n    uint256 x,\\n    uint256 y,\\n    uint256 precisionUnit\\n  ) private pure returns (uint256) {\\n    uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n    if (resultTimesTen % 10 >= 5) {\\n      resultTimesTen += 10;\\n    }\\n\\n    return resultTimesTen / 10;\\n  }\\n\\n  /**\\n   * @return The result of safely dividing x and y. The return value is as a rounded\\n   * standard precision decimal.\\n   *\\n   * @dev y is divided after the product of x and the standard precision unit\\n   * is evaluated, so the product of x and the standard precision unit must\\n   * be less than 2**256. The result is rounded to the nearest increment.\\n   */\\n  function divideDecimalRound(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return _divideDecimalRound(x, y, UNIT);\\n  }\\n\\n  /**\\n   * @return The result of safely dividing x and y. The return value is as a rounded\\n   * high precision decimal.\\n   *\\n   * @dev y is divided after the product of x and the high precision unit\\n   * is evaluated, so the product of x and the high precision unit must\\n   * be less than 2**256. The result is rounded to the nearest increment.\\n   */\\n  function divideDecimalRoundPrecise(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return _divideDecimalRound(x, y, PRECISE_UNIT);\\n  }\\n\\n  /**\\n   * @dev Convert a standard decimal representation to a high precision one.\\n   */\\n  function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n    return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n  }\\n\\n  /**\\n   * @dev Convert a high precision decimal to a standard decimal representation.\\n   */\\n  function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n    uint256 quotientTimesTen =\\n      i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n    if (quotientTimesTen % 10 >= 5) {\\n      quotientTimesTen += 10;\\n    }\\n\\n    return quotientTimesTen / 10;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/interfaces/multiplier/IBonusScaling.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\ninterface IBonusScaling {\\n  /**\\n   * Scale staked seconds according to multiplier\\n   */\\n  struct BonusScaling {\\n    // [e18] Minimum bonus amount\\n    uint256 min;\\n    // [e18] Maximum bonus amount\\n    uint256 max;\\n    // [seconds] Period over which to apply bonus scaling\\n    uint256 period;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"internalType\":\"struct IBonusScaling.BonusScaling\",\"name\":\"_bonusScaling\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_hardLockPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"RewardsExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardsFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardsPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADJUSTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECOVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusScaling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTotalStakeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getFutureTotalStakeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakeSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IMultiStake.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiplierPool.UserData\",\"name\":\"userData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"internalType\":\"struct IBonusScaling.BonusScaling\",\"name\":\"_bonusScaling\",\"type\":\"tuple\"}],\"name\":\"modifyBonusScaling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardLockPeriod\",\"type\":\"uint256\"}],\"name\":\"modifyHardLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"pendingRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSchedules\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"internalType\":\"struct FundablePool.RewardSchedule[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"unlockable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiplierPool", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000de4b9cbad10cdff96ee4b1f9c7568283e96c0089000000000000000000000000383df49ad1f0219759a46399fe33cb7a63cd051c00000000000000000000000024a6a37576377f63f194caa5f518a60f45b42921000000000000000000000000938625591adb4e865b882377e2c965f9f9b85e3400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000004f1a000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}