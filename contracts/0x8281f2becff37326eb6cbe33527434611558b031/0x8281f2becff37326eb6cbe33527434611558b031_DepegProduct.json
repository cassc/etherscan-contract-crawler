{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DepegProduct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"EnumerableSet.sol\\\";\\n\\nimport \\\"IComponent.sol\\\";\\nimport \\\"Product.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\nimport \\\"ITreasury.sol\\\";\\nimport \\\"TreasuryModule.sol\\\";\\n\\nimport \\\"EIP712.sol\\\";\\n\\nimport \\\"IPriceDataProvider.sol\\\";\\nimport \\\"DepegRiskpool.sol\\\";\\nimport \\\"DepegMessageHelper.sol\\\";\\n\\n\\ncontract DepegProduct is \\n    Product\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    enum DepegState {\\n        Undefined,\\n        Active, // normal operation\\n        Paused, // stop selling policies, might recover to active\\n        Depegged  // stop selling policies, manual reset to active needed by owner\\n    }\\n\\n    struct DepegBalance {\\n        address wallet;\\n        uint256 blockNumber;\\n        uint256 balance;\\n    }\\n\\n    uint256 public constant MAINNET = 1;\\n    uint256 public constant GANACHE = 1337;\\n\\n    bytes32 public constant NAME = \\\"DepegProduct\\\";\\n    bytes32 public constant VERSION = \\\"0.1\\\";\\n    bytes32 public constant POLICY_FLOW = \\\"PolicyDefaultFlow\\\";\\n\\n    // grace period after policy expiry where claims can be created\\n    // and closing is not possible\\n    uint256 public constant CLAIM_GRACE_PERIOD = 7 * 24 * 3600;// check days constant;\\n\\n    // constant as each policy has max 1 claim\\n    uint256 public constant CLAIM_ID = 0;\\n\\n    bytes32 [] private _applications;\\n    bytes32 [] private _policies;\\n\\n    // holds policies that created a depeg claim\\n    EnumerableSet.Bytes32Set private _policiesWithOpenClaims;\\n    EnumerableSet.Bytes32Set private _policiesWithConfirmedClaims;\\n\\n    IPriceDataProvider private _priceDataProvider;\\n    IERC20Metadata private _tokenContract;\\n    address private _protectedToken;\\n    DepegState private _state;\\n\\n    DepegRiskpool private _riskpool;\\n    TreasuryModule private _treasury;\\n\\n    DepegMessageHelper private _messageHelper;\\n\\n    // hold list of applications/policies for address\\n    mapping(address /* policyHolder */ => bytes32 [] /* processIds */) private _processIdsForHolder;\\n\\n    // actual wallet balances at depeg time\\n    mapping(address /* wallet */ => DepegBalance /* balance */) private _depegBalance;\\n\\n    // processed wallet balances \\n    mapping(address /* wallet */ => uint256 /* processed total claims so far */) private _processedBalance;\\n\\n    event LogDepegApplicationCreated(bytes32 processId, address policyHolder, address protectedWallet, uint256 protectedBalance, uint256 sumInsuredAmount, uint256 premiumAmount);\\n    event LogDepegPolicyCreated(bytes32 processId, address policyHolder, uint256 sumInsuredAmount);\\n    event LogDepegClaimCreated(bytes32 processId, uint256 claimId, uint256 claimAmount);\\n    event LogDepegProtectedAmountReduction(bytes32 processId, uint256 protectedAmount, uint256 depegBalance);\\n    event LogDepegProcessedAmountReduction(bytes32 processId, uint256 protectedAmount, uint256 amountLeftToProcess);\\n    event LogDepegClaimConfirmed(bytes32 processId, uint256 claimId, uint256 claimAmount, uint256 accountBalance, uint256 payoutAmount);\\n    event LogDepegPayoutProcessed(bytes32 processId, uint256 claimId, uint256 payoutId, uint256 payoutAmount);\\n    event LogDepegPolicyExpired(bytes32 processId);\\n    event LogDepegPolicyClosed(bytes32 processId);\\n\\n    event LogDepegPriceEvent(\\n        uint256 priceId,\\n        uint256 price,\\n        IPriceDataProvider.EventType eventType,\\n        uint256 triggeredAt,\\n        uint256 depeggedAt,\\n        uint256 createdAt\\n    );\\n\\n    event LogDepegProductDeactivated(uint256 priceId, uint256 deactivatedAt);\\n    event LogDepegProductReactivated(uint256 reactivatedAt);\\n    event LogDepegProductPaused(uint256 priceId, uint256 pausedAt);\\n    event LogDepegProductUnpaused(uint256 priceId, uint256 unpausedAt);\\n    event LogDepegDepegBalanceAdded(address wallet, uint256 blockNumber, uint256 balance);\\n    event LogDepegDepegBalanceError(address wallet, uint256 blockNumber, uint256 balance, uint256 depeggedBlockNumber);\\n\\n\\n    modifier onlyMatchingPolicy(bytes32 processId) {\\n        require(\\n            this.getId() == _instanceService.getMetadata(processId).productId, \\n            \\\"ERROR:PRD-001:PRODUCT_MISMATCH\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    modifier onlyProtectedWallet(bytes32 processId) {\\n        require(\\n            msg.sender == getProtectedWallet(processId), \\n            \\\"ERROR:PRD-002:NOT_INSURED_WALLET\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    constructor(\\n        bytes32 productName,\\n        address priceDataProvider,\\n        address token,\\n        address registry,\\n        uint256 riskpoolId,\\n        address depegMessageHelper\\n    )\\n        Product(productName, token, POLICY_FLOW, riskpoolId, registry)\\n    {\\n        // initial product state is active\\n        _state = DepegState.Active;\\n\\n        require(priceDataProvider != address(0), \\\"ERROR:DP-001:PROVIDER_ZERO\\\");\\n        _priceDataProvider = IPriceDataProvider(priceDataProvider);\\n        require(token != _priceDataProvider.getToken(), \\\"ERROR:DP-002:SAME_TOKEN\\\");\\n\\n        IComponent poolComponent = _instanceService.getComponent(riskpoolId); \\n        address poolAddress = address(poolComponent);\\n\\n        _riskpool = DepegRiskpool(poolAddress);\\n        _treasury = TreasuryModule(_instanceService.getTreasuryAddress());\\n\\n        _messageHelper = DepegMessageHelper(depegMessageHelper);\\n    }\\n\\n    function getMessageHelperAddress()\\n        external\\n        view\\n        returns(address messageHelperAddress)\\n    {\\n        return address(_messageHelper);\\n    }\\n\\n\\n    function applyForPolicyWithBundleAndSignature(\\n        address policyHolder,\\n        address protectedWallet,\\n        uint256 protectedBalance,\\n        uint256 duration,\\n        uint256 bundleId,\\n        bytes32 signatureId,\\n        bytes calldata signature\\n    )\\n        external \\n        returns(bytes32 processId)\\n    {\\n        _messageHelper.checkAndRegisterSignature (\\n            policyHolder,\\n            protectedWallet,\\n            protectedBalance,\\n            duration,\\n            bundleId,\\n            signatureId,\\n            signature);\\n\\n        return _applyForPolicyWithBundle(\\n            policyHolder,\\n            protectedWallet,\\n            protectedBalance,\\n            duration,\\n            bundleId);\\n    }\\n\\n\\n    function applyForPolicyWithBundle(\\n        address protectedWallet,\\n        uint256 protectedBalance,\\n        uint256 duration,\\n        uint256 bundleId\\n    ) \\n        external \\n        returns(bytes32 processId)\\n    {\\n        return _applyForPolicyWithBundle(\\n            msg.sender, // policy holder\\n            protectedWallet,\\n            protectedBalance,\\n            duration,\\n            bundleId);\\n    }\\n\\n\\n    function _applyForPolicyWithBundle(\\n        address policyHolder,\\n        address wallet,\\n        uint256 protectedBalance,\\n        uint256 duration,\\n        uint256 bundleId\\n    ) \\n        internal \\n        returns(bytes32 processId)\\n    {\\n        // block policy creation when protected stable coin\\n        // is triggered or depegged\\n        require(_state == DepegState.Active, \\\"ERROR:DP-010:PRODUCT_NOT_ACTIVE\\\");\\n        require(wallet != address(0), \\\"ERROR:DP-011:WALLET_ADDRESS_ZERO\\\");\\n        require(bundleId > 0, \\\"ERROR:DP-012:BUNDLE_ID_ZERO\\\");\\n\\n        uint256 sumInsured = _riskpool.calculateSumInsured(protectedBalance);\\n        uint256 maxPremium = 0;\\n        uint256 maxNetPremium = 0;\\n\\n        IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n        require(\\n            bundle.riskpoolId == _riskpool.getId(),\\n            \\\"ERROR:DP-013:RISKPOOL_MISMATCH\\\");\\n\\n        // calculate premium for specified bundle\\n        (,,,,,,uint256 annualPercentageReturn) = _riskpool.decodeBundleParamsFromFilter(bundle.filter);\\n        maxNetPremium = _riskpool.calculatePremium(sumInsured, duration, annualPercentageReturn);\\n        maxPremium = calculatePremium(maxNetPremium);\\n\\n        // ensure policy holder has sufficient balance and allowance\\n        IERC20Metadata token = IERC20Metadata(getToken());\\n\\n        require(\\n            token.balanceOf(policyHolder) >= maxPremium, \\n            \\\"ERROR:DP-014:BALANCE_TOO_LOW\\\");\\n\\n        require(\\n            token.allowance(policyHolder, _instanceService.getTreasuryAddress()) >= maxPremium, \\n            \\\"ERROR:DP-015:ALLOWANCE_TOO_LOW\\\");\\n\\n        bytes memory applicationData = _riskpool.encodeApplicationParameterAsData(\\n            wallet,\\n            protectedBalance,\\n            duration,\\n            bundleId,\\n            maxNetPremium\\n        );\\n\\n        processId = _newApplication(\\n            policyHolder, \\n            maxPremium, \\n            sumInsured,\\n            \\\"\\\", // metaData\\n            applicationData);\\n\\n        _applications.push(processId);\\n\\n        // remember for which policy holder this application is\\n        _processIdsForHolder[policyHolder].push(processId);\\n\\n        // in case the protected wallet is different from policy holder:\\n        // also remember for which wallet address the appplication is\\n        if(wallet != policyHolder) {\\n            _processIdsForHolder[wallet].push(processId);\\n        }\\n\\n        emit LogDepegApplicationCreated(\\n            processId, \\n            policyHolder, \\n            wallet,\\n            protectedBalance,\\n            sumInsured,\\n            maxPremium); \\n\\n        bool success = _underwrite(processId);\\n\\n        // ensure underwriting is successful\\n        require(success, \\\"ERROR:DP-016:UNDERWRITING_FAILED\\\");\\n\\n        if (success) {\\n            _policies.push(processId);\\n\\n            emit LogDepegPolicyCreated(\\n                processId, \\n                policyHolder, \\n                sumInsured);\\n        }\\n    }\\n\\n\\n    function close(bytes32 processId)\\n        external \\n    {\\n        uint256 depeggedAt = _priceDataProvider.getDepeggedAt();\\n        (, uint256 expiredAt) = getPolicyExpirationData(processId);\\n\\n        // \\n        require(\\n            (\\n                depeggedAt == 0 && \\n                block.timestamp > expiredAt\\n            ) || (\\n                depeggedAt > 0 && \\n                block.timestamp > depeggedAt + CLAIM_GRACE_PERIOD\\n            ),\\n            \\\"ERROR:DP-018:NOT_EXPIRED\\\");\\n\\n        _expire(processId);\\n        _close(processId);\\n\\n        emit LogDepegPolicyClosed(processId);\\n    }\\n\\n\\n    function getPolicyExpirationData(bytes32 processId)\\n        public \\n        view\\n        onlyMatchingPolicy(processId)\\n        returns(\\n            bool isExpired,\\n            uint256 expiredAt\\n        ) \\n    {\\n        // reverts if policy doesn't exist\\n        IPolicy.Policy memory policy = _getPolicy(processId);\\n\\n        isExpired = (policy.state == IPolicy.PolicyState.Expired\\n            || policy.state == IPolicy.PolicyState.Closed);\\n\\n        IPolicy.Application memory application = _getApplication(processId);\\n\\n        (\\n            , // don't need wallet address\\n            , // don't need protected balance\\n            uint256 duration,\\n            , // don't need bundle id info\\n            // don't need maxNetPremium\\n        ) = _riskpool.decodeApplicationParameterFromData(application.data);\\n\\n        expiredAt = policy.createdAt + duration;\\n        isExpired = isExpired || block.timestamp >= expiredAt;\\n    }\\n\\n\\n    function getDepeggedBlockNumber() public view returns(uint256 blockNumber) {\\n        return _priceDataProvider.getDepeggedBlockNumber();\\n    }\\n\\n\\n    function createDepegBalance(\\n        address wallet,\\n        uint256 blockNumber,\\n        uint256 balance\\n    )\\n        public \\n        view \\n        returns(DepegBalance memory depegBalance)\\n    {\\n        uint256 depeggedBlockNumber = _priceDataProvider.getDepeggedBlockNumber();\\n\\n        require(wallet != address(0), \\\"ERROR:DP-021:WALLET_ADDRESS_ZERO\\\");\\n        require(depeggedBlockNumber > 0, \\\"ERROR:DP-022:DEPEGGED_BLOCKNUMBER_ZERO\\\");\\n        require(blockNumber == depeggedBlockNumber, \\\"ERROR:DP-023:BLOCKNUMBER_MISMATCH\\\");\\n\\n        depegBalance.wallet = wallet;\\n        depegBalance.blockNumber = depeggedBlockNumber;\\n        depegBalance.balance = balance;\\n    }\\n\\n\\n    function addDepegBalances(DepegBalance [] memory depegBalances)\\n        external\\n        onlyOwner\\n        returns(\\n            uint256 balanceOkCases,\\n            uint256 balanceErrorCases\\n        )\\n    {\\n        uint256 depeggedBlockNumber = _priceDataProvider.getDepeggedBlockNumber();\\n        require(depeggedBlockNumber > 0, \\\"ERROR:DP-024:DEPEGGED_BLOCKNUMBER_ZERO\\\");\\n    \\n        balanceOkCases = 0;\\n        balanceErrorCases = 0;\\n\\n        for (uint256 i; i < depegBalances.length; i++) {\\n            DepegBalance memory depegBalance = depegBalances[i];\\n\\n            if(depegBalance.wallet != address(0) && depegBalance.blockNumber == depeggedBlockNumber) {\\n                _depegBalance[depegBalance.wallet] = depegBalance;\\n                balanceOkCases += 1;\\n\\n                emit LogDepegDepegBalanceAdded(\\n                    depegBalance.wallet, \\n                    depegBalance.blockNumber, \\n                    depegBalance.balance);\\n            } else {\\n                balanceErrorCases += 1;\\n\\n                emit LogDepegDepegBalanceError(\\n                    depegBalance.wallet, \\n                    depegBalance.blockNumber, \\n                    depegBalance.balance, \\n                    depeggedBlockNumber);\\n            }\\n        }\\n\\n        assert(balanceOkCases + balanceErrorCases == depegBalances.length);\\n    }    \\n\\n\\n    function getDepegBalance(address protectedWallet)\\n        public\\n        view\\n        returns(DepegBalance memory depegBalance)\\n    {\\n        return _depegBalance[protectedWallet];\\n    }\\n\\n\\n    function getProcessedBalance(address protectedWallet)\\n        public\\n        view\\n        returns(uint256 claimedBalance)\\n    {\\n        return _processedBalance[protectedWallet];\\n    }\\n\\n\\n    function hasDepegClaim(bytes32 processId)\\n        public\\n        view\\n        onlyMatchingPolicy(processId)\\n        returns(bool hasClaim)\\n    {\\n        return _instanceService.claims(processId) > 0;\\n    }\\n\\n\\n    function getDepegClaim(bytes32 processId)\\n        public \\n        view \\n        onlyMatchingPolicy(processId)\\n        returns(IPolicy.Claim memory claim)\\n    {\\n        return _getClaim(processId, CLAIM_ID);\\n    }\\n\\n\\n    function policyIsAllowedToClaim(bytes32 processId)\\n        external \\n        view \\n        onlyMatchingPolicy(processId)\\n        returns(bool mayClaim)\\n    {\\n        // product not depegged\\n        if(_state != DepegState.Depegged) {\\n            return false;\\n        }\\n\\n        // policy expired prior to depeg event\\n        uint256 depeggedAt = _priceDataProvider.getDepeggedAt();\\n        (, uint256 expiredAt) = getPolicyExpirationData(processId);\\n        if(expiredAt < depeggedAt) {\\n            return false;\\n        }\\n\\n        // grace period is over\\n        if(block.timestamp > depeggedAt + CLAIM_GRACE_PERIOD) {\\n            return false;\\n        }\\n\\n        // policy alread has claim\\n        if(hasDepegClaim(processId)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n\\n    // onlyProtectedWallet modifier\\n    // sets policy to expired\\n    // creates claim if allowed\\n    // reverts if not allowed\\n    function createDepegClaim(bytes32 processId)\\n        external \\n        onlyMatchingPolicy(processId)\\n        onlyProtectedWallet(processId)\\n    {\\n        require(this.policyIsAllowedToClaim(processId), \\\"ERROR:DP-030:CLAIM_CONDITION_FAILURE\\\");\\n\\n        // calculate claim attributes\\n        uint256 protectedAmount = getProtectedBalance(processId);\\n        uint256 claimAmount = calculateClaimAmount(protectedAmount);\\n\\n        // create the depeg claim for this policy\\n        IPriceDataProvider.PriceInfo memory depegInfo = _priceDataProvider.getDepegPriceInfo();\\n        bytes memory claimData = encodeClaimInfoAsData(depegInfo.price, depegInfo.depeggedAt);\\n        uint256 claimId = _newClaim(processId, claimAmount, claimData);\\n        emit LogDepegClaimCreated(processId, claimId, claimAmount);\\n\\n        // expire policy and add it to list of policies to be processed\\n        _expire(processId);\\n        _policiesWithOpenClaims.add(processId);\\n\\n        // create log entry\\n        emit LogDepegPolicyExpired(processId);\\n    }\\n\\n\\n    function policiesToProcess() public view returns(uint256 numberOfPolicies) {\\n        return _policiesWithOpenClaims.length();\\n    }\\n\\n\\n    function getPolicyToProcess(uint256 idx) \\n        public \\n        view \\n        returns(\\n            bytes32 processId,\\n            address wallet\\n        )\\n    {\\n        require(idx < _policiesWithOpenClaims.length(), \\\"ERROR:DP-040:INDEX_TOO_LARGE\\\");\\n\\n        processId = _policiesWithOpenClaims.at(idx);\\n        wallet = getProtectedWallet(processId);        \\n    }\\n\\n\\n    // convencience function for frontend, api, ...\\n    function getClaimData(bytes32 processId)\\n        external \\n        view \\n        onlyMatchingPolicy(processId)\\n        returns(\\n            address wallet,\\n            uint256 protectedAmount,\\n            uint256 actualAmount,\\n            bool hasClaim,\\n            uint256 claimId,\\n            IPolicy.ClaimState claimState,\\n            uint256 claimAmount,\\n            uint256 claimCreatedAt\\n        ) \\n    {\\n        wallet = getProtectedWallet(processId);\\n        protectedAmount = _getApplication(processId).sumInsuredAmount;\\n        actualAmount = getDepegBalance(wallet).balance;\\n        IPolicy.Claim memory claim = _getClaim(processId, CLAIM_ID);\\n        hasClaim = claim.createdAt > 0;\\n\\n        return (\\n            wallet,\\n            protectedAmount,\\n            actualAmount,\\n            hasClaim, // hasClaim\\n            CLAIM_ID,\\n            claim.state,\\n            claim.claimAmount,\\n            claim.createdAt\\n        );\\n    }\\n\\n\\n    // convenience function to speed up processing\\n    function processPolicies(bytes32 [] memory _processIds)\\n        external\\n    {\\n        for(uint256 i = 0; i < _processIds.length; i++) {\\n            processPolicy(_processIds[i]);\\n        }\\n    }\\n\\n\\n    // claim confirmation and payout handling for a single policy\\n    // payout will be made to policy holder (not to protected wallet)\\n    // this is a current limitation of the gif framework\\n    function processPolicy(bytes32 processId)\\n        public\\n    {\\n        require(_policiesWithOpenClaims.contains(processId), \\\"ERROR:DP-042:NOT_IN_PROCESS_SET\\\");\\n        _policiesWithOpenClaims.remove(processId);\\n        _policiesWithConfirmedClaims.add(processId);\\n\\n        // get claim details\\n        uint256 protectedAmount = getProtectedBalance(processId);\\n        address protectedWallet = getProtectedWallet(processId);\\n        require(_depegBalance[protectedWallet].blockNumber > 0, \\\"ERROR:DP-043:DEPEG_BALANCE_MISSING\\\");\\n        require(_depegBalance[protectedWallet].balance > 0, \\\"ERROR:DP-044:DEPEG_BALANCE_ZERO\\\");\\n\\n        // deal with over insurance \\n        // case A) of a single policy that covers more than the actual balance\\n        uint256 depegBalance = _depegBalance[protectedWallet].balance;\\n\\n        // determine protected amount based on both protected amount from policy\\n        // and actual balance at time of the depeg event\\n        if(depegBalance < protectedAmount) {\\n            emit LogDepegProtectedAmountReduction(processId, protectedAmount, depegBalance);\\n            protectedAmount = depegBalance;\\n        }\\n\\n        // deal with over insurance \\n        // case B) several policies each <= depeg balance but summed up > depeg balance\\n\\n        // determine balance left to process\\n        uint256 amountLeftToProcess = depegBalance - _processedBalance[protectedWallet];\\n        require(amountLeftToProcess > 0, \\\"ERROR:DP-045:PROTECTED_BALANCE_PROCESSED_ALREADY\\\");\\n\\n        if(amountLeftToProcess < protectedAmount) {\\n            emit LogDepegProcessedAmountReduction(processId, protectedAmount, amountLeftToProcess);\\n            protectedAmount = amountLeftToProcess;\\n        }\\n\\n        // update processed balance\\n        _processedBalance[protectedWallet] += protectedAmount;\\n\\n\\n        IPolicy.Claim memory claim = _getClaim(processId, CLAIM_ID);\\n        uint256 payoutAmount = claim.claimAmount;\\n        uint256 depegPayoutAmount = calculateClaimAmount(protectedAmount);\\n\\n        // down-adjust payout amount based on actual balance at depeg time\\n        if(depegPayoutAmount < payoutAmount) {\\n            payoutAmount = depegPayoutAmount;\\n        }\\n\\n        // confirm claim\\n        _confirmClaim(processId, CLAIM_ID, payoutAmount);\\n        emit LogDepegClaimConfirmed(processId, CLAIM_ID, claim.claimAmount, depegBalance, payoutAmount);\\n\\n        // create and process payout\\n        uint256 payoutId = _newPayout(processId, CLAIM_ID, payoutAmount, \\\"\\\");\\n        _processPayout(processId, payoutId);\\n        emit LogDepegPayoutProcessed(processId, CLAIM_ID, payoutId, payoutAmount);\\n\\n        // close policy\\n        _close(processId);\\n        emit LogDepegPolicyClosed(processId);\\n    }\\n\\n\\n    function getProtectedBalance(bytes32 processId) public view returns(uint256 protectedBalance) {\\n        bytes memory applictionData = _getApplication(processId).data;\\n        (,protectedBalance,,,) = _riskpool.decodeApplicationParameterFromData(applictionData);\\n    }\\n\\n\\n    function encodeClaimInfoAsData(\\n        uint256 depegPrice,\\n        uint256 depeggedAt\\n    )\\n        public pure\\n        returns (bytes memory data)\\n    {\\n        data = abi.encode(\\n            depegPrice,\\n            depeggedAt\\n        );\\n    }\\n\\n\\n    function decodeClaimInfoFromData(bytes memory data)\\n        public pure\\n        returns (\\n            uint256 depegPrice,\\n            uint256 depeggedAt\\n        )\\n    {\\n        (\\n            depegPrice,\\n            depeggedAt\\n        ) = abi.decode(data, (uint256,uint256));\\n    }\\n\\n\\n    function calculateClaimAmount(uint256 tokenAmount)\\n        public\\n        view \\n        returns(uint256 claimAmount)\\n    {\\n        uint256 targetPrice = 10 ** _priceDataProvider.getDecimals();\\n        uint256 depegPrice = _priceDataProvider.getDepegPriceInfo().price;\\n\\n        // if necessary: dap depegPrice to sum insured percentage\\n        if(_riskpool.depegPriceIsBelowProtectedDepegPrice(depegPrice, targetPrice)) {\\n            depegPrice = _riskpool.getProtectedMinDepegPrice(targetPrice);\\n        }\\n\\n        claimAmount = (tokenAmount * (targetPrice - depegPrice)) / targetPrice;\\n    }\\n\\n\\n    // by circumventing prduct contract and directly updating usdc feed contract\\n    function isNewPriceInfoEventAvailable()\\n        external\\n        view\\n        returns(\\n            bool newEvent,\\n            IPriceDataProvider.PriceInfo memory priceInfo,\\n            uint256 timeSinceEvent\\n        )\\n    {\\n        return _priceDataProvider.isNewPriceInfoEventAvailable();\\n    }\\n\\n\\n    function getDepegState() external view returns(DepegState state) {\\n        return _state;\\n    }\\n\\n    function getLatestPriceInfo() external view returns(IPriceDataProvider.PriceInfo memory priceInfo) {\\n        return _priceDataProvider.getLatestPriceInfo();\\n    }\\n\\n    function getDepegPriceInfo() external view returns(IPriceDataProvider.PriceInfo memory priceInfo) {\\n        return _priceDataProvider.getDepegPriceInfo();\\n    }\\n\\n    function getTriggeredAt() external view returns(uint256 triggeredAt) { \\n        return _priceDataProvider.getTriggeredAt(); \\n    }\\n\\n    function getDepeggedAt() external view returns(uint256 depeggedAt) { \\n        return _priceDataProvider.getDepeggedAt(); \\n    }\\n\\n    function getTargetPrice() external view returns(uint256 targetPrice) {\\n        return _priceDataProvider.getTargetPrice();\\n    }\\n\\n\\n    // manage depeg product state machine: active, paused, depegged\\n    function processLatestPriceInfo()\\n        external\\n        returns(IPriceDataProvider.PriceInfo memory priceInfo)\\n    {\\n        priceInfo = _priceDataProvider.processLatestPriceInfo();\\n\\n        // log confirmation of processing\\n        emit LogDepegPriceEvent(\\n            priceInfo.id,\\n            priceInfo.price,\\n            priceInfo.eventType,\\n            priceInfo.triggeredAt,\\n            priceInfo.depeggedAt,\\n            priceInfo.createdAt\\n        );\\n\\n        // check if we need to move away from active state\\n        if(_state == DepegState.Active) {\\n            // can only happen if processLatestPriceInfo is not called frequently enough\\n            // normally, product state first moves from active to paused and only later moves to depegged\\n            if(_priceDataProvider.getDepeggedAt() > 0) {\\n                _state = DepegState.Depegged;\\n\\n                emit LogDepegProductDeactivated(\\n                    priceInfo.id, \\n                    block.timestamp);\\n            }\\n            // we've been in active state but price provider is triggered -> deactivate product\\n            else if(_priceDataProvider.getTriggeredAt() > 0) {\\n                _state = DepegState.Paused;\\n\\n                emit LogDepegProductPaused(\\n                    priceInfo.id, \\n                    block.timestamp);\\n            }\\n        }\\n        // check if we may resume or must go to depeg\\n        else if(_state == DepegState.Paused) {\\n            // we've been deactivated but price provider has depegged -> move product into depegged state\\n            if(_priceDataProvider.getDepeggedAt() > 0) {\\n                _state = DepegState.Depegged;\\n\\n                emit LogDepegProductDeactivated(\\n                    priceInfo.id, \\n                    block.timestamp);\\n            }\\n            // we've been deactivated but price provider has recovered -> reactivate product\\n            else if(_priceDataProvider.getTriggeredAt() == 0) {\\n                _state = DepegState.Active;\\n\\n                emit LogDepegProductUnpaused(\\n                    priceInfo.id, \\n                    block.timestamp);\\n            }\\n        }\\n    }\\n\\n\\n    function reactivateProduct()\\n        external\\n        onlyOwner()\\n    {\\n        require(_priceDataProvider.isTestnetProvider(), \\\"ERROR:DP-060:NOT_TESTNET\\\");\\n        _state = DepegState.Active;\\n\\n        emit LogDepegProductReactivated(block.timestamp);\\n    }\\n\\n\\n    function calculateNetPremium(uint256 sumInsured, uint256 duration, uint256 bundleId) public view returns(uint256 netPremium) {\\n        IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n        (\\n            , // name not needed\\n            , // lifetime not needed\\n            , // minSumInsured not needed\\n            , // maxSumInsured not needed\\n            , // minDuration not needed\\n            , // maxDuration not needed\\n            uint256 annualPercentageReturn\\n        ) = _riskpool.decodeBundleParamsFromFilter(bundle.filter);\\n        netPremium = _riskpool.calculatePremium(sumInsured, duration, annualPercentageReturn);\\n    }\\n\\n\\n    // TODO make this (well: TreasuryModule._calculateFee actually) available via instance service\\n    function calculateFee(uint256 amount)\\n        public\\n        view\\n        returns(uint256 feeAmount, uint256 totalAmount)\\n    {\\n        ITreasury.FeeSpecification memory feeSpec = getFeeSpecification(getId());\\n\\n        // start with fixed fee\\n        feeAmount = feeSpec.fixedFee;\\n\\n        // add fractional fee on top\\n        if (feeSpec.fractionalFee > 0) {\\n            feeAmount += (feeSpec.fractionalFee * amount) / getFeeFractionFullUnit();\\n        }\\n\\n        totalAmount = amount + feeAmount;\\n    }\\n\\n\\n    // TODO make this available via instance service\\n    function getFeeSpecification(uint256 componentId)\\n        public\\n        view\\n        returns(ITreasury.FeeSpecification memory feeSpecification)\\n    {\\n        feeSpecification = _treasury.getFeeSpecification(componentId);\\n    }\\n\\n\\n    function getFeeFractionFullUnit()\\n        public\\n        view\\n        returns(uint256 fractionFullUnit)\\n    {\\n        fractionFullUnit = _treasury.getFractionFullUnit();\\n    }\\n\\n\\n    // TODO this functionality should be provided by GIF (TreasuryModule)\\n    function calculatePremium(uint256 netPremium) public view returns(uint256 premiumAmount) {\\n        ITreasury.FeeSpecification memory feeSpec = getFeeSpecification(getId());\\n        uint256 fractionFullUnit = _treasury.getFractionFullUnit();\\n        uint256 fraction = feeSpec.fractionalFee;\\n        uint256 fixedFee = feeSpec.fixedFee;\\n\\n        premiumAmount = fractionFullUnit * (netPremium + fixedFee);\\n        premiumAmount /= fractionFullUnit - fraction;\\n    }\\n\\n\\n    function processIds(address policyHolder)\\n        external \\n        view\\n        returns(uint256 numberOfProcessIds)\\n    {\\n        return _processIdsForHolder[policyHolder].length;\\n    }\\n\\n\\n    function getProcessId(address policyHolder, uint256 idx)\\n        external \\n        view\\n        returns(bytes32 processId)\\n    {\\n        require(_processIdsForHolder[policyHolder].length > 0, \\\"ERROR:DP-070:NO_POLICIES\\\");\\n        return _processIdsForHolder[policyHolder][idx];\\n    }\\n\\n\\n    function getProtectedWallet(bytes32 processId) public view returns(address wallet) {\\n        bytes memory applicationData = _getApplication(processId).data;\\n        (wallet,,,,) = _riskpool.decodeApplicationParameterFromData(applicationData);        \\n    }\\n\\n\\n    function getPriceDataProvider() external view returns(address priceDataProvider) {\\n        return address(_priceDataProvider);\\n    }\\n\\n    function getProtectedToken() external view returns(address protectedToken) {\\n        return _priceDataProvider.getToken();\\n    }\\n\\n    function applications() external view returns(uint256 applicationCount) {\\n        return _applications.length;\\n    }\\n\\n    function getApplicationId(uint256 applicationIdx) external view returns(bytes32 processId) {\\n        return _applications[applicationIdx];\\n    }\\n\\n    function policies() external view returns(uint256 policyCount) {\\n        return _policies.length;\\n    }\\n\\n    function getPolicyId(uint256 policyIdx) external view returns(bytes32 processId) {\\n        return _policies[policyIdx];\\n    }\\n\\n    function getApplicationDataStructure() external override pure returns(string memory dataStructure) {\\n        return \\\"(uint256 duration,uint256 bundleId,uint256 premium)\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"IComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IRegistry.sol\\\";\\n\\ninterface IComponent {\\n\\n    enum ComponentType {\\n        Oracle,\\n        Product,\\n        Riskpool\\n    }\\n\\n    enum ComponentState {\\n        Created,\\n        Proposed,\\n        Declined,\\n        Active,\\n        Paused,\\n        Suspended,\\n        Archived\\n    }\\n\\n    event LogComponentCreated (\\n        bytes32 componentName,\\n        IComponent.ComponentType componentType,\\n        address componentAddress,\\n        address registryAddress);\\n\\n    function setId(uint256 id) external;\\n\\n    function getName() external view returns(bytes32);\\n    function getId() external view returns(uint256);\\n    function getType() external view returns(ComponentType);\\n    function getState() external view returns(ComponentState);\\n    function getOwner() external view returns(address);\\n\\n    function isProduct() external view returns(bool);\\n    function isOracle() external view returns(bool);\\n    function isRiskpool() external view returns(bool);\\n\\n    function getRegistry() external view returns(IRegistry);\\n\\n    function proposalCallback() external;\\n    function approvalCallback() external; \\n    function declineCallback() external;\\n    function suspendCallback() external;\\n    function resumeCallback() external;\\n    function pauseCallback() external;\\n    function unpauseCallback() external;\\n    function archiveCallback() external;\\n}\"\r\n    },\r\n    \"IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IRegistry {\\n\\n    event LogContractRegistered(\\n        bytes32 release,\\n        bytes32 contractName,\\n        address contractAddress,\\n        bool isNew\\n    );\\n\\n    event LogContractDeregistered(bytes32 release, bytes32 contractName);\\n\\n    event LogReleasePrepared(bytes32 release);\\n\\n    function registerInRelease(\\n        bytes32 _release,\\n        bytes32 _contractName,\\n        address _contractAddress\\n    ) external;\\n\\n    function register(bytes32 _contractName, address _contractAddress) external;\\n\\n    function deregisterInRelease(bytes32 _release, bytes32 _contractName)\\n        external;\\n\\n    function deregister(bytes32 _contractName) external;\\n\\n    function prepareRelease(bytes32 _newRelease) external;\\n\\n    function getContractInRelease(bytes32 _release, bytes32 _contractName)\\n        external\\n        view\\n        returns (address _contractAddress);\\n\\n    function getContract(bytes32 _contractName)\\n        external\\n        view\\n        returns (address _contractAddress);\\n\\n    function getRelease() external view returns (bytes32 _release);\\n\\n    function ensureSender(address sender, bytes32 _contractName) external view returns(bool _senderMatches);\\n\\n    function contracts() external view returns (uint256 _numberOfContracts);\\n\\n    function contractName(uint256 idx) external view returns (bytes32 _contractName);\\n\\n}\\n\"\r\n    },\r\n    \"Product.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IProduct.sol\\\";\\nimport \\\"Component.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\nimport \\\"IInstanceService.sol\\\";\\nimport \\\"IProductService.sol\\\";\\n\\nabstract contract Product is\\n    IProduct, \\n    Component \\n{    \\n    address private _policyFlow; // policy flow contract to use for this procut\\n    address private _token; // erc20 token to use for this product\\n    uint256 private _riskpoolId; // id of riskpool responsible for this product\\n\\n    IProductService internal _productService;\\n    IInstanceService internal _instanceService;\\n\\n    modifier onlyPolicyHolder(bytes32 policyId) {\\n        address policyHolder = _instanceService.getMetadata(policyId).owner;\\n        require(\\n            _msgSender() == policyHolder, \\n            \\\"ERROR:PRD-001:POLICY_OR_HOLDER_INVALID\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLicence {\\n        require(\\n             _msgSender() == _getContractAddress(\\\"Licence\\\"),\\n            \\\"ERROR:PRD-002:ACCESS_DENIED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOracle {\\n        require(\\n             _msgSender() == _getContractAddress(\\\"Query\\\"),\\n            \\\"ERROR:PRD-003:ACCESS_DENIED\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        bytes32 name,\\n        address token,\\n        bytes32 policyFlow,\\n        uint256 riskpoolId,\\n        address registry\\n    )\\n        Component(name, ComponentType.Product, registry)\\n    {\\n        _token = token;\\n        _riskpoolId = riskpoolId;\\n\\n        // TODO add validation for policy flow\\n        _policyFlow = _getContractAddress(policyFlow);\\n        _productService = IProductService(_getContractAddress(\\\"ProductService\\\"));\\n        _instanceService = IInstanceService(_getContractAddress(\\\"InstanceService\\\"));\\n\\n        emit LogProductCreated(address(this));\\n    }\\n\\n    function getToken() public override view returns(address) {\\n        return _token;\\n    }\\n\\n    function getPolicyFlow() public view override returns(address) {\\n        return _policyFlow;\\n    }\\n\\n    function getRiskpoolId() public override view returns(uint256) {\\n        return _riskpoolId;\\n    }\\n\\n    // default callback function implementations\\n    function _afterApprove() internal override { emit LogProductApproved(getId()); }\\n\\n    function _afterPropose() internal override { emit LogProductProposed(getId()); }\\n    function _afterDecline() internal override { emit LogProductDeclined(getId()); }\\n\\n    function _newApplication(\\n        address applicationOwner,\\n        uint256 premiumAmount,\\n        uint256 sumInsuredAmount,\\n        bytes memory metaData, \\n        bytes memory applicationData \\n    )\\n        internal\\n        returns(bytes32 processId)\\n    {\\n        processId = _productService.newApplication(\\n            applicationOwner, \\n            premiumAmount, \\n            sumInsuredAmount, \\n            metaData, \\n            applicationData);\\n    }\\n\\n    function _collectPremium(bytes32 processId) \\n        internal\\n        returns(\\n            bool success,\\n            uint256 feeAmount,\\n            uint256 netAmount\\n        )\\n    {\\n        IPolicy.Policy memory policy = _getPolicy(processId);\\n\\n        if (policy.premiumPaidAmount < policy.premiumExpectedAmount) {\\n            (success, feeAmount, netAmount) \\n                = _collectPremium(\\n                    processId, \\n                    policy.premiumExpectedAmount - policy.premiumPaidAmount\\n                );\\n        }\\n    }\\n\\n    function _collectPremium(\\n        bytes32 processId,\\n        uint256 amount\\n    )\\n        internal\\n        returns(\\n            bool success,\\n            uint256 feeAmount,\\n            uint256 netAmount\\n        )\\n    {\\n        (success, feeAmount, netAmount) = _productService.collectPremium(processId, amount);\\n    }\\n\\n    function _adjustPremiumSumInsured(\\n        bytes32 processId,\\n        uint256 expectedPremiumAmount,\\n        uint256 sumInsuredAmount\\n    ) internal {\\n        _productService.adjustPremiumSumInsured(processId, expectedPremiumAmount, sumInsuredAmount);\\n    }\\n\\n    function _revoke(bytes32 processId) internal {\\n        _productService.revoke(processId);\\n    }\\n\\n    function _underwrite(bytes32 processId) internal returns(bool success) {\\n        success = _productService.underwrite(processId);\\n    }\\n\\n    function _decline(bytes32 processId) internal {\\n        _productService.decline(processId);\\n    }\\n\\n    function _expire(bytes32 processId) internal {\\n        _productService.expire(processId);\\n    }\\n\\n    function _close(bytes32 processId) internal {\\n        _productService.close(processId);\\n    }\\n\\n    function _newClaim(\\n        bytes32 processId, \\n        uint256 claimAmount,\\n        bytes memory data\\n    ) \\n        internal\\n        returns (uint256 claimId)\\n    {\\n        claimId = _productService.newClaim(\\n            processId, \\n            claimAmount, \\n            data);\\n    }\\n\\n    function _confirmClaim(\\n        bytes32 processId,\\n        uint256 claimId,\\n        uint256 payoutAmount\\n    )\\n        internal\\n    {\\n        _productService.confirmClaim(\\n            processId, \\n            claimId, \\n            payoutAmount);\\n    }\\n\\n    function _declineClaim(bytes32 processId, uint256 claimId) internal {\\n        _productService.declineClaim(processId, claimId);\\n    }\\n\\n    function _closeClaim(bytes32 processId, uint256 claimId) internal {\\n        _productService.closeClaim(processId, claimId);\\n    }\\n\\n    function _newPayout(\\n        bytes32 processId,\\n        uint256 claimId,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        internal\\n        returns(uint256 payoutId)\\n    {\\n        payoutId = _productService.newPayout(processId, claimId, amount, data);\\n    }\\n\\n    function _processPayout(\\n        bytes32 processId,\\n        uint256 payoutId\\n    )\\n        internal\\n        returns(\\n            uint256 feeAmount,\\n            uint256 netPayoutAmount\\n        )\\n    {\\n        (\\n            feeAmount,\\n            netPayoutAmount\\n        ) = _productService.processPayout(processId, payoutId);\\n    }\\n\\n    function _request(\\n        bytes32 processId,\\n        bytes memory input,\\n        string memory callbackMethodName,\\n        uint256 responsibleOracleId\\n    )\\n        internal\\n        returns (uint256 requestId)\\n    {\\n        requestId = _productService.request(\\n            processId,\\n            input,\\n            callbackMethodName,\\n            address(this),\\n            responsibleOracleId\\n        );\\n    }\\n\\n    function _cancelRequest(uint256 requestId)\\n        internal\\n    {\\n        _productService.cancelRequest(requestId);\\n    }\\n\\n    function _getMetadata(bytes32 processId) \\n        internal \\n        view \\n        returns (IPolicy.Metadata memory metadata) \\n    {\\n        return _instanceService.getMetadata(processId);\\n    }\\n\\n    function _getApplication(bytes32 processId) \\n        internal \\n        view \\n        returns (IPolicy.Application memory application) \\n    {\\n        return _instanceService.getApplication(processId);\\n    }\\n\\n    function _getPolicy(bytes32 processId) \\n        internal \\n        view \\n        returns (IPolicy.Policy memory policy) \\n    {\\n        return _instanceService.getPolicy(processId);\\n    }\\n\\n    function _getClaim(bytes32 processId, uint256 claimId) \\n        internal \\n        view \\n        returns (IPolicy.Claim memory claim) \\n    {\\n        return _instanceService.getClaim(processId, claimId);\\n    }\\n\\n    function _getPayout(bytes32 processId, uint256 payoutId) \\n        internal \\n        view \\n        returns (IPolicy.Payout memory payout) \\n    {\\n        return _instanceService.getPayout(processId, payoutId);\\n    }\\n\\n    function getApplicationDataStructure() external override virtual view returns(string memory dataStructure) {\\n        return \\\"\\\";\\n    }\\n\\n    function getClaimDataStructure() external override virtual view returns(string memory dataStructure) {\\n        return \\\"\\\";\\n    }    \\n    function getPayoutDataStructure() external override virtual view returns(string memory dataStructure) {\\n        return \\\"\\\";\\n    }\\n\\n    function riskPoolCapacityCallback(uint256 capacity) external override virtual { }\\n}\\n\"\r\n    },\r\n    \"IProduct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IComponent.sol\\\";\\n\\ninterface IProduct is IComponent {\\n\\n    event LogProductCreated (address productAddress);\\n    event LogProductProposed (uint256 componentId);\\n    event LogProductApproved (uint256 componentId);\\n    event LogProductDeclined (uint256 componentId);\\n\\n    function getToken() external view returns(address token);\\n    function getPolicyFlow() external view returns(address policyFlow);\\n    function getRiskpoolId() external view returns(uint256 riskpoolId);\\n\\n    function getApplicationDataStructure() external view returns(string memory dataStructure);\\n    function getClaimDataStructure() external view returns(string memory dataStructure);\\n    function getPayoutDataStructure() external view returns(string memory dataStructure);\\n\\n    function riskPoolCapacityCallback(uint256 capacity) external;\\n}\\n\"\r\n    },\r\n    \"Component.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IComponent.sol\\\";\\nimport \\\"IAccess.sol\\\";\\nimport \\\"IComponentEvents.sol\\\";\\nimport \\\"IRegistry.sol\\\";\\nimport \\\"IComponentOwnerService.sol\\\";\\nimport \\\"IInstanceService.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\n\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/GUIDELINES.md#style-guidelines\\nabstract contract Component is \\n    IComponent,\\n    IComponentEvents,\\n    Ownable \\n{\\n    bytes32 private _componentName;\\n    uint256 private _componentId;\\n    IComponent.ComponentType private _componentType;\\n\\n    IRegistry private _registry;\\n    IAccess private _access;\\n    IComponentOwnerService private _componentOwnerService;\\n    IInstanceService private _instanceService;\\n\\n    modifier onlyInstanceOperatorService() {\\n        require(\\n             _msgSender() == _getContractAddress(\\\"InstanceOperatorService\\\"),\\n            \\\"ERROR:CMP-001:NOT_INSTANCE_OPERATOR_SERVICE\\\");\\n        _;\\n    }\\n\\n    modifier onlyComponent() {\\n        require(\\n             _msgSender() == _getContractAddress(\\\"Component\\\"),\\n            \\\"ERROR:CMP-002:NOT_COMPONENT\\\");\\n        _;\\n    }\\n\\n    modifier onlyComponentOwnerService() {\\n        require(\\n             _msgSender() == address(_componentOwnerService),\\n            \\\"ERROR:CMP-003:NOT_COMPONENT_OWNER_SERVICE\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        bytes32 name,\\n        IComponent.ComponentType componentType,\\n        address registry\\n    )\\n        Ownable()\\n    {\\n        require(registry != address(0), \\\"ERROR:CMP-004:REGISTRY_ADDRESS_ZERO\\\");\\n\\n        _registry = IRegistry(registry);\\n        _access = _getAccess();\\n        _componentOwnerService = _getComponentOwnerService();\\n        _instanceService = _getInstanceService();\\n\\n        _componentName = name;\\n        _componentType = componentType;\\n\\n        emit LogComponentCreated(\\n            _componentName, \\n            _componentType, \\n            address(this), \\n            address(_registry));\\n    }\\n\\n    function setId(uint256 id) external override onlyComponent { _componentId = id; }\\n\\n    function getName() public override view returns(bytes32) { return _componentName; }\\n    function getId() public override view returns(uint256) { return _componentId; }\\n    function getType() public override view returns(IComponent.ComponentType) { return _componentType; }\\n    function getState() public override view returns(IComponent.ComponentState) { return _instanceService.getComponentState(_componentId); }\\n    function getOwner() public override view returns(address) { return owner(); }\\n\\n    function isProduct() public override view returns(bool) { return _componentType == IComponent.ComponentType.Product; }\\n    function isOracle() public override view returns(bool) { return _componentType == IComponent.ComponentType.Oracle; }\\n    function isRiskpool() public override view returns(bool) { return _componentType == IComponent.ComponentType.Riskpool; }\\n\\n    function getRegistry() external override view returns(IRegistry) { return _registry; }\\n\\n    function proposalCallback() public override onlyComponent { _afterPropose(); }\\n    function approvalCallback() public override onlyComponent { _afterApprove(); }\\n    function declineCallback() public override onlyComponent { _afterDecline(); }\\n    function suspendCallback() public override onlyComponent { _afterSuspend(); }\\n    function resumeCallback() public override onlyComponent { _afterResume(); }\\n    function pauseCallback() public override onlyComponent { _afterPause(); }\\n    function unpauseCallback() public override onlyComponent { _afterUnpause(); }\\n    function archiveCallback() public override onlyComponent { _afterArchive(); }\\n    \\n    // these functions are intended to be overwritten to implement\\n    // component specific notification handling\\n    function _afterPropose() internal virtual {}\\n    function _afterApprove() internal virtual {}\\n    function _afterDecline() internal virtual {}\\n    function _afterSuspend() internal virtual {}\\n    function _afterResume() internal virtual {}\\n    function _afterPause() internal virtual {}\\n    function _afterUnpause() internal virtual {}\\n    function _afterArchive() internal virtual {}\\n\\n    function _getAccess() internal view returns (IAccess) {\\n        return IAccess(_getContractAddress(\\\"Access\\\"));        \\n    }\\n\\n    function _getInstanceService() internal view returns (IInstanceService) {\\n        return IInstanceService(_getContractAddress(\\\"InstanceService\\\"));        \\n    }\\n\\n    function _getComponentOwnerService() internal view returns (IComponentOwnerService) {\\n        return IComponentOwnerService(_getContractAddress(\\\"ComponentOwnerService\\\"));        \\n    }\\n\\n    function _getContractAddress(bytes32 contractName) internal view returns (address) { \\n        return _registry.getContract(contractName);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"IAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IAccess {\\n    function getDefaultAdminRole() external view returns(bytes32 role);\\n    function getProductOwnerRole() external view returns(bytes32 role);\\n    function getOracleProviderRole() external view returns(bytes32 role);\\n    function getRiskpoolKeeperRole() external view returns(bytes32 role);\\n    function hasRole(bytes32 role, address principal) external view returns(bool);\\n\\n    function grantRole(bytes32 role, address principal) external;\\n    function revokeRole(bytes32 role, address principal) external;\\n    function renounceRole(bytes32 role, address principal) external;\\n    \\n    function addRole(bytes32 role) external;\\n    function invalidateRole(bytes32 role) external;\\n}\\n\"\r\n    },\r\n    \"IComponentEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IComponent.sol\\\";\\n\\ninterface IComponentEvents {\\n\\n    event LogComponentProposed (\\n        bytes32 componentName,\\n        IComponent.ComponentType componentType,\\n        address componentAddress,\\n        uint256 id);\\n    \\n    event LogComponentApproved (uint256 id);\\n    event LogComponentDeclined (uint256 id);\\n\\n    event LogComponentSuspended (uint256 id);\\n    event LogComponentResumed (uint256 id);\\n\\n    event LogComponentPaused (uint256 id);\\n    event LogComponentUnpaused (uint256 id);\\n\\n    event LogComponentArchived (uint256 id);\\n\\n    event LogComponentStateChanged (\\n        uint256 id, \\n        IComponent.ComponentState stateOld, \\n        IComponent.ComponentState stateNew);\\n}\\n\"\r\n    },\r\n    \"IComponentOwnerService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IComponent.sol\\\";\\n\\ninterface IComponentOwnerService {\\n\\n    function propose(IComponent component) external;\\n\\n    function stake(uint256 id) external;\\n    function withdraw(uint256 id) external;\\n\\n    function pause(uint256 id) external; \\n    function unpause(uint256 id) external;\\n\\n    function archive(uint256 id) external;\\n}\"\r\n    },\r\n    \"IInstanceService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IComponent.sol\\\";\\nimport \\\"IBundle.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\nimport \\\"IPool.sol\\\";\\nimport \\\"IBundleToken.sol\\\";\\nimport \\\"IComponentOwnerService.sol\\\";\\nimport \\\"IInstanceOperatorService.sol\\\";\\nimport \\\"IOracleService.sol\\\";\\nimport \\\"IProductService.sol\\\";\\nimport \\\"IRiskpoolService.sol\\\";\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC721.sol\\\";\\n\\ninterface IInstanceService {\\n\\n    // instance\\n    function getChainId() external view returns(uint256 chainId);\\n    function getChainName() external view returns(string memory chainName);\\n    function getInstanceId() external view returns(bytes32 instanceId);\\n    function getInstanceOperator() external view returns(address instanceOperator);\\n\\n    // registry\\n    function getComponentOwnerService() external view returns(IComponentOwnerService service);\\n    function getInstanceOperatorService() external view returns(IInstanceOperatorService service);\\n    function getOracleService() external view returns(IOracleService service);\\n    function getProductService() external view returns(IProductService service);\\n    function getRiskpoolService() external view returns(IRiskpoolService service);\\n    function contracts() external view returns (uint256 numberOfContracts);\\n    function contractName(uint256 idx) external view returns (bytes32 name);\\n\\n    // access\\n    function getDefaultAdminRole() external view returns(bytes32 role);\\n    function getProductOwnerRole() external view returns(bytes32 role);\\n    function getOracleProviderRole() external view returns(bytes32 role);\\n    function getRiskpoolKeeperRole() external view returns(bytes32 role);\\n    function hasRole(bytes32 role, address principal) external view returns (bool roleIsAssigned);    \\n\\n    // component\\n    function products() external view returns(uint256 numberOfProducts);\\n    function oracles() external view returns(uint256 numberOfOracles);\\n    function riskpools() external view returns(uint256 numberOfRiskpools);\\n\\n    function getComponentId(address componentAddress) external view returns(uint256 componentId);\\n    function getComponent(uint256 componentId) external view returns(IComponent component);\\n    function getComponentType(uint256 componentId) external view returns(IComponent.ComponentType componentType);\\n    function getComponentState(uint256 componentId) external view returns(IComponent.ComponentState componentState);\\n\\n    // service staking\\n    function getStakingRequirements(uint256 componentId) external view returns(bytes memory data);\\n    function getStakedAssets(uint256 componentId) external view returns(bytes memory data);\\n\\n    // riskpool\\n    function getRiskpool(uint256 riskpoolId) external view returns(IPool.Pool memory riskPool);\\n    function getFullCollateralizationLevel() external view returns (uint256);\\n    function getCapital(uint256 riskpoolId) external view returns(uint256 capitalAmount);\\n    function getTotalValueLocked(uint256 riskpoolId) external view returns(uint256 totalValueLockedAmount);\\n    function getCapacity(uint256 riskpoolId) external view returns(uint256 capacityAmount);\\n    function getBalance(uint256 riskpoolId) external view returns(uint256 balanceAmount);\\n\\n    function activeBundles(uint256 riskpoolId) external view returns(uint256 numberOfActiveBundles);\\n    function getActiveBundleId(uint256 riskpoolId, uint256 bundleIdx) external view returns(uint256 bundleId);\\n    function getMaximumNumberOfActiveBundles(uint256 riskpoolId) external view returns(uint256 maximumNumberOfActiveBundles);\\n\\n    // bundles\\n    function getBundleToken() external view returns(IBundleToken token);\\n    function bundles() external view returns(uint256 numberOfBundles);\\n    function getBundle(uint256 bundleId) external view returns(IBundle.Bundle memory bundle);\\n    function unburntBundles(uint256 riskpoolId) external view returns(uint256 numberOfUnburntBundles);\\n\\n    // policy\\n    function processIds() external view returns(uint256 numberOfProcessIds);\\n    function getMetadata(bytes32 processId) external view returns(IPolicy.Metadata memory metadata);\\n    function getApplication(bytes32 processId) external view returns(IPolicy.Application memory application);\\n    function getPolicy(bytes32 processId) external view returns(IPolicy.Policy memory policy);\\n    function claims(bytes32 processId) external view returns(uint256 numberOfClaims);\\n    function payouts(bytes32 processId) external view returns(uint256 numberOfPayouts);\\n\\n    function getClaim(bytes32 processId, uint256 claimId) external view returns (IPolicy.Claim memory claim);\\n    function getPayout(bytes32 processId, uint256 payoutId) external view returns (IPolicy.Payout memory payout);\\n\\n    // treasury\\n    function getTreasuryAddress() external view returns(address treasuryAddress);\\n \\n    function getInstanceWallet() external view returns(address walletAddress);\\n    function getRiskpoolWallet(uint256 riskpoolId) external view returns(address walletAddress);\\n \\n    function getComponentToken(uint256 componentId) external view returns(IERC20 token);\\n    function getFeeFractionFullUnit() external view returns(uint256 fullUnit);\\n\\n}\\n\"\r\n    },\r\n    \"IBundle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IBundle {\\n\\n    event LogBundleCreated(\\n        uint256 bundleId, \\n        uint256 riskpoolId, \\n        address owner,\\n        BundleState state,\\n        uint256 amount\\n    );\\n\\n    event LogBundleStateChanged(uint256 bundleId, BundleState oldState, BundleState newState);\\n\\n    event LogBundleCapitalProvided(uint256 bundleId, address sender, uint256 amount, uint256 capacity);\\n    event LogBundleCapitalWithdrawn(uint256 bundleId, address recipient, uint256 amount, uint256 capacity);\\n\\n    event LogBundlePolicyCollateralized(uint256 bundleId, bytes32 processId, uint256 amount, uint256 capacity);\\n    event LogBundlePayoutProcessed(uint256 bundleId, bytes32 processId, uint256 amount);\\n    event LogBundlePolicyReleased(uint256 bundleId, bytes32 processId, uint256 amount, uint256 capacity);\\n\\n    enum BundleState {\\n        Active,\\n        Locked,\\n        Closed,\\n        Burned\\n    }\\n\\n    struct Bundle {\\n        uint256 id;\\n        uint256 riskpoolId;\\n        uint256 tokenId;\\n        BundleState state;\\n        bytes filter; // required conditions for applications to be considered for collateralization by this bundle\\n        uint256 capital; // net investment capital amount (<= balance)\\n        uint256 lockedCapital; // capital amount linked to collateralizaion of non-closed policies (<= capital)\\n        uint256 balance; // total amount of funds: net investment capital + net premiums - payouts\\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n\\n    function create(address owner_, uint256 riskpoolId_, bytes calldata filter_, uint256 amount_) external returns(uint256 bundleId);\\n    function fund(uint256 bundleId, uint256 amount) external;\\n    function defund(uint256 bundleId, uint256 amount) external;\\n\\n    function lock(uint256 bundleId) external;\\n    function unlock(uint256 bundleId) external;\\n    function close(uint256 bundleId) external;\\n    function burn(uint256 bundleId) external;\\n\\n    function collateralizePolicy(uint256 bundleId, bytes32 processId, uint256 collateralAmount) external;\\n    function processPremium(uint256 bundleId, bytes32 processId, uint256 amount) external;\\n    function processPayout(uint256 bundleId, bytes32 processId, uint256 amount) external;\\n    function releasePolicy(uint256 bundleId, bytes32 processId) external returns(uint256 collateralAmount);\\n}\\n\"\r\n    },\r\n    \"IPolicy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IPolicy {\\n\\n    // Events\\n    event LogMetadataCreated(\\n        address owner,\\n        bytes32 processId,\\n        uint256 productId, \\n        PolicyFlowState state\\n    );\\n\\n    event LogMetadataStateChanged(\\n        bytes32 processId, \\n        PolicyFlowState state\\n    );\\n\\n    event LogApplicationCreated(\\n        bytes32 processId, \\n        uint256 premiumAmount, \\n        uint256 sumInsuredAmount\\n    );\\n\\n    event LogApplicationRevoked(bytes32 processId);\\n    event LogApplicationUnderwritten(bytes32 processId);\\n    event LogApplicationDeclined(bytes32 processId);\\n\\n    event LogPolicyCreated(bytes32 processId);\\n    event LogPolicyExpired(bytes32 processId);\\n    event LogPolicyClosed(bytes32 processId);\\n\\n    event LogPremiumCollected(bytes32 processId, uint256 amount);\\n    \\n    event LogApplicationSumInsuredAdjusted(bytes32 processId, uint256 sumInsuredAmountOld, uint256 sumInsuredAmount);\\n    event LogApplicationPremiumAdjusted(bytes32 processId, uint256 premiumAmountOld, uint256 premiumAmount);\\n    event LogPolicyPremiumAdjusted(bytes32 processId, uint256 premiumExpectedAmountOld, uint256 premiumExpectedAmount);\\n\\n    event LogClaimCreated(bytes32 processId, uint256 claimId, uint256 claimAmount);\\n    event LogClaimConfirmed(bytes32 processId, uint256 claimId, uint256 confirmedAmount);\\n    event LogClaimDeclined(bytes32 processId, uint256 claimId);\\n    event LogClaimClosed(bytes32 processId, uint256 claimId);\\n\\n    event LogPayoutCreated(\\n        bytes32 processId,\\n        uint256 claimId,\\n        uint256 payoutId,\\n        uint256 amount\\n    );\\n\\n    event LogPayoutProcessed(\\n        bytes32 processId, \\n        uint256 payoutId\\n    );\\n\\n    // States\\n    enum PolicyFlowState {Started, Active, Finished}\\n    enum ApplicationState {Applied, Revoked, Underwritten, Declined}\\n    enum PolicyState {Active, Expired, Closed}\\n    enum ClaimState {Applied, Confirmed, Declined, Closed}\\n    enum PayoutState {Expected, PaidOut}\\n\\n    // Objects\\n    struct Metadata {\\n        address owner;\\n        uint256 productId;\\n        PolicyFlowState state;\\n        bytes data;\\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n\\n    struct Application {\\n        ApplicationState state;\\n        uint256 premiumAmount;\\n        uint256 sumInsuredAmount;\\n        bytes data; \\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n\\n    struct Policy {\\n        PolicyState state;\\n        uint256 premiumExpectedAmount;\\n        uint256 premiumPaidAmount;\\n        uint256 claimsCount;\\n        uint256 openClaimsCount;\\n        uint256 payoutMaxAmount;\\n        uint256 payoutAmount;\\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n\\n    struct Claim {\\n        ClaimState state;\\n        uint256 claimAmount;\\n        uint256 paidAmount;\\n        bytes data;\\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n\\n    struct Payout {\\n        uint256 claimId;\\n        PayoutState state;\\n        uint256 amount;\\n        bytes data;\\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n\\n    function createPolicyFlow(\\n        address owner,\\n        uint256 productId, \\n        bytes calldata data\\n    ) external returns(bytes32 processId);\\n\\n    function createApplication(\\n        bytes32 processId, \\n        uint256 premiumAmount,\\n        uint256 sumInsuredAmount,\\n        bytes calldata data\\n    ) external;\\n\\n    function revokeApplication(bytes32 processId) external;\\n    function underwriteApplication(bytes32 processId) external;\\n    function declineApplication(bytes32 processId) external;\\n\\n    function collectPremium(bytes32 processId, uint256 amount) external;\\n\\n    function adjustPremiumSumInsured(\\n        bytes32 processId, \\n        uint256 expectedPremiumAmount,\\n        uint256 sumInsuredAmount\\n    ) external;\\n\\n    function createPolicy(bytes32 processId) external;\\n    function expirePolicy(bytes32 processId) external;\\n    function closePolicy(bytes32 processId) external;\\n\\n    function createClaim(\\n        bytes32 processId, \\n        uint256 claimAmount, \\n        bytes calldata data\\n    ) external returns (uint256 claimId);\\n\\n    function confirmClaim(\\n        bytes32 processId, \\n        uint256 claimId, \\n        uint256 confirmedAmount\\n    ) external;\\n\\n    function declineClaim(bytes32 processId, uint256 claimId) external;\\n    function closeClaim(bytes32 processId, uint256 claimId) external;\\n\\n    function createPayout(\\n        bytes32 processId,\\n        uint256 claimId,\\n        uint256 payoutAmount,\\n        bytes calldata data\\n    ) external returns (uint256 payoutId);\\n\\n    function processPayout(\\n        bytes32 processId,\\n        uint256 payoutId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IPool {\\n\\n    event LogRiskpoolRegistered(\\n        uint256 riskpoolId, \\n        address wallet,\\n        address erc20Token, \\n        uint256 collateralizationLevel, \\n        uint256 sumOfSumInsuredCap\\n    );\\n    \\n    event LogRiskpoolRequiredCollateral(bytes32 processId, uint256 sumInsured, uint256 collateral);\\n    event LogRiskpoolCollateralizationFailed(uint256 riskpoolId, bytes32 processId, uint256 amount);\\n    event LogRiskpoolCollateralizationSucceeded(uint256 riskpoolId, bytes32 processId, uint256 amount);\\n    event LogRiskpoolCollateralReleased(uint256 riskpoolId, bytes32 processId, uint256 amount);\\n\\n    struct Pool {\\n        uint256 id; // matches component id of riskpool\\n        address wallet; // riskpool wallet\\n        address erc20Token; // the value token of the riskpool\\n        uint256 collateralizationLevel; // required collateralization level to cover new policies \\n        uint256 sumOfSumInsuredCap; // max sum of sum insured the pool is allowed to secure\\n        uint256 sumOfSumInsuredAtRisk; // current sum of sum insured at risk in this pool\\n        uint256 capital; // net investment capital amount (<= balance)\\n        uint256 lockedCapital; // capital amount linked to collateralizaion of non-closed policies (<= capital)\\n        uint256 balance; // total amount of funds: net investment capital + net premiums - payouts\\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n\\n    function registerRiskpool(\\n        uint256 riskpoolId, \\n        address wallet,\\n        address erc20Token,\\n        uint256 collateralizationLevel, \\n        uint256 sumOfSumInsuredCap\\n    ) external;\\n\\n    function setRiskpoolForProduct(uint256 productId, uint256 riskpoolId) external;\\n\\n    function underwrite(bytes32 processId) external returns(bool success);\\n    function processPremium(bytes32 processId, uint256 amount) external;\\n    function processPayout(bytes32 processId, uint256 amount) external;\\n    function release(bytes32 processId) external; \\n}\\n\"\r\n    },\r\n    \"IBundleToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IERC721.sol\\\";\\n\\ninterface IBundleToken is\\n    IERC721\\n{\\n    event LogBundleTokenMinted(uint256 bundleId, uint256 tokenId, address tokenOwner);\\n    event LogBundleTokenBurned(uint256 bundleId, uint256 tokenId);   \\n\\n    function burned(uint tokenId) external view returns(bool isBurned);\\n    function exists(uint256 tokenId) external view returns(bool doesExist);\\n    function getBundleId(uint256 tokenId) external view returns(uint256 bundleId);\\n    function totalSupply() external view returns(uint256 tokenCount);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IInstanceOperatorService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"ITreasury.sol\\\";\\n\\ninterface IInstanceOperatorService {\\n\\n    // registry\\n    function prepareRelease(bytes32 newRelease) external;\\n    function register(bytes32 contractName, address contractAddress) external;\\n    function deregister(bytes32 contractName) external;\\n    function registerInRelease(bytes32 release, bytes32 contractName, address contractAddress) external;\\n    function deregisterInRelease(bytes32 release, bytes32 contractName) external;\\n\\n    // access\\n    function createRole(bytes32 role) external;\\n    function invalidateRole(bytes32 role) external;\\n    function grantRole(bytes32 role, address principal) external;\\n    function revokeRole(bytes32 role, address principal) external;\\n\\n    // component\\n    function approve(uint256 id) external;\\n    function decline(uint256 id) external;\\n    function suspend(uint256 id) external;\\n    function resume(uint256 id) external;\\n    function archive(uint256 id) external;\\n    \\n    // service staking\\n    function setDefaultStaking(uint16 componentType, bytes calldata data) external;\\n    function adjustStakingRequirements(uint256 id, bytes calldata data) external;\\n\\n    // treasury\\n    function suspendTreasury() external;\\n    function resumeTreasury() external;\\n    \\n    function setInstanceWallet(address walletAddress) external;\\n    function setRiskpoolWallet(uint256 riskpoolId, address walletAddress) external;  \\n    function setProductToken(uint256 productId, address erc20Address) external; \\n\\n    function setPremiumFees(ITreasury.FeeSpecification calldata feeSpec) external;\\n    function setCapitalFees(ITreasury.FeeSpecification calldata feeSpec) external;\\n    \\n    function createFeeSpecification(\\n        uint256 componentId,\\n        uint256 fixedFee,\\n        uint256 fractionalFee,\\n        bytes calldata feeCalculationData\\n    ) external view returns(ITreasury.FeeSpecification memory);\\n\\n\\n}\\n\"\r\n    },\r\n    \"ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\nimport \\\"IERC20.sol\\\";\\n\\ninterface ITreasury {\\n\\n    event LogTreasurySuspended();\\n    event LogTreasuryResumed();\\n\\n    event LogTreasuryProductTokenSet(uint256 productId, uint256 riskpoolId, address erc20Address);\\n    event LogTreasuryInstanceWalletSet(address walletAddress);\\n    event LogTreasuryRiskpoolWalletSet(uint256 riskpoolId, address walletAddress);\\n\\n    event LogTreasuryPremiumFeesSet(uint256 productId, uint256 fixedFee, uint256 fractionalFee);\\n    event LogTreasuryCapitalFeesSet(uint256 riskpoolId, uint256 fixedFee, uint256 fractionalFee);\\n\\n    event LogTreasuryPremiumTransferred(address from, address riskpoolWalletAddress, uint256 amount);\\n    event LogTreasuryPayoutTransferred(address riskpoolWalletAddress, address to, uint256 amount);\\n    event LogTreasuryCapitalTransferred(address from, address riskpoolWalletAddress, uint256 amount);\\n    event LogTreasuryFeesTransferred(address from, address instanceWalletAddress, uint256 amount);\\n    event LogTreasuryWithdrawalTransferred(address riskpoolWalletAddress, address to, uint256 amount);\\n\\n    event LogTreasuryPremiumProcessed(bytes32 processId, uint256 amount);\\n    event LogTreasuryPayoutProcessed(uint256 riskpoolId, address to, uint256 amount);\\n    event LogTreasuryCapitalProcessed(uint256 riskpoolId, uint256 bundleId, uint256 amount);\\n    event LogTreasuryWithdrawalProcessed(uint256 riskpoolId, uint256 bundleId, uint256 amount);\\n\\n    struct FeeSpecification {\\n        uint256 componentId;\\n        uint256 fixedFee;\\n        uint256 fractionalFee;\\n        bytes feeCalculationData;\\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n\\n    function setProductToken(uint256 productId, address erc20Address) external;\\n\\n    function setInstanceWallet(address instanceWalletAddress) external;\\n    function setRiskpoolWallet(uint256 riskpoolId, address riskpoolWalletAddress) external;\\n\\n    function createFeeSpecification(\\n        uint256 componentId,\\n        uint256 fixedFee,\\n        uint256 fractionalFee,\\n        bytes calldata feeCalculationData\\n    )\\n        external view returns(FeeSpecification memory feeSpec);\\n    \\n    function setPremiumFees(FeeSpecification calldata feeSpec) external;\\n    function setCapitalFees(FeeSpecification calldata feeSpec) external;\\n    \\n    function processPremium(bytes32 processId) external \\n        returns(\\n            bool success,\\n            uint256 feeAmount,\\n            uint256 netPremiumAmount\\n        );\\n    \\n    function processPremium(bytes32 processId, uint256 amount) external \\n        returns(\\n            bool success,\\n            uint256 feeAmount,\\n            uint256 netPremiumAmount\\n        );\\n    \\n    function processPayout(bytes32 processId, uint256 payoutId) external \\n        returns(\\n            uint256 feeAmount,\\n            uint256 netPayoutAmount\\n        );\\n    \\n    function processCapital(uint256 bundleId, uint256 capitalAmount) external \\n        returns(\\n            uint256 feeAmount,\\n            uint256 netCapitalAmount\\n        );\\n\\n    function processWithdrawal(uint256 bundleId, uint256 amount) external\\n        returns(\\n            uint256 feeAmount,\\n            uint256 netAmount\\n        );\\n\\n    function getComponentToken(uint256 componentId) external view returns(IERC20 token);\\n    function getFeeSpecification(uint256 componentId) external view returns(FeeSpecification memory feeSpecification);\\n\\n    function getFractionFullUnit() external view returns(uint256);\\n    function getInstanceWallet() external view returns(address instanceWalletAddress);\\n    function getRiskpoolWallet(uint256 riskpoolId) external view returns(address riskpoolWalletAddress);\\n\\n}\\n\"\r\n    },\r\n    \"IOracleService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IOracleService {\\n\\n    function respond(uint256 requestId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"IProductService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IProductService {\\n\\n    function newApplication(\\n        address owner,\\n        uint256 premiumAmount,\\n        uint256 sumInsuredAmount,\\n        bytes calldata metaData, \\n        bytes calldata applicationData \\n    ) external returns(bytes32 processId);\\n\\n    function collectPremium(bytes32 processId, uint256 amount) external\\n        returns(\\n            bool success,\\n            uint256 feeAmount,\\n            uint256 netPremiumAmount\\n        );\\n    \\n    function adjustPremiumSumInsured(\\n        bytes32 processId, \\n        uint256 expectedPremiumAmount,\\n        uint256 sumInsuredAmount\\n    ) external;\\n\\n    function revoke(bytes32 processId) external;\\n    function underwrite(bytes32 processId) external returns(bool success);\\n    function decline(bytes32 processId) external;\\n    function expire(bytes32 processId) external;\\n    function close(bytes32 processId) external;\\n\\n    function newClaim(\\n        bytes32 processId, \\n        uint256 claimAmount,\\n        bytes calldata data\\n    ) external returns(uint256 claimId);\\n\\n    function confirmClaim(\\n        bytes32 processId, \\n        uint256 claimId, \\n        uint256 confirmedAmount\\n    ) external;\\n\\n    function declineClaim(bytes32 processId, uint256 claimId) external;\\n    function closeClaim(bytes32 processId, uint256 claimId) external;\\n\\n    function newPayout(\\n        bytes32 processId, \\n        uint256 claimId, \\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns(uint256 payoutId);\\n\\n    function processPayout(bytes32 processId, uint256 payoutId) external\\n        returns(\\n            uint256 feeAmount,\\n            uint256 netPayoutAmount\\n        );\\n\\n    function request(\\n        bytes32 processId,\\n        bytes calldata data,\\n        string calldata callbackMethodName,\\n        address callbackContractAddress,\\n        uint256 responsibleOracleId\\n    ) external returns(uint256 requestId);\\n\\n    function cancelRequest(uint256 requestId) external;\\n}\\n\"\r\n    },\r\n    \"IRiskpoolService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IRiskpoolService {\\n\\n    function registerRiskpool(\\n        address wallet,\\n        address erc20Token,\\n        uint256 collateralization, \\n        uint256 sumOfSumInsuredCap\\n    ) external;\\n\\n    function createBundle(address owner_, bytes calldata filter_, uint256 amount_) external returns(uint256 bundleId);\\n    function fundBundle(uint256 bundleId, uint256 amount) external returns(uint256 netAmount);\\n    function defundBundle(uint256 bundleId, uint256 amount) external returns(uint256 netAmount);\\n\\n    function lockBundle(uint256 bundleId) external;\\n    function unlockBundle(uint256 bundleId) external;\\n    function closeBundle(uint256 bundleId) external;\\n    function burnBundle(uint256 bundleId) external;\\n\\n    function collateralizePolicy(uint256 bundleId, bytes32 processId, uint256 collateralAmount) external;\\n    function processPremium(uint256 bundleId, bytes32 processId, uint256 amount) external;\\n    function processPayout(uint256 bundleId, bytes32 processId, uint256 amount) external;\\n    function releasePolicy(uint256 bundleId, bytes32 processId) external returns(uint256 collateralAmount);\\n\\n    function setMaximumNumberOfActiveBundles(uint256 riskpoolId, uint256 maxNumberOfActiveBundles) external;\\n}\\n\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"TreasuryModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"ComponentController.sol\\\";\\nimport \\\"PolicyController.sol\\\";\\nimport \\\"BundleController.sol\\\";\\nimport \\\"PoolController.sol\\\";\\nimport \\\"CoreController.sol\\\";\\nimport \\\"TransferHelper.sol\\\";\\n\\nimport \\\"IComponent.sol\\\";\\nimport \\\"IProduct.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\nimport \\\"ITreasury.sol\\\";\\n\\nimport \\\"Pausable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Strings.sol\\\";\\n\\ncontract TreasuryModule is \\n    ITreasury,\\n    CoreController,\\n    Pausable\\n{\\n    uint256 public constant FRACTION_FULL_UNIT = 10**18;\\n    uint256 public constant FRACTIONAL_FEE_MAX = FRACTION_FULL_UNIT / 4; // max frctional fee is 25%\\n\\n    event LogTransferHelperInputValidation1Failed(bool tokenIsContract, address from, address to);\\n    event LogTransferHelperInputValidation2Failed(uint256 balance, uint256 allowance);\\n    event LogTransferHelperCallFailed(bool callSuccess, uint256 returnDataLength, bytes returnData);\\n\\n    address private _instanceWalletAddress;\\n    mapping(uint256 => address) private _riskpoolWallet; // riskpoolId => walletAddress\\n    mapping(uint256 => FeeSpecification) private _fees; // componentId => fee specification\\n    mapping(uint256 => IERC20) private _componentToken; // productId/riskpoolId => erc20Address\\n\\n    BundleController private _bundle;\\n    ComponentController private _component;\\n    PolicyController private _policy;\\n    PoolController private _pool;\\n\\n    modifier instanceWalletDefined() {\\n        require(\\n            _instanceWalletAddress != address(0),\\n            \\\"ERROR:TRS-001:INSTANCE_WALLET_UNDEFINED\\\");\\n        _;\\n    }\\n\\n    modifier riskpoolWalletDefinedForProcess(bytes32 processId) {\\n        (uint256 riskpoolId, address walletAddress) = _getRiskpoolWallet(processId);\\n        require(\\n            walletAddress != address(0),\\n            \\\"ERROR:TRS-002:RISKPOOL_WALLET_UNDEFINED\\\");\\n        _;\\n    }\\n\\n    modifier riskpoolWalletDefinedForBundle(uint256 bundleId) {\\n        IBundle.Bundle memory bundle = _bundle.getBundle(bundleId);\\n        require(\\n            getRiskpoolWallet(bundle.riskpoolId) != address(0),\\n            \\\"ERROR:TRS-003:RISKPOOL_WALLET_UNDEFINED\\\");\\n        _;\\n    }\\n\\n    // surrogate modifier for whenNotPaused to create treasury specific error message\\n    modifier whenNotSuspended() {\\n        require(!paused(), \\\"ERROR:TRS-004:TREASURY_SUSPENDED\\\");\\n        _;\\n    }\\n\\n    modifier onlyRiskpoolService() {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"RiskpoolService\\\"),\\n            \\\"ERROR:TRS-005:NOT_RISKPOOL_SERVICE\\\"\\n        );\\n        _;\\n    }\\n\\n    function _afterInitialize() internal override onlyInitializing {\\n        _bundle = BundleController(_getContractAddress(\\\"Bundle\\\"));\\n        _component = ComponentController(_getContractAddress(\\\"Component\\\"));\\n        _policy = PolicyController(_getContractAddress(\\\"Policy\\\"));\\n        _pool = PoolController(_getContractAddress(\\\"Pool\\\"));\\n    }\\n\\n    function suspend() \\n        external \\n        onlyInstanceOperator\\n    {\\n        _pause();\\n        emit LogTreasurySuspended();\\n    }\\n\\n    function resume() \\n        external \\n        onlyInstanceOperator\\n    {\\n        _unpause();\\n        emit LogTreasuryResumed();\\n    }\\n\\n    function setProductToken(uint256 productId, address erc20Address)\\n        external override\\n        whenNotSuspended\\n        onlyInstanceOperator\\n    {\\n        require(erc20Address != address(0), \\\"ERROR:TRS-010:TOKEN_ADDRESS_ZERO\\\");\\n\\n        IComponent component = _component.getComponent(productId);\\n        require(_component.isProduct(productId), \\\"ERROR:TRS-011:NOT_PRODUCT\\\");\\n        require(address(_componentToken[productId]) == address(0), \\\"ERROR:TRS-012:PRODUCT_TOKEN_ALREADY_SET\\\");\\n    \\n        uint256 riskpoolId = _pool.getRiskPoolForProduct(productId);\\n\\n        // require if riskpool token is already set and product token does match riskpool token\\n        require(address(_componentToken[riskpoolId]) == address(0)\\n                || address(_componentToken[riskpoolId]) == address(IProduct(address(component)).getToken()), \\n                \\\"ERROR:TRS-014:TOKEN_ADDRESS_NOT_MACHING\\\");\\n        \\n        _componentToken[productId] = IERC20(erc20Address);\\n        _componentToken[riskpoolId] = IERC20(erc20Address);\\n\\n        emit LogTreasuryProductTokenSet(productId, riskpoolId, erc20Address);\\n    }\\n\\n    function setInstanceWallet(address instanceWalletAddress) \\n        external override\\n        whenNotSuspended\\n        onlyInstanceOperator\\n    {\\n        require(instanceWalletAddress != address(0), \\\"ERROR:TRS-015:WALLET_ADDRESS_ZERO\\\");\\n        _instanceWalletAddress = instanceWalletAddress;\\n\\n        emit LogTreasuryInstanceWalletSet (instanceWalletAddress);\\n    }\\n\\n    function setRiskpoolWallet(uint256 riskpoolId, address riskpoolWalletAddress) \\n        external override\\n        whenNotSuspended\\n        onlyInstanceOperator\\n    {\\n        IComponent component = _component.getComponent(riskpoolId);\\n        require(_component.isRiskpool(riskpoolId), \\\"ERROR:TRS-016:NOT_RISKPOOL\\\");\\n        require(riskpoolWalletAddress != address(0), \\\"ERROR:TRS-017:WALLET_ADDRESS_ZERO\\\");\\n        _riskpoolWallet[riskpoolId] = riskpoolWalletAddress;\\n\\n        emit LogTreasuryRiskpoolWalletSet (riskpoolId, riskpoolWalletAddress);\\n    }\\n\\n    function createFeeSpecification(\\n        uint256 componentId,\\n        uint256 fixedFee,\\n        uint256 fractionalFee,\\n        bytes calldata feeCalculationData\\n    )\\n        external override\\n        view \\n        returns(FeeSpecification memory)\\n    {\\n        require(_component.isProduct(componentId) || _component.isRiskpool(componentId), \\\"ERROR:TRS-020:ID_NOT_PRODUCT_OR_RISKPOOL\\\");\\n        require(fractionalFee <= FRACTIONAL_FEE_MAX, \\\"ERROR:TRS-021:FRACIONAL_FEE_TOO_BIG\\\");\\n\\n        return FeeSpecification(\\n            componentId,\\n            fixedFee,\\n            fractionalFee,\\n            feeCalculationData,\\n            block.timestamp,  // solhint-disable-line\\n            block.timestamp   // solhint-disable-line\\n        ); \\n    }\\n\\n    function setPremiumFees(FeeSpecification calldata feeSpec) \\n        external override\\n        whenNotSuspended\\n        onlyInstanceOperator\\n    {\\n        require(_component.isProduct(feeSpec.componentId), \\\"ERROR:TRS-022:NOT_PRODUCT\\\");\\n        \\n        // record  original creation timestamp \\n        uint256 originalCreatedAt = _fees[feeSpec.componentId].createdAt;\\n        _fees[feeSpec.componentId] = feeSpec;\\n\\n        // set original creation timestamp if fee spec already existed\\n        if (originalCreatedAt > 0) {\\n            _fees[feeSpec.componentId].createdAt = originalCreatedAt;\\n        }\\n\\n        emit LogTreasuryPremiumFeesSet (\\n            feeSpec.componentId,\\n            feeSpec.fixedFee, \\n            feeSpec.fractionalFee);\\n    }\\n\\n\\n    function setCapitalFees(FeeSpecification calldata feeSpec) \\n        external override\\n        whenNotSuspended\\n        onlyInstanceOperator\\n    {\\n        require(_component.isRiskpool(feeSpec.componentId), \\\"ERROR:TRS-023:NOT_RISKPOOL\\\");\\n\\n        // record  original creation timestamp \\n        uint256 originalCreatedAt = _fees[feeSpec.componentId].createdAt;\\n        _fees[feeSpec.componentId] = feeSpec;\\n\\n        // set original creation timestamp if fee spec already existed\\n        if (originalCreatedAt > 0) {\\n            _fees[feeSpec.componentId].createdAt = originalCreatedAt;\\n        }\\n\\n        emit LogTreasuryCapitalFeesSet (\\n            feeSpec.componentId,\\n            feeSpec.fixedFee, \\n            feeSpec.fractionalFee);\\n    }\\n\\n\\n    function calculateFee(uint256 componentId, uint256 amount)\\n        public \\n        view\\n        returns(uint256 feeAmount, uint256 netAmount)\\n    {\\n        FeeSpecification memory feeSpec = getFeeSpecification(componentId);\\n        require(feeSpec.createdAt > 0, \\\"ERROR:TRS-024:FEE_SPEC_UNDEFINED\\\");\\n        feeAmount = _calculateFee(feeSpec, amount);\\n        netAmount = amount - feeAmount;\\n    }\\n    \\n\\n    /*\\n     * Process the remaining premium by calculating the remaining amount, the fees for that amount and \\n     * then transfering the fees to the instance wallet and the net premium remaining to the riskpool. \\n     * This will revert if no fee structure is defined. \\n     */\\n    function processPremium(bytes32 processId) \\n        external override \\n        whenNotSuspended\\n        onlyPolicyFlow(\\\"Treasury\\\")\\n        returns(\\n            bool success, \\n            uint256 feeAmount, \\n            uint256 netPremiumAmount\\n        ) \\n    {\\n        IPolicy.Policy memory policy =  _policy.getPolicy(processId);\\n\\n        if (policy.premiumPaidAmount < policy.premiumExpectedAmount) {\\n            (success, feeAmount, netPremiumAmount) \\n                = processPremium(processId, policy.premiumExpectedAmount - policy.premiumPaidAmount);\\n        }\\n    }\\n\\n    /*\\n     * Process the premium by calculating the fees for the amount and \\n     * then transfering the fees to the instance wallet and the net premium to the riskpool. \\n     * This will revert if no fee structure is defined. \\n     */\\n    function processPremium(bytes32 processId, uint256 amount) \\n        public override \\n        whenNotSuspended\\n        instanceWalletDefined\\n        riskpoolWalletDefinedForProcess(processId)\\n        onlyPolicyFlow(\\\"Treasury\\\")\\n        returns(\\n            bool success, \\n            uint256 feeAmount, \\n            uint256 netAmount\\n        ) \\n    {\\n        IPolicy.Policy memory policy =  _policy.getPolicy(processId);\\n        require(\\n            policy.premiumPaidAmount + amount <= policy.premiumExpectedAmount, \\n            \\\"ERROR:TRS-030:AMOUNT_TOO_BIG\\\"\\n        );\\n\\n        IPolicy.Metadata memory metadata = _policy.getMetadata(processId);\\n        (feeAmount, netAmount) \\n            = calculateFee(metadata.productId, amount);\\n\\n        // check if allowance covers requested amount\\n        IERC20 token = getComponentToken(metadata.productId);\\n        if (token.allowance(metadata.owner, address(this)) < amount) {\\n            success = false;\\n            return (success, feeAmount, netAmount);\\n        }\\n\\n        // collect premium fees\\n        success = TransferHelper.unifiedTransferFrom(token, metadata.owner, _instanceWalletAddress, feeAmount);\\n        emit LogTreasuryFeesTransferred(metadata.owner, _instanceWalletAddress, feeAmount);\\n        require(success, \\\"ERROR:TRS-031:FEE_TRANSFER_FAILED\\\");\\n\\n        // transfer premium net amount to riskpool for product\\n        // actual transfer of net premium to riskpool\\n        (uint256 riskpoolId, address riskpoolWalletAddress) = _getRiskpoolWallet(processId);\\n        success = TransferHelper.unifiedTransferFrom(token, metadata.owner, riskpoolWalletAddress, netAmount);\\n\\n        emit LogTreasuryPremiumTransferred(metadata.owner, riskpoolWalletAddress, netAmount);\\n        require(success, \\\"ERROR:TRS-032:PREMIUM_TRANSFER_FAILED\\\");\\n\\n        emit LogTreasuryPremiumProcessed(processId, amount);\\n    }\\n\\n\\n    function processPayout(bytes32 processId, uint256 payoutId) \\n        external override\\n        whenNotSuspended\\n        instanceWalletDefined\\n        riskpoolWalletDefinedForProcess(processId)\\n        onlyPolicyFlow(\\\"Treasury\\\")\\n        returns(\\n            uint256 feeAmount,\\n            uint256 netPayoutAmount\\n        )\\n    {\\n        IPolicy.Payout memory payout =  _policy.getPayout(processId, payoutId);\\n        require(\\n            payout.state == IPolicy.PayoutState.Expected, \\n            \\\"ERROR:TRS-040:PAYOUT_ALREADY_PROCESSED\\\"\\n        );\\n\\n        IPolicy.Metadata memory metadata = _policy.getMetadata(processId);\\n        IERC20 token = getComponentToken(metadata.productId);\\n        (uint256 riskpoolId, address riskpoolWalletAddress) = _getRiskpoolWallet(processId);\\n\\n        require(\\n            token.balanceOf(riskpoolWalletAddress) >= payout.amount, \\n            \\\"ERROR:TRS-042:RISKPOOL_WALLET_BALANCE_TOO_SMALL\\\"\\n        );\\n        require(\\n            token.allowance(riskpoolWalletAddress, address(this)) >= payout.amount, \\n            \\\"ERROR:TRS-043:PAYOUT_ALLOWANCE_TOO_SMALL\\\"\\n        );\\n\\n        // actual payout to policy holder\\n        bool success = TransferHelper.unifiedTransferFrom(token, riskpoolWalletAddress, metadata.owner, payout.amount);\\n        feeAmount = 0;\\n        netPayoutAmount = payout.amount;\\n\\n        emit LogTreasuryPayoutTransferred(riskpoolWalletAddress, metadata.owner, payout.amount);\\n        require(success, \\\"ERROR:TRS-044:PAYOUT_TRANSFER_FAILED\\\");\\n\\n        emit LogTreasuryPayoutProcessed(riskpoolId,  metadata.owner, payout.amount);\\n    }\\n\\n    function processCapital(uint256 bundleId, uint256 capitalAmount) \\n        external override \\n        whenNotSuspended\\n        instanceWalletDefined\\n        riskpoolWalletDefinedForBundle(bundleId)\\n        onlyRiskpoolService\\n        returns(\\n            uint256 feeAmount,\\n            uint256 netCapitalAmount\\n        )\\n    {\\n        // obtain relevant fee specification\\n        IBundle.Bundle memory bundle = _bundle.getBundle(bundleId);\\n        address bundleOwner = _bundle.getOwner(bundleId);\\n\\n        FeeSpecification memory feeSpec = getFeeSpecification(bundle.riskpoolId);\\n        require(feeSpec.createdAt > 0, \\\"ERROR:TRS-050:FEE_SPEC_UNDEFINED\\\");\\n\\n        // obtain relevant token for product/riskpool pair\\n        IERC20 token = _componentToken[bundle.riskpoolId];\\n\\n        // calculate fees and net capital\\n        feeAmount = _calculateFee(feeSpec, capitalAmount);\\n        netCapitalAmount = capitalAmount - feeAmount;\\n\\n        // check balance and allowance before starting any transfers\\n        require(token.balanceOf(bundleOwner) >= capitalAmount, \\\"ERROR:TRS-052:BALANCE_TOO_SMALL\\\");\\n        require(token.allowance(bundleOwner, address(this)) >= capitalAmount, \\\"ERROR:TRS-053:CAPITAL_TRANSFER_ALLOWANCE_TOO_SMALL\\\");\\n\\n        bool success = TransferHelper.unifiedTransferFrom(token, bundleOwner, _instanceWalletAddress, feeAmount);\\n\\n        emit LogTreasuryFeesTransferred(bundleOwner, _instanceWalletAddress, feeAmount);\\n        require(success, \\\"ERROR:TRS-054:FEE_TRANSFER_FAILED\\\");\\n\\n        // transfer net capital\\n        address riskpoolWallet = getRiskpoolWallet(bundle.riskpoolId);\\n        success = TransferHelper.unifiedTransferFrom(token, bundleOwner, riskpoolWallet, netCapitalAmount);\\n\\n        emit LogTreasuryCapitalTransferred(bundleOwner, riskpoolWallet, netCapitalAmount);\\n        require(success, \\\"ERROR:TRS-055:CAPITAL_TRANSFER_FAILED\\\");\\n\\n        emit LogTreasuryCapitalProcessed(bundle.riskpoolId, bundleId, capitalAmount);\\n    }\\n\\n    function processWithdrawal(uint256 bundleId, uint256 amount) \\n        external override\\n        whenNotSuspended\\n        instanceWalletDefined\\n        riskpoolWalletDefinedForBundle(bundleId)\\n        onlyRiskpoolService\\n        returns(\\n            uint256 feeAmount,\\n            uint256 netAmount\\n        )\\n    {\\n        // obtain relevant bundle info\\n        IBundle.Bundle memory bundle = _bundle.getBundle(bundleId);\\n        require(\\n            bundle.capital >= bundle.lockedCapital + amount\\n            || (bundle.lockedCapital == 0 && bundle.balance >= amount),\\n            \\\"ERROR:TRS-060:CAPACITY_OR_BALANCE_SMALLER_THAN_WITHDRAWAL\\\"\\n        );\\n\\n        // obtain relevant token for product/riskpool pair\\n        address riskpoolWallet = getRiskpoolWallet(bundle.riskpoolId);\\n        address bundleOwner = _bundle.getOwner(bundleId);\\n        IERC20 token = _componentToken[bundle.riskpoolId];\\n\\n        require(\\n            token.balanceOf(riskpoolWallet) >= amount, \\n            \\\"ERROR:TRS-061:RISKPOOL_WALLET_BALANCE_TOO_SMALL\\\"\\n        );\\n        require(\\n            token.allowance(riskpoolWallet, address(this)) >= amount, \\n            \\\"ERROR:TRS-062:WITHDRAWAL_ALLOWANCE_TOO_SMALL\\\"\\n        );\\n\\n        // TODO consider to introduce withdrawal fees\\n        // ideally symmetrical reusing capital fee spec for riskpool\\n        feeAmount = 0;\\n        netAmount = amount;\\n        bool success = TransferHelper.unifiedTransferFrom(token, riskpoolWallet, bundleOwner, netAmount);\\n\\n        emit LogTreasuryWithdrawalTransferred(riskpoolWallet, bundleOwner, netAmount);\\n        require(success, \\\"ERROR:TRS-063:WITHDRAWAL_TRANSFER_FAILED\\\");\\n\\n        emit LogTreasuryWithdrawalProcessed(bundle.riskpoolId, bundleId, netAmount);\\n    }\\n\\n\\n    function getComponentToken(uint256 componentId) \\n        public override\\n        view\\n        returns(IERC20 token) \\n    {\\n        require(_component.isProduct(componentId) || _component.isRiskpool(componentId), \\\"ERROR:TRS-070:NOT_PRODUCT_OR_RISKPOOL\\\");\\n        return _componentToken[componentId];\\n    }\\n\\n    function getFeeSpecification(uint256 componentId) public override view returns(FeeSpecification memory) {\\n        return _fees[componentId];\\n    }\\n\\n    function getFractionFullUnit() public override pure returns(uint256) { \\n        return FRACTION_FULL_UNIT; \\n    }\\n\\n    function getInstanceWallet() public override view returns(address) { \\n        return _instanceWalletAddress; \\n    }\\n\\n    function getRiskpoolWallet(uint256 riskpoolId) public override view returns(address) {\\n        return _riskpoolWallet[riskpoolId];\\n    }\\n\\n\\n    function _calculatePremiumFee(\\n        FeeSpecification memory feeSpec, \\n        bytes32 processId\\n    )\\n        internal\\n        view\\n        returns (\\n            IPolicy.Application memory application, \\n            uint256 feeAmount\\n        )\\n    {\\n        application =  _policy.getApplication(processId);\\n        feeAmount = _calculateFee(feeSpec, application.premiumAmount);\\n    } \\n\\n\\n    function _calculateFee(\\n        FeeSpecification memory feeSpec, \\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (uint256 feeAmount)\\n    {\\n        if (feeSpec.feeCalculationData.length > 0) {\\n            revert(\\\"ERROR:TRS-090:FEE_CALCULATION_DATA_NOT_SUPPORTED\\\");\\n        }\\n\\n        // start with fixed fee\\n        feeAmount = feeSpec.fixedFee;\\n\\n        // add fractional fee on top\\n        if (feeSpec.fractionalFee > 0) {\\n            feeAmount += (feeSpec.fractionalFee * amount) / FRACTION_FULL_UNIT;\\n        }\\n\\n        // require that fee is smaller than amount\\n        require(feeAmount < amount, \\\"ERROR:TRS-091:FEE_TOO_BIG\\\");\\n    } \\n\\n    function _getRiskpoolWallet(bytes32 processId)\\n        internal\\n        view\\n        returns(uint256 riskpoolId, address riskpoolWalletAddress)\\n    {\\n        IPolicy.Metadata memory metadata = _policy.getMetadata(processId);\\n        riskpoolId = _pool.getRiskPoolForProduct(metadata.productId);\\n        require(riskpoolId > 0, \\\"ERROR:TRS-092:PRODUCT_WITHOUT_RISKPOOL\\\");\\n        riskpoolWalletAddress = _riskpoolWallet[riskpoolId];\\n    }\\n}\\n\"\r\n    },\r\n    \"ComponentController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"CoreController.sol\\\";\\nimport \\\"IComponent.sol\\\";\\nimport \\\"IOracle.sol\\\";\\nimport \\\"IProduct.sol\\\";\\nimport \\\"IRiskpool.sol\\\";\\nimport \\\"IComponentEvents.sol\\\";\\nimport \\\"EnumerableSet.sol\\\";\\n\\ncontract ComponentController is\\n    IComponentEvents,\\n    CoreController \\n {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    mapping(uint256 => IComponent) private _componentById;\\n    mapping(bytes32 => uint256) private _componentIdByName;\\n    mapping(address => uint256) private _componentIdByAddress;\\n\\n    mapping(uint256 => IComponent.ComponentState) private _componentState;\\n\\n    EnumerableSet.UintSet private _products;\\n    EnumerableSet.UintSet private _oracles;\\n    EnumerableSet.UintSet private _riskpools;\\n    uint256 private _componentCount;\\n\\n    mapping(uint256 /* product id */ => address /* policy flow address */) private _policyFlowByProductId;\\n\\n    modifier onlyComponentOwnerService() {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"ComponentOwnerService\\\"),\\n            \\\"ERROR:CCR-001:NOT_COMPONENT_OWNER_SERVICE\\\");\\n        _;\\n    }\\n\\n    modifier onlyInstanceOperatorService() {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"InstanceOperatorService\\\"),\\n            \\\"ERROR:CCR-002:NOT_INSTANCE_OPERATOR_SERVICE\\\");\\n        _;\\n    }\\n\\n    function propose(IComponent component) \\n        external\\n        onlyComponentOwnerService \\n    {\\n        // input validation\\n        require(_componentIdByAddress[address(component)] == 0, \\\"ERROR:CCR-003:COMPONENT_ALREADY_EXISTS\\\");\\n        require(_componentIdByName[component.getName()] == 0, \\\"ERROR:CCR-004:COMPONENT_NAME_ALREADY_EXISTS\\\");\\n\\n        // assigning id and persisting component\\n        uint256 id = _persistComponent(component);\\n\\n        // log entry for successful proposal\\n        emit LogComponentProposed(\\n            component.getName(),\\n            component.getType(),\\n            address(component),\\n            id);\\n        \\n        // inform component about successful proposal\\n        component.proposalCallback();\\n    }\\n\\n    function _persistComponent(IComponent component) \\n        internal\\n        returns(uint256 id)\\n    {\\n        // fetch next component id\\n        _componentCount++;\\n        id = _componentCount;\\n\\n        // update component state\\n        _changeState(id, IComponent.ComponentState.Proposed);\\n        component.setId(id);\\n\\n        // update controller book keeping\\n        _componentById[id] = component;\\n        _componentIdByName[component.getName()] = id;\\n        _componentIdByAddress[address(component)] = id;\\n\\n        // type specific book keeping\\n        if (component.isProduct()) { EnumerableSet.add(_products, id); }\\n        else if (component.isOracle()) { EnumerableSet.add(_oracles, id); }\\n        else if (component.isRiskpool()) { EnumerableSet.add(_riskpools, id); }\\n    }\\n\\n    function exists(uint256 id) public view returns(bool) {\\n        IComponent component = _componentById[id];\\n        return (address(component) != address(0));\\n    }\\n\\n    function approve(uint256 id) \\n        external\\n        onlyInstanceOperatorService \\n    {\\n        _changeState(id, IComponent.ComponentState.Active);\\n        IComponent component = getComponent(id);\\n\\n        if (isProduct(id)) {\\n            _policyFlowByProductId[id] = IProduct(address(component)).getPolicyFlow();\\n        }\\n\\n        emit LogComponentApproved(id);\\n        \\n        // inform component about successful approval\\n        component.approvalCallback();\\n    }\\n\\n    function decline(uint256 id) \\n        external\\n        onlyInstanceOperatorService \\n    {\\n        _changeState(id, IComponent.ComponentState.Declined);\\n        emit LogComponentDeclined(id);\\n        \\n        // inform component about decline\\n        IComponent component = getComponent(id);\\n        component.declineCallback();\\n    }\\n\\n    function suspend(uint256 id) \\n        external \\n        onlyInstanceOperatorService \\n    {\\n        _changeState(id, IComponent.ComponentState.Suspended);\\n        emit LogComponentSuspended(id);\\n        \\n        // inform component about suspending\\n        IComponent component = getComponent(id);\\n        component.suspendCallback();\\n    }\\n\\n    function resume(uint256 id) \\n        external \\n        onlyInstanceOperatorService \\n    {\\n        _changeState(id, IComponent.ComponentState.Active);\\n        emit LogComponentResumed(id);\\n        \\n        // inform component about resuming\\n        IComponent component = getComponent(id);\\n        component.resumeCallback();\\n    }\\n\\n    function pause(uint256 id) \\n        external \\n        onlyComponentOwnerService \\n    {\\n        _changeState(id, IComponent.ComponentState.Paused);\\n        emit LogComponentPaused(id);\\n        \\n        // inform component about pausing\\n        IComponent component = getComponent(id);\\n        component.pauseCallback();\\n    }\\n\\n    function unpause(uint256 id) \\n        external \\n        onlyComponentOwnerService \\n    {\\n        _changeState(id, IComponent.ComponentState.Active);\\n        emit LogComponentUnpaused(id);\\n        \\n        // inform component about unpausing\\n        IComponent component = getComponent(id);\\n        component.unpauseCallback();\\n    }\\n\\n    function archiveFromComponentOwner(uint256 id) \\n        external \\n        onlyComponentOwnerService \\n    {\\n        _changeState(id, IComponent.ComponentState.Archived);\\n        emit LogComponentArchived(id);\\n        \\n        // inform component about archiving\\n        IComponent component = getComponent(id);\\n        component.archiveCallback();\\n    }\\n\\n    function archiveFromInstanceOperator(uint256 id) \\n        external \\n        onlyInstanceOperatorService \\n    {\\n        _changeState(id, IComponent.ComponentState.Archived);\\n        emit LogComponentArchived(id);\\n        \\n        // inform component about archiving\\n        IComponent component = getComponent(id);\\n        component.archiveCallback();\\n    }\\n\\n    function getComponent(uint256 id) public view returns (IComponent component) {\\n        component = _componentById[id];\\n        require(address(component) != address(0), \\\"ERROR:CCR-005:INVALID_COMPONENT_ID\\\");\\n    }\\n\\n    function getComponentId(address componentAddress) public view returns (uint256 id) {\\n        require(componentAddress != address(0), \\\"ERROR:CCR-006:COMPONENT_ADDRESS_ZERO\\\");\\n        id = _componentIdByAddress[componentAddress];\\n\\n        require(id > 0, \\\"ERROR:CCR-007:COMPONENT_UNKNOWN\\\");\\n    }\\n\\n    function getComponentType(uint256 id) public view returns (IComponent.ComponentType componentType) {\\n        if (EnumerableSet.contains(_products, id)) {\\n            return IComponent.ComponentType.Product;\\n        } else if (EnumerableSet.contains(_oracles, id)) {\\n            return IComponent.ComponentType.Oracle;\\n        } else if (EnumerableSet.contains(_riskpools, id)) {\\n            return IComponent.ComponentType.Riskpool;\\n        } else {\\n            revert(\\\"ERROR:CCR-008:INVALID_COMPONENT_ID\\\");\\n        }\\n    }\\n\\n    function getComponentState(uint256 id) public view returns (IComponent.ComponentState componentState) {\\n        return _componentState[id];\\n    }\\n\\n    function getOracleId(uint256 idx) public view returns (uint256 oracleId) {\\n        return EnumerableSet.at(_oracles, idx);\\n    }\\n\\n    function getRiskpoolId(uint256 idx) public view returns (uint256 riskpoolId) {\\n        return EnumerableSet.at(_riskpools, idx);\\n    }\\n\\n    function getProductId(uint256 idx) public view returns (uint256 productId) {\\n        return EnumerableSet.at(_products, idx);\\n    }\\n\\n    function getRequiredRole(IComponent.ComponentType componentType) external view returns (bytes32) {\\n        if (componentType == IComponent.ComponentType.Product) { return _access.getProductOwnerRole(); }\\n        else if (componentType == IComponent.ComponentType.Oracle) { return _access.getOracleProviderRole(); }\\n        else if (componentType == IComponent.ComponentType.Riskpool) { return _access.getRiskpoolKeeperRole(); }\\n        else { revert(\\\"ERROR:CCR-010:COMPONENT_TYPE_UNKNOWN\\\"); }\\n    }\\n\\n    function components() public view returns (uint256 count) { return _componentCount; }\\n    function products() public view returns (uint256 count) { return EnumerableSet.length(_products); }\\n    function oracles() public view returns (uint256 count) { return EnumerableSet.length(_oracles); }\\n    function riskpools() public view returns (uint256 count) { return EnumerableSet.length(_riskpools); }\\n\\n    function isProduct(uint256 id) public view returns (bool) { return EnumerableSet.contains(_products, id); }\\n\\n    function isOracle(uint256 id) public view returns (bool) { return EnumerableSet.contains(_oracles, id); }\\n\\n    function isRiskpool(uint256 id) public view returns (bool) { return EnumerableSet.contains(_riskpools, id); }\\n\\n    function getPolicyFlow(uint256 productId) public view returns (address _policyFlow) {\\n        require(isProduct(productId), \\\"ERROR:CCR-011:UNKNOWN_PRODUCT_ID\\\");\\n        _policyFlow = _policyFlowByProductId[productId];\\n    }\\n\\n    function _changeState(uint256 componentId, IComponent.ComponentState newState) internal {\\n        IComponent.ComponentState oldState = _componentState[componentId];\\n\\n        _checkStateTransition(oldState, newState);\\n        _componentState[componentId] = newState;\\n\\n        // log entry for successful component state change\\n        emit LogComponentStateChanged(componentId, oldState, newState);\\n    }\\n\\n    function _checkStateTransition(\\n        IComponent.ComponentState oldState, \\n        IComponent.ComponentState newState\\n    ) \\n        internal \\n        pure \\n    {\\n        require(newState != oldState, \\n            \\\"ERROR:CCR-020:SOURCE_AND_TARGET_STATE_IDENTICAL\\\");\\n        \\n        if (oldState == IComponent.ComponentState.Created) {\\n            require(newState == IComponent.ComponentState.Proposed, \\n                \\\"ERROR:CCR-021:CREATED_INVALID_TRANSITION\\\");\\n        } else if (oldState == IComponent.ComponentState.Proposed) {\\n            require(newState == IComponent.ComponentState.Active \\n                || newState == IComponent.ComponentState.Declined, \\n                \\\"ERROR:CCR-22:PROPOSED_INVALID_TRANSITION\\\");\\n        } else if (oldState == IComponent.ComponentState.Declined) {\\n            revert(\\\"ERROR:CCR-023:DECLINED_IS_FINAL_STATE\\\");\\n        } else if (oldState == IComponent.ComponentState.Active) {\\n            require(newState == IComponent.ComponentState.Paused \\n                || newState == IComponent.ComponentState.Suspended, \\n                \\\"ERROR:CCR-024:ACTIVE_INVALID_TRANSITION\\\");\\n        } else if (oldState == IComponent.ComponentState.Paused) {\\n            require(newState == IComponent.ComponentState.Active\\n                || newState == IComponent.ComponentState.Archived, \\n                \\\"ERROR:CCR-025:PAUSED_INVALID_TRANSITION\\\");\\n        } else if (oldState == IComponent.ComponentState.Suspended) {\\n            require(newState == IComponent.ComponentState.Active\\n                || newState == IComponent.ComponentState.Archived, \\n                \\\"ERROR:CCR-026:SUSPENDED_INVALID_TRANSITION\\\");\\n        } else {\\n            revert(\\\"ERROR:CCR-027:INITIAL_STATE_NOT_HANDLED\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"CoreController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IAccess.sol\\\";\\nimport \\\"IRegistry.sol\\\";\\n\\nimport \\\"Initializable.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\ncontract CoreController is\\n    Context,\\n    Initializable \\n{\\n    IRegistry internal _registry;\\n    IAccess internal _access;\\n\\n    constructor () {\\n        _disableInitializers();\\n    }\\n\\n    modifier onlyInstanceOperator() {\\n        require(\\n            _registry.ensureSender(_msgSender(), \\\"InstanceOperatorService\\\"),\\n            \\\"ERROR:CRC-001:NOT_INSTANCE_OPERATOR\\\");\\n        _;\\n    }\\n\\n    modifier onlyPolicyFlow(bytes32 module) {\\n        // Allow only from delegator\\n        require(\\n            address(this) == _getContractAddress(module),\\n            \\\"ERROR:CRC-002:NOT_ON_STORAGE\\\"\\n        );\\n\\n        // Allow only ProductService (it delegates to PolicyFlow)\\n        require(\\n            _msgSender() == _getContractAddress(\\\"ProductService\\\"),\\n            \\\"ERROR:CRC-003:NOT_PRODUCT_SERVICE\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(address registry) public initializer {\\n        _registry = IRegistry(registry);\\n        if (_getName() != \\\"Access\\\") { _access = IAccess(_getContractAddress(\\\"Access\\\")); }\\n        \\n        _afterInitialize();\\n    }\\n\\n    function _getName() internal virtual pure returns(bytes32) { return \\\"\\\"; }\\n\\n    function _afterInitialize() internal virtual onlyInitializing {}\\n\\n    function _getContractAddress(bytes32 contractName) internal view returns (address contractAddress) { \\n        contractAddress = _registry.getContract(contractName);\\n        require(\\n            contractAddress != address(0),\\n            \\\"ERROR:CRC-004:CONTRACT_NOT_REGISTERED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IComponent.sol\\\";\\n\\ninterface IOracle is IComponent {\\n    \\n    event LogOracleCreated (address oracleAddress);\\n    event LogOracleProposed (uint256 componentId);\\n    event LogOracleApproved (uint256 componentId);\\n    event LogOracleDeclined (uint256 componentId);\\n    \\n    function request(uint256 requestId, bytes calldata input) external;\\n    function cancel(uint256 requestId) external;\\n}\\n\"\r\n    },\r\n    \"IRiskpool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IComponent.sol\\\";\\nimport \\\"IBundle.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\n\\ninterface IRiskpool is IComponent {\\n\\n    event LogRiskpoolCreated (address riskpoolAddress);\\n    event LogRiskpoolProposed (uint256 id);\\n    event LogRiskpoolApproved (uint256 id);\\n    event LogRiskpoolDeclined (uint256 id);\\n\\n    event LogRiskpoolBundleCreated(uint256 bundleId, uint256 amount);\\n    event LogRiskpoolBundleMatchesPolicy(uint256 bundleId, bool isMatching);\\n    event LogRiskpoolCollateralLocked(bytes32 processId, uint256 collateralAmount, bool isSecured);\\n\\n    event LogRiskpoolPremiumProcessed(bytes32 processId, uint256 amount);\\n    event LogRiskpoolPayoutProcessed(bytes32 processId, uint256 amount);\\n    event LogRiskpoolCollateralReleased(bytes32 processId, uint256 collateralAmount);\\n\\n\\n    function createBundle(bytes memory filter, uint256 initialAmount) external returns(uint256 bundleId);\\n    function fundBundle(uint256 bundleId, uint256 amount) external returns(uint256 netAmount);\\n    function defundBundle(uint256 bundleId, uint256 amount) external returns(uint256 netAmount);\\n\\n    function lockBundle(uint256 bundleId) external;\\n    function unlockBundle(uint256 bundleId) external;\\n    function closeBundle(uint256 bundleId) external;\\n    function burnBundle(uint256 bundleId) external;\\n\\n    function collateralizePolicy(bytes32 processId, uint256 collateralAmount) external returns(bool isSecured);\\n    function processPolicyPremium(bytes32 processId, uint256 amount) external;\\n    function processPolicyPayout(bytes32 processId, uint256 amount) external;\\n    function releasePolicy(bytes32 processId) external;\\n\\n    function getCollateralizationLevel() external view returns (uint256);\\n    function getFullCollateralizationLevel() external view returns (uint256);\\n\\n    function bundleMatchesApplication(\\n        IBundle.Bundle memory bundle, \\n        IPolicy.Application memory application\\n    ) \\n        external view returns(bool isMatching);   \\n    \\n    function getFilterDataStructure() external view returns(string memory);\\n\\n    function bundles() external view returns(uint256);\\n    function getBundle(uint256 idx) external view returns(IBundle.Bundle memory);\\n\\n    function activeBundles() external view returns(uint256);\\n    function getActiveBundleId(uint256 idx) external view returns(uint256 bundleId);\\n\\n    function getWallet() external view returns(address);\\n    function getErc20Token() external view returns(address);\\n\\n    function getSumOfSumInsuredCap() external view returns (uint256);\\n    function getCapital() external view returns(uint256);\\n    function getTotalValueLocked() external view returns(uint256); \\n    function getCapacity() external view returns(uint256); \\n    function getBalance() external view returns(uint256); \\n\\n    function setMaximumNumberOfActiveBundles(uint256 maximumNumberOfActiveBundles) external; \\n    function getMaximumNumberOfActiveBundles() external view returns(uint256 maximumNumberOfActiveBundles);\\n}\\n\"\r\n    },\r\n    \"PolicyController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"CoreController.sol\\\";\\nimport \\\"ComponentController.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\n\\ncontract PolicyController is \\n    IPolicy, \\n    CoreController\\n{\\n    // bytes32 public constant NAME = \\\"PolicyController\\\";\\n\\n    // Metadata\\n    mapping(bytes32 /* processId */ => Metadata) public metadata;\\n\\n    // Applications\\n    mapping(bytes32 /* processId */ => Application) public applications;\\n\\n    // Policies\\n    mapping(bytes32 /* processId */ => Policy) public policies;\\n\\n    // Claims\\n    mapping(bytes32 /* processId */ => mapping(uint256 /* claimId */ => Claim)) public claims;\\n\\n    // Payouts\\n    mapping(bytes32 /* processId */ => mapping(uint256 /* payoutId */ => Payout)) public payouts;\\n    mapping(bytes32 /* processId */ => uint256) public payoutCount;\\n\\n    // counter for assigned processIds, used to ensure unique processIds\\n    uint256 private _assigendProcessIds;\\n\\n    ComponentController private _component;\\n\\n    function _afterInitialize() internal override onlyInitializing {\\n        _component = ComponentController(_getContractAddress(\\\"Component\\\"));\\n    }\\n\\n    /* Metadata */\\n    function createPolicyFlow(\\n        address owner,\\n        uint256 productId,\\n        bytes calldata data\\n    )\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n        returns(bytes32 processId)\\n    {\\n        require(owner != address(0), \\\"ERROR:POL-001:INVALID_OWNER\\\");\\n\\n        require(_component.isProduct(productId), \\\"ERROR:POL-002:INVALID_PRODUCT\\\");\\n        require(_component.getComponentState(productId) == IComponent.ComponentState.Active, \\\"ERROR:POL-003:PRODUCT_NOT_ACTIVE\\\");\\n        \\n        processId = _generateNextProcessId();\\n        Metadata storage meta = metadata[processId];\\n        require(meta.createdAt == 0, \\\"ERROR:POC-004:METADATA_ALREADY_EXISTS\\\");\\n\\n        meta.owner = owner;\\n        meta.productId = productId;\\n        meta.state = PolicyFlowState.Started;\\n        meta.data = data;\\n        meta.createdAt = block.timestamp; // solhint-disable-line\\n        meta.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogMetadataCreated(owner, processId, productId, PolicyFlowState.Started);\\n    }\\n\\n    /* Application */\\n    function createApplication(\\n        bytes32 processId, \\n        uint256 premiumAmount,\\n        uint256 sumInsuredAmount,\\n        bytes calldata data\\n    )\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Metadata storage meta = metadata[processId];\\n        require(meta.createdAt > 0, \\\"ERROR:POC-010:METADATA_DOES_NOT_EXIST\\\");\\n\\n        Application storage application = applications[processId];\\n        require(application.createdAt == 0, \\\"ERROR:POC-011:APPLICATION_ALREADY_EXISTS\\\");\\n\\n        require(premiumAmount > 0, \\\"ERROR:POC-012:PREMIUM_AMOUNT_ZERO\\\");\\n        require(sumInsuredAmount > premiumAmount, \\\"ERROR:POC-013:SUM_INSURED_AMOUNT_TOO_SMALL\\\");\\n\\n        application.state = ApplicationState.Applied;\\n        application.premiumAmount = premiumAmount;\\n        application.sumInsuredAmount = sumInsuredAmount;\\n        application.data = data;\\n        application.createdAt = block.timestamp; // solhint-disable-line\\n        application.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        meta.state = PolicyFlowState.Active;\\n        meta.updatedAt = block.timestamp; // solhint-disable-line\\n        emit LogMetadataStateChanged(processId, meta.state);\\n\\n        emit LogApplicationCreated(processId, premiumAmount, sumInsuredAmount);\\n    }\\n\\n    function collectPremium(bytes32 processId, uint256 amount) \\n        external override\\n    {\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-110:POLICY_DOES_NOT_EXIST\\\");\\n        require(policy.premiumPaidAmount + amount <= policy.premiumExpectedAmount, \\\"ERROR:POC-111:AMOUNT_TOO_BIG\\\");\\n\\n        policy.premiumPaidAmount += amount;\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n    \\n        emit LogPremiumCollected(processId, amount);\\n    }\\n    \\n    function revokeApplication(bytes32 processId)\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Metadata storage meta = metadata[processId];\\n        require(meta.createdAt > 0, \\\"ERROR:POC-014:METADATA_DOES_NOT_EXIST\\\");\\n\\n        Application storage application = applications[processId];\\n        require(application.createdAt > 0, \\\"ERROR:POC-015:APPLICATION_DOES_NOT_EXIST\\\");\\n        require(application.state == ApplicationState.Applied, \\\"ERROR:POC-016:APPLICATION_STATE_INVALID\\\");\\n\\n        application.state = ApplicationState.Revoked;\\n        application.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        meta.state = PolicyFlowState.Finished;\\n        meta.updatedAt = block.timestamp; // solhint-disable-line\\n        emit LogMetadataStateChanged(processId, meta.state);\\n\\n        emit LogApplicationRevoked(processId);\\n    }\\n\\n    function underwriteApplication(bytes32 processId)\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Application storage application = applications[processId];\\n        require(application.createdAt > 0, \\\"ERROR:POC-017:APPLICATION_DOES_NOT_EXIST\\\");\\n        require(application.state == ApplicationState.Applied, \\\"ERROR:POC-018:APPLICATION_STATE_INVALID\\\");\\n\\n        application.state = ApplicationState.Underwritten;\\n        application.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogApplicationUnderwritten(processId);\\n    }\\n\\n    function declineApplication(bytes32 processId)\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Metadata storage meta = metadata[processId];\\n        require(meta.createdAt > 0, \\\"ERROR:POC-019:METADATA_DOES_NOT_EXIST\\\");\\n\\n        Application storage application = applications[processId];\\n        require(application.createdAt > 0, \\\"ERROR:POC-020:APPLICATION_DOES_NOT_EXIST\\\");\\n        require(application.state == ApplicationState.Applied, \\\"ERROR:POC-021:APPLICATION_STATE_INVALID\\\");\\n\\n        application.state = ApplicationState.Declined;\\n        application.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        meta.state = PolicyFlowState.Finished;\\n        meta.updatedAt = block.timestamp; // solhint-disable-line\\n        emit LogMetadataStateChanged(processId, meta.state);\\n\\n        emit LogApplicationDeclined(processId);\\n    }\\n\\n    /* Policy */\\n    function createPolicy(bytes32 processId) \\n        external override \\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Application memory application = applications[processId];\\n        require(application.createdAt > 0 && application.state == ApplicationState.Underwritten, \\\"ERROR:POC-022:APPLICATION_ACCESS_INVALID\\\");\\n\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt == 0, \\\"ERROR:POC-023:POLICY_ALREADY_EXISTS\\\");\\n\\n        policy.state = PolicyState.Active;\\n        policy.premiumExpectedAmount = application.premiumAmount;\\n        policy.payoutMaxAmount = application.sumInsuredAmount;\\n        policy.createdAt = block.timestamp; // solhint-disable-line\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogPolicyCreated(processId);\\n    }\\n\\n    function adjustPremiumSumInsured(\\n        bytes32 processId, \\n        uint256 expectedPremiumAmount,\\n        uint256 sumInsuredAmount\\n    )\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Application storage application = applications[processId];\\n        require(\\n            application.createdAt > 0 \\n            && application.state == ApplicationState.Underwritten, \\n            \\\"ERROR:POC-024:APPLICATION_ACCESS_INVALID\\\");\\n\\n        require(\\n            sumInsuredAmount <= application.sumInsuredAmount, \\n            \\\"ERROR:POC-026:APPLICATION_SUM_INSURED_INCREASE_INVALID\\\");\\n\\n        Policy storage policy = policies[processId];\\n        require(\\n            policy.createdAt > 0 \\n            && policy.state == IPolicy.PolicyState.Active, \\n            \\\"ERROR:POC-027:POLICY_ACCESS_INVALID\\\");\\n        \\n        require(\\n            expectedPremiumAmount > 0 \\n            && expectedPremiumAmount >= policy.premiumPaidAmount\\n            && expectedPremiumAmount < sumInsuredAmount, \\n            \\\"ERROR:POC-025:APPLICATION_PREMIUM_INVALID\\\");\\n\\n        if (sumInsuredAmount != application.sumInsuredAmount) {\\n            emit LogApplicationSumInsuredAdjusted(processId, application.sumInsuredAmount, sumInsuredAmount);\\n            application.sumInsuredAmount = sumInsuredAmount;\\n            application.updatedAt = block.timestamp; // solhint-disable-line\\n\\n            policy.payoutMaxAmount = sumInsuredAmount;\\n            policy.updatedAt = block.timestamp; // solhint-disable-line\\n        }\\n\\n        if (expectedPremiumAmount != application.premiumAmount) {\\n            emit LogApplicationPremiumAdjusted(processId, application.premiumAmount, expectedPremiumAmount);\\n            application.premiumAmount = expectedPremiumAmount;\\n            application.updatedAt = block.timestamp; // solhint-disable-line\\n\\n            emit LogPolicyPremiumAdjusted(processId, policy.premiumExpectedAmount, expectedPremiumAmount);\\n            policy.premiumExpectedAmount = expectedPremiumAmount;\\n            policy.updatedAt = block.timestamp; // solhint-disable-line\\n        }\\n    }\\n\\n    function expirePolicy(bytes32 processId)\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-028:POLICY_DOES_NOT_EXIST\\\");\\n        require(policy.state == PolicyState.Active, \\\"ERROR:POC-029:APPLICATION_STATE_INVALID\\\");\\n\\n        policy.state = PolicyState.Expired;\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogPolicyExpired(processId);\\n    }\\n\\n    function closePolicy(bytes32 processId)\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Metadata storage meta = metadata[processId];\\n        require(meta.createdAt > 0, \\\"ERROR:POC-030:METADATA_DOES_NOT_EXIST\\\");\\n\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-031:POLICY_DOES_NOT_EXIST\\\");\\n        require(policy.state == PolicyState.Expired, \\\"ERROR:POC-032:POLICY_STATE_INVALID\\\");\\n        require(policy.openClaimsCount == 0, \\\"ERROR:POC-033:POLICY_HAS_OPEN_CLAIMS\\\");\\n\\n        policy.state = PolicyState.Closed;\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        meta.state = PolicyFlowState.Finished;\\n        meta.updatedAt = block.timestamp; // solhint-disable-line\\n        emit LogMetadataStateChanged(processId, meta.state);\\n\\n        emit LogPolicyClosed(processId);\\n    }\\n\\n    /* Claim */\\n    function createClaim(\\n        bytes32 processId, \\n        uint256 claimAmount,\\n        bytes calldata data\\n    )\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\")\\n        returns (uint256 claimId)\\n    {\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-040:POLICY_DOES_NOT_EXIST\\\");\\n        require(policy.state == IPolicy.PolicyState.Active, \\\"ERROR:POC-041:POLICY_NOT_ACTIVE\\\");\\n        // no validation of claimAmount > 0 here to explicitly allow claims with amount 0. This can be useful for parametric insurance \\n        // to have proof that the claim calculation was executed without entitlement to payment.\\n        require(policy.payoutAmount + claimAmount <= policy.payoutMaxAmount, \\\"ERROR:POC-042:CLAIM_AMOUNT_EXCEEDS_MAX_PAYOUT\\\");\\n\\n        claimId = policy.claimsCount;\\n        Claim storage claim = claims[processId][claimId];\\n        require(claim.createdAt == 0, \\\"ERROR:POC-043:CLAIM_ALREADY_EXISTS\\\");\\n\\n        claim.state = ClaimState.Applied;\\n        claim.claimAmount = claimAmount;\\n        claim.data = data;\\n        claim.createdAt = block.timestamp; // solhint-disable-line\\n        claim.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        policy.claimsCount++;\\n        policy.openClaimsCount++;\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogClaimCreated(processId, claimId, claimAmount);\\n    }\\n\\n    function confirmClaim(\\n        bytes32 processId,\\n        uint256 claimId,\\n        uint256 confirmedAmount\\n    ) \\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\") \\n    {\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-050:POLICY_DOES_NOT_EXIST\\\");\\n        require(policy.openClaimsCount > 0, \\\"ERROR:POC-051:POLICY_WITHOUT_OPEN_CLAIMS\\\");\\n        // no validation of claimAmount > 0 here as is it possible to have claims with amount 0 (see createClaim()). \\n        require(policy.payoutAmount + confirmedAmount <= policy.payoutMaxAmount, \\\"ERROR:POC-052:PAYOUT_MAX_AMOUNT_EXCEEDED\\\");\\n\\n        Claim storage claim = claims[processId][claimId];\\n        require(claim.createdAt > 0, \\\"ERROR:POC-053:CLAIM_DOES_NOT_EXIST\\\");\\n        require(claim.state == ClaimState.Applied, \\\"ERROR:POC-054:CLAIM_STATE_INVALID\\\");\\n\\n        claim.state = ClaimState.Confirmed;\\n        claim.claimAmount = confirmedAmount;\\n        claim.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        policy.payoutAmount += confirmedAmount;\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogClaimConfirmed(processId, claimId, confirmedAmount);\\n    }\\n\\n    function declineClaim(bytes32 processId, uint256 claimId)\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\") \\n    {\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-060:POLICY_DOES_NOT_EXIST\\\");\\n        require(policy.openClaimsCount > 0, \\\"ERROR:POC-061:POLICY_WITHOUT_OPEN_CLAIMS\\\");\\n\\n        Claim storage claim = claims[processId][claimId];\\n        require(claim.createdAt > 0, \\\"ERROR:POC-062:CLAIM_DOES_NOT_EXIST\\\");\\n        require(claim.state == ClaimState.Applied, \\\"ERROR:POC-063:CLAIM_STATE_INVALID\\\");\\n\\n        claim.state = ClaimState.Declined;\\n        claim.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogClaimDeclined(processId, claimId);\\n    }\\n\\n    function closeClaim(bytes32 processId, uint256 claimId)\\n        external override\\n        onlyPolicyFlow(\\\"Policy\\\") \\n    {\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-070:POLICY_DOES_NOT_EXIST\\\");\\n        require(policy.openClaimsCount > 0, \\\"ERROR:POC-071:POLICY_WITHOUT_OPEN_CLAIMS\\\");\\n\\n        Claim storage claim = claims[processId][claimId];\\n        require(claim.createdAt > 0, \\\"ERROR:POC-072:CLAIM_DOES_NOT_EXIST\\\");\\n        require(\\n            claim.state == ClaimState.Confirmed \\n            || claim.state == ClaimState.Declined, \\n            \\\"ERROR:POC-073:CLAIM_STATE_INVALID\\\");\\n\\n        require(\\n            (claim.state == ClaimState.Confirmed && claim.claimAmount == claim.paidAmount) \\n            || (claim.state == ClaimState.Declined), \\n            \\\"ERROR:POC-074:CLAIM_WITH_UNPAID_PAYOUTS\\\"\\n        );\\n\\n        claim.state = ClaimState.Closed;\\n        claim.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        policy.openClaimsCount--;\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogClaimClosed(processId, claimId);\\n    }\\n\\n    /* Payout */\\n    function createPayout(\\n        bytes32 processId,\\n        uint256 claimId,\\n        uint256 payoutAmount,\\n        bytes calldata data\\n    )\\n        external override \\n        onlyPolicyFlow(\\\"Policy\\\") \\n        returns (uint256 payoutId)\\n    {\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-080:POLICY_DOES_NOT_EXIST\\\");\\n\\n        Claim storage claim = claims[processId][claimId];\\n        require(claim.createdAt > 0, \\\"ERROR:POC-081:CLAIM_DOES_NOT_EXIST\\\");\\n        require(claim.state == IPolicy.ClaimState.Confirmed, \\\"ERROR:POC-082:CLAIM_NOT_CONFIRMED\\\");\\n        require(payoutAmount > 0, \\\"ERROR:POC-083:PAYOUT_AMOUNT_ZERO_INVALID\\\");\\n        require(\\n            claim.paidAmount + payoutAmount <= claim.claimAmount,\\n            \\\"ERROR:POC-084:PAYOUT_AMOUNT_TOO_BIG\\\"\\n        );\\n\\n        payoutId = payoutCount[processId];\\n        Payout storage payout = payouts[processId][payoutId];\\n        require(payout.createdAt == 0, \\\"ERROR:POC-085:PAYOUT_ALREADY_EXISTS\\\");\\n\\n        payout.claimId = claimId;\\n        payout.amount = payoutAmount;\\n        payout.data = data;\\n        payout.state = PayoutState.Expected;\\n        payout.createdAt = block.timestamp; // solhint-disable-line\\n        payout.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        payoutCount[processId]++;\\n        policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogPayoutCreated(processId, claimId, payoutId, payoutAmount);\\n    }\\n\\n    function processPayout(\\n        bytes32 processId,\\n        uint256 payoutId\\n    )\\n        external override \\n        onlyPolicyFlow(\\\"Policy\\\")\\n    {\\n        Policy storage policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-090:POLICY_DOES_NOT_EXIST\\\");\\n        require(policy.openClaimsCount > 0, \\\"ERROR:POC-091:POLICY_WITHOUT_OPEN_CLAIMS\\\");\\n\\n        Payout storage payout = payouts[processId][payoutId];\\n        require(payout.createdAt > 0, \\\"ERROR:POC-092:PAYOUT_DOES_NOT_EXIST\\\");\\n        require(payout.state == PayoutState.Expected, \\\"ERROR:POC-093:PAYOUT_ALREADY_PAIDOUT\\\");\\n\\n        payout.state = IPolicy.PayoutState.PaidOut;\\n        payout.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogPayoutProcessed(processId, payoutId);\\n\\n        Claim storage claim = claims[processId][payout.claimId];\\n        claim.paidAmount += payout.amount;\\n        claim.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        // check if claim can be closed\\n        if (claim.claimAmount == claim.paidAmount) {\\n            claim.state = IPolicy.ClaimState.Closed;\\n\\n            policy.openClaimsCount -= 1;\\n            policy.updatedAt = block.timestamp; // solhint-disable-line\\n\\n            emit LogClaimClosed(processId, payout.claimId);\\n        }\\n    }\\n\\n    function getMetadata(bytes32 processId)\\n        public\\n        view\\n        returns (IPolicy.Metadata memory _metadata)\\n    {\\n        _metadata = metadata[processId];\\n        require(_metadata.createdAt > 0,  \\\"ERROR:POC-100:METADATA_DOES_NOT_EXIST\\\");\\n    }\\n\\n    function getApplication(bytes32 processId)\\n        public\\n        view\\n        returns (IPolicy.Application memory application)\\n    {\\n        application = applications[processId];\\n        require(application.createdAt > 0, \\\"ERROR:POC-101:APPLICATION_DOES_NOT_EXIST\\\");        \\n    }\\n\\n    function getNumberOfClaims(bytes32 processId) external view returns(uint256 numberOfClaims) {\\n        numberOfClaims = getPolicy(processId).claimsCount;\\n    }\\n    \\n    function getNumberOfPayouts(bytes32 processId) external view returns(uint256 numberOfPayouts) {\\n        numberOfPayouts = payoutCount[processId];\\n    }\\n\\n    function getPolicy(bytes32 processId)\\n        public\\n        view\\n        returns (IPolicy.Policy memory policy)\\n    {\\n        policy = policies[processId];\\n        require(policy.createdAt > 0, \\\"ERROR:POC-102:POLICY_DOES_NOT_EXIST\\\");        \\n    }\\n\\n    function getClaim(bytes32 processId, uint256 claimId)\\n        public\\n        view\\n        returns (IPolicy.Claim memory claim)\\n    {\\n        claim = claims[processId][claimId];\\n        require(claim.createdAt > 0, \\\"ERROR:POC-103:CLAIM_DOES_NOT_EXIST\\\");        \\n    }\\n\\n    function getPayout(bytes32 processId, uint256 payoutId)\\n        public\\n        view\\n        returns (IPolicy.Payout memory payout)\\n    {\\n        payout = payouts[processId][payoutId];\\n        require(payout.createdAt > 0, \\\"ERROR:POC-104:PAYOUT_DOES_NOT_EXIST\\\");        \\n    }\\n\\n    function processIds() external view returns (uint256) {\\n        return _assigendProcessIds;\\n    }\\n\\n    function _generateNextProcessId() private returns(bytes32 processId) {\\n        _assigendProcessIds++;\\n\\n        processId = keccak256(\\n            abi.encodePacked(\\n                block.chainid, \\n                address(_registry),\\n                _assigendProcessIds\\n            )\\n        );\\n    } \\n}\\n\"\r\n    },\r\n    \"BundleController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"PolicyController.sol\\\";\\nimport \\\"CoreController.sol\\\";\\nimport \\\"BundleToken.sol\\\";\\n\\nimport \\\"IProduct.sol\\\";\\nimport \\\"IBundle.sol\\\";\\nimport \\\"PoolController.sol\\\";\\n\\n\\ncontract BundleController is \\n    IBundle,\\n    CoreController\\n{\\n\\n    PolicyController private _policy;\\n    BundleToken private _token; \\n\\n    mapping(uint256 /* bundleId */ => Bundle /* Bundle */) private _bundles;\\n    mapping(uint256 /* bundleId */ => uint256 /* activePolicyCount */) private _activePolicies;\\n    mapping(uint256 /* bundleId */ => mapping(bytes32 /* processId */ => uint256 /* lockedCapitalAmount */)) private _valueLockedPerPolicy;\\n    mapping(uint256 /* riskpoolId */ => uint256 /* numberOfUnburntBundles */) private _unburntBundlesForRiskpoolId;\\n    \\n\\n    uint256 private _bundleCount;\\n\\n    modifier onlyRiskpoolService() {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"RiskpoolService\\\"),\\n            \\\"ERROR:BUC-001:NOT_RISKPOOL_SERVICE\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyFundableBundle(uint256 bundleId) {\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.createdAt > 0, \\\"ERROR:BUC-002:BUNDLE_DOES_NOT_EXIST\\\");\\n        require(\\n            bundle.state != IBundle.BundleState.Burned \\n            && bundle.state != IBundle.BundleState.Closed, \\\"ERROR:BUC-003:BUNDLE_BURNED_OR_CLOSED\\\"\\n        );\\n        _;\\n    }\\n\\n    function _afterInitialize() internal override onlyInitializing {\\n        _policy = PolicyController(_getContractAddress(\\\"Policy\\\"));\\n        _token = BundleToken(_getContractAddress(\\\"BundleToken\\\"));\\n    }\\n\\n    function create(address owner_, uint riskpoolId_, bytes calldata filter_, uint256 amount_) \\n        external override\\n        onlyRiskpoolService\\n        returns(uint256 bundleId)\\n    {   \\n        // will start with bundleId 1.\\n        // this helps in maps where a bundleId equals a non-existing entry\\n        bundleId = _bundleCount + 1;\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.createdAt == 0, \\\"ERROR:BUC-010:BUNDLE_ALREADY_EXISTS\\\");\\n\\n        // mint corresponding nft with bundleId as nft\\n        uint256 tokenId = _token.mint(bundleId, owner_);\\n\\n        bundle.id = bundleId;\\n        bundle.tokenId = tokenId;\\n        bundle.riskpoolId = riskpoolId_;\\n        bundle.state = BundleState.Active;\\n        bundle.filter = filter_;\\n        bundle.capital = amount_;\\n        bundle.balance = amount_;\\n        bundle.createdAt = block.timestamp;\\n        bundle.updatedAt = block.timestamp;\\n\\n        // update bundle count\\n        _bundleCount++;\\n        _unburntBundlesForRiskpoolId[riskpoolId_]++;\\n\\n        emit LogBundleCreated(bundle.id, riskpoolId_, owner_, bundle.state, bundle.capital);\\n    }\\n\\n\\n    function fund(uint256 bundleId, uint256 amount)\\n        external override \\n        onlyRiskpoolService\\n    {\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.createdAt > 0, \\\"ERROR:BUC-011:BUNDLE_DOES_NOT_EXIST\\\");\\n        require(bundle.state != IBundle.BundleState.Closed, \\\"ERROR:BUC-012:BUNDLE_CLOSED\\\");\\n\\n        bundle.capital += amount;\\n        bundle.balance += amount;\\n        bundle.updatedAt = block.timestamp;\\n\\n        uint256 capacityAmount = bundle.capital - bundle.lockedCapital;\\n        emit LogBundleCapitalProvided(bundleId, _msgSender(), amount, capacityAmount);\\n    }\\n\\n\\n    function defund(uint256 bundleId, uint256 amount) \\n        external override \\n        onlyRiskpoolService\\n    {\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.createdAt > 0, \\\"ERROR:BUC-013:BUNDLE_DOES_NOT_EXIST\\\");\\n        require(\\n            bundle.capital >= bundle.lockedCapital + amount\\n            || (bundle.lockedCapital == 0 && bundle.balance >= amount),\\n            \\\"ERROR:BUC-014:CAPACITY_OR_BALANCE_TOO_LOW\\\"\\n        );\\n\\n        if (bundle.capital >= amount) { bundle.capital -= amount; } \\n        else                          { bundle.capital = 0; }\\n\\n        bundle.balance -= amount;\\n        bundle.updatedAt = block.timestamp;\\n\\n        uint256 capacityAmount = bundle.capital - bundle.lockedCapital;\\n        emit LogBundleCapitalWithdrawn(bundleId, _msgSender(), amount, capacityAmount);\\n    }\\n\\n    function lock(uint256 bundleId)\\n        external override\\n        onlyRiskpoolService\\n    {\\n        _changeState(bundleId, BundleState.Locked);\\n    }\\n\\n    function unlock(uint256 bundleId)\\n        external override\\n        onlyRiskpoolService\\n    {\\n        _changeState(bundleId, BundleState.Active);\\n    }\\n\\n    function close(uint256 bundleId)\\n        external override\\n        onlyRiskpoolService\\n    {\\n        require(_activePolicies[bundleId] == 0, \\\"ERROR:BUC-015:BUNDLE_WITH_ACTIVE_POLICIES\\\");\\n        _changeState(bundleId, BundleState.Closed);\\n    }\\n\\n    function burn(uint256 bundleId)    \\n        external override\\n        onlyRiskpoolService\\n    {\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.state == BundleState.Closed, \\\"ERROR:BUC-016:BUNDLE_NOT_CLOSED\\\");\\n        require(bundle.balance == 0, \\\"ERROR:BUC-017:BUNDLE_HAS_BALANCE\\\");\\n\\n        // burn corresponding nft -> as a result bundle looses its owner\\n        _token.burn(bundleId);\\n        _unburntBundlesForRiskpoolId[bundle.riskpoolId] -= 1;\\n\\n        _changeState(bundleId, BundleState.Burned);\\n    }\\n\\n    function collateralizePolicy(uint256 bundleId, bytes32 processId, uint256 amount)\\n        external override \\n        onlyRiskpoolService\\n    {\\n        IPolicy.Metadata memory metadata = _policy.getMetadata(processId);\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.riskpoolId == _getPoolController().getRiskPoolForProduct(metadata.productId), \\\"ERROR:BUC-019:BUNDLE_NOT_IN_RISKPOOL\\\");\\n        require(bundle.createdAt > 0, \\\"ERROR:BUC-020:BUNDLE_DOES_NOT_EXIST\\\");\\n        require(bundle.state == IBundle.BundleState.Active, \\\"ERROR:BUC-021:BUNDLE_NOT_ACTIVE\\\");        \\n        require(bundle.capital >= bundle.lockedCapital + amount, \\\"ERROR:BUC-022:CAPACITY_TOO_LOW\\\");\\n\\n        // might need to be added in a future relase\\n        require(_valueLockedPerPolicy[bundleId][processId] == 0, \\\"ERROR:BUC-023:INCREMENTAL_COLLATERALIZATION_NOT_IMPLEMENTED\\\");\\n\\n        bundle.lockedCapital += amount;\\n        bundle.updatedAt = block.timestamp;\\n\\n        _activePolicies[bundleId] += 1;\\n        _valueLockedPerPolicy[bundleId][processId] = amount;\\n\\n        uint256 capacityAmount = bundle.capital - bundle.lockedCapital;\\n        emit LogBundlePolicyCollateralized(bundleId, processId, amount, capacityAmount);\\n    }\\n\\n\\n    function processPremium(uint256 bundleId, bytes32 processId, uint256 amount)\\n        external override\\n        onlyRiskpoolService\\n        onlyFundableBundle(bundleId)\\n    {\\n        IPolicy.Policy memory policy = _policy.getPolicy(processId);\\n        require(\\n            policy.state != IPolicy.PolicyState.Closed,\\n            \\\"ERROR:POL-030:POLICY_STATE_INVALID\\\"\\n        );\\n\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.createdAt > 0, \\\"ERROR:BUC-031:BUNDLE_DOES_NOT_EXIST\\\");\\n        \\n        bundle.balance += amount;\\n        bundle.updatedAt = block.timestamp; // solhint-disable-line\\n    }\\n\\n\\n    function processPayout(uint256 bundleId, bytes32 processId, uint256 amount) \\n        external override \\n        onlyRiskpoolService\\n    {\\n        IPolicy.Policy memory policy = _policy.getPolicy(processId);\\n        require(\\n            policy.state != IPolicy.PolicyState.Closed,\\n            \\\"ERROR:POL-040:POLICY_STATE_INVALID\\\"\\n        );\\n\\n        // check there are policies and there is sufficient locked capital for policy\\n        require(_activePolicies[bundleId] > 0, \\\"ERROR:BUC-041:NO_ACTIVE_POLICIES_FOR_BUNDLE\\\");\\n        require(_valueLockedPerPolicy[bundleId][processId] >= amount, \\\"ERROR:BUC-042:COLLATERAL_INSUFFICIENT_FOR_POLICY\\\");\\n\\n        // make sure bundle exists and is not yet closed\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.createdAt > 0, \\\"ERROR:BUC-043:BUNDLE_DOES_NOT_EXIST\\\");\\n        require(\\n            bundle.state == IBundle.BundleState.Active\\n            || bundle.state == IBundle.BundleState.Locked, \\n            \\\"ERROR:BUC-044:BUNDLE_STATE_INVALID\\\");\\n        require(bundle.capital >= amount, \\\"ERROR:BUC-045:CAPITAL_TOO_LOW\\\");\\n        require(bundle.lockedCapital >= amount, \\\"ERROR:BUC-046:LOCKED_CAPITAL_TOO_LOW\\\");\\n        require(bundle.balance >= amount, \\\"ERROR:BUC-047:BALANCE_TOO_LOW\\\");\\n\\n        _valueLockedPerPolicy[bundleId][processId] -= amount;\\n        bundle.capital -= amount;\\n        bundle.lockedCapital -= amount;\\n        bundle.balance -= amount;\\n        bundle.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        emit LogBundlePayoutProcessed(bundleId, processId, amount);\\n    }\\n\\n\\n    function releasePolicy(uint256 bundleId, bytes32 processId) \\n        external override \\n        onlyRiskpoolService\\n        returns(uint256 remainingCollateralAmount)\\n    {\\n        IPolicy.Policy memory policy = _policy.getPolicy(processId);\\n        require(\\n            policy.state == IPolicy.PolicyState.Closed,\\n            \\\"ERROR:POL-050:POLICY_STATE_INVALID\\\"\\n        );\\n\\n        // make sure bundle exists and is not yet closed\\n        Bundle storage bundle = _bundles[bundleId];\\n        require(bundle.createdAt > 0, \\\"ERROR:BUC-051:BUNDLE_DOES_NOT_EXIST\\\");\\n        require(_activePolicies[bundleId] > 0, \\\"ERROR:BUC-052:NO_ACTIVE_POLICIES_FOR_BUNDLE\\\");\\n\\n        uint256 lockedForPolicyAmount = _valueLockedPerPolicy[bundleId][processId];\\n        // this should never ever fail ...\\n        require(\\n            bundle.lockedCapital >= lockedForPolicyAmount,\\n            \\\"PANIC:BUC-053:UNLOCK_CAPITAL_TOO_BIG\\\"\\n        );\\n\\n        // policy no longer relevant for bundle\\n        _activePolicies[bundleId] -= 1;\\n        delete _valueLockedPerPolicy[bundleId][processId];\\n\\n        // update bundle capital\\n        bundle.lockedCapital -= lockedForPolicyAmount;\\n        bundle.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        uint256 capacityAmount = bundle.capital - bundle.lockedCapital;\\n        emit LogBundlePolicyReleased(bundleId, processId, lockedForPolicyAmount, capacityAmount);\\n    }\\n\\n    function getOwner(uint256 bundleId) public view returns(address) { \\n        uint256 tokenId = getBundle(bundleId).tokenId;\\n        return _token.ownerOf(tokenId); \\n    }\\n\\n    function getState(uint256 bundleId) public view returns(BundleState) {\\n        return getBundle(bundleId).state;   \\n    }\\n\\n    function getFilter(uint256 bundleId) public view returns(bytes memory) {\\n        return getBundle(bundleId).filter;\\n    }   \\n\\n    function getCapacity(uint256 bundleId) public view returns(uint256) {\\n        Bundle memory bundle = getBundle(bundleId);\\n        return bundle.capital - bundle.lockedCapital;\\n    }\\n\\n    function getTotalValueLocked(uint256 bundleId) public view returns(uint256) {\\n        return getBundle(bundleId).lockedCapital;   \\n    }\\n\\n    function getBalance(uint256 bundleId) public view returns(uint256) {\\n        return getBundle(bundleId).balance;   \\n    }\\n\\n    function getToken() external view returns(BundleToken) {\\n        return _token;\\n    }\\n\\n    function getBundle(uint256 bundleId) public view returns(Bundle memory) {\\n        Bundle memory bundle = _bundles[bundleId];\\n        require(bundle.createdAt > 0, \\\"ERROR:BUC-060:BUNDLE_DOES_NOT_EXIST\\\");\\n        return bundle;\\n    }\\n\\n    function bundles() public view returns(uint256) {\\n        return _bundleCount;\\n    }\\n\\n    function unburntBundles(uint256 riskpoolId) external view returns(uint256) {\\n        return _unburntBundlesForRiskpoolId[riskpoolId];\\n    }\\n\\n    function _getPoolController() internal view returns (PoolController _poolController) {\\n        _poolController = PoolController(_getContractAddress(\\\"Pool\\\"));\\n    }\\n\\n    function _changeState(uint256 bundleId, BundleState newState) internal {\\n        BundleState oldState = getState(bundleId);\\n\\n        _checkStateTransition(oldState, newState);\\n        _setState(bundleId, newState);\\n\\n        // log entry for successful state change\\n        emit LogBundleStateChanged(bundleId, oldState, newState);\\n    }\\n\\n    function _setState(uint256 bundleId, BundleState newState) internal {\\n        _bundles[bundleId].state = newState;\\n        _bundles[bundleId].updatedAt = block.timestamp;\\n    }\\n\\n    function _checkStateTransition(BundleState oldState, BundleState newState) \\n        internal \\n        pure \\n    {\\n        if (oldState == BundleState.Active) {\\n            require(\\n                newState == BundleState.Locked || newState == BundleState.Closed, \\n                \\\"ERROR:BUC-070:ACTIVE_INVALID_TRANSITION\\\"\\n            );\\n        } else if (oldState == BundleState.Locked) {\\n            require(\\n                newState == BundleState.Active || newState == BundleState.Closed, \\n                \\\"ERROR:BUC-071:LOCKED_INVALID_TRANSITION\\\"\\n            );\\n        } else if (oldState == BundleState.Closed) {\\n            require(\\n                newState == BundleState.Burned, \\n                \\\"ERROR:BUC-072:CLOSED_INVALID_TRANSITION\\\"\\n            );\\n        } else if (oldState == BundleState.Burned) {\\n            revert(\\\"ERROR:BUC-073:BURNED_IS_FINAL_STATE\\\");\\n        } else {\\n            revert(\\\"ERROR:BOC-074:INITIAL_STATE_NOT_HANDLED\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"BundleToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"ERC721.sol\\\";\\n\\nimport \\\"IBundleToken.sol\\\";\\n\\ncontract BundleToken is \\n    IBundleToken,\\n    ERC721,\\n    Ownable\\n{\\n    string public constant NAME = \\\"GIF Bundle Token\\\";\\n    string public constant SYMBOL = \\\"BTK\\\";\\n\\n    mapping(uint256 /** tokenId */ => uint256 /** bundleId */) public bundleIdForTokenId;\\n    address private _bundleModule;\\n    uint256 private _totalSupply;\\n\\n    modifier onlyBundleModule() {\\n        require(_bundleModule != address(0), \\\"ERROR:BTK-001:NOT_INITIALIZED\\\");\\n        require(_msgSender() == _bundleModule, \\\"ERROR:BTK-002:NOT_BUNDLE_MODULE\\\");\\n        _;\\n    }\\n\\n    constructor() ERC721(NAME, SYMBOL) Ownable() { }\\n\\n    function setBundleModule(address bundleModule)\\n        external\\n    {\\n        require(_bundleModule == address(0), \\\"ERROR:BTK-003:BUNDLE_MODULE_ALREADY_DEFINED\\\");\\n        require(bundleModule != address(0), \\\"ERROR:BTK-004:INVALID_BUNDLE_MODULE_ADDRESS\\\");\\n        _bundleModule = bundleModule;\\n    }\\n\\n\\n    function mint(uint256 bundleId, address to) \\n        external\\n        onlyBundleModule\\n        returns(uint256 tokenId)\\n    {\\n        _totalSupply++;\\n        tokenId = _totalSupply;\\n        bundleIdForTokenId[tokenId] = bundleId;        \\n        \\n        _safeMint(to, tokenId);\\n        \\n        emit LogBundleTokenMinted(bundleId, tokenId, to);           \\n    }\\n\\n\\n    function burn(uint256 tokenId) \\n        external\\n        onlyBundleModule\\n    {\\n        require(_exists(tokenId), \\\"ERROR:BTK-005:TOKEN_ID_INVALID\\\");        \\n        _burn(tokenId);\\n        \\n        emit LogBundleTokenBurned(bundleIdForTokenId[tokenId], tokenId);   \\n    }\\n\\n    function burned(uint tokenId) \\n        external override\\n        view \\n        returns(bool isBurned)\\n    {\\n        isBurned = tokenId <= _totalSupply && !_exists(tokenId);\\n    }\\n\\n    function getBundleId(uint256 tokenId) external override view returns(uint256) { return bundleIdForTokenId[tokenId]; }\\n    function getBundleModuleAddress() external view returns(address) { return _bundleModule; }\\n\\n    function exists(uint256 tokenId) external override view returns(bool) { return tokenId <= _totalSupply; }\\n    function totalSupply() external override view returns(uint256 tokenCount) { return _totalSupply; }\\n}\\n\"\r\n    },\r\n    \"ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\nimport \\\"IERC721Receiver.sol\\\";\\nimport \\\"IERC721Metadata.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"Context.sol\\\";\\nimport \\\"Strings.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"PoolController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"ComponentController.sol\\\";\\nimport \\\"PolicyController.sol\\\";\\nimport \\\"BundleController.sol\\\";\\nimport \\\"CoreController.sol\\\";\\n\\nimport \\\"IPool.sol\\\";\\nimport \\\"IComponent.sol\\\";\\nimport \\\"IRiskpool.sol\\\";\\n\\n\\nimport \\\"EnumerableSet.sol\\\";\\n\\ncontract PoolController is\\n    IPool,\\n    CoreController\\n{\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    // used for representation of collateralization\\n    // collateralization between 0 and 1 (1=100%) \\n    // value might be larger when overcollateralization\\n    uint256 public constant FULL_COLLATERALIZATION_LEVEL = 10**18;\\n\\n    // upper limit for overcollateralization at 200% \\n    uint256 public constant COLLATERALIZATION_LEVEL_CAP = 2 * FULL_COLLATERALIZATION_LEVEL;\\n\\n    uint256 public constant DEFAULT_MAX_NUMBER_OF_ACTIVE_BUNDLES = 1;\\n\\n    mapping(bytes32 /* processId */ => uint256 /* collateralAmount*/ ) private _collateralAmount;\\n\\n    mapping(uint256 /* productId */ => uint256 /* riskpoolId */) private _riskpoolIdForProductId;\\n\\n    mapping(uint256 /* riskpoolId */ => IPool.Pool)  private _riskpools;\\n\\n    mapping(uint256 /* riskpoolId */ => uint256 /* maxmimumNumberOfActiveBundles */) private _maxmimumNumberOfActiveBundlesForRiskpoolId;\\n\\n    mapping(uint256 /* riskpoolId */ => EnumerableSet.UintSet /* active bundle id set */) private _activeBundleIdsForRiskpoolId;\\n    \\n    uint256 [] private _riskpoolIds;\\n\\n    ComponentController private _component;\\n    PolicyController private _policy;\\n    BundleController private _bundle;\\n\\n    modifier onlyInstanceOperatorService() {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"InstanceOperatorService\\\"),\\n            \\\"ERROR:POL-001:NOT_INSTANCE_OPERATOR\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRiskpoolService() {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"RiskpoolService\\\"),\\n            \\\"ERROR:POL-002:NOT_RISKPOOL_SERVICE\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyTreasury() {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"Treasury\\\"),\\n            \\\"ERROR:POL-003:NOT_TREASURY\\\"\\n        );\\n        _;\\n    }\\n\\n    function _afterInitialize() internal override onlyInitializing {\\n        _component = ComponentController(_getContractAddress(\\\"Component\\\"));\\n        _policy = PolicyController(_getContractAddress(\\\"Policy\\\"));\\n        _bundle = BundleController(_getContractAddress(\\\"Bundle\\\"));\\n    }\\n\\n\\n    function registerRiskpool(\\n        uint256 riskpoolId, \\n        address wallet,\\n        address erc20Token,\\n        uint256 collateralizationLevel, \\n        uint256 sumOfSumInsuredCap\\n    )\\n        external override\\n        onlyRiskpoolService\\n    {\\n        IPool.Pool storage pool = _riskpools[riskpoolId];\\n        _riskpoolIds.push(riskpoolId);\\n        _maxmimumNumberOfActiveBundlesForRiskpoolId[riskpoolId] = DEFAULT_MAX_NUMBER_OF_ACTIVE_BUNDLES;\\n        \\n        require(pool.createdAt == 0, \\\"ERROR:POL-004:RISKPOOL_ALREADY_REGISTERED\\\");\\n\\n        require(wallet != address(0), \\\"ERROR:POL-005:WALLET_ADDRESS_ZERO\\\");\\n        require(erc20Token != address(0), \\\"ERROR:POL-006:ERC20_ADDRESS_ZERO\\\");\\n        require(collateralizationLevel <= COLLATERALIZATION_LEVEL_CAP, \\\"ERROR:POL-007:COLLATERALIZATION_lEVEl_TOO_HIGH\\\");\\n        require(sumOfSumInsuredCap > 0, \\\"ERROR:POL-008:SUM_OF_SUM_INSURED_CAP_ZERO\\\");\\n\\n        pool.id = riskpoolId; \\n        pool.wallet = wallet; \\n        pool.erc20Token = erc20Token; \\n        pool.collateralizationLevel = collateralizationLevel;\\n        pool.sumOfSumInsuredCap = sumOfSumInsuredCap;\\n\\n        pool.sumOfSumInsuredAtRisk = 0;\\n        pool.capital = 0;\\n        pool.lockedCapital = 0;\\n        pool.balance = 0;\\n\\n        pool.createdAt = block.timestamp;\\n        pool.updatedAt = block.timestamp;\\n\\n        emit LogRiskpoolRegistered(riskpoolId, wallet, erc20Token, collateralizationLevel, sumOfSumInsuredCap);\\n    }\\n\\n    function setRiskpoolForProduct(uint256 productId, uint256 riskpoolId) \\n        external override\\n        onlyInstanceOperatorService\\n    {\\n        require(_component.isProduct(productId), \\\"ERROR:POL-010:NOT_PRODUCT\\\");\\n        require(_component.isRiskpool(riskpoolId), \\\"ERROR:POL-011:NOT_RISKPOOL\\\");\\n        require(_riskpoolIdForProductId[productId] == 0, \\\"ERROR:POL-012:RISKPOOL_ALREADY_SET\\\");\\n        \\n        _riskpoolIdForProductId[productId] = riskpoolId;\\n    }\\n\\n    function fund(uint256 riskpoolId, uint256 amount) \\n        external\\n        onlyRiskpoolService\\n    {\\n        IPool.Pool storage pool = _riskpools[riskpoolId];\\n        pool.capital += amount;\\n        pool.balance += amount;\\n        pool.updatedAt = block.timestamp;\\n    }\\n\\n    function defund(uint256 riskpoolId, uint256 amount) \\n        external\\n        onlyRiskpoolService\\n    {\\n        IPool.Pool storage pool = _riskpools[riskpoolId];\\n\\n        if (pool.capital >= amount) { pool.capital -= amount; }\\n        else                        { pool.capital = 0; }\\n\\n        pool.balance -= amount;\\n        pool.updatedAt = block.timestamp;\\n    }\\n\\n    function underwrite(bytes32 processId) \\n        external override \\n        onlyPolicyFlow(\\\"Pool\\\")\\n        returns(bool success)\\n    {\\n        // check that application is in applied state\\n        IPolicy.Application memory application = _policy.getApplication(processId);\\n        require(\\n            application.state == IPolicy.ApplicationState.Applied,\\n            \\\"ERROR:POL-020:APPLICATION_STATE_INVALID\\\"\\n        );\\n\\n        // determine riskpool responsible for application\\n        IPolicy.Metadata memory metadata = _policy.getMetadata(processId);\\n        uint256 riskpoolId = _riskpoolIdForProductId[metadata.productId];\\n        require(\\n            _component.getComponentState(riskpoolId) == IComponent.ComponentState.Active, \\n            \\\"ERROR:POL-021:RISKPOOL_NOT_ACTIVE\\\"\\n        );\\n\\n        // calculate required collateral amount\\n        uint256 sumInsuredAmount = application.sumInsuredAmount;\\n        uint256 collateralAmount = calculateCollateral(riskpoolId, sumInsuredAmount);\\n        _collateralAmount[processId] = collateralAmount;\\n\\n        emit LogRiskpoolRequiredCollateral(processId, sumInsuredAmount, collateralAmount);\\n\\n        // check that riskpool stays inside sum insured cap when underwriting this application \\n        IPool.Pool storage pool = _riskpools[riskpoolId];\\n        require(\\n            pool.sumOfSumInsuredCap >= pool.sumOfSumInsuredAtRisk + sumInsuredAmount,\\n            \\\"ERROR:POL-022:RISKPOOL_SUM_INSURED_CAP_EXCEEDED\\\"\\n        );\\n\\n        // ask riskpool to secure application\\n        IRiskpool riskpool = _getRiskpoolComponent(metadata);\\n        success = riskpool.collateralizePolicy(processId, collateralAmount);\\n\\n        if (success) {\\n            pool.sumOfSumInsuredAtRisk += sumInsuredAmount;\\n            pool.lockedCapital += collateralAmount;\\n            pool.updatedAt = block.timestamp;\\n\\n            emit LogRiskpoolCollateralizationSucceeded(riskpoolId, processId, sumInsuredAmount);\\n        } else {\\n            emit LogRiskpoolCollateralizationFailed(riskpoolId, processId, sumInsuredAmount);\\n        }\\n    }\\n\\n\\n    function calculateCollateral(uint256 riskpoolId, uint256 sumInsuredAmount) \\n        public\\n        view \\n        returns (uint256 collateralAmount) \\n    {\\n        uint256 collateralization = getRiskpool(riskpoolId).collateralizationLevel;\\n\\n        // fully collateralized case\\n        if (collateralization == FULL_COLLATERALIZATION_LEVEL) {\\n            collateralAmount = sumInsuredAmount;\\n        // over or under collateralized case\\n        } else if (collateralization > 0) {\\n            collateralAmount = (collateralization * sumInsuredAmount) / FULL_COLLATERALIZATION_LEVEL;\\n        }\\n        // collateralization == 0, eg complete risk coverd by re insurance outside gif\\n        else {\\n            collateralAmount = 0;\\n        }\\n    }\\n\\n\\n    function processPremium(bytes32 processId, uint256 amount) \\n        external override\\n        onlyPolicyFlow(\\\"Pool\\\")\\n    {\\n        IPolicy.Metadata memory metadata = _policy.getMetadata(processId);\\n        IRiskpool riskpool = _getRiskpoolComponent(metadata);\\n        riskpool.processPolicyPremium(processId, amount);\\n\\n        uint256 riskpoolId = _riskpoolIdForProductId[metadata.productId];\\n        IPool.Pool storage pool = _riskpools[riskpoolId];\\n        pool.balance += amount;\\n        pool.updatedAt = block.timestamp;\\n    }\\n\\n\\n    function processPayout(bytes32 processId, uint256 amount) \\n        external override\\n        onlyPolicyFlow(\\\"Pool\\\")\\n    {\\n        IPolicy.Metadata memory metadata = _policy.getMetadata(processId);\\n        uint256 riskpoolId = _riskpoolIdForProductId[metadata.productId];\\n        IPool.Pool storage pool = _riskpools[riskpoolId];\\n        require(pool.createdAt > 0, \\\"ERROR:POL-026:RISKPOOL_ID_INVALID\\\");\\n        require(pool.capital >= amount, \\\"ERROR:POL-027:CAPITAL_TOO_LOW\\\");\\n        require(pool.lockedCapital >= amount, \\\"ERROR:POL-028:LOCKED_CAPITAL_TOO_LOW\\\");\\n        require(pool.balance >= amount, \\\"ERROR:POL-029:BALANCE_TOO_LOW\\\");\\n\\n        pool.capital -= amount;\\n        pool.lockedCapital -= amount;\\n        pool.balance -= amount;\\n        pool.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        IRiskpool riskpool = _getRiskpoolComponent(metadata);\\n        riskpool.processPolicyPayout(processId, amount);\\n    }\\n\\n\\n    function release(bytes32 processId) \\n        external override\\n        onlyPolicyFlow(\\\"Pool\\\")\\n    {\\n        IPolicy.Policy memory policy = _policy.getPolicy(processId);\\n        require(\\n            policy.state == IPolicy.PolicyState.Closed,\\n            \\\"ERROR:POL-025:POLICY_STATE_INVALID\\\"\\n        );\\n\\n        IPolicy.Metadata memory metadata = _policy.getMetadata(processId);\\n        IRiskpool riskpool = _getRiskpoolComponent(metadata);\\n        riskpool.releasePolicy(processId);\\n\\n        IPolicy.Application memory application = _policy.getApplication(processId);\\n\\n        uint256 riskpoolId = _riskpoolIdForProductId[metadata.productId];\\n        IPool.Pool storage pool = _riskpools[riskpoolId];\\n        uint256 remainingCollateralAmount = _collateralAmount[processId] - policy.payoutAmount;\\n\\n        pool.sumOfSumInsuredAtRisk -= application.sumInsuredAmount;\\n        pool.lockedCapital -= remainingCollateralAmount;\\n        pool.updatedAt = block.timestamp; // solhint-disable-line\\n\\n        // free memory\\n        delete _collateralAmount[processId];\\n        emit LogRiskpoolCollateralReleased(riskpoolId, processId, remainingCollateralAmount);\\n    }\\n\\n    function setMaximumNumberOfActiveBundles(uint256 riskpoolId, uint256 maxNumberOfActiveBundles)\\n        external \\n        onlyRiskpoolService\\n    {\\n        require(maxNumberOfActiveBundles > 0, \\\"ERROR:POL-032:MAX_NUMBER_OF_ACTIVE_BUNDLES_INVALID\\\");\\n        _maxmimumNumberOfActiveBundlesForRiskpoolId[riskpoolId] = maxNumberOfActiveBundles;\\n    }\\n\\n    function getMaximumNumberOfActiveBundles(uint256 riskpoolId) public view returns(uint256 maximumNumberOfActiveBundles) {\\n        return _maxmimumNumberOfActiveBundlesForRiskpoolId[riskpoolId];\\n    }\\n    \\n    function riskpools() external view returns(uint256 idx) { return _riskpoolIds.length; }\\n\\n\\n    function getRiskpool(uint256 riskpoolId) public view returns(IPool.Pool memory riskPool) {\\n        riskPool = _riskpools[riskpoolId];\\n        require(riskPool.createdAt > 0, \\\"ERROR:POL-040:RISKPOOL_NOT_REGISTERED\\\");\\n    }\\n\\n    function getRiskPoolForProduct(uint256 productId) external view returns (uint256 riskpoolId) {\\n        return _riskpoolIdForProductId[productId];\\n    }\\n\\n    function activeBundles(uint256 riskpoolId) external view returns(uint256 numberOfActiveBundles) {\\n        return EnumerableSet.length(_activeBundleIdsForRiskpoolId[riskpoolId]);\\n    }\\n\\n    function getActiveBundleId(uint256 riskpoolId, uint256 bundleIdx) external view returns(uint256 bundleId) {\\n        require(\\n            bundleIdx < EnumerableSet.length(_activeBundleIdsForRiskpoolId[riskpoolId]),\\n            \\\"ERROR:POL-041:BUNDLE_IDX_TOO_LARGE\\\"\\n        );\\n\\n        return EnumerableSet.at(_activeBundleIdsForRiskpoolId[riskpoolId], bundleIdx);\\n    }\\n\\n    function addBundleIdToActiveSet(uint256 riskpoolId, uint256 bundleId) \\n        external\\n        onlyRiskpoolService\\n    {\\n        require(\\n            !EnumerableSet.contains(_activeBundleIdsForRiskpoolId[riskpoolId], bundleId), \\n            \\\"ERROR:POL-042:BUNDLE_ID_ALREADY_IN_SET\\\"\\n        );\\n        require(\\n            EnumerableSet.length(_activeBundleIdsForRiskpoolId[riskpoolId]) < _maxmimumNumberOfActiveBundlesForRiskpoolId[riskpoolId], \\n            \\\"ERROR:POL-043:MAXIMUM_NUMBER_OF_ACTIVE_BUNDLES_REACHED\\\"\\n        );\\n\\n        EnumerableSet.add(_activeBundleIdsForRiskpoolId[riskpoolId], bundleId);\\n    }\\n\\n    function removeBundleIdFromActiveSet(uint256 riskpoolId, uint256 bundleId) \\n        external\\n        onlyRiskpoolService\\n    {\\n        require(\\n            EnumerableSet.contains(_activeBundleIdsForRiskpoolId[riskpoolId], bundleId), \\n            \\\"ERROR:POL-044:BUNDLE_ID_NOT_IN_SET\\\"\\n        );\\n\\n        EnumerableSet.remove(_activeBundleIdsForRiskpoolId[riskpoolId], bundleId);\\n    }\\n\\n    function getFullCollateralizationLevel() external pure returns (uint256) {\\n        return FULL_COLLATERALIZATION_LEVEL;\\n    }\\n\\n    function _getRiskpoolComponent(IPolicy.Metadata memory metadata) internal view returns (IRiskpool riskpool) {\\n        uint256 riskpoolId = _riskpoolIdForProductId[metadata.productId];\\n        require(riskpoolId > 0, \\\"ERROR:POL-045:RISKPOOL_DOES_NOT_EXIST\\\");\\n\\n        riskpool = _getRiskpoolForId(riskpoolId);\\n    }\\n\\n    function _getRiskpoolForId(uint256 riskpoolId) internal view returns (IRiskpool riskpool) {\\n        require(_component.isRiskpool(riskpoolId), \\\"ERROR:POL-046:COMPONENT_NOT_RISKPOOL\\\");\\n        \\n        IComponent cmp = _component.getComponent(riskpoolId);\\n        riskpool = IRiskpool(address(cmp));\\n    }\\n}\\n\"\r\n    },\r\n    \"TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n// inspired/informed by\\n// https://soliditydeveloper.com/safe-erc20\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/token/ERC20/ERC20.sol\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/token/ERC20/utils/SafeERC20.sol\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.3/contracts/utils/Address.sol\\n// https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\nlibrary TransferHelper {\\n\\n    event LogTransferHelperInputValidation1Failed(bool tokenIsContract, address from, address to);\\n    event LogTransferHelperInputValidation2Failed(uint256 balance, uint256 allowance);\\n    event LogTransferHelperCallFailed(bool callSuccess, uint256 returnDataLength, bytes returnData);\\n\\n    function unifiedTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        internal\\n        returns(bool success)\\n    {\\n        // input validation step 1\\n        address tokenAddress = address(token);\\n        bool tokenIsContract = (tokenAddress.code.length > 0);\\n        if (from == address(0) || to == address (0) || !tokenIsContract) {\\n            emit LogTransferHelperInputValidation1Failed(tokenIsContract, from, to);\\n            return false;\\n        }\\n        \\n        // input validation step 2\\n        uint256 balance = token.balanceOf(from);\\n        uint256 allowance = token.allowance(from, address(this));\\n        if (balance < value || allowance < value) {\\n            emit LogTransferHelperInputValidation2Failed(balance, allowance);\\n            return false;\\n        }\\n\\n        // low-level call to transferFrom\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool callSuccess, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(\\n                0x23b872dd, \\n                from, \\n                to, \\n                value));\\n\\n        success = callSuccess && (false\\n            || data.length == 0 \\n            || (data.length == 32 && abi.decode(data, (bool))));\\n\\n        if (!success) {\\n            emit LogTransferHelperCallFailed(callSuccess, data.length, data);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport {ECDSA} from \\\"ECDSA.sol\\\";\\n\\ncontract EIP712 {\\n\\n    bytes32 public constant EIP712_TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    string private _name;\\n    string private _version;\\n\\n    bytes32 private _hashedName;\\n    bytes32 private _hashedVersion;\\n\\n\\n    constructor(string memory name, string memory version) {\\n        _name = name;\\n        _version = version;\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n    }\\n\\n\\n    function getSigner(\\n        bytes32 digest,\\n        bytes calldata signature\\n    )\\n        public\\n        pure\\n        returns(address signer)\\n    {\\n        return ECDSA.recover(digest, signature);\\n    }\\n\\n\\n    // same as EIP712._hashTypedDataV4(), see\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol\\n    function getTypedDataV4Hash(bytes32 structHash) public view returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_buildDomainSeparator(), structHash);\\n    }\\n\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                EIP712_TYPE_HASH, \\n                _hashedName, \\n                _hashedVersion, \\n                block.chainid, \\n                address(this)));\\n    }\\n}\"\r\n    },\r\n    \"ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"IPriceDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\ninterface IPriceDataProvider {\\n\\n    enum ComplianceState {\\n        Undefined,\\n        Initializing,\\n        Valid,\\n        FailedOnce,\\n        FailedMultipleTimes\\n    }\\n\\n    enum StabilityState {\\n        Undefined,\\n        Initializing,\\n        Stable,\\n        Triggered,\\n        Depegged\\n    }\\n\\n    enum EventType {\\n        Undefined,\\n        Update,\\n        TriggerEvent,\\n        RecoveryEvent,\\n        DepegEvent\\n    }\\n\\n    event LogPriceDataDeviationExceeded (\\n        uint256 priceId,\\n        uint256 priceDeviation,\\n        uint256 currentPrice,\\n        uint256 lastPrice);\\n\\n    event LogPriceDataHeartbeatExceeded (\\n        uint256 priceId,\\n        uint256 timeDifference,\\n        uint256 currentCreatedAt,\\n        uint256 lastCreatedAt);\\n\\n    event LogPriceDataTriggered (\\n        uint256 priceId,\\n        uint256 price,\\n        uint256 triggeredAt);\\n\\n    event LogPriceDataRecovered (\\n        uint256 priceId,\\n        uint256 price,\\n        uint256 triggeredAt,\\n        uint256 recoveredAt);\\n\\n    event LogPriceDataDepegged (\\n        uint256 priceId,\\n        uint256 price,\\n        uint256 triggeredAt,\\n        uint256 depeggedAt);\\n\\n    event LogPriceDataProcessed (\\n        uint256 priceId,\\n        uint256 price,\\n        uint256 createdAt);\\n\\n    event LogPriceDataBlockNumberSet(\\n        uint256 blockNumber, \\n        string comment);\\n\\n    event LogUsdcProviderForcedDepeg (\\n        uint256 updatedTriggeredAt,\\n        uint256 forcedDepegAt);\\n\\n    event LogUsdcProviderResetDepeg (\\n        uint256 resetDepegAt);\\n\\n    struct PriceInfo {\\n        uint256 id;\\n        uint256 price;\\n        ComplianceState compliance;\\n        StabilityState stability;\\n        EventType eventType;\\n        uint256 triggeredAt;\\n        uint256 depeggedAt;\\n        uint256 createdAt;\\n    }\\n\\n    function processLatestPriceInfo()\\n        external \\n        returns(PriceInfo memory priceInfo);\\n\\n    // only on testnets\\n    function forceDepegForNextPriceInfo()\\n        external;\\n\\n    // only on testnets\\n    function resetDepeg()\\n        external;\\n\\n    function isNewPriceInfoEventAvailable()\\n        external\\n        view\\n        returns(\\n            bool newEvent, \\n            PriceInfo memory priceInfo,\\n            uint256 timeSinceEvent);\\n\\n    function getLatestPriceInfo()\\n        external\\n        view \\n        returns(PriceInfo memory priceInfo);\\n\\n    function getDepegPriceInfo()\\n        external\\n        view \\n        returns(PriceInfo memory priceInfo);\\n\\n\\n    function setDepeggedBlockNumber(\\n        uint128 blockNumber,\\n        string memory comment\\n    ) \\n        external;\\n\\n    function getDepeggedBlockNumber() external view returns(uint256 blockNumber);\\n\\n\\n    function getTargetPrice() external view returns(uint256 targetPrice);\\n\\n    function getTriggeredAt() external view returns(uint256 triggeredAt);\\n    function getDepeggedAt() external view returns(uint256 depeggedAt);\\n\\n    function getAggregatorAddress() external view returns(address aggregatorAddress);\\n    function getHeartbeat() external view returns(uint256 heartbeatSeconds);\\n    function getDeviation() external view returns(uint256 deviationLevel);\\n    function getDecimals() external view returns(uint8 aggregatorDecimals);\\n\\n    function getToken() external view returns(address);\\n    function getOwner() external view returns(address);\\n\\n    function isMainnetProvider() external view returns(bool);\\n    function isTestnetProvider() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"DepegRiskpool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IERC20Metadata.sol\\\";\\n\\nimport \\\"BasicRiskpool.sol\\\";\\nimport \\\"IBundle.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\nimport \\\"IBundleToken.sol\\\";\\n\\nimport \\\"BasicRiskpool2.sol\\\";\\nimport \\\"IChainRegistryFacade.sol\\\";\\nimport \\\"IStakingFacade.sol\\\";\\n\\n\\ncontract DepegRiskpool is \\n    BasicRiskpool2\\n{\\n    struct BundleInfo {\\n        uint256 bundleId;\\n        string name;\\n        IBundle.BundleState state;\\n        uint256 tokenId;\\n        address owner;\\n        uint256 lifetime;\\n        uint256 minSumInsured;\\n        uint256 maxSumInsured;\\n        uint256 minDuration;\\n        uint256 maxDuration;\\n        uint256 annualPercentageReturn;\\n        uint256 capitalSupportedByStaking;\\n        uint256 capital;\\n        uint256 lockedCapital;\\n        uint256 balance;\\n        uint256 createdAt;\\n    }\\n\\n    event LogRiskpoolCapitalSet(uint256 poolCapitalNew, uint256 poolCapitalOld);\\n    event LogBundleCapitalSet(uint256 bundleCapitalNew, uint256 bundleCapitalOld);\\n\\n    event LogAllowAllAccountsSet(bool allowAllAccounts);\\n    event LogAllowAccountSet(address account, bool allowAccount);\\n\\n    event LogBundleExtended(uint256 bundleId, uint256 createdAt, uint256 lifetime, uint256 lifetimeExtended);\\n    event LogBundleExpired(uint256 bundleId, uint256 createdAt, uint256 lifetime);\\n    event LogBundleMismatch(uint256 bundleId, uint256 bundleIdRequested);\\n    event LogBundleMatchesApplication(uint256 bundleId, bool sumInsuredOk, bool durationOk, bool premiumOk);\\n\\n    // values according to \\n    // https://github.com/etherisc/depeg-ui/issues/328\\n\\n    bytes32 public constant EMPTY_STRING_HASH = keccak256(abi.encodePacked(\\\"\\\"));\\n\\n    uint256 public constant MIN_BUNDLE_LIFETIME = 14 * 24 * 3600;\\n    uint256 public constant MAX_BUNDLE_LIFETIME = 180 * 24 * 3600;\\n    uint256 public constant MIN_POLICY_DURATION = 14 * 24 * 3600;\\n    uint256 public constant MAX_POLICY_DURATION = 120 * 24 * 3600;\\n    uint256 public constant MIN_POLICY_COVERAGE = 2000 * 10 ** 6; // as usdt amount\\n    uint256 public constant MAX_POLICY_COVERAGE = 10 ** 6 * 10 ** 6; // as usdt amount\\n    uint256 public constant ONE_YEAR_DURATION = 365 * 24 * 3600; \\n\\n    uint256 public constant APR_100_PERCENTAGE = 10**6;\\n    uint256 public constant MAX_APR = APR_100_PERCENTAGE / 5;\\n\\n    uint256 public constant EXTENSION_INTERVAL = 31 * 24 * 3600; // allowed interval to extend at end of lifetime\\n\\n    mapping(uint256 /* bundle id */ => uint96 /* nft id for bundle */) private _bundleNftId;\\n    mapping(uint256 /* bundle id */ => uint256 /* lifetime extension */) private _bundleLifetimeExtension;\\n    mapping(string /* bundle name */ => uint256 /* bundle id */) private _bundleIdForBundleName;\\n\\n    IChainRegistryFacade private _chainRegistry;\\n    IStakingFacade private _staking;\\n\\n    // managed token\\n    IERC20Metadata private _token;\\n    uint256 private _tokenDecimals;\\n\\n    // sum insured % of protected amount\\n    // 100 corresponds to a depeg price value down to 0.0 is covered by the policy\\n    // 20 corresponds to only depeg values down to 0.8 are covered \\n    // ie even if the chainlink price feed would report 0.65 at depeg time\\n    // the policy holder payout is capped at 0.80\\n    uint256 private _sumInsuredPercentage;\\n    \\n    // capital caps\\n    uint256 private _riskpoolCapitalCap;\\n    uint256 private _bundleCapitalCap;\\n\\n    // bundle creation whitelisting\\n    mapping(address /* potential bundle owner */ => bool /* is allowed to create bundle*/) _allowedAccount;\\n    bool private _allowAllAccounts;\\n\\n\\n    modifier onlyAllowedAccount {\\n        require(isAllowed(_msgSender()), \\\"ERROR:DRP-001:ACCOUNT_NOT_ALLOWED_FOR_BUNDLE_CREATION\\\");\\n        _;\\n    }\\n\\n\\n    constructor(\\n        bytes32 name,\\n        uint256 sumOfSumInsuredCap,\\n        uint256 sumInsuredPercentage,\\n        address erc20Token,\\n        address wallet,\\n        address registry\\n    )\\n        BasicRiskpool2(name, getFullCollateralizationLevel(), sumOfSumInsuredCap, erc20Token, wallet, registry)\\n    {\\n        require(\\n            sumInsuredPercentage > 0 && sumInsuredPercentage <= 100,\\n            \\\"ERROR:DRP-005:SUM_INSURED_PERCENTAGE_INVALID\\\");\\n\\n        _sumInsuredPercentage = sumInsuredPercentage;\\n\\n        _token = IERC20Metadata(erc20Token);\\n        _tokenDecimals = _token.decimals();\\n\\n        _riskpoolCapitalCap = sumOfSumInsuredCap;\\n        _bundleCapitalCap = _riskpoolCapitalCap / 10;\\n        _allowAllAccounts = true;\\n\\n        _staking = IStakingFacade(address(0));\\n        _chainRegistry = IChainRegistryFacade(address(0));\\n    }\\n\\n\\n    function setCapitalCaps(\\n        uint256 poolCapitalCap,\\n        uint256 bundleCapitalCap\\n    )\\n        public\\n        onlyOwner\\n    {\\n        require(poolCapitalCap <= getSumOfSumInsuredCap(), \\\"ERROR:DRP-011:POOL_CAPITAL_CAP_TOO_LARGE\\\");\\n        require(bundleCapitalCap < poolCapitalCap, \\\"ERROR:DRP-012:BUNDLE_CAPITAL_CAP_TOO_LARGE\\\");\\n        require(bundleCapitalCap > 0, \\\"ERROR:DRP-013:BUNDLE_CAPITAL_CAP_ZERO\\\");\\n\\n        uint256 poolCapOld = _riskpoolCapitalCap;\\n        uint256 bundleCapOld = _bundleCapitalCap;\\n\\n        _riskpoolCapitalCap = poolCapitalCap;\\n        _bundleCapitalCap = bundleCapitalCap;\\n\\n        emit LogRiskpoolCapitalSet(_riskpoolCapitalCap, poolCapOld);\\n        emit LogBundleCapitalSet(_bundleCapitalCap, bundleCapOld);\\n    }\\n\\n\\n    function setAllowAllAccounts(bool allowAllAccounts)\\n        external\\n        onlyOwner\\n    {\\n        _allowAllAccounts = allowAllAccounts;\\n        emit LogAllowAllAccountsSet(_allowAllAccounts);\\n    }\\n\\n\\n    function isAllowAllAccountsEnabled()\\n        external\\n        view\\n        returns(bool allowAllAccounts)\\n    {\\n        return _allowAllAccounts;\\n    }\\n\\n\\n    function setAllowAccount(address account, bool allowAccount)\\n        external\\n        onlyOwner\\n    {\\n        _allowedAccount[account] = allowAccount;\\n        emit LogAllowAccountSet(account, _allowedAccount[account]);\\n    }\\n\\n\\n    function isAllowed(address account)\\n        public\\n        view\\n        returns(bool allowed)\\n    {\\n        return _allowAllAccounts || _allowedAccount[account];\\n    }\\n\\n\\n    function setStakingAddress(address stakingAddress)\\n        external\\n        onlyOwner\\n    {\\n        _staking = IStakingFacade(stakingAddress);\\n        require(_staking.implementsIStaking(), \\\"ERROR:DRP-016:STAKING_NOT_ISTAKING\\\");\\n\\n        _chainRegistry = IChainRegistryFacade(_staking.getRegistry());\\n    }\\n\\n\\n    function getStaking()\\n        external\\n        view\\n        returns(IStakingFacade)\\n    {\\n        return _staking;\\n    }\\n\\n\\n    function getChainRegistry()\\n        external\\n        view\\n        returns(IChainRegistryFacade)\\n    {\\n        return _chainRegistry;\\n    }\\n\\n    function createBundle(\\n        string memory name,\\n        uint256 lifetime,\\n        uint256 policyMinProtectedBalance,\\n        uint256 policyMaxProtectedBalance,\\n        uint256 policyMinDuration,\\n        uint256 policyMaxDuration,\\n        uint256 annualPercentageReturn,\\n        uint256 initialAmount\\n    ) \\n        public\\n        onlyAllowedAccount\\n        returns(uint256 bundleId)\\n    {\\n        require(\\n            _bundleIdForBundleName[name] == 0,\\n            \\\"ERROR:DRP-020:NAME_NOT_UNIQUE\\\");\\n        require(\\n            lifetime >= MIN_BUNDLE_LIFETIME\\n            && lifetime <= MAX_BUNDLE_LIFETIME, \\n            \\\"ERROR:DRP-021:LIFETIME_INVALID\\\");\\n\\n        // get sum insured bounds from protected balance bounds\\n        uint256 policyMinSumInsured = calculateSumInsured(policyMinProtectedBalance);\\n        uint256 policyMaxSumInsured = calculateSumInsured(policyMaxProtectedBalance);\\n        \\n        require(\\n            policyMaxProtectedBalance >= policyMinProtectedBalance\\n            && policyMaxProtectedBalance <= MAX_POLICY_COVERAGE\\n            && policyMaxSumInsured <= _bundleCapitalCap,\\n            \\\"ERROR:DRP-022:MAX_PROTECTED_BALANCE_INVALID\\\");\\n        require(\\n            policyMinProtectedBalance >= MIN_POLICY_COVERAGE\\n            && policyMinProtectedBalance <= policyMaxProtectedBalance, \\n            \\\"ERROR:DRP-023:MIN_PROTECTED_BALANCE_INVALID\\\");\\n        require(\\n            policyMaxDuration > 0\\n            && policyMaxDuration <= MAX_POLICY_DURATION, \\n            \\\"ERROR:DRP-024:MAX_DURATION_INVALID\\\");\\n        require(\\n            policyMinDuration >= MIN_POLICY_DURATION\\n            && policyMinDuration <= policyMaxDuration, \\n            \\\"ERROR:DRP-025:MIN_DURATION_INVALID\\\");\\n        require(\\n            annualPercentageReturn > 0\\n            && annualPercentageReturn <= MAX_APR, \\n            \\\"ERROR:DRP-026:APR_INVALID\\\");\\n        require(\\n            initialAmount > 0\\n            && initialAmount <= _bundleCapitalCap, \\n            \\\"ERROR:DRP-027:RISK_CAPITAL_INVALID\\\");\\n        require(\\n            getCapital() + initialAmount <= _riskpoolCapitalCap,\\n            \\\"ERROR:DRP-028:POOL_CAPITAL_CAP_EXCEEDED\\\");\\n\\n        bytes memory filter = encodeBundleParamsAsFilter(\\n            name,\\n            lifetime,\\n            policyMinSumInsured,\\n            policyMaxSumInsured,\\n            policyMinDuration,\\n            policyMaxDuration,\\n            annualPercentageReturn\\n        );\\n\\n        bundleId = super.createBundle(filter, initialAmount);\\n\\n        if(keccak256(abi.encodePacked(name)) != EMPTY_STRING_HASH) {\\n            _bundleIdForBundleName[name] = bundleId;\\n        }\\n\\n        // Register the new bundle with the staking/bundle registry contract. \\n        // Staking and registry are set in tandem (the address of the registry is retrieved from staking),\\n        // so if one is present, its safe to assume the other is too.\\n        IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n\\n        if (address(_chainRegistry) != address(0) && isComponentRegistered(bundle.riskpoolId)) { \\n            registerBundleInRegistry(bundle, name, lifetime);\\n        }\\n    }\\n\\n\\n    function extendBundleLifetime(\\n        uint256 bundleId,\\n        uint256 lifetimeExtension\\n    )\\n        external\\n        onlyBundleOwner(bundleId)\\n    {\\n        require(\\n            lifetimeExtension >= MIN_BUNDLE_LIFETIME\\n            && lifetimeExtension <= MAX_BUNDLE_LIFETIME, \\n            \\\"ERROR:DRP-030:LIFETIME_EXTENSION_INVALID\\\");\\n\\n        (\\n            IBundle.BundleState state,\\n            uint256 createdAt,\\n            uint256 lifetime,\\n            uint256 extendedLifetime,\\n            bool isExpired\\n        ) = getBundleLifetimeData(bundleId);\\n\\n        require(state == IBundle.BundleState.Active, \\\"ERROR:DRP-031:BUNDLE_NOT_ACTIVE\\\");\\n        require(!isExpired, \\\"ERROR:DRP-032:BUNDLE_EXPIRED\\\");\\n        require(block.timestamp > createdAt + extendedLifetime - EXTENSION_INTERVAL, \\\"ERROR:DRP-033:TOO_EARLY\\\");\\n\\n        _bundleLifetimeExtension[bundleId] += lifetimeExtension;\\n        uint256 lifetimeExtended = lifetime + _bundleLifetimeExtension[bundleId];\\n\\n        // update lifetime in registry (if registry is available and bundle is registered)\\n        if (address(_chainRegistry) != address(0) && _bundleNftId[bundleId] > 0) { \\n            uint96 nftId = getNftId(bundleId);\\n            _chainRegistry.extendBundleLifetime(nftId, lifetimeExtension);\\n        }\\n\\n        // write log entry\\n        emit LogBundleExtended(bundleId, createdAt, lifetime, lifetimeExtended);\\n    }\\n\\n\\n    function getNftId(uint256 bundleId)\\n        public\\n        view \\n        returns(uint96 nftId)\\n    {\\n        nftId = _bundleNftId[bundleId];\\n        return nftId > 0 ? nftId : _chainRegistry.getBundleNftId(_instanceService.getInstanceId(), bundleId);\\n    }\\n\\n\\n    function getBundleLifetimeData(uint256 bundleId)\\n        public\\n        view\\n        returns(\\n            IBundle.BundleState state,\\n            uint256 createdAt,\\n            uint256 lifetime,\\n            uint256 extendedLifetime,\\n            bool isExpired\\n        )\\n    {\\n        IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n        (, lifetime,,,,,) = decodeBundleParamsFromFilter(bundle.filter);\\n        uint256 lifetimeExtension = _bundleLifetimeExtension[bundleId];\\n\\n        state = bundle.state;\\n        createdAt = bundle.createdAt;\\n        extendedLifetime = lifetime + lifetimeExtension;\\n        isExpired = block.timestamp > bundle.createdAt + lifetime + lifetimeExtension;\\n    }\\n\\n\\n    function getSumInsuredPercentage()\\n        external\\n        view\\n        returns(uint256 sumInsuredPercentage)\\n    {\\n        return _sumInsuredPercentage;\\n    }\\n\\n\\n    function calculateSumInsured(uint256 protectedBalance)\\n        public\\n        view\\n        returns(uint256 sumInsured)\\n    {\\n        return (protectedBalance * _sumInsuredPercentage) / 100;\\n    }\\n\\n\\n    function depegPriceIsBelowProtectedDepegPrice(uint256 depegPrice, uint256 targetPrice)\\n        public\\n        view\\n        returns(bool isBelowProtectedPrice)\\n    {\\n        return 100 * depegPrice < targetPrice * (100 - _sumInsuredPercentage);\\n    }\\n\\n\\n    function getProtectedMinDepegPrice(uint256 targetPrice)\\n        public\\n        view\\n        returns(uint256 protectedDepegPrice)\\n    {\\n        return (targetPrice * (100 - _sumInsuredPercentage)) / 100;\\n    }\\n\\n\\n    function isComponentRegistered(uint256 componentId)\\n        private\\n        view\\n        returns(bool)\\n    {\\n        bytes32 instanceId = _instanceService.getInstanceId();\\n        uint96 componentNftId = _chainRegistry.getComponentNftId(instanceId, componentId);\\n        return _chainRegistry.exists(componentNftId);\\n    }\\n\\n    /**\\n     * @dev Register the bundle with given id in the bundle registry.\\n     */    \\n    function registerBundleInRegistry(\\n        IBundle.Bundle memory bundle,\\n        string memory name,\\n        uint256 lifetime\\n    )\\n        private\\n    {\\n        bytes32 instanceId = _instanceService.getInstanceId();\\n        uint256 expiration = bundle.createdAt + lifetime;\\n\\n        // register bundle and keep track of nft id\\n        _bundleNftId[bundle.id] = _chainRegistry.registerBundle(\\n            instanceId,\\n            bundle.riskpoolId,\\n            bundle.id,\\n            name,\\n            expiration\\n        );\\n    }\\n\\n    function getBundleInfo(uint256 bundleId)\\n        external\\n        view\\n        returns(BundleInfo memory info)\\n    {\\n        IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n        IBundleToken token = _instanceService.getBundleToken();\\n\\n        (\\n            string memory name,\\n            uint256 lifetime,\\n            uint256 minSumInsured,\\n            uint256 maxSumInsured,\\n            uint256 minDuration,\\n            uint256 maxDuration,\\n            uint256 annualPercentageReturn\\n        ) = decodeBundleParamsFromFilter(bundle.filter);\\n\\n        address tokenOwner = token.burned(bundle.tokenId) ? address(0) : token.ownerOf(bundle.tokenId);\\n        uint256 capitalSupportedByStaking = getSupportedCapitalAmount(bundleId);\\n        uint256 extendedLifetime = lifetime + _bundleLifetimeExtension[bundleId];\\n\\n        info = BundleInfo(\\n            bundleId,\\n            name,\\n            bundle.state,\\n            bundle.tokenId,\\n            tokenOwner,\\n            extendedLifetime,\\n            minSumInsured,\\n            maxSumInsured,\\n            minDuration,\\n            maxDuration,\\n            annualPercentageReturn,\\n            capitalSupportedByStaking,\\n            bundle.capital,\\n            bundle.lockedCapital,\\n            bundle.balance,\\n            bundle.createdAt\\n        );\\n    }\\n\\n\\n    function getFilterDataStructure() external override pure returns(string memory) {\\n        return \\\"(uint256 minSumInsured,uint256 maxSumInsured,uint256 minDuration,uint256 maxDuration,uint256 annualPercentageReturn)\\\";\\n    }\\n\\n    function encodeBundleParamsAsFilter(\\n        string memory name,\\n        uint256 lifetime,\\n        uint256 minSumInsured,\\n        uint256 maxSumInsured,\\n        uint256 minDuration,\\n        uint256 maxDuration,\\n        uint256 annualPercentageReturn\\n    )\\n        public pure\\n        returns (bytes memory filter)\\n    {\\n        filter = abi.encode(\\n            name,\\n            lifetime,\\n            minSumInsured,\\n            maxSumInsured,\\n            minDuration,\\n            maxDuration,\\n            annualPercentageReturn\\n        );\\n    }\\n\\n    function decodeBundleParamsFromFilter(\\n        bytes memory filter\\n    )\\n        public pure\\n        returns (\\n            string memory name,\\n            uint256 lifetime,\\n            uint256 minSumInsured,\\n            uint256 maxSumInsured,\\n            uint256 minDuration,\\n            uint256 maxDuration,\\n            uint256 annualPercentageReturn\\n        )\\n    {\\n        (\\n            name,\\n            lifetime,\\n            minSumInsured,\\n            maxSumInsured,\\n            minDuration,\\n            maxDuration,\\n            annualPercentageReturn\\n        ) = abi.decode(filter, (string, uint256, uint256, uint256, uint256, uint256, uint256));\\n    }\\n\\n\\n    function encodeApplicationParameterAsData(\\n        address wallet,\\n        uint256 protectedBalance,\\n        uint256 duration,\\n        uint256 bundleId,\\n        uint256 maxPremium\\n    )\\n        public pure\\n        returns (bytes memory data)\\n    {\\n        data = abi.encode(\\n            wallet,\\n            protectedBalance,\\n            duration,\\n            bundleId,\\n            maxPremium\\n        );\\n    }\\n\\n\\n    function decodeApplicationParameterFromData(\\n        bytes memory data\\n    )\\n        public pure\\n        returns (\\n            address wallet,\\n            uint256 protectedBalance,\\n            uint256 duration,\\n            uint256 bundleId,\\n            uint256 maxPremium\\n        )\\n    {\\n        (\\n            wallet,\\n            protectedBalance,\\n            duration,\\n            bundleId,\\n            maxPremium\\n        ) = abi.decode(data, (address, uint256, uint256, uint256, uint256));\\n    }\\n\\n    function getBundleFilter(uint256 bundleId) public view returns (bytes memory filter) {\\n        IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n        filter = bundle.filter;\\n    }\\n\\n    // sorts bundles on increasing annual percentage return\\n    function isHigherPriorityBundle(uint256 firstBundleId, uint256 secondBundleId) \\n        public override \\n        view \\n        returns (bool firstBundleIsHigherPriority) \\n    {\\n        uint256 firstApr = _getBundleApr(firstBundleId);\\n        uint256 secondApr = _getBundleApr(secondBundleId);\\n        firstBundleIsHigherPriority = (firstApr < secondApr);\\n    }\\n\\n\\n    function bundleMatchesApplication(\\n        IBundle.Bundle memory bundle, \\n        IPolicy.Application memory application\\n    ) \\n        public view override\\n        returns(bool isMatching) \\n    {}\\n\\n\\n    function bundleMatchesApplication2(\\n        IBundle.Bundle memory bundle, \\n        IPolicy.Application memory application\\n    ) \\n        public override\\n        returns(bool isMatching) \\n    {\\n        (\\n            , // name not needed\\n            uint256 lifetime,\\n            uint256 minSumInsured,\\n            uint256 maxSumInsured,\\n            uint256 minDuration,\\n            uint256 maxDuration,\\n            uint256 annualPercentageReturn\\n        ) = decodeBundleParamsFromFilter(bundle.filter);\\n\\n        // enforce max bundle lifetime\\n        uint256 extendedLifetime = lifetime + _bundleLifetimeExtension[bundle.id];\\n        if(block.timestamp > bundle.createdAt + extendedLifetime) {\\n            // TODO this expired bundle bundle should be removed from active bundles\\n            // ideally this is done in the core, at least should be done\\n            // in basicriskpool template\\n            // may not be done here:\\n            // - lockBundle does not work as riskpool is not owner of bundle\\n            // - remove from active list would modify list that is iterateed over right now...\\n\\n            emit LogBundleExpired(bundle.id, bundle.createdAt, extendedLifetime);\\n            return false;\\n        }\\n\\n        // detailed match check\\n        return detailedBundleApplicationMatch(\\n            bundle.id,\\n            minSumInsured,\\n            maxSumInsured,\\n            minDuration,\\n            maxDuration,\\n            annualPercentageReturn,\\n            application\\n        );\\n    }\\n\\n    function detailedBundleApplicationMatch(\\n        uint256 bundleId,\\n        uint256 minSumInsured,\\n        uint256 maxSumInsured,\\n        uint256 minDuration,\\n        uint256 maxDuration,\\n        uint256 annualPercentageReturn,\\n        IPolicy.Application memory application\\n    )\\n        public\\n        returns(bool isMatching)\\n    {\\n        (\\n            , // we don't care about the wallet address here\\n            , // we don't care about the protected balance here\\n            uint256 duration,\\n            uint256 applicationBundleId,\\n            uint256 maxPremium\\n        ) = decodeApplicationParameterFromData(application.data);\\n\\n        // if bundle id specified a match is required\\n        if(applicationBundleId > 0 && bundleId != applicationBundleId) {\\n            emit LogBundleMismatch(bundleId, applicationBundleId);\\n            return false;\\n        }\\n\\n        bool sumInsuredOk = true;\\n        bool durationOk = true;\\n        bool premiumOk = true;\\n\\n        if(application.sumInsuredAmount < minSumInsured) { sumInsuredOk = false; }\\n        if(application.sumInsuredAmount > maxSumInsured) { sumInsuredOk = false; }\\n\\n        // commented code below to indicate how to enforce hard link to stking in this contract\\n        // if(getSupportedCapitalAmount(bundle.id) < bundle.lockedCapital + application.sumInsuredAmount) {\\n        //     sumInsuredOk = false;\\n        // }\\n\\n        if(duration < minDuration) { durationOk = false; }\\n        if(duration > maxDuration) { durationOk = false; }\\n        \\n        uint256 premium = calculatePremium(application.sumInsuredAmount, duration, annualPercentageReturn);\\n        if(premium > maxPremium) { premiumOk = false; }\\n\\n        emit LogBundleMatchesApplication(bundleId, sumInsuredOk, durationOk, premiumOk);\\n        return (sumInsuredOk && durationOk && premiumOk);\\n    }\\n\\n\\n    function getSupportedCapitalAmount(uint256 bundleId)\\n        public view\\n        returns(uint256 capitalCap)\\n    {\\n        // if no staking data provider is available anything goes\\n        if(address(_staking) == address(0)) {\\n            return _bundleCapitalCap;\\n        }\\n\\n        // otherwise: get amount supported by staking\\n        uint96 bundleNftId = _bundleNftId[bundleId];\\n        return _staking.capitalSupport(bundleNftId);\\n    }\\n\\n\\n    function calculatePremium(\\n        uint256 sumInsured,\\n        uint256 duration,\\n        uint256 annualPercentageReturn\\n    ) \\n        public pure\\n        returns(uint256 premiumAmount) \\n    {\\n        uint256 policyDurationReturn = annualPercentageReturn * duration / ONE_YEAR_DURATION;\\n        premiumAmount = sumInsured * policyDurationReturn / APR_100_PERCENTAGE;\\n    }\\n\\n    function getRiskpoolCapitalCap() public view returns (uint256 poolCapitalCap) {\\n        return _riskpoolCapitalCap;\\n    }\\n\\n    function getBundleCapitalCap() public view returns (uint256 bundleCapitalCap) {\\n        return _bundleCapitalCap;\\n    }\\n\\n    function getMaxBundleLifetime() public pure returns(uint256 maxBundleLifetime) {\\n        return MAX_BUNDLE_LIFETIME;\\n    }\\n\\n\\n    function getOneYearDuration() public pure returns(uint256 yearDuration) { \\n        return ONE_YEAR_DURATION;\\n    }\\n\\n\\n    function getApr100PercentLevel() public pure returns(uint256 apr100PercentLevel) { \\n        return APR_100_PERCENTAGE;\\n    }\\n\\n\\n    function _afterFundBundle(uint256 bundleId, uint256 amount)\\n        internal\\n        override\\n        view\\n    {\\n        require(\\n            _instanceService.getBundle(bundleId).capital <= _bundleCapitalCap, \\n            \\\"ERROR:DRP-100:FUNDING_EXCEEDS_BUNDLE_CAPITAL_CAP\\\");\\n\\n        require(\\n            getCapital() <= _riskpoolCapitalCap, \\n            \\\"ERROR:DRP-101:FUNDING_EXCEEDS_RISKPOOL_CAPITAL_CAP\\\");\\n    }\\n\\n\\n    function _getBundleApr(uint256 bundleId) internal view returns (uint256 annualPercentageReturn) {\\n        bytes memory filter = getBundleFilter(bundleId);\\n        (,,,,,, annualPercentageReturn) = decodeBundleParamsFromFilter(filter);\\n    }\\n}\\n\"\r\n    },\r\n    \"BasicRiskpool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"Riskpool.sol\\\";\\nimport \\\"IBundle.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\n\\n// basic riskpool always collateralizes one application using exactly one bundle\\nabstract contract BasicRiskpool is Riskpool {\\n\\n    event LogBasicRiskpoolBundlesAndPolicies(uint256 activeBundles, uint256 bundleId);\\n    event LogBasicRiskpoolCandidateBundleAmountCheck(uint256 index, uint256 bundleId, uint256 maxAmount, uint256 collateralAmount);\\n\\n    // remember bundleId for each processId\\n    // approach only works for basic risk pool where a\\n    // policy is collateralized by exactly one bundle\\n    mapping(bytes32 /* processId */ => uint256 /** bundleId */) internal _collateralizedBy;\\n    uint32 private _policiesCounter = 0;\\n\\n    constructor(\\n        bytes32 name,\\n        uint256 collateralization,\\n        uint256 sumOfSumInsuredCap,\\n        address erc20Token,\\n        address wallet,\\n        address registry\\n    )\\n        Riskpool(name, collateralization, sumOfSumInsuredCap, erc20Token, wallet, registry)\\n    { }\\n\\n    \\n\\n    // needs to remember which bundles helped to cover ther risk\\n    // simple (retail) approach: single policy covered by single bundle\\n    // first bundle with a match and sufficient capacity wins\\n    // Component <- Riskpool <- BasicRiskpool <- TestRiskpool\\n    // complex (wholesale) approach: single policy covered by many bundles\\n    // Component <- Riskpool <- AdvancedRiskpool <- TestRiskpool\\n    function _lockCollateral(bytes32 processId, uint256 collateralAmount) \\n        internal override\\n        returns(bool success) \\n    {\\n        uint256 activeBundles = activeBundles();\\n        uint256 capital = getCapital();\\n        uint256 lockedCapital = getTotalValueLocked();\\n\\n        emit LogBasicRiskpoolBundlesAndPolicies(activeBundles, _policiesCounter);\\n        require(activeBundles > 0, \\\"ERROR:BRP-001:NO_ACTIVE_BUNDLES\\\");\\n        require(capital > lockedCapital, \\\"ERROR:BRP-002:NO_FREE_CAPITAL\\\");\\n\\n        // ensure there is a chance to find the collateral\\n        if(capital >= lockedCapital + collateralAmount) {\\n            IPolicy.Application memory application = _instanceService.getApplication(processId);\\n\\n            // initialize bundle idx with round robin based on active bundles\\n            uint idx = _policiesCounter % activeBundles;\\n            \\n            // basic riskpool implementation: policy coverage by single bundle only/\\n            // the initial bundle is selected via round robin based on the policies counter.\\n            // If a bundle does not match (application not matching or insufficient funds for collateral) the next one is tried. \\n            // This is continued until all bundles have been tried once. If no bundle matches the policy is rejected.\\n            for (uint256 i = 0; i < activeBundles && !success; i++) {\\n                uint256 bundleId = getActiveBundleId(idx);\\n                IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n                bool isMatching = bundleMatchesApplication(bundle, application);\\n                emit LogRiskpoolBundleMatchesPolicy(bundleId, isMatching);\\n\\n                if (isMatching) {\\n                    uint256 maxAmount = bundle.capital - bundle.lockedCapital;\\n                    emit LogBasicRiskpoolCandidateBundleAmountCheck(idx, bundleId, maxAmount, collateralAmount);\\n\\n                    if (maxAmount >= collateralAmount) {\\n                        _riskpoolService.collateralizePolicy(bundleId, processId, collateralAmount);\\n                        _collateralizedBy[processId] = bundleId;\\n                        success = true;\\n                        _policiesCounter++;\\n                    } else {\\n                        idx = (idx + 1) % activeBundles;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _processPayout(bytes32 processId, uint256 amount)\\n        internal override\\n    {\\n        uint256 bundleId = _collateralizedBy[processId];\\n        _riskpoolService.processPayout(bundleId, processId, amount);\\n    }\\n\\n    function _processPremium(bytes32 processId, uint256 amount)\\n        internal override\\n    {\\n        uint256 bundleId = _collateralizedBy[processId];\\n        _riskpoolService.processPremium(bundleId, processId, amount);\\n    }\\n\\n    function _releaseCollateral(bytes32 processId) \\n        internal override\\n        returns(uint256 collateralAmount) \\n    {        \\n        uint256 bundleId = _collateralizedBy[processId];\\n        collateralAmount = _riskpoolService.releasePolicy(bundleId, processId);\\n    }\\n}\"\r\n    },\r\n    \"Riskpool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IRiskpool.sol\\\";\\nimport \\\"Component.sol\\\";\\n\\nimport \\\"IBundle.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\nimport \\\"IInstanceService.sol\\\";\\nimport \\\"IRiskpoolService.sol\\\";\\n\\nimport \\\"IERC721.sol\\\";\\n\\nabstract contract Riskpool is \\n    IRiskpool, \\n    Component \\n{    \\n    // used for representation of collateralization\\n    // collateralization between 0 and 1 (1=100%) \\n    // value might be larger when overcollateralization\\n    uint256 public constant FULL_COLLATERALIZATION_LEVEL = 10**18;\\n    string public constant DEFAULT_FILTER_DATA_STRUCTURE = \\\"\\\";\\n\\n    IInstanceService internal _instanceService; \\n    IRiskpoolService internal _riskpoolService;\\n    IERC721 internal _bundleToken;\\n    \\n    // keep track of bundles associated with this riskpool\\n    uint256 [] internal _bundleIds;\\n\\n    address private _wallet;\\n    address private _erc20Token;\\n    uint256 private _collateralization;\\n    uint256 private _sumOfSumInsuredCap;\\n    uint256 private _maxNumberOfActiveBundles;\\n\\n    modifier onlyPool {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"Pool\\\"),\\n            \\\"ERROR:RPL-001:ACCESS_DENIED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBundleOwner(uint256 bundleId) {\\n        IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n        address bundleOwner = _bundleToken.ownerOf(bundle.tokenId);\\n\\n        require(\\n            _msgSender() == bundleOwner,\\n            \\\"ERROR:BUC-001:NOT_BUNDLE_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        bytes32 name,\\n        uint256 collateralization,\\n        uint256 sumOfSumInsuredCap,\\n        address erc20Token,\\n        address wallet,\\n        address registry\\n    )\\n        Component(name, ComponentType.Riskpool, registry)\\n    { \\n        _collateralization = collateralization;\\n\\n        require(sumOfSumInsuredCap != 0, \\\"ERROR:RPL-002:SUM_OF_SUM_INSURED_CAP_ZERO\\\");\\n        _sumOfSumInsuredCap = sumOfSumInsuredCap;\\n\\n        require(erc20Token != address(0), \\\"ERROR:RPL-003:ERC20_ADDRESS_ZERO\\\");\\n        _erc20Token = erc20Token;\\n\\n        require(wallet != address(0), \\\"ERROR:RPL-004:WALLET_ADDRESS_ZERO\\\");\\n        _wallet = wallet;\\n\\n        _instanceService = IInstanceService(_getContractAddress(\\\"InstanceService\\\")); \\n        _riskpoolService = IRiskpoolService(_getContractAddress(\\\"RiskpoolService\\\"));\\n        _bundleToken = _instanceService.getBundleToken();\\n    }\\n\\n    function _afterPropose() internal override virtual {\\n        _riskpoolService.registerRiskpool(\\n            _wallet,\\n            _erc20Token, \\n            _collateralization,\\n            _sumOfSumInsuredCap\\n        );\\n    }\\n\\n    function createBundle(bytes memory filter, uint256 initialAmount) \\n        public virtual override\\n        returns(uint256 bundleId)\\n    {\\n        address bundleOwner = _msgSender();\\n        bundleId = _riskpoolService.createBundle(bundleOwner, filter, initialAmount);\\n        _bundleIds.push(bundleId);\\n\\n        emit LogRiskpoolBundleCreated(bundleId, initialAmount);\\n    }\\n\\n    function fundBundle(uint256 bundleId, uint256 amount) \\n        external override\\n        onlyBundleOwner(bundleId)\\n        returns(uint256 netAmount)\\n    {\\n        netAmount = _riskpoolService.fundBundle(bundleId, amount);\\n    }\\n\\n    function defundBundle(uint256 bundleId, uint256 amount)\\n        external override\\n        onlyBundleOwner(bundleId)\\n        returns(uint256 netAmount)\\n    {\\n        netAmount = _riskpoolService.defundBundle(bundleId, amount);\\n    }\\n\\n    function lockBundle(uint256 bundleId)\\n        external override\\n        onlyBundleOwner(bundleId)\\n    {\\n        _riskpoolService.lockBundle(bundleId);\\n    }\\n\\n    function unlockBundle(uint256 bundleId)\\n        external override\\n        onlyBundleOwner(bundleId)\\n    {\\n        _riskpoolService.unlockBundle(bundleId);\\n    }\\n\\n    function closeBundle(uint256 bundleId)\\n        external override\\n        onlyBundleOwner(bundleId)\\n    {\\n        _riskpoolService.closeBundle(bundleId);\\n    }\\n\\n    function burnBundle(uint256 bundleId)\\n        external override\\n        onlyBundleOwner(bundleId)\\n    {\\n        _riskpoolService.burnBundle(bundleId);\\n    }\\n\\n    function collateralizePolicy(bytes32 processId, uint256 collateralAmount) \\n        external override\\n        onlyPool\\n        returns(bool success) \\n    {\\n        success = _lockCollateral(processId, collateralAmount);\\n        emit LogRiskpoolCollateralLocked(processId, collateralAmount, success);\\n    }\\n\\n    function processPolicyPayout(bytes32 processId, uint256 amount)\\n        external override\\n        onlyPool\\n    {\\n        _processPayout(processId, amount);\\n        emit LogRiskpoolPayoutProcessed(processId, amount);\\n    }\\n\\n    function processPolicyPremium(bytes32 processId, uint256 amount)\\n        external override\\n        onlyPool\\n    {\\n        _processPremium(processId, amount);\\n        emit LogRiskpoolPremiumProcessed(processId, amount);\\n    }\\n\\n    function releasePolicy(bytes32 processId) \\n        external override\\n        onlyPool\\n    {\\n        uint256 collateralAmount = _releaseCollateral(processId);\\n        emit LogRiskpoolCollateralReleased(processId, collateralAmount);\\n    }\\n\\n    function setMaximumNumberOfActiveBundles(uint256 maximumNumberOfActiveBundles)\\n        external override\\n        onlyOwner\\n    {\\n        uint256 riskpoolId = getId();\\n        _riskpoolService.setMaximumNumberOfActiveBundles(riskpoolId, maximumNumberOfActiveBundles);\\n    }\\n\\n    function getMaximumNumberOfActiveBundles()\\n        public view override\\n        returns(uint256 maximumNumberOfActiveBundles)\\n    {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getMaximumNumberOfActiveBundles(riskpoolId);\\n    }\\n\\n    function getWallet() public view override returns(address) {\\n        return _wallet;\\n    }\\n\\n    function getErc20Token() public view override returns(address) {\\n        return _erc20Token;\\n    }\\n\\n    function getSumOfSumInsuredCap() public view override returns (uint256) {\\n        return _sumOfSumInsuredCap;\\n    }\\n\\n    function getFullCollateralizationLevel() public pure override returns (uint256) {\\n        return FULL_COLLATERALIZATION_LEVEL;\\n    }\\n\\n    function getCollateralizationLevel() public view override returns (uint256) {\\n        return _collateralization;\\n    }\\n\\n    function bundles() public override view returns(uint256) {\\n        return _bundleIds.length;\\n    }\\n\\n    function getBundle(uint256 idx) public override view returns(IBundle.Bundle memory) {\\n        require(idx < _bundleIds.length, \\\"ERROR:RPL-006:BUNDLE_INDEX_TOO_LARGE\\\");\\n\\n        uint256 bundleIdx = _bundleIds[idx];\\n        return _instanceService.getBundle(bundleIdx);\\n    }\\n\\n    function activeBundles() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.activeBundles(riskpoolId);\\n    }\\n\\n    function getActiveBundleId(uint256 idx) public override view returns(uint256 bundleId) {\\n        uint256 riskpoolId = getId();\\n        require(idx < _instanceService.activeBundles(riskpoolId), \\\"ERROR:RPL-007:ACTIVE_BUNDLE_INDEX_TOO_LARGE\\\");\\n\\n        return _instanceService.getActiveBundleId(riskpoolId, idx);\\n    }\\n\\n    function getFilterDataStructure() external override pure returns(string memory) {\\n        return DEFAULT_FILTER_DATA_STRUCTURE;\\n    }\\n\\n    function getCapital() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getCapital(riskpoolId);\\n    }\\n\\n    function getTotalValueLocked() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getTotalValueLocked(riskpoolId);\\n    }\\n\\n    function getCapacity() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getCapacity(riskpoolId);\\n    }\\n\\n    function getBalance() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getBalance(riskpoolId);\\n    }\\n\\n    function bundleMatchesApplication(\\n        IBundle.Bundle memory bundle, \\n        IPolicy.Application memory application\\n    ) public override view virtual returns(bool isMatching);\\n\\n    function _afterArchive() internal view override { \\n        uint256 riskpoolId = getId();\\n        require(\\n            _instanceService.unburntBundles(riskpoolId) == 0, \\n            \\\"ERROR:RPL-010:RISKPOOL_HAS_UNBURNT_BUNDLES\\\"\\n            );\\n    }\\n\\n    function _lockCollateral(bytes32 processId, uint256 collateralAmount) internal virtual returns(bool success);\\n    function _processPremium(bytes32 processId, uint256 amount) internal virtual;\\n    function _processPayout(bytes32 processId, uint256 amount) internal virtual;\\n    function _releaseCollateral(bytes32 processId) internal virtual returns(uint256 collateralAmount);\\n\\n}\"\r\n    },\r\n    \"BasicRiskpool2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"Riskpool2.sol\\\";\\nimport \\\"IBundle.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\n\\n// basic riskpool always collateralizes one application using exactly one bundle\\nabstract contract BasicRiskpool2 is Riskpool2 {\\n\\n    event LogBasicRiskpoolCapitalCheck(uint256 activeBundles, uint256 policies);\\n    event LogBasicRiskpoolCapitalization(uint256 activeBundles, uint256 capital, uint256 lockedCapital, uint256 collateralAmount, bool capacityIsAvailable);\\n    event LogBasicRiskpoolCandidateBundleAmountCheck(uint256 index, uint256 bundleId, uint256 maxAmount, uint256 collateralAmount);\\n\\n    // remember bundleId for each processId\\n    // approach only works for basic risk pool where a\\n    // policy is collateralized by exactly one bundle\\n    mapping(bytes32 /* processId */ => uint256 /** bundleId */) internal _collateralizedBy;\\n    uint32 private _policiesCounter = 0;\\n\\n    // will hold a sorted active bundle id array\\n    uint256[] private _activeBundleIds;\\n\\n    // informational counter of active policies per bundle\\n    mapping(uint256 /* bundleId */ => uint256 /* activePolicyCount */) private _activePoliciesForBundle;\\n\\n    constructor(\\n        bytes32 name,\\n        uint256 collateralization,\\n        uint256 sumOfSumInsuredCap,\\n        address erc20Token,\\n        address wallet,\\n        address registry\\n    )\\n        Riskpool2(name, collateralization, sumOfSumInsuredCap, erc20Token, wallet, registry)\\n    { }\\n\\n    \\n\\n    // needs to remember which bundles helped to cover ther risk\\n    // simple (retail) approach: single policy covered by single bundle\\n    // first bundle with a match and sufficient capacity wins\\n    // Component <- Riskpool <- BasicRiskpool <- TestRiskpool\\n    // complex (wholesale) approach: single policy covered by many bundles\\n    // Component <- Riskpool <- AdvancedRiskpool <- TestRiskpool\\n    function _lockCollateral(bytes32 processId, uint256 collateralAmount) \\n        internal override\\n        returns(bool success) \\n    {\\n        require(_activeBundleIds.length > 0, \\\"ERROR:BRP-001:NO_ACTIVE_BUNDLES\\\");\\n\\n        uint256 capital = getCapital();\\n        uint256 lockedCapital = getTotalValueLocked();\\n        bool capacityIsAvailable = capital > lockedCapital + collateralAmount;\\n\\n        emit LogBasicRiskpoolCapitalization(\\n            _activeBundleIds.length,\\n            capital,\\n            lockedCapital, \\n            collateralAmount,\\n            capacityIsAvailable);\\n\\n        // ensure there is a chance to find the collateral\\n        if(!capacityIsAvailable) {\\n            return false;\\n        }\\n\\n        // set default outcome\\n        success = false;\\n\\n        IPolicy.Application memory application = _instanceService.getApplication(processId);\\n        \\n        // basic riskpool implementation: policy coverage by single bundle only/\\n        // active bundle arrays with the most attractive bundle at the first place\\n        for (uint256 i = 0; i < _activeBundleIds.length && !success; i++) {\\n            uint256 bundleId = _activeBundleIds[i];\\n            // uint256 bundleId = getActiveBundleId(bundleIdx);\\n            IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n            bool isMatching = bundleMatchesApplication2(bundle, application);\\n            emit LogRiskpoolBundleMatchesPolicy(bundleId, isMatching);\\n\\n            if (isMatching) {\\n                uint256 maxAmount = bundle.capital - bundle.lockedCapital;\\n                emit LogBasicRiskpoolCandidateBundleAmountCheck(i, bundleId, maxAmount, collateralAmount);\\n\\n                if (maxAmount >= collateralAmount) {\\n                    _riskpoolService.collateralizePolicy(bundleId, processId, collateralAmount);\\n                    _collateralizedBy[processId] = bundleId;\\n                    success = true;\\n                    _policiesCounter++;\\n\\n                    // update active policies counter\\n                    _activePoliciesForBundle[bundleId]++;\\n                }\\n            }\\n        }\\n    }\\n\\n    // hack\\n    function bundleMatchesApplication2(\\n        IBundle.Bundle memory bundle, \\n        IPolicy.Application memory application\\n    ) \\n        public virtual returns(bool isMatching);\\n\\n    // manage sorted list of active bundle ids\\n    function _afterCreateBundle(uint256 bundleId, bytes memory filter, uint256 initialAmount) internal override virtual {\\n        _addBundleToActiveList(bundleId);\\n    }\\n\\n    function _afterLockBundle(uint256 bundleId) internal override virtual {\\n        _removeBundleFromActiveList(bundleId);\\n    }\\n    function _afterUnlockBundle(uint256 bundleId) internal override virtual {\\n        _addBundleToActiveList(bundleId);\\n    }\\n    function _afterCloseBundle(uint256 bundleId) internal override virtual {\\n        _removeBundleFromActiveList(bundleId);\\n    }\\n\\n    function _addBundleToActiveList(uint256 bundleId) internal {\\n        bool found = false;\\n        bool inserted = false;\\n\\n        for (uint256 i = 0; !inserted && !found && i < _activeBundleIds.length; i++) {\\n            if (bundleId == _activeBundleIds[i]) {\\n                found = true;\\n            } \\n            else if (isHigherPriorityBundle(bundleId, _activeBundleIds[i])) {\\n                inserted = true;\\n                _activeBundleIds.push(10**6);\\n\\n                for (uint256 j = _activeBundleIds.length - 1; j > i; j--) {\\n                    _activeBundleIds[j] = _activeBundleIds[j-1];\\n                }\\n\\n                // does not work for inserting at end of list ...\\n                _activeBundleIds[i] = bundleId;\\n            }\\n        }\\n\\n        if (!found && !inserted) {\\n            _activeBundleIds.push(bundleId);\\n        }\\n    }\\n\\n    // default implementation adds new bundle at the end of the active list\\n    function isHigherPriorityBundle(uint256 firstBundleId, uint256 secondBundleId) \\n        public virtual \\n        view \\n        returns (bool firstBundleIsHigherPriority) \\n    {\\n        firstBundleIsHigherPriority = false;\\n    }\\n\\n\\n    function _removeBundleFromActiveList(uint256 bundleId) internal {\\n        bool inList = false;\\n        for (uint256 i = 0; !inList && i < _activeBundleIds.length; i++) {\\n            inList = (bundleId == _activeBundleIds[i]);\\n            if (inList) {\\n                for (; i < _activeBundleIds.length - 1; i++) {\\n                    _activeBundleIds[i] = _activeBundleIds[i+1];\\n                }\\n                _activeBundleIds.pop();\\n            }\\n        }\\n    }\\n\\n    function getActiveBundleIds() public view returns (uint256[] memory activeBundleIds) {\\n        return _activeBundleIds;\\n    }\\n\\n    function getActivePolicies(uint256 bundleId) public view returns (uint256 activePolicies) {\\n        return _activePoliciesForBundle[bundleId];\\n    }\\n\\n    function _processPayout(bytes32 processId, uint256 amount)\\n        internal override\\n    {\\n        uint256 bundleId = _collateralizedBy[processId];\\n        _riskpoolService.processPayout(bundleId, processId, amount);\\n    }\\n\\n    function _processPremium(bytes32 processId, uint256 amount)\\n        internal override\\n    {\\n        uint256 bundleId = _collateralizedBy[processId];\\n        _riskpoolService.processPremium(bundleId, processId, amount);\\n    }\\n\\n    function _releaseCollateral(bytes32 processId) \\n        internal override\\n        returns(uint256 collateralAmount) \\n    {        \\n        uint256 bundleId = _collateralizedBy[processId];\\n        collateralAmount = _riskpoolService.releasePolicy(bundleId, processId);\\n\\n        // update active policies counter\\n        _activePoliciesForBundle[bundleId]--;\\n    }\\n}\\n\"\r\n    },\r\n    \"Riskpool2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"IERC721.sol\\\";\\n\\nimport \\\"IRiskpool.sol\\\";\\nimport \\\"Component.sol\\\";\\n\\nimport \\\"IBundle.sol\\\";\\nimport \\\"IPolicy.sol\\\";\\nimport \\\"IInstanceService.sol\\\";\\nimport \\\"IRiskpoolService.sol\\\";\\n\\n\\nabstract contract Riskpool2 is \\n    IRiskpool, \\n    Component \\n{    \\n\\n    // TODO move to IRiskpool\\n    event LogMaximumNumberOfActiveBundlesSet(uint256 numberOfBundles);\\n    event LogRiskpoolBundleFunded(uint256 bundleId, uint256 amount);\\n    event LogRiskpoolBundleDefunded(uint256 bundleId, uint256 amount);\\n\\n    event LogRiskpoolBundleLocked(uint256 bundleId);\\n    event LogRiskpoolBundleUnlocked(uint256 bundleId);\\n    event LogRiskpoolBundleClosed(uint256 bundleId);\\n    event LogRiskpoolBundleBurned(uint256 bundleId);\\n\\n    // used for representation of collateralization\\n    // collateralization between 0 and 1 (1=100%) \\n    // value might be larger when overcollateralization\\n    uint256 public constant FULL_COLLATERALIZATION_LEVEL = 10**18;\\n    string public constant DEFAULT_FILTER_DATA_STRUCTURE = \\\"\\\";\\n\\n    IInstanceService internal _instanceService; \\n    IRiskpoolService internal _riskpoolService;\\n    IERC721 internal _bundleToken;\\n    \\n    // keep track of bundles associated with this riskpool\\n    uint256 [] internal _bundleIds;\\n\\n    address private _wallet;\\n    address private _erc20Token;\\n    uint256 private _collateralization;\\n    uint256 private _sumOfSumInsuredCap;\\n    uint256 private _maxNumberOfActiveBundles;\\n\\n    modifier onlyPool {\\n        require(\\n            _msgSender() == _getContractAddress(\\\"Pool\\\"),\\n            \\\"ERROR:RPL-001:ACCESS_DENIED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBundleOwner(uint256 bundleId) {\\n        IBundle.Bundle memory bundle = _instanceService.getBundle(bundleId);\\n        address bundleOwner = _bundleToken.ownerOf(bundle.tokenId);\\n\\n        require(\\n            _msgSender() == bundleOwner,\\n            \\\"ERROR:RPL-002:NOT_BUNDLE_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        bytes32 name,\\n        uint256 collateralization,\\n        uint256 sumOfSumInsuredCap, // in full token units, eg 1 for 1 usdc\\n        address erc20Token,\\n        address wallet,\\n        address registry\\n    )\\n        Component(name, ComponentType.Riskpool, registry)\\n    { \\n        _collateralization = collateralization;\\n\\n        require(sumOfSumInsuredCap != 0, \\\"ERROR:RPL-003:SUM_OF_SUM_INSURED_CAP_ZERO\\\");\\n        _sumOfSumInsuredCap = sumOfSumInsuredCap;\\n\\n        require(erc20Token != address(0), \\\"ERROR:RPL-005:ERC20_ADDRESS_ZERO\\\");\\n        _erc20Token = erc20Token;\\n\\n        require(wallet != address(0), \\\"ERROR:RPL-006:WALLET_ADDRESS_ZERO\\\");\\n        _wallet = wallet;\\n\\n        _instanceService = IInstanceService(_getContractAddress(\\\"InstanceService\\\")); \\n        _riskpoolService = IRiskpoolService(_getContractAddress(\\\"RiskpoolService\\\"));\\n        _bundleToken = _instanceService.getBundleToken();\\n    }\\n\\n    function _afterPropose() internal override virtual {\\n        _riskpoolService.registerRiskpool(\\n            _wallet,\\n            _erc20Token, \\n            _collateralization,\\n            _sumOfSumInsuredCap\\n        );\\n    }\\n\\n    function createBundle(bytes memory filter, uint256 initialAmount) \\n        public virtual override\\n        returns(uint256 bundleId)\\n    {\\n        address bundleOwner = _msgSender();\\n        bundleId = _riskpoolService.createBundle(bundleOwner, filter, initialAmount);\\n        _bundleIds.push(bundleId);\\n\\n        // after action hook for child contracts\\n        _afterCreateBundle(bundleId, filter, initialAmount);\\n\\n        emit LogRiskpoolBundleCreated(bundleId, initialAmount);\\n    }\\n\\n    function fundBundle(uint256 bundleId, uint256 amount) \\n        external override\\n        onlyBundleOwner(bundleId)\\n        returns(uint256 netAmount)\\n    {\\n        netAmount = _riskpoolService.fundBundle(bundleId, amount);\\n\\n        // after action hook for child contracts\\n        _afterFundBundle(bundleId, amount);\\n\\n        emit LogRiskpoolBundleFunded(bundleId, amount);\\n    }\\n\\n    function defundBundle(uint256 bundleId, uint256 amount)\\n        external override\\n        onlyBundleOwner(bundleId)\\n        returns(uint256 netAmount)\\n    {\\n        netAmount = _riskpoolService.defundBundle(bundleId, amount);\\n\\n        // after action hook for child contracts\\n        _afterDefundBundle(bundleId, amount);\\n\\n        emit LogRiskpoolBundleDefunded(bundleId, amount);\\n    }\\n\\n    function lockBundle(uint256 bundleId)\\n        external override\\n        onlyBundleOwner(bundleId)\\n    {\\n        _riskpoolService.lockBundle(bundleId);\\n\\n        // after action hook for child contracts\\n        _afterLockBundle(bundleId);\\n\\n        emit LogRiskpoolBundleLocked(bundleId);\\n    }\\n\\n    function unlockBundle(uint256 bundleId)\\n        external override\\n        onlyBundleOwner(bundleId)\\n    {\\n        _riskpoolService.unlockBundle(bundleId);\\n\\n        // after action hook for child contracts\\n        _afterUnlockBundle(bundleId);\\n\\n        emit LogRiskpoolBundleUnlocked(bundleId);\\n    }\\n\\n    function closeBundle(uint256 bundleId)\\n        external override\\n        onlyBundleOwner(bundleId)\\n    {\\n        _riskpoolService.closeBundle(bundleId);\\n\\n        // after action hook for child contracts\\n        _afterCloseBundle(bundleId);\\n\\n        emit LogRiskpoolBundleClosed(bundleId);\\n    }\\n\\n    function burnBundle(uint256 bundleId)\\n        external override\\n        onlyBundleOwner(bundleId)\\n    {\\n        _riskpoolService.burnBundle(bundleId);\\n\\n        // after action hook for child contracts\\n        _afterBurnBundle(bundleId);\\n\\n        emit LogRiskpoolBundleBurned(bundleId);\\n    }\\n\\n    function collateralizePolicy(bytes32 processId, uint256 collateralAmount) \\n        external override\\n        onlyPool\\n        returns(bool success) \\n    {\\n        success = _lockCollateral(processId, collateralAmount);\\n\\n        emit LogRiskpoolCollateralLocked(processId, collateralAmount, success);\\n    }\\n\\n    function processPolicyPayout(bytes32 processId, uint256 amount)\\n        external override\\n        onlyPool\\n    {\\n        _processPayout(processId, amount);\\n        emit LogRiskpoolPayoutProcessed(processId, amount);\\n    }\\n\\n    function processPolicyPremium(bytes32 processId, uint256 amount)\\n        external override\\n        onlyPool\\n    {\\n        _processPremium(processId, amount);\\n        emit LogRiskpoolPremiumProcessed(processId, amount);\\n    }\\n\\n    function releasePolicy(bytes32 processId) \\n        external override\\n        onlyPool\\n    {\\n        uint256 collateralAmount = _releaseCollateral(processId);\\n        emit LogRiskpoolCollateralReleased(processId, collateralAmount);\\n    }\\n\\n    function setMaximumNumberOfActiveBundles(uint256 maximumNumberOfActiveBundles)\\n        public override\\n        onlyOwner\\n    {\\n        // TODO remove riskpoolId parameter in service method (and infer it from sender address)\\n        uint256 riskpoolId = getId();\\n        _riskpoolService.setMaximumNumberOfActiveBundles(riskpoolId, maximumNumberOfActiveBundles);\\n        // after action hook for child contracts\\n        _afterSetMaximumActiveBundles(maximumNumberOfActiveBundles);\\n\\n        emit LogMaximumNumberOfActiveBundlesSet(maximumNumberOfActiveBundles);\\n    }\\n\\n    function getMaximumNumberOfActiveBundles()\\n        public view override\\n        returns(uint256 maximumNumberOfActiveBundles)\\n    {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getMaximumNumberOfActiveBundles(riskpoolId);\\n    }\\n\\n    function getWallet() public view override returns(address) {\\n        return _wallet;\\n    }\\n\\n    function getErc20Token() public view override returns(address) {\\n        return _erc20Token;\\n    }\\n\\n    function getSumOfSumInsuredCap() public view override returns (uint256) {\\n        return _sumOfSumInsuredCap;\\n    }\\n\\n    function getFullCollateralizationLevel() public pure override returns (uint256) {\\n        return FULL_COLLATERALIZATION_LEVEL;\\n    }\\n\\n    function getCollateralizationLevel() public view override returns (uint256) {\\n        return _collateralization;\\n    }\\n\\n    function bundles() public override view returns(uint256) {\\n        return _bundleIds.length;\\n    }\\n\\n    function getBundleId(uint256 idx) external view returns(uint256 bundleId) {\\n        require(idx < _bundleIds.length, \\\"ERROR:RPL-007:BUNDLE_INDEX_TOO_LARGE\\\");\\n        return _bundleIds[idx];\\n    }\\n\\n    // empty implementation to satisfy IRiskpool\\n    function getBundle(uint256 idx) external override view returns(IBundle.Bundle memory) {}\\n\\n    function activeBundles() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.activeBundles(riskpoolId);\\n    }\\n\\n    function getActiveBundleId(uint256 idx) public override view returns(uint256 bundleId) {\\n        uint256 riskpoolId = getId();\\n        require(idx < _instanceService.activeBundles(riskpoolId), \\\"ERROR:RPL-008:ACTIVE_BUNDLE_INDEX_TOO_LARGE\\\");\\n\\n        return _instanceService.getActiveBundleId(riskpoolId, idx);\\n    }\\n\\n    function getFilterDataStructure() external override virtual pure returns(string memory) {\\n        return DEFAULT_FILTER_DATA_STRUCTURE;\\n    }\\n\\n    function getCapital() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getCapital(riskpoolId);\\n    }\\n\\n    function getTotalValueLocked() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getTotalValueLocked(riskpoolId);\\n    }\\n\\n    function getCapacity() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getCapacity(riskpoolId);\\n    }\\n\\n    function getBalance() public override view returns(uint256) {\\n        uint256 riskpoolId = getId();\\n        return _instanceService.getBalance(riskpoolId);\\n    }\\n\\n    // change: no longer view to allow for log entries in derived contracts\\n    function bundleMatchesApplication(\\n        IBundle.Bundle memory bundle, \\n        IPolicy.Application memory application\\n    ) public override virtual view returns(bool isMatching);\\n\\n    function _afterArchive() internal view override { \\n        uint256 riskpoolId = getId();\\n        require(\\n            _instanceService.unburntBundles(riskpoolId) == 0, \\n            \\\"ERROR:RPL-010:RISKPOOL_HAS_UNBURNT_BUNDLES\\\"\\n            );\\n    }\\n\\n    // after action hooks for child contracts\\n    function _afterSetMaximumActiveBundles(uint256 numberOfBundles) internal virtual {}\\n    function _afterCreateBundle(uint256 bundleId, bytes memory filter, uint256 initialAmount) internal virtual {}\\n    function _afterFundBundle(uint256 bundleId, uint256 amount) internal virtual {}\\n    function _afterDefundBundle(uint256 bundleId, uint256 amount) internal virtual {}\\n\\n    function _afterLockBundle(uint256 bundleId) internal virtual {}\\n    function _afterUnlockBundle(uint256 bundleId) internal virtual {}\\n    function _afterCloseBundle(uint256 bundleId) internal virtual {}\\n    function _afterBurnBundle(uint256 bundleId) internal virtual {}\\n\\n    // abstract functions to implement by concrete child contracts\\n    function _lockCollateral(bytes32 processId, uint256 collateralAmount) internal virtual returns(bool success);\\n    function _processPremium(bytes32 processId, uint256 amount) internal virtual;\\n    function _processPayout(bytes32 processId, uint256 amount) internal virtual;\\n    function _releaseCollateral(bytes32 processId) internal virtual returns(uint256 collateralAmount);\\n}\\n\"\r\n    },\r\n    \"IChainRegistryFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\n/**\\n * @dev this facade is intended for user contracts with limited \\n * interactions with the actual contract and that need to work \\n * with older solidity versions that do not support user defined \\n * types.\\n * \\n * usage: \\n * (1) copy this interface into your repository\\n * (2) adapt the pragma to your needsd\\n * (3) use it in your contracts, ie. cast actual contract \\n * address to this interface, then  usd the resulting facade \\n * to interact with the actual contract\\n */\\n\\nimport {IChainNftFacade} from \\\"IChainNftFacade.sol\\\";\\n\\ninterface IChainRegistryFacade {\\n\\n    function registerBundle(\\n        bytes32 instanceId,\\n        uint256 riskpoolId,\\n        uint256 bundleId,\\n        string memory displayName,\\n        uint256 expiryAt\\n    )\\n        external\\n        returns(uint96 nftId);\\n\\n    function extendBundleLifetime(uint96 id, uint256 lifetimeExtension) external;\\n\\n    function owner() external view returns(address);\\n    function getNft() external view returns(IChainNftFacade);\\n    function toChain(uint256 chainId) external pure returns(bytes5 chain);\\n\\n    function objects(bytes5 chain, uint8 objectType) external view returns(uint256 numberOfObjects);\\n    function getNftId(bytes5 chain, uint8 objectType, uint256 idx) external view returns(uint96 nftId);\\n    function exists(uint96 id) external view returns(bool);\\n    function ownerOf(uint96 id) external view returns(address nftOwner);\\n\\n    function getInstanceNftId(bytes32 instanceId) external view returns(uint96 nftId);\\n    function getComponentNftId(bytes32 instanceId, uint256 componentId) external view returns(uint96 nftId);\\n    function getBundleNftId(bytes32 instanceId, uint256 bundleId) external view returns(uint96 nftId);\\n\\n    function version() external pure returns(uint48);\\n    function versionParts()\\n        external\\n        view\\n        returns(\\n            uint16 major,\\n            uint16 minor,\\n            uint16 patch\\n        );\\n\\n\\n    function decodeComponentData(uint96 id)\\n        external\\n        view\\n        returns(\\n            bytes32 instanceId,\\n            uint256 componentId,\\n            address token);\\n\\n\\n    function decodeBundleData(uint96 id)\\n        external\\n        view\\n        returns(\\n            bytes32 instanceId,\\n            uint256 riskpoolId,\\n            uint256 bundleId,\\n            address token,\\n            string memory displayName,\\n            uint256 expiryAt);\\n\\n\\n    function decodeStakeData(uint96 id)\\n        external\\n        view\\n        returns(\\n            uint96 target,\\n            uint8 targetType);\\n\\n}\"\r\n    },\r\n    \"IChainNftFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\n/**\\n * @dev this facade is intended for user contracts with limited \\n * interactions with the actual contract and that need to work \\n * with older solidity versions that do not support user defined \\n * types.\\n * \\n * usage: \\n * (1) copy this interface into your repository\\n * (2) adapt the pragma to your needsd\\n * (3) use it in your contracts, ie. cast actual contract \\n * address to this interface, then  usd the resulting facade \\n * to interact with the actual contract\\n */\\n\\nimport {IChainRegistryFacade} from \\\"IChainRegistryFacade.sol\\\";\\n\\ninterface IChainNftFacade {\\n\\n    function mint(address to, string memory uri) external returns(uint256 tokenId);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function getRegistry() external view returns (IChainRegistryFacade);\\n\\n    function exists(uint256 tokenId) external view returns(bool);\\n    function totalMinted() external view returns(uint256);\\n}\"\r\n    },\r\n    \"IStakingFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\n/**\\n * @dev this facade is intended for user contracts with limited \\n * interactions with the actual contract and that need to work \\n * with older solidity versions that do not support user defined \\n * types.\\n * \\n * usage: \\n * (1) copy this interface into your repository\\n * (2) adapt the pragma to your needsd\\n * (3) use it in your contracts, ie. cast actual contract \\n * address to this interface, then  usd the resulting facade \\n * to interact with the actual contract\\n */\\n\\nimport {IERC20Metadata} from \\\"IERC20Metadata.sol\\\";\\n\\nimport {IChainRegistryFacade} from \\\"IChainRegistryFacade.sol\\\";\\n\\ninterface IStakingFacade {\\n\\n    function owner() external view returns(address);\\n    function getRegistry() external view returns(IChainRegistryFacade);\\n\\n    function getStakingWallet() external view returns(address stakingWallet);\\n    function getDip() external view returns(IERC20Metadata);\\n\\n    function maxRewardRate() external view returns(uint256 rate);\\n    function rewardRate() external view returns(uint256 rate);\\n    function rewardBalance() external view returns(uint256 dipAmount);\\n    function rewardReserves() external view returns(uint256 dipAmount);\\n\\n    function stakeBalance() external view returns(uint256 dipAmount);\\n    function stakingRate(bytes5 chain, address token) external view returns(uint256 rate);\\n\\n    function capitalSupport(uint96 targetNftId) external view returns(uint256 capitalAmount);\\n    function implementsIStaking() external pure returns(bool);\\n\\n    function toChain(uint256 chainId) external pure returns(bytes5);\\n\\n    function toRate(uint256 value, int8 exp) external pure returns(uint256 rate);\\n    function rateDecimals() external pure returns(uint256 decimals);\\n\\n    function version() external pure returns(uint48);\\n    function versionParts()\\n        external\\n        view\\n        returns(\\n            uint16 major,\\n            uint16 minor,\\n            uint16 patch\\n        );\\n\\n}\"\r\n    },\r\n    \"DepegMessageHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.2;\\n\\nimport \\\"EIP712.sol\\\";\\n\\n\\ncontract DepegMessageHelper is \\n    EIP712\\n{\\n    // EIP-712 Depeg specifics\\n    string public constant EIP712_DOMAIN_NAME = \\\"EtheriscDepeg\\\";\\n    string public constant EIP712_DOMAIN_VERSION = \\\"1\\\";\\n\\n    string public constant EIP712_POLICY_TYPE = \\\"Policy(address wallet,uint256 protectedBalance,uint256 duration,uint256 bundleId,bytes32 signatureId)\\\";\\n    bytes32 private constant EIP712_POLICY_TYPE_HASH = keccak256(abi.encodePacked(EIP712_POLICY_TYPE));\\n\\n    // tracking of signatures\\n    mapping(bytes32 /* signature hash */ => bool /* used */) private _signatureIsUsed;\\n\\n\\n    constructor()\\n        EIP712(EIP712_DOMAIN_NAME, EIP712_DOMAIN_VERSION)\\n    { }\\n\\n    function checkAndRegisterSignature (\\n        address policyHolder,\\n        address protectedWallet,\\n        uint256 protectedBalance,\\n        uint256 duration,\\n        uint256 bundleId,\\n        bytes32 signatureId,\\n        bytes calldata signature\\n    )\\n        external \\n    {\\n        bytes32 signatureHash = keccak256(abi.encode(signature));\\n        require(!_signatureIsUsed[signatureHash], \\\"ERROR:DMH-001:SIGNATURE_USED\\\");\\n\\n        address signer = getSignerFromDigestAndSignature(\\n            protectedWallet,\\n            protectedBalance,\\n            duration,\\n            bundleId,\\n            signatureId,\\n            signature);\\n\\n        require(policyHolder == signer, \\\"ERROR:DMH-002:SIGNATURE_INVALID\\\");\\n\\n        _signatureIsUsed[signatureHash] = true;\\n    }\\n\\n    function getSignerFromDigestAndSignature(\\n        address protectedWallet,\\n        uint256 protectedBalance,\\n        uint256 duration,\\n        uint256 bundleId,\\n        bytes32 signatureId,\\n        bytes calldata signature\\n    )\\n        public\\n        view\\n        returns(address)\\n    {\\n        bytes32 digest = getDigest(\\n                protectedWallet,\\n                protectedBalance,\\n                duration,\\n                bundleId,\\n                signatureId\\n            );\\n\\n        return getSigner(digest, signature);\\n    }\\n\\n\\n    function getDigest(\\n        address protectedWallet,\\n        uint256 protectedBalance,\\n        uint256 duration,\\n        uint256 bundleId,\\n        bytes32 signatureId\\n    )\\n        internal\\n        view\\n        returns(bytes32)\\n    {\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                EIP712_POLICY_TYPE_HASH,\\n                protectedWallet,\\n                protectedBalance,\\n                duration,\\n                bundleId,\\n                signatureId\\n            )\\n        );\\n\\n        return getTypedDataV4Hash(structHash);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"DepegProduct.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"priceDataProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"riskpoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depegMessageHelper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogComponentApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogComponentArchived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"componentName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IComponent.ComponentType\",\"name\":\"componentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"componentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"LogComponentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogComponentDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogComponentPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"componentName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IComponent.ComponentType\",\"name\":\"componentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"componentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogComponentProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogComponentResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IComponent.ComponentState\",\"name\":\"stateOld\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IComponent.ComponentState\",\"name\":\"stateNew\",\"type\":\"uint8\"}],\"name\":\"LogComponentStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogComponentSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogComponentUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protectedWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sumInsuredAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"}],\"name\":\"LogDepegApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"}],\"name\":\"LogDepegClaimConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"LogDepegClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogDepegDepegBalanceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depeggedBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogDepegDepegBalanceError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"}],\"name\":\"LogDepegPayoutProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"LogDepegPolicyClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sumInsuredAmount\",\"type\":\"uint256\"}],\"name\":\"LogDepegPolicyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"LogDepegPolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IPriceDataProvider.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggeredAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depeggedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"LogDepegPriceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLeftToProcess\",\"type\":\"uint256\"}],\"name\":\"LogDepegProcessedAmountReduction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactivatedAt\",\"type\":\"uint256\"}],\"name\":\"LogDepegProductDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pausedAt\",\"type\":\"uint256\"}],\"name\":\"LogDepegProductPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reactivatedAt\",\"type\":\"uint256\"}],\"name\":\"LogDepegProductReactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unpausedAt\",\"type\":\"uint256\"}],\"name\":\"LogDepegProductUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depegBalance\",\"type\":\"uint256\"}],\"name\":\"LogDepegProtectedAmountReduction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"componentId\",\"type\":\"uint256\"}],\"name\":\"LogProductApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"productAddress\",\"type\":\"address\"}],\"name\":\"LogProductCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"componentId\",\"type\":\"uint256\"}],\"name\":\"LogProductDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"componentId\",\"type\":\"uint256\"}],\"name\":\"LogProductProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GANACHE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINNET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_FLOW\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct DepegProduct.DepegBalance[]\",\"name\":\"depegBalances\",\"type\":\"tuple[]\"}],\"name\":\"addDepegBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOkCases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceErrorCases\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"applicationCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protectedWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protectedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"applyForPolicyWithBundle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protectedWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protectedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"signatureId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"applyForPolicyWithBundleAndSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"archiveCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sumInsured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"calculateNetPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"netPremium\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"netPremium\",\"type\":\"uint256\"}],\"name\":\"calculatePremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"createDepegBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct DepegProduct.DepegBalance\",\"name\":\"depegBalance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"createDepegClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declineCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeClaimInfoFromData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depegPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depeggedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depegPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depeggedAt\",\"type\":\"uint256\"}],\"name\":\"encodeClaimInfoAsData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApplicationDataStructure\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dataStructure\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"applicationIdx\",\"type\":\"uint256\"}],\"name\":\"getApplicationId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getClaimData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasClaim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"internalType\":\"enum IPolicy.ClaimState\",\"name\":\"claimState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCreatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimDataStructure\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dataStructure\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protectedWallet\",\"type\":\"address\"}],\"name\":\"getDepegBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct DepegProduct.DepegBalance\",\"name\":\"depegBalance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getDepegClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IPolicy.ClaimState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolicy.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepegPriceInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum IPriceDataProvider.ComplianceState\",\"name\":\"compliance\",\"type\":\"uint8\"},{\"internalType\":\"enum IPriceDataProvider.StabilityState\",\"name\":\"stability\",\"type\":\"uint8\"},{\"internalType\":\"enum IPriceDataProvider.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"triggeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depeggedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceDataProvider.PriceInfo\",\"name\":\"priceInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepegState\",\"outputs\":[{\"internalType\":\"enum DepegProduct.DepegState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepeggedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depeggedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepeggedBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeFractionFullUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fractionFullUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"componentId\",\"type\":\"uint256\"}],\"name\":\"getFeeSpecification\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"componentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fractionalFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"feeCalculationData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ITreasury.FeeSpecification\",\"name\":\"feeSpecification\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum IPriceDataProvider.ComplianceState\",\"name\":\"compliance\",\"type\":\"uint8\"},{\"internalType\":\"enum IPriceDataProvider.StabilityState\",\"name\":\"stability\",\"type\":\"uint8\"},{\"internalType\":\"enum IPriceDataProvider.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"triggeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depeggedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceDataProvider.PriceInfo\",\"name\":\"priceInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMessageHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"messageHelperAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayoutDataStructure\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dataStructure\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getPolicyExpirationData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExpired\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyFlow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyIdx\",\"type\":\"uint256\"}],\"name\":\"getPolicyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getPolicyToProcess\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"priceDataProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protectedWallet\",\"type\":\"address\"}],\"name\":\"getProcessedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getProtectedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protectedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protectedToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getProtectedWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiskpoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum IComponent.ComponentState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTriggeredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"triggeredAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getType\",\"outputs\":[{\"internalType\":\"enum IComponent.ComponentType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"hasDepegClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNewPriceInfoEventAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"newEvent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum IPriceDataProvider.ComplianceState\",\"name\":\"compliance\",\"type\":\"uint8\"},{\"internalType\":\"enum IPriceDataProvider.StabilityState\",\"name\":\"stability\",\"type\":\"uint8\"},{\"internalType\":\"enum IPriceDataProvider.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"triggeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depeggedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceDataProvider.PriceInfo\",\"name\":\"priceInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timeSinceEvent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRiskpool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"policyCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policiesToProcess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfPolicies\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"policyIsAllowedToClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"mayClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyHolder\",\"type\":\"address\"}],\"name\":\"processIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfProcessIds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLatestPriceInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum IPriceDataProvider.ComplianceState\",\"name\":\"compliance\",\"type\":\"uint8\"},{\"internalType\":\"enum IPriceDataProvider.StabilityState\",\"name\":\"stability\",\"type\":\"uint8\"},{\"internalType\":\"enum IPriceDataProvider.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"triggeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depeggedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceDataProvider.PriceInfo\",\"name\":\"priceInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_processIds\",\"type\":\"bytes32[]\"}],\"name\":\"processPolicies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"processPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reactivateProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"riskPoolCapacityCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspendCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DepegProduct", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "44657065675f313639333932333734385f50726f647563740000000000000000000000000000000000000000ab4e66de0a685eea322f270b91d2d6ecef767cff000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000d250b7ec0dcae1c988a69120f7bb2213d4e7c66000000000000000000000000000000000000000000000000000000000000000060000000000000000000000004a5c569a652c43b2bdb9bcf770861c6170319ddd", "EVMVersion": "istanbul", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}