{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETCSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForROSESupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function WETC() external pure returns (address);\r\n\r\n    function WHT() external pure returns (address);\r\n\r\n    function WROSE() external pure returns (address);\r\n\r\n    function WAVAX() external pure returns (address);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0x0),\r\n            \"call the renounceOwnership for zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract BaseToken {\r\n    event TokenCreated(\r\n        address indexed owner,\r\n        address indexed token,\r\n        string tokenType,\r\n        uint256 version\r\n    );\r\n}\r\n\r\nabstract contract CoinscopeBuyback {\r\n    address public constant COINSCOPE_ADDRESS =\r\n        0xD41C4805A9A3128f9F7A7074Da25965371Ba50d5;\r\n\r\n    IUniswapV2Router02 public constant BSC_PANCAKE_ROUTER =\r\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    event CoinscopeBuybackRejectedSwapBalance();\r\n    event CoinscopeBuybackApproved(\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity,\r\n        uint256 ownerAmountReceiveed\r\n    );\r\n    event CoinscopeBuybackRejectedLiquidity();\r\n    event CoinscopeBuybackRejectedSwap();\r\n\r\n    function coinscopeBuyback(\r\n        address recepient,\r\n        address platformFeeReceiver,\r\n        uint8 feeShare\r\n    ) internal {\r\n        if (block.chainid != 56 || address(this).balance == 0 || feeShare > 100)\r\n            return;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = BSC_PANCAKE_ROUTER.WETH();\r\n        path[1] = COINSCOPE_ADDRESS;\r\n\r\n        uint256 swapAmount = (address(this).balance * feeShare) / 100;\r\n\r\n        try\r\n            BSC_PANCAKE_ROUTER.swapExactETHForTokens{value: swapAmount}(\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            )\r\n        returns (uint256[] memory amounts) {\r\n            uint256 coinscopeBalance = amounts[amounts.length - 1];\r\n\r\n            if (coinscopeBalance == 0) {\r\n                emit CoinscopeBuybackRejectedSwapBalance();\r\n                return;\r\n            }\r\n\r\n            uint256 ownerTokens = coinscopeBalance / 100;\r\n\r\n            IERC20 coinscopeToken = IERC20(COINSCOPE_ADDRESS);\r\n\r\n            require(\r\n                coinscopeToken.transfer(recepient, ownerTokens),\r\n                \"Coinscope tokens should transferred to owner\"\r\n            );\r\n\r\n            coinscopeBalance = coinscopeToken.balanceOf(address(this));\r\n\r\n            require(\r\n                coinscopeToken.approve(\r\n                    address(BSC_PANCAKE_ROUTER),\r\n                    coinscopeBalance\r\n                ),\r\n                \"Coinscope allowance should be approved\"\r\n            );\r\n\r\n            try\r\n                BSC_PANCAKE_ROUTER.addLiquidityETH{\r\n                    value: address(this).balance\r\n                }(\r\n                    COINSCOPE_ADDRESS,\r\n                    coinscopeBalance,\r\n                    0,\r\n                    0,\r\n                    platformFeeReceiver,\r\n                    block.timestamp\r\n                )\r\n            returns (\r\n                uint256 amountToken,\r\n                uint256 amountETH,\r\n                uint256 liquidity\r\n            ) {\r\n                emit CoinscopeBuybackApproved(\r\n                    amountToken,\r\n                    amountETH,\r\n                    liquidity,\r\n                    ownerTokens\r\n                );\r\n            } catch {\r\n                emit CoinscopeBuybackRejectedLiquidity();\r\n            }\r\n        } catch {\r\n            emit CoinscopeBuybackRejectedSwap();\r\n        }\r\n    }\r\n}\r\n\r\ncontract Redis is IERC20, Ownable, BaseToken, CoinscopeBuyback {\r\n    uint256 public constant VERSION = 1;\r\n\r\n    mapping(address => uint256) private rOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private immutable tTotal;\r\n    uint256 private rTotal;\r\n\r\n    uint16 public reflectionTax;\r\n    uint16 public treasuryTax;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private immutable _decimals;\r\n\r\n    address payable public treasuryAddress;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    bool private inSwap = false;\r\n    bool public swapEnabled = true;\r\n\r\n    event UpdatedTreasuryWallet(address indexed account);\r\n    event ChangedFees(uint16 reflectionTax, uint16 treasuryTax);\r\n    event ChangedSwapEnable(bool enable);\r\n    event ExcludedAccountsFromFees(address[] accounts, bool excluded);\r\n    event WithdrawedTokens(\r\n        address indexed token,\r\n        address indexed to,\r\n        uint amount\r\n    );\r\n    event SwapError(uint256 amount);\r\n    event Reflected(address sender, uint256 amount);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        address router_,\r\n        address treasuryAddress_,\r\n        uint16 reflectionTax_,\r\n        uint16 treasuryTax_,\r\n        address feeReceiver,\r\n        uint8 feeShare\r\n    ) payable {\r\n        require(\r\n            treasuryAddress_ != address(0x0),\r\n            \"treasury address cannot be zero\"\r\n        );\r\n\r\n        require(decimals_ != 0, \"decimals should not be zero\");\r\n        validateFees(reflectionTax_, treasuryTax_);\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n\r\n        tTotal = totalSupply_;\r\n        rTotal = (MAX - (MAX % totalSupply_));\r\n\r\n        rOwned[msg.sender] = rTotal;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(router_);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            getNativeCurrency()\r\n        );\r\n\r\n        treasuryAddress = payable(treasuryAddress_);\r\n\r\n        reflectionTax = reflectionTax_;\r\n        treasuryTax = treasuryTax_;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[treasuryAddress_] = true;\r\n\r\n        emit Transfer(address(0x0), msg.sender, totalSupply_);\r\n\r\n        emit TokenCreated(owner(), address(this), \"redis\", VERSION);\r\n\r\n        if (feeReceiver == address(0x0)) return;\r\n\r\n        coinscopeBuyback(owner(), feeReceiver, feeShare);\r\n        payable(feeReceiver).transfer(address(this).balance);\r\n    }\r\n\r\n    function getNativeCurrency() internal view returns (address) {\r\n        if (block.chainid == 61) {\r\n            //etc\r\n            return uniswapV2Router.WETC();\r\n        } else if (block.chainid == 128) {\r\n            //heco chain\r\n            return uniswapV2Router.WHT();\r\n        } else if (block.chainid == 42262) {\r\n            //oasis\r\n            return uniswapV2Router.WROSE();\r\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\r\n            //avalance\r\n            return uniswapV2Router.WAVAX();\r\n        } else {\r\n            return uniswapV2Router.WETH();\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(rOwned[account]);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address account,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[account][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        uint256 senderAllowance = _allowances[sender][msg.sender];\r\n\r\n        require(senderAllowance >= amount, \"insufficient allowance\");\r\n\r\n        _approve(sender, msg.sender, senderAllowance - amount);\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(\r\n        uint256 rAmount\r\n    ) private view returns (uint256) {\r\n        require(\r\n            rAmount <= rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _approve(\r\n        address account,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(account != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[account][spender] = amount;\r\n        emit Approval(account, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (\r\n            from != owner() &&\r\n            to != owner() &&\r\n            !inSwap &&\r\n            from != uniswapV2Pair &&\r\n            swapEnabled\r\n        ) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            if (contractTokenBalance > 0)\r\n                swapTokensForEth(contractTokenBalance);\r\n        }\r\n\r\n        _transferStandard(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = getNativeCurrency();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        if (block.chainid == 61) {\r\n            //etc\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactTokensForETCSupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0, // accept any amount of ETH\r\n                        path,\r\n                        treasuryAddress,\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit SwapError(tokenAmount);\r\n            }\r\n        } else if (block.chainid == 42262) {\r\n            //oasis\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactTokensForROSESupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0, // accept any amount of ETH\r\n                        path,\r\n                        treasuryAddress,\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit SwapError(tokenAmount);\r\n            }\r\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\r\n            //avalance\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0, // accept any amount of ETH\r\n                        path,\r\n                        treasuryAddress,\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit SwapError(tokenAmount);\r\n            }\r\n        } else {\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0, // accept any amount of ETH\r\n                        path,\r\n                        treasuryAddress,\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit SwapError(tokenAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        treasuryAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address token,\r\n        address to,\r\n        uint amount\r\n    ) external onlyOwner {\r\n        require(IERC20(token).transfer(to, amount), \"transfer rejected\");\r\n\r\n        emit WithdrawedTokens(token, to, amount);\r\n    }\r\n\r\n    function setTreasuryAddress(address payable account) external onlyOwner {\r\n        require(account != address(0x0), \"treasury address cannot be zero\");\r\n\r\n        treasuryAddress = account;\r\n        _isExcludedFromFee[account] = true;\r\n\r\n        emit UpdatedTreasuryWallet(account);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        bool takeFee = !_isExcludedFromFee[sender] &&\r\n            !_isExcludedFromFee[recipient] &&\r\n            (sender == uniswapV2Pair || recipient == uniswapV2Pair) &&\r\n            !inSwap;\r\n\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rReflection,\r\n            uint256 rTreasury,\r\n            uint256 tTransferAmount,\r\n            uint256 tReflection,\r\n            uint256 tTreasury\r\n        ) = _getValues(takeFee, tAmount);\r\n\r\n        rOwned[sender] = rOwned[sender] - rAmount;\r\n        rOwned[recipient] = rOwned[recipient] + rTransferAmount;\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        if (rTreasury > 0) {\r\n            rOwned[address(this)] = rOwned[address(this)] + rTreasury;\r\n            emit Transfer(sender, address(this), tTreasury);\r\n        }\r\n\r\n        if (rReflection > 0) {\r\n            rTotal = rTotal - rReflection;\r\n            emit Reflected(sender, tReflection);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(\r\n        bool takeFees,\r\n        uint256 tAmount\r\n    )\r\n        private\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tReflection,\r\n            uint256 tTreasury\r\n        ) = _getTValues(takeFees, tAmount);\r\n\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rReflection,\r\n            uint256 rTreasury\r\n        ) = _getRValues(tAmount, tReflection, tTreasury);\r\n\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rReflection,\r\n            rTreasury,\r\n            tTransferAmount,\r\n            tReflection,\r\n            tTreasury\r\n        );\r\n    }\r\n\r\n    function _getTValues(\r\n        bool takeFees,\r\n        uint256 tAmount\r\n    ) private view returns (uint256, uint256, uint256) {\r\n        if (!takeFees) return (tAmount, 0, 0);\r\n\r\n        uint256 tReflection = (tAmount * reflectionTax) / 100;\r\n        uint256 tTreasury = (tAmount * treasuryTax) / 100;\r\n        uint256 tTransferAmount = tAmount - tReflection - tTreasury;\r\n        return (tTransferAmount, tReflection, tTreasury);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tReflection,\r\n        uint256 tTreasury\r\n    ) private view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 rate = _getRate();\r\n\r\n        uint256 rAmount = tAmount * rate;\r\n        uint256 rReflection = tReflection * rate;\r\n        uint256 rTreasury = tTreasury * rate;\r\n        uint256 rTransferAmount = rAmount - rReflection - rTreasury;\r\n\r\n        return (rAmount, rTransferAmount, rReflection, rTreasury);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = rTotal;\r\n        uint256 tSupply = tTotal;\r\n        if (rSupply < rTotal / tTotal) return (rTotal, tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        swapTokensForEth(balanceOf(address(this)));\r\n    }\r\n\r\n    function setFee(\r\n        uint16 reflectionTax_,\r\n        uint16 treasuryTax_\r\n    ) public onlyOwner {\r\n        validateFees(reflectionTax_, treasuryTax_);\r\n\r\n        reflectionTax = reflectionTax_;\r\n        treasuryTax = treasuryTax_;\r\n\r\n        emit ChangedFees(reflectionTax_, treasuryTax_);\r\n    }\r\n\r\n    function validateFees(\r\n        uint16 reflectionTax_,\r\n        uint16 treasuryTax_\r\n    ) internal pure {\r\n        require(\r\n            reflectionTax_ + treasuryTax_ <= 20,\r\n            \"Fees cannot be greater than 20%\"\r\n        );\r\n    }\r\n\r\n    function toggleSwap(bool enable) external onlyOwner {\r\n        swapEnabled = enable;\r\n\r\n        emit ChangedSwapEnable(enable);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n\r\n        emit ExcludedAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    function getExcludedFromFee(address account) external view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"reflectionTax_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasuryTax_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feeShare\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"reflectionTax\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasuryTax\",\"type\":\"uint16\"}],\"name\":\"ChangedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"ChangedSwapEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerAmountReceiveed\",\"type\":\"uint256\"}],\"name\":\"CoinscopeBuybackApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CoinscopeBuybackRejectedLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CoinscopeBuybackRejectedSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CoinscopeBuybackRejectedSwapBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reflected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdatedTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawedTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BSC_PANCAKE_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COINSCOPE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflectionTax_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasuryTax_\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Redis", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000c9f2c9cd04674edea400000000000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000eaeec76237f9811f603be422c4fcbe28f43cf64b000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000001717afbe81bb09cbd283f18474349efe2c27dced000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000095472756d70436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055452554d50000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ceb6e1f0df6696ac4b3f2a5d04fd7082b36446daad3e1c71e39283f7d11ff7bd"}