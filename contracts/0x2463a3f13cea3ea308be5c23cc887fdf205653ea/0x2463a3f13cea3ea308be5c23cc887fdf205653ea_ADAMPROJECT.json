{"SourceCode": "//  SPDX-License-Identifier: MIT\r\n\r\n//The Adam Project is a pioneering ecosystem at the forefront of blockchain technology. \r\n//We empower users with cutting-edge tools like Adam Bot, NFTs, and strategic investments, \r\n//revolutionizing how we navigate the world of crypto.\r\n\r\n//Our Utilities, budget and team can only be rivaled by projects with a market capitalization\r\n//worth millions of dollars.\r\n\r\n//\u2705 Transparency \r\n//\u2705 Long term plan and push \r\n//\u2705 Good marketing and connections.\r\n//\u2705 Previous - 380k ATH\r\n//\u2705 Unrivaled Utilitiess.\r\n\r\n// WEBSITE: https://projectadam.tech\r\n//  TELEGRAM: https://t.me/projectAdamERC\r\n//  TWIITTER: https://X.com/projectadamERC\r\n//  00110001 00110000 00110011 00101100 00111001 00110000 00110000 00101100 00110000 00110000 00110000 00100000 00101101 00100000 01000011 \r\n//  01100001 01101110 00100000 01111001 01101111 01110101 00100000 01100110 01101001 01100111 01110101 01110010 01100101 00100000 01101111 \r\n//  01110101 01110100 00100000 01110100 01101000 01100101 00100000 01100011 01101111 01100100 01100101 00111111 00001010 01010111 01101000 \r\n//  01100001 01110100 00100111 01110011 00100000 01100010 01100101 01101000 01101001 01101110 01100100 00100000 01110100 01101000 01101001 \r\n//  01110011 00100000 01101110 01110101 01101101 01100010 01100101 01110010 00100000 00111111 00100000 00001010 01001100 01100101 01110100 \r\n//  00100000 01110100 01101000 01100101 00100000 01100111 01100001 01101101 01100101 00100000 01100010 01100101 01100111 01101001 01101110 00101110 00100000 \r\n\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract ADAMPROJECT is IERC20, Ownable {\r\n\r\n    address private WETH;\r\n\r\n    string private constant _name = \"THE ADAM PROJECT\";\r\n    string private constant _symbol = \"ADAM\";   \r\n    uint8 private constant _decimals = 9;\r\n    \r\n    uint256 _totalSupply = 10000000 * (10 ** _decimals);\r\n    uint256 maxWallet = _totalSupply / 50; // \r\n    uint256 maxTransaction = _totalSupply / 50; //\r\n    uint256 public swapThreshold = _totalSupply / 1000; // \r\n\r\n    uint256 public maxBuy = _totalSupply / 50; // \r\n    bool public maxBuyEnabled = true;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isWalletExempt;\r\n    mapping (address => bool) public isTxExempt;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    uint[3] taxesCollected = [0, 0, 0];\r\n\r\n    uint256 public launchedAt;\r\n    address public liquidityPool = DEAD;\r\n\r\n    // All fees are in basis points (100 = 1%)\r\n    uint256 private buyMkt = 2600;\r\n    uint256 private sellMkt = 3500;\r\n    uint256 private buyLP = 0;\r\n    uint256 private sellLP = 0;\r\n    uint256 private buyDev = 400;\r\n    uint256 private sellDev = 500;\r\n\r\n    uint256 _baseBuyFee = buyMkt + buyLP + buyDev;\r\n    uint256 _baseSellFee = sellMkt + sellLP + sellDev;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    address public factory;\r\n    address public marketingWallet = payable(0x0A54873ce6705A69B9a10199B07C2eb7ea15E2eB);\r\n    address public devWallet = payable(0xA4f73491878Eb63654F7150B3a89DdAD8A331D1A);\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingOpen = true;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            \r\n        WETH = router.WETH();\r\n        \r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[marketingWallet] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isWalletExempt[owner()] = true;\r\n        isWalletExempt[marketingWallet] = true;\r\n        isWalletExempt[DEAD] = true;\r\n        isTxExempt[owner()] = true;\r\n        isTxExempt[marketingWallet] = true;\r\n        isTxExempt[DEAD] = true;\r\n\r\n        _balances[owner()] = _totalSupply;\r\n    \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n \r\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function changeIsWalletExempt(address holder, bool exempt) external onlyOwner {\r\n        isWalletExempt[holder] = exempt;\r\n    } \r\n\r\n    function changeIsTxExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxExempt[holder] = exempt;\r\n    }\r\n\r\n    function launchSequence(uint hold) external onlyOwner {\r\n\t    require(launchedAt == 0, \"Already launched\");\r\n        launchedAt = block.number + hold;\r\n        tradingOpen = true;\r\n    } \r\n\r\n    function toggleTrade(bool _switch) external onlyOwner {\r\n\t    tradingOpen = _switch;\r\n    }\r\n\r\n    function toggleMaxBuy(bool _switch) external onlyOwner {\r\n\t    maxBuyEnabled = _switch;\r\n    }\r\n\r\n    function changeMaxBuyAmount(uint _amt) external onlyOwner {\r\n\t    require(_amt >= (_totalSupply / 200), \"Must be at least 0.5%\");\r\n\t    maxBuy = _amt;\r\n    }\r\n\r\n    function changeMaxWallet(uint _amt) external onlyOwner {\r\n        require(_amt >= (_totalSupply / 50), \"Must be at least 2%\");\r\n        maxWallet = _amt;\r\n    }\r\n\r\n    function changeMaxTransaction(uint _amt) external onlyOwner {\r\n        require(_amt >= (_totalSupply / 100), \"Must be at least 1%\");\r\n        maxTransaction = _amt;\r\n    }\r\n\r\n    function setMarketingWallet(address payable newMarketingWallet) external onlyOwner {\r\n        marketingWallet = payable(newMarketingWallet);\r\n    }\r\n\r\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\r\n\t    devWallet = payable(newDevWallet);\r\n    }\r\n\r\n    function setLiquidityPool(address newLiquidityPool) external onlyOwner {\r\n        liquidityPool = newLiquidityPool;\r\n    }\r\n\r\n    function changeSwapBackSettings(bool enableSwapBack, uint256 newSwapBackLimit) external onlyOwner {\r\n        swapAndLiquifyEnabled  = enableSwapBack;\r\n        swapThreshold = newSwapBackLimit;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function baseBuyFee() external view returns (uint256) {return _baseBuyFee; }\r\n    function baseSellFee() external view returns (uint256) {return _baseSellFee; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function addTaxCollected(uint mkt, uint lp, uint dev) internal {\r\n        taxesCollected[0] += mkt;\r\n        taxesCollected[1] += lp;\r\n\t    taxesCollected[2] += dev;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount < maxTransaction || isTxExempt[sender], \"Exceeds Transaction Limit\");\r\n\r\n        if(recipient != pair) {\r\n            uint256 recipientBalance = _balances[recipient];\r\n            require(recipientBalance + amount < maxWallet || isWalletExempt[recipient]);\r\n        }\r\n\r\n\t    if(sender == pair && maxBuyEnabled) { require(amount <= maxBuy || isTxExempt[recipient], \"Exceeds Max Buy\"); }\r\n        if(sender != owner() && recipient != owner()) { require(tradingOpen || isFeeExempt[sender], \"Trading not active\"); }\r\n        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }\r\n    \tif(sender != pair && recipient != pair) { return _basicTransfer(sender, recipient, amount); }\r\n        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }\r\n    \tif(sender == pair && block.number < launchedAt) { recipient = DEAD; }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        \r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? takeFee(sender, recipient, amount) : amount;\r\n\r\n        _balances[recipient] = _balances[recipient] + finalAmount;\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }  \r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 mktTaxB = amount * buyMkt / 10000;\r\n\t    uint256 mktTaxS = amount * sellMkt / 10000;\r\n        uint256 lpTaxB = amount * buyLP / 10000;\r\n\t    uint256 lpTaxS = amount * sellLP / 10000;\r\n\t    uint256 devB = amount * buyDev / 10000;\r\n\t    uint256 devS = amount * sellDev / 10000;\r\n        uint256 taxToGet;\r\n\r\n\t    if(sender == pair && recipient != address(pair) && !isFeeExempt[recipient]) {\r\n            taxToGet = mktTaxB + lpTaxB + devB;\r\n\t        addTaxCollected(mktTaxB, lpTaxB, devB);\r\n\t    }\r\n\r\n\t    if(!inSwapAndLiquify && sender != pair && tradingOpen) {\r\n\t        taxToGet = mktTaxS + lpTaxS + devS;\r\n\t        addTaxCollected(mktTaxS, lpTaxS, devS);\r\n\t    }\r\n\r\n        _balances[address(this)] = _balances[address(this)] + taxToGet;\r\n        emit Transfer(sender, address(this), taxToGet);\r\n\r\n        return amount - taxToGet;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }  \r\n\r\n    function updateBuyFees(uint256 newBuyMktFee, uint256 newBuyLpFee, uint256 newBuyDev) public onlyOwner {\r\n\t    require(newBuyMktFee + newBuyLpFee + newBuyDev <= 1000, \"Fees Too High\");\r\n\t    buyMkt = newBuyMktFee;\r\n\t    buyLP = newBuyLpFee;\r\n        buyDev = newBuyDev;\r\n    }\r\n    \r\n    function updateSellFees(uint256 newSellMktFee,uint256 newSellLpFee, uint256 newSellDev) public onlyOwner {\r\n\t    require(newSellMktFee + newSellLpFee + newSellDev <= 1000, \"Fees Too High\");\r\n\t    sellMkt = newSellMktFee;\r\n\t    sellLP = newSellLpFee;\r\n\t    sellDev = newSellDev;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        approve(address(this), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityPool,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n    \r\n        uint256 tokenBalance = _balances[address(this)];\r\n        uint256 _totalCollected = taxesCollected[0] + taxesCollected[1] + taxesCollected[2];\r\n        uint256 mktShare = taxesCollected[0];\r\n        uint256 lpShare = taxesCollected[1];\r\n\t    uint256 devShare = taxesCollected[2];\r\n        uint256 tokensForLiquidity = lpShare / 2;  \r\n        uint256 amountToSwap = tokenBalance - tokensForLiquidity;\r\n\r\n        swapTokensForETH(amountToSwap);\r\n\r\n        uint256 totalETHBalance = address(this).balance;\r\n        uint256 ETHForMkt = totalETHBalance * mktShare / _totalCollected;\r\n        uint256 ETHForLiquidity = totalETHBalance * lpShare / _totalCollected / 2;\r\n\t    uint256 ETHForDev = totalETHBalance * devShare/ _totalCollected;\r\n      \r\n        if (totalETHBalance > 0) {\r\n            payable(marketingWallet).transfer(ETHForMkt);\r\n        }\r\n  \r\n        if (tokensForLiquidity > 0) {\r\n            addLiquidity(tokensForLiquidity, ETHForLiquidity);\r\n        }\r\n\t\r\n\t    if (ETHForDev > 0) {\r\n\t        payable(devWallet).transfer(ETHForDev);\r\n        }\r\n\r\n\t    delete taxesCollected;\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        swapBack();\r\n    }\r\n\r\n    function clearStuckETH() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if(contractETHBalance > 0) { \r\n            payable(marketingWallet).transfer(contractETHBalance);\r\n    \t}\r\n    }\r\n\r\n    function clearStuckTokens(address contractAddress) external onlyOwner {\r\n        IERC20 erc20Token = IERC20(contractAddress);\r\n        uint256 balance = erc20Token.balanceOf(address(this));\r\n        erc20Token.transfer(marketingWallet, balance);\r\n    }\r\n\r\n    function massDistributeTokens(address[] calldata _airdropAddresses, uint amtPerAddress) external onlyOwner {\r\n\t    for (uint i = 0; i < _airdropAddresses.length; i++) {\r\n\t        IERC20(address(this)).transfer(_airdropAddresses[i], amtPerAddress);\r\n        }\r\n    }\r\n\r\n    function distributeTokensByAmount(address[] calldata _airdropAddresses, uint[] calldata _airdropAmounts) external onlyOwner {\r\n\t    for (uint i = 0; i < _airdropAddresses.length; i++) {\r\n\t        IERC20(address(this)).transfer(_airdropAddresses[i], _airdropAmounts[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsTxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"changeMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"changeMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"changeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapBackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"clearStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_airdropAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_airdropAmounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokensByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"launchSequence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_airdropAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amtPerAddress\",\"type\":\"uint256\"}],\"name\":\"massDistributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityPool\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"toggleMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"toggleTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyDev\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellDev\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ADAMPROJECT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://06347be3827816ae6a5a89c0e515f0370f07ae8a0a91c294cb5ed0da2f15d0c9"}