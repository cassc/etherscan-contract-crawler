{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165\r\n{\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\ninterface IERC721 is IERC165\r\n{\r\n    event   Transfer(      address indexed from,  address indexed to,       uint256  indexed tokenId);\r\n    event   Approval(      address indexed owner, address indexed approved, uint256  indexed tokenId);\r\n    event   ApprovalForAll(address indexed owner, address indexed operator, bool             approved);\r\n\r\n    function balanceOf(        address owner)                                   external view returns (uint256 balance);\r\n    function ownerOf(          uint256 tokenId)                                 external view returns (address owner);\r\n    function safeTransferFrom( address from,     address to, uint256 tokenId)   external;\r\n    function transferFrom(     address from,     address to, uint256 tokenId)   external;\r\n    function approve(          address to,       uint256 tokenId)               external;\r\n    function getApproved(      uint256 tokenId)                                 external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved)                external;\r\n    function isApprovedForAll( address owner,    address operator)              external view returns (bool);\r\n    function safeTransferFrom( address from,     address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n\r\ninterface IERC721Metadata is IERC721\r\n{\r\n    function name()                     external view returns (string memory);\r\n    function symbol()                   external view returns (string memory);\r\n    function tokenURI(uint256 tokenId)  external view returns (string memory);\r\n}\r\n\r\n\r\n\r\ninterface IERC721Enumerable is IERC721\r\n{\r\n    function totalSupply()                                      external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)  external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index)                        external view returns (uint256);\r\n}\r\n\r\n\r\n\r\ninterface IERC721Receiver\r\n{\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n\r\nabstract contract ERC165 is IERC165\r\n{\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool)\r\n    {\r\n        return (interfaceId == type(IERC165).interfaceId);\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Context\r\n{\r\n    function _msgSender() internal view virtual returns (address)\r\n    {\r\n        return msg.sender;\r\n    }\r\n   \r\n   \r\n    function _msgData() internal view virtual returns (bytes calldata)\r\n    {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Ownable is Context\r\n{\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   \r\n    constructor ()\r\n    {\r\n        address msgSender = _msgSender();\r\n                   _owner = msgSender;\r\n                   \r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n   \r\n   \r\n    function owner() public view virtual returns (address)\r\n    {\r\n        return _owner;\r\n    }\r\n   \r\n   \r\n    modifier onlyOwner()\r\n    {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n   \r\n   \r\n    function renounceOwnership() public virtual onlyOwner\r\n    {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n       \r\n        _owner = address(0);\r\n    }\r\n   \r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n       \r\n        emit OwnershipTransferred(_owner, newOwner);\r\n       \r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, Ownable\r\n{\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string private _name;   // Token name\r\n    string private _symbol; // Token symbol\r\n\r\n    mapping(uint256 => address)                  internal _owners;              // Mapping from token ID to owner address\r\n    mapping(address => uint256)                  internal _balances;            // Mapping owner address to token count\r\n    mapping(uint256 => address)                  private  _tokenApprovals;      // Mapping from token ID to approved address\r\n    mapping(address => mapping(address => bool)) private  _operatorApprovals;   // Mapping from owner to operator approvals\r\n\r\n   \r\n    constructor(string memory name_, string memory symbol_)\r\n    {\r\n        _name   = name_;\r\n        _symbol = symbol_;\r\n    }\r\n   \r\n   \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool)\r\n    {\r\n        return  interfaceId == type(IERC721).interfaceId         ||\r\n                interfaceId == type(IERC721Metadata).interfaceId ||\r\n                super.supportsInterface(interfaceId);\r\n    }\r\n   \r\n   \r\n    function balanceOf(address owner) public view virtual override returns (uint256)\r\n    {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n       \r\n        return _balances[owner];\r\n    }\r\n   \r\n   \r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n   \r\n   \r\n    function name() public view virtual override returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n   \r\n   \r\n    function symbol() public view virtual override returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n   \r\n   \r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n       \r\n        return (bytes(baseURI).length>0) ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n   \r\n   \r\n    function _baseURI() internal view virtual returns (string memory)\r\n    {\r\n        return \"\";\r\n    }\r\n   \r\n   \r\n    function approve(address to, uint256 tokenId) public virtual override\r\n    {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n   \r\n        require(to!=owner, \"ERC721: approval to current owner\");\r\n        require(_msgSender()==owner || ERC721.isApprovedForAll(owner, _msgSender()), \"ERC721: approve caller is not owner nor approved for all\");\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n   \r\n   \r\n    function getApproved(uint256 tokenId) public view virtual override returns (address)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n   \r\n   \r\n    function setApprovalForAll(address operator, bool approved) public virtual override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n   \r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n   \r\n   \r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n   \r\n   \r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override\r\n    {\r\n        //----- solhint-disable-next-line max-line-length\r\n       \r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n   \r\n   \r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override\r\n    {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n   \r\n   \r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override\r\n    {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n       \r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n   \r\n   \r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual\r\n    {\r\n        _transfer(from, to, tokenId);\r\n   \r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n   \r\n   \r\n    function _exists(uint256 tokenId) internal view virtual returns (bool)\r\n    {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n   \r\n   \r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n       \r\n        address owner = ERC721.ownerOf(tokenId);\r\n       \r\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n   \r\n   \r\n    function _safeMint(address to, uint256 tokenId) internal virtual\r\n    {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n   \r\n   \r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual\r\n    {\r\n        _mint(to, tokenId);\r\n   \r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n   \r\n   \r\n    function _mint(address to, uint256 tokenId) internal virtual\r\n    {\r\n        require(to != address(0),  \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to]   += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n   \r\n   \r\n    function _batchMint(address to, uint256[] memory tokenIds) internal virtual\r\n    {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n       \r\n        _balances[to] += tokenIds.length;\r\n\r\n        for (uint256 i=0; i < tokenIds.length; i++)\r\n        {\r\n            require(!_exists(tokenIds[i]), \"ERC721: token already minted\");\r\n\r\n            _beforeTokenTransfer(address(0), to, tokenIds[i]);\r\n\r\n            _owners[tokenIds[i]] = to;\r\n\r\n            emit Transfer(address(0), to, tokenIds[i]);\r\n        }\r\n    }\r\n   \r\n   \r\n    function _burn(uint256 tokenId) internal virtual\r\n    {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        _approve(address(0), tokenId);      // Clear approvals\r\n\r\n        _balances[owner] -= 1;\r\n\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n   \r\n   \r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual\r\n    {\r\n        require(ERC721.ownerOf(tokenId)==from,  \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0),               \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        _approve(address(0), tokenId);      // Clear approvals from the previous owner\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to]   += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n   \r\n   \r\n    function _approve(address to, uint256 tokenId) internal virtual\r\n    {\r\n        _tokenApprovals[tokenId] = to;\r\n   \r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n   \r\n   \r\n    function _checkOnERC721Received(address from,address to,uint256 tokenId,bytes memory _data) private returns (bool)\r\n    {\r\n        if (to.isContract())\r\n        {\r\n            try\r\n           \r\n                IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n           \r\n            returns (bytes4 retval)\r\n            {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            }\r\n            catch (bytes memory reason)\r\n            {\r\n                if (reason.length==0)\r\n                {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                }\r\n                else\r\n                {\r\n                    assembly { revert(add(32, reason), mload(reason)) }     //// solhint-disable-next-line no-inline-assembly\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n   \r\n   \r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual\r\n    {\r\n        //\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable\r\n{\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;           // Mapping from owner to list of owned token IDs\r\n    mapping(uint256 => uint256)                     private _ownedTokensIndex;      // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256)                     private _allTokensIndex;        // Mapping from token id to position in the allTokens array\r\n\r\n    uint256[] private _allTokens;                                                   // Array with all token ids, used for enumeration\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool)\r\n    {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256)\r\n    {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256)\r\n    {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n   \r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256)\r\n    {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n   \r\n        return _allTokens[index];\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from,address to,uint256 tokenId) internal virtual override\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n             if (from == address(0))     _addTokenToAllTokensEnumeration(tokenId);\r\n        else if (from != to)             _removeTokenFromOwnerEnumeration(from, tokenId);\r\n       \r\n             if (to == address(0))       _removeTokenFromAllTokensEnumeration(tokenId);\r\n        else if (to != from)             _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private\r\n    {\r\n        uint256 length = ERC721.balanceOf(to);\r\n   \r\n        _ownedTokens[to][length]   = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private\r\n    {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n   \r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private\r\n    {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private\r\n    {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\nlibrary Strings\r\n{\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n   \r\n    function toString(uint256 value) internal pure returns (string memory)\r\n    {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value==0)       return \"0\";\r\n   \r\n        uint256 temp = value;\r\n        uint256 digits;\r\n   \r\n        while (temp!=0)\r\n        {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n       \r\n        bytes memory buffer = new bytes(digits);\r\n       \r\n        while (value != 0)\r\n        {\r\n            digits        -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value         /= 10;\r\n        }\r\n       \r\n        return string(buffer);\r\n    }\r\n   \r\n   \r\n    function toHexString(uint256 value) internal pure returns (string memory)\r\n    {\r\n        if (value==0)       return \"0x00\";\r\n       \r\n        uint256 temp   = value;\r\n        uint256 length = 0;\r\n       \r\n        while (temp != 0)\r\n        {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n       \r\n        return toHexString(value, length);\r\n    }\r\n   \r\n   \r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n       \r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n       \r\n        for (uint256 i=2*length+1; i>1; --i)\r\n        {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n       \r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary Address\r\n{\r\n    function isContract(address account) internal view returns (bool)\r\n    {\r\n        uint256 size;\r\n       \r\n        assembly { size := extcodesize(account) }   // solhint-disable-next-line no-inline-assembly\r\n        return size > 0;\r\n    }\r\n   \r\n   \r\n    function sendValue(address payable recipient, uint256 amount) internal\r\n    {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\"); // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n   \r\n   \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n   \r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\r\n    {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n   \r\n   \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\r\n    {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n   \r\n   \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\r\n    {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target),             \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);    // solhint-disable-next-line avoid-low-level-calls\r\n\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n   \r\n   \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory)\r\n    {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n   \r\n   \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory)\r\n    {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);  // solhint-disable-next-line avoid-low-level-calls\r\n\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n   \r\n   \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory)\r\n    {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n   \r\n   \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\r\n    {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);    // solhint-disable-next-line avoid-low-level-calls\r\n       \r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n   \r\n   \r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory)\r\n    {\r\n        if (success)\r\n        {\r\n            return returndata;\r\n        }\r\n        else\r\n        {\r\n            if (returndata.length > 0)      // Look for revert reason and bubble it up if present\r\n            {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly\r\n                {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            }\r\n            else\r\n            {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract LuckyCatz     is  ERC721Enumerable\r\n{\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    modifier callerIsUser()\r\n    {\r\n        require(tx.origin == msg.sender, \"The caller is another contract\");\r\n        _;\r\n    }\r\n\r\n    event   onWidthdrawal(address from, address to, uint256 amount);\r\n    event   onMaxMintPerWallet(uint256 lastMaxCount, uint256 newMaxCount);\r\n   \r\n    uint256 private     salesDate          = 1634482800;\r\n    uint256 private     salesPrice         = 0.0001 ether;//0.07 ether;\r\n\r\n    uint256 private     totalTokens        = 7777;\r\n    uint256 private     leftTokenCount     = totalTokens;\r\n    uint256 private     mintedTokenCount   = 0;\r\n    uint256 private     maxMintPerWallet   = 7;\r\n   \r\n    string  private     baseURI = 'https://ipfs.io/ipfs/QmUaTJ3LvTr9FGVBDLwEi9nuyJwA2vK2tmVwXQYPbWRw4w/';\r\n\r\naddress private ownerWallet;\r\n\r\n    uint256 private maxReservableTokenCount = 777; //total reserved token for rewards and wages\r\n    uint256 private     totalReserved           = 0;\r\n\r\n    mapping(address => uint256) private walletMintCounts;\r\n    mapping(address => uint256) private walletMintedTokenIds;\r\n\r\n\r\n    constructor() ERC721(\"Lucky Catz\", \"LUCKYCATZ\")   // temporary Symbol and title\r\n    {\r\n        ownerWallet = msg.sender;\r\n    }\r\n     \r\n   \r\nfunction nftTransfer(address to, uint256 tokenId) external\r\n{\r\naddress fromAddr = _msgSender();\r\n\r\n        require(_isApprovedOrOwner(fromAddr, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n       \r\n        _transfer(fromAddr, to, tokenId);\r\n\r\n        require(isERC721ReceivedCheck(fromAddr, to, tokenId, \"\"), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n}\r\n\r\n\r\nfunction    isERC721ReceivedCheck(address from,address to,uint256 tokenId,bytes memory _data) private returns (bool)\r\n{\r\n        if (to.isContract())\r\n        {\r\n            try\r\n           \r\n                IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n           \r\n            returns (bytes4 retval)\r\n            {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            }\r\n            catch (bytes memory reason)\r\n            {\r\n                if (reason.length==0)\r\n                {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                }\r\n                else\r\n                {\r\n                    assembly { revert(add(32, reason), mload(reason)) }     //// solhint-disable-next-line no-inline-assembly\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n}\r\n\r\n\r\n    function    setBaseTokenURI(string memory newUri) external onlyOwner\r\n    {\r\n        baseURI = newUri;\r\n    }\r\n   \r\n   \r\n    function    addAvailableTokens(uint256 extraAmount) external onlyOwner\r\n    {\r\n        totalTokens += extraAmount;\r\n    }\r\n   \r\n   \r\n    function    setSalesDate(uint256 newSalesDate) external onlyOwner\r\n    {\r\n        salesDate = newSalesDate;\r\n    }\r\n   \r\n   \r\n    function    baseTokenURI() external view returns (string memory)\r\n    {\r\n        return baseURI;\r\n    }\r\n   \r\n   \r\n    function    getAvailableTokens() external view returns (uint256)\r\n    {\r\n        return leftTokenCount;\r\n    }\r\n   \r\n   \r\n    function    getSalesPrice() external view returns (uint256)\r\n    {\r\n        return salesPrice;\r\n    }\r\n\r\n\r\n    function    setSalesPrice(uint256 newSalesPrice) external onlyOwner\r\n    {\r\n        salesPrice = newSalesPrice;\r\n    }\r\n\r\n\r\n    function    setmaxMintPerWallet(uint256 newMaxCount) external\r\n    {\r\n        uint256 lastMaxCount = maxMintPerWallet;\r\n       \r\n        maxMintPerWallet = newMaxCount;\r\n       \r\n        emit onMaxMintPerWallet(lastMaxCount, maxMintPerWallet);\r\n    }\r\n\r\n\r\n    function    _baseURI() internal view virtual override returns (string memory)\r\n    {\r\n        return baseURI;\r\n    }\r\n\r\n\r\n    function    getTokenIdsByWallet(address walletAddress) external view returns(uint256[] memory)\r\n    {\r\n        require(walletAddress!=address(0), \"BlackHole wallet is not a real owner\");\r\n       \r\n        uint256          count  = balanceOf(walletAddress);\r\n        uint256[] memory result = new uint256[](count);\r\n       \r\n        for (uint256 i=0; i<count; i++)\r\n        {\r\n            result[i] = tokenOfOwnerByIndex(walletAddress, i);\r\n        }\r\n       \r\n        return result;\r\n    }\r\n   \r\n\r\nfunction    setMaxReserve(uint256 newAmount) external onlyOwner\r\n    {\r\n        maxReservableTokenCount = newAmount;\r\n    }\r\n\r\n\r\n    function    reserveSomeTokens(uint256 amount)  external onlyOwner\r\n    {\r\n        require(amount         <= 200,                              \"Reserve is limited to 200 per call at max\");\r\n        require(leftTokenCount >= amount,                    \"Not enough tokens left to reserve anymore\");\r\n        //require(totalReserved+amount <= maxReservableTokenCount,  \"Too many to reserve. Reduce the amount\");\r\n       \r\n        for (uint256 i=0; i < amount; i++)\r\n        {\r\n    totalReserved++;\r\n            walletMintCounts[msg.sender]++;\r\n            mintedTokenCount++;\r\n            leftTokenCount--;\r\n           \r\n            _mint(msg.sender, mintedTokenCount);\r\n        }\r\n    }\r\n   \r\n   \r\n    function    mint() external payable callerIsUser\r\n    {\r\n        require(msg.value      >= salesPrice,         \"Send exact Amount to claim your Nft\");\r\n        require(leftTokenCount >  0,                  \"No tokens left to be claimed\");\r\n\r\n        walletMintCounts[msg.sender]++;\r\n        mintedTokenCount++;\r\n        leftTokenCount--;\r\n\r\n        _mint(msg.sender, mintedTokenCount);\r\n    }\r\n\r\n\r\n    function    batchMint(uint256 quantity) external payable callerIsUser\r\n    {\r\n        require(msg.value     >= salesPrice * quantity,   \"Send exact Amount to claim your Nfts\");\r\n        require(leftTokenCount>= quantity,                \"No tokens left to be claimed\");\r\n\r\n        for (uint256 i=0; i < quantity; i++)\r\n        {\r\n            walletMintCounts[msg.sender]++;\r\n            mintedTokenCount++;\r\n            leftTokenCount--;\r\n\r\n            _mint(msg.sender, mintedTokenCount);\r\n        }\r\n    }\r\n\r\n    function    withdraw() external onlyOwner\r\n    {\r\n        address  fromAddr = address(this);\r\n        uint256  balance  = fromAddr.balance;\r\n       \r\n        payable(ownerWallet).transfer(fromAddr.balance);\r\n\r\n        emit onWidthdrawal(fromAddr, ownerWallet, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxCount\",\"type\":\"uint256\"}],\"name\":\"onMaxMintPerWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWidthdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extraAmount\",\"type\":\"uint256\"}],\"name\":\"addAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSalesPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getTokenIdsByWallet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nftTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reserveSomeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSalesDate\",\"type\":\"uint256\"}],\"name\":\"setSalesDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSalesPrice\",\"type\":\"uint256\"}],\"name\":\"setSalesPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxCount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LuckyCatz", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://85e51b8dfd14bf39a8151388d05cc40c6ab0c3805c80f29305567d57fbb4653f"}