{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function WETH() external pure returns (address);\r\n\r\n    function factory() external view returns (address);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event AdminTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    \r\n    function admin() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(admin() == _msgSender(), \"!owner\");\r\n        _;\r\n    }\r\n\r\n   \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n   \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit AdminTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n   \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    \r\n    function name() external view returns (string memory);\r\n\r\n    \r\n    function symbol() external view returns (string memory);\r\n\r\n    \r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n   \r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n   \r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n   \r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n   \r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _changeMetadata(\r\n        string memory name_,\r\n        string memory symbol_\r\n    ) internal {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (amount == 0) return;\r\n        \r\n        require(from != address(0), \"FZA\");\r\n        require(to != address(0), \"TZA\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"exceeds\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n  \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"TZA\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n   \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"FZA\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"exceeds\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"FZA\");\r\n        require(spender != address(0), \"TZA\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract ERC20UserStatus is ERC20, Ownable {\r\n    mapping(address => bool) public userStatus;\r\n\r\n    \r\n    function setUserStatus(address address_, bool status_) external onlyOwner {\r\n        userStatus[address_] = status_;\r\n    }\r\n\r\n    \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        require(!userStatus[from] && !userStatus[to], \"blacklisted\");\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n}\r\n\r\nabstract contract ERC20TaxHandler is ERC20, Ownable {\r\n   \r\n    error OverMaxBasisPoints();\r\n\r\n    \r\n    struct TokenConfiguration {\r\n        address treasury;\r\n        uint16 transferFeesBPs;\r\n        uint16 buyFeesBPs;\r\n        uint16 sellFeesBPs;\r\n    }\r\n\r\n   \r\n    TokenConfiguration internal tokenConfiguration;\r\n\r\n    \r\n    mapping(address => uint256) internal addressConfiguration;\r\n\r\n   \r\n    uint256 public constant MAX_FEES = 10_000;\r\n\r\n    \r\n    uint256 public constant FEE_RATE_DENOMINATOR = 10_000;\r\n\r\n    \r\n    constructor(uint16 _transferFee, uint16 _buyFee, uint16 _sellFee) {\r\n        if (\r\n            _transferFee > MAX_FEES || _buyFee > MAX_FEES || _sellFee > MAX_FEES\r\n        ) {\r\n            revert OverMaxBasisPoints();\r\n        }\r\n\r\n        tokenConfiguration = TokenConfiguration({\r\n            treasury: msg.sender,\r\n            transferFeesBPs: _transferFee,\r\n            buyFeesBPs: _buyFee,\r\n            sellFeesBPs: _sellFee\r\n        });\r\n    }\r\n\r\n  \r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        tokenConfiguration.treasury = _treasury;\r\n    }\r\n\r\n    \r\n    function setTransferFeesBPs(uint16 fees) external onlyOwner {\r\n        if (fees > MAX_FEES) {\r\n            revert OverMaxBasisPoints();\r\n        }\r\n        tokenConfiguration.transferFeesBPs = fees;\r\n    }\r\n\r\n    \r\n    function setBuyFeesBPs(uint16 fees) external onlyOwner {\r\n        if (fees > MAX_FEES) {\r\n            revert OverMaxBasisPoints();\r\n        }\r\n        tokenConfiguration.buyFeesBPs = fees;\r\n    }\r\n\r\n   \r\n    function setSellFeesBPs(uint16 fees) external onlyOwner {\r\n        if (fees > MAX_FEES) {\r\n            revert OverMaxBasisPoints();\r\n        }\r\n        tokenConfiguration.sellFeesBPs = fees;\r\n    }\r\n\r\n    \r\n    function feeWL(address _address, bool _status) external onlyOwner {\r\n        uint256 packed = addressConfiguration[_address];\r\n        addressConfiguration[_address] = _packBoolean(packed, 0, _status);\r\n    }\r\n\r\n   \r\n    function liquidityPairList(\r\n        address _address,\r\n        bool _status\r\n    ) external onlyOwner {\r\n        uint256 packed = addressConfiguration[_address];\r\n        addressConfiguration[_address] = _packBoolean(packed, 1, _status);\r\n    }\r\n\r\n   \r\n    function treasury() public view returns (address) {\r\n        return tokenConfiguration.treasury;\r\n    }\r\n\r\n   \r\n    function transferFeesBPs() public view returns (uint256) {\r\n        return tokenConfiguration.transferFeesBPs;\r\n    }\r\n\r\n   \r\n    function buyFeesBPs() public view returns (uint256) {\r\n        return tokenConfiguration.buyFeesBPs;\r\n    }\r\n\r\n    \r\n    function sellFeesBPs() public view returns (uint256) {\r\n        return tokenConfiguration.sellFeesBPs;\r\n    }\r\n\r\n  \r\n    function getFeeRate(\r\n        address from,\r\n        address to\r\n    ) public view returns (uint256) {\r\n        uint256 fromConfiguration = addressConfiguration[from];\r\n\r\n       \r\n        if (_unpackBoolean(fromConfiguration, 0)) return 0;\r\n\r\n        uint256 toConfiguration = addressConfiguration[to];\r\n\r\n        if (_unpackBoolean(toConfiguration, 0)) return 0;\r\n\r\n        TokenConfiguration memory configuration = tokenConfiguration;\r\n\r\n       \r\n        if (_unpackBoolean(fromConfiguration, 1))\r\n            return configuration.buyFeesBPs;\r\n\r\n        if (_unpackBoolean(toConfiguration, 1))\r\n            return configuration.sellFeesBPs;\r\n\r\n    \r\n        return configuration.transferFeesBPs;\r\n    }\r\n\r\n    \r\n    function isFeeWhitelisted(address account) public view returns (bool) {\r\n        return _unpackBoolean(addressConfiguration[account], 0);\r\n    }\r\n\r\n    \r\n    function isLiquidityPair(address account) public view returns (bool) {\r\n        return _unpackBoolean(addressConfiguration[account], 1);\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        uint256 fromConfiguration = addressConfiguration[from];\r\n\r\n        \r\n        if (_unpackBoolean(fromConfiguration, 0)) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 toConfiguration = addressConfiguration[to];\r\n\r\n        \r\n        if (_unpackBoolean(toConfiguration, 0)) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 fee;\r\n        TokenConfiguration memory configuration = tokenConfiguration;\r\n\r\n       \r\n        if (_unpackBoolean(fromConfiguration, 1)) {\r\n            unchecked {\r\n                fee =\r\n                    (amount * configuration.buyFeesBPs) /\r\n                    FEE_RATE_DENOMINATOR;\r\n            }\r\n        }\r\n        \r\n        else if (_unpackBoolean(toConfiguration, 1)) {\r\n            unchecked {\r\n                fee =\r\n                    (amount * configuration.sellFeesBPs) /\r\n                    FEE_RATE_DENOMINATOR;\r\n            }\r\n        }\r\n        \r\n        else {\r\n            unchecked {\r\n                fee =\r\n                    (amount * configuration.transferFeesBPs) /\r\n                    FEE_RATE_DENOMINATOR;\r\n            }\r\n        }\r\n\r\n        uint256 amountAfterFee;\r\n        unchecked {\r\n            amountAfterFee = amount - fee;\r\n        }\r\n\r\n        super._transfer(from, to, amountAfterFee);\r\n        super._transfer(from, configuration.treasury, fee);\r\n    }\r\n\r\n    function _packBoolean(\r\n        uint256 source,\r\n        uint256 index,\r\n        bool value\r\n    ) internal pure returns (uint256) {\r\n        if (value) {\r\n            return source | (1 << index);\r\n        } else {\r\n            return source & ~(1 << index);\r\n        }\r\n    }\r\n\r\n    function _unpackBoolean(\r\n        uint256 source,\r\n        uint256 index\r\n    ) internal pure returns (bool) {\r\n        // return (source >> index) & 1 == 1;\r\n        return source & (1 << index) > 0;\r\n    }\r\n}\r\n\r\ncontract GorkGun is ERC20, ERC20UserStatus, ERC20TaxHandler {\r\n    error Disable();\r\n\r\n    bool private _tradingEnable;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _supply\r\n    ) ERC20(_name, _symbol) ERC20TaxHandler(0, 0, 0) {\r\n        addressConfiguration[msg.sender] = _packBoolean(0, 0, true);\r\n        _mint(msg.sender, _supply * 10 ** 18);\r\n        _setUp();\r\n    }\r\n\r\n    function changeMetadata(\r\n        string memory name_,\r\n        string memory symbol_\r\n    ) external onlyOwner {\r\n        _changeMetadata(name_, symbol_);\r\n    }\r\n\r\n    function setTrade(bool status) external onlyOwner {\r\n        _tradingEnable = status;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20, ERC20TaxHandler) {\r\n        ERC20TaxHandler._transfer(from, to, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20, ERC20UserStatus) {\r\n        if (\r\n            !_tradingEnable &&\r\n            !isFeeWhitelisted(from) &&\r\n            !isFeeWhitelisted(to) &&\r\n            !isFeeWhitelisted(msg.sender)\r\n        ) revert Disable();\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _setUp() internal {\r\n        IUniswapV2Router01 uniswapV2Router = IUniswapV2Router01(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        address uniswapV2Pair = _computePairAddress(\r\n            uniswapV2Router.factory(),\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n\r\n        uint256 packed = addressConfiguration[uniswapV2Pair];\r\n        addressConfiguration[uniswapV2Pair] = _packBoolean(packed, 1, true);\r\n    }\r\n\r\n    // compute Uniswap pair address and whitelist it\r\n    function _computePairAddress(\r\n        address factory,\r\n        address token0,\r\n        address token1\r\n    ) internal pure returns (address) {\r\n        if (token0 > token1) (token0, token1) = (token1, token0);\r\n\r\n        return\r\n            address(\r\n                uint160(\r\n                    uint256(\r\n                        keccak256(\r\n                            abi.encodePacked(\r\n                                bytes1(0xff),\r\n                                factory,\r\n                                keccak256(abi.encodePacked(token0, token1)),\r\n                                bytes32(\r\n                                    0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\r\n                                )\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Disable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverMaxBasisPoints\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeesBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"changeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"feeWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidityPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"liquidityPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeesBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fees\",\"type\":\"uint16\"}],\"name\":\"setBuyFeesBPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fees\",\"type\":\"uint16\"}],\"name\":\"setSellFeesBPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fees\",\"type\":\"uint16\"}],\"name\":\"setTransferFeesBPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setUserStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeesBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GorkGun", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000008476f726b2047756e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004474f524b00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2c9aa41ac505e5ec04252b93676f766dcbf5cf52656f05c815fc98bb7e59d172"}