{"SourceCode": "/*\r\n\r\nTHE SYNDICATE | A BLACK MARKET PROJECT\r\n\r\nToken Name: THE SYNDICATE    ($NWO)\r\nChain: Ethereum\r\n\r\nBuy Tax: 6.0%\r\nSell Tax: 6.0%\r\n\r\nWebsite: https://thesyndicate.info/\r\nTelegram: https://t.me/SYNDICATE_NWO\r\nTwitter: https://twitter.com/SYNDICATE_NWO\r\nFacebook: https://www.facebook.com/The-Syndicate-106869828700402\r\nDiscord: https://discord.gg/z4Us9jyxn9\r\nMedium: https://medium.com/@SYNDICATE_NWO\r\nReddit: https://www.reddit.com/r/SYNDICATE_NWO/\r\n\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract THESYNDICATE is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping (address => uint) private cooldown;\r\n    uint256 private constant _tTotal = 100000000 * 10**9;\r\n    \r\n    uint256 private _buyMarketingFee = 5;\r\n    uint256 private _previousBuyMarketingFee = _buyMarketingFee;\r\n    uint256 private _buyLiquidityFee = 1;\r\n    uint256 private _previousBuyLiquidityFee = _buyLiquidityFee;\r\n    uint256 private _buyRewardFee = 0;\r\n    uint256 private _previousBuyRewardFee = _buyRewardFee;\r\n    \r\n    uint256 private _sellMarketingFee = 5;\r\n    uint256 private _previousSellMarketingFee = _sellMarketingFee;\r\n    uint256 private _sellLiquidityFee = 1;\r\n    uint256 private _previousSellLiquidityFee = _sellLiquidityFee;\r\n    uint256 private _sellRewardFee = 0;\r\n    uint256 private _previousSellRewardFee = _sellRewardFee;\r\n\r\n    uint256 private tokensForReward;\r\n    uint256 private tokensForMarketing;\r\n    uint256 private tokensForLiquidity;\r\n\r\n    address payable private _rewardWallet;\r\n    address payable private _MarketingWallet;\r\n    address payable private _liquidityWallet;\r\n    \r\n    string private constant _name = \"THE SYNDICATE\";\r\n    string private constant _symbol = \"$NWO\";\r\n    uint8 private constant _decimals = 9;\r\n    \r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private swapping;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private cooldownEnabled = false;\r\n    uint256 private tradingActiveBlock = 0; // 0 means trading is not active\r\n    uint256 private blocksToBlacklist = 10;\r\n    uint256 private _maxBuyAmount = _tTotal;\r\n    uint256 private _maxSellAmount = _tTotal;\r\n    uint256 private _maxWalletAmount = _tTotal;\r\n    uint256 private swapTokensAtAmount = 0;\r\n    \r\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\r\n    event MaxSellAmountUpdated(uint _maxSellAmount);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor () {\r\n        _MarketingWallet = payable(0x7A13A6E784b5a4219d3551D6cdE85b7b6a1D6143);\r\n        _liquidityWallet = payable(0x4CE471ddf977c5b037099862fACd16d493DE7869);\r\n        _rewardWallet = payable(0x4CE471ddf977c5b037099862fACd16d493DE7869);\r\n        _rOwned[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_MarketingWallet] = true;\r\n        _isExcludedFromFee[_liquidityWallet] = true;\r\n        _isExcludedFromFee[_rewardWallet] = true;\r\n        emit Transfer(address(0x4CE471ddf977c5b037099862fACd16d493DE7869), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\r\n        cooldownEnabled = onoff;\r\n    }\r\n\r\n    function setSwapEnabled(bool onoff) external onlyOwner(){\r\n        swapEnabled = onoff;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool takeFee = false;\r\n        bool shouldSwap = false;\r\n        if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            takeFee = true;\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] && cooldownEnabled) {\r\n                require(amount <= _maxBuyAmount, \"Transfer amount exceeds the maxBuyAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletAmount, \"Exceeds maximum wallet token amount.\");\r\n                require(cooldown[to] < block.timestamp);\r\n                cooldown[to] = block.timestamp + (30 seconds);\r\n            }\r\n            \r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router) && !_isExcludedFromFee[from] && cooldownEnabled) {\r\n                require(amount <= _maxSellAmount, \"Transfer amount exceeds the maxSellAmount.\");\r\n                shouldSwap = true;\r\n            }\r\n        }\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = (contractTokenBalance > swapTokensAtAmount) && shouldSwap;\r\n\r\n        if (canSwap && swapEnabled && !swapping && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n\r\n        _tokenTransfer(from,to,amount,takeFee, shouldSwap);\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForReward + tokensForMarketing;\r\n        bool success;\r\n        \r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n        if(contractBalance > swapTokensAtAmount * 10) {\r\n            contractBalance = swapTokensAtAmount * 10;\r\n        }\r\n        \r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n        \r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH); \r\n        \r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n        \r\n        uint256 ethForReward = ethBalance.mul(tokensForReward).div(totalTokensToSwap);\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\r\n        \r\n        \r\n        uint256 ethForLiquidity = ethBalance - ethForReward - ethForMarketing;\r\n        \r\n        \r\n        tokensForLiquidity = 0;\r\n        tokensForReward = 0;\r\n        tokensForMarketing = 0;\r\n        \r\n        (success,) = address(_rewardWallet).call{value: ethForReward}(\"\");\r\n        \r\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\r\n        }\r\n        \r\n        \r\n        (success,) = address(_MarketingWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendETHToFee(uint256 amount) private {\r\n        _MarketingWallet.transfer(amount);\r\n    }\r\n    \r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        swapEnabled = true;\r\n        cooldownEnabled = true;\r\n        _maxBuyAmount = 1000000 * 10**9;\r\n        _maxSellAmount = 1000000 * 10**9;\r\n        _maxWalletAmount = 2000000 * 10**9;\r\n        swapTokensAtAmount = 500000 * 10**9;\r\n        tradingOpen = true;\r\n        tradingActiveBlock = block.number;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n    \r\n    function setBots(address[] memory bots_) public onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setMaxBuyAmount(uint256 maxBuy) public onlyOwner {\r\n        _maxBuyAmount = maxBuy;\r\n    }\r\n\r\n    function setMaxSellAmount(uint256 maxSell) public onlyOwner {\r\n        _maxSellAmount = maxSell;\r\n    }\r\n    \r\n    function setMaxWalletAmount(uint256 maxToken) public onlyOwner {\r\n        _maxWalletAmount = maxToken;\r\n    }\r\n    \r\n    function setSwapTokensAtAmount(uint256 newAmount) public onlyOwner {\r\n        require(newAmount >= 50000 * 10**9, \"Swap amount cannot be lower than 0.1% total supply.\");\r\n        require(newAmount <= 1000001 * 10**9, \"Swap amount cannot be higher than 1.0% total supply.\");\r\n        swapTokensAtAmount = newAmount;\r\n    }\r\n\r\n    function setMarketingWallet(address MarketingWallet) public onlyOwner() {\r\n        require(MarketingWallet != address(0), \"MarketingWallet address cannot be 0\");\r\n        _isExcludedFromFee[_MarketingWallet] = false;\r\n        _MarketingWallet = payable(MarketingWallet);\r\n        _isExcludedFromFee[_MarketingWallet] = true;\r\n    }\r\n\r\n    function setRewardWallet(address rewardWallet) public onlyOwner() {\r\n        require(rewardWallet != address(0), \"rewardWallet address cannot be 0\");\r\n        _isExcludedFromFee[_rewardWallet] = false;\r\n        _rewardWallet = payable(rewardWallet);\r\n        _isExcludedFromFee[_rewardWallet] = true;\r\n    }\r\n\r\n    function setLiquidityWallet(address liquidityWallet) public onlyOwner() {\r\n        require(liquidityWallet != address(0), \"liquidityWallet address cannot be 0\");\r\n        _isExcludedFromFee[_liquidityWallet] = false;\r\n        _liquidityWallet = payable(liquidityWallet);\r\n        _isExcludedFromFee[_liquidityWallet] = true;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setBuyFee(uint256 buyMarketingFee, uint256 buyLiquidityFee, uint256 buyRewardFee) external onlyOwner {\r\n        require(buyMarketingFee + buyLiquidityFee + buyRewardFee <= 30, \"Must keep buy taxes below 30%\");\r\n        _buyMarketingFee = buyMarketingFee;\r\n        _buyLiquidityFee = buyLiquidityFee;\r\n        _buyRewardFee = buyRewardFee;\r\n    }\r\n\r\n    function setSellFee(uint256 sellMarketingFee, uint256 sellLiquidityFee, uint256 sellRewardFee) external onlyOwner {\r\n        require(sellMarketingFee + sellLiquidityFee + sellRewardFee <= 60, \"Must keep sell taxes below 60%\");\r\n        _sellMarketingFee = sellMarketingFee;\r\n        _sellLiquidityFee = sellLiquidityFee;\r\n        _sellRewardFee = sellRewardFee;\r\n    }\r\n\r\n    function setBlocksToBlacklist(uint256 blocks) public onlyOwner {\r\n        blocksToBlacklist = blocks;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if(_buyMarketingFee == 0 && _buyLiquidityFee == 0 && _buyRewardFee == 0 && _sellMarketingFee == 0 && _sellLiquidityFee == 0 && _sellRewardFee == 0) return;\r\n        \r\n        _previousBuyMarketingFee = _buyMarketingFee;\r\n        _previousBuyLiquidityFee = _buyLiquidityFee;\r\n        _previousBuyRewardFee = _buyRewardFee;\r\n        _previousSellMarketingFee = _sellMarketingFee;\r\n        _previousSellLiquidityFee = _sellLiquidityFee;\r\n        _previousSellRewardFee = _sellRewardFee;\r\n        \r\n        _buyMarketingFee = 0;\r\n        _buyLiquidityFee = 0;\r\n        _buyRewardFee = 0;\r\n        _sellMarketingFee = 0;\r\n        _sellLiquidityFee = 0;\r\n        _sellRewardFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _buyMarketingFee = _previousBuyMarketingFee;\r\n        _buyLiquidityFee = _previousBuyLiquidityFee;\r\n        _buyRewardFee = _previousBuyRewardFee;\r\n        _sellMarketingFee = _previousSellMarketingFee;\r\n        _sellLiquidityFee = _previousSellLiquidityFee;\r\n        _sellRewardFee = _previousSellRewardFee;\r\n    }\r\n    \r\n    function delBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n        \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, bool isSell) private {\r\n        if(!takeFee) {\r\n            removeAllFee();\r\n        } else {\r\n            amount = _takeFees(sender, amount, isSell);\r\n        }\r\n\r\n        _transferStandard(sender, recipient, amount);\r\n        \r\n        if(!takeFee) {\r\n            restoreAllFee();\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        _rOwned[sender] = _rOwned[sender].sub(tAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _takeFees(address sender, uint256 amount, bool isSell) private returns (uint256) {\r\n        uint256 _totalFees;\r\n        uint256 MarketingFee;\r\n        uint256 liqFee;\r\n        uint256 rwrdFee;\r\n        if(tradingActiveBlock + blocksToBlacklist >= block.number){\r\n            _totalFees = 99;\r\n            liqFee = 92;\r\n        } else {\r\n            _totalFees = _getTotalFees(isSell);\r\n            if (isSell) {\r\n                MarketingFee = _sellMarketingFee;\r\n                liqFee = _sellLiquidityFee;\r\n                rwrdFee = _sellRewardFee;\r\n            } else {\r\n                MarketingFee = _buyMarketingFee;\r\n                liqFee = _buyLiquidityFee;\r\n                rwrdFee = _buyRewardFee;\r\n            }\r\n        }\r\n\r\n        uint256 fees = amount.mul(_totalFees).div(100);\r\n        tokensForReward += fees * rwrdFee / _totalFees;\r\n        tokensForMarketing += fees * MarketingFee / _totalFees;\r\n        tokensForLiquidity += fees * liqFee / _totalFees;\r\n            \r\n        if(fees > 0) {\r\n            _transferStandard(sender, address(this), fees);\r\n        }\r\n            \r\n        return amount -= fees;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function manualswap() public onlyOwner() {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() public onlyOwner() {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        require(!tradingOpen, \"Can only withdraw if trading hasn't started\");\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function _getTotalFees(bool isSell) private view returns(uint256) {\r\n        if (isSell) {\r\n            return _sellMarketingFee + _sellLiquidityFee + _sellRewardFee;\r\n        }\r\n        return _buyMarketingFee + _buyLiquidityFee + _buyRewardFee;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"MaxSellAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocksToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyRewardFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxToken\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"}],\"name\":\"setRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRewardFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "THESYNDICATE", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://94a27bd47d81c1e7a11b96ff45d666f878ca2f562055337a32f968bd99f1b814"}