{"SourceCode": "pragma solidity 0.5.16; /*\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n\r\n\r\n\r\n\r\n\u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\r\n\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557    \u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\r\n\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d       \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\r\n\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d   \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u255d        \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\r\n\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d \u2588\u2588\u2557\u2588\u2588\u2551            \u2588\u2588\u2551   \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\r\n\u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d            \u255a\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\r\n                                                                                   \r\n\r\n\r\n                                                                             \r\n\r\n\r\n=== 'MEXP' Token contract with following features ===\r\n    => TRC20 Compliance\r\n    => Higher degree of control by owner - safeguard functionality\r\n    => SafeMath implementation \r\n    => Burnable and minting ( For MOJI Players)\r\n\r\n\r\n======================= Quick Stats ===================\r\n    => Name        : \"MOJI Experience Points\"\r\n    => Symbol      : MEXP\r\n    => Total supply: 0 (Minted only by MOJI players only)\r\n    => Decimals    : 18\r\n*/\r\n\r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n/**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n    }\r\n}\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address payable public owner;\r\n    address payable private newOwner;\r\n\r\n    /**\r\n        Signer is deligated admin wallet, which can do sub-owner functions.\r\n        Signer calls following four functions:\r\n            => claimOwnerTokens\r\n            => distributeMainDividend\r\n            => distributeLeaders1\r\n            => distributeLeaders2\r\n    */\r\n    address public signer;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        signer = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlySigner {\r\n        require(msg.sender == signer);\r\n        _;\r\n    }\r\n\r\n    function changeSigner(address _signer) public onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n//**************************************************************************//\r\n//-------------------    NIFTYMOJI CONTRACT INTERFACE    --------------------//\r\n//**************************************************************************//\r\n\r\ninterface niftyMoji \r\n{\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function powerNLucks(uint256 tokenID) external view returns(uint256, uint256);\r\n    function totalSupply() external view returns(uint256);\r\n} \r\n    \r\n\r\n    \r\n//****************************************************************************//\r\n//---------------------    MEXP MAIN CODE STARTS HERE   ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract MEXPToken is owned {\r\n\r\n    /*===============================\r\n    =         DATA STORAGE          =\r\n    ===============================*/\r\n\r\n    // Public variables of the token\r\n    using SafeMath for uint256;\r\n    uint256 public withdrawnByAdmin; \r\n    string public constant name = \"MOJI Experience Points\";\r\n    string public constant symbol = \"MEXP\";\r\n    uint256 public constant decimals = 18; \r\n    uint256 public totalSupply;\r\n    uint256 public burnTracker;     //mainly used in mintToken function..\r\n    uint256 public mintingMultiplier=10000;  // 10000 = 1, 123 = 0.0123 admin can set it minting per day, will be factored as luck %\r\n    address public niftyMojiContractAddress = 0xde544E54a330Abd1eA8a0E6693D46BFe95D9A684;  // admin can set / change this address \r\n    uint256 public battleFees=1;  // default is 0.000000000000000001 Ether for battle fees, which admin can change\r\n    uint256 public mintTokenFee = 0.001 ether;\r\n    uint256 public battleWinReward= 10**18; // = 1 token with 18 decimal places, admin can change\r\n    uint256 public battleLooseReward = 10**17; // = 0.1 token with 10 decimal places, admin can change\r\n    uint256 public maxBattlePerDay=10;  //daily 10 max battles\r\n    bool public globalHalt; // Emergency Break\r\n    uint256 public lastFinishedIndex;\r\n\r\n    // This creates a mapping with all data storage\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping(uint256 => uint256) public totalMintedForTokenId;\r\n    mapping(uint256 => uint256) public totalMintedByOwnerForTokenID;\r\n    mapping(uint256 => uint256) public totalMintedByUserForTokenID;\r\n    mapping(uint256 => uint256) public totalMintedByBattleForTokenID;\r\n    mapping(uint256 => uint256) public dayTracker;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    mapping(address => uint256) public BattleCountEndTime;\r\n    mapping (address => uint256) public userBattleCount;\r\n    mapping(address => bool) public blackListedUser;\r\n    mapping(uint256 => bool) public blackListedToken;\r\n    \r\n\r\n\r\n    struct battleInfo\r\n    {\r\n        uint256 tokenID;\r\n        uint256 userSeed;\r\n        uint256 rewardAmount;\r\n        uint256 blockNo;\r\n        uint256 opponentTokenID;\r\n    }\r\n\r\n    battleInfo[] public battleInfos;\r\n\r\n    /*===============================\r\n    =         PUBLIC EVENTS         =\r\n    ===============================*/\r\n\r\n    // This generates a public event of token transfer\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed indexed from, uint256 value);\r\n\r\n    // This trackes approvals\r\n    event Approval(address indexed owner, address indexed spender, uint256 value );\r\n\r\n    /*======================================\r\n    =       STANDARD TRC20 FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        \r\n        //checking conditions\r\n        require(!globalHalt, \"paused by admin\");\r\n        require (_to != address(0x0));                      // Prevent transfer to 0x0 address. Use burn() instead      \r\n        // overflow and undeflow checked by SafeMath Library\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient       \r\n        // emit Transfer event\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens\r\n        *\r\n        * Send `_value` tokens to `_to` from your account\r\n        *\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(!blackListedUser[msg.sender], \"you are not allowed\");\r\n        //no need to check for input validations, as that is ruled by SafeMath\r\n        _transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens from other address\r\n        *\r\n        * Send `_value` tokens to `_to` in behalf of `_from`\r\n        *\r\n        * @param _from The address of the sender\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(!blackListedUser[msg.sender], \"you are not allowed\");\r\n        //require(_value <= allowance[_from][msg.sender]);     // no need for this condition as it is already checked by SafeMath below\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Set allowance for other address\r\n        *\r\n        * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n        *\r\n        * @param _spender The address authorized to spend\r\n        * @param _value the max amount they can spend\r\n        */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!blackListedUser[msg.sender], \"you are not allowed\");\r\n        require(!globalHalt, \"paused by admin\");\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /*=====================================\r\n    =       CUSTOM PUBLIC FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    /**\r\n        Constructor function\r\n    */\r\n    constructor() public \r\n    {\r\n        battleInfo memory temp;\r\n        battleInfos.push(temp);\r\n        \r\n    }\r\n\r\n    /**\r\n        * Fallback function. It just accepts incoming Ether\r\n    */\r\n    function () payable external {}\r\n    \r\n\r\n    /**\r\n        * Destroy tokens\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly\r\n        *\r\n        * @param _value the amount of money to burn\r\n        */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n\r\n        require(!globalHalt, \"paused by admin\");\r\n        require(!blackListedUser[msg.sender], \"you are not allowed\");\r\n        //checking of enough token balance is done by SafeMath\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        burnTracker = burnTracker.add(_value);\r\n        \r\n        emit Transfer(msg.sender, address(0), _value);\r\n        //althogh we can track all the \"burn\" from the Transfer function, we just kept it as it is. As that is no much harm\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Destroy tokens from other account\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n        *\r\n        * @param _from the address of the sender\r\n        * @param _value the amount of money to burn\r\n        */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n        require(!globalHalt, \"paused by admin\");\r\n        require(!blackListedUser[msg.sender], \"you are not allowed\");\r\n        //checking of allowance and token value is done by SafeMath\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);                                   // Update totalSupply\r\n        burnTracker = burnTracker.add(_value);\r\n        \r\n        emit Transfer(_from, address(0), _value);\r\n        emit  Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function mintTokenOwnerOnly(address user, uint256 _tokenID, uint256 tokenAmount) public onlyOwner returns(bool)\r\n    {\r\n        require(user != address(this) && user != address(0), \"invalid address\" );\r\n        require(tokenAmount > 0 , \"Invalid token to mint\");\r\n        require(!blackListedToken[_tokenID], \"this token is blacklisted\");\r\n        if(_tokenID != 0)\r\n        {\r\n            require(niftyMoji(niftyMojiContractAddress).ownerOf(_tokenID) == user,\"user is not the owner of this tokenID\");\r\n            totalMintedForTokenId[_tokenID] = totalMintedForTokenId[_tokenID].add(tokenAmount);\r\n            totalMintedByOwnerForTokenID[_tokenID] = totalMintedByOwnerForTokenID[_tokenID].add(tokenAmount);\r\n        }\r\n        totalSupply = totalSupply.add(tokenAmount);\r\n        balanceOf[user] = balanceOf[user].add(tokenAmount);\r\n        //emitting Transfer event\r\n        emit Transfer(address(0),user,tokenAmount);\r\n        return true;\r\n    }       \r\n\r\n\r\n    function blackListUser(address user) public onlyOwner returns(bool)\r\n    {\r\n        blackListedUser[user] = true;\r\n        return true;\r\n    }\r\n\r\n\r\n    function removeUserFromBlackList(address user) public onlyOwner returns(bool)\r\n    {\r\n        blackListedUser[user] = false;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    function blackListToken(uint256 _tokenID) public onlyOwner returns(bool)\r\n    {\r\n        blackListedToken[_tokenID] = true;\r\n        return true;\r\n    }\r\n\r\n\r\n    function removeTokenFromBlackList(uint256 _tokenID) public onlyOwner returns(bool)\r\n    {\r\n        blackListedToken[_tokenID] = false;\r\n        return true;\r\n    }\r\n\r\n    //Minting according to luck percent of the given token id \r\n    function mintToken(uint256 _tokenID)  public payable returns(bool) {\r\n        require(!globalHalt, \"paused by admin\");\r\n        address caller = niftyMoji(niftyMojiContractAddress).ownerOf(_tokenID);\r\n        require(!blackListedUser[caller], \"you are not allowed\");\r\n        require(!blackListedToken[_tokenID], \"this token is blacklisted\");\r\n        require(caller == msg.sender,\"caller is not the owner of this tokenID\");\r\n        require(msg.value >= mintTokenFee, 'Not enough token minting fee');\r\n        uint256 dt = dayTracker[_tokenID];\r\n        if (dt != 0)\r\n        {\r\n            uint256 secPassed  =  now - dt ;\r\n            require(secPassed > 0 , \"already minted for the day\");\r\n            (,uint256 luckPercent ) = niftyMoji(niftyMojiContractAddress).powerNLucks(_tokenID);\r\n            uint256 mintAmount = (( (mintingMultiplier * (10 ** 18) * ((luckPercent + 9 ) / 10 ) ) / 100000 ) /  86400 ) * secPassed ;\r\n            dayTracker[_tokenID] = now ;            \r\n            totalMintedByUserForTokenID[_tokenID] = totalMintedByUserForTokenID[_tokenID].add(mintAmount);\r\n            totalMintedForTokenId[_tokenID] = totalMintedForTokenId[_tokenID].add(mintAmount);\r\n            totalSupply = totalSupply.add(mintAmount);\r\n            balanceOf[caller] = balanceOf[caller].add(mintAmount);\r\n            //emitting Transfer event\r\n            emit Transfer(address(0),caller,mintAmount);\r\n        }\r\n        else\r\n        {\r\n           dayTracker[_tokenID] = now; \r\n        }\r\n        owner.transfer(msg.value);\r\n        return true;\r\n    }\r\n\r\n    function viewAmountIfIMintNow(uint256 _tokenID) public view returns(uint256 amount)\r\n    {\r\n        uint256 dt = dayTracker[_tokenID];\r\n        if (dt != 0)\r\n        {\r\n            uint256 secPassed  =  now - dt ;\r\n            (,uint256 luckPercent ) = niftyMoji(niftyMojiContractAddress).powerNLucks(_tokenID);\r\n            amount = (( (mintingMultiplier * (10 ** 18) * ((luckPercent + 9 ) / 10 ) ) / 100000 ) /  86400 ) * secPassed ;\r\n            return amount;\r\n        }\r\n        else\r\n        {\r\n           return (0);\r\n        }        \r\n    }\r\n\r\n    function setMaxBattlePerDay(uint _maxBattlePerDay) public onlyOwner returns (bool)\r\n    {\r\n        maxBattlePerDay = _maxBattlePerDay;\r\n        return true;\r\n    }\r\n\r\n\r\n    event initiateBattleEv(address caller,uint256 _tokenID,uint256 _userSeed,uint256 battleInfoIndex, uint256 blockNo);\r\n    function initiateBattle(uint256 _tokenID, uint256 _userSeed) public payable returns (uint256 battleID)\r\n    { \r\n        require(!globalHalt, \"paused by admin\");\r\n        require(msg.value == battleFees, \"Invalid fees amount\");\r\n        address caller = niftyMoji(niftyMojiContractAddress).ownerOf(_tokenID);\r\n        require(!blackListedUser[caller], \"you are not allowed\");\r\n        require(!blackListedToken[_tokenID], \"this token is blacklisted\");\r\n        require(caller == msg.sender,\"caller is not the owner of this tokenID\");\r\n        require( userBattleCount[caller] <= maxBattlePerDay, \"enough for the day\");\r\n        if(BattleCountEndTime[caller] >= now )\r\n        {\r\n            userBattleCount[caller] += 1;\r\n        }\r\n        else\r\n        {\r\n            BattleCountEndTime[caller] = now + 86400;\r\n            userBattleCount[caller] = 1;\r\n        }        \r\n        battleInfo memory temp;\r\n        temp.tokenID = _tokenID;\r\n        temp.userSeed = _userSeed;\r\n        temp.blockNo = block.number;\r\n        battleInfos.push(temp);\r\n        //emitting Transfer event\r\n        battleID = battleInfos.length - 1;\r\n        address(owner).transfer(msg.value);\r\n        emit initiateBattleEv(caller, _tokenID, _userSeed, battleID,block.number );   \r\n        return battleID;\r\n    }\r\n\r\n\r\n    event finishBattleEv(address user, uint256 battleInfoIndex, uint256 _tokenID, uint256 randomToken, uint256 mintAmount);\r\n    function finishBattle(uint256 _battleInfoIndex,bytes32 blockHashValue) public onlySigner returns (bool)  // returns winning amount minted\r\n    { \r\n        require(_battleInfoIndex < battleInfos.length, \"Invalid Battle Index\");\r\n        require(battleInfos[_battleInfoIndex].rewardAmount == 0, \"Already finished\");\r\n        uint256 _tokenID = battleInfos[_battleInfoIndex].tokenID;\r\n        uint256 _userSeed = battleInfos[_battleInfoIndex].userSeed;\r\n        address caller = niftyMoji(niftyMojiContractAddress).ownerOf(_tokenID);\r\n        bool success;\r\n        uint256 randomToken;\r\n        address randomTokenUser;\r\n        for(uint256 i=0;i<50;i++)\r\n        {\r\n            randomToken = uint256(keccak256(abi.encodePacked(blockHashValue, _userSeed))) % niftyMoji(niftyMojiContractAddress).totalSupply() + 1;\r\n            randomTokenUser = niftyMoji(niftyMojiContractAddress).ownerOf(_tokenID);\r\n            if(blackListedToken[randomToken] || blackListedUser[randomTokenUser])\r\n            {\r\n                _userSeed += block.number%8;\r\n            }\r\n            else\r\n            {\r\n                success = true;\r\n                break;\r\n            }\r\n        }\r\n        require(success, \"try again\");\r\n        (uint256 powerPercent,uint256 luckPercent ) = niftyMoji(niftyMojiContractAddress).powerNLucks(_tokenID);\r\n        (uint256 powerPercent2,uint256 luckPercent2 ) = niftyMoji(niftyMojiContractAddress).powerNLucks(randomToken); \r\n        uint256 mintAmount;\r\n        if( powerPercent + luckPercent > powerPercent2 + luckPercent2) \r\n        {\r\n            mintAmount = battleWinReward ;           \r\n        } \r\n        else\r\n        {\r\n            mintAmount = battleLooseReward;\r\n        }\r\n        battleInfos[_battleInfoIndex].rewardAmount = mintAmount;\r\n        battleInfos[_battleInfoIndex].opponentTokenID = randomToken;\r\n\r\n        emit finishBattleEv(caller,_battleInfoIndex, _tokenID, randomToken, mintAmount);   \r\n        balanceOf[caller] = balanceOf[caller].add(mintAmount);\r\n        totalSupply = totalSupply.add(mintAmount);\r\n        totalMintedForTokenId[_tokenID] = totalMintedForTokenId[_tokenID].add(mintAmount);\r\n        totalMintedByBattleForTokenID[_tokenID] = totalMintedByBattleForTokenID[_tokenID].add(mintAmount);\r\n        dayTracker[_tokenID] = now;\r\n        lastFinishedIndex = _battleInfoIndex;                       \r\n        emit Transfer(address(0),caller,mintAmount);\r\n        return true;\r\n    }\r\n\r\n    function multipleFinishBattle (bytes32[] memory _blockHashValue) public onlySigner returns(bool)\r\n    {\r\n        uint i;\r\n\r\n        for(i=0;i<_blockHashValue.length;i++)\r\n        {\r\n           require(finishBattle(lastFinishedIndex + i + 1,_blockHashValue[i]),\"could not fihish battle\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function lastUnFinishedIndexNBlock() public view returns (uint256 lastUnFinishedIndex, uint256 blockNo)\r\n    {\r\n        uint len = battleInfos.length-1;\r\n        if(len >  lastFinishedIndex)\r\n        {\r\n            return (lastFinishedIndex +1, battleInfos[lastFinishedIndex +1].blockNo);\r\n        }\r\n        else\r\n        {\r\n            return (0,0);\r\n        }\r\n    }\r\n\r\n\r\n    function setNiftyMojiContractAddress(address _niftyMojiContractAddress) public onlyOwner returns(bool)\r\n    {\r\n        niftyMojiContractAddress = _niftyMojiContractAddress;\r\n        return true;\r\n    }\r\n\r\n\r\n    function setMintingMultiplier(uint256 _mintingMultiplier) public onlyOwner returns (bool)\r\n    {\r\n        mintingMultiplier = _mintingMultiplier;\r\n        return true;\r\n    }\r\n\r\n\r\n    function setbattleFees(uint256 _battleFees) public onlyOwner returns(bool)\r\n    {\r\n        battleFees = _battleFees;\r\n        return true;\r\n    }\r\n    \r\n    function setMintTokenFee(uint256 _mintTokenFee) public onlyOwner returns(bool)\r\n    {\r\n        mintTokenFee = _mintTokenFee;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n\r\n    function setBattleReward(uint256 winReward, uint256 looseReward) public onlyOwner returns(bool)\r\n    {\r\n        battleWinReward = winReward;\r\n        battleLooseReward = looseReward;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * If global halt is off, then this funtion will on it. And vice versa\r\n        * This also change safeguard for token movement status\r\n    */\r\n    function changeGlobalHalt() onlyOwner public returns(bool) {\r\n        if (globalHalt == false){\r\n            globalHalt = true;\r\n        }\r\n        else{\r\n            globalHalt = false;  \r\n        }\r\n        return true;\r\n    }\r\n\r\n \r\n\r\n    /**\r\n        * Function to check Ether balance in this contract\r\n    */\r\n    function totalEtherbalanceContract() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n    /**\r\n     * Just in rare case, owner wants to transfer Ether from contract to owner address\r\n     */\r\n    function manualWithdrawEtherAdmin(uint64 Amount) public onlyOwner returns (bool){\r\n        require (address(this).balance >= Amount);\r\n        address(owner).transfer(Amount);\r\n        withdrawnByAdmin = withdrawnByAdmin.add(Amount);\r\n        return true;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleInfoIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"finishBattleEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleInfoIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"initiateBattleEv\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BattleCountEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"opponentTokenID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleLooseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleWinReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"blackListToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blackListUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blackListedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackListedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeGlobalHalt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_battleInfoIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHashValue\",\"type\":\"bytes32\"}],\"name\":\"finishBattle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalHalt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userSeed\",\"type\":\"uint256\"}],\"name\":\"initiateBattle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"battleID\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFinishedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUnFinishedIndexNBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUnFinishedIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"Amount\",\"type\":\"uint64\"}],\"name\":\"manualWithdrawEtherAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBattlePerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokenOwnerOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_blockHashValue\",\"type\":\"bytes32[]\"}],\"name\":\"multipleFinishBattle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"niftyMojiContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"removeTokenFromBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUserFromBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"winReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"looseReward\",\"type\":\"uint256\"}],\"name\":\"setBattleReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBattlePerDay\",\"type\":\"uint256\"}],\"name\":\"setMaxBattlePerDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintTokenFee\",\"type\":\"uint256\"}],\"name\":\"setMintTokenFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingMultiplier\",\"type\":\"uint256\"}],\"name\":\"setMintingMultiplier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_niftyMojiContractAddress\",\"type\":\"address\"}],\"name\":\"setNiftyMojiContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_battleFees\",\"type\":\"uint256\"}],\"name\":\"setbattleFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherbalanceContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalMintedByBattleForTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalMintedByOwnerForTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalMintedByUserForTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalMintedForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBattleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"viewAmountIfIMintNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawnByAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MEXPToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d03bbef45985d0fd5e814bc60d0bb7191b6b2252b29fa6479cd2497ca6bd0ab1"}