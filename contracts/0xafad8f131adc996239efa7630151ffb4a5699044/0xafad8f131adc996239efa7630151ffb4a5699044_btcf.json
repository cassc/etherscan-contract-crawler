{"SourceCode": "/**\r\n1000000 Supply\r\n3% max bag (29999)\r\n0 tax\r\nRenounced\r\nLocked For 1000 year \r\n\r\nGet it\r\n\r\nhttps://t.me/BTCFomo\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n    pragma solidity ^0.8.0;\r\n\r\n    interface IERC20 {\r\n        \r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n        \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library SafeMath {\r\n        \r\n        function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                uint256 c = a + b;\r\n                if (c < a) return (false, 0);\r\n                return (true, c);\r\n            }\r\n        }\r\n        \r\n        function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                if (b > a) return (false, 0);\r\n                return (true, a - b);\r\n            }\r\n        }\r\n        \r\n        function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n                // benefit is lost if 'b' is also tested.\r\n                // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n                if (a == 0) return (true, 0);\r\n                uint256 c = a * b;\r\n                if (c / a != b) return (false, 0);\r\n                return (true, c);\r\n            }\r\n        }\r\n        \r\n        function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                if (b == 0) return (false, 0);\r\n                return (true, a / b);\r\n            }\r\n        }\r\n        \r\n        function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                if (b == 0) return (false, 0);\r\n                return (true, a % b);\r\n            }\r\n        }\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a + b;\r\n        }\r\n\r\n\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a - b;\r\n        }\r\n\r\n\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a * b;\r\n        }\r\n        \r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a / b;\r\n        }\r\n\r\n\r\n        function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a % b;\r\n        }\r\n        \r\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b <= a, errorMessage);\r\n                return a - b;\r\n            }\r\n        }\r\n        \r\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b > 0, errorMessage);\r\n                return a / b;\r\n            }\r\n        }\r\n        \r\n        function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b > 0, errorMessage);\r\n                return a % b;\r\n            }\r\n        }\r\n    }\r\n\r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address) {\r\n            return msg.sender;\r\n        }\r\n\r\n        function _msgData() internal view virtual returns (bytes calldata) {\r\n            this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n            return msg.data;\r\n        }\r\n    }\r\n\r\n    library Address {\r\n        \r\n        function isContract(address account) internal view returns (bool) {\r\n            uint256 size;\r\n            assembly { size := extcodesize(account) }\r\n            return size > 0;\r\n        }\r\n\r\n        function sendValue(address payable recipient, uint256 amount) internal {\r\n            require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n            (bool success, ) = recipient.call{ value: amount }(\"\");\r\n            require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        }\r\n        \r\n        function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n        }\r\n        \r\n        function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n            return functionCallWithValue(target, data, 0, errorMessage);\r\n        }\r\n        \r\n        function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n            return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n        }\r\n        \r\n        function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n            require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n            require(isContract(target), \"Address: call to non-contract\");\r\n            (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n            return _verifyCallResult(success, returndata, errorMessage);\r\n        }\r\n        \r\n        function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n            return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n        }\r\n        \r\n        function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n            require(isContract(target), \"Address: static call to non-contract\");\r\n            (bool success, bytes memory returndata) = target.staticcall(data);\r\n            return _verifyCallResult(success, returndata, errorMessage);\r\n        }\r\n\r\n\r\n        function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n            return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n        }\r\n        \r\n        function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n            require(isContract(target), \"Address: delegate call to non-contract\");\r\n            (bool success, bytes memory returndata) = target.delegatecall(data);\r\n            return _verifyCallResult(success, returndata, errorMessage);\r\n        }\r\n\r\n        function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n            if (success) {\r\n                return returndata;\r\n            } else {\r\n                if (returndata.length > 0) {\r\n                    assembly {\r\n                        let returndata_size := mload(returndata)\r\n                        revert(add(32, returndata), returndata_size)\r\n                    }\r\n                } else {\r\n                    revert(errorMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    abstract contract Ownable is Context {\r\n        address internal _owner;\r\n        address private _previousOwner;\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n        constructor () {\r\n            _owner = _msgSender();\r\n            emit OwnershipTransferred(address(0), _owner);\r\n        }\r\n        \r\n        function owner() public view virtual returns (address) {\r\n            return _owner;\r\n        }\r\n        \r\n        modifier onlyOwner() {\r\n            require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n        \r\n        function renounceOwnership() public virtual onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n\r\n\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n    \r\n    }\r\n\r\n    interface IERC20Metadata is IERC20 {\r\n        /**\r\n        * @dev Returns the name of the token.\r\n        */\r\n        function name() external view returns (string memory);\r\n\r\n        /**\r\n        * @dev Returns the symbol of the token.\r\n        */\r\n        function symbol() external view returns (string memory);\r\n\r\n        /**\r\n        * @dev Returns the decimals places of the token.\r\n        */\r\n        function decimals() external view returns (uint8);\r\n    }\r\n    contract ERC20 is Context,Ownable, IERC20, IERC20Metadata {\r\n        using SafeMath for uint256;\r\n\r\n        mapping(address => uint256) private _balances;\r\n\r\n        mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n        uint256 private _totalSupply;\r\n\r\n        string private _name;\r\n        string private _symbol;\r\n\r\n        /**\r\n        * @dev Sets the values for {name} and {symbol}.\r\n        *\r\n        * The default value of {decimals} is 18. To select a different value for\r\n        * {decimals} you should overload it.\r\n        *\r\n        * All two of these values are immutable: they can only be set once during\r\n        * construction.\r\n        */\r\n        constructor(string memory name_, string memory symbol_) {\r\n            _name = name_;\r\n            _symbol = symbol_;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the name of the token.\r\n        */\r\n        function name() public view virtual override returns (string memory) {\r\n            return _name;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the symbol of the token, usually a shorter version of the\r\n        * name.\r\n        */\r\n        function symbol() public view virtual override returns (string memory) {\r\n            return _symbol;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the number of decimals used to get its user representation.\r\n        * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n        * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n        *\r\n        * Tokens usually opt for a value of 18, imitating the relationship between\r\n        * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n        * overridden;\r\n        *\r\n        * NOTE: This information is only used for _display_ purposes: it in\r\n        * no way affects any of the arithmetic of the contract, including\r\n        * {IERC20-balanceOf} and {IERC20-transfer}.\r\n        */\r\n        function decimals() public view virtual override returns (uint8) {\r\n            return 18;\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-totalSupply}.\r\n        */\r\n        function totalSupply() public view virtual override returns (uint256) {\r\n            return _totalSupply;\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-balanceOf}.\r\n        */\r\n        function balanceOf(address account) public view virtual override returns (uint256) {\r\n            return _balances[account];\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-transfer}.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `recipient` cannot be the zero address.\r\n        * - the caller must have a balance of at least `amount`.\r\n        */\r\n        function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-allowance}.\r\n        */\r\n        function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n            return _allowances[owner][spender];\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-approve}.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `spender` cannot be the zero address.\r\n        */\r\n        function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev See {IERC20-transferFrom}.\r\n        *\r\n        * Emits an {Approval} event indicating the updated allowance. This is not\r\n        * required by the EIP. See the note at the beginning of {ERC20}.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `sender` and `recipient` cannot be the zero address.\r\n        * - `sender` must have a balance of at least `amount`.\r\n        * - the caller must have allowance for ``sender``'s tokens of at least\r\n        * `amount`.\r\n        */\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) public virtual override returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n        *\r\n        * This is an alternative to {approve} that can be used as a mitigation for\r\n        * problems described in {IERC20-approve}.\r\n        *\r\n        * Emits an {Approval} event indicating the updated allowance.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `spender` cannot be the zero address.\r\n        */\r\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n        *\r\n        * This is an alternative to {approve} that can be used as a mitigation for\r\n        * problems described in {IERC20-approve}.\r\n        *\r\n        * Emits an {Approval} event indicating the updated allowance.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `spender` cannot be the zero address.\r\n        * - `spender` must have allowance for the caller of at least\r\n        * `subtractedValue`.\r\n        */\r\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n        *\r\n        * This is internal function is equivalent to {transfer}, and can be used to\r\n        * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `sender` cannot be the zero address.\r\n        * - `recipient` cannot be the zero address.\r\n        * - `sender` must have a balance of at least `amount`.\r\n        */\r\n        function _transfer(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n            _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n        /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n        * the total supply.\r\n        *\r\n        * Emits a {Transfer} event with `from` set to the zero address.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `account` cannot be the zero address.\r\n        */\r\n        function _mint(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n            _beforeTokenTransfer(address(0), account, amount);\r\n\r\n            _totalSupply = _totalSupply.add(amount);\r\n            _balances[account] = _balances[account].add(amount);\r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n\r\n        /**\r\n        * @dev Destroys `amount` tokens from `account`, reducing the\r\n        * total supply.\r\n        *\r\n        * Emits a {Transfer} event with `to` set to the zero address.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `account` cannot be the zero address.\r\n        * - `account` must have at least `amount` tokens.\r\n        */\r\n        function _burn(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n            _beforeTokenTransfer(account, address(0), amount);\r\n\r\n            _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n            _totalSupply = _totalSupply.sub(amount);\r\n            emit Transfer(account, address(0), amount);\r\n        }\r\n\r\n        /**\r\n        * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n        *\r\n        * This internal function is equivalent to `approve`, and can be used to\r\n        * e.g. set automatic allowances for certain subsystems, etc.\r\n        *\r\n        * Emits an {Approval} event.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - `owner` cannot be the zero address.\r\n        * - `spender` cannot be the zero address.\r\n        */\r\n        function _approve(\r\n            address owner,\r\n            address spender,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n\r\n        /**\r\n        * @dev Hook that is called before any transfer of tokens. This includes\r\n        * minting and burning.\r\n        *\r\n        * Calling conditions:\r\n        *\r\n        * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n        * will be to transferred to `to`.\r\n        * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n        * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n        * - `from` and `to` are never both zero.\r\n        *\r\n        * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n        */\r\n        function _beforeTokenTransfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal virtual {}\r\n    }\r\n\r\n\r\n    interface IUniswapV2Factory {\r\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n        function feeTo() external view returns (address);\r\n        function feeToSetter() external view returns (address);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n        function allPairs(uint) external view returns (address pair);\r\n        function allPairsLength() external view returns (uint);\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function setFeeTo(address) external;\r\n        function setFeeToSetter(address) external;\r\n    }\r\n\r\n    interface IUniswapV2Pair {\r\n        event Approval(address indexed owner, address indexed spender, uint value);\r\n        event Transfer(address indexed from, address indexed to, uint value);\r\n        function name() external pure returns (string memory);\r\n        function symbol() external pure returns (string memory);\r\n        function decimals() external pure returns (uint8);\r\n        function totalSupply() external view returns (uint);\r\n        function balanceOf(address owner) external view returns (uint);\r\n        function allowance(address owner, address spender) external view returns (uint);\r\n        function approve(address spender, uint value) external returns (bool);\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function transferFrom(address from, address to, uint value) external returns (bool);\r\n        function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n        function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n        function nonces(address owner) external view returns (uint);\r\n        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n        event Mint(address indexed sender, uint amount0, uint amount1);\r\n        event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n        event Swap(\r\n            address indexed sender,\r\n            uint amount0In,\r\n            uint amount1In,\r\n            uint amount0Out,\r\n            uint amount1Out,\r\n            address indexed to\r\n        );\r\n        event Sync(uint112 reserve0, uint112 reserve1);\r\n        function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n        function factory() external view returns (address);\r\n        function token0() external view returns (address);\r\n        function token1() external view returns (address);\r\n        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n        function price0CumulativeLast() external view returns (uint);\r\n        function price1CumulativeLast() external view returns (uint);\r\n        function kLast() external view returns (uint);\r\n        function mint(address to) external returns (uint liquidity);\r\n        function burn(address to) external returns (uint amount0, uint amount1);\r\n        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n        function skim(address to) external;\r\n        function sync() external;\r\n        function initialize(address, address) external;\r\n    }\r\n\r\n    interface IUniswapV2Router01 {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n        function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint amountADesired,\r\n            uint amountBDesired,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB, uint liquidity);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        function removeLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETH(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function removeLiquidityWithPermit(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountA, uint amountB);\r\n        function removeLiquidityETHWithPermit(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountToken, uint amountETH);\r\n        function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapTokensForExactTokens(\r\n            uint amountOut,\r\n            uint amountInMax,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n\r\n        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n        function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n        function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    }\r\n\r\n    interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n        function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountETH);\r\n        function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n            address token,\r\n            uint liquidity,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline,\r\n            bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n        ) external returns (uint amountETH);\r\n\r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external payable;\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n\r\n    contract btcf is ERC20 {\r\n        using SafeMath for uint256;\r\n        using Address for address;\r\n\r\n        mapping (address => bool) private _isExcludedFromFee;\r\n        mapping(address => bool) private _isExcludedFromMaxWallet;\r\n        mapping(address => bool) private _isExcludedFromMaxTnxLimit;\r\n\r\n        address public _devWalletAddress;    \r\n\r\n        uint256 public _buyDevFee = 49;  \r\n        uint256 public _sellDevFee = 49; \r\n\r\n        IUniswapV2Router02 public uniswapV2Router;\r\n        address public uniswapV2Pair;\r\n        bool inSwapAndLiquify;\r\n        bool public swapAndSendFeeEnabled = true;\r\n        uint256 public _maxWalletBalance;\r\n        uint256 public _maxTxAmount;\r\n        uint256 public numTokensSellToSendEthToDev;\r\n        event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n        event swapAndSendFeeEnabledUpdated(bool enabled);\r\n        event SwapAndLiquify(\r\n            uint256 tokensSwapped,\r\n            uint256 ethReceived,\r\n            uint256 tokensIntoLiqudity\r\n        );\r\n        \r\n        modifier lockTheSwap {\r\n            inSwapAndLiquify = true;\r\n            _;\r\n            inSwapAndLiquify = false;\r\n        }\r\n        \r\n        constructor () ERC20(\"For the Fomo\", \"BTCF\"){\r\n\r\n            numTokensSellToSendEthToDev = 1000 * 10 ** decimals();\r\n            _devWalletAddress = 0xa2D195766F4A374b87831bafAe199AF720aeA0e2;\r\n            \r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            // Create a uniswap pair for this new token\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n            // set the rest of the contract variables\r\n            uniswapV2Router = _uniswapV2Router;\r\n            \r\n            //exclude owner and this contract from fee\r\n            _isExcludedFromFee[_msgSender()] = true;\r\n            _isExcludedFromFee[address(this)] = true;\r\n            _isExcludedFromFee[_devWalletAddress] = true;\r\n\r\n            // exclude from the Max wallet balance \r\n            _isExcludedFromMaxWallet[owner()] = true;\r\n            _isExcludedFromMaxWallet[address(this)] = true;\r\n            _isExcludedFromMaxWallet[_devWalletAddress] = true;\r\n\r\n            // exclude from the max tnx limit \r\n            _isExcludedFromMaxTnxLimit[owner()] = true;\r\n            _isExcludedFromMaxTnxLimit[address(this)] = true;\r\n            _isExcludedFromMaxTnxLimit[_devWalletAddress] = true;\r\n\r\n\r\n            /*\r\n                _mint is an internal function in ERC20.sol that is only called here,\r\n                and CANNOT be called ever again\r\n            */\r\n            _mint(owner(), 1000000 * 10 ** decimals());\t\t\r\n            _maxWalletBalance = (totalSupply() * 3 ) / 100;\r\n            _maxTxAmount = (totalSupply() * 3 ) / 100;\r\n\r\n            \r\n        }\r\n\r\n        function includeAndExcludeInWhitelist(address account, bool value) public onlyOwner {\r\n            _isExcludedFromFee[account] = value;\r\n        }\r\n\r\n        function includeAndExcludedFromMaxWallet(address account, bool value) public onlyOwner {\r\n            _isExcludedFromMaxWallet[account] = value;\r\n        }\r\n\r\n        function includeAndExcludedFromMaxTnxLimit(address account, bool value) public onlyOwner {\r\n            _isExcludedFromMaxTnxLimit[account] = value;\r\n        }\r\n\r\n        function isExcludedFromFee(address account) public view returns(bool) {\r\n            return _isExcludedFromFee[account];\r\n        }\r\n\r\n        function isExcludedFromMaxWallet(address account) public view returns(bool){\r\n            return _isExcludedFromMaxWallet[account];\r\n        }\r\n\r\n        function isExcludedFromMaxTnxLimit(address account) public view returns(bool) {\r\n            return _isExcludedFromMaxTnxLimit[account];\r\n        }\r\n\r\n        function setMaxWalletBalance(uint256 maxBalancePercent) external onlyOwner {\r\n        _maxWalletBalance = maxBalancePercent * 10** decimals();\r\n        }\r\n\r\n        function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\r\n        _maxTxAmount = maxTxAmount * 10** decimals();\r\n       }\r\n\r\n\r\n        function setSellDevFess(\r\n            uint256 dFee\r\n        ) external onlyOwner {\r\n            _sellDevFee = dFee;\r\n        }\r\n\r\n        function setBuyDevFees(\r\n            uint256 dFee\r\n        ) external onlyOwner {\r\n            _buyDevFee = dFee;\r\n        }\r\n        function setDevWalletAddress(address _addr) external onlyOwner {\r\n            _devWalletAddress = _addr;\r\n        }  \r\n        \r\n        function setnumTokensSellToSendEthToDev(uint256 amount) external onlyOwner {\r\n            numTokensSellToSendEthToDev = amount * 10 ** decimals();\r\n        }\r\n\r\n        function setRouterAddress(address newRouter) external onlyOwner {\r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouter);\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n            uniswapV2Router = _uniswapV2Router;\r\n        }\r\n\r\n        function setSwapAndSendFeeEnabled(bool _enabled) external onlyOwner {\r\n            swapAndSendFeeEnabled = _enabled;\r\n            emit swapAndSendFeeEnabledUpdated(_enabled);\r\n        }\r\n        \r\n        //to recieve ETH from uniswapV2Router when swaping\r\n        receive() external payable {}\r\n\r\n        // to withdraw stucked BNB \r\n        function withdrawStuckedBNB(uint amount) external onlyOwner{\r\n            // This is the current recommended method to use.\r\n            (bool sent,) = _owner.call{value: amount}(\"\");\r\n            require(sent, \"Failed to send BNB\");    \r\n            }\r\n\r\n           // Withdraw stuked tokens \r\n        function withdrawStuckedTokens(address tokenAddress, uint256 tokens) external onlyOwner returns (bool success){\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n        }\r\n    \r\n        function _transfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal override {\r\n            require(from != address(0), \"ERC20: transfer from the zero address\");\r\n            require(to != address(0), \"ERC20: transfer to the zero address\");\r\n            require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        if (from != owner() && to != owner())\r\n            require( _isExcludedFromMaxTnxLimit[from] || _isExcludedFromMaxTnxLimit[to] || \r\n                amount <= _maxTxAmount,\r\n                \"ERC20: Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n        \r\n        \r\n        if (\r\n            from != owner() &&\r\n            to != address(this) &&\r\n            to != uniswapV2Pair ) \r\n        {\r\n            uint256 currentBalance = balanceOf(to);\r\n            require(_isExcludedFromMaxWallet[to] || (currentBalance + amount <= _maxWalletBalance),\r\n                    \"ERC20: Reached max wallet holding\");\r\n        }\r\n      \r\n            uint256 contractTokenBalance = balanceOf(address(this)); \r\n            bool overMinTokenBalance = contractTokenBalance >= numTokensSellToSendEthToDev;\r\n            if (\r\n                overMinTokenBalance &&\r\n                !inSwapAndLiquify &&\r\n                from != uniswapV2Pair &&\r\n                swapAndSendFeeEnabled\r\n            ) {\r\n                contractTokenBalance = numTokensSellToSendEthToDev;\r\n                swapTokensForFees(contractTokenBalance);\r\n            }\r\n\r\n            bool takeFee = true;\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            super._transfer(from, to, amount);\r\n            takeFee = false;\r\n        } else {\r\n\r\n            if (from == uniswapV2Pair) {\r\n                // Buy\r\n                uint256 DevTokens = amount.mul(_buyDevFee).div(100);\r\n\r\n                amount= amount.sub(DevTokens);\r\n                super._transfer(from, address(this), DevTokens);\r\n                super._transfer(from, to, amount);\r\n\r\n            } else if (to == uniswapV2Pair) {\r\n                // Sell\r\n                uint256 DevTokens = amount.mul(_sellDevFee).div(100);\r\n\r\n                amount= amount.sub(DevTokens);\r\n                super._transfer(from, address(this), DevTokens);\r\n                super._transfer(from, to, amount);\r\n            } else {\r\n                // Transfer\r\n                super._transfer(from, to, amount);\r\n            }\r\n        \r\n        }\r\n\r\n        }\r\n\r\n        function swapTokensForFees(uint256 tokenAmount) private lockTheSwap {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                _devWalletAddress,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"swapAndSendFeeEnabledUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeAndExcludeInWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeAndExcludedFromMaxTnxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeAndExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTnxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToSendEthToDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dFee\",\"type\":\"uint256\"}],\"name\":\"setBuyDevFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDevWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBalancePercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dFee\",\"type\":\"uint256\"}],\"name\":\"setSellDevFess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndSendFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setnumTokensSellToSendEthToDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndSendFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckedBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "btcf", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6210aa1dc3ed7d0bd0897f42044a43c074c9bfaa5768ef6191512808168da8d3"}