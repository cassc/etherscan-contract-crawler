{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/PoolGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2022-2023 Smoothly Protocol LLC\\npragma solidity 0.8.19;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SmoothlyPool} from \\\"./SmoothlyPool.sol\\\";\\n\\n/// @title Smoothing Pool Governance Contract\\n/// @notice This contract is in charge of receiving votes from operator\\n/// nodes with the respective withdrawals, exits and state root hashes of the\\n/// computed state for every epoch. Reach consensus and pass the data to the\\n/// SmoothlyPool contract.\\ncontract PoolGovernance is Ownable {\\n    uint8 internal constant votingRatio = 66; // % of agreements required\\n    uint32 public epochInterval = 7 days;\\n    uint64 public epochNumber;\\n    uint64 public lastEpoch;\\n    address[] public operators;\\n    SmoothlyPool public immutable pool;\\n\\n    /// @notice Epoch data to update the Smoothly Pool state\\n    /// @param withdrawals Merkle root hash for withdrawals\\n    /// @param exits Merkle root hash for exits\\n    /// @param state MPT root hash of entire state\\n    /// @param fee distributed to operators to keep network alive\\n    struct Epoch {\\n        bytes32 withdrawals;\\n        bytes32 exits;\\n        bytes32 state;\\n        uint256 fee;\\n    }\\n\\n    /// @dev checks if operator is active\\n    mapping(address => bool) public isOperator;\\n    /// @dev records operator accumulative rewards\\n    mapping(address => uint256) public operatorRewards;\\n    /// @dev records operator votes for each epochNumber\\n    mapping(uint256 => mapping(address => bytes32)) public votes;\\n    /// @dev counts number of votes for each epochNumber\\n    mapping(uint256 => mapping(bytes32 => uint256)) public voteCounter;\\n\\n    error ExistingOperator(address operator);\\n    error Unauthorized();\\n    error EpochTimelockNotReached();\\n    error ZeroAmount();\\n    error CallTransferFailed();\\n    error NotEnoughOperators();\\n\\n    /// @dev restrict calls only to operators\\n    modifier onlyOperator() {\\n        if (!isOperator[msg.sender]) revert Unauthorized();\\n        _;\\n    }\\n\\n    constructor() {\\n        lastEpoch = uint64(block.timestamp);\\n        pool = new SmoothlyPool();\\n    }\\n\\n    /// @dev Receives fees from Smoothly Pool\\n    receive() external payable {\\n        if (msg.sender != address(pool)) revert Unauthorized();\\n    }\\n\\n    /// @notice Gets all active operators\\n    /// @return All active operators\\n    function getOperators() external view returns (address[] memory) {\\n        return operators;\\n    }\\n\\n    /// @notice withdraws accumulated rewards from an operator\\n    function withdrawRewards() external onlyOperator {\\n        uint256 rewards = operatorRewards[msg.sender];\\n        operatorRewards[msg.sender] = 0;\\n\\n        if (rewards == 0) revert ZeroAmount();\\n        (bool sent, ) = msg.sender.call{value: rewards}(\\\"\\\");\\n        if (!sent) revert CallTransferFailed();\\n    }\\n\\n    /// @notice Proposal Data for current epoch computed from every operator\\n    /// @dev operators need to reach an agreement of at least votingRatio\\n    /// and no penalties are added for bad proposals or no proposals as admin\\n    /// have the abilities to delete malicious operators\\n    /// @param epoch Data needed to update Smoothly Pool state\\n    function proposeEpoch(Epoch calldata epoch) external onlyOperator {\\n        if (block.timestamp < lastEpoch + epochInterval)\\n            revert EpochTimelockNotReached();\\n\\n        bytes32 vote = keccak256(abi.encode(epoch));\\n        bytes32 prevVote = votes[epochNumber][msg.sender];\\n        uint256 operatorsLen = operators.length;\\n\\n        if(operatorsLen == 1) revert NotEnoughOperators();\\n\\n        votes[epochNumber][msg.sender] = vote;\\n\\n        if (prevVote != bytes32(0)) --voteCounter[epochNumber][prevVote];\\n\\n        uint256 count = ++voteCounter[epochNumber][vote];\\n        if (((count * 100) / operatorsLen) >= votingRatio) {\\n            pool.updateEpoch(\\n                epoch.withdrawals,\\n                epoch.exits,\\n                epoch.state,\\n                epoch.fee\\n            );\\n\\n            uint256 operatorShare = epoch.fee / operatorsLen;\\n            address[] memory _operators = operators;\\n            for (uint256 i = 0; i < operatorsLen; ++i) {\\n                operatorRewards[_operators[i]] += operatorShare;\\n            }\\n\\n            ++epochNumber;\\n            lastEpoch = uint64(block.timestamp);\\n        }\\n    }\\n\\n    /// @notice Adds operators\\n    /// @param _operators List of new operators\\n    function addOperators(address[] calldata _operators) external onlyOwner {\\n        for (uint256 i = 0; i < _operators.length; ++i) {\\n            if (isOperator[_operators[i]])\\n                revert ExistingOperator(_operators[i]);\\n            isOperator[_operators[i]] = true;\\n            operators.push(_operators[i]);\\n        }\\n    }\\n\\n    /// @notice Deletes operators\\n    /// @param _operators List of operators to be removed\\n    function deleteOperators(address[] calldata _operators) external onlyOwner {\\n        for (uint256 i = 0; i < _operators.length; ++i) {\\n            isOperator[_operators[i]] = false;\\n            uint256 operatorsLen = operators.length;\\n            for (uint256 x = 0; x < operatorsLen; ++x) {\\n                if (operators[x] == _operators[x]) {\\n                    operators[x] = operators[operatorsLen - 1];\\n                    operators.pop();\\n                    // Transfer rewards to pool\\n                    uint256 rewards = operatorRewards[_operators[x]];\\n                    operatorRewards[_operators[x]] = 0;\\n                    if (rewards != 0) {\\n                      (bool sent, ) = address(pool).call{value: rewards}(\\\"\\\");\\n                      if (!sent) revert CallTransferFailed();\\n                    }\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers Ownership of Smoothly Pool\\n    /// @param newOwner owner to transfer ownership to\\n    function transferPoolOwnership(address newOwner) external onlyOwner {\\n        pool.transferOwnership(newOwner);\\n    }\\n\\n    /// @notice Changes epochInterval timelock value\\n    /// @param interval updates epochInterval\\n    function updateInterval(uint32 interval) external onlyOwner {\\n      epochInterval = interval;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SmoothlyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2022-2023 Smoothly Protocol LLC\\npragma solidity 0.8.19;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Smoothing Pool V2 Contract.\\n/// @notice This contract receives and distributes all the rewards from registered\\n/// validators evenly and smoothly.\\ncontract SmoothlyPool is Ownable {\\n    uint64 internal constant STAKE_FEE = 0.5 ether;\\n    uint64 internal constant MAX_ADD_FEE = 0.15 ether;\\n    uint64 public epoch;\\n    bytes32 public withdrawalsRoot;\\n    bytes32 public exitsRoot;\\n    /// @dev Empty root hash with no values in it\\n    bytes32 public stateRoot =\\n        hex\\\"56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\";\\n\\n    /// @dev Flags registrant on epoch to prevent double withdrawals\\n    mapping(address => mapping(uint64 => bool)) claimedWithdrawal;\\n    /// @dev Flags registrant on epoch to prevent double exits\\n    mapping(address => mapping(uint64 => bool)) claimedExit;\\n\\n    event Registered(address indexed eth1, uint64[] indexes);\\n    event RewardsWithdrawal(\\n        address indexed eth1,\\n        uint64[] indexes,\\n        uint256 value\\n    );\\n    event StakeWithdrawal(\\n        address indexed eth1,\\n        uint64[] indexes,\\n        uint256 value\\n    );\\n    event StakeAdded(address indexed eth1, uint64 index, uint256 value);\\n    event ExitRequested(address indexed eth1, uint64[] indexes);\\n    event Epoch(uint64 indexed epoch, bytes32 stateRoot, uint256 fee);\\n\\n    error NotEnoughEth();\\n    error IncorrectProof();\\n    error AlreadyClaimed();\\n    error ZeroAmount();\\n    error CallTransferFailed();\\n    error AmountTooBig();\\n\\n    receive() external payable {}\\n\\n    /// @notice Register n amount of validators to the pool\\n    /// @param indexes Validator indexes\\n    /// @dev Backend verifies ownership of the validators\\n    /// This is intended to be called from the front-end, double checking\\n    /// for ownership. Anyone registering unowned validators will lose their staking\\n    /// funds and those will be distributed amongst the pool registrants.\\n    function registerBulk(uint64[] calldata indexes) external payable {\\n        if (msg.value != (STAKE_FEE * indexes.length)) revert NotEnoughEth();\\n        emit Registered(msg.sender, indexes);\\n    }\\n\\n    /// @notice Withdraw rewards from the pool\\n    /// @param proof Merkle Proof\\n    /// @param indexes Validator indexes\\n    /// @param rewards All rewards accumulated from all validators associated\\n    /// to an eth1 address\\n    function withdrawRewards(\\n        bytes32[] calldata proof,\\n        uint64[] calldata indexes,\\n        uint256 rewards\\n    ) external {\\n        if (\\n            !MerkleProof.verify(\\n                proof,\\n                withdrawalsRoot,\\n                keccak256(\\n                    bytes.concat(\\n                        keccak256(abi.encode(msg.sender, indexes, rewards))\\n                    )\\n                )\\n            )\\n        ) revert IncorrectProof();\\n        if (claimedWithdrawal[msg.sender][epoch]) revert AlreadyClaimed();\\n        claimedWithdrawal[msg.sender][epoch] = true;\\n        _transfer(msg.sender, rewards);\\n        emit RewardsWithdrawal(msg.sender, indexes, rewards);\\n    }\\n\\n    /// @notice Withdraws stake on exit request\\n    /// @param proof Merkle Proof\\n    /// @param indexes Validator indexes\\n    /// @param stake Amount of stake of all validators associated to an eth1 \\n    /// address that requested exit on previous epochs\\n    /// @dev Registrants that don't request an exit of their validators\\n    /// won't be included\\n    function withdrawStake(\\n        bytes32[] calldata proof,\\n        uint64[] calldata indexes,\\n        uint256 stake\\n    ) external {\\n        if (\\n            !MerkleProof.verify(\\n                proof,\\n                exitsRoot,\\n                keccak256(\\n                    bytes.concat(\\n                        keccak256(abi.encode(msg.sender, indexes, stake))\\n                    )\\n                )\\n            )\\n        ) revert IncorrectProof();\\n        if (claimedExit[msg.sender][epoch]) revert AlreadyClaimed();\\n\\n        claimedExit[msg.sender][epoch] = true;\\n        _transfer(msg.sender, stake);\\n        emit StakeWithdrawal(msg.sender, indexes, stake);\\n    }\\n\\n    /// @notice Allows user to exit pool retrieving stake in next epoch\\n    /// @param indexes Validator indexes\\n    function requestExit(uint64[] calldata indexes) external {\\n        emit ExitRequested(msg.sender, indexes);\\n    }\\n\\n    /// @notice Adds stake to a validator in the pool\\n    /// @param index Validator index\\n    /// @dev Front-end needs to check for a valid validator call and a valid\\n    /// amount, otherwise funds will get lost and added as rewards for \\n    /// registrants of the pool\\n    function addStake(uint64 index) external payable {\\n        if (msg.value == 0) revert ZeroAmount();\\n        if (msg.value > MAX_ADD_FEE) revert AmountTooBig();\\n        emit StakeAdded(msg.sender, index, msg.value);\\n    }\\n\\n    /// @notice Updates epoch number and Merkle root hashes\\n    /// @param _withdrawalsRoot Merkle root hash for withdrawals\\n    /// @param _exitsRoot Merkle root hash for exits\\n    /// @param _stateRoot Merkle Patricia Trie root hash for entire backend state\\n    /// @param _fee Fee for processing epochs by operators\\n    function updateEpoch(\\n        bytes32 _withdrawalsRoot,\\n        bytes32 _exitsRoot,\\n        bytes32 _stateRoot,\\n        uint256 _fee\\n    ) external onlyOwner {\\n        withdrawalsRoot = _withdrawalsRoot;\\n        exitsRoot = _exitsRoot;\\n        stateRoot = _stateRoot;\\n        ++epoch;\\n        if (_fee > 0) _transfer(msg.sender, _fee);\\n        emit Epoch(epoch, _stateRoot, _fee);\\n    }\\n\\n    /// @dev Utility to transfer funds\\n    /// @param recipient address of recipient\\n    /// @param amount amount being transferred\\n    function _transfer(address recipient, uint256 amount) private {\\n        if (amount == 0) revert ZeroAmount();\\n        (bool sent, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!sent) revert CallTransferFailed();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochTimelockNotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ExistingOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughOperators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"deleteOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpoch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operatorRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract SmoothlyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawals\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"exits\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"state\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolGovernance.Epoch\",\"name\":\"epoch\",\"type\":\"tuple\"}],\"name\":\"proposeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPoolOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"}],\"name\":\"updateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voteCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PoolGovernance", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}