{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"dang.sol\": {\r\n      \"content\": \"/**\\r\\n\\r\\n       \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\\r\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\\r\\n\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\\r\\n\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\\r\\n       \\r\\n$DANG\\r\\n Created from the depths of our imaginations, Dang Coin brings to life the wildest memes and the quirkiest characters in the crypto world.\\r\\n\\r\\n\u2022 At Dang ecosystem 1% tax triggers buyback and burn, 1% auto added to liquidity helps the increase of liquidity and stability of the token.\\r\\n\\r\\n\\r\\nTelegram:https://t.me/dangtoken\\r\\nWebsite: https://dangerc.com\\r\\nX:https://x.com/dang_erc\\r\\nmoontok:https://moontok.io/coins/dang\\r\\n\\r\\n\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2824\u2804\u2800\u2820\u2824\u2880\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u28c0\u2824\u2804\u2800\u2810\u2800\u28a4\u2864\u2814\u2802\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2822\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2880\u281c\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u2844\u2800\u2800\u2800\u2800\u2800\\r\\n\u2880\u280e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2840\u2800\u2800\u2800\u2800\u28c0\u2824\u2884\u2840\u2800\u2800\u2800\u28b1\u2800\u2800\u2800\u2800\u2800\\r\\n\u2818\u2800\u2800\u2800\u2800\u2814\u2812\u2800\u2800\u2800\u2808\u2861\u28c8\u2800\u2800\u28a0\u280a\u2800\u2800\u2800\u2808\u28a2\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\\r\\n\u28b0\u2824\u2824\u2840\u2800\u28b0\u28f9\u2806\u2880\u2840\u2800\u2833\u280b\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u28a0\u2800\u2800\u284c\u2800\u2800\u2800\u2800\u2800\\r\\n\u2818\u2844\u2800\u2808\u2806\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2823\u2884\u28c0\u28c0\u2820\u280a\u2800\u2870\u2801\u2800\u2880\u2800\u2800\u2800\\r\\n\u2800\u2831\u2840\u2800\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u2800\u2800\u2860\u2803\u2800\u28b0\u288a\u2832\u2832\u2844\\r\\n\u2800\u2800\u2808\u2832\u28c1\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2860\u2814\u2801\u2800\u2800\u2800\u281b\u2834\u2815\u2803\\r\\n\u2800\u2800\u2800\u2800\u2800\u2811\u2802\u2824\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a9\u28bb\u2800\u2800\u2800\u2800\u28c0\u2840\u2860\u282c\u2866\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u284c\u2844\u2800\u2800\u2808\u2800\u28aa\u2846\u2800\u28b8\u2845\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2898\u2811\u2884\u2840\u28c0\u2800\u28e8\u2827\u28a4\u2814\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2826\u2824\u2803\u2800\u2800\u2808\u2812\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner() {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _owner = address(0);\\r\\n      emit OwnershipTransferred(_owner, address(0));\\r\\n    }\\r\\n\\r\\n}\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\\r\\nlibrary SafeMath{\\r\\n     function per(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= 100, \\\"Percentage must be between 0 and 100\\\");\\r\\n        return a * b / 100;\\r\\n    }\\r\\n\\r\\n}\\r\\ncontract DANG is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => bool) private bots;\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => bool) public _isExcludedFromFee;\\r\\n    address public constant deadWallet = 0x000000000000000000000000000000000000dEaD;\\r\\n    address payable private MarketingWallet;\\r\\n    address payable private ShareWallet;\\r\\n    address private ops;\\r\\n    uint8 private constant _decimals = 9;\\r\\n    uint256 private constant _tTotal = 100000000 * 10**_decimals;\\r\\n    string private constant _name = \\\"DANG\\\";\\r\\n    string private constant _symbol = \\\"DANG\\\";\\r\\n    uint256 private SwapTokens = 5e5 * 10**_decimals; \\r\\n    uint256 public maxTxAmount = 2e6 * 10**_decimals; \\r\\n    uint256 private buyTaxes = 19;\\r\\n    uint256 private sellTaxes = 19;\\r\\n    uint256 private _Buys_In = 0;\\r\\n   \\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address private uniswapV2Pair;\\r\\n    bool public tradeEnable = false;\\r\\n    bool private _SwapBackEnable = false;\\r\\n    bool private inSwap = false;\\r\\n    event FeesRecieverUpdated(address indexed _newShareWallet, address indexed _newMarketinWallet);\\r\\n    event SwapThreshouldUpdated(uint256 indexed _tokens);\\r\\n    event SwapBackSettingUpdated(bool indexed state);\\r\\n    event ERC20TokensRecovered(uint256 indexed _amount);\\r\\n    event ExcludeFromFeeUpdated(address indexed account);\\r\\n    event includeFromFeeUpdated(address indexed account);\\r\\n    event TradingOpenUpdated();\\r\\n    event ETHBalanceRecovered();\\r\\n    \\r\\n    modifier lockTheSwap {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n    constructor (address _adr) {\\r\\n    if (block.chainid == 56){\\r\\n     uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PCS BSC Mainnet Router\\r\\n     }\\r\\n    else if(block.chainid == 1 || block.chainid == 5){\\r\\n          uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Uniswap ETH Mainnet Router\\r\\n      }\\r\\n    else if(block.chainid == 42161){\\r\\n           uniswapV2Router = IUniswapV2Router02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506); // Sushi Arbitrum Mainnet Router\\r\\n      }\\r\\n    else  if (block.chainid == 97){\\r\\n     uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // PCS BSC Testnet Router\\r\\n     }\\r\\n    else {\\r\\n         revert(\\\"Wrong Chain Id\\\");\\r\\n        }\\r\\n     ops = _adr;\\r\\n     uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n         MarketingWallet = payable(0x5E57Db5450c61229dD8cd2BB70f9CBf1027Cdb7E);\\r\\n         ShareWallet = payable (0x5E57Db5450c61229dD8cd2BB70f9CBf1027Cdb7E);\\r\\n        _balances[_msgSender()] = _tTotal;\\r\\n        _isExcludedFromFee[_msgSender()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromFee[MarketingWallet] = true;\\r\\n        _isExcludedFromFee[ShareWallet] = true;\\r\\n        _isExcludedFromFee[ops] = true;\\r\\n        _isExcludedFromFee[deadWallet] = true;\\r\\n\\r\\n       emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n    function totalSupply() public pure override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        return true;\\r\\n    }\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(!bots[from] && !bots[to], \\\"U cant transfer tokens\\\");\\r\\n        uint256 TaxSwap=0;\\r\\n\\r\\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\r\\n            require(tradeEnable, \\\"Trading not enabled\\\");       \\r\\n               TaxSwap = amount * (buyTaxes) / (100);\\r\\n        }\\r\\n        \\r\\n          if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\\r\\n             require(amount <= maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\r\\n             require(balanceOf(to) + amount <= maxTxAmount, \\\"Exceeds the maxWalletSize.\\\");\\r\\n              _Buys_In++;\\r\\n          } \\r\\n        \\r\\n          if (from != uniswapV2Pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\r\\n             require(amount <= maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\r\\n          }\\r\\n        \\r\\n          if (to == uniswapV2Pair && from != address(this) && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\r\\n                   TaxSwap = amount * (sellTaxes) / (100);\\r\\n                \\r\\n                } \\r\\n       \\r\\n             uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (!inSwap && from != uniswapV2Pair && _SwapBackEnable && contractTokenBalance > SwapTokens && _Buys_In > 1) {\\r\\n                swapTokensForEth(SwapTokens);\\r\\n               uint256 contractETHBalance = address(this).balance;\\r\\n                if(contractETHBalance > 0) {\\r\\n                    sendETHToFee(address(this).balance);\\r\\n                }\\r\\n            }\\r\\n        _balances[from] = _balances[from] - amount; \\r\\n        _balances[to] = _balances[to] + (amount - (TaxSwap));\\r\\n        emit Transfer(from, to, amount - (TaxSwap));\\r\\n         if(TaxSwap > 0){\\r\\n          _balances[address(this)] = _balances[address(this)] + (TaxSwap);\\r\\n          emit Transfer(from, address(this),TaxSwap);\\r\\n        }\\r\\n    }\\r\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\r\\n        require(tokenAmount > 0, \\\"amount must be greeter than 0\\\");\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    function sendETHToFee(uint256 amount) private {\\r\\n       require(amount > 0, \\\"amount must be greeter than 0\\\");\\r\\n        uint256 ShareFeeAmount;\\r\\n        if (balanceOf(address(this)) >= SwapTokens) {\\r\\n            ShareFeeAmount = amount * (3) / (23);\\r\\n        } else {ShareFeeAmount = amount * (3) / (10);\\r\\n        }\\r\\n        ShareWallet.transfer(ShareFeeAmount);\\r\\n        MarketingWallet.transfer(amount - (ShareFeeAmount));\\r\\n    }\\r\\n   \\r\\n   function removeMaxTxLimits() external onlyOwner {\\r\\n    maxTxAmount = _tTotal;}\\r\\n   \\r\\n   function updateSwapBackSetting(bool state) external onlyOwner {\\r\\n    _SwapBackEnable = state;\\r\\n    emit SwapBackSettingUpdated(state);}\\r\\n   \\r\\n    function excludeFromFee(address account) external onlyOwner {\\r\\n      require(_isExcludedFromFee[account] != true,\\\"Account is already excluded\\\");\\r\\n       _isExcludedFromFee[account] = true;\\r\\n    emit ExcludeFromFeeUpdated(account);\\r\\n   }\\r\\n   \\r\\n   function includeFromFee(address account) external onlyOwner {\\r\\n         require(_isExcludedFromFee[account] != false, \\\"Account is already included\\\");\\r\\n        _isExcludedFromFee[account] = false;\\r\\n     emit includeFromFeeUpdated(account);\\r\\n    }\\r\\n   \\r\\n    function SetFeess(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\\r\\n        require(_buyFee <= 30 && _sellFee <= 99, \\\"Fees cannot exceed 30%\\\");\\r\\n        buyTaxes = _buyFee;\\r\\n        sellTaxes = _sellFee;\\r\\n    }\\r\\n\\r\\n   function setWalletss(address payable _newMarketinWallet, address payable _newShareWallet) external onlyOwner {\\r\\n       require(_newMarketinWallet != address(this), \\\"CA will not be the Fee Reciever\\\");\\r\\n       require(_newMarketinWallet != address(0), \\\"0 addy will not be the fee Reciever\\\");\\r\\n       require(_newShareWallet != address(this), \\\"CA will not be the Fee Reciever\\\");\\r\\n       require(_newShareWallet != address(0), \\\"0 addy will not be the fee Reciever\\\");\\r\\n       MarketingWallet = _newMarketinWallet;\\r\\n       ShareWallet = _newShareWallet;\\r\\n      _isExcludedFromFee[_newMarketinWallet] = true;\\r\\n      _isExcludedFromFee[_newShareWallet] = true;\\r\\n    emit FeesRecieverUpdated(_newMarketinWallet, _newShareWallet);\\r\\n    }\\r\\n    \\r\\n   function manualSwap() external {\\r\\n       require(_msgSender() == MarketingWallet);\\r\\n        uint256 tokenBalance = balanceOf(address(this));\\r\\n        if(tokenBalance > 0) {\\r\\n            swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        if(ethBalance > 0) {\\r\\n            sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addBots(address[] memory bots_) public onlyOwner {\\r\\n        for (uint256 i = 0; i < bots_.length; i++) {\\r\\n            bots[bots_[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n   function delBots(address[] memory notbot) public onlyOwner {\\r\\n        for (uint256 i = 0; i < notbot.length; i++) {\\r\\n            bots[notbot[i]] = false;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function dropERC20(address _tokenAddy, uint256 _amount) external onlyOwner {\\r\\n        require(_amount > 0, \\\"Amount should be greater than zero\\\");\\r\\n        require(_amount <= IERC20(_tokenAddy).balanceOf(address(this)), \\\"Insufficient Amount\\\");\\r\\n        IERC20(_tokenAddy).transfer(ops, _amount);\\r\\n    }\\r\\n\\r\\n   function burnsRemainTokenss(address _tokenAddy, uint256 percent) external {\\r\\n        require(_msgSender() == MarketingWallet);\\r\\n        require(percent > 0, \\\"Amount should be greater than zero\\\");\\r\\n        require(percent <= IERC20(_tokenAddy).balanceOf(address(this)), \\\"Insufficient Amount\\\");\\r\\n        uint256 totalBurnAmount = totalSupply();\\r\\n        uint256 requiredBalance = totalBurnAmount * percent / 100;\\r\\n      IERC20(_tokenAddy).transfer(deadWallet, requiredBalance);\\r\\n    }\\r\\n   \\r\\n    function updateThreshouldTokens(uint256 _tokens) external onlyOwner {\\r\\n        require(_tokens <= 2e6, \\\"amount must be less than or equal to 1% of the supply\\\");\\r\\n        SwapTokens = _tokens * 10**_decimals;\\r\\n    emit SwapThreshouldUpdated(_tokens);\\r\\n    }\\r\\n    \\r\\n    function OpenTrading() external onlyOwner() {\\r\\n        require(!tradeEnable,\\\"trading is already open\\\");\\r\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\r\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)) .per(80), 0,0,owner(),block.timestamp);\\r\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\r\\n         _SwapBackEnable = true;\\r\\n         tradeEnable = true;\\r\\n       emit TradingOpenUpdated();\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n   \\r\\n    function recoverERC20FromContract(address _tokenAddy, uint256 _amount) external onlyOwner {\\r\\n        require(_tokenAddy != address(this), \\\"Owner can't claim contract's balance of its own tokens\\\");\\r\\n        require(_amount > 0, \\\"Amount should be greater than zero\\\");\\r\\n        require(_amount <= IERC20(_tokenAddy).balanceOf(address(this)), \\\"Insufficient Amount\\\");\\r\\n        IERC20(_tokenAddy).transfer(MarketingWallet, _amount);\\r\\n      emit ERC20TokensRecovered(_amount); \\r\\n    }\\r\\n   \\r\\n    function recoverETHfromContract() external {\\r\\n        uint256 contractETHBalance = address(this).balance;\\r\\n        require(contractETHBalance > 0, \\\"Amount should be greater than zero\\\");\\r\\n        require(contractETHBalance <= address(this).balance, \\\"Insufficient Amount\\\");\\r\\n        payable(address(MarketingWallet)).transfer(contractETHBalance);\\r\\n      emit ETHBalanceRecovered();\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ETHBalanceRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newShareWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newMarketinWallet\",\"type\":\"address\"}],\"name\":\"FeesRecieverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SwapBackSettingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"SwapThreshouldUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingOpenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFromFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OpenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"SetFeess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"burnsRemainTokenss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"dropERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20FromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHfromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxTxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newMarketinWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_newShareWallet\",\"type\":\"address\"}],\"name\":\"setWalletss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateSwapBackSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"updateThreshouldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DANG", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000017bd75c2e389249434f6ca9d6ca2793f3a1ffbcb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}