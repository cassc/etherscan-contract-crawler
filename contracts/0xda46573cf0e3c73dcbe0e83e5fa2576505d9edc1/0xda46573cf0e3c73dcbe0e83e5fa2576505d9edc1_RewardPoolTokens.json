{"SourceCode": "pragma solidity 0.8.20;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20{\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n}\r\n\r\ninterface ILpPair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\ncontract RewardPoolETH is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n    event DividendsDistributed(\r\n        address indexed from,\r\n        uint256 weiAmount\r\n    );\r\n    event DividendWithdrawn(\r\n        address indexed to,\r\n        uint256 weiAmount\r\n    );\r\n\r\n    mapping (address => bool) public authorized;\r\n    \r\n    uint256 public fee;\r\n    address public feeReceiver;\r\n    \r\n    PoolInfo public poolInfo;\r\n    string public poolName;\r\n\r\n    struct PoolInfo {\r\n        uint64 poolStartTime;\r\n        uint48 poolDuration;\r\n        uint64 payoutFrequency;\r\n        uint64 lastPayout;\r\n        uint8 totalPayouts;\r\n    }\r\n\r\n    uint256 constant internal magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n                                                                            \r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n    \r\n    mapping (address => uint256) public holderPoints;\r\n\r\n    uint256 public totalPoints;\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    uint256 public totalForDistribution;\r\n\r\n    constructor(address _feeReceiver, uint256 _fee, string memory _poolName, uint64 _poolStartTime, uint48 _poolDuration, uint64 _payoutFrequency, address _pointSetter){\r\n        PoolInfo memory poolInfoMem;\r\n        fee = _fee;\r\n        feeReceiver = _feeReceiver;\r\n        require(_poolDuration % _payoutFrequency == 0, \"Duration must be evenly divisible by payout frequency\");\r\n        poolName = _poolName;\r\n        poolInfoMem.poolDuration = _poolDuration;\r\n        poolInfoMem.poolStartTime = _poolStartTime;\r\n        poolInfoMem.payoutFrequency = _payoutFrequency;\r\n        poolInfoMem.lastPayout = _poolStartTime;\r\n        poolInfoMem.totalPayouts = uint8(_poolDuration / _payoutFrequency);\r\n        poolInfo = poolInfoMem;\r\n        authorized[_pointSetter] = true;\r\n    }\r\n\r\n    modifier onlyAuthorized(){\r\n        require(authorized[msg.sender] || msg.sender == owner(), \"Not Authorized\");\r\n        _;\r\n    }\r\n\r\n    function setAuthorized(address _wallet, bool _authorized) external onlyOwner {\r\n        authorized[_wallet] = _authorized;\r\n    }\r\n\r\n    receive() external payable {\r\n        uint256 amountForFee;\r\n        if(fee > 0){\r\n            amountForFee = msg.value * fee / 100;\r\n            (bool success,) = feeReceiver.call{value: amountForFee}(\"\");\r\n            require(success, \"Distribution failed\");\r\n        }\r\n        totalForDistribution += msg.value - amountForFee;\r\n    }\r\n\r\n    function distributeDividends() external onlyAuthorized {\r\n        PoolInfo memory poolInfoMem = poolInfo;\r\n        require(totalPoints > 0, \"No shares to distribute to\");\r\n        require(block.timestamp >= poolInfoMem.payoutFrequency + poolInfoMem.lastPayout, \"Too early for distribution\");\r\n        uint256 payouts = (block.timestamp - poolInfoMem.lastPayout) / poolInfoMem.payoutFrequency;\r\n        uint256 amountToAdd = totalForDistribution * payouts / poolInfoMem.totalPayouts;\r\n        poolInfoMem.lastPayout += uint64(payouts * poolInfoMem.payoutFrequency);\r\n        poolInfo = poolInfoMem;\r\n\r\n        if(amountToAdd + totalDividendsDistributed > totalForDistribution){\r\n            amountToAdd = totalForDistribution - totalDividendsDistributed;\r\n        }\r\n\r\n        if(amountToAdd > 0){\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amountToAdd).mul(magnitude) / totalPoints\r\n            );\r\n            emit DividendsDistributed(msg.sender, amountToAdd);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amountToAdd);\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() external {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\r\n        emit DividendWithdrawn(user, _withdrawableDividend);\r\n        (bool success,) = user.call{value: _withdrawableDividend}(\"\");\r\n\r\n        if(!success) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n            return 0;\r\n        }\r\n\r\n        return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) external view returns(uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view returns(uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) external view returns(uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view returns(uint256) {\r\n        return magnifiedDividendPerShare.mul(holderPoints[_owner]).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _increase(address account, uint256 value) internal {\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _reduce(address account, uint256 value) internal {\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = holderPoints[account];\r\n        holderPoints[account] = newBalance;\r\n        if(newBalance > currentBalance) {\r\n            uint256 increaseAmount = newBalance.sub(currentBalance);\r\n            _increase(account, increaseAmount);\r\n            totalPoints += increaseAmount;\r\n        } else if(newBalance < currentBalance) {\r\n            uint256 reduceAmount = currentBalance.sub(newBalance);\r\n            _reduce(account, reduceAmount);\r\n            totalPoints -= reduceAmount;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 balance) {\r\n        account = _account;\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        balance = holderPoints[account];\r\n    }\r\n    \r\n    function setBalance(address payable account, uint256 newBalance) external onlyAuthorized {\r\n        _setBalance(account, newBalance);\r\n\r\n    \tprocessAccount(account, true);\r\n    }\r\n\r\n    function setBalances(address payable[] memory accounts, uint256[] memory newBalances) external onlyAuthorized {\r\n        address payable account;\r\n        uint256 newBalance;\r\n        for(uint8 i = 0; i < accounts.length; i++){\r\n            account = accounts[i];\r\n            newBalance = newBalances[i];\r\n            _setBalance(account, newBalance);\r\n            processAccount(account, true);\r\n        }\r\n    }\r\n    \r\n    function processAccount(address payable account, bool automatic) internal returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n    \tif(amount > 0) {\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n\r\n    \treturn false;\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return totalDividendsDistributed;\r\n    }\r\n\r\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\t\treturn holderPoints[account];\r\n\t}\r\n\r\n    function getNumberOfDividends() external view returns(uint256) {\r\n        return totalPoints;\r\n    }\r\n\r\n    function claim() external {\r\n        processAccount(payable(msg.sender), false);\r\n    }\r\n}\r\n\r\ncontract RewardPoolTokens is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n    event DividendsDistributed(\r\n        address indexed from,\r\n        uint256 weiAmount\r\n    );\r\n    event DividendWithdrawn(\r\n        address indexed to,\r\n        uint256 weiAmount\r\n    );\r\n\r\n    mapping (address => bool) public authorized;\r\n    \r\n    uint256 public fee;\r\n    address public feeReceiver;\r\n    \r\n    PoolInfo public poolInfo;\r\n    string public poolName;\r\n    address public rewardToken;\r\n\r\n    struct PoolInfo {\r\n        uint64 poolStartTime;\r\n        uint48 poolDuration;\r\n        uint64 payoutFrequency;\r\n        uint64 lastPayout;\r\n        uint8 totalPayouts;\r\n    }\r\n\r\n    uint256 constant internal magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n                                                                            \r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n    \r\n    mapping (address => uint256) public holderPoints;\r\n\r\n    uint256 public totalPoints;\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    uint256 public totalForDistribution;\r\n\r\n    constructor(address _feeReceiver, uint256 _fee, string memory _poolName, uint64 _poolStartTime, uint48 _poolDuration, uint64 _payoutFrequency, address _pointSetter, address _rewardToken){\r\n        PoolInfo memory poolInfoMem;\r\n        fee = _fee;\r\n        feeReceiver = _feeReceiver;\r\n        require(_poolDuration % _payoutFrequency == 0, \"Duration must be evenly divisible by payout frequency\");\r\n        poolName = _poolName;\r\n        poolInfoMem.poolDuration = _poolDuration;\r\n        poolInfoMem.poolStartTime = _poolStartTime;\r\n        poolInfoMem.payoutFrequency = _payoutFrequency;\r\n        poolInfoMem.lastPayout = _poolStartTime;\r\n        poolInfoMem.totalPayouts = uint8(_poolDuration / _payoutFrequency);\r\n        poolInfo = poolInfoMem;\r\n        authorized[_pointSetter] = true;\r\n        require(_rewardToken != address(0), \"Reward Token Address not Set\");\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    modifier onlyAuthorized(){\r\n        require(authorized[msg.sender] || msg.sender == owner(), \"Not Authorized\");\r\n        _;\r\n    }\r\n\r\n    function setAuthorized(address _wallet, bool _authorized) external onlyOwner {\r\n        authorized[_wallet] = _authorized;\r\n    }\r\n\r\n    function addTokensForDistribution() public onlyAuthorized {\r\n        uint256 amountForFee;\r\n        uint256 tokenBalance = IERC20(rewardToken).balanceOf(address(this));\r\n        require(tokenBalance > 0, \"No tokens to distribute\");\r\n        if(fee > 0 && tokenBalance > totalForDistribution){\r\n            amountForFee = (tokenBalance - totalForDistribution) * fee / 100;\r\n            if(tokenBalance - amountForFee > totalForDistribution){\r\n                totalForDistribution += tokenBalance - amountForFee - totalForDistribution;\r\n                SafeERC20.safeTransfer(IERC20(rewardToken), feeReceiver, amountForFee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function distributeDividends() external onlyAuthorized {\r\n        PoolInfo memory poolInfoMem = poolInfo;\r\n        require(totalPoints > 0, \"No shares to distribute to\");\r\n        require(block.timestamp >= poolInfoMem.payoutFrequency + poolInfoMem.lastPayout, \"Too early for distribution\");\r\n        uint256 payouts = (block.timestamp - poolInfoMem.lastPayout) / poolInfoMem.payoutFrequency;\r\n        uint256 amountToAdd = totalForDistribution * payouts / poolInfoMem.totalPayouts;\r\n        poolInfoMem.lastPayout += uint64(payouts * poolInfoMem.payoutFrequency);\r\n        poolInfo = poolInfoMem;\r\n\r\n        if(amountToAdd + totalDividendsDistributed > totalForDistribution){\r\n            amountToAdd = totalForDistribution - totalDividendsDistributed;\r\n        }\r\n\r\n        if(amountToAdd > 0){\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amountToAdd).mul(magnitude) / totalPoints\r\n            );\r\n            emit DividendsDistributed(msg.sender, amountToAdd);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amountToAdd);\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() external {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            SafeERC20.safeTransfer(IERC20(rewardToken), user, _withdrawableDividend);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) external view returns(uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view returns(uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) external view returns(uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view returns(uint256) {\r\n        return magnifiedDividendPerShare.mul(holderPoints[_owner]).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _increase(address account, uint256 value) internal {\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _reduce(address account, uint256 value) internal {\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = holderPoints[account];\r\n        holderPoints[account] = newBalance;\r\n        if(newBalance > currentBalance) {\r\n            uint256 increaseAmount = newBalance.sub(currentBalance);\r\n            _increase(account, increaseAmount);\r\n            totalPoints += increaseAmount;\r\n        } else if(newBalance < currentBalance) {\r\n            uint256 reduceAmount = currentBalance.sub(newBalance);\r\n            _reduce(account, reduceAmount);\r\n            totalPoints -= reduceAmount;\r\n        }\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 balance) {\r\n        account = _account;\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        balance = holderPoints[account];\r\n    }\r\n    \r\n    function setBalance(address payable account, uint256 newBalance) external onlyAuthorized {\r\n        if(totalForDistribution == 0){\r\n            addTokensForDistribution();\r\n        }\r\n        _setBalance(account, newBalance);\r\n\r\n    \tprocessAccount(account, true);\r\n    }\r\n\r\n    function setBalances(address payable[] memory accounts, uint256[] memory newBalances) external onlyAuthorized {\r\n        if(totalForDistribution == 0){\r\n            addTokensForDistribution();\r\n        }\r\n        address payable account;\r\n        uint256 newBalance;\r\n        for(uint8 i = 0; i < accounts.length; i++){\r\n            account = accounts[i];\r\n            newBalance = newBalances[i];\r\n            _setBalance(account, newBalance);\r\n            processAccount(account, true);\r\n        }\r\n    }\r\n    \r\n    function processAccount(address payable account, bool automatic) internal returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n    \tif(amount > 0) {\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n\r\n    \treturn false;\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return totalDividendsDistributed;\r\n    }\r\n\r\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\t\treturn holderPoints[account];\r\n\t}\r\n\r\n    function getNumberOfDividends() external view returns(uint256) {\r\n        return totalPoints;\r\n    }\r\n\r\n    function claim() external {\r\n        processAccount(payable(msg.sender), false);\r\n    }\r\n}\r\n\r\ncontract ViralXRewardPoolFactory is Ownable {\r\n    address public feeReceiverETH;\r\n    address public feeReceiverTokens;\r\n    uint256 public fee;\r\n\r\n    address public pointSetter;\r\n\r\n    address[] public rewardPools;\r\n    \r\n    event ETHRewardPoolCreated(address rewardPool);\r\n    event TokensRewardPoolCreated(address rewardPool);\r\n\r\n    constructor(address _feeReceiverETH, address _feeReceiverTokens, uint256 _fee, address _pointSetter){\r\n        feeReceiverETH = _feeReceiverETH;\r\n        feeReceiverTokens = _feeReceiverTokens;\r\n        fee = _fee;\r\n        pointSetter = _pointSetter;\r\n    }\r\n\r\n    function createETHRewardPool(string memory _poolName, uint64 _poolStartTime, uint48 _poolDuration, uint64 _payoutFrequency) external onlyOwner {\r\n        RewardPoolETH newPool = new RewardPoolETH(feeReceiverETH, fee, _poolName, _poolStartTime, _poolDuration, _payoutFrequency, pointSetter);\r\n        rewardPools.push(address(newPool));\r\n        newPool.transferOwnership(msg.sender);\r\n        emit ETHRewardPoolCreated(address(newPool));\r\n    }\r\n\r\n    function createTokenRewardPool(string memory _poolName, uint64 _poolStartTime, uint48 _poolDuration, uint64 _payoutFrequency, address _rewardToken) external onlyOwner {\r\n        RewardPoolTokens newPool = new RewardPoolTokens(feeReceiverTokens, fee, _poolName, _poolStartTime, _poolDuration, _payoutFrequency, pointSetter, _rewardToken);\r\n        rewardPools.push(address(newPool));\r\n        newPool.transferOwnership(msg.sender);\r\n        emit TokensRewardPoolCreated(address(newPool));\r\n    }\r\n    \r\n    function updateFeeReceiverETH(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0), \"Zero Address\");\r\n        feeReceiverETH = _newAddress;\r\n    }\r\n\r\n    function updateFeeReceiverTokens(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0), \"Zero Address\");\r\n        feeReceiverTokens = _newAddress;\r\n    }\r\n\r\n     function updatePointSetter(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0), \"Zero Address\");\r\n        pointSetter = _newAddress;\r\n    }\r\n\r\n    function updateFee(uint256 _newFee) external onlyOwner {\r\n        require(_newFee <= 20, \"Fee must be 0-20%\");\r\n        fee = _newFee;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_poolStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"_poolDuration\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"_payoutFrequency\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_pointSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addTokensForDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"poolStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"poolDuration\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"payoutFrequency\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastPayout\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"totalPayouts\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBalances\",\"type\":\"uint256[]\"}],\"name\":\"setBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalForDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RewardPoolTokens", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008c5a955fd0d96d9ddc8c4f9581745c5cf31d6374000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000006544eda400000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000878611eef70c3fd959aa1dcc550df3407061fb43000000000000000000000000b533687ef77459093368c43e95f8df1c2b5a1f7a000000000000000000000000000000000000000000000000000000000000000b44756d6d79546f6b656e73000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90a06f517c358598a95393848a4c786b53bdec0bae78f3e46e06a36c669f5a0a"}