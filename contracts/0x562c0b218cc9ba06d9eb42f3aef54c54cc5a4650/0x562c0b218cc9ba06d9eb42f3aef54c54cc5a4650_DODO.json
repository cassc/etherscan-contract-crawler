{"SourceCode": "/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Types {\r\n    enum RStatus {ONE, ABOVE_ONE, BELOW_ONE}\r\n}\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"INVALID_OWNER\");\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/DecimalMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant ONE = 10**18;\r\n\r\n    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / ONE;\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(ONE).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(ONE).divCeil(d);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ReentrancyGuard.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title ReentrancyGuard\r\n * @author DODO Breeder\r\n *\r\n * @notice Protect functions from Reentrancy Attack\r\n */\r\ncontract ReentrancyGuard {\r\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\r\n    // zero-state of _ENTERED_ is false\r\n    bool private _ENTERED_;\r\n\r\n    modifier preventReentrant() {\r\n        require(!_ENTERED_, \"REENTRANT\");\r\n        _ENTERED_ = true;\r\n        _;\r\n        _ENTERED_ = false;\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IOracle.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\ninterface IOracle {\r\n    function getPrice() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/intf/IDODOLpToken.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\ninterface IDODOLpToken {\r\n    function mint(address user, uint256 value) external;\r\n\r\n    function burn(address user, uint256 value) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/impl/Storage.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title Storage\r\n * @author DODO Breeder\r\n *\r\n * @notice Local Variables\r\n */\r\ncontract Storage is InitializableOwnable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Variables for Control ============\r\n\r\n    bool internal _INITIALIZED_;\r\n    bool public _CLOSED_;\r\n    bool public _DEPOSIT_QUOTE_ALLOWED_;\r\n    bool public _DEPOSIT_BASE_ALLOWED_;\r\n    bool public _TRADE_ALLOWED_;\r\n    uint256 public _GAS_PRICE_LIMIT_;\r\n\r\n    // ============ Core Address ============\r\n\r\n    address public _SUPERVISOR_; // could freeze system in emergency\r\n    address public _MAINTAINER_; // collect maintainer fee to buy food for DODO\r\n\r\n    address public _BASE_TOKEN_;\r\n    address public _QUOTE_TOKEN_;\r\n    address public _ORACLE_;\r\n\r\n    // ============ Variables for PMM Algorithm ============\r\n\r\n    uint256 public _LP_FEE_RATE_;\r\n    uint256 public _MT_FEE_RATE_;\r\n    uint256 public _K_;\r\n\r\n    Types.RStatus public _R_STATUS_;\r\n    uint256 public _TARGET_BASE_TOKEN_AMOUNT_;\r\n    uint256 public _TARGET_QUOTE_TOKEN_AMOUNT_;\r\n    uint256 public _BASE_BALANCE_;\r\n    uint256 public _QUOTE_BALANCE_;\r\n\r\n    address public _BASE_CAPITAL_TOKEN_;\r\n    address public _QUOTE_CAPITAL_TOKEN_;\r\n\r\n    // ============ Variables for Final Settlement ============\r\n\r\n    uint256 public _BASE_CAPITAL_RECEIVE_QUOTE_;\r\n    uint256 public _QUOTE_CAPITAL_RECEIVE_BASE_;\r\n    mapping(address => bool) public _CLAIMED_;\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlySupervisorOrOwner() {\r\n        require(msg.sender == _SUPERVISOR_ || msg.sender == _OWNER_, \"NOT_SUPERVISOR_OR_OWNER\");\r\n        _;\r\n    }\r\n\r\n    modifier notClosed() {\r\n        require(!_CLOSED_, \"DODO_CLOSED\");\r\n        _;\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n    function _checkDODOParameters() internal view returns (uint256) {\r\n        require(_K_ < DecimalMath.ONE, \"K>=1\");\r\n        require(_K_ > 0, \"K=0\");\r\n        require(_LP_FEE_RATE_.add(_MT_FEE_RATE_) < DecimalMath.ONE, \"FEE_RATE>=1\");\r\n    }\r\n\r\n    function getOraclePrice() public view returns (uint256) {\r\n        return IOracle(_ORACLE_).getPrice();\r\n    }\r\n\r\n    function getBaseCapitalBalanceOf(address lp) public view returns (uint256) {\r\n        return IDODOLpToken(_BASE_CAPITAL_TOKEN_).balanceOf(lp);\r\n    }\r\n\r\n    function getTotalBaseCapital() public view returns (uint256) {\r\n        return IDODOLpToken(_BASE_CAPITAL_TOKEN_).totalSupply();\r\n    }\r\n\r\n    function getQuoteCapitalBalanceOf(address lp) public view returns (uint256) {\r\n        return IDODOLpToken(_QUOTE_CAPITAL_TOKEN_).balanceOf(lp);\r\n    }\r\n\r\n    function getTotalQuoteCapital() public view returns (uint256) {\r\n        return IDODOLpToken(_QUOTE_CAPITAL_TOKEN_).totalSupply();\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 100; // 1.0.0\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IDODOCallee.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\ninterface IDODOCallee {\r\n    function dodoCall(\r\n        bool isBuyBaseToken,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/lib/DODOMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title DODOMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for complex calculating. Including ONE Integration and TWO Quadratic solutions\r\n */\r\nlibrary DODOMath {\r\n    using SafeMath for uint256;\r\n\r\n    /*\r\n        Integrate dodo curve fron V1 to V2\r\n        require V0>=V1>=V2>0\r\n        res = (1-k)i(V1-V2)+ikV0*V0(1/V2-1/V1)\r\n        let V1-V2=delta\r\n        res = i*delta*(1-k+k(V0^2/V1/V2))\r\n    */\r\n    function _GeneralIntegrate(\r\n        uint256 V0,\r\n        uint256 V1,\r\n        uint256 V2,\r\n        uint256 i,\r\n        uint256 k\r\n    ) internal pure returns (uint256) {\r\n        uint256 fairAmount = DecimalMath.mul(i, V1.sub(V2)); // i*delta\r\n        uint256 V0V0V1V2 = DecimalMath.divCeil(V0.mul(V0).div(V1), V2);\r\n        uint256 penalty = DecimalMath.mul(k, V0V0V1V2); // k(V0^2/V1/V2)\r\n        return DecimalMath.mul(fairAmount, DecimalMath.ONE.sub(k).add(penalty));\r\n    }\r\n\r\n    /*\r\n        The same with integration expression above, we have:\r\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\r\n        Given Q1 and deltaB, solve Q2\r\n        This is a quadratic function and the standard version is\r\n        aQ2^2 + bQ2 + c = 0, where\r\n        a=1-k\r\n        -b=(1-k)Q1-kQ0^2/Q1+i*deltaB\r\n        c=-kQ0^2\r\n        and Q2=(-b+sqrt(b^2+4(1-k)kQ0^2))/2(1-k)\r\n        note: another root is negative, abondan\r\n        if deltaBSig=true, then Q2>Q1\r\n        if deltaBSig=false, then Q2<Q1\r\n    */\r\n    function _SolveQuadraticFunctionForTrade(\r\n        uint256 Q0,\r\n        uint256 Q1,\r\n        uint256 ideltaB,\r\n        bool deltaBSig,\r\n        uint256 k\r\n    ) internal pure returns (uint256) {\r\n        // calculate -b value and sig\r\n        // -b = (1-k)Q1-kQ0^2/Q1+i*deltaB\r\n        uint256 kQ02Q1 = DecimalMath.mul(k, Q0).mul(Q0).div(Q1); // kQ0^2/Q1\r\n        uint256 b = DecimalMath.mul(DecimalMath.ONE.sub(k), Q1); // (1-k)Q1\r\n        bool minusbSig = true;\r\n        if (deltaBSig) {\r\n            b = b.add(ideltaB); // (1-k)Q1+i*deltaB\r\n        } else {\r\n            kQ02Q1 = kQ02Q1.add(ideltaB); // i*deltaB+kQ0^2/Q1\r\n        }\r\n        if (b >= kQ02Q1) {\r\n            b = b.sub(kQ02Q1);\r\n            minusbSig = true;\r\n        } else {\r\n            b = kQ02Q1.sub(b);\r\n            minusbSig = false;\r\n        }\r\n\r\n        // calculate sqrt\r\n        uint256 squareRoot = DecimalMath.mul(\r\n            DecimalMath.ONE.sub(k).mul(4),\r\n            DecimalMath.mul(k, Q0).mul(Q0)\r\n        ); // 4(1-k)kQ0^2\r\n        squareRoot = b.mul(b).add(squareRoot).sqrt(); // sqrt(b*b+4(1-k)kQ0*Q0)\r\n\r\n        // final res\r\n        uint256 denominator = DecimalMath.ONE.sub(k).mul(2); // 2(1-k)\r\n        uint256 numerator;\r\n        if (minusbSig) {\r\n            numerator = b.add(squareRoot);\r\n        } else {\r\n            numerator = squareRoot.sub(b);\r\n        }\r\n\r\n        if (deltaBSig) {\r\n            return DecimalMath.divFloor(numerator, denominator);\r\n        } else {\r\n            return DecimalMath.divCeil(numerator, denominator);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Start from the integration function\r\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\r\n        Assume Q2=Q0, Given Q1 and deltaB, solve Q0\r\n        let fairAmount = i*deltaB\r\n    */\r\n    function _SolveQuadraticFunctionForTarget(\r\n        uint256 V1,\r\n        uint256 k,\r\n        uint256 fairAmount\r\n    ) internal pure returns (uint256 V0) {\r\n        // V0 = V1+V1*(sqrt-1)/2k\r\n        uint256 sqrt = DecimalMath.divCeil(DecimalMath.mul(k, fairAmount).mul(4), V1);\r\n        sqrt = sqrt.add(DecimalMath.ONE).mul(DecimalMath.ONE).sqrt();\r\n        uint256 premium = DecimalMath.divCeil(sqrt.sub(DecimalMath.ONE), k.mul(2));\r\n        // V0 is greater than or equal to V1 according to the solution\r\n        return DecimalMath.mul(V1, DecimalMath.ONE.add(premium));\r\n    }\r\n}\r\n\r\n// File: contracts/impl/Pricing.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title Pricing\r\n * @author DODO Breeder\r\n *\r\n * @notice DODO Pricing model\r\n */\r\ncontract Pricing is Storage {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ R = 1 cases ============\r\n\r\n    function _ROneSellBaseToken(uint256 amount, uint256 targetQuoteTokenAmount)\r\n        internal\r\n        view\r\n        returns (uint256 receiveQuoteToken)\r\n    {\r\n        uint256 i = getOraclePrice();\r\n        uint256 Q2 = DODOMath._SolveQuadraticFunctionForTrade(\r\n            targetQuoteTokenAmount,\r\n            targetQuoteTokenAmount,\r\n            DecimalMath.mul(i, amount),\r\n            false,\r\n            _K_\r\n        );\r\n        // in theory Q2 <= targetQuoteTokenAmount\r\n        // however when amount is close to 0, precision problems may cause Q2 > targetQuoteTokenAmount\r\n        return targetQuoteTokenAmount.sub(Q2);\r\n    }\r\n\r\n    function _ROneBuyBaseToken(uint256 amount, uint256 targetBaseTokenAmount)\r\n        internal\r\n        view\r\n        returns (uint256 payQuoteToken)\r\n    {\r\n        require(amount < targetBaseTokenAmount, \"DODO_BASE_BALANCE_NOT_ENOUGH\");\r\n        uint256 B2 = targetBaseTokenAmount.sub(amount);\r\n        payQuoteToken = _RAboveIntegrate(targetBaseTokenAmount, targetBaseTokenAmount, B2);\r\n        return payQuoteToken;\r\n    }\r\n\r\n    // ============ R < 1 cases ============\r\n\r\n    function _RBelowSellBaseToken(\r\n        uint256 amount,\r\n        uint256 quoteBalance,\r\n        uint256 targetQuoteAmount\r\n    ) internal view returns (uint256 receieQuoteToken) {\r\n        uint256 i = getOraclePrice();\r\n        uint256 Q2 = DODOMath._SolveQuadraticFunctionForTrade(\r\n            targetQuoteAmount,\r\n            quoteBalance,\r\n            DecimalMath.mul(i, amount),\r\n            false,\r\n            _K_\r\n        );\r\n        return quoteBalance.sub(Q2);\r\n    }\r\n\r\n    function _RBelowBuyBaseToken(\r\n        uint256 amount,\r\n        uint256 quoteBalance,\r\n        uint256 targetQuoteAmount\r\n    ) internal view returns (uint256 payQuoteToken) {\r\n        // Here we don't require amount less than some value\r\n        // Because it is limited at upper function\r\n        // See Trader.queryBuyBaseToken\r\n        uint256 i = getOraclePrice();\r\n        uint256 Q2 = DODOMath._SolveQuadraticFunctionForTrade(\r\n            targetQuoteAmount,\r\n            quoteBalance,\r\n            DecimalMath.mul(i, amount),\r\n            true,\r\n            _K_\r\n        );\r\n        return Q2.sub(quoteBalance);\r\n    }\r\n\r\n    function _RBelowBackToOne() internal view returns (uint256 payQuoteToken) {\r\n        // important: carefully design the system to make sure spareBase always greater than or equal to 0\r\n        uint256 spareBase = _BASE_BALANCE_.sub(_TARGET_BASE_TOKEN_AMOUNT_);\r\n        uint256 price = getOraclePrice();\r\n        uint256 fairAmount = DecimalMath.mul(spareBase, price);\r\n        uint256 newTargetQuote = DODOMath._SolveQuadraticFunctionForTarget(\r\n            _QUOTE_BALANCE_,\r\n            _K_,\r\n            fairAmount\r\n        );\r\n        return newTargetQuote.sub(_QUOTE_BALANCE_);\r\n    }\r\n\r\n    // ============ R > 1 cases ============\r\n\r\n    function _RAboveBuyBaseToken(\r\n        uint256 amount,\r\n        uint256 baseBalance,\r\n        uint256 targetBaseAmount\r\n    ) internal view returns (uint256 payQuoteToken) {\r\n        require(amount < baseBalance, \"DODO_BASE_BALANCE_NOT_ENOUGH\");\r\n        uint256 B2 = baseBalance.sub(amount);\r\n        return _RAboveIntegrate(targetBaseAmount, baseBalance, B2);\r\n    }\r\n\r\n    function _RAboveSellBaseToken(\r\n        uint256 amount,\r\n        uint256 baseBalance,\r\n        uint256 targetBaseAmount\r\n    ) internal view returns (uint256 receiveQuoteToken) {\r\n        // here we don't require B1 <= targetBaseAmount\r\n        // Because it is limited at upper function\r\n        // See Trader.querySellBaseToken\r\n        uint256 B1 = baseBalance.add(amount);\r\n        return _RAboveIntegrate(targetBaseAmount, B1, baseBalance);\r\n    }\r\n\r\n    function _RAboveBackToOne() internal view returns (uint256 payBaseToken) {\r\n        // important: carefully design the system to make sure spareBase always greater than or equal to 0\r\n        uint256 spareQuote = _QUOTE_BALANCE_.sub(_TARGET_QUOTE_TOKEN_AMOUNT_);\r\n        uint256 price = getOraclePrice();\r\n        uint256 fairAmount = DecimalMath.divFloor(spareQuote, price);\r\n        uint256 newTargetBase = DODOMath._SolveQuadraticFunctionForTarget(\r\n            _BASE_BALANCE_,\r\n            _K_,\r\n            fairAmount\r\n        );\r\n        return newTargetBase.sub(_BASE_BALANCE_);\r\n    }\r\n\r\n    // ============ Helper functions ============\r\n\r\n    function getExpectedTarget() public view returns (uint256 baseTarget, uint256 quoteTarget) {\r\n        uint256 Q = _QUOTE_BALANCE_;\r\n        uint256 B = _BASE_BALANCE_;\r\n        if (_R_STATUS_ == Types.RStatus.ONE) {\r\n            return (_TARGET_BASE_TOKEN_AMOUNT_, _TARGET_QUOTE_TOKEN_AMOUNT_);\r\n        } else if (_R_STATUS_ == Types.RStatus.BELOW_ONE) {\r\n            uint256 payQuoteToken = _RBelowBackToOne();\r\n            return (_TARGET_BASE_TOKEN_AMOUNT_, Q.add(payQuoteToken));\r\n        } else if (_R_STATUS_ == Types.RStatus.ABOVE_ONE) {\r\n            uint256 payBaseToken = _RAboveBackToOne();\r\n            return (B.add(payBaseToken), _TARGET_QUOTE_TOKEN_AMOUNT_);\r\n        }\r\n    }\r\n\r\n    function getMidPrice() public view returns (uint256 midPrice) {\r\n        (uint256 baseTarget, uint256 quoteTarget) = getExpectedTarget();\r\n        if (_R_STATUS_ == Types.RStatus.BELOW_ONE) {\r\n            uint256 R = DecimalMath.divFloor(\r\n                quoteTarget.mul(quoteTarget).div(_QUOTE_BALANCE_),\r\n                _QUOTE_BALANCE_\r\n            );\r\n            R = DecimalMath.ONE.sub(_K_).add(DecimalMath.mul(_K_, R));\r\n            return DecimalMath.divFloor(getOraclePrice(), R);\r\n        } else {\r\n            uint256 R = DecimalMath.divFloor(\r\n                baseTarget.mul(baseTarget).div(_BASE_BALANCE_),\r\n                _BASE_BALANCE_\r\n            );\r\n            R = DecimalMath.ONE.sub(_K_).add(DecimalMath.mul(_K_, R));\r\n            return DecimalMath.mul(getOraclePrice(), R);\r\n        }\r\n    }\r\n\r\n    function _RAboveIntegrate(\r\n        uint256 B0,\r\n        uint256 B1,\r\n        uint256 B2\r\n    ) internal view returns (uint256) {\r\n        uint256 i = getOraclePrice();\r\n        return DODOMath._GeneralIntegrate(B0, B1, B2, i, _K_);\r\n    }\r\n\r\n    // function _RBelowIntegrate(\r\n    //     uint256 Q0,\r\n    //     uint256 Q1,\r\n    //     uint256 Q2\r\n    // ) internal view returns (uint256) {\r\n    //     uint256 i = getOraclePrice();\r\n    //     i = DecimalMath.divFloor(DecimalMath.ONE, i); // 1/i\r\n    //     return DODOMath._GeneralIntegrate(Q0, Q1, Q2, i, _K_);\r\n    // }\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    This is a simplified version of OpenZepplin's SafeERC20 library\r\n\r\n*/\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/impl/Settlement.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title Settlement\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for assets settlement\r\n */\r\ncontract Settlement is Storage {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ============ Events ============\r\n\r\n    event Donate(uint256 amount, bool isBaseToken);\r\n\r\n    event ClaimAssets(address indexed user, uint256 baseTokenAmount, uint256 quoteTokenAmount);\r\n\r\n    // ============ Assets IN/OUT Functions ============\r\n\r\n    function _baseTokenTransferIn(address from, uint256 amount) internal {\r\n        IERC20(_BASE_TOKEN_).safeTransferFrom(from, address(this), amount);\r\n        _BASE_BALANCE_ = _BASE_BALANCE_.add(amount);\r\n    }\r\n\r\n    function _quoteTokenTransferIn(address from, uint256 amount) internal {\r\n        IERC20(_QUOTE_TOKEN_).safeTransferFrom(from, address(this), amount);\r\n        _QUOTE_BALANCE_ = _QUOTE_BALANCE_.add(amount);\r\n    }\r\n\r\n    function _baseTokenTransferOut(address to, uint256 amount) internal {\r\n        IERC20(_BASE_TOKEN_).safeTransfer(to, amount);\r\n        _BASE_BALANCE_ = _BASE_BALANCE_.sub(amount);\r\n    }\r\n\r\n    function _quoteTokenTransferOut(address to, uint256 amount) internal {\r\n        IERC20(_QUOTE_TOKEN_).safeTransfer(to, amount);\r\n        _QUOTE_BALANCE_ = _QUOTE_BALANCE_.sub(amount);\r\n    }\r\n\r\n    // ============ Donate to Liquidity Pool Functions ============\r\n\r\n    function _donateBaseToken(uint256 amount) internal {\r\n        _TARGET_BASE_TOKEN_AMOUNT_ = _TARGET_BASE_TOKEN_AMOUNT_.add(amount);\r\n        emit Donate(amount, true);\r\n    }\r\n\r\n    function _donateQuoteToken(uint256 amount) internal {\r\n        _TARGET_QUOTE_TOKEN_AMOUNT_ = _TARGET_QUOTE_TOKEN_AMOUNT_.add(amount);\r\n        emit Donate(amount, false);\r\n    }\r\n\r\n    function donateBaseToken(uint256 amount) external preventReentrant {\r\n        _baseTokenTransferIn(msg.sender, amount);\r\n        _donateBaseToken(amount);\r\n    }\r\n\r\n    function donateQuoteToken(uint256 amount) external preventReentrant {\r\n        _quoteTokenTransferIn(msg.sender, amount);\r\n        _donateQuoteToken(amount);\r\n    }\r\n\r\n    // ============ Final Settlement Functions ============\r\n\r\n    // last step to shut down dodo\r\n    function finalSettlement() external onlyOwner notClosed {\r\n        _CLOSED_ = true;\r\n        _DEPOSIT_QUOTE_ALLOWED_ = false;\r\n        _DEPOSIT_BASE_ALLOWED_ = false;\r\n        _TRADE_ALLOWED_ = false;\r\n        uint256 totalBaseCapital = getTotalBaseCapital();\r\n        uint256 totalQuoteCapital = getTotalQuoteCapital();\r\n\r\n        if (_QUOTE_BALANCE_ > _TARGET_QUOTE_TOKEN_AMOUNT_) {\r\n            uint256 spareQuote = _QUOTE_BALANCE_.sub(_TARGET_QUOTE_TOKEN_AMOUNT_);\r\n            _BASE_CAPITAL_RECEIVE_QUOTE_ = DecimalMath.divFloor(spareQuote, totalBaseCapital);\r\n        } else {\r\n            _TARGET_QUOTE_TOKEN_AMOUNT_ = _QUOTE_BALANCE_;\r\n        }\r\n\r\n        if (_BASE_BALANCE_ > _TARGET_BASE_TOKEN_AMOUNT_) {\r\n            uint256 spareBase = _BASE_BALANCE_.sub(_TARGET_BASE_TOKEN_AMOUNT_);\r\n            _QUOTE_CAPITAL_RECEIVE_BASE_ = DecimalMath.divFloor(spareBase, totalQuoteCapital);\r\n        } else {\r\n            _TARGET_BASE_TOKEN_AMOUNT_ = _BASE_BALANCE_;\r\n        }\r\n\r\n        _R_STATUS_ = Types.RStatus.ONE;\r\n    }\r\n\r\n    // claim remaining assets after final settlement\r\n    function claimAssets() external preventReentrant {\r\n        require(_CLOSED_, \"DODO_NOT_CLOSED\");\r\n        require(!_CLAIMED_[msg.sender], \"ALREADY_CLAIMED\");\r\n        _CLAIMED_[msg.sender] = true;\r\n        uint256 quoteAmount = DecimalMath.mul(\r\n            getBaseCapitalBalanceOf(msg.sender),\r\n            _BASE_CAPITAL_RECEIVE_QUOTE_\r\n        );\r\n        uint256 baseAmount = DecimalMath.mul(\r\n            getQuoteCapitalBalanceOf(msg.sender),\r\n            _QUOTE_CAPITAL_RECEIVE_BASE_\r\n        );\r\n        _baseTokenTransferOut(msg.sender, baseAmount);\r\n        _quoteTokenTransferOut(msg.sender, quoteAmount);\r\n        emit ClaimAssets(msg.sender, baseAmount, quoteAmount);\r\n        return;\r\n    }\r\n\r\n    // in case someone transfer to contract directly\r\n    function retrieve(address token, uint256 amount) external onlyOwner {\r\n        if (token == _BASE_TOKEN_) {\r\n            require(\r\n                IERC20(_BASE_TOKEN_).balanceOf(address(this)) >= _BASE_BALANCE_.add(amount),\r\n                \"DODO_BASE_BALANCE_NOT_ENOUGH\"\r\n            );\r\n        }\r\n        if (token == _QUOTE_TOKEN_) {\r\n            require(\r\n                IERC20(_QUOTE_TOKEN_).balanceOf(address(this)) >= _QUOTE_BALANCE_.add(amount),\r\n                \"DODO_QUOTE_BALANCE_NOT_ENOUGH\"\r\n            );\r\n        }\r\n        IERC20(token).safeTransfer(msg.sender, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/impl/Trader.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title Trader\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for trader operations\r\n */\r\ncontract Trader is Storage, Pricing, Settlement {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Events ============\r\n\r\n    event SellBaseToken(address indexed seller, uint256 payBase, uint256 receiveQuote);\r\n\r\n    event BuyBaseToken(address indexed buyer, uint256 receiveBase, uint256 payQuote);\r\n\r\n    event ChargeMaintainerFee(address indexed maintainer, bool isBaseToken, uint256 amount);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier tradeAllowed() {\r\n        require(_TRADE_ALLOWED_, \"TRADE_NOT_ALLOWED\");\r\n        _;\r\n    }\r\n\r\n    modifier gasPriceLimit() {\r\n        require(tx.gasprice <= _GAS_PRICE_LIMIT_, \"GAS_PRICE_EXCEED\");\r\n        _;\r\n    }\r\n\r\n    // ============ Trade Functions ============\r\n\r\n    function sellBaseToken(\r\n        uint256 amount,\r\n        uint256 minReceiveQuote,\r\n        bytes calldata data\r\n    ) external tradeAllowed gasPriceLimit preventReentrant returns (uint256) {\r\n        // query price\r\n        (\r\n            uint256 receiveQuote,\r\n            uint256 lpFeeQuote,\r\n            uint256 mtFeeQuote,\r\n            Types.RStatus newRStatus,\r\n            uint256 newQuoteTarget,\r\n            uint256 newBaseTarget\r\n        ) = _querySellBaseToken(amount);\r\n        require(receiveQuote >= minReceiveQuote, \"SELL_BASE_RECEIVE_NOT_ENOUGH\");\r\n\r\n        // settle assets\r\n        _quoteTokenTransferOut(msg.sender, receiveQuote);\r\n        if (data.length > 0) {\r\n            IDODOCallee(msg.sender).dodoCall(false, amount, receiveQuote, data);\r\n        }\r\n        _baseTokenTransferIn(msg.sender, amount);\r\n        if (mtFeeQuote != 0) {\r\n            _quoteTokenTransferOut(_MAINTAINER_, mtFeeQuote);\r\n            emit ChargeMaintainerFee(_MAINTAINER_, false, mtFeeQuote);\r\n        }\r\n\r\n        // update TARGET\r\n        if (_TARGET_QUOTE_TOKEN_AMOUNT_ != newQuoteTarget) {\r\n            _TARGET_QUOTE_TOKEN_AMOUNT_ = newQuoteTarget;\r\n        }\r\n        if (_TARGET_BASE_TOKEN_AMOUNT_ != newBaseTarget) {\r\n            _TARGET_BASE_TOKEN_AMOUNT_ = newBaseTarget;\r\n        }\r\n        if (_R_STATUS_ != newRStatus) {\r\n            _R_STATUS_ = newRStatus;\r\n        }\r\n\r\n        _donateQuoteToken(lpFeeQuote);\r\n        emit SellBaseToken(msg.sender, amount, receiveQuote);\r\n\r\n        return receiveQuote;\r\n    }\r\n\r\n    function buyBaseToken(\r\n        uint256 amount,\r\n        uint256 maxPayQuote,\r\n        bytes calldata data\r\n    ) external tradeAllowed gasPriceLimit preventReentrant returns (uint256) {\r\n        // query price\r\n        (\r\n            uint256 payQuote,\r\n            uint256 lpFeeBase,\r\n            uint256 mtFeeBase,\r\n            Types.RStatus newRStatus,\r\n            uint256 newQuoteTarget,\r\n            uint256 newBaseTarget\r\n        ) = _queryBuyBaseToken(amount);\r\n        require(payQuote <= maxPayQuote, \"BUY_BASE_COST_TOO_MUCH\");\r\n\r\n        // settle assets\r\n        _baseTokenTransferOut(msg.sender, amount);\r\n        if (data.length > 0) {\r\n            IDODOCallee(msg.sender).dodoCall(true, amount, payQuote, data);\r\n        }\r\n        _quoteTokenTransferIn(msg.sender, payQuote);\r\n        if (mtFeeBase != 0) {\r\n            _baseTokenTransferOut(_MAINTAINER_, mtFeeBase);\r\n            emit ChargeMaintainerFee(_MAINTAINER_, true, mtFeeBase);\r\n        }\r\n\r\n        // update TARGET\r\n        if (_TARGET_QUOTE_TOKEN_AMOUNT_ != newQuoteTarget) {\r\n            _TARGET_QUOTE_TOKEN_AMOUNT_ = newQuoteTarget;\r\n        }\r\n        if (_TARGET_BASE_TOKEN_AMOUNT_ != newBaseTarget) {\r\n            _TARGET_BASE_TOKEN_AMOUNT_ = newBaseTarget;\r\n        }\r\n        if (_R_STATUS_ != newRStatus) {\r\n            _R_STATUS_ = newRStatus;\r\n        }\r\n\r\n        _donateBaseToken(lpFeeBase);\r\n        emit BuyBaseToken(msg.sender, amount, payQuote);\r\n\r\n        return payQuote;\r\n    }\r\n\r\n    // ============ Query Functions ============\r\n\r\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote) {\r\n        (receiveQuote, , , , , ) = _querySellBaseToken(amount);\r\n        return receiveQuote;\r\n    }\r\n\r\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote) {\r\n        (payQuote, , , , , ) = _queryBuyBaseToken(amount);\r\n        return payQuote;\r\n    }\r\n\r\n    function _querySellBaseToken(uint256 amount)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 receiveQuote,\r\n            uint256 lpFeeQuote,\r\n            uint256 mtFeeQuote,\r\n            Types.RStatus newRStatus,\r\n            uint256 newQuoteTarget,\r\n            uint256 newBaseTarget\r\n        )\r\n    {\r\n        (newBaseTarget, newQuoteTarget) = getExpectedTarget();\r\n\r\n        uint256 sellBaseAmount = amount;\r\n\r\n        if (_R_STATUS_ == Types.RStatus.ONE) {\r\n            // case 1: R=1\r\n            // R falls below one\r\n            receiveQuote = _ROneSellBaseToken(sellBaseAmount, newQuoteTarget);\r\n            newRStatus = Types.RStatus.BELOW_ONE;\r\n        } else if (_R_STATUS_ == Types.RStatus.ABOVE_ONE) {\r\n            uint256 backToOnePayBase = newBaseTarget.sub(_BASE_BALANCE_);\r\n            uint256 backToOneReceiveQuote = _QUOTE_BALANCE_.sub(newQuoteTarget);\r\n            // case 2: R>1\r\n            // complex case, R status depends on trading amount\r\n            if (sellBaseAmount < backToOnePayBase) {\r\n                // case 2.1: R status do not change\r\n                receiveQuote = _RAboveSellBaseToken(sellBaseAmount, _BASE_BALANCE_, newBaseTarget);\r\n                newRStatus = Types.RStatus.ABOVE_ONE;\r\n                if (receiveQuote > backToOneReceiveQuote) {\r\n                    // [Important corner case!] may enter this branch when some precision problem happens. And consequently contribute to negative spare quote amount\r\n                    // to make sure spare quote>=0, mannually set receiveQuote=backToOneReceiveQuote\r\n                    receiveQuote = backToOneReceiveQuote;\r\n                }\r\n            } else if (sellBaseAmount == backToOnePayBase) {\r\n                // case 2.2: R status changes to ONE\r\n                receiveQuote = backToOneReceiveQuote;\r\n                newRStatus = Types.RStatus.ONE;\r\n            } else {\r\n                // case 2.3: R status changes to BELOW_ONE\r\n                receiveQuote = backToOneReceiveQuote.add(\r\n                    _ROneSellBaseToken(sellBaseAmount.sub(backToOnePayBase), newQuoteTarget)\r\n                );\r\n                newRStatus = Types.RStatus.BELOW_ONE;\r\n            }\r\n        } else {\r\n            // _R_STATUS_ == Types.RStatus.BELOW_ONE\r\n            // case 3: R<1\r\n            receiveQuote = _RBelowSellBaseToken(sellBaseAmount, _QUOTE_BALANCE_, newQuoteTarget);\r\n            newRStatus = Types.RStatus.BELOW_ONE;\r\n        }\r\n\r\n        // count fees\r\n        lpFeeQuote = DecimalMath.mul(receiveQuote, _LP_FEE_RATE_);\r\n        mtFeeQuote = DecimalMath.mul(receiveQuote, _MT_FEE_RATE_);\r\n        receiveQuote = receiveQuote.sub(lpFeeQuote).sub(mtFeeQuote);\r\n\r\n        return (receiveQuote, lpFeeQuote, mtFeeQuote, newRStatus, newQuoteTarget, newBaseTarget);\r\n    }\r\n\r\n    function _queryBuyBaseToken(uint256 amount)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 payQuote,\r\n            uint256 lpFeeBase,\r\n            uint256 mtFeeBase,\r\n            Types.RStatus newRStatus,\r\n            uint256 newQuoteTarget,\r\n            uint256 newBaseTarget\r\n        )\r\n    {\r\n        (newBaseTarget, newQuoteTarget) = getExpectedTarget();\r\n\r\n        // charge fee from user receive amount\r\n        lpFeeBase = DecimalMath.mul(amount, _LP_FEE_RATE_);\r\n        mtFeeBase = DecimalMath.mul(amount, _MT_FEE_RATE_);\r\n        uint256 buyBaseAmount = amount.add(lpFeeBase).add(mtFeeBase);\r\n\r\n        if (_R_STATUS_ == Types.RStatus.ONE) {\r\n            // case 1: R=1\r\n            payQuote = _ROneBuyBaseToken(buyBaseAmount, newBaseTarget);\r\n            newRStatus = Types.RStatus.ABOVE_ONE;\r\n        } else if (_R_STATUS_ == Types.RStatus.ABOVE_ONE) {\r\n            // case 2: R>1\r\n            payQuote = _RAboveBuyBaseToken(buyBaseAmount, _BASE_BALANCE_, newBaseTarget);\r\n            newRStatus = Types.RStatus.ABOVE_ONE;\r\n        } else if (_R_STATUS_ == Types.RStatus.BELOW_ONE) {\r\n            uint256 backToOnePayQuote = newQuoteTarget.sub(_QUOTE_BALANCE_);\r\n            uint256 backToOneReceiveBase = _BASE_BALANCE_.sub(newBaseTarget);\r\n            // case 3: R<1\r\n            // complex case, R status may change\r\n            if (buyBaseAmount < backToOneReceiveBase) {\r\n                // case 3.1: R status do not change\r\n                // no need to check payQuote because spare base token must be greater than zero\r\n                payQuote = _RBelowBuyBaseToken(buyBaseAmount, _QUOTE_BALANCE_, newQuoteTarget);\r\n                newRStatus = Types.RStatus.BELOW_ONE;\r\n            } else if (buyBaseAmount == backToOneReceiveBase) {\r\n                // case 3.2: R status changes to ONE\r\n                payQuote = backToOnePayQuote;\r\n                newRStatus = Types.RStatus.ONE;\r\n            } else {\r\n                // case 3.3: R status changes to ABOVE_ONE\r\n                payQuote = backToOnePayQuote.add(\r\n                    _ROneBuyBaseToken(buyBaseAmount.sub(backToOneReceiveBase), newBaseTarget)\r\n                );\r\n                newRStatus = Types.RStatus.ABOVE_ONE;\r\n            }\r\n        }\r\n\r\n        return (payQuote, lpFeeBase, mtFeeBase, newRStatus, newQuoteTarget, newBaseTarget);\r\n    }\r\n}\r\n\r\n// File: contracts/impl/LiquidityProvider.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title LiquidityProvider\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for liquidity provider operations\r\n */\r\ncontract LiquidityProvider is Storage, Pricing, Settlement {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Events ============\r\n\r\n    event Deposit(\r\n        address indexed payer,\r\n        address indexed receiver,\r\n        bool isBaseToken,\r\n        uint256 amount,\r\n        uint256 lpTokenAmount\r\n    );\r\n\r\n    event Withdraw(\r\n        address indexed payer,\r\n        address indexed receiver,\r\n        bool isBaseToken,\r\n        uint256 amount,\r\n        uint256 lpTokenAmount\r\n    );\r\n\r\n    event ChargePenalty(address indexed payer, bool isBaseToken, uint256 amount);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier depositQuoteAllowed() {\r\n        require(_DEPOSIT_QUOTE_ALLOWED_, \"DEPOSIT_QUOTE_NOT_ALLOWED\");\r\n        _;\r\n    }\r\n\r\n    modifier depositBaseAllowed() {\r\n        require(_DEPOSIT_BASE_ALLOWED_, \"DEPOSIT_BASE_NOT_ALLOWED\");\r\n        _;\r\n    }\r\n\r\n    // ============ Routine Functions ============\r\n\r\n    function withdrawBase(uint256 amount) external returns (uint256) {\r\n        return withdrawBaseTo(msg.sender, amount);\r\n    }\r\n\r\n    function depositBase(uint256 amount) external returns (uint256) {\r\n        return depositBaseTo(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawQuote(uint256 amount) external returns (uint256) {\r\n        return withdrawQuoteTo(msg.sender, amount);\r\n    }\r\n\r\n    function depositQuote(uint256 amount) external returns (uint256) {\r\n        return depositQuoteTo(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawAllBase() external returns (uint256) {\r\n        return withdrawAllBaseTo(msg.sender);\r\n    }\r\n\r\n    function withdrawAllQuote() external returns (uint256) {\r\n        return withdrawAllQuoteTo(msg.sender);\r\n    }\r\n\r\n    // ============ Deposit Functions ============\r\n\r\n    function depositQuoteTo(address to, uint256 amount)\r\n        public\r\n        preventReentrant\r\n        depositQuoteAllowed\r\n        returns (uint256)\r\n    {\r\n        (, uint256 quoteTarget) = getExpectedTarget();\r\n        uint256 totalQuoteCapital = getTotalQuoteCapital();\r\n        uint256 capital = amount;\r\n        if (totalQuoteCapital == 0) {\r\n            // give remaining quote token to lp as a gift\r\n            capital = amount.add(quoteTarget);\r\n        } else if (quoteTarget > 0) {\r\n            capital = amount.mul(totalQuoteCapital).div(quoteTarget);\r\n        }\r\n\r\n        // settlement\r\n        _quoteTokenTransferIn(msg.sender, amount);\r\n        _mintQuoteCapital(to, capital);\r\n        _TARGET_QUOTE_TOKEN_AMOUNT_ = _TARGET_QUOTE_TOKEN_AMOUNT_.add(amount);\r\n\r\n        emit Deposit(msg.sender, to, false, amount, capital);\r\n        return capital;\r\n    }\r\n\r\n    function depositBaseTo(address to, uint256 amount)\r\n        public\r\n        preventReentrant\r\n        depositBaseAllowed\r\n        returns (uint256)\r\n    {\r\n        (uint256 baseTarget, ) = getExpectedTarget();\r\n        uint256 totalBaseCapital = getTotalBaseCapital();\r\n        uint256 capital = amount;\r\n        if (totalBaseCapital == 0) {\r\n            // give remaining base token to lp as a gift\r\n            capital = amount.add(baseTarget);\r\n        } else if (baseTarget > 0) {\r\n            capital = amount.mul(totalBaseCapital).div(baseTarget);\r\n        }\r\n\r\n        // settlement\r\n        _baseTokenTransferIn(msg.sender, amount);\r\n        _mintBaseCapital(to, capital);\r\n        _TARGET_BASE_TOKEN_AMOUNT_ = _TARGET_BASE_TOKEN_AMOUNT_.add(amount);\r\n\r\n        emit Deposit(msg.sender, to, true, amount, capital);\r\n        return capital;\r\n    }\r\n\r\n    // ============ Withdraw Functions ============\r\n\r\n    function withdrawQuoteTo(address to, uint256 amount) public preventReentrant returns (uint256) {\r\n        // calculate capital\r\n        (, uint256 quoteTarget) = getExpectedTarget();\r\n        uint256 totalQuoteCapital = getTotalQuoteCapital();\r\n        require(totalQuoteCapital > 0, \"NO_QUOTE_LP\");\r\n\r\n        uint256 requireQuoteCapital = amount.mul(totalQuoteCapital).divCeil(quoteTarget);\r\n        require(\r\n            requireQuoteCapital <= getQuoteCapitalBalanceOf(msg.sender),\r\n            \"LP_QUOTE_CAPITAL_BALANCE_NOT_ENOUGH\"\r\n        );\r\n\r\n        // handle penalty, penalty may exceed amount\r\n        uint256 penalty = getWithdrawQuotePenalty(amount);\r\n        require(penalty < amount, \"PENALTY_EXCEED\");\r\n\r\n        // settlement\r\n        _TARGET_QUOTE_TOKEN_AMOUNT_ = _TARGET_QUOTE_TOKEN_AMOUNT_.sub(amount);\r\n        _burnQuoteCapital(msg.sender, requireQuoteCapital);\r\n        _quoteTokenTransferOut(to, amount.sub(penalty));\r\n        _donateQuoteToken(penalty);\r\n\r\n        emit Withdraw(msg.sender, to, false, amount.sub(penalty), requireQuoteCapital);\r\n        emit ChargePenalty(msg.sender, false, penalty);\r\n\r\n        return amount.sub(penalty);\r\n    }\r\n\r\n    function withdrawBaseTo(address to, uint256 amount) public preventReentrant returns (uint256) {\r\n        // calculate capital\r\n        (uint256 baseTarget, ) = getExpectedTarget();\r\n        uint256 totalBaseCapital = getTotalBaseCapital();\r\n        require(totalBaseCapital > 0, \"NO_BASE_LP\");\r\n\r\n        uint256 requireBaseCapital = amount.mul(totalBaseCapital).divCeil(baseTarget);\r\n        require(\r\n            requireBaseCapital <= getBaseCapitalBalanceOf(msg.sender),\r\n            \"LP_BASE_CAPITAL_BALANCE_NOT_ENOUGH\"\r\n        );\r\n\r\n        // handle penalty, penalty may exceed amount\r\n        uint256 penalty = getWithdrawBasePenalty(amount);\r\n        require(penalty <= amount, \"PENALTY_EXCEED\");\r\n\r\n        // settlement\r\n        _TARGET_BASE_TOKEN_AMOUNT_ = _TARGET_BASE_TOKEN_AMOUNT_.sub(amount);\r\n        _burnBaseCapital(msg.sender, requireBaseCapital);\r\n        _baseTokenTransferOut(to, amount.sub(penalty));\r\n        _donateBaseToken(penalty);\r\n\r\n        emit Withdraw(msg.sender, to, true, amount.sub(penalty), requireBaseCapital);\r\n        emit ChargePenalty(msg.sender, true, penalty);\r\n\r\n        return amount.sub(penalty);\r\n    }\r\n\r\n    // ============ Withdraw all Functions ============\r\n\r\n    function withdrawAllQuoteTo(address to) public preventReentrant returns (uint256) {\r\n        uint256 withdrawAmount = getLpQuoteBalance(msg.sender);\r\n        uint256 capital = getQuoteCapitalBalanceOf(msg.sender);\r\n\r\n        // handle penalty, penalty may exceed amount\r\n        uint256 penalty = getWithdrawQuotePenalty(withdrawAmount);\r\n        require(penalty <= withdrawAmount, \"PENALTY_EXCEED\");\r\n\r\n        // settlement\r\n        _TARGET_QUOTE_TOKEN_AMOUNT_ = _TARGET_QUOTE_TOKEN_AMOUNT_.sub(withdrawAmount);\r\n        _burnQuoteCapital(msg.sender, capital);\r\n        _quoteTokenTransferOut(to, withdrawAmount.sub(penalty));\r\n        _donateQuoteToken(penalty);\r\n\r\n        emit Withdraw(msg.sender, to, false, withdrawAmount, capital);\r\n        emit ChargePenalty(msg.sender, false, penalty);\r\n\r\n        return withdrawAmount.sub(penalty);\r\n    }\r\n\r\n    function withdrawAllBaseTo(address to) public preventReentrant returns (uint256) {\r\n        uint256 withdrawAmount = getLpBaseBalance(msg.sender);\r\n        uint256 capital = getBaseCapitalBalanceOf(msg.sender);\r\n\r\n        // handle penalty, penalty may exceed amount\r\n        uint256 penalty = getWithdrawBasePenalty(withdrawAmount);\r\n        require(penalty <= withdrawAmount, \"PENALTY_EXCEED\");\r\n\r\n        // settlement\r\n        _TARGET_BASE_TOKEN_AMOUNT_ = _TARGET_BASE_TOKEN_AMOUNT_.sub(withdrawAmount);\r\n        _burnBaseCapital(msg.sender, capital);\r\n        _baseTokenTransferOut(to, withdrawAmount.sub(penalty));\r\n        _donateBaseToken(penalty);\r\n\r\n        emit Withdraw(msg.sender, to, true, withdrawAmount, capital);\r\n        emit ChargePenalty(msg.sender, true, penalty);\r\n\r\n        return withdrawAmount.sub(penalty);\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n    function _mintBaseCapital(address user, uint256 amount) internal {\r\n        IDODOLpToken(_BASE_CAPITAL_TOKEN_).mint(user, amount);\r\n    }\r\n\r\n    function _mintQuoteCapital(address user, uint256 amount) internal {\r\n        IDODOLpToken(_QUOTE_CAPITAL_TOKEN_).mint(user, amount);\r\n    }\r\n\r\n    function _burnBaseCapital(address user, uint256 amount) internal {\r\n        IDODOLpToken(_BASE_CAPITAL_TOKEN_).burn(user, amount);\r\n    }\r\n\r\n    function _burnQuoteCapital(address user, uint256 amount) internal {\r\n        IDODOLpToken(_QUOTE_CAPITAL_TOKEN_).burn(user, amount);\r\n    }\r\n\r\n    // ============ Getter Functions ============\r\n\r\n    function getLpBaseBalance(address lp) public view returns (uint256 lpBalance) {\r\n        uint256 totalBaseCapital = getTotalBaseCapital();\r\n        (uint256 baseTarget, ) = getExpectedTarget();\r\n        if (totalBaseCapital == 0) {\r\n            return 0;\r\n        }\r\n        lpBalance = getBaseCapitalBalanceOf(lp).mul(baseTarget).div(totalBaseCapital);\r\n        return lpBalance;\r\n    }\r\n\r\n    function getLpQuoteBalance(address lp) public view returns (uint256 lpBalance) {\r\n        uint256 totalQuoteCapital = getTotalQuoteCapital();\r\n        (, uint256 quoteTarget) = getExpectedTarget();\r\n        if (totalQuoteCapital == 0) {\r\n            return 0;\r\n        }\r\n        lpBalance = getQuoteCapitalBalanceOf(lp).mul(quoteTarget).div(totalQuoteCapital);\r\n        return lpBalance;\r\n    }\r\n\r\n    function getWithdrawQuotePenalty(uint256 amount) public view returns (uint256 penalty) {\r\n        require(amount <= _QUOTE_BALANCE_, \"DODO_QUOTE_BALANCE_NOT_ENOUGH\");\r\n        if (_R_STATUS_ == Types.RStatus.BELOW_ONE) {\r\n            uint256 spareBase = _BASE_BALANCE_.sub(_TARGET_BASE_TOKEN_AMOUNT_);\r\n            uint256 price = getOraclePrice();\r\n            uint256 fairAmount = DecimalMath.mul(spareBase, price);\r\n            uint256 targetQuote = DODOMath._SolveQuadraticFunctionForTarget(\r\n                _QUOTE_BALANCE_,\r\n                _K_,\r\n                fairAmount\r\n            );\r\n            // if amount = _QUOTE_BALANCE_, div error\r\n            uint256 targetQuoteWithWithdraw = DODOMath._SolveQuadraticFunctionForTarget(\r\n                _QUOTE_BALANCE_.sub(amount),\r\n                _K_,\r\n                fairAmount\r\n            );\r\n            return targetQuote.sub(targetQuoteWithWithdraw.add(amount));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getWithdrawBasePenalty(uint256 amount) public view returns (uint256 penalty) {\r\n        require(amount <= _BASE_BALANCE_, \"DODO_BASE_BALANCE_NOT_ENOUGH\");\r\n        if (_R_STATUS_ == Types.RStatus.ABOVE_ONE) {\r\n            uint256 spareQuote = _QUOTE_BALANCE_.sub(_TARGET_QUOTE_TOKEN_AMOUNT_);\r\n            uint256 price = getOraclePrice();\r\n            uint256 fairAmount = DecimalMath.divFloor(spareQuote, price);\r\n            uint256 targetBase = DODOMath._SolveQuadraticFunctionForTarget(\r\n                _BASE_BALANCE_,\r\n                _K_,\r\n                fairAmount\r\n            );\r\n            // if amount = _BASE_BALANCE_, div error\r\n            uint256 targetBaseWithWithdraw = DODOMath._SolveQuadraticFunctionForTarget(\r\n                _BASE_BALANCE_.sub(amount),\r\n                _K_,\r\n                fairAmount\r\n            );\r\n            return targetBase.sub(targetBaseWithWithdraw.add(amount));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/impl/Admin.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title Admin\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for admin operations\r\n */\r\ncontract Admin is Storage {\r\n    // ============ Events ============\r\n\r\n    event UpdateGasPriceLimit(uint256 oldGasPriceLimit, uint256 newGasPriceLimit);\r\n\r\n    event UpdateLiquidityProviderFeeRate(\r\n        uint256 oldLiquidityProviderFeeRate,\r\n        uint256 newLiquidityProviderFeeRate\r\n    );\r\n\r\n    event UpdateMaintainerFeeRate(uint256 oldMaintainerFeeRate, uint256 newMaintainerFeeRate);\r\n\r\n    event UpdateK(uint256 oldK, uint256 newK);\r\n\r\n    // ============ Params Setting Functions ============\r\n\r\n    function setOracle(address newOracle) external onlyOwner {\r\n        _ORACLE_ = newOracle;\r\n    }\r\n\r\n    function setSupervisor(address newSupervisor) external onlyOwner {\r\n        _SUPERVISOR_ = newSupervisor;\r\n    }\r\n\r\n    function setMaintainer(address newMaintainer) external onlyOwner {\r\n        _MAINTAINER_ = newMaintainer;\r\n    }\r\n\r\n    function setLiquidityProviderFeeRate(uint256 newLiquidityPorviderFeeRate) external onlyOwner {\r\n        emit UpdateLiquidityProviderFeeRate(_LP_FEE_RATE_, newLiquidityPorviderFeeRate);\r\n        _LP_FEE_RATE_ = newLiquidityPorviderFeeRate;\r\n        _checkDODOParameters();\r\n    }\r\n\r\n    function setMaintainerFeeRate(uint256 newMaintainerFeeRate) external onlyOwner {\r\n        emit UpdateMaintainerFeeRate(_MT_FEE_RATE_, newMaintainerFeeRate);\r\n        _MT_FEE_RATE_ = newMaintainerFeeRate;\r\n        _checkDODOParameters();\r\n    }\r\n\r\n    function setK(uint256 newK) external onlyOwner {\r\n        emit UpdateK(_K_, newK);\r\n        _K_ = newK;\r\n        _checkDODOParameters();\r\n    }\r\n\r\n    function setGasPriceLimit(uint256 newGasPriceLimit) external onlySupervisorOrOwner {\r\n        emit UpdateGasPriceLimit(_GAS_PRICE_LIMIT_, newGasPriceLimit);\r\n        _GAS_PRICE_LIMIT_ = newGasPriceLimit;\r\n    }\r\n\r\n    // ============ System Control Functions ============\r\n\r\n    function disableTrading() external onlySupervisorOrOwner {\r\n        _TRADE_ALLOWED_ = false;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner notClosed {\r\n        _TRADE_ALLOWED_ = true;\r\n    }\r\n\r\n    function disableQuoteDeposit() external onlySupervisorOrOwner {\r\n        _DEPOSIT_QUOTE_ALLOWED_ = false;\r\n    }\r\n\r\n    function enableQuoteDeposit() external onlyOwner notClosed {\r\n        _DEPOSIT_QUOTE_ALLOWED_ = true;\r\n    }\r\n\r\n    function disableBaseDeposit() external onlySupervisorOrOwner {\r\n        _DEPOSIT_BASE_ALLOWED_ = false;\r\n    }\r\n\r\n    function enableBaseDeposit() external onlyOwner notClosed {\r\n        _DEPOSIT_BASE_ALLOWED_ = true;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"INVALID_OWNER\");\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/impl/DODOLpToken.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title DODOLpToken\r\n * @author DODO Breeder\r\n *\r\n * @notice Tokenize liquidity pool assets. An ordinary ERC20 contract with mint and burn functions\r\n */\r\ncontract DODOLpToken is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public symbol = \"DLP\";\r\n    address public originToken;\r\n\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    // ============ Events ============\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    event Mint(address indexed user, uint256 value);\r\n\r\n    event Burn(address indexed user, uint256 value);\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor(address _originToken) public {\r\n        originToken = _originToken;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        string memory lpTokenSuffix = \"_DODO_LP_TOKEN_\";\r\n        return string(abi.encodePacked(IERC20(originToken).name(), lpTokenSuffix));\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return IERC20(originToken).decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param to The address to transfer to.\r\n     * @param amount The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        require(amount <= balances[msg.sender], \"BALANCE_NOT_ENOUGH\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the the balance of.\r\n     * @return balance An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance) {\r\n        return balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param amount uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        require(amount <= balances[from], \"BALANCE_NOT_ENOUGH\");\r\n        require(amount <= allowed[from][msg.sender], \"ALLOWANCE_NOT_ENOUGH\");\r\n\r\n        balances[from] = balances[from].sub(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowed[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function mint(address user, uint256 value) external onlyOwner {\r\n        balances[user] = balances[user].add(value);\r\n        totalSupply = totalSupply.add(value);\r\n        emit Mint(user, value);\r\n        emit Transfer(address(0), user, value);\r\n    }\r\n\r\n    function burn(address user, uint256 value) external onlyOwner {\r\n        balances[user] = balances[user].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Burn(user, value);\r\n        emit Transfer(user, address(0), value);\r\n    }\r\n}\r\n\r\n// File: contracts/dodo.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title DODO\r\n * @author DODO Breeder\r\n *\r\n * @notice Entrance for users\r\n */\r\ncontract DODO is Admin, Trader, LiquidityProvider {\r\n    function init(\r\n        address owner,\r\n        address supervisor,\r\n        address maintainer,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address oracle,\r\n        uint256 lpFeeRate,\r\n        uint256 mtFeeRate,\r\n        uint256 k,\r\n        uint256 gasPriceLimit\r\n    ) external {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _INITIALIZED_ = true;\r\n\r\n        // constructor\r\n        _OWNER_ = owner;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n\r\n        _SUPERVISOR_ = supervisor;\r\n        _MAINTAINER_ = maintainer;\r\n        _BASE_TOKEN_ = baseToken;\r\n        _QUOTE_TOKEN_ = quoteToken;\r\n        _ORACLE_ = oracle;\r\n\r\n        _DEPOSIT_BASE_ALLOWED_ = true;\r\n        _DEPOSIT_QUOTE_ALLOWED_ = true;\r\n        _TRADE_ALLOWED_ = true;\r\n        _GAS_PRICE_LIMIT_ = gasPriceLimit;\r\n\r\n        _LP_FEE_RATE_ = lpFeeRate;\r\n        _MT_FEE_RATE_ = mtFeeRate;\r\n        _K_ = k;\r\n        _R_STATUS_ = Types.RStatus.ONE;\r\n\r\n        _BASE_CAPITAL_TOKEN_ = address(new DODOLpToken(_BASE_TOKEN_));\r\n        _QUOTE_CAPITAL_TOKEN_ = address(new DODOLpToken(_QUOTE_TOKEN_));\r\n\r\n        _checkDODOParameters();\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payQuote\",\"type\":\"uint256\"}],\"name\":\"BuyBaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChargeMaintainerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChargePenalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToken\",\"type\":\"bool\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveQuote\",\"type\":\"uint256\"}],\"name\":\"SellBaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGasPriceLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateGasPriceLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldK\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newK\",\"type\":\"uint256\"}],\"name\":\"UpdateK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidityProviderFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidityProviderFeeRate\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityProviderFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaintainerFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaintainerFeeRate\",\"type\":\"uint256\"}],\"name\":\"UpdateMaintainerFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBaseToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BASE_BALANCE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_CAPITAL_RECEIVE_QUOTE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_CAPITAL_TOKEN_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_TOKEN_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_CLAIMED_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CLOSED_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEPOSIT_BASE_ALLOWED_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEPOSIT_QUOTE_ALLOWED_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GAS_PRICE_LIMIT_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_K_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LP_FEE_RATE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAINTAINER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MT_FEE_RATE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ORACLE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_BALANCE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_CAPITAL_RECEIVE_BASE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_CAPITAL_TOKEN_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_TOKEN_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_R_STATUS_\",\"outputs\":[{\"internalType\":\"enum Types.RStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SUPERVISOR_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TARGET_BASE_TOKEN_AMOUNT_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TARGET_QUOTE_TOKEN_AMOUNT_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TRADE_ALLOWED_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayQuote\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBaseTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositQuoteTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBaseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuoteDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateQuoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBaseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableQuoteDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getBaseCapitalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTarget\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getLpBaseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getLpQuoteBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"midPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOraclePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getQuoteCapitalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBaseCapital\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalQuoteCapital\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getWithdrawBasePenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getWithdrawQuotePenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supervisor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mtFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"queryBuyBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payQuote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"querySellBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveQuote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveQuote\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sellBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newK\",\"type\":\"uint256\"}],\"name\":\"setK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityPorviderFeeRate\",\"type\":\"uint256\"}],\"name\":\"setLiquidityProviderFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"setMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaintainerFeeRate\",\"type\":\"uint256\"}],\"name\":\"setMaintainerFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSupervisor\",\"type\":\"address\"}],\"name\":\"setSupervisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAllBaseTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAllQuoteTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBaseTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawQuoteTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DODO", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c1e1b62e47948255d166a6fb5548391cda62d6922ddf060330947b348adb8696"}