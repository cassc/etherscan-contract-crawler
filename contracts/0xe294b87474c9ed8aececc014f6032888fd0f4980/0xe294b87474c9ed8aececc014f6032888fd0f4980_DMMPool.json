{"SourceCode": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/MathExt.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\nlibrary MathExt {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant PRECISION = (10**18);\r\n\r\n    /// @dev Returns x*y in precision\r\n    function mulInPrecision(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x.mul(y) / PRECISION;\r\n    }\r\n\r\n    /// @dev source: dsMath\r\n    /// @param xInPrecision should be < PRECISION, so this can not overflow\r\n    /// @return zInPrecision = (x/PRECISION) ^k * PRECISION\r\n    function unsafePowInPrecision(uint256 xInPrecision, uint256 k)\r\n        internal\r\n        pure\r\n        returns (uint256 zInPrecision)\r\n    {\r\n        require(xInPrecision <= PRECISION, \"MathExt: x > PRECISION\");\r\n        zInPrecision = k % 2 != 0 ? xInPrecision : PRECISION;\r\n\r\n        for (k /= 2; k != 0; k /= 2) {\r\n            xInPrecision = (xInPrecision * xInPrecision) / PRECISION;\r\n\r\n            if (k % 2 != 0) {\r\n                zInPrecision = (zInPrecision * xInPrecision) / PRECISION;\r\n            }\r\n        }\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/FeeFomula.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\nlibrary FeeFomula {\r\n    using SafeMath for uint256;\r\n    using MathExt for uint256;\r\n\r\n    uint256 private constant PRECISION = 10**18;\r\n    uint256 private constant R0 = 1477405064814996100; // 1.4774050648149961\r\n\r\n    uint256 private constant C0 = (60 * PRECISION) / 10000;\r\n\r\n    uint256 private constant A = uint256(PRECISION * 20000) / 27;\r\n    uint256 private constant B = uint256(PRECISION * 250) / 9;\r\n    uint256 private constant C1 = uint256(PRECISION * 985) / 27;\r\n    uint256 private constant U = (120 * PRECISION) / 100;\r\n\r\n    uint256 private constant G = (836 * PRECISION) / 1000;\r\n    uint256 private constant F = 5 * PRECISION;\r\n    uint256 private constant L = (2 * PRECISION) / 10000;\r\n    // C2 = 25 * PRECISION - (F * (PRECISION - G)**2) / ((PRECISION - G)**2 + L * PRECISION)\r\n    uint256 private constant C2 = 20036905816356657810;\r\n\r\n    /// @dev calculate fee from rFactorInPrecision, see section 3.2 in dmmSwap white paper\r\n    /// @dev fee in [15, 60] bps\r\n    /// @return fee percentage in Precision\r\n    function getFee(uint256 rFactorInPrecision) internal pure returns (uint256) {\r\n        if (rFactorInPrecision >= R0) {\r\n            return C0;\r\n        } else if (rFactorInPrecision >= PRECISION) {\r\n            // C1 + A * (r-U)^3 + b * (r -U)\r\n            if (rFactorInPrecision > U) {\r\n                uint256 tmp = rFactorInPrecision - U;\r\n                uint256 tmp3 = tmp.unsafePowInPrecision(3);\r\n                return (C1.add(A.mulInPrecision(tmp3)).add(B.mulInPrecision(tmp))) / 10000;\r\n            } else {\r\n                uint256 tmp = U - rFactorInPrecision;\r\n                uint256 tmp3 = tmp.unsafePowInPrecision(3);\r\n                return C1.sub(A.mulInPrecision(tmp3)).sub(B.mulInPrecision(tmp)) / 10000;\r\n            }\r\n        } else {\r\n            // [ C2 + sign(r - G) *  F * (r-G) ^2 / (L + (r-G) ^2) ] / 10000\r\n            uint256 tmp = (\r\n                rFactorInPrecision > G ? (rFactorInPrecision - G) : (G - rFactorInPrecision)\r\n            );\r\n            tmp = tmp.unsafePowInPrecision(2);\r\n            uint256 tmp2 = F.mul(tmp).div(tmp.add(L));\r\n            if (rFactorInPrecision > G) {\r\n                return C2.add(tmp2) / 10000;\r\n            } else {\r\n                return C2.sub(tmp2) / 10000;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Permit.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IERC20Permit is IERC20 {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File: contracts/libraries/ERC20Permit.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/// @dev https://eips.ethereum.org/EIPS/eip-2612\r\ncontract ERC20Permit is ERC20, IERC20Permit {\r\n    /// @dev To make etherscan auto-verify new pool, this variable is not immutable\r\n    bytes32 public domainSeparator;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32\r\n        public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory version\r\n    ) public ERC20(name, symbol) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        domainSeparator = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(version)),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external override {\r\n        require(deadline >= block.timestamp, \"ERC20Permit: EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                keccak256(\r\n                    abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)\r\n                )\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == owner,\r\n            \"ERC20Permit: INVALID_SIGNATURE\"\r\n        );\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IDMMFactory.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IDMMFactory {\r\n    function createPool(\r\n        IERC20 tokenA,\r\n        IERC20 tokenB,\r\n        uint32 ampBps\r\n    ) external returns (address pool);\r\n\r\n    function setFeeConfiguration(address feeTo, uint16 governmentFeeBps) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function getFeeConfiguration() external view returns (address feeTo, uint16 governmentFeeBps);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function allPools(uint256) external view returns (address pool);\r\n\r\n    function allPoolsLength() external view returns (uint256);\r\n\r\n    function getUnamplifiedPool(IERC20 token0, IERC20 token1) external view returns (address);\r\n\r\n    function getPools(IERC20 token0, IERC20 token1)\r\n        external\r\n        view\r\n        returns (address[] memory _tokenPools);\r\n\r\n    function isPool(\r\n        IERC20 token0,\r\n        IERC20 token1,\r\n        address pool\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IDMMCallee.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IDMMCallee {\r\n    function dmmSwapCall(\r\n        address sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IDMMPool.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IDMMPool {\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function sync() external;\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1);\r\n\r\n    function getTradeInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _vReserve0,\r\n            uint112 _vReserve1,\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint256 feeInPrecision\r\n        );\r\n\r\n    function token0() external view returns (IERC20);\r\n\r\n    function token1() external view returns (IERC20);\r\n\r\n    function ampBps() external view returns (uint32);\r\n\r\n    function factory() external view returns (IDMMFactory);\r\n\r\n    function kLast() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/VolumeTrendRecorder.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/// @dev contract to calculate volume trend. See secion 3.1 in the white paper\r\n/// @dev EMA stands for Exponential moving average\r\n/// @dev https://en.wikipedia.org/wiki/Moving_average\r\ncontract VolumeTrendRecorder {\r\n    using MathExt for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\r\n    uint256 internal constant PRECISION = 10**18;\r\n    uint256 private constant SHORT_ALPHA = (2 * PRECISION) / 5401;\r\n    uint256 private constant LONG_ALPHA = (2 * PRECISION) / 10801;\r\n\r\n    uint128 internal shortEMA;\r\n    uint128 internal longEMA;\r\n    // total volume in current block\r\n    uint128 internal currentBlockVolume;\r\n    uint128 internal lastTradeBlock;\r\n\r\n    event UpdateEMA(uint256 shortEMA, uint256 longEMA, uint128 lastBlockVolume, uint256 skipBlock);\r\n\r\n    constructor(uint128 _emaInit) public {\r\n        shortEMA = _emaInit;\r\n        longEMA = _emaInit;\r\n        lastTradeBlock = safeUint128(block.number);\r\n    }\r\n\r\n    function getVolumeTrendData()\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _shortEMA,\r\n            uint128 _longEMA,\r\n            uint128 _currentBlockVolume,\r\n            uint128 _lastTradeBlock\r\n        )\r\n    {\r\n        _shortEMA = shortEMA;\r\n        _longEMA = longEMA;\r\n        _currentBlockVolume = currentBlockVolume;\r\n        _lastTradeBlock = lastTradeBlock;\r\n    }\r\n\r\n    /// @dev records a new trade, update ema and returns current rFactor for this trade\r\n    /// @return rFactor in Precision for this trade\r\n    function recordNewUpdatedVolume(uint256 blockNumber, uint256 value)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // this can not be underflow because block.number always increases\r\n        uint256 skipBlock = blockNumber - lastTradeBlock;\r\n        if (skipBlock == 0) {\r\n            currentBlockVolume = safeUint128(\r\n                uint256(currentBlockVolume).add(value),\r\n                \"volume exceeds valid range\"\r\n            );\r\n            return calculateRFactor(uint256(shortEMA), uint256(longEMA));\r\n        }\r\n        uint128 _currentBlockVolume = currentBlockVolume;\r\n        uint256 _shortEMA = newEMA(shortEMA, SHORT_ALPHA, currentBlockVolume);\r\n        uint256 _longEMA = newEMA(longEMA, LONG_ALPHA, currentBlockVolume);\r\n        // ema = ema * (1-aplha) ^(skipBlock -1)\r\n        _shortEMA = _shortEMA.mulInPrecision(\r\n            (PRECISION - SHORT_ALPHA).unsafePowInPrecision(skipBlock - 1)\r\n        );\r\n        _longEMA = _longEMA.mulInPrecision(\r\n            (PRECISION - LONG_ALPHA).unsafePowInPrecision(skipBlock - 1)\r\n        );\r\n        shortEMA = safeUint128(_shortEMA);\r\n        longEMA = safeUint128(_longEMA);\r\n        currentBlockVolume = safeUint128(value);\r\n        lastTradeBlock = safeUint128(blockNumber);\r\n\r\n        emit UpdateEMA(_shortEMA, _longEMA, _currentBlockVolume, skipBlock);\r\n\r\n        return calculateRFactor(_shortEMA, _longEMA);\r\n    }\r\n\r\n    /// @return rFactor in Precision for this trade\r\n    function getRFactor(uint256 blockNumber) internal view returns (uint256) {\r\n        // this can not be underflow because block.number always increases\r\n        uint256 skipBlock = blockNumber - lastTradeBlock;\r\n        if (skipBlock == 0) {\r\n            return calculateRFactor(shortEMA, longEMA);\r\n        }\r\n        uint256 _shortEMA = newEMA(shortEMA, SHORT_ALPHA, currentBlockVolume);\r\n        uint256 _longEMA = newEMA(longEMA, LONG_ALPHA, currentBlockVolume);\r\n        _shortEMA = _shortEMA.mulInPrecision(\r\n            (PRECISION - SHORT_ALPHA).unsafePowInPrecision(skipBlock - 1)\r\n        );\r\n        _longEMA = _longEMA.mulInPrecision(\r\n            (PRECISION - LONG_ALPHA).unsafePowInPrecision(skipBlock - 1)\r\n        );\r\n        return calculateRFactor(_shortEMA, _longEMA);\r\n    }\r\n\r\n    function calculateRFactor(uint256 _shortEMA, uint256 _longEMA)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_longEMA == 0) {\r\n            return 0;\r\n        }\r\n        return (_shortEMA * MathExt.PRECISION) / _longEMA;\r\n    }\r\n\r\n    /// @dev return newEMA value\r\n    /// @param ema previous ema value in wei\r\n    /// @param alpha in Precicion (required < Precision)\r\n    /// @param value current value to update ema\r\n    /// @dev ema and value is uint128 and alpha < Percison\r\n    /// @dev so this function can not overflow and returned ema is not overflow uint128\r\n    function newEMA(\r\n        uint128 ema,\r\n        uint256 alpha,\r\n        uint128 value\r\n    ) internal pure returns (uint256) {\r\n        assert(alpha < PRECISION);\r\n        return ((PRECISION - alpha) * uint256(ema) + alpha * uint256(value)) / PRECISION;\r\n    }\r\n\r\n    function safeUint128(uint256 v) internal pure returns (uint128) {\r\n        require(v <= MAX_UINT128, \"overflow uint128\");\r\n        return uint128(v);\r\n    }\r\n\r\n    function safeUint128(uint256 v, string memory errorMessage) internal pure returns (uint128) {\r\n        require(v <= MAX_UINT128, errorMessage);\r\n        return uint128(v);\r\n    }\r\n}\r\n\r\n// File: contracts/DMMPool.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DMMPool is IDMMPool, ERC20Permit, ReentrancyGuard, VolumeTrendRecorder {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 internal constant MAX_UINT112 = 2**112 - 1;\r\n    uint256 internal constant BPS = 10000;\r\n\r\n    struct ReserveData {\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint256 vReserve0;\r\n        uint256 vReserve1; // only used when isAmpPool = true\r\n    }\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n    /// @dev To make etherscan auto-verify new pool, these variables are not immutable\r\n    IDMMFactory public override factory;\r\n    IERC20 public override token0;\r\n    IERC20 public override token1;\r\n\r\n    /// @dev uses single storage slot, accessible via getReservesData\r\n    uint112 internal reserve0;\r\n    uint112 internal reserve1;\r\n    uint32 public override ampBps;\r\n    /// @dev addition param only when amplification factor > 1\r\n    uint112 internal vReserve0;\r\n    uint112 internal vReserve1;\r\n\r\n    /// @dev vReserve0 * vReserve1, as of immediately after the most recent liquidity event\r\n    uint256 public override kLast;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to,\r\n        uint256 feeInPrecision\r\n    );\r\n    event Sync(uint256 vReserve0, uint256 vReserve1, uint256 reserve0, uint256 reserve1);\r\n\r\n    constructor() public ERC20Permit(\"KyberDMM LP\", \"DMM-LP\", \"1\") VolumeTrendRecorder(0) {\r\n        factory = IDMMFactory(msg.sender);\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        IERC20 _token0,\r\n        IERC20 _token1,\r\n        uint32 _ampBps\r\n    ) external {\r\n        require(msg.sender == address(factory), \"DMM: FORBIDDEN\");\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        ampBps = _ampBps;\r\n    }\r\n\r\n    /// @dev this low-level function should be called from a contract\r\n    ///                 which performs important safety checks\r\n    function mint(address to) external override nonReentrant returns (uint256 liquidity) {\r\n        (bool isAmpPool, ReserveData memory data) = getReservesData();\r\n        ReserveData memory _data;\r\n        _data.reserve0 = token0.balanceOf(address(this));\r\n        _data.reserve1 = token1.balanceOf(address(this));\r\n        uint256 amount0 = _data.reserve0.sub(data.reserve0);\r\n        uint256 amount1 = _data.reserve1.sub(data.reserve1);\r\n\r\n        bool feeOn = _mintFee(isAmpPool, data);\r\n        uint256 _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            if (isAmpPool) {\r\n                uint32 _ampBps = ampBps;\r\n                _data.vReserve0 = _data.reserve0.mul(_ampBps) / BPS;\r\n                _data.vReserve1 = _data.reserve1.mul(_ampBps) / BPS;\r\n            }\r\n            liquidity = MathExt.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(-1), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(\r\n                amount0.mul(_totalSupply) / data.reserve0,\r\n                amount1.mul(_totalSupply) / data.reserve1\r\n            );\r\n            if (isAmpPool) {\r\n                uint256 b = liquidity.add(_totalSupply);\r\n                _data.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, _data.reserve0);\r\n                _data.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, _data.reserve1);\r\n            }\r\n        }\r\n        require(liquidity > 0, \"DMM: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n        _mint(to, liquidity);\r\n\r\n        _update(isAmpPool, _data);\r\n        if (feeOn) kLast = getK(isAmpPool, _data);\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    /// @dev this low-level function should be called from a contract\r\n    /// @dev which performs important safety checks\r\n    /// @dev user must transfer LP token to this contract before call burn\r\n    function burn(address to)\r\n        external\r\n        override\r\n        nonReentrant\r\n        returns (uint256 amount0, uint256 amount1)\r\n    {\r\n        (bool isAmpPool, ReserveData memory data) = getReservesData(); // gas savings\r\n        IERC20 _token0 = token0; // gas savings\r\n        IERC20 _token1 = token1; // gas savings\r\n\r\n        uint256 balance0 = _token0.balanceOf(address(this));\r\n        uint256 balance1 = _token1.balanceOf(address(this));\r\n        require(balance0 >= data.reserve0 && balance1 >= data.reserve1, \"DMM: UNSYNC_RESERVES\");\r\n        uint256 liquidity = balanceOf(address(this));\r\n\r\n        bool feeOn = _mintFee(isAmpPool, data);\r\n        uint256 _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(amount0 > 0 && amount1 > 0, \"DMM: INSUFFICIENT_LIQUIDITY_BURNED\");\r\n        _burn(address(this), liquidity);\r\n        _token0.safeTransfer(to, amount0);\r\n        _token1.safeTransfer(to, amount1);\r\n        ReserveData memory _data;\r\n        _data.reserve0 = _token0.balanceOf(address(this));\r\n        _data.reserve1 = _token1.balanceOf(address(this));\r\n        if (isAmpPool) {\r\n            uint256 b = Math.min(\r\n                _data.reserve0.mul(_totalSupply) / data.reserve0,\r\n                _data.reserve1.mul(_totalSupply) / data.reserve1\r\n            );\r\n            _data.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, _data.reserve0);\r\n            _data.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, _data.reserve1);\r\n        }\r\n        _update(isAmpPool, _data);\r\n        if (feeOn) kLast = getK(isAmpPool, _data); // data are up-to-date\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    /// @dev this low-level function should be called from a contract\r\n    /// @dev which performs important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata callbackData\r\n    ) external override nonReentrant {\r\n        require(amount0Out > 0 || amount1Out > 0, \"DMM: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        (bool isAmpPool, ReserveData memory data) = getReservesData(); // gas savings\r\n        require(\r\n            amount0Out < data.reserve0 && amount1Out < data.reserve1,\r\n            \"DMM: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n\r\n        ReserveData memory newData;\r\n        {\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n            IERC20 _token0 = token0;\r\n            IERC20 _token1 = token1;\r\n            require(to != address(_token0) && to != address(_token1), \"DMM: INVALID_TO\");\r\n            if (amount0Out > 0) _token0.safeTransfer(to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out > 0) _token1.safeTransfer(to, amount1Out); // optimistically transfer tokens\r\n            if (callbackData.length > 0)\r\n                IDMMCallee(to).dmmSwapCall(msg.sender, amount0Out, amount1Out, callbackData);\r\n            newData.reserve0 = _token0.balanceOf(address(this));\r\n            newData.reserve1 = _token1.balanceOf(address(this));\r\n            if (isAmpPool) {\r\n                newData.vReserve0 = data.vReserve0.add(newData.reserve0).sub(data.reserve0);\r\n                newData.vReserve1 = data.vReserve1.add(newData.reserve1).sub(data.reserve1);\r\n            }\r\n        }\r\n        uint256 amount0In = newData.reserve0 > data.reserve0 - amount0Out\r\n            ? newData.reserve0 - (data.reserve0 - amount0Out)\r\n            : 0;\r\n        uint256 amount1In = newData.reserve1 > data.reserve1 - amount1Out\r\n            ? newData.reserve1 - (data.reserve1 - amount1Out)\r\n            : 0;\r\n        require(amount0In > 0 || amount1In > 0, \"DMM: INSUFFICIENT_INPUT_AMOUNT\");\r\n        uint256 feeInPrecision = verifyBalanceAndUpdateEma(\r\n            amount0In,\r\n            amount1In,\r\n            isAmpPool ? data.vReserve0 : data.reserve0,\r\n            isAmpPool ? data.vReserve1 : data.reserve1,\r\n            isAmpPool ? newData.vReserve0 : newData.reserve0,\r\n            isAmpPool ? newData.vReserve1 : newData.reserve1\r\n        );\r\n\r\n        _update(isAmpPool, newData);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to, feeInPrecision);\r\n    }\r\n\r\n    /// @dev force balances to match reserves\r\n    function skim(address to) external nonReentrant {\r\n        token0.safeTransfer(to, token0.balanceOf(address(this)).sub(reserve0));\r\n        token1.safeTransfer(to, token1.balanceOf(address(this)).sub(reserve1));\r\n    }\r\n\r\n    /// @dev force reserves to match balances\r\n    function sync() external override nonReentrant {\r\n        (bool isAmpPool, ReserveData memory data) = getReservesData();\r\n        bool feeOn = _mintFee(isAmpPool, data);\r\n        ReserveData memory newData;\r\n        newData.reserve0 = IERC20(token0).balanceOf(address(this));\r\n        newData.reserve1 = IERC20(token1).balanceOf(address(this));\r\n        // update virtual reserves if this is amp pool\r\n        if (isAmpPool) {\r\n            uint256 _totalSupply = totalSupply();\r\n            uint256 b = Math.min(\r\n                newData.reserve0.mul(_totalSupply) / data.reserve0,\r\n                newData.reserve1.mul(_totalSupply) / data.reserve1\r\n            );\r\n            newData.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, newData.reserve0);\r\n            newData.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, newData.reserve1);\r\n        }\r\n        _update(isAmpPool, newData);\r\n        if (feeOn) kLast = getK(isAmpPool, newData);\r\n    }\r\n\r\n    /// @dev returns data to calculate amountIn, amountOut\r\n    function getTradeInfo()\r\n        external\r\n        virtual\r\n        override\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint112 _vReserve0,\r\n            uint112 _vReserve1,\r\n            uint256 feeInPrecision\r\n        )\r\n    {\r\n        // gas saving to read reserve data\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        uint32 _ampBps = ampBps;\r\n        _vReserve0 = vReserve0;\r\n        _vReserve1 = vReserve1;\r\n        if (_ampBps == BPS) {\r\n            _vReserve0 = _reserve0;\r\n            _vReserve1 = _reserve1;\r\n        }\r\n        uint256 rFactorInPrecision = getRFactor(block.number);\r\n        feeInPrecision = getFinalFee(FeeFomula.getFee(rFactorInPrecision), _ampBps);\r\n    }\r\n\r\n    /// @dev returns reserve data to calculate amount to add liquidity\r\n    function getReserves() external override view returns (uint112 _reserve0, uint112 _reserve1) {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n    }\r\n\r\n    function name() public override view returns (string memory) {\r\n        IERC20Metadata _token0 = IERC20Metadata(address(token0));\r\n        IERC20Metadata _token1 = IERC20Metadata(address(token1));\r\n        return string(abi.encodePacked(\"KyberDMM LP \", _token0.symbol(), \"-\", _token1.symbol()));\r\n    }\r\n\r\n    function symbol() public override view returns (string memory) {\r\n        IERC20Metadata _token0 = IERC20Metadata(address(token0));\r\n        IERC20Metadata _token1 = IERC20Metadata(address(token1));\r\n        return string(abi.encodePacked(\"DMM-LP \", _token0.symbol(), \"-\", _token1.symbol()));\r\n    }\r\n\r\n    function verifyBalanceAndUpdateEma(\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 beforeReserve0,\r\n        uint256 beforeReserve1,\r\n        uint256 afterReserve0,\r\n        uint256 afterReserve1\r\n    ) internal virtual returns (uint256 feeInPrecision) {\r\n        // volume = beforeReserve0 * amount1In / beforeReserve1 + amount0In (normalized into amount in token 0)\r\n        uint256 volume = beforeReserve0.mul(amount1In).div(beforeReserve1).add(amount0In);\r\n        uint256 rFactorInPrecision = recordNewUpdatedVolume(block.number, volume);\r\n        feeInPrecision = getFinalFee(FeeFomula.getFee(rFactorInPrecision), ampBps);\r\n        // verify balance update matches with fomula\r\n        uint256 balance0Adjusted = afterReserve0.mul(PRECISION);\r\n        balance0Adjusted = balance0Adjusted.sub(amount0In.mul(feeInPrecision));\r\n        balance0Adjusted = balance0Adjusted / PRECISION;\r\n        uint256 balance1Adjusted = afterReserve1.mul(PRECISION);\r\n        balance1Adjusted = balance1Adjusted.sub(amount1In.mul(feeInPrecision));\r\n        balance1Adjusted = balance1Adjusted / PRECISION;\r\n        require(\r\n            balance0Adjusted.mul(balance1Adjusted) >= beforeReserve0.mul(beforeReserve1),\r\n            \"DMM: K\"\r\n        );\r\n    }\r\n\r\n    /// @dev update reserves\r\n    function _update(bool isAmpPool, ReserveData memory data) internal {\r\n        reserve0 = safeUint112(data.reserve0);\r\n        reserve1 = safeUint112(data.reserve1);\r\n        if (isAmpPool) {\r\n            assert(data.vReserve0 >= data.reserve0 && data.vReserve1 >= data.reserve1); // never happen\r\n            vReserve0 = safeUint112(data.vReserve0);\r\n            vReserve1 = safeUint112(data.vReserve1);\r\n        }\r\n        emit Sync(data.vReserve0, data.vReserve1, data.reserve0, data.reserve1);\r\n    }\r\n\r\n    /// @dev if fee is on, mint liquidity equivalent to configured fee of the growth in sqrt(k)\r\n    function _mintFee(bool isAmpPool, ReserveData memory data) internal returns (bool feeOn) {\r\n        (address feeTo, uint16 governmentFeeBps) = factory.getFeeConfiguration();\r\n        feeOn = feeTo != address(0);\r\n        uint256 _kLast = kLast; // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = MathExt.sqrt(getK(isAmpPool, data));\r\n                uint256 rootKLast = MathExt.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = totalSupply().mul(rootK.sub(rootKLast)).mul(\r\n                        governmentFeeBps\r\n                    );\r\n                    uint256 denominator = rootK.add(rootKLast).mul(5000);\r\n                    uint256 liquidity = numerator / denominator;\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    /// @dev gas saving to read reserve data\r\n    function getReservesData() internal view returns (bool isAmpPool, ReserveData memory data) {\r\n        data.reserve0 = reserve0;\r\n        data.reserve1 = reserve1;\r\n        isAmpPool = ampBps != BPS;\r\n        if (isAmpPool) {\r\n            data.vReserve0 = vReserve0;\r\n            data.vReserve1 = vReserve1;\r\n        }\r\n    }\r\n\r\n    function getFinalFee(uint256 feeInPrecision, uint32 _ampBps) internal pure returns (uint256) {\r\n        if (_ampBps <= 20000) {\r\n            return feeInPrecision;\r\n        } else if (_ampBps <= 50000) {\r\n            return (feeInPrecision * 20) / 30;\r\n        } else if (_ampBps <= 200000) {\r\n            return (feeInPrecision * 10) / 30;\r\n        } else {\r\n            return (feeInPrecision * 4) / 30;\r\n        }\r\n    }\r\n\r\n    function getK(bool isAmpPool, ReserveData memory data) internal pure returns (uint256) {\r\n        return isAmpPool ? data.vReserve0 * data.vReserve1 : data.reserve0 * data.reserve1;\r\n    }\r\n\r\n    function safeUint112(uint256 x) internal pure returns (uint112) {\r\n        require(x <= MAX_UINT112, \"DMM: OVERFLOW\");\r\n        return uint112(x);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInPrecision\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vReserve0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vReserve1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortEMA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longEMA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"lastBlockVolume\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skipBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEMA\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampBps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IDMMFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeInfo\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_vReserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_vReserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"feeInPrecision\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVolumeTrendData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_shortEMA\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_longEMA\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_currentBlockVolume\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_lastTradeBlock\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_ampBps\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DMMPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://49f6f8528b3e4b37e72b9bde0aa804ce74fda17a3dc51ea424bf85cf5943707e"}