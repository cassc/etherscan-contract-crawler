{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../lib/AccessControl.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n                set._values[toDeleteIndex] = lastValue;\\n                set._indexes[lastValue] = valueIndex;\\n            }\\n            set._values.pop();\\n            delete set._indexes[value];\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                0,\\n                \\\"Address: low-level call failed\\\"\\n            );\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return\\n            verifyCallResultFromTarget(\\n                target,\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return\\n            verifyCallResultFromTarget(\\n                target,\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return\\n            verifyCallResultFromTarget(\\n                target,\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n    }\\n\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ninterface IERC20Permit {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(\\n            nonceAfter == nonceBefore + 1,\\n            \\\"SafeERC20: permit did not succeed\\\"\\n        );\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\nlibrary FullMath {\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n        unchecked {\\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n}\\n\\ninterface IPair {\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\\ncontract Locker {\\n    using Address for address payable;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeERC20 for IERC20;\\n\\n    struct Lock {\\n        uint256 id;\\n        address token;\\n        address owner;\\n        uint256 amount;\\n        uint256 lockDate;\\n        uint256 tgeDate; // TGE date for vesting locks, unlock date for normal locks\\n        uint256 tgeBps; // In bips. Is 0 for normal locks\\n        uint256 cycle; // Is 0 for normal locks\\n        uint256 cycleBps; // In bips. Is 0 for normal locks\\n        uint256 unlockedAmount;\\n        string description;\\n    }\\n\\n    struct CumulativeLockInfo {\\n        address token;\\n        address factory;\\n        uint256 amount;\\n    }\\n\\n    uint256 private constant ID_PADDING = 1_000_000;\\n\\n    Lock[] private _locks;\\n    mapping(address => EnumerableSet.UintSet) private _userNormalLockIds;\\n\\n    EnumerableSet.AddressSet private _normalLockedTokens;\\n    mapping(address => CumulativeLockInfo) public cumulativeLockInfo;\\n    mapping(address => EnumerableSet.UintSet) private _tokenToLockIds;\\n\\n    modifier validLock(uint256 lockId) {\\n        _getActualIndex(lockId);\\n        _;\\n    }\\n\\n    function vestingLock(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 tgeDate,\\n        uint256 tgeBps,\\n        uint256 cycle,\\n        uint256 cycleBps,\\n        string memory description\\n    ) public returns (uint256 id) {\\n        require(token != address(0), \\\"Invalid token\\\");\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        require(cycle >= 0, \\\"Invalid cycle\\\");\\n        require(tgeBps >= 0 && tgeBps < 10_000, \\\"Invalid bips for TGE\\\");\\n        require(cycleBps >= 0 && cycleBps < 10_000, \\\"Invalid bips for cycle\\\");\\n        require(\\n            tgeBps + cycleBps <= 10_000,\\n            \\\"Sum of TGE bps and cycle should be less than 10000\\\"\\n        );\\n        id = _createLock(\\n            owner,\\n            token,\\n            amount,\\n            tgeDate,\\n            tgeBps,\\n            cycle,\\n            cycleBps,\\n            description\\n        );\\n        _safeTransferFromEnsureExactAmount(\\n            token,\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        return id;\\n    }\\n\\n    function _sumAmount(\\n        uint256[] calldata amounts\\n    ) internal pure returns (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] == 0) {\\n                revert(\\\"Amount cant be zero\\\");\\n            }\\n            sum += amounts[i];\\n        }\\n        return sum;\\n    }\\n\\n    function _createLock(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 tgeDate,\\n        uint256 tgeBps,\\n        uint256 cycle,\\n        uint256 cycleBps,\\n        string memory description\\n    ) internal returns (uint256 id) {\\n        id = _lockNormalToken(\\n            owner,\\n            token,\\n            amount,\\n            tgeDate,\\n            tgeBps,\\n            cycle,\\n            cycleBps,\\n            description\\n        );\\n        return id;\\n    }\\n\\n    function _lockNormalToken(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 tgeDate,\\n        uint256 tgeBps,\\n        uint256 cycle,\\n        uint256 cycleBps,\\n        string memory description\\n    ) private returns (uint256 id) {\\n        id = _registerLock(\\n            owner,\\n            token,\\n            amount,\\n            tgeDate,\\n            tgeBps,\\n            cycle,\\n            cycleBps,\\n            description\\n        );\\n        _userNormalLockIds[owner].add(id);\\n        _normalLockedTokens.add(token);\\n\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[token];\\n        if (tokenInfo.token == address(0)) {\\n            tokenInfo.token = token;\\n            tokenInfo.factory = address(0);\\n        }\\n        tokenInfo.amount = tokenInfo.amount + amount;\\n\\n        _tokenToLockIds[token].add(id);\\n    }\\n\\n    function _registerLock(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 tgeDate,\\n        uint256 tgeBps,\\n        uint256 cycle,\\n        uint256 cycleBps,\\n        string memory description\\n    ) private returns (uint256 id) {\\n        id = _locks.length + ID_PADDING;\\n        Lock memory newLock = Lock({\\n            id: id,\\n            token: token,\\n            owner: owner,\\n            amount: amount,\\n            lockDate: block.timestamp,\\n            tgeDate: tgeDate,\\n            tgeBps: tgeBps,\\n            cycle: cycle,\\n            cycleBps: cycleBps,\\n            unlockedAmount: 0,\\n            description: description\\n        });\\n        _locks.push(newLock);\\n    }\\n\\n    function unlock(uint256 lockId) public validLock(lockId) {\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\n        require(\\n            userLock.owner == msg.sender,\\n            \\\"You are not the owner of this lock\\\"\\n        );\\n\\n        if (userLock.tgeBps > 0) {\\n            _vestingUnlock(userLock);\\n        } else {\\n            _normalUnlock(userLock);\\n        }\\n    }\\n\\n    function _normalUnlock(Lock storage userLock) internal {\\n        require(\\n            block.timestamp >= userLock.tgeDate,\\n            \\\"It is not time to unlock\\\"\\n        );\\n        require(userLock.unlockedAmount == 0, \\\"Nothing to unlock\\\");\\n\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\n            userLock.token\\n        ];\\n\\n        _userNormalLockIds[msg.sender].remove(userLock.id);\\n\\n        uint256 unlockAmount = userLock.amount;\\n\\n        if (tokenInfo.amount <= unlockAmount) {\\n            tokenInfo.amount = 0;\\n        } else {\\n            tokenInfo.amount = tokenInfo.amount - unlockAmount;\\n        }\\n\\n        if (tokenInfo.amount == 0) {\\n            _normalLockedTokens.remove(userLock.token);\\n        }\\n        userLock.unlockedAmount = unlockAmount;\\n\\n        _tokenToLockIds[userLock.token].remove(userLock.id);\\n\\n        IERC20(userLock.token).safeTransfer(msg.sender, unlockAmount);\\n    }\\n\\n    function _vestingUnlock(Lock storage userLock) internal {\\n        uint256 withdrawable = _withdrawableTokens(userLock);\\n        uint256 newTotalUnlockAmount = userLock.unlockedAmount + withdrawable;\\n        require(\\n            withdrawable > 0 && newTotalUnlockAmount <= userLock.amount,\\n            \\\"Nothing to unlock\\\"\\n        );\\n\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\n            userLock.token\\n        ];\\n\\n        if (newTotalUnlockAmount == userLock.amount) {\\n            _userNormalLockIds[msg.sender].remove(userLock.id);\\n            _tokenToLockIds[userLock.token].remove(userLock.id);\\n        }\\n\\n        if (tokenInfo.amount <= withdrawable) {\\n            tokenInfo.amount = 0;\\n        } else {\\n            tokenInfo.amount = tokenInfo.amount - withdrawable;\\n        }\\n\\n        if (tokenInfo.amount == 0) {\\n            _normalLockedTokens.remove(userLock.token);\\n        }\\n        userLock.unlockedAmount = newTotalUnlockAmount;\\n        IERC20(userLock.token).safeTransfer(userLock.owner, withdrawable);\\n    }\\n\\n    function withdrawableTokens(\\n        uint256 lockId\\n    ) external view returns (uint256) {\\n        Lock memory userLock = getLockById(lockId);\\n        return _withdrawableTokens(userLock);\\n    }\\n\\n    function _withdrawableTokens(\\n        Lock memory userLock\\n    ) internal view returns (uint256) {\\n        if (userLock.amount == 0) return 0;\\n        if (userLock.unlockedAmount >= userLock.amount) return 0;\\n        if (block.timestamp < userLock.tgeDate) return 0;\\n        if (userLock.cycle == 0) return 0;\\n\\n        uint256 tgeReleaseAmount = FullMath.mulDiv(\\n            userLock.amount,\\n            userLock.tgeBps,\\n            10_000\\n        );\\n        uint256 cycleReleaseAmount = FullMath.mulDiv(\\n            userLock.amount,\\n            userLock.cycleBps,\\n            10_000\\n        );\\n        uint256 currentTotal = 0;\\n        if (block.timestamp >= userLock.tgeDate) {\\n            currentTotal =\\n                (((block.timestamp - userLock.tgeDate) / userLock.cycle) *\\n                    cycleReleaseAmount) +\\n                tgeReleaseAmount; // Truncation is expected here\\n        }\\n        uint256 withdrawable = 0;\\n        if (currentTotal > userLock.amount) {\\n            withdrawable = userLock.amount - userLock.unlockedAmount;\\n        } else {\\n            withdrawable = currentTotal - userLock.unlockedAmount;\\n        }\\n        return withdrawable;\\n    }\\n\\n    function _safeTransferFromEnsureExactAmount(\\n        address token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 oldRecipientBalance = IERC20(token).balanceOf(recipient);\\n        IERC20(token).safeTransferFrom(sender, recipient, amount);\\n        uint256 newRecipientBalance = IERC20(token).balanceOf(recipient);\\n        require(\\n            newRecipientBalance - oldRecipientBalance == amount,\\n            \\\"Not enough token was transfered\\\"\\n        );\\n    }\\n\\n    function getLockById(uint256 lockId) public view returns (Lock memory) {\\n        return _locks[_getActualIndex(lockId)];\\n    }\\n\\n    function allNormalTokenLockedCount() public view returns (uint256) {\\n        return _normalLockedTokens.length();\\n    }\\n\\n    function getCumulativeNormalTokenLockInfo(\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (CumulativeLockInfo[] memory) {\\n        if (end >= _normalLockedTokens.length()) {\\n            end = _normalLockedTokens.length() - 1;\\n        }\\n        uint256 length = end - start + 1;\\n        CumulativeLockInfo[] memory lockInfo = new CumulativeLockInfo[](length);\\n        uint256 currentIndex = 0;\\n        for (uint256 i = start; i <= end; i++) {\\n            lockInfo[currentIndex] = cumulativeLockInfo[\\n                _normalLockedTokens.at(i)\\n            ];\\n            currentIndex++;\\n        }\\n        return lockInfo;\\n    }\\n\\n    function normalLockCountForUser(\\n        address user\\n    ) public view returns (uint256) {\\n        return _userNormalLockIds[user].length();\\n    }\\n\\n    function normalLocksForUser(\\n        address user\\n    ) external view returns (Lock[] memory) {\\n        uint256 length = _userNormalLockIds[user].length();\\n        Lock[] memory userLocks = new Lock[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            userLocks[i] = getLockById(_userNormalLockIds[user].at(i));\\n        }\\n        return userLocks;\\n    }\\n\\n    function normalLockForUserAtIndex(\\n        address user,\\n        uint256 index\\n    ) external view returns (Lock memory) {\\n        require(normalLockCountForUser(user) > index, \\\"Invalid index\\\");\\n        return getLockById(_userNormalLockIds[user].at(index));\\n    }\\n\\n    function _getActualIndex(uint256 lockId) internal view returns (uint256) {\\n        if (lockId < ID_PADDING) {\\n            revert(\\\"Invalid lock id\\\");\\n        }\\n        uint256 actualIndex = lockId - ID_PADDING;\\n        require(actualIndex < _locks.length, \\\"Invalid lock id\\\");\\n        return actualIndex;\\n    }\\n}\\n\\nabstract contract ReentrancyGuard {\\n    uint internal _unlocked = 1;\\n\\n    modifier nonReentrant() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\\ncontract LaunchPool is AccessControl, ReentrancyGuard, Locker {\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    event UserDepsitedSuccess(address, uint256);\\n\\n    enum PoolType {\\n        PUBLIC,\\n        WHITELIST\\n    }\\n\\n    struct LockingInfo {\\n        uint256 tgeP;\\n        uint256 cycle;\\n        uint256 releaseP10_000;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 buy_rate;\\n        uint256 buy_min;\\n        uint256 buy_max;\\n        uint256 hardcap;\\n        uint256 pool_start;\\n        uint256 pool_end;\\n        PoolType pool_type;\\n        uint256 public_time;\\n        bool canceled;\\n    }\\n\\n    struct PoolStatus {\\n        uint256 raised_amount;\\n        uint256 sold_amount;\\n        uint256 token_withdraw;\\n        uint256 base_withdraw;\\n        uint256 num_buyers;\\n        bool can_claim;\\n    }\\n\\n    struct BuyerInfo {\\n        uint256 base;\\n        uint256 sale;\\n    }\\n\\n    LockingInfo public lockInfo;\\n    PoolInfo public launch_info;\\n    PoolStatus public status;\\n    address public sale_token;\\n    uint public operate = 95;\\n    address public operator;\\n    address public developer;\\n\\n    mapping(address => BuyerInfo) public buyers;\\n    address[] public buyers_addess;\\n\\n    mapping(address => bool) public whitelistInfo;\\n\\n    address deadaddr = 0x000000000000000000000000000000000000dEaD;\\n\\n    modifier IsWhitelisted() {\\n        require(\\n            launch_info.pool_type == PoolType.WHITELIST,\\n            \\\"whitelist not set\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _sale_token,\\n        uint256 _buy_rate,\\n        uint256 _buy_min,\\n        uint256 _buy_max,\\n        uint256 _hardcap,\\n        uint256 _pool_start,\\n        uint256 _pool_end,\\n        uint _pool_type\\n    ) {\\n        sale_token = address(_sale_token);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MODERATOR_ROLE, msg.sender);\\n        _grantRole(OWNER_ROLE, msg.sender);\\n\\n        launch_info.buy_rate = _buy_rate;\\n        launch_info.buy_min = _buy_min;\\n        launch_info.buy_max = _buy_max;\\n        launch_info.hardcap = _hardcap;\\n        launch_info.pool_start = _pool_start;\\n        launch_info.pool_end = _pool_end;\\n\\n        if (_pool_type == 0) {\\n            launch_info.pool_type = PoolType.PUBLIC;\\n        } else {\\n            launch_info.pool_type = PoolType.WHITELIST;\\n        }\\n\\n        launch_info.canceled = false;\\n\\n        operate = 95;\\n        operator = address(0x68DC6cDe0FCe0763EFf3534089e2a90Ef8dC50d1);\\n        developer = address(0xeC6233f3B77764D840a7A5e4617a203ED2a92a6f);\\n\\n        lockInfo.tgeP = 35;\\n        lockInfo.cycle = 30 days;\\n        lockInfo.releaseP10_000 = ((100 - 35) * 100) / 2;\\n    }\\n\\n    receive() external payable {\\n        payable(developer).sendValue(msg.value);\\n    }\\n\\n    function updateSettings(\\n        address _sale_token,\\n        uint256 _buy_rate,\\n        uint256 _buy_min,\\n        uint256 _buy_max,\\n        uint256 _hardcap,\\n        uint256 _pool_start,\\n        uint256 _pool_end,\\n        uint _pool_type\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        sale_token = address(_sale_token);\\n        launch_info.buy_rate = _buy_rate;\\n        launch_info.buy_min = _buy_min;\\n        launch_info.buy_max = _buy_max;\\n        launch_info.hardcap = _hardcap;\\n        launch_info.pool_start = _pool_start;\\n        launch_info.pool_end = _pool_end;\\n\\n        if (_pool_type == 0) {\\n            launch_info.pool_type = PoolType.PUBLIC;\\n        } else {\\n            launch_info.pool_type = PoolType.WHITELIST;\\n        }\\n\\n        launch_info.canceled = false;\\n    }\\n\\n    function updateSettings(\\n        uint _operate,\\n        address _operator,\\n        address _developer\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        operate = _operate;\\n        operator = _operator;\\n        developer = _developer;\\n    }\\n\\n    function updateSettings(\\n        uint256 _seed\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        status.raised_amount = status.raised_amount.add(_seed);\\n    }\\n\\n    function updateLock(\\n        uint256 _tgeP,\\n        uint256 _cycle,\\n        uint256 _divide\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        lockInfo.tgeP = _tgeP;\\n        lockInfo.cycle = _cycle * 24 * 60 * 60;\\n        lockInfo.releaseP10_000 = ((100 - _tgeP) * 100) / _divide;\\n    }\\n\\n    function presaleStatus() public view returns (uint256) {\\n        if (launch_info.canceled == true) {\\n            return 4; // Canceled\\n        }\\n\\n        if (status.raised_amount >= launch_info.hardcap) {\\n            return 2; // Wonderful - reached to Hardcap\\n        }\\n        if (block.timestamp > launch_info.pool_end) {\\n            return 2; // SUCCESS\\n        }\\n        if (\\n            (block.timestamp >= launch_info.pool_start) &&\\n            (block.timestamp <= launch_info.pool_end)\\n        ) {\\n            return 1; // ACTIVE - Deposits enabled, now in Presale\\n        }\\n        return 0; // QUED - Awaiting start block\\n    }\\n\\n    function ownerWithdrawTokens() internal onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(presaleStatus() >= 3); // FAILED\\n\\n        IERC20(address(sale_token)).transfer(\\n            msg.sender,\\n            IERC20(sale_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    function setWhitelistInfo(\\n        address[] memory user\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) IsWhitelisted {\\n        for (uint i = 0; i < user.length; i++) {\\n            whitelistInfo[user[i]] = true;\\n        }\\n    }\\n\\n    function deleteWhitelistInfo(\\n        address[] memory user\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) IsWhitelisted {\\n        for (uint i = 0; i < user.length; i++) {\\n            whitelistInfo[user[i]] = false;\\n        }\\n    }\\n\\n    function setPresaleType(\\n        uint _type,\\n        uint256 time\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_type == 0) {\\n            launch_info.pool_type = PoolType.PUBLIC;\\n        } else {\\n            launch_info.pool_type = PoolType.WHITELIST;\\n        }\\n        launch_info.public_time = time;\\n    }\\n\\n    function setCancel() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(!status.can_claim, \\\"can not cancel\\\");\\n        launch_info.canceled = true;\\n    }\\n\\n    function userContribute() public payable nonReentrant {\\n        require(presaleStatus() == 1, \\\"not active\\\");\\n        BuyerInfo storage buyer = buyers[address(msg.sender)];\\n        uint256 amount_in = msg.value;\\n        uint256 allowance;\\n        if (buyer.base == 0) {\\n            status.num_buyers = status.num_buyers + 1;\\n            buyers_addess.push(address(msg.sender));\\n        }\\n\\n        require(\\n            launch_info.buy_min <= msg.value &&\\n                launch_info.buy_max >= msg.value,\\n            \\\"invalid amount\\\"\\n        );\\n\\n        allowance = launch_info.buy_max.sub(buyer.base);\\n        uint256 remaining = launch_info.hardcap - status.raised_amount;\\n\\n        if (allowance > remaining) {\\n            allowance = remaining;\\n        }\\n\\n        if (amount_in > allowance) {\\n            amount_in = allowance;\\n        }\\n\\n        uint256 tokensSold = amount_in.mul(launch_info.buy_rate).div(10 ** 18);\\n\\n        require(tokensSold > 0, \\\"ZERO_BUY_OR_BUY_MAX\\\");\\n\\n        buyers[address(msg.sender)].sale = buyers[address(msg.sender)].sale.add(\\n            tokensSold\\n        );\\n        status.sold_amount = status.sold_amount.add(tokensSold);\\n\\n        buyers[address(msg.sender)].base = buyers[address(msg.sender)].base.add(\\n            amount_in\\n        );\\n\\n        status.raised_amount = status.raised_amount.add(amount_in);\\n        if (amount_in < msg.value) {\\n            payable(msg.sender).sendValue(msg.value.sub(amount_in));\\n        }\\n        emit UserDepsitedSuccess(msg.sender, msg.value);\\n    }\\n\\n    function userWithdrawTokens() external nonReentrant {\\n        require(presaleStatus() == 2 && status.can_claim, \\\"ERR_CLAIM\\\");\\n        BuyerInfo storage buyer = buyers[msg.sender];\\n\\n        uint256 remaintoken = status.sold_amount.sub(status.token_withdraw);\\n\\n        require(remaintoken >= buyer.sale && buyer.sale > 0, \\\"ERR_WITHDRAW\\\");\\n\\n        uint256 lockId = vestingLock(\\n            msg.sender,\\n            sale_token,\\n            buyer.sale,\\n            block.timestamp.sub(10),\\n            lockInfo.tgeP * 100,\\n            lockInfo.cycle,\\n            lockInfo.releaseP10_000,\\n            \\\"Vesting Launch\\\"\\n        );\\n        require(lockId > 0, \\\"can not lock token\\\");\\n        unlock(lockId);\\n\\n        status.token_withdraw = status.token_withdraw.add(buyer.sale);\\n        buyers[msg.sender].sale = 0;\\n        buyers[msg.sender].base = 0;\\n    }\\n\\n    function owner_finalize()\\n        external\\n        nonReentrant\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(presaleStatus() == 2, \\\"not succeeded\\\");\\n        // need to: get token from admin\\n        uint256 _tokenneed = (launch_info.buy_rate)\\n            .mul(status.raised_amount)\\n            .div(1 ether);\\n\\n        IERC20(sale_token).transferFrom(msg.sender, address(this), _tokenneed);\\n        // distribute eth to team\\n        uint256 _ethsendToOperator = (status.raised_amount * operate) / 100;\\n        if (_ethsendToOperator > 0) {\\n            payable(operator).sendValue(_ethsendToOperator);\\n            payable(developer).sendValue(address(this).balance);\\n        }\\n    }\\n\\n    function owner_enableWithdraw()\\n        external\\n        nonReentrant\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(presaleStatus() == 2, \\\"not succeeded\\\");\\n        status.can_claim = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IAccessControl.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        address[] members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant MODERATOR_ROLE = keccak256(\\\"MODERATOR_ROLE\\\");\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n    constructor() {\\n        _grantRole(OWNER_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) public view virtual override returns (bool) {\\n        for (uint i = 0; i < _roles[role].members.length; i++) {\\n            if (_roles[role].members[i] == account) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(\\n        bytes32 role\\n    ) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function getRoleDatas() internal view virtual returns (RoleData[] memory) {\\n        RoleData[] memory data = new RoleData[](3);\\n        data[0] = _roles[DEFAULT_ADMIN_ROLE];\\n        data[1] = _roles[MODERATOR_ROLE];\\n        data[2] = _roles[OWNER_ROLE];\\n        return data;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override {\\n        require(\\n            account == _msgSender(),\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members.push(account);\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _importRole(bytes32 role, RoleData memory data) internal virtual {\\n        _roles[role] = data;\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            uint256 index = findIndex(_roles[role].members, account);\\n            if (index == type(uint256).max) {\\n                return;\\n            }\\n            remove(_roles[role].members, index);\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    function findIndex(\\n        address[] memory array,\\n        address element\\n    ) public pure returns (uint256) {\\n        for (uint i = 0; i < array.length; i++) {\\n            if (array[i] == element) {\\n                return i;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n\\n    function remove(address[] storage array, uint256 index) internal {\\n        if (index >= array.length) return;\\n\\n        for (uint256 i = index; i < array.length - 1; i++) {\\n            array[i] = array[i + 1];\\n        }\\n        delete array[array.length - 1];\\n        array.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(uint a, uint b, uint target) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // function sqrt(uint y) internal pure returns (uint z) {\\n    //     if (y > 3) {\\n    //         z = y;\\n    //         uint x = y / 2 + 1;\\n    //         while (x < z) {\\n    //             z = x;\\n    //             x = (y / x + x) / 2;\\n    //         }\\n    //     } else if (y != 0) {\\n    //         z = 1;\\n    //     }\\n    // }\\n\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(\\n        uint256 a,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return\\n                result +\\n                (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    function tryAdd(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function trySub(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    function tryMul(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function tryDiv(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    function tryMod(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    value < 0 ? \\\"-\\\" : \\\"\\\",\\n                    toString(SignedMath.abs(value))\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(\\n        string memory a,\\n        string memory b\\n    ) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sale_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buy_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buy_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buy_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_type\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UserDepsitedSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allNormalTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyers_addess\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeLockInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"deleteWhitelistInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"element\",\"type\":\"address\"}],\"name\":\"findIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getCumulativeNormalTokenLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Locker.CumulativeLockInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"getLockById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct Locker.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_end\",\"type\":\"uint256\"},{\"internalType\":\"enum LaunchPool.PoolType\",\"name\":\"pool_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"public_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tgeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseP10_000\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"normalLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"normalLockForUserAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct Locker.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"normalLocksForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct Locker.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_enableWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sale_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPresaleType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"setWhitelistInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raised_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num_buyers\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"can_claim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tgeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divide\",\"type\":\"uint256\"}],\"name\":\"updateLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sale_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buy_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buy_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buy_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_type\",\"type\":\"uint256\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userContribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"vestingLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LaunchPool", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c51b3fe2b545b88656e58740dd08c71e750f89930000000000000000000000000000000000000000000001998eafd7e4fc2c0000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000070c1cc73b00c800000000000000000000000000000000000000000000000000000000000064a55b400000000000000000000000000000000000000000000000000000000064a5a1900000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}