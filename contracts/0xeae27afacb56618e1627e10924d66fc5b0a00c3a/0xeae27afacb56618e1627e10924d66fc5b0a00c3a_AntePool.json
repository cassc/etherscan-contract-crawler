{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AntePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IAnteTest.sol\\\";\\nimport \\\"./libraries/IterableSet.sol\\\";\\nimport \\\"./libraries/FullMath.sol\\\";\\nimport \\\"./interfaces/IAntePool.sol\\\";\\n\\n/// @title Ante V0.5 Ante Pool smart contract\\n/// @notice Deploys an Ante Pool and connects with the Ante Test, manages pools and interactions with users\\ncontract AntePool is IAntePool {\\n    using SafeMath for uint256;\\n    using FullMath for uint256;\\n    using Address for address;\\n    using IterableAddressSetUtils for IterableAddressSetUtils.IterableAddressSet;\\n\\n    /// @notice Info related to a single user\\n    struct UserInfo {\\n        // How much ETH this user deposited.\\n        uint256 startAmount;\\n        // How much decay this side of the pool accrued between (0, this user's\\n        // entry block), stored as a multiplier expressed as an 18-decimal\\n        // mantissa. For example, if this side of the pool accrued a decay of\\n        // 20% during this time period, we'd store 1.2e18 (staking side) or\\n        // 0.8e18 (challenger side).\\n        uint256 startDecayMultiplier;\\n    }\\n\\n    /// @notice Info related to one side of the pool\\n    struct PoolSideInfo {\\n        mapping(address => UserInfo) userInfo;\\n        // Number of users on this side of the pool.\\n        uint256 numUsers;\\n        // Amount staked across all users on this side of the pool, as of\\n        // `lastUpdateBlock`.`\\n        uint256 totalAmount;\\n        // How much decay this side of the pool accrued between (0,\\n        // lastUpdateBlock), stored as a multiplier expressed as an 18-decimal\\n        // mantissa. For example, if this side of the pool accrued a decay of\\n        // 20% during this time period, we'd store 1.2e18 (staking side) or\\n        // 0.8e18 (challenger side).\\n        uint256 decayMultiplier;\\n    }\\n\\n    /// @notice Info related to eligible challengers\\n    struct ChallengerEligibilityInfo {\\n        // Used when test fails to determine which challengers should receive payout\\n        // i.e., those which haven't staked within 12 blocks prior to test failure\\n        mapping(address => uint256) lastStakedBlock;\\n        uint256 eligibleAmount;\\n    }\\n\\n    /// @notice Info related to stakers who are currently withdrawing\\n    struct StakerWithdrawInfo {\\n        mapping(address => UserUnstakeInfo) userUnstakeInfo;\\n        uint256 totalAmount;\\n    }\\n\\n    /// @notice Info related to a single withdrawing user\\n    struct UserUnstakeInfo {\\n        uint256 lastUnstakeTimestamp;\\n        uint256 amount;\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    IAnteTest public override anteTest;\\n    /// @inheritdoc IAntePool\\n    address public override factory;\\n    /// @inheritdoc IAntePool\\n    /// @dev pendingFailure set to true until pool is initialized to avoid\\n    /// people staking in uninitialized pools\\n    bool public override pendingFailure = true;\\n    /// @inheritdoc IAntePool\\n    uint256 public override numTimesVerified;\\n    /// @dev Percent of staked amount alloted for verifier bounty\\n    uint256 public constant VERIFIER_BOUNTY = 5;\\n    /// @inheritdoc IAntePool\\n    uint256 public override failedBlock;\\n    /// @inheritdoc IAntePool\\n    uint256 public override lastVerifiedBlock;\\n    /// @inheritdoc IAntePool\\n    address public override verifier;\\n    /// @inheritdoc IAntePool\\n    uint256 public override numPaidOut;\\n    /// @inheritdoc IAntePool\\n    uint256 public override totalPaidOut;\\n\\n    /// @dev pool can only be initialized once\\n    bool internal _initialized = false;\\n    /// @dev Bounty amount, set when test fails\\n    uint256 internal _bounty;\\n    /// @dev Total staked value, after bounty is removed\\n    uint256 internal _remainingStake;\\n\\n    /// @dev Amount of decay to charge each challengers ETH per block\\n    /// 100 gwei decay per block per ETH is ~20-25% decay per year\\n    uint256 public constant DECAY_RATE_PER_BLOCK = 100 gwei;\\n\\n    /// @dev Number of blocks a challenger must be staking before they are\\n    /// eligible for paytout on test failure\\n    uint8 public constant CHALLENGER_BLOCK_DELAY = 12;\\n\\n    /// @dev Minimum challenger stake is 0.01 ETH\\n    uint256 public constant MIN_CHALLENGER_STAKE = 1e16;\\n\\n    /// @dev Time after initiating withdraw before staker can finally withdraw capital,\\n    /// starts when staker initiates the unstake action\\n    uint256 public constant UNSTAKE_DELAY = 24 hours;\\n\\n    /// @dev convenience constant for 1 ether worth of wei\\n    uint256 private constant ONE = 1e18;\\n\\n    /// @inheritdoc IAntePool\\n    PoolSideInfo public override stakingInfo;\\n    /// @inheritdoc IAntePool\\n    PoolSideInfo public override challengerInfo;\\n    /// @inheritdoc IAntePool\\n    ChallengerEligibilityInfo public override eligibilityInfo;\\n    /// @dev All addresses currently challenging the Ante Test\\n    IterableAddressSetUtils.IterableAddressSet private challengers;\\n    /// @inheritdoc IAntePool\\n    StakerWithdrawInfo public override withdrawInfo;\\n\\n    /// @inheritdoc IAntePool\\n    uint256 public override lastUpdateBlock;\\n\\n    /// @notice Modifier function to make sure test hasn't failed yet\\n    modifier testNotFailed() {\\n        _testNotFailed();\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!_initialized, \\\"ANTE: Pool already initialized\\\");\\n        _;\\n    }\\n\\n    /// @dev Ante Pools are deployed by Ante Pool Factory, and we store\\n    /// the address of the factory here\\n    constructor() {\\n        factory = msg.sender;\\n        stakingInfo.decayMultiplier = ONE;\\n        challengerInfo.decayMultiplier = ONE;\\n        lastUpdateBlock = block.number;\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function initialize(IAnteTest _anteTest) external override notInitialized {\\n        require(msg.sender == factory, \\\"ANTE: only factory can initialize AntePool\\\");\\n        require(address(_anteTest).isContract(), \\\"ANTE: AnteTest must be a smart contract\\\");\\n        // Check that anteTest has checkTestPasses function and that it currently passes\\n        // place check here to minimize reentrancy risk - most external function calls are locked\\n        // while pendingFailure is true\\n        require(_anteTest.checkTestPasses(), \\\"ANTE: AnteTest does not implement checkTestPasses or test fails\\\");\\n\\n        _initialized = true;\\n        pendingFailure = false;\\n        anteTest = _anteTest;\\n    }\\n\\n    /*****************************************************\\n     * ================ USER INTERFACE ================= *\\n     *****************************************************/\\n\\n    /// @inheritdoc IAntePool\\n    /// @dev Stake `msg.value` on the side given by `isChallenger`\\n    function stake(bool isChallenger) external payable override testNotFailed {\\n        uint256 amount = msg.value;\\n        require(amount > 0, \\\"ANTE: Cannot stake zero\\\");\\n\\n        updateDecay();\\n\\n        PoolSideInfo storage side;\\n        if (isChallenger) {\\n            require(amount >= MIN_CHALLENGER_STAKE, \\\"ANTE: Challenger must stake more than 0.01 ETH\\\");\\n            side = challengerInfo;\\n\\n            // Record challenger info for future use\\n            // Challengers are not eligible for rewards if challenging within 12 block window of test failure\\n            challengers.insert(msg.sender);\\n            eligibilityInfo.lastStakedBlock[msg.sender] = block.number;\\n        } else {\\n            side = stakingInfo;\\n        }\\n\\n        UserInfo storage user = side.userInfo[msg.sender];\\n\\n        // Calculate how much the user already has staked, including the\\n        // effects of any previously accrued decay.\\n        //   prevAmount = startAmount * decayMultipiler / startDecayMultiplier\\n        //   newAmount = amount + prevAmount\\n        if (user.startAmount > 0) {\\n            user.startAmount = amount.add(_storedBalance(user, side));\\n        } else {\\n            user.startAmount = amount;\\n            side.numUsers = side.numUsers.add(1);\\n        }\\n        side.totalAmount = side.totalAmount.add(amount);\\n\\n        // Reset the startDecayMultiplier for this user, since we've updated\\n        // the startAmount to include any already-accrued decay.\\n        user.startDecayMultiplier = side.decayMultiplier;\\n\\n        emit Stake(msg.sender, amount, isChallenger);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    /// @dev Unstake `amount` on the side given by `isChallenger`.\\n    function unstake(uint256 amount, bool isChallenger) external override testNotFailed {\\n        require(amount > 0, \\\"ANTE: Cannot unstake 0.\\\");\\n\\n        updateDecay();\\n\\n        PoolSideInfo storage side = isChallenger ? challengerInfo : stakingInfo;\\n\\n        UserInfo storage user = side.userInfo[msg.sender];\\n        _unstake(amount, isChallenger, side, user);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function unstakeAll(bool isChallenger) external override testNotFailed {\\n        updateDecay();\\n\\n        PoolSideInfo storage side = isChallenger ? challengerInfo : stakingInfo;\\n\\n        UserInfo storage user = side.userInfo[msg.sender];\\n\\n        uint256 amount = _storedBalance(user, side);\\n        require(amount > 0, \\\"ANTE: Nothing to unstake\\\");\\n\\n        _unstake(amount, isChallenger, side, user);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function withdrawStake() external override testNotFailed {\\n        UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\\n\\n        require(\\n            unstakeUser.lastUnstakeTimestamp < block.timestamp - UNSTAKE_DELAY,\\n            \\\"ANTE: must wait 24 hours to withdraw stake\\\"\\n        );\\n        require(unstakeUser.amount > 0, \\\"ANTE: Nothing to withdraw\\\");\\n\\n        uint256 amount = unstakeUser.amount;\\n        withdrawInfo.totalAmount = withdrawInfo.totalAmount.sub(amount);\\n        unstakeUser.amount = 0;\\n\\n        _safeTransfer(msg.sender, amount);\\n\\n        emit WithdrawStake(msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function cancelPendingWithdraw() external override testNotFailed {\\n        UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\\n\\n        require(unstakeUser.amount > 0, \\\"ANTE: No pending withdraw balance\\\");\\n        uint256 amount = unstakeUser.amount;\\n        unstakeUser.amount = 0;\\n\\n        updateDecay();\\n\\n        UserInfo storage user = stakingInfo.userInfo[msg.sender];\\n        if (user.startAmount > 0) {\\n            user.startAmount = amount.add(_storedBalance(user, stakingInfo));\\n        } else {\\n            user.startAmount = amount;\\n            stakingInfo.numUsers = stakingInfo.numUsers.add(1);\\n        }\\n        stakingInfo.totalAmount = stakingInfo.totalAmount.add(amount);\\n        user.startDecayMultiplier = stakingInfo.decayMultiplier;\\n\\n        withdrawInfo.totalAmount = withdrawInfo.totalAmount.sub(amount);\\n\\n        emit CancelWithdraw(msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function checkTest() external override testNotFailed {\\n        require(challengers.exists(msg.sender), \\\"ANTE: Only challengers can checkTest\\\");\\n        require(\\n            block.number.sub(eligibilityInfo.lastStakedBlock[msg.sender]) > CHALLENGER_BLOCK_DELAY,\\n            \\\"ANTE: must wait 12 blocks after challenging to call checkTest\\\"\\n        );\\n\\n        numTimesVerified = numTimesVerified.add(1);\\n        lastVerifiedBlock = block.number;\\n        emit TestChecked(msg.sender);\\n        if (!_checkTestNoRevert()) {\\n            updateDecay();\\n            verifier = msg.sender;\\n            failedBlock = block.number;\\n            pendingFailure = true;\\n\\n            _calculateChallengerEligibility();\\n            _bounty = getVerifierBounty();\\n\\n            uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\\n            _remainingStake = totalStake.sub(_bounty);\\n\\n            emit FailureOccurred(msg.sender);\\n        }\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function claim() external override {\\n        require(pendingFailure, \\\"ANTE: Test has not failed\\\");\\n\\n        UserInfo storage user = challengerInfo.userInfo[msg.sender];\\n        require(user.startAmount > 0, \\\"ANTE: No Challenger Staking balance\\\");\\n\\n        uint256 amount = _calculateChallengerPayout(user, msg.sender);\\n        // Zero out the user so they can't claim again.\\n        user.startAmount = 0;\\n\\n        numPaidOut = numPaidOut.add(1);\\n        totalPaidOut = totalPaidOut.add(amount);\\n\\n        _safeTransfer(msg.sender, amount);\\n        emit ClaimPaid(msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function updateDecay() public override {\\n        (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) = _computeDecay();\\n\\n        lastUpdateBlock = block.number;\\n\\n        if (decayThisUpdate == 0) return;\\n\\n        uint256 totalStaked = stakingInfo.totalAmount;\\n        uint256 totalChallengerStaked = challengerInfo.totalAmount;\\n\\n        // update totoal accrued decay amounts for challengers\\n        // decayMultiplier for challengers = decayMultiplier for challengers * decayMultiplierThisUpdate\\n        // totalChallengerStaked = totalChallengerStaked - decayThisUpdate\\n        challengerInfo.decayMultiplier = challengerInfo.decayMultiplier.mulDiv(decayMultiplierThisUpdate, ONE);\\n        challengerInfo.totalAmount = totalChallengerStaked.sub(decayThisUpdate);\\n\\n        // Update the new accrued decay amounts for stakers.\\n        //   totalStaked_new = totalStaked_old + decayThisUpdate\\n        //   decayMultipilerThisUpdate = totalStaked_new / totalStaked_old\\n        //   decayMultiplier_staker = decayMultiplier_staker * decayMultiplierThisUpdate\\n        uint256 totalStakedNew = totalStaked.add(decayThisUpdate);\\n\\n        stakingInfo.decayMultiplier = stakingInfo.decayMultiplier.mulDiv(totalStakedNew, totalStaked);\\n        stakingInfo.totalAmount = totalStakedNew;\\n    }\\n\\n    /*****************************************************\\n     * ================ VIEW FUNCTIONS ================= *\\n     *****************************************************/\\n\\n    /// @inheritdoc IAntePool\\n    function getTotalChallengerStaked() external view override returns (uint256) {\\n        return challengerInfo.totalAmount;\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getTotalStaked() external view override returns (uint256) {\\n        return stakingInfo.totalAmount;\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getTotalPendingWithdraw() external view override returns (uint256) {\\n        return withdrawInfo.totalAmount;\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getTotalChallengerEligibleBalance() external view override returns (uint256) {\\n        return eligibilityInfo.eligibleAmount;\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getChallengerPayout(address challenger) external view override returns (uint256) {\\n        UserInfo storage user = challengerInfo.userInfo[challenger];\\n        require(user.startAmount > 0, \\\"ANTE: No Challenger Staking balance\\\");\\n\\n        // If called before test failure returns an estimate\\n        if (pendingFailure) {\\n            return _calculateChallengerPayout(user, challenger);\\n        } else {\\n            uint256 amount = _storedBalance(user, challengerInfo);\\n            uint256 bounty = getVerifierBounty();\\n            uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\\n\\n            return amount.add(amount.mulDiv(totalStake.sub(bounty), challengerInfo.totalAmount));\\n        }\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getStoredBalance(address _user, bool isChallenger) external view override returns (uint256) {\\n        (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) = _computeDecay();\\n\\n        UserInfo storage user = isChallenger ? challengerInfo.userInfo[_user] : stakingInfo.userInfo[_user];\\n\\n        if (user.startAmount == 0) return 0;\\n\\n        require(user.startDecayMultiplier > 0, \\\"ANTE: Invalid startDecayMultiplier\\\");\\n\\n        uint256 decayMultiplier;\\n\\n        if (isChallenger) {\\n            decayMultiplier = challengerInfo.decayMultiplier.mul(decayMultiplierThisUpdate).div(1e18);\\n        } else {\\n            uint256 totalStaked = stakingInfo.totalAmount;\\n            uint256 totalStakedNew = totalStaked.add(decayThisUpdate);\\n            decayMultiplier = stakingInfo.decayMultiplier.mul(totalStakedNew).div(totalStaked);\\n        }\\n\\n        return user.startAmount.mulDiv(decayMultiplier, user.startDecayMultiplier);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getPendingWithdrawAmount(address _user) external view override returns (uint256) {\\n        return withdrawInfo.userUnstakeInfo[_user].amount;\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getPendingWithdrawAllowedTime(address _user) external view override returns (uint256) {\\n        UserUnstakeInfo storage user = withdrawInfo.userUnstakeInfo[_user];\\n        require(user.amount > 0, \\\"ANTE: nothing to withdraw\\\");\\n\\n        return user.lastUnstakeTimestamp.add(UNSTAKE_DELAY);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getCheckTestAllowedBlock(address _user) external view override returns (uint256) {\\n        return eligibilityInfo.lastStakedBlock[_user].add(CHALLENGER_BLOCK_DELAY);\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getUserStartAmount(address _user, bool isChallenger) external view override returns (uint256) {\\n        return isChallenger ? challengerInfo.userInfo[_user].startAmount : stakingInfo.userInfo[_user].startAmount;\\n    }\\n\\n    /// @inheritdoc IAntePool\\n    function getVerifierBounty() public view override returns (uint256) {\\n        uint256 totalStake = stakingInfo.totalAmount.add(withdrawInfo.totalAmount);\\n        return totalStake.mul(VERIFIER_BOUNTY).div(100);\\n    }\\n\\n    /*****************************************************\\n     * =============== INTERNAL HELPERS ================ *\\n     *****************************************************/\\n\\n    /// @notice Internal function activating the unstaking action for staker or challengers\\n    /// @param amount Amount to be removed in wei\\n    /// @param isChallenger True if user is a challenger\\n    /// @param side Corresponding staker or challenger pool info\\n    /// @param user Info related to the user\\n    /// @dev If the user is a challenger the function the amount can be withdrawn\\n    /// immediately, if the user is a staker, the amount is moved to the withdraw\\n    /// info and then the 24 hour waiting period starts\\n    function _unstake(\\n        uint256 amount,\\n        bool isChallenger,\\n        PoolSideInfo storage side,\\n        UserInfo storage user\\n    ) internal {\\n        // Calculate how much the user has available to unstake, including the\\n        // effects of any previously accrued decay.\\n        //   prevAmount = startAmount * decayMultiplier / startDecayMultiplier\\n        uint256 prevAmount = _storedBalance(user, side);\\n\\n        if (prevAmount == amount) {\\n            user.startAmount = 0;\\n            user.startDecayMultiplier = 0;\\n            side.numUsers = side.numUsers.sub(1);\\n\\n            // Remove from set of existing challengers\\n            if (isChallenger) challengers.remove(msg.sender);\\n        } else {\\n            require(amount <= prevAmount, \\\"ANTE: Withdraw request exceeds balance.\\\");\\n            user.startAmount = prevAmount.sub(amount);\\n            // Reset the startDecayMultiplier for this user, since we've updated\\n            // the startAmount to include any already-accrued decay.\\n            user.startDecayMultiplier = side.decayMultiplier;\\n        }\\n        side.totalAmount = side.totalAmount.sub(amount);\\n\\n        if (isChallenger) _safeTransfer(msg.sender, amount);\\n        else {\\n            // Just initiate the withdraw if staker\\n            UserUnstakeInfo storage unstakeUser = withdrawInfo.userUnstakeInfo[msg.sender];\\n            unstakeUser.lastUnstakeTimestamp = block.timestamp;\\n            unstakeUser.amount = unstakeUser.amount.add(amount);\\n\\n            withdrawInfo.totalAmount = withdrawInfo.totalAmount.add(amount);\\n        }\\n\\n        emit Unstake(msg.sender, amount, isChallenger);\\n    }\\n\\n    /// @notice Computes the decay differences for staker and challenger pools\\n    /// @dev Function shared by getStoredBalance view function and internal\\n    /// decay computation\\n    /// @return decayMultiplierThisUpdate multiplier factor for this decay change\\n    /// @return decayThisUpdate amount of challenger value that's decayed in wei\\n    function _computeDecay() internal view returns (uint256 decayMultiplierThisUpdate, uint256 decayThisUpdate) {\\n        decayThisUpdate = 0;\\n        decayMultiplierThisUpdate = ONE;\\n\\n        if (block.number <= lastUpdateBlock) {\\n            return (decayMultiplierThisUpdate, decayThisUpdate);\\n        }\\n        // Stop charging decay if the test already failed.\\n        if (pendingFailure) {\\n            return (decayMultiplierThisUpdate, decayThisUpdate);\\n        }\\n        // If we have no stakers or challengers, don't charge any decay.\\n        uint256 totalStaked = stakingInfo.totalAmount;\\n        uint256 totalChallengerStaked = challengerInfo.totalAmount;\\n        if (totalStaked == 0 || totalChallengerStaked == 0) {\\n            return (decayMultiplierThisUpdate, decayThisUpdate);\\n        }\\n\\n        uint256 numBlocks = block.number.sub(lastUpdateBlock);\\n\\n        // The rest of the function updates the new accrued decay amounts\\n        //   decayRateThisUpdate = DECAY_RATE_PER_BLOCK * numBlocks\\n        //   decayMultiplierThisUpdate = 1 - decayRateThisUpdate\\n        //   decayThisUpdate = totalChallengerStaked * decayRateThisUpdate\\n        uint256 decayRateThisUpdate = DECAY_RATE_PER_BLOCK.mul(numBlocks);\\n\\n        // Failsafe to avoid underflow when calculating decayMultiplierThisUpdate\\n        if (decayRateThisUpdate >= ONE) {\\n            decayMultiplierThisUpdate = 0;\\n            decayThisUpdate = totalChallengerStaked;\\n        } else {\\n            decayMultiplierThisUpdate = ONE.sub(decayRateThisUpdate);\\n            decayThisUpdate = totalChallengerStaked.mulDiv(decayRateThisUpdate, ONE);\\n        }\\n    }\\n\\n    /// @notice Calculates total amount of challenger capital eligible for payout.\\n    /// @dev Any challenger which stakes within 12 blocks prior to test failure\\n    /// will not get a payout but will be able to withdraw their capital\\n    /// (minus decay)\\n    function _calculateChallengerEligibility() internal {\\n        uint256 cutoffBlock = failedBlock.sub(CHALLENGER_BLOCK_DELAY);\\n        for (uint256 i = 0; i < challengers.addresses.length; i++) {\\n            address challenger = challengers.addresses[i];\\n            if (eligibilityInfo.lastStakedBlock[challenger] < cutoffBlock) {\\n                eligibilityInfo.eligibleAmount = eligibilityInfo.eligibleAmount.add(\\n                    _storedBalance(challengerInfo.userInfo[challenger], challengerInfo)\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks the connected Ante Test, also returns false if checkTestPasses reverts\\n    /// @return passes bool if the Ante Test passed\\n    function _checkTestNoRevert() internal returns (bool) {\\n        try anteTest.checkTestPasses() returns (bool passes) {\\n            return passes;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Calculates individual challenger payout\\n    /// @param user UserInfo for specified challenger\\n    /// @param challenger Address of challenger\\n    /// @dev This is only called after a test is failed, so it's calculated payouts\\n    /// are no longer estimates\\n    /// @return Payout amount for challenger in wei\\n    function _calculateChallengerPayout(UserInfo storage user, address challenger) internal view returns (uint256) {\\n        // Calculate this user's challenging balance.\\n        uint256 amount = _storedBalance(user, challengerInfo);\\n        // Calculate how much of the staking pool this user gets, and add that\\n        // to the user's challenging balance.\\n        if (eligibilityInfo.lastStakedBlock[challenger] < failedBlock.sub(CHALLENGER_BLOCK_DELAY)) {\\n            amount = amount.add(amount.mulDiv(_remainingStake, eligibilityInfo.eligibleAmount));\\n        }\\n\\n        return challenger == verifier ? amount.add(_bounty) : amount;\\n    }\\n\\n    /// @notice Get the stored balance held by user, including accrued decay\\n    /// @param user UserInfo of specified user\\n    /// @param side PoolSideInfo of where the user is located, either staker or challenger side\\n    /// @dev This includes accrued decay up to `lastUpdateBlock`\\n    /// @return Balance of the user in wei\\n    function _storedBalance(UserInfo storage user, PoolSideInfo storage side) internal view returns (uint256) {\\n        if (user.startAmount == 0) return 0;\\n\\n        require(user.startDecayMultiplier > 0, \\\"ANTE: Invalid startDecayMultiplier\\\");\\n        return user.startAmount.mulDiv(side.decayMultiplier, user.startDecayMultiplier);\\n    }\\n\\n    /// @notice Transfer function for moving funds\\n    /// @param to Address to transfer funds to\\n    /// @param amount Amount to be transferred in wei\\n    /// @dev Safe transfer function, just in case a rounding error causes the\\n    /// pool to not have enough ETH\\n    function _safeTransfer(address payable to, uint256 amount) internal {\\n        to.transfer(_min(amount, address(this).balance));\\n    }\\n\\n    /// @notice Returns the minimum of 2 parameters\\n    /// @param a Value A\\n    /// @param b Value B\\n    /// @return Lower of a or b\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice Checks if the test has not failed yet\\n    function _testNotFailed() internal {\\n        require(!pendingFailure, \\\"ANTE: Test already failed.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\npragma solidity ^0.7.0;\\n\\n/// @title The interface for the Ante V0.5 Ante Test\\n/// @notice The Ante V0.5 Ante Test wraps test logic for verifying fundamental invariants of a protocol\\ninterface IAnteTest {\\n    /// @notice Returns the author of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testAuthor as a public var\\n    /// @return The address of the test author\\n    function testAuthor() external view returns (address);\\n\\n    /// @notice Returns the name of the protocol the Ante Test is testing\\n    /// @dev This overrides the auto-generated getter for protocolName as a public var\\n    /// @return The name of the protocol in string format\\n    function protocolName() external view returns (string memory);\\n\\n    /// @notice Returns a single address in the testedContracts array\\n    /// @dev This overrides the auto-generated getter for testedContracts [] as a public var\\n    /// @param i The array index of the address to return\\n    /// @return The address of the i-th element in the list of tested contracts\\n    function testedContracts(uint256 i) external view returns (address);\\n\\n    /// @notice Returns the name of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testName as a public var\\n    /// @return The name of the Ante Test in string format\\n    function testName() external view returns (string memory);\\n\\n    /// @notice Function containing test logic to inspect the protocol invariant\\n    /// @dev This should usually return True\\n    /// @return A single bool indicating if the Ante Test passes/fails\\n    function checkTestPasses() external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/libraries/IterableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\npragma solidity ^0.7.0;\\n\\n/// @notice Key sets for addresses with enumeration and delete. Uses mappings for random\\n/// and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n/// @dev IterableAddressSets are unordered. Delete operations reorder keys. All operations have a\\n/// fixed gas cost at any scale, O(1).\\n/// Code inspired by https://github.com/rob-Hitchens/SetTypes/blob/master/contracts/AddressSet.sol\\n/// and updated to solidity 0.7.x\\nlibrary IterableAddressSetUtils {\\n    /// @dev struct stores array of addresses and mapping of addresses to indices to allow O(1) CRUD operations\\n    struct IterableAddressSet {\\n        mapping(address => uint256) indices;\\n        address[] addresses;\\n    }\\n\\n    /// @notice insert a key.\\n    /// @dev duplicate keys are not permitted but fails silently to avoid wasting gas on exist + insert calls\\n    /// @param self storage pointer to IterableAddressSet\\n    /// @param key value to insert.\\n    function insert(IterableAddressSet storage self, address key) internal {\\n        if (!exists(self, key)) {\\n            self.addresses.push(key);\\n            self.indices[key] = self.addresses.length - 1;\\n        }\\n    }\\n\\n    /// @notice remove a key.\\n    /// @dev key to remove should exist but fails silently to avoid wasting gas on exist + remove calls\\n    /// @param self storage pointer to IterableAddressSet\\n    /// @param key value to remove.\\n    function remove(IterableAddressSet storage self, address key) internal {\\n        if (!exists(self, key)) {\\n            return;\\n        }\\n\\n        uint256 last = self.addresses.length - 1;\\n        uint256 indexToReplace = self.indices[key];\\n        if (indexToReplace != last) {\\n            address keyToMove = self.addresses[last];\\n            self.indices[keyToMove] = indexToReplace;\\n            self.addresses[indexToReplace] = keyToMove;\\n        }\\n\\n        delete self.indices[key];\\n        self.addresses.pop();\\n    }\\n\\n    /// @notice check if a key is in IterableAddressSet\\n    /// @param self storage pointer to IterableAddressSet\\n    /// @param key value to check.\\n    /// @return bool true: is a member, false: not a member.\\n    function exists(IterableAddressSet storage self, address key) internal view returns (bool) {\\n        if (self.addresses.length == 0) return false;\\n\\n        return self.addresses[self.indices[key]] == key;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n// taken with <3 from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol\\n// under the MIT license\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an\\n/// intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division\\n/// where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256\\n    /// or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAntePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IAnteTest.sol\\\";\\n\\n/// @title The interface for Ante V0.5 Ante Pool\\n/// @notice The Ante Pool handles interactions with connected Ante Test\\ninterface IAntePool {\\n    /// @notice Emitted when a user adds to the stake or challenge pool\\n    /// @param staker The address of user\\n    /// @param amount Amount being added in wei\\n    /// @param isChallenger Whether or not this is added to the challenger pool\\n    event Stake(address indexed staker, uint256 amount, bool indexed isChallenger);\\n\\n    /// @notice Emitted when a user removes from the stake or challenge pool\\n    /// @param staker The address of user\\n    /// @param amount Amount being removed in wei\\n    /// @param isChallenger Whether or not this is removed from the challenger pool\\n    event Unstake(address indexed staker, uint256 amount, bool indexed isChallenger);\\n\\n    /// @notice Emitted when the connected Ante Test's invariant gets verified\\n    /// @param checker The address of challenger who called the verification\\n    event TestChecked(address indexed checker);\\n\\n    /// @notice Emitted when the connected Ante Test has failed test verification\\n    /// @param checker The address of challenger who called the verification\\n    event FailureOccurred(address indexed checker);\\n\\n    /// @notice Emitted when a challenger claims their payout for a failed test\\n    /// @param claimer The address of challenger claiming their payout\\n    /// @param amount Amount being claimed in wei\\n    event ClaimPaid(address indexed claimer, uint256 amount);\\n\\n    /// @notice Emitted when a staker has withdrawn their stake after the 24 hour wait period\\n    /// @param staker The address of the staker removing their stake\\n    /// @param amount Amount withdrawn in wei\\n    event WithdrawStake(address indexed staker, uint256 amount);\\n\\n    /// @notice Emitted when a staker cancels their withdraw action before the 24 hour wait period\\n    /// @param staker The address of the staker cancelling their withdraw\\n    /// @param amount Amount cancelled in wei\\n    event CancelWithdraw(address indexed staker, uint256 amount);\\n\\n    /// @notice Initializes Ante Pool with the connected Ante Test\\n    /// @param _anteTest The Ante Test that will be connected to the Ante Pool\\n    /// @dev This function requires that the Ante Test address is valid and that\\n    /// the invariant validation currently passes\\n    function initialize(IAnteTest _anteTest) external;\\n\\n    /// @notice Cancels a withdraw action of a staker before the 24 hour wait period expires\\n    /// @dev This is called when a staker has initiated a withdraw stake action but\\n    /// then decides to cancel that withdraw before the 24 hour wait period is over\\n    function cancelPendingWithdraw() external;\\n\\n    /// @notice Runs the verification of the invariant of the connected Ante Test\\n    /// @dev Can only be called by a challenger who has challenged the Ante Test\\n    function checkTest() external;\\n\\n    /// @notice Claims the payout of a failed Ante Test\\n    /// @dev To prevent double claiming, the challenger balance is checked before\\n    /// claiming and that balance is zeroed out once the claim is done\\n    function claim() external;\\n\\n    /// @notice Adds a users's stake or challenge to the staker or challenger pool\\n    /// @param isChallenger Flag for if this is a challenger\\n    function stake(bool isChallenger) external payable;\\n\\n    /// @notice Removes a user's stake or challenge from the staker or challenger pool\\n    /// @param amount Amount being removed in wei\\n    /// @param isChallenger Flag for if this is a challenger\\n    function unstake(uint256 amount, bool isChallenger) external;\\n\\n    /// @notice Removes all of a user's stake or challenge from the respective pool\\n    /// @param isChallenger Flag for if this is a challenger\\n    function unstakeAll(bool isChallenger) external;\\n\\n    /// @notice Updates the decay multipliers and amounts for the total staked and challenged pools\\n    /// @dev This function is called in most other functions as well to keep the\\n    /// decay amounts and pools accurate\\n    function updateDecay() external;\\n\\n    /// @notice Initiates the withdraw process for a staker, starting the 24 hour waiting period\\n    /// @dev During the 24 hour waiting period, the value is locked to prevent\\n    /// users from removing their stake when a challenger is going to verify test\\n    function withdrawStake() external;\\n\\n    /// @notice Returns the Ante Test connected to this Ante Pool\\n    /// @return IAnteTest The Ante Test interface\\n    function anteTest() external view returns (IAnteTest);\\n\\n    /// @notice Get the info for the challenger pool\\n    /// @return numUsers The total number of challengers in the challenger pool\\n    ///         totalAmount The total value locked in the challenger pool in wei\\n    ///         decayMultiplier The current multiplier for decay\\n    function challengerInfo()\\n        external\\n        view\\n        returns (\\n            uint256 numUsers,\\n            uint256 totalAmount,\\n            uint256 decayMultiplier\\n        );\\n\\n    /// @notice Get the info for the staker pool\\n    /// @return numUsers The total number of stakers in the staker pool\\n    ///         totalAmount The total value locked in the staker pool in wei\\n    ///         decayMultiplier The current multiplier for decay\\n    function stakingInfo()\\n        external\\n        view\\n        returns (\\n            uint256 numUsers,\\n            uint256 totalAmount,\\n            uint256 decayMultiplier\\n        );\\n\\n    /// @notice Get the total value eligible for payout\\n    /// @dev This is used so that challengers must have challenged for at least\\n    /// 12 blocks to receive payout, this is to mitigate other challengers\\n    /// from trying to stick in a challenge right before the verification\\n    /// @return eligibleAmount Total value eligible for payout in wei\\n    function eligibilityInfo() external view returns (uint256 eligibleAmount);\\n\\n    /// @notice Returns the Ante Pool factory address that created this Ante Pool\\n    /// @return Address of Ante Pool factory\\n    function factory() external view returns (address);\\n\\n    /// @notice Returns the block at which the connected Ante Test failed\\n    /// @dev This is only set when a verify test action is taken, so the test could\\n    /// have logically failed beforehand, but without having a user initiating\\n    /// the verify test action\\n    /// @return Block number where Ante Test failed\\n    function failedBlock() external view returns (uint256);\\n\\n    /// @notice Returns the payout amount for a specific challenger\\n    /// @param challenger Address of challenger\\n    /// @dev If this is called before an Ante Test has failed, then it's return\\n    /// value is an estimate\\n    /// @return Amount that could be claimed by challenger in wei\\n    function getChallengerPayout(address challenger) external view returns (uint256);\\n\\n    /// @notice Returns the timestamp for when the staker's 24 hour wait period is over\\n    /// @param _user Address of withdrawing staker\\n    /// @dev This is timestamp is 24 hours after the time when the staker initaited the\\n    /// withdraw process\\n    /// @return Timestamp for when the value is no longer locked and can be removed\\n    function getPendingWithdrawAllowedTime(address _user) external view returns (uint256);\\n\\n    /// @notice Returns the amount a staker is attempting to withdraw\\n    /// @param _user Address of withdrawing staker\\n    /// @return Amount which is being withdrawn in wei\\n    function getPendingWithdrawAmount(address _user) external view returns (uint256);\\n\\n    /// @notice Returns the stored balance of a user in their respective pool\\n    /// @param _user Address of user\\n    /// @param isChallenger Flag if user is a challenger\\n    /// @dev This function calculates decay and returns the stored value after the\\n    /// decay has been either added (staker) or subtracted (challenger)\\n    /// @return Balance that the user has currently in wei\\n    function getStoredBalance(address _user, bool isChallenger) external view returns (uint256);\\n\\n    /// @notice Returns total value of eligible payout for challengers\\n    /// @return Amount eligible for payout in wei\\n    function getTotalChallengerEligibleBalance() external view returns (uint256);\\n\\n    /// @notice Returns total value locked of all challengers\\n    /// @return Total amount challenged in wei\\n    function getTotalChallengerStaked() external view returns (uint256);\\n\\n    /// @notice Returns total value of all stakers who are withdrawing their stake\\n    /// @return Total amount waiting for withdraw in wei\\n    function getTotalPendingWithdraw() external view returns (uint256);\\n\\n    /// @notice Returns total value locked of all stakers\\n    /// @return Total amount staked in wei\\n    function getTotalStaked() external view returns (uint256);\\n\\n    /// @notice Returns a user's starting amount added in their respective pool\\n    /// @param _user Address of user\\n    /// @param isChallenger Flag if user is a challenger\\n    /// @dev This value is updated as decay is caluclated or additional value\\n    /// added to respective side\\n    /// @return User's starting amount in wei\\n    function getUserStartAmount(address _user, bool isChallenger) external view returns (uint256);\\n\\n    /// @notice Returns the verifier bounty amount\\n    /// @dev Currently this is 5% of the total staked amount\\n    /// @return Bounty amount rewarded to challenger who verifies test in wei\\n    function getVerifierBounty() external view returns (uint256);\\n\\n    /// @notice Returns the cutoff block when challenger can call verify test\\n    /// @dev This is currently 12 blocks after a challenger has challenged the test\\n    /// @return Block number of when verify test can be called by challenger\\n    function getCheckTestAllowedBlock(address _user) external view returns (uint256);\\n\\n    /// @notice Returns the most recent block number where decay was updated\\n    /// @dev This is generally updated on most actions that interact with the Ante\\n    /// Pool contract\\n    /// @return Block number of when contract was last updated\\n    function lastUpdateBlock() external view returns (uint256);\\n\\n    /// @notice Returns the most recent block number where a challenger verified test\\n    /// @dev This is updated whenever the verify test is activated, whether or not\\n    /// the Ante Test fails\\n    /// @return Block number of last verification attempt\\n    function lastVerifiedBlock() external view returns (uint256);\\n\\n    /// @notice Returns the number of challengers that have claimed their payout\\n    /// @return Number of challengers\\n    function numPaidOut() external view returns (uint256);\\n\\n    /// @notice Returns the number of times that the Ante Test has been verified\\n    /// @return Number of verifications\\n    function numTimesVerified() external view returns (uint256);\\n\\n    /// @notice Returns if the connected Ante Test has failed\\n    /// @return True if the connected Ante Test has failed, False if not\\n    function pendingFailure() external view returns (bool);\\n\\n    /// @notice Returns the total value of payout to challengers that have been claimed\\n    /// @return Value of claimed payouts in wei\\n    function totalPaidOut() external view returns (uint256);\\n\\n    /// @notice Returns the address of verifier who successfully activated verify test\\n    /// @dev This is the user who will receive the verifier bounty\\n    /// @return Address of verifier challenger\\n    function verifier() external view returns (address);\\n\\n    /// @notice Returns the total value of stakers who are withdrawing\\n    /// @return totalAmount total amount pending to be withdrawn in wei\\n    function withdrawInfo() external view returns (uint256 totalAmount);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CancelWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"checker\",\"type\":\"address\"}],\"name\":\"FailureOccurred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isChallenger\",\"type\":\"bool\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"checker\",\"type\":\"address\"}],\"name\":\"TestChecked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isChallenger\",\"type\":\"bool\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGER_BLOCK_DELAY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECAY_RATE_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_CHALLENGER_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFIER_BOUNTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anteTest\",\"outputs\":[{\"internalType\":\"contract IAnteTest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelPendingWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decayMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eligibleAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"getChallengerPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCheckTestAllowedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingWithdrawAllowedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isChallenger\",\"type\":\"bool\"}],\"name\":\"getStoredBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalChallengerEligibleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalChallengerStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isChallenger\",\"type\":\"bool\"}],\"name\":\"getUserStartAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVerifierBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAnteTest\",\"name\":\"_anteTest\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVerifiedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPaidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTimesVerified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFailure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isChallenger\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decayMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isChallenger\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isChallenger\",\"type\":\"bool\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDecay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AntePool", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}