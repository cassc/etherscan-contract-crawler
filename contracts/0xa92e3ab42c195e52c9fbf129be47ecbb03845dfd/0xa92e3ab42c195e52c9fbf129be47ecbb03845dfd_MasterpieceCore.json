{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause()\r\n        public\r\n        onlyOwner\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause()\r\n        public\r\n        onlyOwner\r\n        whenPaused\r\n        returns (bool)\r\n    {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    // Required methods for ERC-721 Compatibility.\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n}\r\n\r\n\r\ncontract MasterpieceAccessControl {\r\n    /// - CEO: The CEO can reassign other roles, change the addresses of dependent smart contracts,\r\n    /// and pause/unpause the MasterpieceCore contract.\r\n    /// - CFO: The CFO can withdraw funds from its auction and sale contracts.\r\n    /// - Curator: The Curator can mint regular and promo Masterpieces.\r\n\r\n    /// @dev The addresses of the accounts (or contracts) that can execute actions within each role.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public curatorAddress;\r\n\r\n    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.\r\n    bool public paused = false;\r\n\r\n    /// @dev Event is fired when contract is forked.\r\n    event ContractFork(address newContract);\r\n\r\n    /// @dev Access-modifier for CEO-only functionality.\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access-modifier for CFO-only functionality.\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access-modifier for Curator-only functionality.\r\n    modifier onlyCurator() {\r\n        require(msg.sender == curatorAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access-modifier for C-level-only functionality.\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress ||\r\n            msg.sender == curatorAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// Assigns a new address to the CEO role. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// Assigns a new address to the Curator role. Only available to the current CEO.\r\n    /// @param _newCurator The address of the new Curator\r\n    function setCurator(address _newCurator) external onlyCEO {\r\n        require(_newCurator != address(0));\r\n\r\n        curatorAddress = _newCurator;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause()\r\n        external\r\n        onlyCLevel\r\n        whenNotPaused\r\n    {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause()\r\n        public\r\n        onlyCEO\r\n        whenPaused\r\n    {\r\n        // can't unpause if contract was forked\r\n        paused = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// Core functionality for CrytpoMasterpieces.\r\ncontract MasterpieceBase is MasterpieceAccessControl {\r\n\r\n    /*** DATA TYPES ***/\r\n    /// The main masterpiece struct.\r\n    struct Masterpiece {\r\n        /// Name of the masterpiece\r\n        string name;\r\n        /// Name of the artist who created the masterpiece\r\n        string artist;\r\n        // The timestamp from the block when this masterpiece was created\r\n        uint64 birthTime;\r\n    }\r\n\r\n    /*** EVENTS ***/\r\n    /// The Birth event is fired whenever a new masterpiece comes into existence.\r\n    event Birth(address owner, uint256 tokenId, uint256 snatchWindow, string name, string artist);\r\n    /// Transfer event as defined in current draft of ERC721. Fired every time masterpiece ownership\r\n    /// is assigned, including births.\r\n    event TransferToken(address from, address to, uint256 tokenId);\r\n    /// The TokenSold event is fired whenever a token is sold.\r\n    event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 price, address prevOwner, address owner, string name);\r\n\r\n    /*** STORAGE ***/\r\n    /// An array containing all Masterpieces in existence. The id of each masterpiece\r\n    /// is an index in this array.\r\n    Masterpiece[] masterpieces;\r\n\r\n    /// @dev The address of the ClockAuction contract that handles sale auctions\r\n    /// for Masterpieces that users want to sell for less than or equal to the\r\n    /// next price, which is automatically set by the contract.\r\n    SaleClockAuction public saleAuction;\r\n\r\n    /// @dev A mapping from masterpiece ids to the address that owns them.\r\n    mapping (uint256 => address) public masterpieceToOwner;\r\n\r\n    /// @dev A mapping from masterpiece ids to their snatch window.\r\n    mapping (uint256 => uint256) public masterpieceToSnatchWindow;\r\n\r\n    /// @dev A mapping from owner address to count of masterpieces that address owns.\r\n    /// Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) public ownerMasterpieceCount;\r\n\r\n    /// @dev A mapping from masterpiece ids to an address that has been approved to call\r\n    ///  transferFrom(). Each masterpiece can only have 1 approved address for transfer\r\n    ///  at any time. A 0 value means no approval is outstanding.\r\n    mapping (uint256 => address) public masterpieceToApproved;\r\n\r\n    // @dev A mapping from masterpiece ids to their price.\r\n    mapping (uint256 => uint256) public masterpieceToPrice;\r\n\r\n    // @dev Returns the snatch window of the given token.\r\n    function snatchWindowOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        return masterpieceToSnatchWindow[_tokenId];\r\n    }\r\n\r\n    /// @dev Assigns ownership of a specific masterpiece to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Transfer ownership and update owner masterpiece counts.\r\n        ownerMasterpieceCount[_to]++;\r\n        masterpieceToOwner[_tokenId] = _to;\r\n        // When creating new tokens _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownerMasterpieceCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete masterpieceToApproved[_tokenId];\r\n        }\r\n        // Fire the transfer event.\r\n        TransferToken(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new masterpiece and stores it.\r\n    /// @param _name The name of the masterpiece, e.g. Mona Lisa\r\n    /// @param _artist The artist who created this masterpiece, e.g. Leonardo Da Vinci\r\n    /// @param _owner The initial owner of this masterpiece\r\n    function _createMasterpiece(\r\n        string _name,\r\n        string _artist,\r\n        uint256 _price,\r\n        uint256 _snatchWindow,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        Masterpiece memory _masterpiece = Masterpiece({\r\n            name: _name,\r\n            artist: _artist,\r\n            birthTime: uint64(now)\r\n        });\r\n        uint256 newMasterpieceId = masterpieces.push(_masterpiece) - 1;\r\n\r\n        // Fire the birth event.\r\n        Birth(\r\n            _owner,\r\n            newMasterpieceId,\r\n            _snatchWindow,\r\n            _masterpiece.name,\r\n            _masterpiece.artist\r\n        );\r\n\r\n        // Set the price for the masterpiece.\r\n        masterpieceToPrice[newMasterpieceId] = _price;\r\n\r\n        // Set the snatch window for the masterpiece.\r\n        masterpieceToSnatchWindow[newMasterpieceId] = _snatchWindow;\r\n\r\n        // This will assign ownership, and also fire the Transfer event as per ERC-721 draft.\r\n        _transfer(0, _owner, newMasterpieceId);\r\n\r\n        return newMasterpieceId;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// Pricing logic for CrytpoMasterpieces.\r\ncontract MasterpiecePricing is MasterpieceBase {\r\n\r\n    /*** CONSTANTS ***/\r\n    // Pricing steps.\r\n    uint128 private constant FIRST_STEP_LIMIT = 0.05 ether;\r\n    uint128 private constant SECOND_STEP_LIMIT = 0.5 ether;\r\n    uint128 private constant THIRD_STEP_LIMIT = 2.0 ether;\r\n    uint128 private constant FOURTH_STEP_LIMIT = 5.0 ether;\r\n\r\n    /// @dev Computes the next listed price.\r\n    /// @notice This contract doesn't handle setting the Masterpiece's next listing price.\r\n    /// This next price is only used from inside bid() in MasterpieceAuction and inside\r\n    /// purchase() in MasterpieceSale to set the next listed price.\r\n    function setNextPriceOf(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // The next price of any token can only be set by the sale auction contract.\r\n        // To set the next price for a token sold through the regular sale, use only\r\n        // computeNextPrice and directly update the mapping.\r\n        require(msg.sender == address(saleAuction));\r\n        masterpieceToPrice[tokenId] = computeNextPrice(salePrice);\r\n    }\r\n\r\n    /// @dev Computes next price of token given the current sale price.\r\n    function computeNextPrice(uint256 salePrice)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (salePrice < FIRST_STEP_LIMIT) {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 200), 95);\r\n        } else if (salePrice < SECOND_STEP_LIMIT) {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 135), 96);\r\n        } else if (salePrice < THIRD_STEP_LIMIT) {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 125), 97);\r\n        } else if (salePrice < FOURTH_STEP_LIMIT) {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 120), 97);\r\n        } else {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 115), 98);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes the payment for the token, which is the sale price of the token\r\n    /// minus the house's cut.\r\n    function computePayment(uint256 salePrice)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (salePrice < FIRST_STEP_LIMIT) {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 95), 100);\r\n        } else if (salePrice < SECOND_STEP_LIMIT) {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 96), 100);\r\n        } else if (salePrice < FOURTH_STEP_LIMIT) {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 97), 100);\r\n        } else {\r\n            return SafeMath.div(SafeMath.mul(salePrice, 98), 100);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/// Methods required for Non-Fungible Token Transactions in adherence to ERC721.\r\ncontract MasterpieceOwnership is MasterpiecePricing, ERC721 {\r\n\r\n    /// Name of the collection of NFTs managed by this contract, as defined in ERC721.\r\n    string public constant NAME = \"Masterpieces\";\r\n    /// Symbol referencing the entire collection of NFTs managed in this contract, as\r\n    /// defined in ERC721.\r\n    string public constant SYMBOL = \"CMP\";\r\n\r\n    bytes4 public constant INTERFACE_SIGNATURE_ERC165 =\r\n    bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n\r\n    bytes4 public constant INTERFACE_SIGNATURE_ERC721 =\r\n    bytes4(keccak256(\"name()\")) ^\r\n    bytes4(keccak256(\"symbol()\")) ^\r\n    bytes4(keccak256(\"totalSupply()\")) ^\r\n    bytes4(keccak256(\"balanceOf(address)\")) ^\r\n    bytes4(keccak256(\"ownerOf(uint256)\")) ^\r\n    bytes4(keccak256(\"approve(address,uint256)\")) ^\r\n    bytes4(keccak256(\"transfer(address,uint256)\")) ^\r\n    bytes4(keccak256(\"transferFrom(address,address,uint256)\")) ^\r\n    bytes4(keccak256(\"tokensOfOwner(address)\")) ^\r\n    bytes4(keccak256(\"tokenMetadata(uint256,string)\"));\r\n\r\n    /// @dev Grant another address the right to transfer a specific Masterpiece via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Masterpiece that can be transferred if this call succeeds.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function approve(address _to, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Fire approval event upon successful approval.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers a Masterpiece to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 or else your\r\n    /// Masterpiece may be lost forever.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Masterpiece to transfer.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function transfer(address _to, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any Masterpieces (except very briefly\r\n        // after a Masterpiece is created.\r\n        require(_to != address(this));\r\n        // Disallow transfers to the auction contract to prevent accidental\r\n        // misuse. Auction contracts should only take ownership of Masterpieces\r\n        // through the approve and transferFrom flow.\r\n        require(_to != address(saleAuction));\r\n        // You can only send your own Masterpiece.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, fire Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfer a Masterpiece owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Masterpiece to be transfered.\r\n    /// @param _to The address that should take ownership of the Masterpiece. Can be any\r\n    /// address, including the caller.\r\n    /// @param _tokenId The ID of the Masterpiece to be transferred.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and fires Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Returns a list of all Masterpiece IDs assigned to an address.\r\n    /// @param _owner The owner whose Masterpieces we are interested in.\r\n    ///  This method MUST NEVER be called by smart contract code. First, it is fairly\r\n    ///  expensive (it walks the entire Masterpiece array looking for Masterpieces belonging\r\n    /// to owner), but it also returns a dynamic array, which is only supported for web3\r\n    /// calls, and not contract-to-contract calls. Thus, this method is external rather\r\n    /// than public.\r\n    function tokensOfOwner(address _owner)\r\n        external\r\n        view\r\n        returns(uint256[] ownerTokens)\r\n    {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Returns an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalMasterpieces = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 masterpieceId;\r\n            for (masterpieceId = 0; masterpieceId <= totalMasterpieces; masterpieceId++) {\r\n                if (masterpieceToOwner[masterpieceId] == _owner) {\r\n                    result[resultIndex] = masterpieceId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721));\r\n    }\r\n\r\n    // @notice Optional for ERC-20 compliance.\r\n    function name() external pure returns (string) {\r\n        return NAME;\r\n    }\r\n\r\n    // @notice Optional for ERC-20 compliance.\r\n    function symbol() external pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    /// @dev Returns the address currently assigned ownership of a given Masterpiece.\r\n    /// @notice Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = masterpieceToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @dev Returns the total number of Masterpieces currently in existence.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return masterpieces.length;\r\n    }\r\n\r\n    /// @dev Returns the number of Masterpieces owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function balanceOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        return ownerMasterpieceCount[_owner];\r\n    }\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Masterpiece.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId Masterpiece id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return masterpieceToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    /// approval. Setting _approved to address(0) clears all transfer approval.\r\n    /// NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    /// _approve() and transferFrom() are used together for putting Masterpieces on auction, and\r\n    /// there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        masterpieceToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Masterpiece.\r\n    /// @param _claimant the address we are confirming Masterpiece is approved for.\r\n    /// @param _tokenId Masterpiece id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return masterpieceToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n    function _addressNotNull(address _to) internal pure returns (bool) {\r\n        return _to != address(0);\r\n    }\r\n}\r\n\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    MasterpieceOwnership public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) public tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 price, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n        // Grab a reference to the seller before the auction struct gets deleted.\r\n        address seller = auction.seller;\r\n        // Remove the auction before sending the fees to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n            _transfer(msg.sender, _tokenId);\r\n            // Update the next listing price of the token.\r\n            nonFungibleContract.setNextPriceOf(_tokenId, price);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 public constant INTERFACE_SIGNATURE_ERC721 = bytes4(0x9a20483d);\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n\r\n        MasterpieceOwnership candidateContract = MasterpieceOwnership(_nftAddress);\r\n        require(candidateContract.supportsInterface(INTERFACE_SIGNATURE_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        bool res = nftAddress.send(this.balance);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(_owns(msg.sender, _tokenId));\r\n        _escrow(msg.sender, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenId, msg.value);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n        external\r\n        whenPaused\r\n        onlyOwner\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n            Auction storage auction = tokenIdToAuction[_tokenId];\r\n            require(_isOnAuction(auction));\r\n            return (\r\n                auction.seller,\r\n                auction.startingPrice,\r\n                auction.endingPrice,\r\n                auction.duration,\r\n                auction.startedAt\r\n            );\r\n        }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Clock auction\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSaleAuctionAddress() call.\r\n    bool public isSaleClockAuction = true;\r\n\r\n    // Delegate constructor\r\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\r\n        ClockAuction(_nftAddr, _cut) {}\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        external\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Places a bid for the Masterpiece. Requires the sender\r\n    /// is the Masterpiece Core contract because all bid methods\r\n    /// should be wrapped.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n    {\r\n        /* require(msg.sender == address(nonFungibleContract)); */\r\n        // _bid checks that token ID is valid and will throw if bid fails\r\n        _bid(_tokenId, msg.value);\r\n    }\r\n}\r\n\r\n\r\ncontract MasterpieceAuction is MasterpieceOwnership {\r\n\r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the MasterpieceCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawAuctionBalances()\r\n        external\r\n        onlyCLevel\r\n    {\r\n        saleAuction.withdrawBalance();\r\n    }\r\n\r\n    /// @notice The auction contract variable (saleAuction) is defined in MasterpieceBase\r\n    /// to allow us to refer to them in MasterpieceOwnership to prevent accidental transfers.\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address)\r\n        external\r\n        onlyCEO\r\n    {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect -\r\n        // https://github.com/Lunyr/crowdsale-contracts/blob/\r\n        // cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSaleClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev The owner of a Masterpiece can put it up for auction.\r\n    function createSaleAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Check that the Masterpiece to be put on an auction sale is owned by\r\n        // its current owner. If it's already in an auction, this validation\r\n        // will fail because the MasterpieceAuction contract owns the\r\n        // Masterpiece once it is put on an auction sale.\r\n        require(_owns(msg.sender, _tokenId));\r\n        _approve(_tokenId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer approval after escrow\r\n        saleAuction.createAuction(\r\n            _tokenId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MasterpieceSale is MasterpieceAuction {\r\n\r\n    // Allows someone to send ether and obtain the token\r\n    function purchase(uint256 _tokenId)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = masterpieceToOwner[_tokenId];\r\n        uint256 salePrice = masterpieceToPrice[_tokenId];\r\n\r\n        // Require that the masterpiece is either currently owned by the Masterpiece\r\n        // Core contract or was born within the snatch window.\r\n        require(\r\n            (oldOwner == address(this)) ||\r\n            (now - masterpieces[_tokenId].birthTime <= masterpieceToSnatchWindow[_tokenId])\r\n        );\r\n\r\n        // Require that the owner of the token is not sending to self.\r\n        require(oldOwner != newOwner);\r\n\r\n        // Require that the Masterpiece is not in an auction by checking that\r\n        // the Sale Clock Auction contract is not the owner.\r\n        require(address(oldOwner) != address(saleAuction));\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_addressNotNull(newOwner));\r\n\r\n        // Check that sent amount is greater than or equal to the sale price\r\n        require(msg.value >= salePrice);\r\n\r\n        uint256 payment = uint256(computePayment(salePrice));\r\n        uint256 purchaseExcess = SafeMath.sub(msg.value, salePrice);\r\n\r\n        // Set next listing price.\r\n        masterpieceToPrice[_tokenId] = computeNextPrice(salePrice);\r\n\r\n        // Transfer the Masterpiece to the buyer.\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n        // Pay seller of the Masterpiece if they are not this contract.\r\n        if (oldOwner != address(this)) {\r\n            oldOwner.transfer(payment);\r\n        }\r\n\r\n        TokenSold(_tokenId, salePrice, masterpieceToPrice[_tokenId], oldOwner, newOwner, masterpieces[_tokenId].name);\r\n\r\n        // Reimburse the buyer of any excess paid.\r\n        msg.sender.transfer(purchaseExcess);\r\n    }\r\n\r\n    function priceOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        return masterpieceToPrice[_tokenId];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MasterpieceMinting is MasterpieceSale {\r\n\r\n    /*** CONSTANTS ***/\r\n    /// @dev Starting price of a regular Masterpiece.\r\n    uint128 private constant STARTING_PRICE = 0.001 ether;\r\n    /// @dev Limit of number of promo masterpieces that can be created.\r\n    uint16 private constant PROMO_CREATION_LIMIT = 10000;\r\n\r\n    /// @dev Counts the number of Promotional Masterpieces the contract owner has created.\r\n    uint16 public promoMasterpiecesCreatedCount;\r\n    /// @dev Reference to contract tracking Non Fungible Token ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    /// @dev Creates a new Masterpiece with the given name and artist.\r\n    function createMasterpiece(\r\n        string _name,\r\n        string _artist,\r\n        uint256 _snatchWindow\r\n    )\r\n        public\r\n        onlyCurator\r\n        returns (uint)\r\n    {\r\n        uint256 masterpieceId = _createMasterpiece(_name, _artist, STARTING_PRICE, _snatchWindow, address(this));\r\n        return masterpieceId;\r\n    }\r\n\r\n    /// @dev Creates a new promotional Masterpiece with the given name, artist, starting\r\n    /// price, and owner. If the owner or the price is not set, we default them to the\r\n    /// curator's address and the starting price for all masterpieces.\r\n    function createPromoMasterpiece(\r\n        string _name,\r\n        string _artist,\r\n        uint256 _snatchWindow,\r\n        uint256 _price,\r\n        address _owner\r\n    )\r\n        public\r\n        onlyCurator\r\n        returns (uint)\r\n    {\r\n        require(promoMasterpiecesCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n        address masterpieceOwner = _owner;\r\n        if (masterpieceOwner == address(0)) {\r\n            masterpieceOwner = curatorAddress;\r\n        }\r\n\r\n        if (_price <= 0) {\r\n            _price = STARTING_PRICE;\r\n        }\r\n\r\n        uint256 masterpieceId = _createMasterpiece(_name, _artist, _price, _snatchWindow, masterpieceOwner);\r\n        promoMasterpiecesCreatedCount++;\r\n        return masterpieceId;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// CryptoMasterpieces: Collectible fine art masterpieces on the Ethereum blockchain.\r\ncontract MasterpieceCore is MasterpieceMinting {\r\n\r\n    // - MasterpieceAccessControl: This contract defines which users are granted the given roles that are\r\n    // required to execute specific operations.\r\n    //\r\n    // - MasterpieceBase: This contract inherits from the MasterpieceAccessControl contract and defines\r\n    // the core functionality of CryptoMasterpieces, including the data types, storage, and constants.\r\n    //\r\n    // - MasterpiecePricing: This contract inherits from the MasterpieceBase contract and defines\r\n    // the pricing logic for CryptoMasterpieces. With every purchase made through the Core contract or\r\n    // through a sale auction, the next listed price will multiply based on 5 price tiers. This ensures\r\n    // that the Masterpiece bought through CryptoMasterpieces will always be adjusted to its fair market\r\n    // value.\r\n    //\r\n    // - MasterpieceOwnership: This contract inherits from the MasterpiecePricing contract and the ERC-721\r\n    // (https://github.com/ethereum/EIPs/issues/721) contract and implements the methods required for\r\n    //  Non-Fungible Token Transactions.\r\n    //\r\n    // - MasterpieceAuction: This contract inherits from the MasterpieceOwnership contract. It defines\r\n    // the Dutch \"clock\" auction mechanism for owners of a masterpiece to place it on sale. The auction\r\n    // starts off at the automatically generated next price and until it is sold, decrements the price\r\n    // as time passes. The owner of the masterpiece can cancel the auction at any point and the price\r\n    // cannot go lower than the price that the owner bought the masterpiece for.\r\n    //\r\n    // - MasterpieceSale: This contract inherits from the MasterpieceAuction contract. It defines the\r\n    // tiered pricing logic and handles all sales. It also checks that a Masterpiece is not in an\r\n    // auction before approving a purchase.\r\n    //\r\n    // - MasterpieceMinting: This contract inherits from the MasterpieceSale contract. It defines the\r\n    // creation of new regular and promotional masterpieces.\r\n\r\n    // Set in case the core contract is broken and a fork is required\r\n    address public newContractAddress;\r\n\r\n    function MasterpieceCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // The creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // The creator of the contract is also the initial Curator\r\n        curatorAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address)\r\n        external\r\n        onlyCEO\r\n        whenPaused\r\n    {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractFork(_v2Address);\r\n    }\r\n\r\n    /// @dev Withdraw all Ether from the contract. This includes the fee on every\r\n    /// masterpiece sold and any Ether sent directly to the contract address.\r\n    /// Only the CFO can withdraw the balance or specify the address to send\r\n    /// the balance to.\r\n    function withdrawBalance(address _to) external onlyCFO {\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        if (_to == address(0)) {\r\n            cfoAddress.transfer(this.balance);\r\n        } else {\r\n            _to.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific masterpiece.\r\n    /// @param _tokenId The tokenId of the masterpiece of interest.\r\n    function getMasterpiece(uint256 _tokenId) external view returns (\r\n        string name,\r\n        string artist,\r\n        uint256 birthTime,\r\n        uint256 snatchWindow,\r\n        uint256 sellingPrice,\r\n        address owner\r\n    ) {\r\n        Masterpiece storage masterpiece = masterpieces[_tokenId];\r\n        name = masterpiece.name;\r\n        artist = masterpiece.artist;\r\n        birthTime = uint256(masterpiece.birthTime);\r\n        snatchWindow = masterpieceToSnatchWindow[_tokenId];\r\n        sellingPrice = masterpieceToPrice[_tokenId];\r\n        owner = masterpieceToOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive call.\r\n    function unpause()\r\n        public\r\n        onlyCEO\r\n        whenPaused\r\n    {\r\n        require(saleAuction != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"curatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerMasterpieceCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTERFACE_SIGNATURE_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"snatchWindowOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_artist\",\"type\":\"string\"},{\"name\":\"_snatchWindow\",\"type\":\"uint256\"}],\"name\":\"createMasterpiece\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMasterpiece\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"artist\",\"type\":\"string\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"snatchWindow\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_artist\",\"type\":\"string\"},{\"name\":\"_snatchWindow\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoMasterpiece\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoMasterpiecesCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"masterpieceToSnatchWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"setCurator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"masterpieceToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"masterpieceToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"masterpieceToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"setNextPriceOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTERFACE_SIGNATURE_ERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snatchWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"artist\",\"type\":\"string\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractFork\",\"type\":\"event\"}]", "ContractName": "MasterpieceCore", "CompilerVersion": "v0.4.21-nightly.2018.2.14+commit.bb3b327c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8c71ac52f39234f2e520b5b063b07c0dd20c077925452923e73d2ce0a7b8e31b"}