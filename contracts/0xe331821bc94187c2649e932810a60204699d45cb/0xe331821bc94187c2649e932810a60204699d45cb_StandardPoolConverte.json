{"SourceCode": "// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.0\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utility/interfaces/IOwned.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Owned interface\r\n */\r\ninterface IOwned {\r\n    function owner() external view returns (address);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function acceptOwnership() external;\r\n}\r\n\r\n\r\n// File contracts/converter/interfaces/IConverterAnchor.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Converter Anchor interface\r\n */\r\ninterface IConverterAnchor is IOwned {\r\n\r\n}\r\n\r\n\r\n// File contracts/token/interfaces/IReserveToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev This contract is used to represent reserve tokens, which are tokens that can either be regular ERC20 tokens or\r\n * native ETH (represented by the NATIVE_TOKEN_ADDRESS address)\r\n *\r\n * Please note that this interface is intentionally doesn't inherit from IERC20, so that it'd be possible to effectively\r\n * override its balanceOf() function in the ReserveToken library\r\n */\r\ninterface IReserveToken {\r\n\r\n}\r\n\r\n\r\n// File contracts/converter/interfaces/IConverter.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Converter interface\r\n */\r\ninterface IConverter is IOwned {\r\n    function converterType() external pure returns (uint16);\r\n\r\n    function anchor() external view returns (IConverterAnchor);\r\n\r\n    function isActive() external view returns (bool);\r\n\r\n    function targetAmountAndFee(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        uint256 sourceAmount\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function convert(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        uint256 sourceAmount,\r\n        address trader,\r\n        address payable beneficiary\r\n    ) external payable returns (uint256);\r\n\r\n    function conversionFee() external view returns (uint32);\r\n\r\n    function maxConversionFee() external view returns (uint32);\r\n\r\n    function reserveBalance(IReserveToken reserveToken) external view returns (uint256);\r\n\r\n    receive() external payable;\r\n\r\n    function transferAnchorOwnership(address newOwner) external;\r\n\r\n    function acceptAnchorOwnership() external;\r\n\r\n    function setConversionFee(uint32 fee) external;\r\n\r\n    function addReserve(IReserveToken token, uint32 weight) external;\r\n\r\n    function transferReservesOnUpgrade(address newConverter) external;\r\n\r\n    function onUpgradeComplete() external;\r\n\r\n    // deprecated, backward compatibility\r\n    function token() external view returns (IConverterAnchor);\r\n\r\n    function transferTokenOwnership(address newOwner) external;\r\n\r\n    function acceptTokenOwnership() external;\r\n\r\n    function reserveTokenCount() external view returns (uint16);\r\n\r\n    function reserveTokens() external view returns (IReserveToken[] memory);\r\n\r\n    function connectors(IReserveToken reserveToken)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint32,\r\n            bool,\r\n            bool,\r\n            bool\r\n        );\r\n\r\n    function getConnectorBalance(IReserveToken connectorToken) external view returns (uint256);\r\n\r\n    function connectorTokens(uint256 index) external view returns (IReserveToken);\r\n\r\n    function connectorTokenCount() external view returns (uint16);\r\n\r\n    /**\r\n     * @dev triggered when the converter is activated\r\n     */\r\n    event Activation(uint16 indexed converterType, IConverterAnchor indexed anchor, bool indexed activated);\r\n\r\n    /**\r\n     * @dev triggered when a conversion between two tokens occurs\r\n     */\r\n    event Conversion(\r\n        IReserveToken indexed sourceToken,\r\n        IReserveToken indexed targetToken,\r\n        address indexed trader,\r\n        uint256 sourceAmount,\r\n        uint256 targetAmount,\r\n        int256 conversionFee\r\n    );\r\n\r\n    /**\r\n     * @dev triggered when the rate between two tokens in the converter changes\r\n     *\r\n     * note that the event might be dispatched for rate updates between any two tokens in the converter\r\n     */\r\n    event TokenRateUpdate(address indexed token1, address indexed token2, uint256 rateN, uint256 rateD);\r\n\r\n    /**\r\n     * @dev triggered when the conversion fee is updated\r\n     */\r\n    event ConversionFeeUpdate(uint32 prevFee, uint32 newFee);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v3.4.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/converter/ConverterVersion.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract ConverterVersion {\r\n    // note that the version is defined as is for backward compatibility with older converters\r\n\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint16 public constant version = 48;\r\n}\r\n\r\n\r\n// File contracts/converter/interfaces/IConverterUpgrader.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Converter Upgrader interface\r\n */\r\ninterface IConverterUpgrader {\r\n    function upgrade(bytes32 version) external;\r\n\r\n    function upgrade(uint16 version) external;\r\n}\r\n\r\n\r\n// File contracts/utility/interfaces/ITokenHolder.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Token Holder interface\r\n */\r\ninterface ITokenHolder is IOwned {\r\n    receive() external payable;\r\n\r\n    function withdrawTokens(\r\n        IReserveToken reserveToken,\r\n        address payable to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function withdrawTokensMultiple(\r\n        IReserveToken[] calldata reserveTokens,\r\n        address payable to,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/INetworkSettings.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface INetworkSettings {\r\n    function networkFeeParams() external view returns (ITokenHolder, uint32);\r\n\r\n    function networkFeeWallet() external view returns (ITokenHolder);\r\n\r\n    function networkFee() external view returns (uint32);\r\n}\r\n\r\n\r\n// File contracts/token/interfaces/IDSToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev DSToken interface\r\n */\r\ninterface IDSToken is IConverterAnchor, IERC20 {\r\n    function issue(address recipient, uint256 amount) external;\r\n\r\n    function destroy(address recipient, uint256 amount) external;\r\n}\r\n\r\n\r\n// File contracts/token/SafeERC20Ex.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Extends the SafeERC20 library with additional operations\r\n */\r\nlibrary SafeERC20Ex {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @dev ensures that the spender has sufficient allowance\r\n     */\r\n    function ensureApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (allowance >= amount) {\r\n            return;\r\n        }\r\n\r\n        if (allowance > 0) {\r\n            token.safeApprove(spender, 0);\r\n        }\r\n        token.safeApprove(spender, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ReserveToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev This library implements ERC20 and SafeERC20 utilities for reserve tokens, which can be either ERC20 tokens or ETH\r\n */\r\nlibrary ReserveToken {\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20Ex for IERC20;\r\n\r\n    // the address that represents an ETH reserve\r\n    IReserveToken public constant NATIVE_TOKEN_ADDRESS = IReserveToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    /**\r\n     * @dev returns whether the provided token represents an ERC20 or ETH reserve\r\n     */\r\n    function isNativeToken(IReserveToken reserveToken) internal pure returns (bool) {\r\n        return reserveToken == NATIVE_TOKEN_ADDRESS;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the balance of the reserve token\r\n     */\r\n    function balanceOf(IReserveToken reserveToken, address account) internal view returns (uint256) {\r\n        if (isNativeToken(reserveToken)) {\r\n            return account.balance;\r\n        }\r\n\r\n        return toIERC20(reserveToken).balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers a specific amount of the reserve token\r\n     */\r\n    function safeTransfer(\r\n        IReserveToken reserveToken,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isNativeToken(reserveToken)) {\r\n            payable(to).transfer(amount);\r\n        } else {\r\n            toIERC20(reserveToken).safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev transfers a specific amount of the reserve token from a specific holder using the allowance mechanism\r\n     *\r\n     * note that the function ignores a reserve token which represents an ETH reserve\r\n     */\r\n    function safeTransferFrom(\r\n        IReserveToken reserveToken,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount == 0 || isNativeToken(reserveToken)) {\r\n            return;\r\n        }\r\n\r\n        toIERC20(reserveToken).safeTransferFrom(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev ensures that the spender has sufficient allowance\r\n     *\r\n     * note that this function ignores a reserve token which represents an ETH reserve\r\n     */\r\n    function ensureApprove(\r\n        IReserveToken reserveToken,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        if (isNativeToken(reserveToken)) {\r\n            return;\r\n        }\r\n\r\n        toIERC20(reserveToken).ensureApprove(spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev utility function that converts an IReserveToken to an IERC20\r\n     */\r\n    function toIERC20(IReserveToken reserveToken) private pure returns (IERC20) {\r\n        return IERC20(address(reserveToken));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utility/interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract Registry interface\r\n */\r\ninterface IContractRegistry {\r\n    function addressOf(bytes32 contractName) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/utility/Owned.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev This contract provides support and utilities for contract ownership.\r\n */\r\ncontract Owned is IOwned {\r\n    address private _owner;\r\n    address private _newOwner;\r\n\r\n    /**\r\n     * @dev triggered when the owner is updated\r\n     */\r\n    event OwnerUpdate(address indexed prevOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev initializes a new Owned instance\r\n     */\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly() {\r\n        _ownerOnly();\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() private view {\r\n        require(msg.sender == _owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n     * @dev allows transferring the contract ownership\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the owner of the contract\r\n     *\r\n     * note the new owner still needs to accept the transfer\r\n     */\r\n    function transferOwnership(address newOwner) public override ownerOnly {\r\n        require(newOwner != _owner, \"ERR_SAME_OWNER\");\r\n\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev used by a new owner to accept an ownership transfer\r\n     */\r\n    function acceptOwnership() public override {\r\n        require(msg.sender == _newOwner, \"ERR_ACCESS_DENIED\");\r\n\r\n        emit OwnerUpdate(_owner, _newOwner);\r\n\r\n        _owner = _newOwner;\r\n        _newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the address of the current owner\r\n     */\r\n    function owner() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the address of the new owner candidate\r\n     */\r\n    function newOwner() external view returns (address) {\r\n        return _newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utility/Utils.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Utilities & Common Modifiers\r\n */\r\ncontract Utils {\r\n    uint32 internal constant PPM_RESOLUTION = 1000000;\r\n\r\n    // verifies that a value is greater than zero\r\n    modifier greaterThanZero(uint256 value) {\r\n        _greaterThanZero(value);\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _greaterThanZero(uint256 value) internal pure {\r\n        require(value > 0, \"ERR_ZERO_VALUE\");\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address addr) {\r\n        _validAddress(addr);\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validAddress(address addr) internal pure {\r\n        require(addr != address(0), \"ERR_INVALID_ADDRESS\");\r\n    }\r\n\r\n    // ensures that the portion is valid\r\n    modifier validPortion(uint32 _portion) {\r\n        _validPortion(_portion);\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validPortion(uint32 _portion) internal pure {\r\n        require(_portion > 0 && _portion <= PPM_RESOLUTION, \"ERR_INVALID_PORTION\");\r\n    }\r\n\r\n    // validates an external address - currently only checks that it isn't null or this\r\n    modifier validExternalAddress(address addr) {\r\n        _validExternalAddress(addr);\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validExternalAddress(address addr) internal view {\r\n        require(addr != address(0) && addr != address(this), \"ERR_INVALID_EXTERNAL_ADDRESS\");\r\n    }\r\n\r\n    // ensures that the fee is valid\r\n    modifier validFee(uint32 fee) {\r\n        _validFee(fee);\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validFee(uint32 fee) internal pure {\r\n        require(fee <= PPM_RESOLUTION, \"ERR_INVALID_FEE\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utility/ContractRegistryClient.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @dev This is the base contract for ContractRegistry clients.\r\n */\r\ncontract ContractRegistryClient is Owned, Utils {\r\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\r\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\r\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\r\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\r\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 internal constant BANCOR_X = \"BancorX\";\r\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n    bytes32 internal constant LIQUIDITY_PROTECTION = \"LiquidityProtection\";\r\n    bytes32 internal constant NETWORK_SETTINGS = \"NetworkSettings\";\r\n\r\n    // address of the current contract registry\r\n    IContractRegistry private _registry;\r\n\r\n    // address of the previous contract registry\r\n    IContractRegistry private _prevRegistry;\r\n\r\n    // only the owner can update the contract registry\r\n    bool private _onlyOwnerCanUpdateRegistry;\r\n\r\n    /**\r\n     * @dev verifies that the caller is mapped to the given contract name\r\n     */\r\n    modifier only(bytes32 contractName) {\r\n        _only(contractName);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _only(bytes32 contractName) internal view {\r\n        require(msg.sender == _addressOf(contractName), \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n     * @dev initializes a new ContractRegistryClient instance\r\n     */\r\n    constructor(IContractRegistry initialRegistry) internal validAddress(address(initialRegistry)) {\r\n        _registry = IContractRegistry(initialRegistry);\r\n        _prevRegistry = IContractRegistry(initialRegistry);\r\n    }\r\n\r\n    /**\r\n     * @dev updates to the new contract registry\r\n     */\r\n    function updateRegistry() external {\r\n        // verify that this function is permitted\r\n        require(msg.sender == owner() || !_onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\r\n\r\n        // get the new contract registry\r\n        IContractRegistry newRegistry = IContractRegistry(_addressOf(CONTRACT_REGISTRY));\r\n\r\n        // verify that the new contract registry is different and not zero\r\n        require(newRegistry != _registry && address(newRegistry) != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // verify that the new contract registry is pointing to a non-zero contract registry\r\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // save a backup of the current contract registry before replacing it\r\n        _prevRegistry = _registry;\r\n\r\n        // replace the current contract registry with the new contract registry\r\n        _registry = newRegistry;\r\n    }\r\n\r\n    /**\r\n     * @dev restores the previous contract registry\r\n     */\r\n    function restoreRegistry() external ownerOnly {\r\n        // restore the previous contract registry\r\n        _registry = _prevRegistry;\r\n    }\r\n\r\n    /**\r\n     * @dev restricts the permission to update the contract registry\r\n     */\r\n    function restrictRegistryUpdate(bool restrictOwnerOnly) public ownerOnly {\r\n        // change the permission to update the contract registry\r\n        _onlyOwnerCanUpdateRegistry = restrictOwnerOnly;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the address of the current contract registry\r\n     */\r\n    function registry() public view returns (IContractRegistry) {\r\n        return _registry;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the address of the previous contract registry\r\n     */\r\n    function prevRegistry() external view returns (IContractRegistry) {\r\n        return _prevRegistry;\r\n    }\r\n\r\n    /**\r\n     * @dev returns whether only the owner can update the contract registry\r\n     */\r\n    function onlyOwnerCanUpdateRegistry() external view returns (bool) {\r\n        return _onlyOwnerCanUpdateRegistry;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the address associated with the given contract name\r\n     */\r\n    function _addressOf(bytes32 contractName) internal view returns (address) {\r\n        return _registry.addressOf(contractName);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utility/MathEx.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev This library provides a set of complex math operations.\r\n */\r\nlibrary MathEx {\r\n    uint256 private constant MAX_EXP_BIT_LEN = 4;\r\n    uint256 private constant MAX_EXP = 2**MAX_EXP_BIT_LEN - 1;\r\n    uint256 private constant MAX_UINT256 = uint256(-1);\r\n\r\n    /**\r\n     * @dev returns the largest integer smaller than or equal to the square root of a positive integer\r\n     */\r\n    function floorSqrt(uint256 num) internal pure returns (uint256) {\r\n        uint256 x = num / 2 + 1;\r\n        uint256 y = (x + num / x) / 2;\r\n        while (x > y) {\r\n            x = y;\r\n            y = (x + num / x) / 2;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the smallest integer larger than or equal to the square root of a positive integer\r\n     */\r\n    function ceilSqrt(uint256 num) internal pure returns (uint256) {\r\n        uint256 x = floorSqrt(num);\r\n\r\n        return x * x == num ? x : x + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev computes the product of two given ratios\r\n     */\r\n    function productRatio(\r\n        uint256 xn,\r\n        uint256 yn,\r\n        uint256 xd,\r\n        uint256 yd\r\n    ) internal pure returns (uint256, uint256) {\r\n        uint256 n = mulDivC(xn, yn, MAX_UINT256);\r\n        uint256 d = mulDivC(xd, yd, MAX_UINT256);\r\n        uint256 z = n > d ? n : d;\r\n        if (z > 1) {\r\n            return (mulDivC(xn, yn, z), mulDivC(xd, yd, z));\r\n        }\r\n        return (xn * yn, xd * yd);\r\n    }\r\n\r\n    /**\r\n     * @dev computes a reduced-scalar ratio\r\n     */\r\n    function reducedRatio(\r\n        uint256 n,\r\n        uint256 d,\r\n        uint256 max\r\n    ) internal pure returns (uint256, uint256) {\r\n        (uint256 newN, uint256 newD) = (n, d);\r\n        if (newN > max || newD > max) {\r\n            (newN, newD) = normalizedRatio(newN, newD, max);\r\n        }\r\n        if (newN != newD) {\r\n            return (newN, newD);\r\n        }\r\n        return (1, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\".\r\n     */\r\n    function normalizedRatio(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 scale\r\n    ) internal pure returns (uint256, uint256) {\r\n        if (a <= b) {\r\n            return accurateRatio(a, b, scale);\r\n        }\r\n        (uint256 y, uint256 x) = accurateRatio(b, a, scale);\r\n        return (x, y);\r\n    }\r\n\r\n    /**\r\n     * @dev computes \"scale * a / (a + b)\" and \"scale * b / (a + b)\", assuming that \"a <= b\".\r\n     */\r\n    function accurateRatio(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 scale\r\n    ) internal pure returns (uint256, uint256) {\r\n        uint256 maxVal = MAX_UINT256 / scale;\r\n        if (a > maxVal) {\r\n            uint256 c = a / (maxVal + 1) + 1;\r\n            a /= c; // we can now safely compute `a * scale`\r\n            b /= c;\r\n        }\r\n        if (a != b) {\r\n            uint256 newN = a * scale;\r\n            uint256 newD = unsafeAdd(a, b); // can overflow\r\n            if (newD >= a) {\r\n                // no overflow in `a + b`\r\n                uint256 x = roundDiv(newN, newD); // we can now safely compute `scale - x`\r\n                uint256 y = scale - x;\r\n                return (x, y);\r\n            }\r\n            if (newN < b - (b - a) / 2) {\r\n                return (0, scale); // `a * scale < (a + b) / 2 < MAX_UINT256 < a + b`\r\n            }\r\n            return (1, scale - 1); // `(a + b) / 2 < a * scale < MAX_UINT256 < a + b`\r\n        }\r\n        return (scale / 2, scale / 2); // allow reduction to `(1, 1)` in the calling function\r\n    }\r\n\r\n    /**\r\n     * @dev computes the nearest integer to a given quotient without overflowing or underflowing.\r\n     */\r\n    function roundDiv(uint256 n, uint256 d) internal pure returns (uint256) {\r\n        return n / d + (n % d) / (d - d / 2);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the average number of decimal digits in a given list of positive integers\r\n     */\r\n    function geometricMean(uint256[] memory values) internal pure returns (uint256) {\r\n        uint256 numOfDigits = 0;\r\n        uint256 length = values.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            numOfDigits += decimalLength(values[i]);\r\n        }\r\n        return uint256(10)**(roundDivUnsafe(numOfDigits, length) - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the number of decimal digits in a given positive integer\r\n     */\r\n    function decimalLength(uint256 x) internal pure returns (uint256) {\r\n        uint256 y = 0;\r\n        for (uint256 tmpX = x; tmpX > 0; tmpX /= 10) {\r\n            ++y;\r\n        }\r\n        return y;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the nearest integer to a given quotient\r\n     *\r\n     * note the computation is overflow-safe assuming that the input is sufficiently small\r\n     */\r\n    function roundDivUnsafe(uint256 n, uint256 d) internal pure returns (uint256) {\r\n        return (n + d / 2) / d;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the largest integer smaller than or equal to `x * y / z`\r\n     */\r\n    function mulDivF(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 z\r\n    ) internal pure returns (uint256) {\r\n        (uint256 xyh, uint256 xyl) = mul512(x, y);\r\n\r\n        // if `x * y < 2 ^ 256`\r\n        if (xyh == 0) {\r\n            return xyl / z;\r\n        }\r\n\r\n        // assert `x * y / z < 2 ^ 256`\r\n        require(xyh < z, \"ERR_OVERFLOW\");\r\n\r\n        uint256 m = mulMod(x, y, z); // `m = x * y % z`\r\n        (uint256 nh, uint256 nl) = sub512(xyh, xyl, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\r\n\r\n        // if `n < 2 ^ 256`\r\n        if (nh == 0) {\r\n            return nl / z;\r\n        }\r\n\r\n        uint256 p = unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\r\n        uint256 q = div512(nh, nl, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\r\n        uint256 r = inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\r\n        return unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\r\n    }\r\n\r\n    /**\r\n     * @dev returns the smallest integer larger than or equal to `x * y / z`\r\n     */\r\n    function mulDivC(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 z\r\n    ) internal pure returns (uint256) {\r\n        uint256 w = mulDivF(x, y, z);\r\n        if (mulMod(x, y, z) > 0) {\r\n            require(w < MAX_UINT256, \"ERR_OVERFLOW\");\r\n            return w + 1;\r\n        }\r\n        return w;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the value of `x * y` as a pair of 256-bit values\r\n     */\r\n    function mul512(uint256 x, uint256 y) private pure returns (uint256, uint256) {\r\n        uint256 p = mulModMax(x, y);\r\n        uint256 q = unsafeMul(x, y);\r\n        if (p >= q) {\r\n            return (p - q, q);\r\n        }\r\n        return (unsafeSub(p, q) - 1, q);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`\r\n     */\r\n    function sub512(\r\n        uint256 xh,\r\n        uint256 xl,\r\n        uint256 y\r\n    ) private pure returns (uint256, uint256) {\r\n        if (xl >= y) {\r\n            return (xh, xl - y);\r\n        }\r\n        return (xh - 1, unsafeSub(xl, y));\r\n    }\r\n\r\n    /**\r\n     * @dev returns the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`\r\n     */\r\n    function div512(\r\n        uint256 xh,\r\n        uint256 xl,\r\n        uint256 pow2n\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2nInv = unsafeAdd(unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\r\n        return unsafeMul(xh, pow2nInv) | (xl / pow2n); // `(xh << (256 - n)) | (xl >> n)`\r\n    }\r\n\r\n    /**\r\n     * @dev returns the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`\r\n     */\r\n    function inv256(uint256 d) private pure returns (uint256) {\r\n        // approximate the root of `f(x) = 1 / x - d` using the newton\u2013raphson convergence method\r\n        uint256 x = 1;\r\n        for (uint256 i = 0; i < 8; ++i) {\r\n            x = unsafeMul(x, unsafeSub(2, unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * @dev returns `(x + y) % 2 ^ 256`\r\n     */\r\n    function unsafeAdd(uint256 x, uint256 y) private pure returns (uint256) {\r\n        return x + y;\r\n    }\r\n\r\n    /**\r\n     * @dev returns `(x - y) % 2 ^ 256`\r\n     */\r\n    function unsafeSub(uint256 x, uint256 y) private pure returns (uint256) {\r\n        return x - y;\r\n    }\r\n\r\n    /**\r\n     * @dev returns `(x * y) % 2 ^ 256`\r\n     */\r\n    function unsafeMul(uint256 x, uint256 y) private pure returns (uint256) {\r\n        return x * y;\r\n    }\r\n\r\n    /**\r\n     * @dev returns `x * y % (2 ^ 256 - 1)`\r\n     */\r\n    function mulModMax(uint256 x, uint256 y) private pure returns (uint256) {\r\n        return mulmod(x, y, MAX_UINT256);\r\n    }\r\n\r\n    /**\r\n     * @dev returns `x * y % z`\r\n     */\r\n    function mulMod(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 z\r\n    ) private pure returns (uint256) {\r\n        return mulmod(x, y, z);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utility/Time.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n    Time implementing contract\r\n*/\r\ncontract Time {\r\n    /**\r\n     * @dev returns the current time\r\n     */\r\n    function _time() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/converter/types/standard-pool/StandardPoolConverter.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This contract is a specialized version of the converter, which is optimized for a liquidity pool that has 2\r\n * reserves with 50%/50% weights\r\n */\r\ncontract StandardPoolConverter is ConverterVersion, IConverter, ContractRegistryClient, ReentrancyGuard, Time {\r\n    using SafeMath for uint256;\r\n    using ReserveToken for IReserveToken;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address payable;\r\n    using MathEx for *;\r\n\r\n    uint256 private constant MAX_UINT128 = 2**128 - 1;\r\n    uint256 private constant MAX_UINT112 = 2**112 - 1;\r\n    uint256 private constant MAX_UINT32 = 2**32 - 1;\r\n    uint256 private constant AVERAGE_RATE_PERIOD = 10 minutes;\r\n\r\n    uint256 private _reserveBalances;\r\n    uint256 private _reserveBalancesProduct;\r\n    IReserveToken[] private _reserveTokens;\r\n    mapping(IReserveToken => uint256) private _reserveIds;\r\n\r\n    IConverterAnchor private _anchor; // converter anchor contract\r\n    uint32 private _maxConversionFee; // maximum conversion fee, represented in ppm, 0...1000000\r\n    uint32 private _conversionFee; // current conversion fee, represented in ppm, 0...maxConversionFee\r\n\r\n    // average rate details:\r\n    // bits 0...111 represent the numerator of the rate between reserve token 0 and reserve token 1\r\n    // bits 111...223 represent the denominator of the rate between reserve token 0 and reserve token 1\r\n    // bits 224...255 represent the update-time of the rate between reserve token 0 and reserve token 1\r\n    // where `numerator / denominator` gives the worth of one reserve token 0 in units of reserve token 1\r\n    uint256 private _averageRateInfo;\r\n\r\n    /**\r\n     * @dev triggered after liquidity is added\r\n     */\r\n    event LiquidityAdded(\r\n        address indexed provider,\r\n        IReserveToken indexed reserveToken,\r\n        uint256 amount,\r\n        uint256 newBalance,\r\n        uint256 newSupply\r\n    );\r\n\r\n    /**\r\n     * @dev triggered after liquidity is removed\r\n     */\r\n    event LiquidityRemoved(\r\n        address indexed provider,\r\n        IReserveToken indexed reserveToken,\r\n        uint256 amount,\r\n        uint256 newBalance,\r\n        uint256 newSupply\r\n    );\r\n\r\n    /**\r\n     * @dev initializes a new StandardPoolConverter instance\r\n     */\r\n    constructor(\r\n        IConverterAnchor anchor,\r\n        IContractRegistry registry,\r\n        uint32 maxConversionFee\r\n    ) public ContractRegistryClient(registry) validAddress(address(anchor)) validConversionFee(maxConversionFee) {\r\n        _anchor = anchor;\r\n        _maxConversionFee = maxConversionFee;\r\n    }\r\n\r\n    // ensures that the converter is active\r\n    modifier active() {\r\n        _active();\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _active() private view {\r\n        require(isActive(), \"ERR_INACTIVE\");\r\n    }\r\n\r\n    // ensures that the converter is not active\r\n    modifier inactive() {\r\n        _inactive();\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _inactive() private view {\r\n        require(!isActive(), \"ERR_ACTIVE\");\r\n    }\r\n\r\n    // validates a reserve token address - verifies that the address belongs to one of the reserve tokens\r\n    modifier validReserve(IReserveToken reserveToken) {\r\n        _validReserve(reserveToken);\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validReserve(IReserveToken reserveToken) private view {\r\n        require(_reserveIds[reserveToken] != 0, \"ERR_INVALID_RESERVE\");\r\n    }\r\n\r\n    // validates conversion fee\r\n    modifier validConversionFee(uint32 fee) {\r\n        _validConversionFee(fee);\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validConversionFee(uint32 fee) private pure {\r\n        require(fee <= PPM_RESOLUTION, \"ERR_INVALID_CONVERSION_FEE\");\r\n    }\r\n\r\n    // validates reserve weight\r\n    modifier validReserveWeight(uint32 weight) {\r\n        _validReserveWeight(weight);\r\n\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validReserveWeight(uint32 weight) private pure {\r\n        require(weight == PPM_RESOLUTION / 2, \"ERR_INVALID_RESERVE_WEIGHT\");\r\n    }\r\n\r\n    /**\r\n     * @dev returns the converter type\r\n     */\r\n    function converterType() public pure virtual override returns (uint16) {\r\n        return 3;\r\n    }\r\n\r\n    /**\r\n     * @dev checks whether or not the converter version is 28 or higher\r\n     */\r\n    function isV28OrHigher() external pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the converter anchor\r\n     */\r\n    function anchor() external view override returns (IConverterAnchor) {\r\n        return _anchor;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the maximum conversion fee (in units of PPM)\r\n     */\r\n    function maxConversionFee() external view override returns (uint32) {\r\n        return _maxConversionFee;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the current conversion fee (in units of PPM)\r\n     */\r\n    function conversionFee() external view override returns (uint32) {\r\n        return _conversionFee;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the average rate info\r\n     */\r\n    function averageRateInfo() external view returns (uint256) {\r\n        return _averageRateInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev deposits ether\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - can only be used if the converter has an ETH reserve\r\n     */\r\n    receive() external payable override(IConverter) validReserve(ReserveToken.NATIVE_TOKEN_ADDRESS) {}\r\n\r\n    /**\r\n     * @dev returns true if the converter is active, false otherwise\r\n     */\r\n    function isActive() public view virtual override returns (bool) {\r\n        return _anchor.owner() == address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers the anchor ownership\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the new owner needs to accept the transfer\r\n     * - can only be called by the converter upgrader while the upgrader is the owner\r\n     *\r\n     * note that prior to version 28, you should use 'transferAnchorOwnership' instead\r\n     */\r\n    function transferAnchorOwnership(address newOwner) public override ownerOnly only(CONVERTER_UPGRADER) {\r\n        _anchor.transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev accepts ownership of the anchor after an ownership transfer\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - most converters are also activated as soon as they accept the anchor ownership\r\n     * - the caller must be the owner of the contract\r\n     *\r\n     * note that prior to version 28, you should use 'acceptTokenOwnership' instead\r\n     */\r\n    function acceptAnchorOwnership() public virtual override ownerOnly {\r\n        require(_reserveTokens.length == 2, \"ERR_INVALID_RESERVE_COUNT\");\r\n\r\n        _anchor.acceptOwnership();\r\n\r\n        _syncReserveBalances(0);\r\n\r\n        emit Activation(converterType(), _anchor, true);\r\n    }\r\n\r\n    /**\r\n     * @dev updates the current conversion fee\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the owner of the contract\r\n     */\r\n    function setConversionFee(uint32 fee) external override ownerOnly {\r\n        require(fee <= _maxConversionFee, \"ERR_INVALID_CONVERSION_FEE\");\r\n\r\n        emit ConversionFeeUpdate(_conversionFee, fee);\r\n\r\n        _conversionFee = fee;\r\n    }\r\n\r\n    /**\r\n     * @dev transfers reserve balances to a new converter during an upgrade\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - can only be called by the converter upgrader which should have been set at its owner\r\n     */\r\n    function transferReservesOnUpgrade(address newConverter)\r\n        external\r\n        override\r\n        nonReentrant\r\n        ownerOnly\r\n        only(CONVERTER_UPGRADER)\r\n    {\r\n        uint256 reserveCount = _reserveTokens.length;\r\n        for (uint256 i = 0; i < reserveCount; ++i) {\r\n            IReserveToken reserveToken = _reserveTokens[i];\r\n\r\n            reserveToken.safeTransfer(newConverter, reserveToken.balanceOf(address(this)));\r\n\r\n            _syncReserveBalance(reserveToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev upgrades the converter to the latest version\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the owner of the contract\r\n     *\r\n     * note that the owner needs to call acceptOwnership on the new converter after the upgrade\r\n     */\r\n    function upgrade() external ownerOnly {\r\n        IConverterUpgrader converterUpgrader = IConverterUpgrader(_addressOf(CONVERTER_UPGRADER));\r\n\r\n        // trigger de-activation event\r\n        emit Activation(converterType(), _anchor, false);\r\n\r\n        transferOwnership(address(converterUpgrader));\r\n        converterUpgrader.upgrade(version);\r\n        acceptOwnership();\r\n    }\r\n\r\n    /**\r\n     * @dev executed by the upgrader at the end of the upgrade process to handle custom pool logic\r\n     */\r\n    function onUpgradeComplete() external override nonReentrant ownerOnly only(CONVERTER_UPGRADER) {\r\n        (uint256 reserveBalance0, uint256 reserveBalance1) = _loadReserveBalances(1, 2);\r\n        _reserveBalancesProduct = reserveBalance0 * reserveBalance1;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the number of reserve tokens\r\n     *\r\n     * note that prior to version 17, you should use 'connectorTokenCount' instead\r\n     */\r\n    function reserveTokenCount() public view override returns (uint16) {\r\n        return uint16(_reserveTokens.length);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the array of reserve tokens\r\n     */\r\n    function reserveTokens() external view override returns (IReserveToken[] memory) {\r\n        return _reserveTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev defines a new reserve token for the converter\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the owner of the contract\r\n     * - the converter must be inactive\r\n     */\r\n    function addReserve(IReserveToken token, uint32 weight)\r\n        external\r\n        virtual\r\n        override\r\n        ownerOnly\r\n        inactive\r\n        validExternalAddress(address(token))\r\n        validReserveWeight(weight)\r\n    {\r\n        require(address(token) != address(_anchor) && _reserveIds[token] == 0, \"ERR_INVALID_RESERVE\");\r\n        require(reserveTokenCount() < 2, \"ERR_INVALID_RESERVE_COUNT\");\r\n\r\n        _reserveTokens.push(token);\r\n        _reserveIds[token] = _reserveTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the reserve's weight\r\n     */\r\n    function reserveWeight(IReserveToken reserveToken) external view validReserve(reserveToken) returns (uint32) {\r\n        return PPM_RESOLUTION / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the balance of a given reserve token\r\n     */\r\n    function reserveBalance(IReserveToken reserveToken) public view override returns (uint256) {\r\n        uint256 reserveId = _reserveIds[reserveToken];\r\n        require(reserveId != 0, \"ERR_INVALID_RESERVE\");\r\n\r\n        return _reserveBalance(reserveId);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the balances of both reserve tokens\r\n     */\r\n    function reserveBalances() public view returns (uint256, uint256) {\r\n        return _loadReserveBalances(1, 2);\r\n    }\r\n\r\n    /**\r\n     * @dev syncs all stored reserve balances\r\n     */\r\n    function syncReserveBalances() external {\r\n        _syncReserveBalances(0);\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the accumulated network fee and transfers it to the network fee wallet\r\n     */\r\n    function processNetworkFees() external nonReentrant {\r\n        (uint256 reserveBalance0, uint256 reserveBalance1) = _processNetworkFees(0);\r\n        _reserveBalancesProduct = reserveBalance0 * reserveBalance1;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the accumulated network fee and transfers it to the network fee wallet\r\n     */\r\n    function _processNetworkFees(uint256 value) private returns (uint256, uint256) {\r\n        _syncReserveBalances(value);\r\n        (uint256 reserveBalance0, uint256 reserveBalance1) = _loadReserveBalances(1, 2);\r\n        (ITokenHolder wallet, uint256 fee0, uint256 fee1) = _networkWalletAndFees(reserveBalance0, reserveBalance1);\r\n        reserveBalance0 -= fee0;\r\n        reserveBalance1 -= fee1;\r\n\r\n        _setReserveBalances(1, 2, reserveBalance0, reserveBalance1);\r\n\r\n        // using a regular transfer here for the native token would revert due to exceeding\r\n        // the 2300 gas limit which is why we're using call instead (via sendValue),\r\n        // which the 2300 gas limit does not apply for\r\n        if (_reserveTokens[0].isNativeToken()) {\r\n            payable(address(wallet)).sendValue(fee0);\r\n        } else {\r\n            _reserveTokens[0].safeTransfer(address(wallet), fee0);\r\n        }\r\n\r\n        if (_reserveTokens[1].isNativeToken()) {\r\n            payable(address(wallet)).sendValue(fee1);\r\n        } else {\r\n            _reserveTokens[1].safeTransfer(address(wallet), fee1);\r\n        }\r\n\r\n        return (reserveBalance0, reserveBalance1);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the reserve balances of the given reserve tokens minus their corresponding fees\r\n     */\r\n    function _baseReserveBalances(IReserveToken[] memory baseReserveTokens) private view returns (uint256[2] memory) {\r\n        uint256 reserveId0 = _reserveIds[baseReserveTokens[0]];\r\n        uint256 reserveId1 = _reserveIds[baseReserveTokens[1]];\r\n        (uint256 reserveBalance0, uint256 reserveBalance1) = _loadReserveBalances(reserveId0, reserveId1);\r\n        (, uint256 fee0, uint256 fee1) = _networkWalletAndFees(reserveBalance0, reserveBalance1);\r\n\r\n        return [reserveBalance0 - fee0, reserveBalance1 - fee1];\r\n    }\r\n\r\n    /**\r\n     * @dev converts a specific amount of source tokens to target tokens\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the bancor network contract\r\n     */\r\n    function convert(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        uint256 sourceAmount,\r\n        address trader,\r\n        address payable beneficiary\r\n    ) external payable override nonReentrant only(BANCOR_NETWORK) returns (uint256) {\r\n        require(sourceToken != targetToken, \"ERR_SAME_SOURCE_TARGET\");\r\n\r\n        return _doConvert(sourceToken, targetToken, sourceAmount, trader, beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the conversion fee for a given target amount\r\n     */\r\n    function _calculateFee(uint256 targetAmount) private view returns (uint256) {\r\n        return targetAmount.mul(_conversionFee) / PPM_RESOLUTION;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the conversion fee taken from a given target amount\r\n     */\r\n    function _calculateFeeInv(uint256 targetAmount) private view returns (uint256) {\r\n        return targetAmount.mul(_conversionFee).div(PPM_RESOLUTION - _conversionFee);\r\n    }\r\n\r\n    /**\r\n     * @dev loads the stored reserve balance for a given reserve id\r\n     */\r\n    function _reserveBalance(uint256 reserveId) private view returns (uint256) {\r\n        return _decodeReserveBalance(_reserveBalances, reserveId);\r\n    }\r\n\r\n    /**\r\n     * @dev loads the stored reserve balances\r\n     */\r\n    function _loadReserveBalances(uint256 sourceId, uint256 targetId) private view returns (uint256, uint256) {\r\n        require((sourceId == 1 && targetId == 2) || (sourceId == 2 && targetId == 1), \"ERR_INVALID_RESERVES\");\r\n\r\n        return _decodeReserveBalances(_reserveBalances, sourceId, targetId);\r\n    }\r\n\r\n    /**\r\n     * @dev stores the stored reserve balance for a given reserve id\r\n     */\r\n    function _setReserveBalance(uint256 reserveId, uint256 balance) private {\r\n        require(balance <= MAX_UINT128, \"ERR_RESERVE_BALANCE_OVERFLOW\");\r\n\r\n        uint256 otherBalance = _decodeReserveBalance(_reserveBalances, 3 - reserveId);\r\n        _reserveBalances = _encodeReserveBalances(balance, reserveId, otherBalance, 3 - reserveId);\r\n    }\r\n\r\n    /**\r\n     * @dev stores the stored reserve balances\r\n     */\r\n    function _setReserveBalances(\r\n        uint256 sourceId,\r\n        uint256 targetId,\r\n        uint256 sourceBalance,\r\n        uint256 targetBalance\r\n    ) private {\r\n        require(sourceBalance <= MAX_UINT128 && targetBalance <= MAX_UINT128, \"ERR_RESERVE_BALANCE_OVERFLOW\");\r\n\r\n        _reserveBalances = _encodeReserveBalances(sourceBalance, sourceId, targetBalance, targetId);\r\n    }\r\n\r\n    /**\r\n     * @dev syncs the stored reserve balance for a given reserve with the real reserve balance\r\n     */\r\n    function _syncReserveBalance(IReserveToken reserveToken) private {\r\n        uint256 reserveId = _reserveIds[reserveToken];\r\n\r\n        _setReserveBalance(reserveId, reserveToken.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev syncs all stored reserve balances, excluding a given amount of ether from the ether reserve balance (if relevant)\r\n     */\r\n    function _syncReserveBalances(uint256 value) private {\r\n        IReserveToken _reserveToken0 = _reserveTokens[0];\r\n        IReserveToken _reserveToken1 = _reserveTokens[1];\r\n        uint256 balance0 = _reserveToken0.balanceOf(address(this)) - (_reserveToken0.isNativeToken() ? value : 0);\r\n        uint256 balance1 = _reserveToken1.balanceOf(address(this)) - (_reserveToken1.isNativeToken() ? value : 0);\r\n\r\n        _setReserveBalances(1, 2, balance0, balance1);\r\n    }\r\n\r\n    /**\r\n     * @dev helper, dispatches the Conversion event\r\n     */\r\n    function _dispatchConversionEvent(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        address trader,\r\n        uint256 sourceAmount,\r\n        uint256 targetAmount,\r\n        uint256 feeAmount\r\n    ) private {\r\n        emit Conversion(sourceToken, targetToken, trader, sourceAmount, targetAmount, int256(feeAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev returns the expected amount and expected fee for converting one reserve to another\r\n     */\r\n    function targetAmountAndFee(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        uint256 sourceAmount\r\n    ) public view virtual override active returns (uint256, uint256) {\r\n        uint256 sourceId = _reserveIds[sourceToken];\r\n        uint256 targetId = _reserveIds[targetToken];\r\n\r\n        (uint256 sourceBalance, uint256 targetBalance) = _loadReserveBalances(sourceId, targetId);\r\n\r\n        return _targetAmountAndFee(sourceToken, targetToken, sourceBalance, targetBalance, sourceAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the expected amount and expected fee for converting one reserve to another\r\n     */\r\n    function _targetAmountAndFee(\r\n        IReserveToken, /* sourceToken */\r\n        IReserveToken, /* targetToken */\r\n        uint256 sourceBalance,\r\n        uint256 targetBalance,\r\n        uint256 sourceAmount\r\n    ) private view returns (uint256, uint256) {\r\n        uint256 targetAmount = _crossReserveTargetAmount(sourceBalance, targetBalance, sourceAmount);\r\n\r\n        uint256 fee = _calculateFee(targetAmount);\r\n\r\n        return (targetAmount - fee, fee);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the required amount and expected fee for converting one reserve to another\r\n     */\r\n    function sourceAmountAndFee(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        uint256 targetAmount\r\n    ) public view virtual active returns (uint256, uint256) {\r\n        uint256 sourceId = _reserveIds[sourceToken];\r\n        uint256 targetId = _reserveIds[targetToken];\r\n\r\n        (uint256 sourceBalance, uint256 targetBalance) = _loadReserveBalances(sourceId, targetId);\r\n\r\n        uint256 fee = _calculateFeeInv(targetAmount);\r\n\r\n        uint256 sourceAmount = _crossReserveSourceAmount(sourceBalance, targetBalance, targetAmount.add(fee));\r\n\r\n        return (sourceAmount, fee);\r\n    }\r\n\r\n    /**\r\n     * @dev converts a specific amount of source tokens to target tokens and returns the amount of tokens received\r\n     * (in units of the target token)\r\n     */\r\n    function _doConvert(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        uint256 sourceAmount,\r\n        address trader,\r\n        address payable beneficiary\r\n    ) private returns (uint256) {\r\n        // update the recent average rate\r\n        _updateRecentAverageRate();\r\n\r\n        uint256 sourceId = _reserveIds[sourceToken];\r\n        uint256 targetId = _reserveIds[targetToken];\r\n\r\n        (uint256 sourceBalance, uint256 targetBalance) = _loadReserveBalances(sourceId, targetId);\r\n\r\n        // get the target amount minus the conversion fee and the conversion fee\r\n        (uint256 targetAmount, uint256 fee) = _targetAmountAndFee(\r\n            sourceToken,\r\n            targetToken,\r\n            sourceBalance,\r\n            targetBalance,\r\n            sourceAmount\r\n        );\r\n\r\n        // ensure that the trade gives something in return\r\n        require(targetAmount != 0, \"ERR_ZERO_TARGET_AMOUNT\");\r\n\r\n        // ensure that the trade won't deplete the reserve balance\r\n        assert(targetAmount < targetBalance);\r\n\r\n        // ensure that the input amount was already deposited\r\n        uint256 actualSourceBalance = sourceToken.balanceOf(address(this));\r\n        if (sourceToken.isNativeToken()) {\r\n            require(msg.value == sourceAmount, \"ERR_ETH_AMOUNT_MISMATCH\");\r\n        } else {\r\n            require(msg.value == 0 && actualSourceBalance.sub(sourceBalance) >= sourceAmount, \"ERR_INVALID_AMOUNT\");\r\n        }\r\n\r\n        // sync the reserve balances\r\n        _setReserveBalances(sourceId, targetId, actualSourceBalance, targetBalance - targetAmount);\r\n\r\n        // transfer funds to the beneficiary in the to reserve token\r\n        targetToken.safeTransfer(beneficiary, targetAmount);\r\n\r\n        // dispatch the conversion event\r\n        _dispatchConversionEvent(sourceToken, targetToken, trader, sourceAmount, targetAmount, fee);\r\n\r\n        // dispatch rate updates\r\n        _dispatchTokenRateUpdateEvents(sourceToken, targetToken, actualSourceBalance, targetBalance - targetAmount);\r\n\r\n        return targetAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the recent average rate of 1 token in the other reserve token units\r\n     */\r\n    function recentAverageRate(IReserveToken token) external view validReserve(token) returns (uint256, uint256) {\r\n        // get the recent average rate of reserve 0\r\n        uint256 rate = _calcRecentAverageRate(_averageRateInfo);\r\n\r\n        uint256 rateN = _decodeAverageRateN(rate);\r\n        uint256 rateD = _decodeAverageRateD(rate);\r\n\r\n        if (token == _reserveTokens[0]) {\r\n            return (rateN, rateD);\r\n        }\r\n\r\n        return (rateD, rateN);\r\n    }\r\n\r\n    /**\r\n     * @dev updates the recent average rate if needed\r\n     */\r\n    function _updateRecentAverageRate() private {\r\n        uint256 averageRateInfo1 = _averageRateInfo;\r\n        uint256 averageRateInfo2 = _calcRecentAverageRate(averageRateInfo1);\r\n        if (averageRateInfo1 != averageRateInfo2) {\r\n            _averageRateInfo = averageRateInfo2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev returns the recent average rate of 1 reserve token 0 in reserve token 1 units\r\n     */\r\n    function _calcRecentAverageRate(uint256 averageRateInfoData) private view returns (uint256) {\r\n        // get the previous average rate and its update-time\r\n        uint256 prevAverageRateT = _decodeAverageRateT(averageRateInfoData);\r\n        uint256 prevAverageRateN = _decodeAverageRateN(averageRateInfoData);\r\n        uint256 prevAverageRateD = _decodeAverageRateD(averageRateInfoData);\r\n\r\n        // get the elapsed time since the previous average rate was calculated\r\n        uint256 currentTime = _time();\r\n        uint256 timeElapsed = currentTime.sub(prevAverageRateT);\r\n\r\n        // if the previous average rate was calculated in the current block, the average rate remains unchanged\r\n        if (timeElapsed == 0) {\r\n            return averageRateInfoData;\r\n        }\r\n\r\n        // get the current rate between the reserves\r\n        (uint256 currentRateD, uint256 currentRateN) = reserveBalances();\r\n\r\n        // if the previous average rate was calculated a while ago or never, the average rate is equal to the current rate\r\n        if (timeElapsed >= AVERAGE_RATE_PERIOD || prevAverageRateT == 0) {\r\n            (currentRateN, currentRateD) = MathEx.reducedRatio(currentRateN, currentRateD, MAX_UINT112);\r\n            return _encodeAverageRateInfo(currentTime, currentRateN, currentRateD);\r\n        }\r\n\r\n        uint256 x = prevAverageRateD.mul(currentRateN);\r\n        uint256 y = prevAverageRateN.mul(currentRateD);\r\n\r\n        // since we know that timeElapsed < AVERAGE_RATE_PERIOD, we can avoid using SafeMath:\r\n        uint256 newRateN = y.mul(AVERAGE_RATE_PERIOD - timeElapsed).add(x.mul(timeElapsed));\r\n        uint256 newRateD = prevAverageRateD.mul(currentRateD).mul(AVERAGE_RATE_PERIOD);\r\n\r\n        (newRateN, newRateD) = MathEx.reducedRatio(newRateN, newRateD, MAX_UINT112);\r\n\r\n        return _encodeAverageRateInfo(currentTime, newRateN, newRateD);\r\n    }\r\n\r\n    /**\r\n     * @dev increases the pool's liquidity and mints new shares in the pool to the caller and returns the amount of pool\r\n     * tokens issued\r\n     */\r\n    function addLiquidity(\r\n        IReserveToken[] memory reserves,\r\n        uint256[] memory reserveAmounts,\r\n        uint256 minReturn\r\n    ) external payable nonReentrant active returns (uint256) {\r\n        _verifyLiquidityInput(reserves, reserveAmounts, minReturn);\r\n\r\n        // if one of the reserves is ETH, then verify that the input amount of ETH is equal to the input value of ETH\r\n        require(\r\n            (!reserves[0].isNativeToken() || reserveAmounts[0] == msg.value) &&\r\n                (!reserves[1].isNativeToken() || reserveAmounts[1] == msg.value),\r\n            \"ERR_ETH_AMOUNT_MISMATCH\"\r\n        );\r\n\r\n        // if the input value of ETH is larger than zero, then verify that one of the reserves is ETH\r\n        if (msg.value > 0) {\r\n            require(_reserveIds[ReserveToken.NATIVE_TOKEN_ADDRESS] != 0, \"ERR_NO_ETH_RESERVE\");\r\n        }\r\n\r\n        // save a local copy of the pool token\r\n        IDSToken poolToken = IDSToken(address(_anchor));\r\n\r\n        // get the total supply\r\n        uint256 totalSupply = poolToken.totalSupply();\r\n\r\n        uint256[2] memory prevReserveBalances;\r\n        uint256[2] memory newReserveBalances;\r\n\r\n        // process the network fees and get the reserve balances\r\n        (prevReserveBalances[0], prevReserveBalances[1]) = _processNetworkFees(msg.value);\r\n\r\n        uint256 amount;\r\n        uint256[2] memory newReserveAmounts;\r\n\r\n        // calculate the amount of pool tokens to mint for the caller\r\n        // and the amount of reserve tokens to transfer from the caller\r\n        if (totalSupply == 0) {\r\n            amount = MathEx.geometricMean(reserveAmounts);\r\n            newReserveAmounts[0] = reserveAmounts[0];\r\n            newReserveAmounts[1] = reserveAmounts[1];\r\n        } else {\r\n            (amount, newReserveAmounts) = _addLiquidityAmounts(\r\n                reserves,\r\n                reserveAmounts,\r\n                prevReserveBalances,\r\n                totalSupply\r\n            );\r\n        }\r\n\r\n        uint256 newPoolTokenSupply = totalSupply.add(amount);\r\n        for (uint256 i = 0; i < 2; i++) {\r\n            IReserveToken reserveToken = reserves[i];\r\n            uint256 reserveAmount = newReserveAmounts[i];\r\n            require(reserveAmount > 0, \"ERR_ZERO_TARGET_AMOUNT\");\r\n            assert(reserveAmount <= reserveAmounts[i]);\r\n\r\n            // transfer each one of the reserve amounts from the user to the pool\r\n            if (!reserveToken.isNativeToken()) {\r\n                // ETH has already been transferred as part of the transaction\r\n                reserveToken.safeTransferFrom(msg.sender, address(this), reserveAmount);\r\n            } else if (reserveAmounts[i] > reserveAmount) {\r\n                // transfer the extra amount of ETH back to the user\r\n                reserveToken.safeTransfer(msg.sender, reserveAmounts[i] - reserveAmount);\r\n            }\r\n\r\n            // save the new reserve balance\r\n            newReserveBalances[i] = prevReserveBalances[i].add(reserveAmount);\r\n\r\n            emit LiquidityAdded(msg.sender, reserveToken, reserveAmount, newReserveBalances[i], newPoolTokenSupply);\r\n\r\n            // dispatch the `TokenRateUpdate` event for the pool token\r\n            emit TokenRateUpdate(address(poolToken), address(reserveToken), newReserveBalances[i], newPoolTokenSupply);\r\n        }\r\n\r\n        // set the reserve balances\r\n        _setReserveBalances(1, 2, newReserveBalances[0], newReserveBalances[1]);\r\n\r\n        // set the reserve balances product\r\n        _reserveBalancesProduct = newReserveBalances[0] * newReserveBalances[1];\r\n\r\n        // verify that the equivalent amount of tokens is equal to or larger than the user's expectation\r\n        require(amount >= minReturn, \"ERR_RETURN_TOO_LOW\");\r\n\r\n        // issue the tokens to the user\r\n        poolToken.issue(msg.sender, amount);\r\n\r\n        // return the amount of pool tokens issued\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev get the amount of pool tokens to mint for the caller and the amount of reserve tokens to transfer from\r\n     * the caller\r\n     */\r\n    function _addLiquidityAmounts(\r\n        IReserveToken[] memory, /* reserves */\r\n        uint256[] memory amounts,\r\n        uint256[2] memory balances,\r\n        uint256 totalSupply\r\n    ) private pure returns (uint256, uint256[2] memory) {\r\n        uint256 index = amounts[0].mul(balances[1]) < amounts[1].mul(balances[0]) ? 0 : 1;\r\n        uint256 amount = _fundSupplyAmount(totalSupply, balances[index], amounts[index]);\r\n\r\n        uint256[2] memory newAmounts = [\r\n            _fundCost(totalSupply, balances[0], amount),\r\n            _fundCost(totalSupply, balances[1], amount)\r\n        ];\r\n\r\n        return (amount, newAmounts);\r\n    }\r\n\r\n    /**\r\n     * @dev decreases the pool's liquidity and burns the caller's shares in the pool and returns the amount of each\r\n     * reserve token granted for the given amount of pool tokens\r\n     */\r\n    function removeLiquidity(\r\n        uint256 amount,\r\n        IReserveToken[] memory reserves,\r\n        uint256[] memory minReturnAmounts\r\n    ) external nonReentrant active returns (uint256[] memory) {\r\n        // verify the user input\r\n        bool inputRearranged = _verifyLiquidityInput(reserves, minReturnAmounts, amount);\r\n\r\n        // save a local copy of the pool token\r\n        IDSToken poolToken = IDSToken(address(_anchor));\r\n\r\n        // get the total supply BEFORE destroying the user tokens\r\n        uint256 totalSupply = poolToken.totalSupply();\r\n\r\n        // destroy the user tokens\r\n        poolToken.destroy(msg.sender, amount);\r\n\r\n        uint256 newPoolTokenSupply = totalSupply.sub(amount);\r\n\r\n        uint256[2] memory prevReserveBalances;\r\n        uint256[2] memory newReserveBalances;\r\n\r\n        // process the network fees and get the reserve balances\r\n        (prevReserveBalances[0], prevReserveBalances[1]) = _processNetworkFees(0);\r\n\r\n        uint256[] memory reserveAmounts = _removeLiquidityReserveAmounts(amount, totalSupply, prevReserveBalances);\r\n\r\n        for (uint256 i = 0; i < 2; i++) {\r\n            IReserveToken reserveToken = reserves[i];\r\n            uint256 reserveAmount = reserveAmounts[i];\r\n            require(reserveAmount >= minReturnAmounts[i], \"ERR_ZERO_TARGET_AMOUNT\");\r\n\r\n            // save the new reserve balance\r\n            newReserveBalances[i] = prevReserveBalances[i].sub(reserveAmount);\r\n\r\n            // transfer each one of the reserve amounts from the pool to the user\r\n            reserveToken.safeTransfer(msg.sender, reserveAmount);\r\n\r\n            emit LiquidityRemoved(msg.sender, reserveToken, reserveAmount, newReserveBalances[i], newPoolTokenSupply);\r\n\r\n            // dispatch the `TokenRateUpdate` event for the pool token\r\n            emit TokenRateUpdate(address(poolToken), address(reserveToken), newReserveBalances[i], newPoolTokenSupply);\r\n        }\r\n\r\n        // set the reserve balances\r\n        _setReserveBalances(1, 2, newReserveBalances[0], newReserveBalances[1]);\r\n\r\n        // set the reserve balances product\r\n        _reserveBalancesProduct = newReserveBalances[0] * newReserveBalances[1];\r\n\r\n        if (inputRearranged) {\r\n            uint256 tempReserveAmount = reserveAmounts[0];\r\n            reserveAmounts[0] = reserveAmounts[1];\r\n            reserveAmounts[1] = tempReserveAmount;\r\n        }\r\n\r\n        // return the amount of each reserve token granted for the given amount of pool tokens\r\n        return reserveAmounts;\r\n    }\r\n\r\n    /**\r\n     * @dev given the amount of one of the reserve tokens to add liquidity of, returns the required amount of each one\r\n     * of the other reserve tokens since an empty pool can be funded with any list of non-zero input amounts\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - this function assumes that the pool is not empty (has already been funded)\r\n     */\r\n    function addLiquidityCost(\r\n        IReserveToken[] memory reserves,\r\n        uint256 index,\r\n        uint256 amount\r\n    ) external view returns (uint256[] memory) {\r\n        uint256 totalSupply = IDSToken(address(_anchor)).totalSupply();\r\n        uint256[2] memory baseBalances = _baseReserveBalances(reserves);\r\n        uint256 supplyAmount = _fundSupplyAmount(totalSupply, baseBalances[index], amount);\r\n\r\n        uint256[] memory reserveAmounts = new uint256[](2);\r\n        reserveAmounts[0] = _fundCost(totalSupply, baseBalances[0], supplyAmount);\r\n        reserveAmounts[1] = _fundCost(totalSupply, baseBalances[1], supplyAmount);\r\n\r\n        return reserveAmounts;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the amount of pool tokens entitled for given amounts of reserve tokens\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - since an empty pool can be funded with any list of non-zero input amounts, this function assumes that the pool\r\n     * is not empty (has already been funded)\r\n     */\r\n    function addLiquidityReturn(IReserveToken[] memory reserves, uint256[] memory amounts)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalSupply = IDSToken(address(_anchor)).totalSupply();\r\n        uint256[2] memory baseBalances = _baseReserveBalances(reserves);\r\n        (uint256 amount, ) = _addLiquidityAmounts(reserves, amounts, baseBalances, totalSupply);\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the amount of each reserve token entitled for a given amount of pool tokens\r\n     */\r\n    function removeLiquidityReturn(uint256 amount, IReserveToken[] memory reserves)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 totalSupply = IDSToken(address(_anchor)).totalSupply();\r\n        uint256[2] memory baseBalances = _baseReserveBalances(reserves);\r\n\r\n        return _removeLiquidityReserveAmounts(amount, totalSupply, baseBalances);\r\n    }\r\n\r\n    /**\r\n     * @dev verifies that a given array of tokens is identical to the converter's array of reserve tokens\r\n     * note that we take this input in order to allow specifying the corresponding reserve amounts in any order and that\r\n     * this function rearranges the input arrays according to the converter's array of reserve tokens\r\n     */\r\n    function _verifyLiquidityInput(\r\n        IReserveToken[] memory reserves,\r\n        uint256[] memory amounts,\r\n        uint256 amount\r\n    ) private view returns (bool) {\r\n        require(_validReserveAmounts(amounts) && amount > 0, \"ERR_ZERO_AMOUNT\");\r\n\r\n        uint256 reserve0Id = _reserveIds[reserves[0]];\r\n        uint256 reserve1Id = _reserveIds[reserves[1]];\r\n\r\n        if (reserve0Id == 2 && reserve1Id == 1) {\r\n            IReserveToken tempReserveToken = reserves[0];\r\n            reserves[0] = reserves[1];\r\n            reserves[1] = tempReserveToken;\r\n\r\n            uint256 tempReserveAmount = amounts[0];\r\n            amounts[0] = amounts[1];\r\n            amounts[1] = tempReserveAmount;\r\n\r\n            return true;\r\n        }\r\n\r\n        require(reserve0Id == 1 && reserve1Id == 2, \"ERR_INVALID_RESERVE\");\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev checks whether or not both reserve amounts are larger than zero\r\n     */\r\n    function _validReserveAmounts(uint256[] memory amounts) private pure returns (bool) {\r\n        return amounts[0] > 0 && amounts[1] > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the amount of each reserve token entitled for a given amount of pool tokens\r\n     */\r\n    function _removeLiquidityReserveAmounts(\r\n        uint256 amount,\r\n        uint256 totalSupply,\r\n        uint256[2] memory balances\r\n    ) private pure returns (uint256[] memory) {\r\n        uint256[] memory reserveAmounts = new uint256[](2);\r\n        reserveAmounts[0] = _liquidateReserveAmount(totalSupply, balances[0], amount);\r\n        reserveAmounts[1] = _liquidateReserveAmount(totalSupply, balances[1], amount);\r\n\r\n        return reserveAmounts;\r\n    }\r\n\r\n    /**\r\n     * @dev dispatches token rate update events for the reserve tokens and the pool token\r\n     */\r\n    function _dispatchTokenRateUpdateEvents(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        uint256 sourceBalance,\r\n        uint256 targetBalance\r\n    ) private {\r\n        // save a local copy of the pool token\r\n        IDSToken poolToken = IDSToken(address(_anchor));\r\n\r\n        // get the total supply of pool tokens\r\n        uint256 poolTokenSupply = poolToken.totalSupply();\r\n\r\n        // dispatch token rate update event for the reserve tokens\r\n        emit TokenRateUpdate(address(sourceToken), address(targetToken), targetBalance, sourceBalance);\r\n\r\n        // dispatch token rate update events for the pool token\r\n        emit TokenRateUpdate(address(poolToken), address(sourceToken), sourceBalance, poolTokenSupply);\r\n        emit TokenRateUpdate(address(poolToken), address(targetToken), targetBalance, poolTokenSupply);\r\n    }\r\n\r\n    function _encodeReserveBalance(uint256 balance, uint256 id) private pure returns (uint256) {\r\n        assert(balance <= MAX_UINT128 && (id == 1 || id == 2));\r\n        return balance << ((id - 1) * 128);\r\n    }\r\n\r\n    function _decodeReserveBalance(uint256 balances, uint256 id) private pure returns (uint256) {\r\n        assert(id == 1 || id == 2);\r\n        return (balances >> ((id - 1) * 128)) & MAX_UINT128;\r\n    }\r\n\r\n    function _encodeReserveBalances(\r\n        uint256 balance0,\r\n        uint256 id0,\r\n        uint256 balance1,\r\n        uint256 id1\r\n    ) private pure returns (uint256) {\r\n        return _encodeReserveBalance(balance0, id0) | _encodeReserveBalance(balance1, id1);\r\n    }\r\n\r\n    function _decodeReserveBalances(\r\n        uint256 balances,\r\n        uint256 id0,\r\n        uint256 id1\r\n    ) private pure returns (uint256, uint256) {\r\n        return (_decodeReserveBalance(balances, id0), _decodeReserveBalance(balances, id1));\r\n    }\r\n\r\n    function _encodeAverageRateInfo(\r\n        uint256 averageRateT,\r\n        uint256 averageRateN,\r\n        uint256 averageRateD\r\n    ) private pure returns (uint256) {\r\n        assert(averageRateT <= MAX_UINT32 && averageRateN <= MAX_UINT112 && averageRateD <= MAX_UINT112);\r\n        return (averageRateT << 224) | (averageRateN << 112) | averageRateD;\r\n    }\r\n\r\n    function _decodeAverageRateT(uint256 averageRateInfoData) private pure returns (uint256) {\r\n        return averageRateInfoData >> 224;\r\n    }\r\n\r\n    function _decodeAverageRateN(uint256 averageRateInfoData) private pure returns (uint256) {\r\n        return (averageRateInfoData >> 112) & MAX_UINT112;\r\n    }\r\n\r\n    function _decodeAverageRateD(uint256 averageRateInfoData) private pure returns (uint256) {\r\n        return averageRateInfoData & MAX_UINT112;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the largest integer smaller than or equal to the square root of a given value\r\n     */\r\n    function _floorSqrt(uint256 x) private pure returns (uint256) {\r\n        return x > 0 ? MathEx.floorSqrt(x) : 0;\r\n    }\r\n\r\n    function _crossReserveTargetAmount(\r\n        uint256 sourceReserveBalance,\r\n        uint256 targetReserveBalance,\r\n        uint256 sourceAmount\r\n    ) private pure returns (uint256) {\r\n        require(sourceReserveBalance > 0 && targetReserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\r\n\r\n        return targetReserveBalance.mul(sourceAmount) / sourceReserveBalance.add(sourceAmount);\r\n    }\r\n\r\n    function _crossReserveSourceAmount(\r\n        uint256 sourceReserveBalance,\r\n        uint256 targetReserveBalance,\r\n        uint256 targetAmount\r\n    ) private pure returns (uint256) {\r\n        require(sourceReserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\r\n        require(targetAmount < targetReserveBalance, \"ERR_INVALID_AMOUNT\");\r\n\r\n        if (targetAmount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return (sourceReserveBalance.mul(targetAmount) - 1) / (targetReserveBalance - targetAmount) + 1;\r\n    }\r\n\r\n    function _fundCost(\r\n        uint256 supply,\r\n        uint256 balance,\r\n        uint256 amount\r\n    ) private pure returns (uint256) {\r\n        require(supply > 0, \"ERR_INVALID_SUPPLY\");\r\n        require(balance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\r\n\r\n        // special case for 0 amount\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return (amount.mul(balance) - 1) / supply + 1;\r\n    }\r\n\r\n    function _fundSupplyAmount(\r\n        uint256 supply,\r\n        uint256 balance,\r\n        uint256 amount\r\n    ) private pure returns (uint256) {\r\n        require(supply > 0, \"ERR_INVALID_SUPPLY\");\r\n        require(balance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\r\n\r\n        // special case for 0 amount\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return amount.mul(supply) / balance;\r\n    }\r\n\r\n    function _liquidateReserveAmount(\r\n        uint256 supply,\r\n        uint256 balance,\r\n        uint256 amount\r\n    ) private pure returns (uint256) {\r\n        require(supply > 0, \"ERR_INVALID_SUPPLY\");\r\n        require(balance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\r\n        require(amount <= supply, \"ERR_INVALID_AMOUNT\");\r\n\r\n        // special case for 0 amount\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // special case for liquidating the entire supply\r\n        if (amount == supply) {\r\n            return balance;\r\n        }\r\n\r\n        return amount.mul(balance) / supply;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the network wallet and fees\r\n     */\r\n    function _networkWalletAndFees(uint256 reserveBalance0, uint256 reserveBalance1)\r\n        private\r\n        view\r\n        returns (\r\n            ITokenHolder,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 prevPoint = _floorSqrt(_reserveBalancesProduct);\r\n        uint256 currPoint = _floorSqrt(reserveBalance0 * reserveBalance1);\r\n\r\n        if (prevPoint >= currPoint) {\r\n            return (ITokenHolder(address(0)), 0, 0);\r\n        }\r\n\r\n        (ITokenHolder networkFeeWallet, uint32 networkFee) = INetworkSettings(_addressOf(NETWORK_SETTINGS))\r\n            .networkFeeParams();\r\n        uint256 n = (currPoint - prevPoint) * networkFee;\r\n        uint256 d = currPoint * PPM_RESOLUTION;\r\n\r\n        return (networkFeeWallet, reserveBalance0.mul(n).div(d), reserveBalance1.mul(n).div(d));\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated since version 28, backward compatibility - use only for earlier versions\r\n     */\r\n    function token() external view override returns (IConverterAnchor) {\r\n        return _anchor;\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated, backward compatibility\r\n     */\r\n    function transferTokenOwnership(address newOwner) external override ownerOnly {\r\n        transferAnchorOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated, backward compatibility\r\n     */\r\n    function acceptTokenOwnership() public override ownerOnly {\r\n        acceptAnchorOwnership();\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated, backward compatibility\r\n     */\r\n    function connectors(IReserveToken reserveToken)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256,\r\n            uint32,\r\n            bool,\r\n            bool,\r\n            bool\r\n        )\r\n    {\r\n        uint256 reserveId = _reserveIds[reserveToken];\r\n        if (reserveId != 0) {\r\n            return (_reserveBalance(reserveId), PPM_RESOLUTION / 2, false, false, true);\r\n        }\r\n        return (0, 0, false, false, false);\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated, backward compatibility\r\n     */\r\n    function connectorTokens(uint256 index) external view override returns (IReserveToken) {\r\n        return _reserveTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated, backward compatibility\r\n     */\r\n    function connectorTokenCount() external view override returns (uint16) {\r\n        return reserveTokenCount();\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated, backward compatibility\r\n     */\r\n    function getConnectorBalance(IReserveToken reserveToken) external view override returns (uint256) {\r\n        return reserveBalance(reserveToken);\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated, backward compatibility\r\n     */\r\n    function getReturn(\r\n        IReserveToken sourceToken,\r\n        IReserveToken targetToken,\r\n        uint256 sourceAmount\r\n    ) external view returns (uint256, uint256) {\r\n        return targetAmountAndFee(sourceToken, targetToken, sourceAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"anchor\",\"type\":\"address\"},{\"internalType\":\"contract IContractRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"maxConversionFee\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"converterType\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IConverterAnchor\",\"name\":\"anchor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"Activation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IReserveToken\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IReserveToken\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"conversionFee\",\"type\":\"int256\"}],\"name\":\"Conversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"ConversionFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IReserveToken\",\"name\":\"reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IReserveToken\",\"name\":\"reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateN\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateD\",\"type\":\"uint256\"}],\"name\":\"TokenRateUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAnchorOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken[]\",\"name\":\"reserves\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reserveAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken[]\",\"name\":\"reserves\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken[]\",\"name\":\"reserves\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"name\":\"addReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchor\",\"outputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageRateInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorTokenCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"connectorTokens\",\"outputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"reserveToken\",\"type\":\"address\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IReserveToken\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converterType\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"reserveToken\",\"type\":\"address\"}],\"name\":\"getConnectorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IReserveToken\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isV28OrHigher\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxConversionFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgradeComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNetworkFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recentAverageRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IReserveToken[]\",\"name\":\"reserves\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minReturnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IReserveToken[]\",\"name\":\"reserves\",\"type\":\"address[]\"}],\"name\":\"removeLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"reserveToken\",\"type\":\"address\"}],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokenCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"contract IReserveToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"reserveToken\",\"type\":\"address\"}],\"name\":\"reserveWeight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"restrictOwnerOnly\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"fee\",\"type\":\"uint32\"}],\"name\":\"setConversionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IReserveToken\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"sourceAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncReserveBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract IReserveToken\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"}],\"name\":\"targetAmountAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferAnchorOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newConverter\",\"type\":\"address\"}],\"name\":\"transferReservesOnUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StandardPoolConverter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b1cd6e4153b2a390cf00a6556b0fc1458c4a553300000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd40000000000000000000000000000000000000000000000000000000000007530", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://842dacb7e388376021cadeda051cec41f1b8c334339cbba7a1be95a5308eee91"}