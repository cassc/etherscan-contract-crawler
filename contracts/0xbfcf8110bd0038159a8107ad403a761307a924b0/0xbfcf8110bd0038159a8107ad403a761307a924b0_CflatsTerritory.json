{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dapp-game/CflatsDappRequirements.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"./errors/CflatsDatabaseErrors.sol\\\";\\r\\nimport \\\"./ICflatsDappRequirements.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract CflatsDappRequirements is ICflatsDappRequirements, Context\\r\\n{\\r\\n    bytes32 private constant _DEFAULT_ADMIN_ROLE = 0x00;\\r\\n    ICflatsDatabase private immutable _DATABASE;\\r\\n    constructor(ICflatsDatabase database)\\r\\n    {\\r\\n        _DATABASE = database;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getDatabase() public view returns (ICflatsDatabase)\\r\\n    {\\r\\n        return _DATABASE;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    modifier onlyNotBlacklisted()\\r\\n    {\\r\\n        _requireNotBlacklisted(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin()\\r\\n    {\\r\\n        _requireNotBlacklisted(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator()\\r\\n    {\\r\\n        _requireOperator(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDeveloper()\\r\\n    {\\r\\n        _requireDeveloper(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function _requireAdmin(address user) private view\\r\\n    {\\r\\n        _requireNotBlacklisted(user);\\r\\n        \\r\\n        if(IAccessControl(address(_DATABASE)).hasRole(_DEFAULT_ADMIN_ROLE, user) != true)\\r\\n        {\\r\\n            revert OnlyOperatorCanCallThisFunction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireOperator(address user) private view\\r\\n    {\\r\\n        _requireNotBlacklisted(user);\\r\\n        \\r\\n        if(IAccessControl(address(_DATABASE)).hasRole(_DATABASE.OPERATOR_ROLE(), user) != true)\\r\\n        {\\r\\n            revert OnlyOperatorCanCallThisFunction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireDeveloper(address user) private view\\r\\n    {\\r\\n        _requireNotBlacklisted(user);\\r\\n        \\r\\n        if(IAccessControl(address(_DATABASE)).hasRole(_DATABASE.DEVELOPER_ROLE(), user) != true)\\r\\n        {\\r\\n            revert OnlyOperatorCanCallThisFunction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireNotBlacklisted(address user) private view \\r\\n    {\\r\\n        if(_DATABASE.isBlacklisted(user))\\r\\n        {\\r\\n            revert BlacklistedError();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dapp-game/database/ICflatsDatabase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title The interface for implementing the CflatsDatabase smart contract \\r\\n/// with a full description of each function and their implementation \\r\\n/// is presented to your attention.\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ICflatsDatabase \\r\\n{\\r\\n    /// @dev Emitted when new user is added\\r\\n    ///`user` is the address of account that should be added\\r\\n    event UserInserted(address indexed user);\\r\\n\\r\\n\\r\\n    /// @dev Emitted when user is removed\\r\\n    /// `user` is the address of account that should be removed\\r\\n    event UserRemoved(address indexed user);\\r\\n\\r\\n\\r\\n    /// @dev Emitted when user is added in blacklist\\r\\n    /// `user` is the address of account that should be added in blacklist\\r\\n    event UserBlacklisted(address indexed user);\\r\\n\\r\\n\\r\\n    /// @dev Emitted when user is removed from blacklist\\r\\n    /// `user` is the address of account that should be removed from blacklist\\r\\n    event UserRemovedFromBlacklist(address indexed user);\\r\\n\\r\\n\\r\\n    \\r\\n    /// @dev Table cell of default user data in database\\r\\n    ///\\r\\n    /// `_account` is the address of oae also account address is an id of user\\r\\n    /// `_role` is the current role for user, by default is USER_ROLE\\r\\n    ///\\r\\n    /// There are four types of roles:\\r\\n    /// `DEFAULT_ADMIN_ROLE` - role granted only for admin of database\\r\\n    /// `USER_ROLE` - default role for any user added in database\\r\\n    /// `OPERATOR_ROLE` - role for special mechanisms/bots that should autamatically do\\r\\n    /// special intermediate calls that are not allowed for USER_ROLE\\r\\n    /// `DEVELOPER_ROLE` - the same accessibility role as OPERATOR_ROLE the difference is\\r\\n    /// that this role is intended exclusively for tests on the testnet and \\r\\n    /// should not be used in the mainnet network\\r\\n    struct User\\r\\n    {\\r\\n        address _account;\\r\\n        bytes32 _role;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //************************* startregion: VARIABLES  *************************//\\r\\n\\r\\n    /// @dev OAE wallet for team\\r\\n    ///\\r\\n    /// This wallet is used as a collection of fees, funds, \\r\\n    /// donations, to support the project development team\\r\\n    /// @return address of team wallet\\r\\n    function TEAM_WALLET() external view returns (address);\\r\\n\\r\\n\\r\\n    \\r\\n    /// @dev This role is given to all users who, for whatever reason,\\r\\n    /// violate the rules of the project, scammers, fraudsters\\r\\n    /// @return 0x000000000000000000000000000000000000000000000000000000000000dead\\r\\n    function BLACKLISTED_ROLE() external view returns (bytes32);\\r\\n\\r\\n\\r\\n    /// @dev The role is given to bots to automate some processes or \\r\\n    /// to be used as intermediaries between the user and the contract\\r\\n    /// \\r\\n    /// NOTE: OPERATOR_ROLE can be granted for other contracts as well as for\\r\\n    /// intermediate parties as bots\\r\\n    ///\\r\\n    /// @return 0x0000000000000000000000000000000000000000000000000000000000000001\\r\\n    function OPERATOR_ROLE() external view returns (bytes32);\\r\\n\\r\\n\\r\\n    \\r\\n    /// @dev The role is intended only for tests on the testnet,\\r\\n    /// to check the correct operability of the contract\\r\\n    ///\\r\\n    /// NOTE: should be only used on testnet\\r\\n    ///\\r\\n    /// @return 0x0000000000000000000000000000000000000000000000000000000000000002\\r\\n    function DEVELOPER_ROLE() external view returns (bytes32);\\r\\n\\r\\n\\r\\n    \\r\\n    /// @dev Default role for any user added in database\\r\\n    /// @return 0x0000000000000000000000000000000000000000000000000000000000000003\\r\\n    function USER_ROLE() external view returns (bytes32);\\r\\n\\r\\n    //************************* endregion: VARIABLES  *************************//\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //************************* startregion: CALLABLE FUNCTIONS  *************************//\\r\\n\\r\\n    /// @dev Returns true for account that is added is blacklist  \\r\\n    /// @param user - account address of user saved in db\\r\\n    /// @return false if user not registered in db or not blacklisted\\r\\n    function isBlacklisted(address user) external view returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Returns true if user was added in database and not removed\\r\\n    /// @param user - account address of user saved in db\\r\\n    /// @return false if user is not registered in db\\r\\n    function userExists(address user) external view returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Returns table cell of user by it's account address\\r\\n    /// @param user - account address of user saved in db\\r\\n    /// @return table cell with user data\\r\\n    function getUserByAccountAddress(address user) external view returns (User memory);\\r\\n\\r\\n\\r\\n    /// @dev Returns count of all users that was added in database table\\r\\n    function getUsersCount() external view returns (uint256);\\r\\n    \\r\\n    //************************* startregion: CALLABLE FUNCTIONS  *************************//\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //************************* startregion: SEND FUNCTIONS  *************************//\\r\\n    \\r\\n    /// @dev Adds user by account address\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    /// Also only never added accounts will be added without dubbing\\r\\n    ///\\r\\n    /// @return true if transaction is successfull or user \\r\\n    /// has never been added in database before\\r\\n    function addUser(address user) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Adds many users by account addresses\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    /// Also only never added accounts will be added without dubbing\\r\\n    /// \\r\\n    /// @return true if transaction is successfull\\r\\n    function addUsersBatch(address[] calldata users) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Remove user by account address\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    /// @custom:requires user to be existed in database otherwise it will revert with\\r\\n    /// error UserDoesNotExistsError(address user)\\r\\n    ///\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    /// Only existed users can be removed from database\\r\\n    ///\\r\\n    /// @return true if transaction is successfull or user is unique in database\\r\\n    function removeUser(address user) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Remove many users from database\\r\\n    /// @custom:accessibility DEFAULT_ADMIN_ROLE\\r\\n    /// @custom:requires user to be existed in database otherwise it will revert with\\r\\n    /// error UserDoesNotExistsError(address user)\\r\\n    ///\\r\\n    /// NOTE: it's highly access function callable only via DEFAULT_ADMIN_ROLE\\r\\n    /// Only existed users can be removed from database\\r\\n    ///\\r\\n    /// @return true if transaction is successfull or user is unique in database\\r\\n    function removeUsersBatch(address[] memory users) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Adds the user to the blacklist, thereby blocking and severely \\r\\n    /// restricting the user from calling most functions\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    ///\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    ///\\r\\n    /// @return true if user has never been added in blacklist before\\r\\n    function addUserInBlacklist(address user) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Removes user from the blacklist\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    ///\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    ///\\r\\n    /// @return true if user ever been added in blacklist before\\r\\n    function removeUserFromBlacklist(address user) external returns (bool);\\r\\n\\r\\n    //************************* startregion: SEND FUNCTIONS  *************************//\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dapp-game/errors/CflatsDatabaseErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title Error constants for CflatsDatabase contract\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./Errors.sol\\\";\\r\\n\\r\\nerror BlacklistedError();\\r\\nerror OnlyOperatorCanCallThisFunction();\\r\\nerror UserDoesNotExistsError(address user);\\r\\nerror UsersToDeleteExceedAmountOfDatabaseInsertedUsers();\"\r\n    },\r\n    \"contracts/dapp-game/errors/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title Error constants for Cflats project\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nerror ZeroAddress();\\r\\nerror ThisContractAddress();\\r\\nerror NotErc721();\\r\\nerror InvalidCurrentDate();\"\r\n    },\r\n    \"contracts/dapp-game/ICflatsDappRequirements.sol\": {\r\n      \"content\": \"/**\\r\\n* @author NiceArti (https://github.com/NiceArti) \\r\\n* To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n* @title The interface for implementing the CryptoFlatsNft smart contract \\r\\n* with a full description of each function and their implementation \\r\\n* is presented to your attention.\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./database/ICflatsDatabase.sol\\\";\\r\\n\\r\\ninterface ICflatsDappRequirements\\r\\n{\\r\\n    function getDatabase() external view returns (ICflatsDatabase);\\r\\n}\"\r\n    },\r\n    \"contracts/dapp-game/territory/CflatsTerritory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title The CflatsTerritory contract is used as a key for Cryptoflats NFT. Each gen of territory \\r\\n/// represents the key for staking NFT for this gen\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../database/ICflatsDatabase.sol\\\";\\r\\nimport \\\"../CflatsDappRequirements.sol\\\";\\r\\nimport \\\"../../harvest/Harvest.sol\\\";\\r\\nimport \\\"./ICflatsTerritory.sol\\\";\\r\\n\\r\\n\\r\\ncontract CflatsTerritory is ICflatsTerritory, CflatsDappRequirements, Harvest\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n\\r\\n    address private immutable _UTILITY_TOKEN;\\r\\n\\r\\n\\r\\n    mapping(address owner => \\r\\n        mapping(uint256 gen => uint256 amount)\\r\\n    ) private _balanceOf;\\r\\n\\r\\n    constructor(address utilityToken, ICflatsDatabase database) CflatsDappRequirements(database) \\r\\n    {\\r\\n        _UTILITY_TOKEN = utilityToken;\\r\\n    }\\r\\n\\r\\n\\r\\n    function buy(\\r\\n        uint256 gen,\\r\\n        uint256 amount\\r\\n    ) external onlyNotBlacklisted returns (bool)\\r\\n    {\\r\\n        uint256 territoryPrice = _getPriceForGen(gen);\\r\\n        require(amount >= territoryPrice, \\\"CflatsTerritory: Insufficient funds for buying territory!\\\");\\r\\n        \\r\\n        IERC20(_UTILITY_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        _transfer(address(0), msg.sender, gen);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner, uint256 gen) external view returns (uint256)\\r\\n    {\\r\\n        return _balanceOf[owner][gen];\\r\\n    }\\r\\n\\r\\n    function hasTerritoryForGen(\\r\\n        address owner,\\r\\n        uint256 gen\\r\\n    ) external view returns (bool)\\r\\n    {\\r\\n        return _balanceOf[owner][gen] != 0;\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 gen\\r\\n    ) external onlyNotBlacklisted returns (bool)\\r\\n    {\\r\\n        _transfer(msg.sender, recipient, gen);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function utilityToken() external view returns (address)\\r\\n    {\\r\\n        return _UTILITY_TOKEN;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getPriceForGen(uint256 gen) external view returns (uint256)\\r\\n    {\\r\\n        return _getPriceForGen(gen);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transfer(address from, address to, uint256 gen) private\\r\\n    {\\r\\n        if(from != address(0))\\r\\n        {\\r\\n            require(_balanceOf[from][gen] > 1, \\\"CflatsTerritory: cannot transfer if balace less than two!\\\");\\r\\n\\r\\n            unchecked\\r\\n            {\\r\\n                --_balanceOf[from][gen];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked \\r\\n        {\\r\\n            ++_balanceOf[to][gen];\\r\\n        }\\r\\n        emit TerritoryTransfer(from, to, gen);\\r\\n    }\\r\\n\\r\\n    function _getPriceForGen(uint256 gen) private view returns (uint256)\\r\\n    {\\r\\n        uint256 price = 100_000;\\r\\n        if(gen == 3) \\r\\n        {\\r\\n            price = 150_000;\\r\\n        }\\r\\n        else if(gen == 4)\\r\\n        {\\r\\n            price = 200_000;\\r\\n        }\\r\\n        else if(gen == 5)\\r\\n        {\\r\\n            price = 250_000;\\r\\n        }\\r\\n\\r\\n        return price * 10**IERC20Metadata(_UTILITY_TOKEN).decimals();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/dapp-game/territory/ICflatsTerritory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title The interface for implementing the CflatsTerritory smart contract \\r\\n/// with a full description of each function and their implementation \\r\\n/// is presented to your attention.\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ICflatsTerritory \\r\\n{\\r\\n    /// @dev Emitted when user buys territory\\r\\n    /// `from` is the address that transfers terrotory to recepient\\r\\n    /// `to` is the address of account that bought territory\\r\\n    /// `gen` is the gen number of territory that relates to Cflats NFT\\r\\n    event TerritoryTransfer(address indexed from, address indexed to, uint256 gen);\\r\\n\\r\\n\\r\\n    /// @dev Shows address of utility token\\r\\n    function utilityToken() external view returns(address);\\r\\n\\r\\n\\r\\n    /// @dev Shows the amount of territories that users owns\\r\\n    function balanceOf(address owner, uint256 gen) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /// @dev Shows if `owner` has territory for staking NFT gen\\r\\n    /// @param owner is an account address of user\\r\\n    /// @param gen is a number of gen that is allowed to stake token\\r\\n    /// @return true if `owner` has territory for special `gen`\\r\\n    function hasTerritoryForGen(\\r\\n        address owner,\\r\\n        uint256 gen\\r\\n    ) external view returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Shows the price for buying territory for special `gen`\\r\\n    /// @param gen is a number of gen that is allowed to stake token\\r\\n    /// @return true if `owner` has territory for special `gen`\\r\\n    function getPriceForGen(uint256 gen) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /// @dev Allows user to buy territory using $CFLAT tokens  \\r\\n    /// @param gen is a number of NFT gen\\r\\n    /// @param amount of $CFLAT for buing territory\\r\\n    /// \\r\\n    /// @custom:requires amount to be greather than or equal to price of territory\\r\\n    ///\\r\\n    /// @return true if `owner` has territory for special `gen`\\r\\n    function buy(uint256 gen, uint256 amount) external returns (bool);\\r\\n    \\r\\n    \\r\\n    /// @dev Allows user to transfer territory to anyone  \\r\\n    /// @param recipient the address who will receive territory\\r\\n    /// @param gen is a number of NFT gen\\r\\n    /// \\r\\n    /// @custom:requires `owner` balance to be at least two\\r\\n    ///\\r\\n    /// @return true if `owner` has territory for special `gen`\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 gen\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/harvest/Harvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IHarvest.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Harvest is IHarvest\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // TEAM_WALLET\\r\\n    address private constant _HARVEST_ADDRESS = 0x1d6B3E373B947319a4B76A851bb17C1dEcCADb1D;\\r\\n\\r\\n\\r\\n    receive() external payable \\r\\n    {\\r\\n        emit Thanks(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// the function of collecting tokens that got accidentally\\r\\n    /// or specifically into a smart contract and were not recorded\\r\\n    /// in storage\\r\\n    /// NOTE: this function does not take user's funds from the contract,\\r\\n    /// but will withdraw those funds that are considered to be\\r\\n    /// donation and receiving funds!\\r\\n    function collect(address token) public virtual returns (bool)\\r\\n    {\\r\\n        uint256 harvestAmount = _getHarvest(token);\\r\\n\\r\\n        if(harvestAmount == 0)\\r\\n        {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        if(token == address(0))\\r\\n        {\\r\\n            (bool sent, ) = payable(_HARVEST_ADDRESS).call{value: harvestAmount}(\\\"\\\");\\r\\n            require(sent, \\\"Failed to send Ether!\\\");\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            IERC20(token).safeTransfer(_HARVEST_ADDRESS, harvestAmount);\\r\\n        }\\r\\n\\r\\n        emit HarvestCollected();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// The main idea is to collect all funds that were sent in contract\\r\\n    /// accidently or as donation, not to stole a whole contract balance\\r\\n    /// NOTE: any funds received for a smart contract and not recorded\\r\\n    /// in the storage are regarded as a donation that the team can take\\r\\n    function _getHarvest(address token) internal view returns (uint256)\\r\\n    {\\r\\n        if(token == address(0))\\r\\n        {\\r\\n            return address(this).balance;\\r\\n        }\\r\\n\\r\\n        return IERC20Metadata(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    function _extractDonationPercentage(uint256 fullAmount, uint16 percentage) internal pure returns (uint256)\\r\\n    {\\r\\n        // accuracy up to two characters\\r\\n        // 10000 = 100.00\\r\\n        return fullAmount * percentage / 10000;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/harvest/IHarvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IHarvest\\r\\n{\\r\\n    event Thanks(address indexed donator, uint256 donation);\\r\\n    event HarvestCollected();\\r\\n\\r\\n    /// the function of collecting tokens that got accidentally\\r\\n    /// or specifically into a smart contract and were not recorded\\r\\n    /// in storage\\r\\n    /// NOTE: this function does not take user's funds from the contract,\\r\\n    /// but will withdraw those funds that are considered to be\\r\\n    /// donation funds!\\r\\n    function collect(address token) external returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"utilityToken\",\"type\":\"address\"},{\"internalType\":\"contract ICflatsDatabase\",\"name\":\"database\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BlacklistedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HarvestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"}],\"name\":\"TerritoryTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"Thanks\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDatabase\",\"outputs\":[{\"internalType\":\"contract ICflatsDatabase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"}],\"name\":\"getPriceForGen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"}],\"name\":\"hasTerritoryForGen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilityToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CflatsTerritory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1200", "ConstructorArguments": "00000000000000000000000042b5a36f9a6bb2686824df4f5106ff3aa5d52ac80000000000000000000000001632d6e5d3b9203250678a0e2e397b06745b9686", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}