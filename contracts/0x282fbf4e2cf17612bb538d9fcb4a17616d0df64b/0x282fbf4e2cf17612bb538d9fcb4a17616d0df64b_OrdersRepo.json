{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                set._values[toDeleteIndex] = lastValue;\\n                set._indexes[lastValue] = valueIndex;\\n            }\\n\\n            delete set._values[lastIndex];\\n            set._values.pop();\\n\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    //======== Bytes32Set ========\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(Bytes32Set storage set)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    //======== AddressSet ========\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function values(AddressSet storage set)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    //======== UintSet ========\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) public returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function values(UintSet storage set)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/GoldChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nlibrary GoldChain {\\n\\n    struct Node {\\n        uint32 prev;\\n        uint32 next;\\n        uint32 seqOfShare;\\n        uint64 paid;\\n        uint32 price;\\n        uint48 expireDate;\\n        uint16 votingWeight;\\n    }\\n\\n    struct NodeWrap {\\n        uint32 seq;\\n        Node node;\\n    }\\n\\n    /* nodes[0] {\\n        prev: tail;\\n        next: head;\\n        seqOfShare: counter;\\n        price: length;\\n    } */\\n\\n    struct Chain {\\n        mapping (uint => Node) nodes;\\n    }\\n\\n    //#################\\n    //##  Modifier   ##\\n    //#################\\n\\n    modifier nodeExist(\\n        Chain storage chain,\\n        uint seq\\n    ) {\\n        require(isNode(chain, seq),\\n            \\\"GC.nodeExist: not\\\");\\n        _;\\n    }\\n\\n    //#################\\n    //##  Write I/O  ##\\n    //#################\\n\\n    function parseSn(\\n        bytes32 sn\\n    ) public pure returns(Node memory node) {\\n\\n        uint _sn = uint(sn);\\n\\n        node.prev = uint32(_sn >> 224);\\n        node.next = uint32(_sn >> 192);\\n        node.seqOfShare = uint32(_sn >> 160);\\n        node.paid = uint64(_sn >> 96);\\n        node.price = uint32(_sn >> 64);\\n        node.expireDate = uint48(_sn >> 16);\\n        node.votingWeight = uint16(_sn);\\n    }\\n\\n    function codifyNode(\\n        Node memory node\\n    ) public pure returns(bytes32 sn) {\\n\\n        bytes memory _sn = \\n            abi.encodePacked(\\n                node.prev,\\n                node.next,\\n                node.seqOfShare,\\n                node.paid,\\n                node.price,\\n                node.expireDate,\\n                node.votingWeight\\n            );\\n\\n        assembly {\\n            sn := mload(add(_sn, 0x20))\\n        }                \\n    }\\n\\n    function createNode(\\n        Chain storage chain,\\n        uint seqOfShare,\\n        uint votingWeight,\\n        uint paid,\\n        uint price,\\n        uint execHours,\\n        bool sortFromHead\\n    ) public returns (bytes32 sn) {\\n\\n        require (uint64(paid) > 0, 'GC.createOffer: zero paid');\\n\\n        uint32 seq = _increaseCounter(chain);\\n\\n        Node memory node = Node({\\n            prev: 0,\\n            next: 0,\\n            seqOfShare: uint32(seqOfShare),\\n            paid: uint64(paid),\\n            price: uint32(price),\\n            expireDate: uint48(block.timestamp) + uint48(execHours) * 3600,\\n            votingWeight: uint16(votingWeight)\\n        });\\n\\n        _increaseLength(chain);\\n\\n        chain.nodes[seq] = node;\\n\\n        _upChain(chain, seq, sortFromHead);\\n\\n        sn = codifyNode(node);\\n    }\\n\\n    function _upChain(\\n        Chain storage chain,\\n        uint32 seq,\\n        bool sortFromHead\\n    ) private {\\n\\n        Node storage n = chain.nodes[seq];\\n\\n        (uint prev, uint next) = \\n            _getPos(\\n                chain, \\n                n.price, \\n                sortFromHead ? 0 : tail(chain), \\n                sortFromHead ? head(chain) : 0, \\n                sortFromHead\\n            );\\n\\n        n.prev = uint32(prev);\\n        n.next = uint32(next);\\n\\n        chain.nodes[prev].next = seq;\\n        chain.nodes[next].prev = seq;\\n    }\\n\\n    function _getPos(\\n        Chain storage chain,\\n        uint price,\\n        uint prev,\\n        uint next,\\n        bool sortFromHead\\n    ) public view returns(uint, uint) {\\n        if (sortFromHead) {\\n            while(next > 0 && chain.nodes[next].price <= price) {\\n                prev = next;\\n                next = chain.nodes[next].next;\\n            }\\n        } else {\\n            while(prev > 0 && chain.nodes[prev].price > price) {\\n                next = prev;\\n                prev = chain.nodes[prev].prev;\\n            }\\n        }\\n        return (prev, next);\\n    }\\n    \\n    function offChain(\\n        Chain storage chain,\\n        uint seq\\n    ) public nodeExist(chain, seq) returns(Node memory node) {\\n\\n        node = chain.nodes[seq];\\n\\n        chain.nodes[node.prev].next = node.next;\\n        chain.nodes[node.next].prev = node.prev;\\n\\n        delete chain.nodes[seq];\\n        _decreaseLength(chain);\\n    }\\n\\n    function _increaseCounter(\\n        Chain storage chain\\n    ) private returns (uint32) {\\n\\n        Node storage n = chain.nodes[0];\\n\\n        do {\\n            unchecked {\\n                n.seqOfShare++;        \\n            }\\n        } while(isNode(chain, n.seqOfShare) ||\\n            n.seqOfShare == 0);\\n\\n        return n.seqOfShare;\\n    }\\n\\n    function _increaseLength(\\n        Chain storage chain\\n    ) private {\\n        chain.nodes[0].price++;\\n    }\\n\\n    function _decreaseLength(\\n        Chain storage chain\\n    ) private {\\n        chain.nodes[0].price--;\\n    }\\n\\n    //#################\\n    //##  Read I/O  ##\\n    //#################\\n\\n    // ==== Node[0] ====\\n\\n    function counter(\\n        Chain storage chain\\n    ) public view returns (uint32) {\\n        return chain.nodes[0].seqOfShare;\\n    }\\n\\n    function length(\\n        Chain storage chain\\n    ) public view returns (uint32) {\\n        return chain.nodes[0].price;\\n    }\\n\\n    function head(\\n        Chain storage chain\\n    ) public view returns (uint32) {\\n        return chain.nodes[0].next;\\n    }\\n\\n    function tail(\\n        Chain storage chain\\n    ) public view returns (uint32) {\\n        return chain.nodes[0].prev;\\n    }\\n\\n    // ==== Node ====\\n    \\n    function isNode(\\n        Chain storage chain,\\n        uint seq\\n    ) public view returns(bool) {\\n        return chain.nodes[seq].expireDate > 0;\\n    } \\n\\n    function getNode(\\n        Chain storage chain,\\n        uint seq\\n    ) public view nodeExist(chain, seq) returns(\\n        Node memory \\n    ) {\\n        return chain.nodes[seq];\\n    }\\n\\n    // ==== Chain ====\\n\\n    function getSeqList(\\n        Chain storage chain\\n    ) public view returns (uint[] memory) {\\n        uint len = length(chain);\\n        uint[] memory list = new uint[](len);\\n\\n        Node memory node = chain.nodes[0];\\n\\n        while (len > 0) {\\n            list[len-1] = node.prev;\\n            node = chain.nodes[node.prev];\\n            len--;\\n        }\\n\\n        return list;\\n    }\\n\\n    function getChain(\\n        Chain storage chain\\n    ) public view returns (NodeWrap[] memory) {\\n        uint len = length(chain);\\n        NodeWrap[] memory list = new NodeWrap[](len);\\n\\n        Node memory node = chain.nodes[0];\\n\\n        while (len > 0) {\\n            list[len-1].seq = node.prev;\\n            node = chain.nodes[node.prev];\\n            list[len-1].node = node;\\n            len--;\\n        }\\n\\n        return list;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/OrdersRepo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./GoldChain.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n\\nlibrary OrdersRepo {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using GoldChain for GoldChain.Chain;\\n    using GoldChain for GoldChain.Node;\\n\\n    enum StateOfInvestor {\\n        Pending,\\n        Approved,\\n        Revoked\\n    }\\n\\n    struct Investor {\\n        uint40 userNo;\\n        uint40 groupRep;\\n        uint48 regDate;\\n        uint40 verifier;\\n        uint48 approveDate;\\n        uint32 data;\\n        uint8 state;\\n        bytes32 idHash;\\n    }\\n\\n    struct Deal {\\n        uint16 classOfShare;\\n        uint32 seqOfShare;\\n        uint40 buyer;\\n        uint40 groupRep;\\n        uint64 paid;\\n        uint32 price;\\n        uint16 votingWeight;\\n    }\\n\\n    struct Repo {\\n        // class => Chain\\n        mapping(uint256 => GoldChain.Chain) ordersOfClass;\\n        EnumerableSet.UintSet classesList;\\n        mapping(uint256 => Investor) investors;\\n        uint[] investorsList;\\n        // ---- tempArry ----\\n        GoldChain.Node[] expired;\\n        Deal[] deals;\\n    }\\n\\n    //################\\n    //##  Modifier  ##\\n    //################\\n\\n    modifier investorExist(\\n        Repo storage repo,\\n        uint acct\\n    ) {\\n        require(isInvestor(repo, acct),\\n            \\\"OR.investorExist: not\\\");\\n        _;\\n    }\\n\\n    modifier classExist(\\n        Repo storage repo,\\n        uint classOfShare\\n    ) {\\n        require (isClass(repo, classOfShare),\\n            \\\"OR.classExist: not\\\");\\n        _;\\n    }\\n\\n    //#################\\n    //##  Write I/O  ##\\n    //#################\\n\\n    // ==== Codify & Parse ====\\n\\n    function parseSn(bytes32 sn) public pure returns(\\n        Deal memory deal\\n    ) {\\n        uint _sn = uint(sn);\\n\\n        deal.classOfShare = uint16(_sn >> 240);\\n        deal.seqOfShare = uint32(_sn >> 208);\\n        deal.buyer = uint40(_sn >> 168);\\n        deal.groupRep = uint40(_sn >> 128);\\n        deal.paid = uint64(_sn >> 64);\\n        deal.price = uint32(_sn >> 32);\\n        deal.votingWeight = uint16(_sn >> 16);\\n    }\\n\\n    function codifyDeal(\\n        Deal memory deal\\n    ) public pure returns(bytes32 sn) {\\n        bytes memory _sn = \\n            abi.encodePacked(\\n                deal.classOfShare,\\n                deal.seqOfShare,\\n                deal.buyer,\\n                deal.groupRep,\\n                deal.paid,\\n                deal.price,\\n                deal.votingWeight\\n            );\\n\\n        assembly {\\n            sn := mload(add(_sn, 0x20))\\n        }                        \\n    }\\n\\n    // ==== Investor ====\\n\\n    function regInvestor(\\n        Repo storage repo,\\n        uint userNo,\\n        uint groupRep,\\n        bytes32 idHash\\n    ) public {\\n        require(idHash != bytes32(0), \\n            \\\"OR.regInvestor: zero idHash\\\");\\n        \\n        uint40 user = uint40(userNo);\\n\\n        require(user > 0,\\n            \\\"OR.regInvestor: zero userNo\\\");\\n\\n        Investor storage investor = repo.investors[user];\\n        \\n        investor.userNo = user;\\n        investor.groupRep = uint40(groupRep);\\n        investor.idHash = idHash;\\n\\n        if (!isInvestor(repo, userNo)) {\\n            repo.investorsList.push(user);\\n            investor.regDate = uint48(block.timestamp);\\n        } else {\\n            if (investor.state == uint8(StateOfInvestor.Approved))\\n                _decreaseQtyOfInvestors(repo);\\n            investor.state = uint8(StateOfInvestor.Pending);\\n        }\\n    }\\n\\n    function approveInvestor(\\n        Repo storage repo,\\n        uint acct,\\n        uint verifier\\n    ) public investorExist(repo, acct) {\\n\\n        Investor storage investor = repo.investors[acct];\\n\\n        require(investor.state != uint8(StateOfInvestor.Approved),\\n            \\\"OR,apprInv: wrong state\\\");\\n\\n        investor.verifier = uint40(verifier);\\n        investor.approveDate = uint48(block.timestamp);\\n        investor.state = uint8(StateOfInvestor.Approved);\\n\\n        _increaseQtyOfInvestors(repo);\\n    }\\n\\n    function revokeInvestor(\\n        Repo storage repo,\\n        uint acct,\\n        uint verifier\\n    ) public {\\n\\n        Investor storage investor = repo.investors[acct];\\n\\n        require(investor.state == uint8(StateOfInvestor.Approved),\\n            \\\"OR,revokeInvestor: wrong state\\\");\\n\\n        investor.verifier = uint40(verifier);\\n        investor.approveDate = uint48(block.timestamp);\\n        investor.state = uint8(StateOfInvestor.Revoked);\\n\\n        _decreaseQtyOfInvestors(repo);\\n    }\\n\\n    \\n\\n    // ==== Order ====\\n\\n    function placeSellOrder(\\n        Repo storage repo,\\n        uint classOfShare,\\n        uint seqOfShare,\\n        uint votingWeight,\\n        uint paid,\\n        uint price,\\n        uint execHours,\\n        bool sortFromHead\\n    ) public returns (bytes32 sn) {\\n\\n        repo.classesList.add(classOfShare);\\n\\n        GoldChain.Chain storage chain = \\n            repo.ordersOfClass[classOfShare];\\n\\n        sn = chain.createNode(\\n            seqOfShare,\\n            votingWeight,\\n            paid,\\n            price,\\n            execHours,\\n            sortFromHead\\n        );\\n    }\\n\\n    function withdrawSellOrder(\\n        Repo storage repo,\\n        uint classOfShare,\\n        uint seqOfOrder\\n    ) public classExist(repo, classOfShare) \\n        returns (GoldChain.Node memory) \\n    {\\n        return repo.ordersOfClass[classOfShare].offChain(seqOfOrder);\\n    }\\n\\n    function placeBuyOrder(\\n        Repo storage repo,\\n        uint acct,\\n        uint classOfShare,\\n        uint paid,\\n        uint price\\n    ) public classExist(repo, classOfShare) returns (\\n        Deal[] memory deals,\\n        Deal memory call,\\n        GoldChain.Node[] memory expired\\n    ) {\\n\\n        Investor memory investor = \\n            getInvestor(repo, acct);\\n\\n        require (investor.state == uint8(StateOfInvestor.Approved),\\n            \\\"OR.placeBuyOrder: wrong stateOfInvestor\\\");\\n\\n        call.classOfShare = uint16(classOfShare);\\n        call.paid = uint64(paid);\\n        call.price = uint32(price);\\n        call.buyer = investor.userNo;\\n        call.groupRep = investor.groupRep;         \\n\\n        _checkOffers(repo, call);\\n        \\n        deals = repo.deals;\\n        delete repo.deals;\\n\\n        expired = repo.expired;\\n        delete repo.expired;\\n    }\\n\\n    function _checkOffers(\\n        Repo storage repo,\\n        Deal memory call\\n    ) private {\\n\\n        GoldChain.Chain storage chain = \\n            repo.ordersOfClass[call.classOfShare];\\n\\n        uint32 seqOfOffer = chain.head();\\n\\n        while(seqOfOffer > 0 && call.paid > 0) {\\n\\n            GoldChain.Node memory offer = chain.nodes[seqOfOffer];\\n\\n            if (offer.expireDate <= block.timestamp) {\\n\\n                repo.expired.push(\\n                    chain.offChain(seqOfOffer)\\n                );\\n                seqOfOffer = offer.next;\\n                \\n                continue;\\n            }\\n            \\n            if (offer.price <= call.price) {\\n\\n                bool paidAsPut = offer.paid <= call.paid;\\n\\n                Deal memory deal = Deal({\\n                    classOfShare: call.classOfShare,\\n                    seqOfShare: offer.seqOfShare,\\n                    buyer: call.buyer,\\n                    groupRep: call.groupRep,\\n                    paid: paidAsPut ? offer.paid : call.paid,\\n                    price: offer.price,\\n                    votingWeight: offer.votingWeight\\n                });\\n\\n                repo.deals.push(deal);\\n\\n                if (paidAsPut) {\\n                    chain.offChain(seqOfOffer);\\n                    seqOfOffer = offer.next;\\n                } else {\\n                    chain.nodes[seqOfOffer].paid -= deal.paid;\\n                }\\n\\n                call.paid -= deal.paid;\\n            } else break;\\n        }\\n    }\\n\\n    function _increaseQtyOfInvestors(\\n        Repo storage repo\\n    ) private {\\n        repo.investors[0].verifier++;\\n    }\\n\\n    function _decreaseQtyOfInvestors(\\n        Repo storage repo\\n    ) private {\\n        repo.investors[0].verifier--;\\n    }\\n\\n\\n    //################\\n    //##  Read I/O  ##\\n    //################\\n\\n    // ==== Investor ====\\n\\n    function isInvestor(\\n        Repo storage repo,\\n        uint acct\\n    ) public view returns(bool) {\\n        return repo.investors[acct].regDate > 0;\\n    }\\n\\n    function getInvestor(\\n        Repo storage repo,\\n        uint acct\\n    ) public view investorExist(repo, acct) returns(Investor memory) {\\n        return repo.investors[acct];\\n    }\\n\\n    function getQtyOfInvestors(\\n        Repo storage repo\\n    ) public view returns(uint) {\\n        return repo.investors[0].verifier;\\n    }\\n\\n    function investorList(\\n        Repo storage repo\\n    ) public view returns(uint[] memory) {\\n        return repo.investorsList;\\n    }\\n\\n    function investorInfoList(\\n        Repo storage repo\\n    ) public view returns(Investor[] memory list) {\\n        uint[] memory seqList = repo.investorsList;\\n        uint len = seqList.length;\\n\\n        list = new Investor[](len);\\n\\n        while (len > 0) {\\n            list[len - 1] = repo.investors[seqList[len - 1]];\\n            len--;\\n        }\\n\\n        return list;\\n    }\\n\\n    // ==== Class ====\\n\\n    function isClass(\\n        Repo storage repo,\\n        uint classOfShare\\n    ) public view returns (bool) {\\n        return repo.classesList.contains(classOfShare);\\n    }\\n\\n    function getClassesList(\\n        Repo storage repo    \\n    ) public view returns (uint[] memory) {\\n        return repo.classesList.values();\\n    }\\n\\n    // ==== TempArrays ====\\n\\n    function getExpired(\\n        Repo storage repo\\n    ) public view returns (GoldChain.Node[] memory) {\\n        return repo.expired;\\n    }\\n\\n    function getDeals(\\n        Repo storage repo\\n    ) public view returns(Deal[] memory) {\\n        return repo.deals;\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/EnumerableSet.sol\": {\r\n        \"EnumerableSet\": \"0xc4f24b69792ff96f0316fab2d7df198af8033930\"\r\n      },\r\n      \"contracts/lib/GoldChain.sol\": {\r\n        \"GoldChain\": \"0xd4b495c7c9132e49056850ba049999cb516846cb\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"classOfShare\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"seqOfShare\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"buyer\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"groupRep\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"paid\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"price\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"votingWeight\",\"type\":\"uint16\"}],\"internalType\":\"struct OrdersRepo.Deal\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"codifyDeal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"name\":\"parseSn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"classOfShare\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"seqOfShare\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"buyer\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"groupRep\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"paid\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"price\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"votingWeight\",\"type\":\"uint16\"}],\"internalType\":\"struct OrdersRepo.Deal\",\"name\":\"deal\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "OrdersRepo", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}