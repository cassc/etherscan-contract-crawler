{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/common/fees/FeeCustomization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable no-inline-assembly\\n\\nabstract contract FeeCustomization {\\n  /// @notice Emitted when a fee customization is set.\\n  /// @param _feeType The type of fee to set.\\n  /// @param _user The address of user to set.\\n  /// @param _rate The fee rate for the user.\\n  event CustomizeFee(bytes32 _feeType, address _user, uint256 _rate);\\n\\n  /// @notice Emitted when a fee customization is cancled.\\n  /// @param _feeType The type of fee to cancle.\\n  /// @param _user The address of user to cancle.\\n  event CancleCustomizeFee(bytes32 _feeType, address _user);\\n\\n  /// @dev The fee denominator used for rate calculation.\\n  uint256 internal constant FEE_PRECISION = 1e9;\\n\\n  /// @dev The salt used to compute storage slot.\\n  bytes32 private constant SALT = keccak256(\\\"FeeCustomization\\\");\\n\\n  /// @notice Return the fee rate for the user\\n  /// @param _feeType The type of fee to query.\\n  /// @param _user The address of user to query.\\n  /// @return rate The rate of fee for the user, multiplied by 1e9\\n  function getFeeRate(bytes32 _feeType, address _user) public view returns (uint256 rate) {\\n    rate = _defaultFeeRate(_feeType);\\n\\n    (uint8 _customized, uint32 _rate) = _loadFeeCustomization(_feeType, _user);\\n    if (_customized == 1) {\\n      rate = _rate;\\n    }\\n  }\\n\\n  /// @dev Internal function to set customized fee for user.\\n  /// @param _feeType The type of fee to update.\\n  /// @param _user The address of user to update.\\n  /// @param _rate The fee rate to update.\\n  function _setFeeCustomization(\\n    bytes32 _feeType,\\n    address _user,\\n    uint32 _rate\\n  ) internal {\\n    require(_rate <= FEE_PRECISION, \\\"rate too large\\\");\\n\\n    uint256 _slot = _computeStorageSlot(_feeType, _user);\\n    uint256 _encoded = _encode(1, _rate);\\n    assembly {\\n      sstore(_slot, _encoded)\\n    }\\n\\n    emit CustomizeFee(_feeType, _user, _rate);\\n  }\\n\\n  /// @dev Internal function to cancel fee customization.\\n  /// @param _feeType The type of fee to update.\\n  /// @param _user The address of user to update.\\n  function _cancleFeeCustomization(bytes32 _feeType, address _user) internal {\\n    uint256 _slot = _computeStorageSlot(_feeType, _user);\\n    assembly {\\n      sstore(_slot, 0)\\n    }\\n\\n    emit CancleCustomizeFee(_feeType, _user);\\n  }\\n\\n  /// @dev Return the default fee rate for certain type.\\n  /// @param _feeType The type of fee to query.\\n  /// @return rate The default rate of fee, multiplied by 1e9\\n  function _defaultFeeRate(bytes32 _feeType) internal view virtual returns (uint256 rate);\\n\\n  /// @dev Internal function to load fee customization from storage.\\n  /// @param _feeType The type of fee to query.\\n  /// @param _user The address of user to query.\\n  /// @return customized Whether there is a customization.\\n  /// @return rate The customized fee rate, multiplied by 1e9.\\n  function _loadFeeCustomization(bytes32 _feeType, address _user) private view returns (uint8 customized, uint32 rate) {\\n    uint256 _slot = _computeStorageSlot(_feeType, _user);\\n    uint256 _encoded;\\n    assembly {\\n      _encoded := sload(_slot)\\n    }\\n    (customized, rate) = _decode(_encoded);\\n  }\\n\\n  /// @dev Internal function to compute storage slot for fee storage.\\n  /// @param _feeType The type of fee.\\n  /// @param _user The address of user.\\n  /// @return slot The destination storage slot.\\n  function _computeStorageSlot(bytes32 _feeType, address _user) private pure returns (uint256 slot) {\\n    bytes32 salt = SALT;\\n    assembly {\\n      mstore(0x00, _feeType)\\n      mstore(0x20, xor(_user, salt))\\n      slot := keccak256(0x00, 0x40)\\n    }\\n  }\\n\\n  /// @dev Internal function to encode customized fee data. The encoding is\\n  /// low ---------------------> high\\n  /// |   8 bits   | 32 bits | 216 bits |\\n  /// | customized |   rate  | reserved |\\n  ///\\n  /// @param customized If it is 0, there is no customization; if it is 1, there is customization.\\n  /// @param rate The customized fee rate, multiplied by 1e9.\\n  function _encode(uint8 customized, uint32 rate) private pure returns (uint256 encoded) {\\n    encoded = (uint256(rate) << 8) | uint256(customized);\\n  }\\n\\n  /// @dev Internal function to decode data.\\n  /// @param _encoded The data to decode.\\n  /// @return customized Whether there is a customization.\\n  /// @return rate The customized fee rate, multiplied by 1e9.\\n  function _decode(uint256 _encoded) private pure returns (uint8 customized, uint32 rate) {\\n    customized = uint8(_encoded & 0xff);\\n    rate = uint32((_encoded >> 8) & 0xffffffff);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/AladdinCompounder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/concentrator/IAladdinCompounder.sol\\\";\\n\\nimport \\\"../common/fees/FeeCustomization.sol\\\";\\nimport \\\"./ConcentratorBase.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n// solhint-disable reason-string\\n// solhint-disable not-rely-on-time\\n\\nabstract contract AladdinCompounder is\\n  OwnableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  ERC20Upgradeable,\\n  FeeCustomization,\\n  ConcentratorBase,\\n  IAladdinCompounder\\n{\\n  using SafeMathUpgradeable for uint256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /// @notice Emitted when the fee information is updated.\\n  /// @param _platform The platform address to be updated.\\n  /// @param _platformPercentage The platform fee percentage to be updated.\\n  /// @param _bountyPercentage The harvest bounty percentage to be updated.\\n  /// @param _repayPercentage The repay fee percentage to be updated.\\n  event UpdateFeeInfo(\\n    address indexed _platform,\\n    uint32 _platformPercentage,\\n    uint32 _bountyPercentage,\\n    uint32 _repayPercentage\\n  );\\n\\n  /// @notice Emitted when the reward period is updated.\\n  event UpdateRewardPeriodLength(uint256 _length);\\n\\n  /// @dev The type for withdraw fee, used in FeeCustomization.\\n  bytes32 internal constant WITHDRAW_FEE_TYPE = keccak256(\\\"AladdinCompounder.WithdrawFee\\\");\\n\\n  /// @dev The maximum percentage of withdraw fee.\\n  uint256 internal constant MAX_WITHDRAW_FEE = 1e8; // 10%\\n\\n  /// @dev The maximum percentage of platform fee.\\n  uint256 internal constant MAX_PLATFORM_FEE = 2e8; // 20%\\n\\n  /// @dev The maximum percentage of harvest bounty.\\n  uint256 internal constant MAX_HARVEST_BOUNTY = 1e8; // 10%\\n\\n  /// @dev Compiler will pack this into single `uint256`.\\n  struct FeeInfo {\\n    // The address of recipient of platform fee\\n    address platform;\\n    // The percentage of rewards to take for platform on harvest, multipled by 1e9.\\n    uint32 platformPercentage;\\n    // The percentage of rewards to take for caller on harvest, multipled by 1e9.\\n    uint32 bountyPercentage;\\n    // The percentage of withdraw fee, multipled by 1e9.\\n    uint32 withdrawPercentage;\\n  }\\n\\n  /// @dev Compiler will pack this into single `uint256`.\\n  struct RewardInfo {\\n    // The current reward rate per second.\\n    uint128 rate;\\n    // The length of reward period in seconds.\\n    // If the value is zero, the reward will be distributed immediately.\\n    uint32 periodLength;\\n    uint48 lastUpdate;\\n    uint48 finishAt;\\n  }\\n\\n  /// @notice The fee information, including platform fee, bounty fee and repay fee.\\n  FeeInfo public feeInfo;\\n\\n  /// @notice The reward information, including reward rate,\\n  RewardInfo public rewardInfo;\\n\\n  /// @dev The amount of underlying asset recorded.\\n  uint256 internal totalAssetsStored;\\n\\n  function _initialize(string memory _name, string memory _symbol) internal {\\n    OwnableUpgradeable.__Ownable_init();\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n    ERC20Upgradeable.__ERC20_init(_name, _symbol);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function asset() public view virtual override returns (address);\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function totalAssets() public view virtual override returns (uint256) {\\n    RewardInfo memory _info = rewardInfo;\\n    uint256 _period;\\n    if (block.timestamp > _info.finishAt) {\\n      // finishAt >= lastUpdate will happen, if `_notifyHarvestedReward` is not called during current period.\\n      _period = _info.finishAt >= _info.lastUpdate ? _info.finishAt - _info.lastUpdate : 0;\\n    } else {\\n      _period = block.timestamp - _info.lastUpdate; // never overflow\\n    }\\n    return totalAssetsStored + _period * _info.rate;\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function convertToShares(uint256 _assets) public view override returns (uint256) {\\n    uint256 _totalAssets = totalAssets();\\n    if (_totalAssets == 0) return _assets;\\n\\n    uint256 _totalShares = totalSupply();\\n    return _totalShares.mul(_assets) / _totalAssets;\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function convertToAssets(uint256 _shares) public view override returns (uint256) {\\n    uint256 _totalShares = totalSupply();\\n    if (_totalShares == 0) return _shares;\\n\\n    uint256 _totalAssets = totalAssets();\\n    return _totalAssets.mul(_shares) / _totalShares;\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function maxDeposit(address) external pure override returns (uint256) {\\n    return uint256(-1);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function previewDeposit(uint256 _assets) external view override returns (uint256) {\\n    return convertToShares(_assets);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function maxMint(address) external pure override returns (uint256) {\\n    return uint256(-1);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function previewMint(uint256 _shares) external view override returns (uint256) {\\n    return convertToAssets(_shares);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function maxWithdraw(address) external pure override returns (uint256) {\\n    return uint256(-1);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function previewWithdraw(uint256 _assets) external view override returns (uint256) {\\n    uint256 _totalAssets = totalAssets();\\n    require(_assets <= _totalAssets, \\\"exceed total assets\\\");\\n    uint256 _shares = convertToShares(_assets);\\n    if (_assets == _totalAssets) {\\n      return _shares;\\n    } else {\\n      FeeInfo memory _fees = feeInfo;\\n      return _shares.mul(FEE_PRECISION).div(FEE_PRECISION - _fees.withdrawPercentage);\\n    }\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function maxRedeem(address) external pure override returns (uint256) {\\n    return uint256(-1);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function previewRedeem(uint256 _shares) external view override returns (uint256) {\\n    uint256 _totalSupply = totalSupply();\\n    require(_shares <= _totalSupply, \\\"exceed total supply\\\");\\n\\n    uint256 _assets = convertToAssets(_shares);\\n    if (_shares == totalSupply()) {\\n      return _assets;\\n    } else {\\n      FeeInfo memory _fees = feeInfo;\\n      uint256 _withdrawFee = _assets.mul(_fees.withdrawPercentage) / FEE_PRECISION;\\n      return _assets - _withdrawFee;\\n    }\\n  }\\n\\n  /********************************** Mutated Functions **********************************/\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function deposit(uint256 _assets, address _receiver) public override nonReentrant returns (uint256) {\\n    if (_assets == uint256(-1)) {\\n      _assets = IERC20Upgradeable(asset()).balanceOf(msg.sender);\\n    }\\n\\n    _distributePendingReward();\\n\\n    IERC20Upgradeable(asset()).safeTransferFrom(msg.sender, address(this), _assets);\\n\\n    return _deposit(_assets, _receiver);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function mint(uint256 _shares, address _receiver) external override nonReentrant returns (uint256) {\\n    _distributePendingReward();\\n\\n    uint256 _assets = convertToAssets(_shares);\\n    IERC20Upgradeable(asset()).safeTransferFrom(msg.sender, address(this), _assets);\\n\\n    _deposit(_assets, _receiver);\\n    return _assets;\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function withdraw(\\n    uint256 _assets,\\n    address _receiver,\\n    address _owner\\n  ) external override nonReentrant returns (uint256) {\\n    _distributePendingReward();\\n    if (_assets == uint256(-1)) {\\n      _assets = convertToAssets(balanceOf(_owner));\\n    }\\n\\n    uint256 _totalAssets = totalAssets();\\n    require(_assets <= _totalAssets, \\\"exceed total assets\\\");\\n\\n    uint256 _shares = convertToShares(_assets);\\n    if (_assets < _totalAssets) {\\n      uint256 _withdrawPercentage = getFeeRate(WITHDRAW_FEE_TYPE, _owner);\\n      _shares = _shares.mul(FEE_PRECISION).div(FEE_PRECISION - _withdrawPercentage);\\n    }\\n\\n    if (msg.sender != _owner) {\\n      uint256 _allowance = allowance(_owner, msg.sender);\\n      require(_allowance >= _shares, \\\"withdraw exceeds allowance\\\");\\n      if (_allowance != uint256(-1)) {\\n        // decrease allowance if it is not max\\n        _approve(_owner, msg.sender, _allowance - _shares);\\n      }\\n    }\\n\\n    _withdraw(_shares, _receiver, _owner);\\n    return _shares;\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function redeem(\\n    uint256 _shares,\\n    address _receiver,\\n    address _owner\\n  ) public override nonReentrant returns (uint256) {\\n    if (_shares == uint256(-1)) {\\n      _shares = balanceOf(_owner);\\n    }\\n    _distributePendingReward();\\n\\n    if (msg.sender != _owner) {\\n      uint256 _allowance = allowance(_owner, msg.sender);\\n      require(_allowance >= _shares, \\\"redeem exceeds allowance\\\");\\n      if (_allowance != uint256(-1)) {\\n        // decrease allowance if it is not max\\n        _approve(_owner, msg.sender, _allowance - _shares);\\n      }\\n    }\\n\\n    return _withdraw(_shares, _receiver, _owner);\\n  }\\n\\n  /// @notice External function to force update pending reward.\\n  function checkpoint() external {\\n    _distributePendingReward();\\n  }\\n\\n  /********************************** Restricted Functions **********************************/\\n\\n  /// @notice Update the fee information.\\n  /// @param _platform The platform address to be updated.\\n  /// @param _platformPercentage The platform fee percentage to be updated, multipled by 1e9.\\n  /// @param _bountyPercentage The harvest bounty percentage to be updated, multipled by 1e9.\\n  /// @param _withdrawPercentage The withdraw fee percentage to be updated, multipled by 1e9.\\n  function updateFeeInfo(\\n    address _platform,\\n    uint32 _platformPercentage,\\n    uint32 _bountyPercentage,\\n    uint32 _withdrawPercentage\\n  ) external onlyOwner {\\n    require(_platform != address(0), \\\"zero platform address\\\");\\n    require(_platformPercentage <= MAX_PLATFORM_FEE, \\\"platform fee too large\\\");\\n    require(_bountyPercentage <= MAX_HARVEST_BOUNTY, \\\"bounty fee too large\\\");\\n    require(_withdrawPercentage <= MAX_WITHDRAW_FEE, \\\"withdraw fee too large\\\");\\n\\n    feeInfo = FeeInfo(_platform, _platformPercentage, _bountyPercentage, _withdrawPercentage);\\n\\n    emit UpdateFeeInfo(_platform, _platformPercentage, _bountyPercentage, _withdrawPercentage);\\n  }\\n\\n  /// @notice Update the reward period length\\n  /// @param _length The length of the reward period.\\n  function updateRewardPeriodLength(uint32 _length) external onlyOwner {\\n    rewardInfo.periodLength = _length;\\n\\n    emit UpdateRewardPeriodLength(_length);\\n  }\\n\\n  /// @notice Update withdraw fee for certain user.\\n  /// @param _user The address of user to update.\\n  /// @param _percentage The withdraw fee percentage to be updated, multipled by 1e9.\\n  function setWithdrawFeeForUser(address _user, uint32 _percentage) external onlyOwner {\\n    require(_percentage <= MAX_WITHDRAW_FEE, \\\"withdraw fee too large\\\");\\n\\n    _setFeeCustomization(WITHDRAW_FEE_TYPE, _user, _percentage);\\n  }\\n\\n  /// @notice Update the harvester contract\\n  /// @param _harvester The address of the harvester contract.\\n  function updateHarvester(address _harvester) external onlyOwner {\\n    _updateHarvester(_harvester);\\n  }\\n\\n  /********************************** Internal Functions **********************************/\\n\\n  /// @dev Internal function to deposit assets and transfer to `_receiver`.\\n  /// @param _assets The amount of asset to deposit.\\n  /// @param _receiver The address of account who will receive the pool share.\\n  /// @return Return the amount of pool shares to be received.\\n  function _deposit(uint256 _assets, address _receiver) internal virtual returns (uint256);\\n\\n  /// @dev Internal function to withdraw assets from `_owner` and transfer to `_receiver`.\\n  /// @param _shares The amount of pool share to burn.\\n  /// @param _receiver The address of account who will receive the assets.\\n  /// @param _owner The address of user to withdraw from.\\n  /// @return Return the amount of underlying assets to be received.\\n  function _withdraw(\\n    uint256 _shares,\\n    address _receiver,\\n    address _owner\\n  ) internal virtual returns (uint256);\\n\\n  /// @dev Internal function to distribute pending rewards.\\n  function _distributePendingReward() internal virtual {\\n    RewardInfo memory _info = rewardInfo;\\n    if (_info.periodLength == 0) return;\\n\\n    uint256 _period;\\n    if (block.timestamp > _info.finishAt) {\\n      // finishAt >= lastUpdate will happen, if `_notifyHarvestedReward` is not called during current period.\\n      _period = _info.finishAt >= _info.lastUpdate ? _info.finishAt - _info.lastUpdate : 0;\\n    } else {\\n      _period = block.timestamp - _info.lastUpdate; // never overflow\\n    }\\n\\n    uint256 _totalAssetsStored = totalAssetsStored;\\n    if (_totalAssetsStored == 0) {\\n      // If the pool is empty, we just do nothing.\\n      // And if the someone deposit again, the pending rewards will be\\n      // accumulated into the compounder index.\\n      // This may have some problems if the pool share is very small.\\n      // If this happens, we can just redploy the contract.\\n    } else {\\n      totalAssetsStored = _totalAssetsStored + _period * _info.rate;\\n      rewardInfo.lastUpdate = uint48(block.timestamp);\\n    }\\n  }\\n\\n  /// @dev Internal function to notify harvested rewards.\\n  /// @dev The caller should make sure `_distributePendingReward` is called before.\\n  /// @param _amount The amount of harvested rewards.\\n  function _notifyHarvestedReward(uint256 _amount) internal virtual {\\n    RewardInfo memory _info = rewardInfo;\\n    if (_info.periodLength == 0) {\\n      totalAssetsStored = totalAssetsStored.add(_amount);\\n    } else {\\n      require(_amount < uint128(-1), \\\"amount overflow\\\");\\n\\n      if (block.timestamp >= _info.finishAt) {\\n        _info.rate = uint128(_amount / _info.periodLength);\\n      } else {\\n        uint256 _remaining = _info.finishAt - block.timestamp;\\n        uint256 _leftover = _remaining * _info.rate;\\n        _info.rate = uint128((_amount + _leftover) / _info.periodLength);\\n      }\\n\\n      _info.lastUpdate = uint48(block.timestamp);\\n      _info.finishAt = uint48(block.timestamp + _info.periodLength);\\n\\n      rewardInfo = _info;\\n    }\\n  }\\n\\n  /// @inheritdoc FeeCustomization\\n  function _defaultFeeRate(bytes32) internal view override returns (uint256) {\\n    return feeInfo.withdrawPercentage;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/ConcentratorBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract ConcentratorBase {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the harvester contract is updated.\\n  /// @param _harvester The address of the harvester contract.\\n  event UpdateHarvester(address _harvester);\\n\\n  /// @notice Emitted when the zap contract is updated.\\n  /// @param _zap The address of the zap contract.\\n  event UpdateZap(address _zap);\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The storage slot for harvester storage.\\n  bytes32 private constant CONCENTRATOR_STORAGE_POSITION = keccak256(\\\"concentrator.base.storage\\\");\\n\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  struct BaseStorage {\\n    address harvester;\\n    uint256[100] gaps;\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  function baseStorage() internal pure returns (BaseStorage storage bs) {\\n    bytes32 position = CONCENTRATOR_STORAGE_POSITION;\\n    assembly {\\n      bs.slot := position\\n    }\\n  }\\n\\n  function _updateHarvester(address _harvester) internal {\\n    baseStorage().harvester = _harvester;\\n\\n    emit UpdateHarvester(_harvester);\\n  }\\n\\n  function ensureCallerIsHarvester() internal view {\\n    address _harvester = baseStorage().harvester;\\n\\n    require(_harvester == address(0) || _harvester == msg.sender, \\\"only harvester\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/stakedao/SdCrvCompounder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\n\\nimport { IAladdinCompounder } from \\\"../../interfaces/concentrator/IAladdinCompounder.sol\\\";\\nimport { ISdCrvCompounder } from \\\"../../interfaces/concentrator/ISdCrvCompounder.sol\\\";\\nimport { IZap } from \\\"../../interfaces/IZap.sol\\\";\\n\\nimport { AladdinCompounder } from \\\"../AladdinCompounder.sol\\\";\\nimport { SdCRVLocker } from \\\"./SdCRVLocker.sol\\\";\\n\\n// solhint-disable contract-name-camelcase\\n\\n// Since the `IConcentratorSdCrvGaugeWrapper` won't compile with `0.7.6`, we create a simple interface.\\ninterface IWrapper_SdCrvCompounder {\\n  /// @notice Return the list of active reward tokens.\\n  function getActiveRewardTokens() external view returns (address[] memory);\\n\\n  /// @notice Deposit some staking token to the contract.\\n  ///\\n  /// @param amount The amount of staking token to deposit.\\n  /// @param receiver The address of recipient who will receive the deposited staking token.\\n  function deposit(uint256 amount, address receiver) external;\\n\\n  /// @notice Deposit some gauge token to the contract.\\n  ///\\n  /// @param amount The amount of gauge token to deposit.\\n  /// @param receiver The address of recipient who will receive the deposited gauge token.\\n  function depositWithGauge(uint256 amount, address receiver) external;\\n\\n  /// @notice Deposit some CRV to the contract.\\n  ///\\n  /// @param amount The amount of staking token to deposit.\\n  /// @param receiver The address of recipient who will receive the deposited staking token.\\n  /// @param minOut The minimum amount of sdCRV should received.\\n  /// @return amountOut The amount of sdCRV received.\\n  function depositWithCRV(\\n    uint256 amount,\\n    address receiver,\\n    uint256 minOut\\n  ) external returns (uint256 amountOut);\\n\\n  /// @notice Deposit some CRV to the contract.\\n  ///\\n  /// @param amount The amount of staking token to deposit.\\n  /// @param receiver The address of recipient who will receive the deposited staking token.\\n  function depositWithSdVeCRV(uint256 amount, address receiver) external;\\n\\n  /// @notice Withdraw some staking token from the contract.\\n  ///\\n  /// @param amount The amount of staking token to withdraw.\\n  /// @param receiver The address of recipient who will receive the withdrawn staking token.\\n  function withdraw(uint256 amount, address receiver) external;\\n\\n  /// @notice Set the default reward receiver for the caller.\\n  /// @dev When set to address(0), rewards are sent to the caller.\\n  /// @param _newReceiver The new receiver address for any rewards claimed via `claim`.\\n  function setRewardReceiver(address _newReceiver) external;\\n\\n  /// @notice Claim pending rewards of all active tokens for the user and transfer to others.\\n  /// @param account The address of the user.\\n  /// @param receiver The address of the recipient.\\n  function claim(address account, address receiver) external;\\n}\\n\\n// solhint-disable no-empty-blocks\\n// solhint-disable reason-string\\n\\ncontract SdCrvCompounder is AladdinCompounder, SdCRVLocker, ISdCrvCompounder {\\n  using SafeMathUpgradeable for uint256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the address of stash contract is updated.\\n  /// @param oldStash The address of the previous stash contract.\\n  /// @param newStash The address of the current stash contract.\\n  event UpdateStash(address indexed oldStash, address indexed newStash);\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The address of CRV Token.\\n  address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n  /// @dev The address of SDT Token.\\n  address private constant SDT = 0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F;\\n\\n  // The address of 3CRV token.\\n  address private constant THREE_CRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\n  /// @dev The address of legacy sdveCRV Token.\\n  address private constant SD_VE_CRV = 0x478bBC744811eE8310B461514BDc29D03739084D;\\n\\n  /// @dev The address of legacy sdveCRV Token.\\n  address private constant SDCRV_GAUGE = 0x7f50786A0b15723D741727882ee99a0BF34e3466;\\n\\n  /// @dev The address of sdCRV Token.\\n  // solhint-disable-next-line const-name-snakecase\\n  address private constant sdCRV = 0xD1b5651E55D4CeeD36251c61c50C889B36F6abB5;\\n\\n  /// @dev The address of StakeDAOCRVVault contract.\\n  address private immutable legacyVault;\\n\\n  /// @notice The address of ConcentratorSdCrvGaugeWrapper contract.\\n  address public immutable wrapper;\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The address of ZAP contract, will be used to swap tokens.\\n  address public zap;\\n\\n  /// @notice The address of stash contract for holding extra rewards.\\n  address public stash;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _legacyVault, address _wrapper) {\\n    legacyVault = _legacyVault;\\n    wrapper = _wrapper;\\n  }\\n\\n  function initializeV2(address _stash) external {\\n    if (stash != address(0)) revert(\\\"asdCRV: v2 initialized\\\");\\n\\n    _updateStash(_stash);\\n\\n    IERC20Upgradeable(CRV).safeApprove(wrapper, uint256(-1));\\n    IERC20Upgradeable(SDCRV_GAUGE).safeApprove(wrapper, uint256(-1));\\n    IERC20Upgradeable(SD_VE_CRV).safeApprove(wrapper, uint256(-1));\\n    IERC20Upgradeable(sdCRV).safeApprove(wrapper, uint256(-1));\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function asset() public pure override(AladdinCompounder) returns (address) {\\n    return sdCRV;\\n  }\\n\\n  /// @inheritdoc SdCRVLocker\\n  /// @dev deprecated now.\\n  function withdrawLockTime() public pure override returns (uint256) {\\n    return 0;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  // receive ETH from zap\\n  receive() external payable {}\\n\\n  /// @inheritdoc ISdCrvCompounder\\n  function depositWithGauge(uint256 _assets, address _receiver) external override returns (uint256 _shares) {\\n    _distributePendingReward();\\n\\n    if (_assets == uint256(-1)) {\\n      _assets = IERC20Upgradeable(SDCRV_GAUGE).balanceOf(msg.sender);\\n    }\\n    IERC20Upgradeable(SDCRV_GAUGE).safeTransferFrom(msg.sender, address(this), _assets);\\n\\n    IWrapper_SdCrvCompounder(wrapper).depositWithGauge(_assets, address(this));\\n\\n    _shares = _mintShare(_assets, _receiver);\\n  }\\n\\n  /// @inheritdoc ISdCrvCompounder\\n  ///\\n  /// @dev Use `_assets=uint256(-1)` if you want to deposit all CRV.\\n  function depositWithCRV(\\n    uint256 _assets,\\n    address _receiver,\\n    uint256 _minShareOut\\n  ) external override nonReentrant returns (uint256 _shares) {\\n    _distributePendingReward();\\n\\n    if (_assets == uint256(-1)) {\\n      _assets = IERC20Upgradeable(CRV).balanceOf(msg.sender);\\n    }\\n    IERC20Upgradeable(CRV).safeTransferFrom(msg.sender, address(this), _assets);\\n\\n    _assets = IWrapper_SdCrvCompounder(wrapper).depositWithCRV(_assets, address(this), 0);\\n\\n    _shares = _mintShare(_assets, _receiver);\\n    require(_shares >= _minShareOut, \\\"asdCRV: insufficient share received\\\");\\n  }\\n\\n  /// @inheritdoc ISdCrvCompounder\\n  ///\\n  /// @dev Use `_assets=uint256(-1)` if you want to deposit all SdVeCRV.\\n  function depositWithSdVeCRV(uint256 _assets, address _receiver)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 _shares)\\n  {\\n    _distributePendingReward();\\n\\n    if (_assets == uint256(-1)) {\\n      _assets = IERC20Upgradeable(SD_VE_CRV).balanceOf(msg.sender);\\n    }\\n    IERC20Upgradeable(SD_VE_CRV).safeTransferFrom(msg.sender, address(this), _assets);\\n\\n    IWrapper_SdCrvCompounder(wrapper).depositWithSdVeCRV(_assets, address(this));\\n\\n    _shares = _mintShare(_assets, _receiver);\\n  }\\n\\n  /// @inheritdoc IAladdinCompounder\\n  function harvest(address _recipient, uint256 _minAssets) external override nonReentrant returns (uint256 assets) {\\n    ensureCallerIsHarvester();\\n\\n    _distributePendingReward();\\n\\n    uint256 _amountCRV;\\n    uint256 _amountSdCRV;\\n    uint256 _amountETH;\\n    address _zap = zap;\\n    // 1.1 claim pending rewards\\n    {\\n      // We are prettier sure that all tokens are active\\n      address[] memory _tokens = IWrapper_SdCrvCompounder(wrapper).getActiveRewardTokens();\\n      uint256[] memory _balances = new uint256[](_tokens.length);\\n      for (uint256 i = 0; i < _balances.length; ++i) {\\n        _balances[i] = IERC20Upgradeable(_tokens[i]).balanceOf(address(this));\\n      }\\n      // some rewards are still in legacy vault\\n      IWrapper_SdCrvCompounder(legacyVault).claim(address(this), address(this));\\n      IWrapper_SdCrvCompounder(wrapper).claim(address(this), address(this));\\n      for (uint256 i = 0; i < _balances.length; i++) {\\n        address _token = _tokens[i];\\n        uint256 _amount = IERC20Upgradeable(_tokens[i]).balanceOf(address(this)) - _balances[i];\\n        if (_token == CRV) {\\n          _amountCRV += _amount;\\n        } else if (_token == sdCRV) {\\n          _amountSdCRV += _amount;\\n        } else if (_amount > 0) {\\n          // convert to ETH\\n          IERC20Upgradeable(_token).safeTransfer(_zap, _amount);\\n          _amountETH += IZap(zap).zap(_token, _amount, address(0), 0);\\n        }\\n      }\\n    }\\n    // 1.2 convert ETH to CRV\\n    if (_amountETH > 0) {\\n      _amountCRV += IZap(_zap).zap{ value: _amountETH }(address(0), _amountETH, CRV, 0);\\n    }\\n    // 1.3 deposit CRV as sdCRV\\n    if (_amountCRV > 0) {\\n      assets = IWrapper_SdCrvCompounder(wrapper).depositWithCRV(_amountCRV, address(this), 0);\\n    }\\n    // 1.4 deposit sdCRV to vault\\n    if (_amountSdCRV > 0) {\\n      IWrapper_SdCrvCompounder(wrapper).deposit(_amountSdCRV, address(this));\\n      assets = assets + _amountSdCRV;\\n    }\\n    require(assets >= _minAssets, \\\"asdCRV: insufficient harvested sdCRV\\\");\\n\\n    // 2. calculate fee and distribute\\n    FeeInfo memory _fee = feeInfo;\\n    uint256 _totalAssets = totalAssetsStored; // the value is correct\\n    uint256 _totalShare = totalSupply();\\n    uint256 _platformFee = _fee.platformPercentage;\\n    if (_platformFee > 0) {\\n      _platformFee = (_platformFee * assets) / FEE_PRECISION;\\n      // share will be a little more than the actual percentage since minted before distribute rewards\\n      _mint(_fee.platform, _platformFee.mul(_totalShare) / _totalAssets);\\n    }\\n    uint256 _harvestBounty = _fee.bountyPercentage;\\n    if (_harvestBounty > 0) {\\n      _harvestBounty = (_harvestBounty * assets) / FEE_PRECISION;\\n      // share will be a little more than the actual percentage since minted before distribute rewards\\n      _mint(_recipient, _harvestBounty.mul(_totalShare) / _totalAssets);\\n    }\\n    totalAssetsStored = _totalAssets.add(_platformFee).add(_harvestBounty);\\n\\n    emit Harvest(msg.sender, _recipient, assets, _platformFee, _harvestBounty);\\n\\n    _notifyHarvestedReward(assets - _platformFee - _harvestBounty);\\n  }\\n\\n  /// @notice Deposit extra rewards from stash contract.\\n  /// @param amount The amount of token to deposit.\\n  function depositReward(uint256 amount) external {\\n    require(msg.sender == stash, \\\"asdCRV: caller not stash\\\");\\n\\n    _distributePendingReward();\\n\\n    IERC20Upgradeable(sdCRV).safeTransferFrom(msg.sender, address(this), amount);\\n    IWrapper_SdCrvCompounder(wrapper).deposit(amount, address(this));\\n\\n    _notifyHarvestedReward(amount);\\n  }\\n\\n  /************************\\n   * Restricted Functions *\\n   ************************/\\n\\n  /// @notice Update the zap contract\\n  /// @param _zap The address of the zap contract.\\n  function updateZap(address _zap) external onlyOwner {\\n    require(_zap != address(0), \\\"asdCRV: zero zap address\\\");\\n    zap = _zap;\\n\\n    emit UpdateZap(_zap);\\n  }\\n\\n  /// @notice Update the stash contract\\n  /// @param _stash The address of the zap contract.\\n  function updateStash(address _stash) external onlyOwner {\\n    _updateStash(_stash);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @inheritdoc AladdinCompounder\\n  function _deposit(uint256 _assets, address _receiver) internal override returns (uint256) {\\n    IWrapper_SdCrvCompounder(wrapper).deposit(_assets, address(this));\\n\\n    return _mintShare(_assets, _receiver);\\n  }\\n\\n  /// @dev Internal function to mint share to user.\\n  /// @param _assets The amount of asset to deposit.\\n  /// @param _receiver The address of account who will receive the pool share.\\n  /// @return Return the amount of pool shares to be received.\\n  function _mintShare(uint256 _assets, address _receiver) internal returns (uint256) {\\n    require(_assets > 0, \\\"asdCRV: deposit zero amount\\\");\\n\\n    uint256 _totalAssets = totalAssetsStored; // the value is correct\\n    uint256 _totalShare = totalSupply();\\n    uint256 _shares;\\n    if (_totalAssets == 0) _shares = _assets;\\n    else _shares = _assets.mul(_totalShare) / _totalAssets;\\n\\n    _mint(_receiver, _shares);\\n\\n    totalAssetsStored = _totalAssets + _assets;\\n\\n    emit Deposit(msg.sender, _receiver, _assets, _shares);\\n\\n    return _shares;\\n  }\\n\\n  /// @inheritdoc AladdinCompounder\\n  function _withdraw(\\n    uint256 _shares,\\n    address _receiver,\\n    address _owner\\n  ) internal override returns (uint256) {\\n    require(_shares > 0, \\\"asdCRV: withdraw zero share\\\");\\n    require(_shares <= balanceOf(_owner), \\\"asdCRV: insufficient owner shares\\\");\\n    uint256 _totalAssets = totalAssetsStored; // the value is correct\\n    uint256 _totalShare = totalSupply();\\n    uint256 _amount = _shares.mul(_totalAssets) / _totalShare;\\n    _burn(_owner, _shares);\\n\\n    // @note If it is the last user, some extra rewards still pending.\\n    // We just ignore it for now.\\n\\n    totalAssetsStored = _totalAssets - _amount; // never overflow here\\n\\n    IWrapper_SdCrvCompounder(wrapper).withdraw(_amount, _receiver);\\n\\n    emit Withdraw(msg.sender, _receiver, _owner, _amount, _shares);\\n\\n    return _amount;\\n  }\\n\\n  /// @inheritdoc SdCRVLocker\\n  function _unlockToken(uint256 _amount, address _recipient) internal override {\\n    // the expired sdCRV already transfered to this contract.\\n    IERC20Upgradeable(sdCRV).safeTransfer(_recipient, _amount);\\n  }\\n\\n  /// @dev Internal function to update the address of stash contract.\\n  /// @param _newStash The address of the new stash contract.\\n  function _updateStash(address _newStash) internal {\\n    require(_newStash != address(0), \\\"asdCRV: zero stash address\\\");\\n\\n    address _oldStash = stash;\\n    stash = _newStash;\\n    emit UpdateStash(_oldStash, _newStash);\\n\\n    IWrapper_SdCrvCompounder(wrapper).setRewardReceiver(_newStash);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/stakedao/SdCRVLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n// solhint-disable not-rely-on-time\\n\\nabstract contract SdCRVLocker {\\n  /// @notice Emmited when someone withdraw staking token from contract.\\n  /// @param _owner The address of the owner of the staking token.\\n  /// @param _recipient The address of the recipient of the locked staking token.\\n  /// @param _amount The amount of staking token withdrawn.\\n  /// @param _expiredAt The timestamp in second then the lock expired\\n  event Lock(address indexed _owner, address indexed _recipient, uint256 _amount, uint256 _expiredAt);\\n\\n  /// @notice Emitted when someone withdraw expired locked staking token.\\n  /// @param _owner The address of the owner of the locked staking token.\\n  /// @param _recipient The address of the recipient of the staking token.\\n  /// @param _amount The amount of staking token withdrawn.\\n  event WithdrawExpired(address indexed _owner, address indexed _recipient, uint256 _amount);\\n\\n  /// @dev Compiler will pack this into single `uint256`.\\n  struct LockedBalance {\\n    // The amount of staking token locked.\\n    uint128 amount;\\n    // The timestamp in seconds when the lock expired.\\n    uint128 expireAt;\\n  }\\n\\n  /// @dev The number of seconds in 1 day.\\n  uint256 private constant DAYS = 86400;\\n\\n  /// @dev Mapping from user address to list of locked staking tokens.\\n  mapping(address => LockedBalance[]) private locks;\\n\\n  /// @dev Mapping from user address to next index in `LockedBalance` lists.\\n  mapping(address => uint256) private nextLockIndex;\\n\\n  /// @notice The number of seconds to lock for withdrawing assets from the contract.\\n  function withdrawLockTime() public view virtual returns (uint256);\\n\\n  /// @notice Return the list of locked staking token in the contract.\\n  /// @param _user The address of user to query.\\n  /// @return _locks The list of `LockedBalance` of the user.\\n  function getUserLocks(address _user) external view returns (LockedBalance[] memory _locks) {\\n    uint256 _nextIndex = nextLockIndex[_user];\\n    uint256 _length = locks[_user].length;\\n    _locks = new LockedBalance[](_length - _nextIndex);\\n    for (uint256 i = _nextIndex; i < _length; i++) {\\n      _locks[i - _nextIndex] = locks[_user][i];\\n    }\\n  }\\n\\n  /// @notice Withdraw all expired locks from contract.\\n  /// @param _user The address of user to withdraw.\\n  /// @param _recipient The address of recipient who will receive the token.\\n  /// @return _amount The amount of staking token withdrawn.\\n  function withdrawExpired(address _user, address _recipient) external returns (uint256 _amount) {\\n    if (_user != msg.sender) {\\n      require(_recipient == _user, \\\"withdraw from others to others\\\");\\n    }\\n\\n    LockedBalance[] storage _locks = locks[_user];\\n    uint256 _nextIndex = nextLockIndex[_user];\\n    uint256 _length = _locks.length;\\n    while (_nextIndex < _length) {\\n      LockedBalance memory _lock = _locks[_nextIndex];\\n      // The list may not be ordered by expireAt, since `withdrawLockTime` could be changed.\\n      // However, we will still wait the first one to expire just for the sake of simplicity.\\n      if (_lock.expireAt > block.timestamp) break;\\n      _amount += _lock.amount;\\n\\n      delete _locks[_nextIndex]; // clear to refund gas\\n      _nextIndex += 1;\\n    }\\n    nextLockIndex[_user] = _nextIndex;\\n\\n    _unlockToken(_amount, _recipient);\\n\\n    emit WithdrawExpired(_user, _recipient, _amount);\\n  }\\n\\n  /// @dev Internal function to lock staking token.\\n  /// @param _amount The amount of staking token to lock.\\n  /// @param _recipient The address of recipient who will receive the locked token.\\n  function _lockToken(uint256 _amount, address _recipient) internal {\\n    uint256 _expiredAt = block.timestamp + withdrawLockTime();\\n    // ceil up to 86400 seconds\\n    _expiredAt = ((_expiredAt + DAYS - 1) / DAYS) * DAYS;\\n\\n    uint256 _length = locks[_recipient].length;\\n    if (_length == 0 || locks[_recipient][_length - 1].expireAt != _expiredAt) {\\n      locks[_recipient].push(LockedBalance({ amount: uint128(_amount), expireAt: uint128(_expiredAt) }));\\n    } else {\\n      locks[_recipient][_length - 1].amount += uint128(_amount);\\n    }\\n\\n    emit Lock(msg.sender, _recipient, _amount, _expiredAt);\\n  }\\n\\n  /// @dev Internal function to unlock staking token.\\n  /// @param _amount The amount of staking token to unlock.\\n  /// @param _recipient The address of recipient who will receive the unlocked token.\\n  function _unlockToken(uint256 _amount, address _recipient) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/concentrator/IAladdinCompounder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @title IAladdinCompounder\\n/// @notice The interface for AladdinCompounder like aCRV, aFXS, and is also EIP4646 compatible.\\ninterface IAladdinCompounder {\\n  /// @notice Emitted when someone deposits asset into this contract.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param sender The address who sends underlying asset.\\n  /// @param owner The address who will receive the pool shares.\\n  /// @param assets The amount of asset deposited.\\n  /// @param shares The amounf of pool shares received.\\n  event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n  /// @notice Emitted when someone withdraws asset from this contract.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param sender The address who call the function.\\n  /// @param receiver The address who will receive the assets.\\n  /// @param owner The address who owns the assets.\\n  /// @param assets The amount of asset withdrawn.\\n  /// @param shares The amounf of pool shares to withdraw.\\n  event Withdraw(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n\\n  /// @notice Emitted when someone harvests rewards.\\n  /// @param caller The address who call the function.\\n  /// @param recipient The address of account to recieve the harvest bounty.\\n  /// @param assets The total amount of underlying asset harvested.\\n  /// @param platformFee The amount of harvested assets as platform fee.\\n  /// @param harvestBounty The amount of harvested assets as harvest bounty.\\n  event Harvest(\\n    address indexed caller,\\n    address indexed recipient,\\n    uint256 assets,\\n    uint256 platformFee,\\n    uint256 harvestBounty\\n  );\\n\\n  /// @notice Return the address of underlying assert.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  function asset() external view returns (address assetTokenAddress);\\n\\n  /// @notice Return the total amount of underlying assert mananged by the contract.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n  /// @notice Return the amount of pool shares given the amount of asset.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param assets The amount of asset to convert.\\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n  /// @notice Return the amount of asset given the amount of pool share.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param assets The amount of pool shares to convert.\\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n  /// @notice Return the maximum amount of asset that the user can deposit.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param receiver The address of user to receive the pool share.\\n  function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n  /// @notice Return the amount of pool shares will receive, if perform a deposit.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param assets The amount of asset to deposit.\\n  function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n  /// @notice Deposit assets into this contract.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param assets The amount of asset to deposit.\\n  /// @param receiver The address of account who will receive the pool share.\\n  /// @return shares The amount of pool shares received.\\n  function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n  /// @notice Return the maximum amount of pool shares that the user can mint.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param receiver The address of user to receive the pool share.\\n  function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n  /// @notice Return the amount of assets needed, if perform a mint.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param shares The amount of pool shares to mint.\\n  function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n  /// @notice Mint pool shares from this contract.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param shares The amount of pool shares to mint.\\n  /// @param receiver The address of account who will receive the pool share.\\n  /// @return assets The amount of assets deposited to the contract.\\n  function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n  /// @notice Return the maximum amount of assets that the user can withdraw.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param owner The address of user to withdraw from.\\n  function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n  /// @notice Return the amount of shares needed, if perform a withdraw.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param assets The amount of assets to withdraw.\\n  function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n  /// @notice Withdraw assets from this contract.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param assets The amount of assets to withdraw.\\n  /// @param receiver The address of account who will receive the assets.\\n  /// @param owner The address of user to withdraw from.\\n  /// @return shares The amount of pool shares burned.\\n  function withdraw(\\n    uint256 assets,\\n    address receiver,\\n    address owner\\n  ) external returns (uint256 shares);\\n\\n  /// @notice Return the maximum amount of pool shares that the user can redeem.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param owner The address of user to redeem from.\\n  function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n  /// @notice Return the amount of assets to be received, if perform a redeem.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param shares The amount of pool shares to redeem.\\n  function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n  /// @notice Redeem assets from this contract.\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-4626\\n  /// @param shares The amount of pool shares to burn.\\n  /// @param receiver The address of account who will receive the assets.\\n  /// @param owner The address of user to withdraw from.\\n  /// @return assets The amount of assets withdrawn.\\n  function redeem(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  ) external returns (uint256 assets);\\n\\n  /// @notice Harvest rewards and convert to underlying asset.\\n  /// @param recipient The address of account to recieve the harvest bounty.\\n  /// @param minAssets The minimum amount of underlying asset harvested.\\n  /// @return assets The total amount of underlying asset harvested.\\n  function harvest(address recipient, uint256 minAssets) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/concentrator/ISdCrvCompounder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ISdCrvCompounder {\\n  /// @notice Deposit sdCRV-gauge into the contract.\\n  /// @dev Use `assets=uint256(-1)` if you want to deposit all sdCRV-gauge.\\n  /// @param assets The amount of sdCRV-gauge to desposit.\\n  /// @param receiver The address of account who will receive the pool share.\\n  /// @return shares The amount of pool shares received.\\n  function depositWithGauge(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n  /// @notice Deposit sdveCRV into the contract.\\n  /// @dev Use `assets=uint256(-1)` if you want to deposit all sdveCRV.\\n  /// @param assets The amount of sdveCRV to desposit.\\n  /// @param receiver The address of account who will receive the pool share.\\n  /// @return shares The amount of pool shares received.\\n  function depositWithSdVeCRV(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n  /// @notice Deposit CRV into the contract.\\n  /// @dev Use `assets=uint256(-1)` if you want to deposit all CRV.\\n  /// @param assets The amount of CRV to desposit.\\n  /// @param receiver The address of account who will receive the pool share.\\n  /// @param _minShareOut The minimum amount of share to receive.\\n  /// @return shares The amount of pool shares received.\\n  function depositWithCRV(\\n    uint256 assets,\\n    address receiver,\\n    uint256 _minShareOut\\n  ) external returns (uint256 shares);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IZap {\\n  function zap(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n\\n  function zapWithRoutes(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256[] calldata _routes,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n\\n  function zapFrom(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legacyVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_feeType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"CancleCustomizeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_feeType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"CustomizeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestBounty\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiredAt\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_bountyPercentage\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_repayPercentage\",\"type\":\"uint32\"}],\"name\":\"UpdateFeeInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"UpdateHarvester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardPeriodLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldStash\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStash\",\"type\":\"address\"}],\"name\":\"UpdateStash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"UpdateZap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawExpired\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minShareOut\",\"type\":\"uint256\"}],\"name\":\"depositWithCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"depositWithGauge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"depositWithSdVeCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bountyPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"withdrawPercentage\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_feeType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expireAt\",\"type\":\"uint128\"}],\"internalType\":\"struct SdCRVLocker.LockedBalance[]\",\"name\":\"_locks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAssets\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"periodLength\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"lastUpdate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"finishAt\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_percentage\",\"type\":\"uint32\"}],\"name\":\"setWithdrawFeeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_bountyPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_withdrawPercentage\",\"type\":\"uint32\"}],\"name\":\"updateFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"updateHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_length\",\"type\":\"uint32\"}],\"name\":\"updateRewardPeriodLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"}],\"name\":\"updateStash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"updateZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SdCrvCompounder", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002b3e72f568f96d7209e20c8b8f4f2a363ee1e3f600000000000000000000000009b0e3a114135f528f762db8363b4f5eae3f3bf1", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}