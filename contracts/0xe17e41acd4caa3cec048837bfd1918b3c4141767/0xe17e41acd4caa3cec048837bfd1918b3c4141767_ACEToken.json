{"SourceCode": "pragma solidity ^ 0.4.18;\r\n\r\ncontract Ownable {\r\naddress public owner;\r\n\r\nfunction Ownable() public {\r\nowner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nfunction transferOwnership(address newOwner) public onlyOwner {\r\nrequire(newOwner != address(0));\r\nowner = newOwner;\r\n}\r\n}\r\n\r\nlibrary SafeMath {\r\nfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract Pausable is Ownable {\r\nevent Pause();\r\nevent Unpause();\r\n\r\nbool public paused = false;\r\n\r\nmodifier whenNotPaused() {\r\nrequire(!paused);\r\n_;\r\n}\r\n\r\nmodifier whenPaused() {\r\nrequire(paused);\r\n_;\r\n}\r\n\r\nfunction pause() onlyOwner whenNotPaused public {\r\npaused = true;\r\nPause();\r\n}\r\n\r\nfunction unpause() onlyOwner whenPaused public {\r\npaused = false;\r\nUnpause();\r\n}\r\n}\r\n\r\ncontract ERC20 {\r\nfunction totalSupply() public view returns(uint256);\r\nfunction balanceOf(address who) public view returns(uint256);\r\nfunction transfer(address to, uint256 value) public returns(bool);\r\nfunction allowance(address owner, address spender) public view returns(uint256);\r\nfunction transferFrom(address from, address to, uint256 value) public returns(bool);\r\nfunction approve(address spender, uint256 value) public returns(bool);\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ACEToken is ERC20, Ownable, Pausable {\r\n\r\nusing SafeMath for uint256;\r\n\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals;\r\nuint256 initialSupply;\r\nuint256 totalSupply_;\r\n\r\nevent Burn(address burner, uint256 value);\r\n\r\nmapping(address => uint256) balances;\r\nmapping(address => bool) internal locks;\r\nmapping(address => mapping(address => uint256)) internal allowed;\r\n\r\nfunction ACEToken() public {\r\nname = \"ACE Entertainment Token\";\r\nsymbol = \"ACE\";\r\ndecimals = 6;\r\ninitialSupply = 2000000000;\r\ntotalSupply_ = initialSupply * (10 ** uint(decimals));\r\nbalances[owner] = totalSupply_;\r\nTransfer(address(0), owner, totalSupply_);\r\n}\r\n\r\nfunction totalSupply() public view returns(uint256) {\r\nreturn totalSupply_;\r\n}\r\n\r\nfunction transfer(address _to, uint256 _value) public whenNotPaused returns(bool) {\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[msg.sender]);\r\nrequire(locks[msg.sender] == false);\r\n\r\n// SafeMath.sub will throw if there is not enough balance.\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nTransfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\nfunction balanceOf(address _owner) public view returns(uint256 balance) {\r\nreturn balances[_owner];\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool) {\r\nrequire(_to != address(0));\r\nrequire(_value <= balances[_from]);\r\nrequire(_value <= allowed[_from][msg.sender]);\r\nrequire(locks[_from] == false);\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nTransfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\nfunction approve(address _spender, uint256 _value) public whenNotPaused returns(bool) {\r\nrequire(_value > 0);\r\nallowed[msg.sender][_spender] = _value;\r\nApproval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address _owner, address _spender) public view returns(uint256) {\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\nfunction lock(address _owner) public onlyOwner returns(bool) {\r\nrequire(locks[_owner] == false);\r\nlocks[_owner] = true;\r\nreturn true;\r\n}\r\n\r\nfunction unlock(address _owner) public onlyOwner returns(bool) {\r\nrequire(locks[_owner] == true);\r\nlocks[_owner] = false;\r\nreturn true;\r\n}\r\n\r\nfunction showLockState(address _owner) public view returns(bool) {\r\nreturn locks[_owner];\r\n}\r\n\r\nfunction burn(uint256 _value) external onlyOwner {\r\nrequire(_value <= balances[msg.sender]);\r\n// no need to require value <= totalSupply, since that would imply the\r\n// sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\naddress burner = msg.sender;\r\nbalances[burner] = balances[burner].sub(_value);\r\ntotalSupply_ = totalSupply_.sub(_value);\r\nBurn(burner, _value);\r\nTransfer(burner, address(0), _value);\r\n}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"showLockState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "ACEToken", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cbe086b38d82b1470e87ad0f1572b7a83556bf7beb7311221b9202d5d82e25a0"}