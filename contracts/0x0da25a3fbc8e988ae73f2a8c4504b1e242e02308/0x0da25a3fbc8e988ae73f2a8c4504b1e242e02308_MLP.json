{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.6;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\r\n        require(reserveA > 0 && reserveB > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract IMlp {\r\n    function makeOffer(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _unlockDate,\r\n        uint256 _endDate,\r\n        uint256 _slippageTolerancePpm,\r\n        uint256 _maxPriceVariationPpm\r\n    ) external virtual returns (uint256 offerId);\r\n\r\n    function takeOffer(\r\n        uint256 _pendingOfferId,\r\n        uint256 _amount,\r\n        uint256 _deadline\r\n    ) external virtual returns (uint256 activeOfferId);\r\n\r\n    function cancelOffer(uint256 _offerId) external virtual;\r\n\r\n    function release(uint256 _offerId, uint256 _deadline) external virtual;\r\n}\r\n\r\nabstract contract IFeesController {\r\n    function feesTo() public virtual returns (address);\r\n\r\n    function setFeesTo(address) public virtual;\r\n\r\n    function feesPpm() public virtual returns (uint256);\r\n\r\n    function setFeesPpm(uint256) public virtual;\r\n}\r\n\r\nabstract contract IRewardManager {\r\n    function add(uint256 _allocPoint, address _newMlp) public virtual;\r\n\r\n    function notifyDeposit(address _account, uint256 _amount) public virtual;\r\n\r\n    function notifyWithdraw(address _account, uint256 _amount) public virtual;\r\n\r\n    function getPoolSupply(address pool) public view virtual returns (uint256);\r\n\r\n    function getUserAmount(address pool, address user) public view virtual returns (uint256);\r\n}\r\n\r\ncontract MLP is IMlp {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public endDate;\r\n    address public submitter;\r\n    uint256 public exceedingLiquidity;\r\n    uint256 public bonusToken0;\r\n    uint256 public reward0Rate;\r\n    uint256 public reward0PerTokenStored;\r\n    uint256 public bonusToken1;\r\n    uint256 public reward1Rate;\r\n    uint256 public reward1PerTokenStored;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public pendingOfferCount;\r\n    uint256 public activeOfferCount;\r\n\r\n    IRewardManager public rewardManager;\r\n    IUniswapV2Pair public uniswapPair;\r\n    IFeesController public feesController;\r\n    IUniswapV2Router02 public uniswapRouter;\r\n\r\n    mapping(address => uint256) public userReward0PerTokenPaid;\r\n    mapping(address => uint256) public userRewards0;\r\n    mapping(address => uint256) public userReward1PerTokenPaid;\r\n    mapping(address => uint256) public userRewards1;\r\n    mapping(address => uint256) public directStakeBalances;\r\n    mapping(uint256 => PendingOffer) public getPendingOffer;\r\n    mapping(uint256 => ActiveOffer) public getActiveOffer;\r\n\r\n    enum OfferStatus {PENDING, TAKEN, CANCELED}\r\n\r\n    event OfferMade(uint256 id);\r\n    event OfferTaken(uint256 pendingOfferId, uint256 activeOfferId);\r\n    event OfferCanceled(uint256 id);\r\n    event OfferReleased(uint256 offerId);\r\n\r\n    struct PendingOffer {\r\n        address owner;\r\n        address token;\r\n        uint256 amount;\r\n        uint256 unlockDate;\r\n        uint256 endDate;\r\n        OfferStatus status;\r\n        uint256 slippageTolerancePpm;\r\n        uint256 maxPriceVariationPpm;\r\n    }\r\n\r\n    struct ActiveOffer {\r\n        address user0;\r\n        uint256 originalAmount0;\r\n        address user1;\r\n        uint256 originalAmount1;\r\n        uint256 unlockDate;\r\n        uint256 liquidity;\r\n        bool released;\r\n        uint256 maxPriceVariationPpm;\r\n    }\r\n\r\n    constructor(\r\n        address _uniswapPair,\r\n        address _submitter,\r\n        uint256 _endDate,\r\n        address _uniswapRouter,\r\n        address _feesController,\r\n        IRewardManager _rewardManager,\r\n        uint256 _bonusToken0,\r\n        uint256 _bonusToken1\r\n    ) public {\r\n        feesController = IFeesController(_feesController);\r\n        uniswapPair = IUniswapV2Pair(_uniswapPair);\r\n        endDate = _endDate;\r\n        submitter = _submitter;\r\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\r\n        rewardManager = _rewardManager;\r\n\r\n        uint256 remainingTime = _endDate.sub(block.timestamp);\r\n        bonusToken0 = _bonusToken0;\r\n        reward0Rate = _bonusToken0 / remainingTime;\r\n        bonusToken1 = _bonusToken1;\r\n        reward1Rate = _bonusToken1 / remainingTime;\r\n        lastUpdateTime = block.timestamp;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, endDate);\r\n    }\r\n\r\n    function reward0PerToken() public view returns (uint256) {\r\n        uint256 totalSupply = rewardManager.getPoolSupply(address(this));\r\n        if (totalSupply == 0) {\r\n            return reward0PerTokenStored;\r\n        }\r\n        return reward0PerTokenStored.add(lastTimeRewardApplicable().sub(lastUpdateTime).mul(reward0Rate).mul(1e18) / totalSupply);\r\n    }\r\n\r\n    function reward1PerToken() public view returns (uint256) {\r\n        uint256 totalSupply = rewardManager.getPoolSupply(address(this));\r\n        if (totalSupply == 0) {\r\n            return reward1PerTokenStored;\r\n        }\r\n        return reward1PerTokenStored.add(lastTimeRewardApplicable().sub(lastUpdateTime).mul(reward1Rate).mul(1e18) / totalSupply);\r\n    }\r\n\r\n    function rewardEarned(address account) public view returns (uint256 reward0Earned, uint256 reward1Earned) {\r\n        uint256 balance = rewardManager.getUserAmount(address(this), account);\r\n        reward0Earned = (balance.mul(reward0PerToken().sub(userReward0PerTokenPaid[account])) / 1e18).add(userRewards0[account]);\r\n        reward1Earned = (balance.mul(reward1PerToken().sub(userReward1PerTokenPaid[account])) / 1e18).add(userRewards1[account]);\r\n    }\r\n\r\n    function updateRewards(address account) internal {\r\n        reward0PerTokenStored = reward0PerToken();\r\n        reward1PerTokenStored = reward1PerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            (uint256 earned0, uint256 earned1) = rewardEarned(account);\r\n            userRewards0[account] = earned0;\r\n            userRewards1[account] = earned1;\r\n            userReward0PerTokenPaid[account] = reward0PerTokenStored;\r\n            userReward1PerTokenPaid[account] = reward1PerTokenStored;\r\n        }\r\n    }\r\n\r\n    function payRewards(address account) public {\r\n        updateRewards(account);\r\n        (uint256 reward0, uint256 reward1) = rewardEarned(account);\r\n        if (reward0 > 0) {\r\n            userRewards0[account] = 0;\r\n            IERC20(uniswapPair.token0()).safeTransfer(account, reward0);\r\n        }\r\n        if (reward1 > 0) {\r\n            userRewards1[account] = 0;\r\n            IERC20(uniswapPair.token1()).safeTransfer(account, reward1);\r\n        }\r\n    }\r\n\r\n    function _notifyDeposit(address account, uint256 amount) internal {\r\n        updateRewards(account);\r\n        rewardManager.notifyDeposit(account, amount);\r\n    }\r\n\r\n    function _notifyWithdraw(address account, uint256 amount) internal {\r\n        updateRewards(account);\r\n        rewardManager.notifyWithdraw(account, amount);\r\n    }\r\n\r\n    function makeOffer(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _unlockDate,\r\n        uint256 _endDate,\r\n        uint256 _slippageTolerancePpm,\r\n        uint256 _maxPriceVariationPpm\r\n    ) external override returns (uint256 offerId) {\r\n        require(_amount > 0);\r\n        require(_endDate > now);\r\n        require(_endDate <= _unlockDate);\r\n        offerId = pendingOfferCount;\r\n        pendingOfferCount++;\r\n        getPendingOffer[offerId] = PendingOffer(\r\n            msg.sender,\r\n            _token,\r\n            _amount,\r\n            _unlockDate,\r\n            _endDate,\r\n            OfferStatus.PENDING,\r\n            _slippageTolerancePpm,\r\n            _maxPriceVariationPpm\r\n        );\r\n        IERC20 token;\r\n        if (_token == address(uniswapPair.token0())) {\r\n            token = IERC20(uniswapPair.token0());\r\n        } else if (_token == address(uniswapPair.token1())) {\r\n            token = IERC20(uniswapPair.token1());\r\n        } else {\r\n            require(false, \"unknown token\");\r\n        }\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        emit OfferMade(offerId);\r\n    }\r\n\r\n    struct ProviderInfo {\r\n        address user;\r\n        uint256 amount;\r\n        IERC20 token;\r\n    }\r\n\r\n    struct OfferInfo {\r\n        uint256 deadline;\r\n        uint256 slippageTolerancePpm;\r\n    }\r\n\r\n    function takeOffer(\r\n        uint256 _pendingOfferId,\r\n        uint256 _amount,\r\n        uint256 _deadline\r\n    ) external override returns (uint256 activeOfferId) {\r\n        PendingOffer storage pendingOffer = getPendingOffer[_pendingOfferId];\r\n        require(pendingOffer.status == OfferStatus.PENDING);\r\n        require(pendingOffer.endDate > now);\r\n        pendingOffer.status = OfferStatus.TAKEN;\r\n\r\n        // Sort the users, tokens, and amount\r\n        ProviderInfo memory provider0;\r\n        ProviderInfo memory provider1;\r\n        {\r\n            if (pendingOffer.token == uniswapPair.token0()) {\r\n                provider0 = ProviderInfo(pendingOffer.owner, pendingOffer.amount, IERC20(uniswapPair.token0()));\r\n                provider1 = ProviderInfo(msg.sender, _amount, IERC20(uniswapPair.token1()));\r\n\r\n                provider1.token.safeTransferFrom(provider1.user, address(this), provider1.amount);\r\n            } else {\r\n                provider0 = ProviderInfo(msg.sender, _amount, IERC20(uniswapPair.token0()));\r\n                provider1 = ProviderInfo(pendingOffer.owner, pendingOffer.amount, IERC20(uniswapPair.token1()));\r\n\r\n                provider0.token.safeTransferFrom(provider0.user, address(this), provider0.amount);\r\n            }\r\n        }\r\n\r\n        // calculate fees\r\n        uint256 feesAmount0 = provider0.amount.mul(feesController.feesPpm()) / 1000;\r\n        uint256 feesAmount1 = provider1.amount.mul(feesController.feesPpm()) / 1000;\r\n\r\n        // take fees\r\n        provider0.amount = provider0.amount.sub(feesAmount0);\r\n        provider1.amount = provider1.amount.sub(feesAmount1);\r\n\r\n        // send fees\r\n        provider0.token.safeTransfer(feesController.feesTo(), feesAmount0);\r\n        provider1.token.safeTransfer(feesController.feesTo(), feesAmount1);\r\n\r\n        uint256 spentAmount0;\r\n        uint256 spentAmount1;\r\n        uint256 liquidity;\r\n        uint256[] memory returnedValues = new uint256[](3);\r\n\r\n        // send tokens to uniswap\r\n        {\r\n            returnedValues = _provideLiquidity(provider0, provider1, OfferInfo(_deadline, pendingOffer.slippageTolerancePpm));\r\n            liquidity = returnedValues[0];\r\n            spentAmount0 = returnedValues[1];\r\n            spentAmount1 = returnedValues[2];\r\n        }\r\n\r\n        // stake liquidity\r\n        _notifyDeposit(provider0.user, liquidity / 2);\r\n        _notifyDeposit(provider1.user, liquidity / 2);\r\n\r\n        if (liquidity % 2 != 0) {\r\n            exceedingLiquidity = exceedingLiquidity.add(1);\r\n        }\r\n\r\n        // Record the active offer\r\n        activeOfferId = activeOfferCount;\r\n        activeOfferCount++;\r\n\r\n        getActiveOffer[activeOfferId] = ActiveOffer(\r\n            provider0.user,\r\n            spentAmount0,\r\n            provider1.user,\r\n            spentAmount1,\r\n            pendingOffer.unlockDate,\r\n            liquidity,\r\n            false,\r\n            pendingOffer.maxPriceVariationPpm\r\n        );\r\n\r\n        emit OfferTaken(_pendingOfferId, activeOfferId);\r\n\r\n        return activeOfferId;\r\n    }\r\n\r\n    function _provideLiquidity(\r\n        ProviderInfo memory _provider0,\r\n        ProviderInfo memory _provider1,\r\n        OfferInfo memory _info\r\n    ) internal returns (uint256[] memory) {\r\n        _provider0.token.safeApprove(address(uniswapRouter), 0);\r\n        _provider1.token.safeApprove(address(uniswapRouter), 0);\r\n\r\n        _provider0.token.safeApprove(address(uniswapRouter), _provider0.amount);\r\n        _provider1.token.safeApprove(address(uniswapRouter), _provider1.amount);\r\n\r\n        uint256 amountMin0 = _provider0.amount.sub(_provider0.amount.mul(_info.slippageTolerancePpm) / 1000);\r\n        uint256 amountMin1 = _provider1.amount.sub(_provider1.amount.mul(_info.slippageTolerancePpm) / 1000);\r\n\r\n        // Add the liquidity to Uniswap\r\n        uint256 spentAmount0;\r\n        uint256 spentAmount1;\r\n        uint256 liquidity;\r\n        {\r\n            (spentAmount0, spentAmount1, liquidity) = uniswapRouter.addLiquidity(\r\n                address(_provider0.token),\r\n                address(_provider1.token),\r\n                _provider0.amount,\r\n                _provider1.amount,\r\n                amountMin0,\r\n                amountMin1,\r\n                address(this),\r\n                _info.deadline\r\n            );\r\n        }\r\n        // Give back the exceeding tokens\r\n        if (spentAmount0 < _provider0.amount) {\r\n            _provider0.token.safeTransfer(_provider0.user, _provider0.amount - spentAmount0);\r\n        }\r\n        if (spentAmount1 < _provider1.amount) {\r\n            _provider1.token.safeTransfer(_provider1.user, _provider1.amount - spentAmount1);\r\n        }\r\n        uint256[] memory liq = new uint256[](3);\r\n        liq[0] = liquidity;\r\n        liq[1] = spentAmount0;\r\n        liq[2] = spentAmount1;\r\n        return (liq);\r\n    }\r\n\r\n    function cancelOffer(uint256 _offerId) external override {\r\n        PendingOffer storage pendingOffer = getPendingOffer[_offerId];\r\n        require(pendingOffer.status == OfferStatus.PENDING);\r\n        pendingOffer.status = OfferStatus.CANCELED;\r\n        IERC20(pendingOffer.token).safeTransfer(pendingOffer.owner, pendingOffer.amount);\r\n        emit OfferCanceled(_offerId);\r\n    }\r\n\r\n    function release(uint256 _offerId, uint256 _deadline) external override {\r\n        ActiveOffer storage offer = getActiveOffer[_offerId];\r\n\r\n        require(msg.sender == offer.user0 || msg.sender == offer.user1, \"unauthorized\");\r\n        require(now > offer.unlockDate, \"locked\");\r\n        require(!offer.released, \"already released\");\r\n        offer.released = true;\r\n\r\n        IERC20 token0 = IERC20(uniswapPair.token0());\r\n        IERC20 token1 = IERC20(uniswapPair.token1());\r\n\r\n        IERC20(address(uniswapPair)).safeApprove(address(uniswapRouter), 0);\r\n\r\n        IERC20(address(uniswapPair)).safeApprove(address(uniswapRouter), offer.liquidity);\r\n        (uint256 amount0, uint256 amount1) = uniswapRouter.removeLiquidity(address(token0), address(token1), offer.liquidity, 0, 0, address(this), _deadline);\r\n\r\n        _notifyWithdraw(offer.user0, offer.liquidity / 2);\r\n        _notifyWithdraw(offer.user1, offer.liquidity / 2);\r\n\r\n        if (_getPriceVariation(offer.originalAmount0, amount0) > offer.maxPriceVariationPpm) {\r\n            if (amount0 > offer.originalAmount0) {\r\n                uint256 toSwap = amount0.sub(offer.originalAmount0);\r\n                address[] memory path = new address[](2);\r\n                path[0] = uniswapPair.token0();\r\n                path[1] = uniswapPair.token1();\r\n                token0.safeApprove(address(uniswapRouter), 0);\r\n                token0.safeApprove(address(uniswapRouter), toSwap);\r\n                uint256[] memory newAmounts = uniswapRouter.swapExactTokensForTokens(toSwap, 0, path, address(this), _deadline);\r\n                amount0 = amount0.sub(toSwap);\r\n                amount1 = amount1.add(newAmounts[1]);\r\n            }\r\n        }\r\n        if (_getPriceVariation(offer.originalAmount1, amount1) > offer.maxPriceVariationPpm) {\r\n            if (amount1 > offer.originalAmount1) {\r\n                uint256 toSwap = amount1.sub(offer.originalAmount1);\r\n                address[] memory path = new address[](2);\r\n                path[0] = uniswapPair.token1();\r\n                path[1] = uniswapPair.token0();\r\n                token1.safeApprove(address(uniswapRouter), 0);\r\n                token1.safeApprove(address(uniswapRouter), toSwap);\r\n                uint256[] memory newAmounts = uniswapRouter.swapExactTokensForTokens(toSwap, 0, path, address(this), _deadline);\r\n                amount1 = amount1.sub(toSwap);\r\n                amount0 = amount0.add(newAmounts[1]);\r\n            }\r\n        }\r\n\r\n        token0.safeTransfer(offer.user0, amount0);\r\n        payRewards(offer.user0);\r\n        token1.safeTransfer(offer.user1, amount1);\r\n        payRewards(offer.user1);\r\n\r\n        emit OfferReleased(_offerId);\r\n    }\r\n\r\n    function _getPriceVariation(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 sub;\r\n        if (a > b) {\r\n            sub = a.sub(b);\r\n            return sub.mul(1000) / a;\r\n        } else {\r\n            sub = b.sub(a);\r\n            return sub.mul(1000) / b;\r\n        }\r\n    }\r\n\r\n    function directStake(uint256 _amount) external {\r\n        require(_amount > 0, \"cannot stake 0\");\r\n        _notifyDeposit(msg.sender, _amount);\r\n        directStakeBalances[msg.sender] = directStakeBalances[msg.sender].add(_amount);\r\n        IERC20(address(uniswapPair)).safeTransferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    function directWithdraw(uint256 _amount) external {\r\n        require(_amount > 0, \"cannot withdraw 0\");\r\n        _notifyWithdraw(msg.sender, _amount);\r\n        directStakeBalances[msg.sender] = directStakeBalances[msg.sender].sub(_amount);\r\n        IERC20(address(uniswapPair)).safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    function transferExceedingLiquidity() external {\r\n        require(exceedingLiquidity != 0);\r\n        IERC20(address(uniswapPair)).safeTransfer(feesController.feesTo(), exceedingLiquidity);\r\n        exceedingLiquidity = 0;\r\n    }\r\n}\r\n\r\nabstract contract IMintableERC20 is IERC20 {\r\n    function mint(uint256 amount) public virtual;\r\n\r\n    function mintTo(address account, uint256 amount) public virtual;\r\n\r\n    function burn(uint256 amount) public virtual;\r\n\r\n    function setMinter(address account, bool isMinter) public virtual;\r\n}\r\n\r\nabstract contract IPopMarketplace {\r\n    function submitMlp(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _liquidity,\r\n        uint256 _endDate,\r\n        uint256 _bonusToken0,\r\n        uint256 _bonusToken1\r\n    ) public virtual returns (uint256);\r\n\r\n    function endMlp(uint256 _mlpId) public virtual returns (uint256);\r\n\r\n    function cancelMlp(uint256 _mlpId) public virtual;\r\n}\r\n\r\ncontract PopMarketplace is IFeesController, IPopMarketplace, Initializable, OwnableUpgradeSafe {\r\n    using SafeERC20 for IERC20;\r\n    address public uniswapFactory;\r\n    address public uniswapRouter;\r\n    address[] public allMlp;\r\n    address private _feesTo = msg.sender;\r\n    uint256 private _feesPpm;\r\n    uint256 public pendingMlpCount;\r\n    IRewardManager public rewardManager;\r\n    IMintableERC20 public popToken;\r\n\r\n    mapping(uint256 => PendingMlp) public getMlp;\r\n\r\n    enum MlpStatus {PENDING, APPROVED, CANCELED, ENDED}\r\n\r\n    struct PendingMlp {\r\n        address uniswapPair;\r\n        address submitter;\r\n        uint256 liquidity;\r\n        uint256 endDate;\r\n        MlpStatus status;\r\n        uint256 bonusToken0;\r\n        uint256 bonusToken1;\r\n    }\r\n\r\n    event MlpCreated(uint256 id, address indexed mlp);\r\n    event MlpSubmitted(uint256 id);\r\n    event MlpCanceled(uint256 id);\r\n    event ChangeFeesPpm(uint256 id);\r\n    event ChangeFeesTo(address indexed feeTo);\r\n    event MlpEnded(uint256 id);\r\n\r\n    function initialize(\r\n        address _popToken,\r\n        address _uniswapFactory,\r\n        address _uniswapRouter,\r\n        address _rewardManager\r\n    ) public initializer {\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n        popToken = IMintableERC20(_popToken);\r\n        uniswapFactory = _uniswapFactory;\r\n        uniswapRouter = _uniswapRouter;\r\n        rewardManager = IRewardManager(_rewardManager);\r\n    }\r\n\r\n    function submitMlp(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _liquidity,\r\n        uint256 _endDate,\r\n        uint256 _bonusToken0,\r\n        uint256 _bonusToken1\r\n    ) public override returns (uint256) {\r\n        require(_endDate > now, \"!datenow\");\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(uniswapFactory, _token0, _token1));\r\n        require(address(pair) != address(0), \"!address0\");\r\n\r\n        if (_liquidity > 0) {\r\n            IERC20(address(pair)).safeTransferFrom(msg.sender, address(this), _liquidity);\r\n        }\r\n        if (_bonusToken0 > 0) {\r\n            IERC20(_token0).safeTransferFrom(msg.sender, address(this), _bonusToken0);\r\n        }\r\n        if (_bonusToken1 > 0) {\r\n            IERC20(_token1).safeTransferFrom(msg.sender, address(this), _bonusToken1);\r\n        }\r\n\r\n        if (_token0 != pair.token0()) {\r\n            uint256 tmp = _bonusToken0;\r\n            _bonusToken0 = _bonusToken1;\r\n            _bonusToken1 = tmp;\r\n        }\r\n\r\n        getMlp[pendingMlpCount++] = PendingMlp({\r\n            uniswapPair: address(pair),\r\n            submitter: msg.sender,\r\n            liquidity: _liquidity,\r\n            endDate: _endDate,\r\n            status: MlpStatus.PENDING,\r\n            bonusToken0: _bonusToken0,\r\n            bonusToken1: _bonusToken1\r\n        });\r\n        uint256 mlpId = pendingMlpCount - 1;\r\n        emit MlpSubmitted(mlpId);\r\n        return mlpId;\r\n    }\r\n\r\n    function approveMlp(uint256 _mlpId, uint256 _allocPoint) external onlyOwner() returns (address mlpAddress) {\r\n        PendingMlp storage pendingMlp = getMlp[_mlpId];\r\n        require(pendingMlp.status == MlpStatus.PENDING);\r\n\r\n        MLP newMlp =\r\n            new MLP(\r\n                pendingMlp.uniswapPair,\r\n                pendingMlp.submitter,\r\n                pendingMlp.endDate,\r\n                uniswapRouter,\r\n                address(this),\r\n                rewardManager,\r\n                pendingMlp.bonusToken0,\r\n                pendingMlp.bonusToken1\r\n            );\r\n        mlpAddress = address(newMlp);\r\n        rewardManager.add(_allocPoint, mlpAddress);\r\n        allMlp.push(mlpAddress);\r\n        IERC20(IUniswapV2Pair(pendingMlp.uniswapPair).token0()).safeTransfer(mlpAddress, pendingMlp.bonusToken0);\r\n        IERC20(IUniswapV2Pair(pendingMlp.uniswapPair).token1()).safeTransfer(mlpAddress, pendingMlp.bonusToken1);\r\n\r\n        pendingMlp.status = MlpStatus.APPROVED;\r\n        emit MlpCreated(_mlpId, mlpAddress);\r\n\r\n        return mlpAddress;\r\n    }\r\n\r\n    function cancelMlp(uint256 _mlpId) public override {\r\n        PendingMlp storage pendingMlp = getMlp[_mlpId];\r\n\r\n        require(pendingMlp.submitter == msg.sender, \"!submitter\");\r\n        require(pendingMlp.status == MlpStatus.PENDING, \"!pending\");\r\n\r\n        if (pendingMlp.liquidity > 0) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pendingMlp.uniswapPair);\r\n            IERC20(address(pair)).safeTransfer(pendingMlp.submitter, pendingMlp.liquidity);\r\n        }\r\n\r\n        if (pendingMlp.bonusToken0 > 0) {\r\n            IERC20(IUniswapV2Pair(pendingMlp.uniswapPair).token0()).safeTransfer(pendingMlp.submitter, pendingMlp.bonusToken0);\r\n        }\r\n        if (pendingMlp.bonusToken1 > 0) {\r\n            IERC20(IUniswapV2Pair(pendingMlp.uniswapPair).token1()).safeTransfer(pendingMlp.submitter, pendingMlp.bonusToken1);\r\n        }\r\n\r\n        pendingMlp.status = MlpStatus.CANCELED;\r\n        emit MlpCanceled(_mlpId);\r\n    }\r\n\r\n    function setFeesTo(address _newFeesTo) public override onlyOwner {\r\n        require(_newFeesTo != address(0), \"!address0\");\r\n        _feesTo = _newFeesTo;\r\n        emit ChangeFeesTo(_newFeesTo);\r\n    }\r\n\r\n    function feesTo() public override returns (address) {\r\n        return _feesTo;\r\n    }\r\n\r\n    function feesPpm() public override returns (uint256) {\r\n        return _feesPpm;\r\n    }\r\n\r\n    function setFeesPpm(uint256 _newFeesPpm) public override onlyOwner {\r\n        require(_newFeesPpm > 0, \"!<0\");\r\n        _feesPpm = _newFeesPpm;\r\n        emit ChangeFeesPpm(_newFeesPpm);\r\n    }\r\n\r\n    function endMlp(uint256 _mlpId) public override returns (uint256) {\r\n        PendingMlp storage pendingMlp = getMlp[_mlpId];\r\n\r\n        require(pendingMlp.submitter == msg.sender, \"!submitter\");\r\n        require(pendingMlp.status == MlpStatus.APPROVED, \"!approved\");\r\n        require(block.timestamp >= pendingMlp.endDate, \"not yet ended\");\r\n\r\n        if (pendingMlp.liquidity > 0) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pendingMlp.uniswapPair);\r\n            IERC20(address(pair)).safeTransfer(pendingMlp.submitter, pendingMlp.liquidity);\r\n        }\r\n\r\n        pendingMlp.status = MlpStatus.ENDED;\r\n        emit MlpEnded(_mlpId);\r\n        return pendingMlp.liquidity;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesController\",\"type\":\"address\"},{\"internalType\":\"contract IRewardManager\",\"name\":\"_rewardManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonusToken0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusToken1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OfferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OfferMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"OfferReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingOfferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeOfferId\",\"type\":\"uint256\"}],\"name\":\"OfferTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"directStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"directStakeBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"directWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exceedingLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesController\",\"outputs\":[{\"internalType\":\"contract IFeesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getActiveOffer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceVariationPpm\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getPendingOffer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"enum MLP.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerancePpm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceVariationPpm\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageTolerancePpm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceVariationPpm\",\"type\":\"uint256\"}],\"name\":\"makeOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"payRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward0PerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward0PerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward0Rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward1PerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward1PerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward1Rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward0Earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward1Earned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract IRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingOfferId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"takeOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeOfferId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferExceedingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReward0PerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReward1PerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MLP", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "0000000000000000000000007e5d0da0f5ba5c24043dceb0da78e97dfddca7df000000000000000000000000286fe087e26d1321e8a4d1b7b22ceba302362483000000000000000000000000000000000000000000000000000000006b4408890000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000005406e1136f423602c0685df8802f8ef28b73570d0000000000000000000000001a13b10c13650ee3c33f0d6488a84cbb8603b47e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb0de1f4cb77826c8c839bebed9978af31378c112175b0f4a128e173b6259823"}