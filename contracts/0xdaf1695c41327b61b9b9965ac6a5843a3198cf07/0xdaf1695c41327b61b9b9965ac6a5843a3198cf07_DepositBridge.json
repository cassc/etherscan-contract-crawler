{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/mining/DepositBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IStoneVault} from \\\"../interfaces/IStoneVault.sol\\\";\\nimport {IStone} from \\\"../interfaces/IStone.sol\\\";\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract DepositBridge is ReentrancyGuard {\\n    address public immutable stone;\\n    address payable public immutable vault;\\n\\n    uint16 public immutable dstChainId;\\n\\n    event BridgeTo(\\n        address indexed srcAddr,\\n        bytes dstAddr,\\n        uint256 etherAmount,\\n        uint256 stoneAmount,\\n        uint256 gasPaid\\n    );\\n\\n    constructor(address _stone, address payable _vault, uint16 _dstChainId) {\\n        stone = _stone;\\n        vault = _vault;\\n\\n        dstChainId = _dstChainId;\\n    }\\n\\n    function bridgeTo(\\n        uint256 _amount,\\n        bytes calldata _dstAddress,\\n        uint256 _gasPaidForCrossChain\\n    ) public payable returns (uint256 stoneMinted) {\\n        stoneMinted = bridge(\\n            msg.sender,\\n            _amount,\\n            _dstAddress,\\n            _gasPaidForCrossChain\\n        );\\n    }\\n\\n    function bridge(\\n        address _srcAddr,\\n        uint256 _amount,\\n        bytes calldata _dstAddress,\\n        uint256 _gasPaidForCrossChain\\n    ) public payable nonReentrant returns (uint256 stoneMinted) {\\n        require(msg.value >= _amount + _gasPaidForCrossChain, \\\"wrong amount\\\");\\n\\n        IStoneVault stoneVault = IStoneVault(vault);\\n        stoneMinted = stoneVault.deposit{value: _amount}();\\n\\n        IStone stoneToken = IStone(stone);\\n        stoneToken.sendFrom{value: _gasPaidForCrossChain}(\\n            address(this),\\n            dstChainId,\\n            _dstAddress,\\n            stoneMinted,\\n            payable(_srcAddr),\\n            address(0),\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit BridgeTo(\\n            _srcAddr,\\n            _dstAddress,\\n            _amount,\\n            stoneMinted,\\n            _gasPaidForCrossChain\\n        );\\n    }\\n\\n    function estimateSendFee(\\n        uint256 _amount,\\n        bytes calldata _dstAddress\\n    ) public view returns (uint nativeFee, uint zroFee) {\\n        return\\n            IStone(stone).estimateSendFee(\\n                dstChainId,\\n                _dstAddress,\\n                _amount,\\n                false,\\n                bytes(\\\"\\\")\\n            );\\n    }\\n\\n    receive() external payable {\\n        bytes memory dstAddr = abi.encodePacked(msg.sender);\\n\\n        (uint nativeFee, ) = this.estimateSendFee(msg.value, dstAddr);\\n\\n        require(msg.value > nativeFee, \\\"too little\\\");\\n\\n        uint256 amount = msg.value - nativeFee;\\n\\n        this.bridge{value: msg.value}(msg.sender, amount, dstAddr, nativeFee);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IStoneVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IStoneVault {\\n    function deposit() external payable returns (uint256 mintAmount);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IStone.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IStone {\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stone\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dstAddr\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stoneAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPaid\",\"type\":\"uint256\"}],\"name\":\"BridgeTo\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_dstAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasPaidForCrossChain\",\"type\":\"uint256\"}],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stoneMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_dstAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasPaidForCrossChain\",\"type\":\"uint256\"}],\"name\":\"bridgeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stoneMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_dstAddress\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DepositBridge", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "0000000000000000000000007122985656e38bdc0302db86685bb972b145bd3c000000000000000000000000a62f9c5af106feee069f38de51098d9d81b9057200000000000000000000000000000000000000000000000000000000000000d9", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}