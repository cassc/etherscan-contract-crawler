{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\n\\ninterface ILayerZeroEndpointUpgradeable is ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroReceiverUpgradeable {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiverUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpointUpgradeable.sol\\\";\\nimport \\\"../../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzAppUpgradeable is Initializable, OwnableUpgradeable, ILayerZeroReceiverUpgradeable, ILayerZeroUserApplicationConfigUpgradeable {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpointUpgradeable public lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    function __LzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Ownable_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __LzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\\n        lzEndpoint = ILayerZeroEndpointUpgradeable(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./LzAppUpgradeable.sol\\\";\\nimport \\\"../../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzAppUpgradeable is Initializable, LzAppUpgradeable {\\n    using ExcessivelySafeCall for address;\\n\\n    function __NonblockingLzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Ownable_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __NonblockingLzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/token/oft/IOFTCoreUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/token/oft/IOFTUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IOFTCoreUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the OFT standard\\n */\\ninterface IOFTUpgradeable is IOFTCoreUpgradeable, IERC20Upgradeable {\\n\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/token/oft/OFTCoreUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IOFTCoreUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../lzApp/NonblockingLzAppUpgradeable.sol\\\";\\n\\nabstract contract OFTCoreUpgradeable is Initializable, NonblockingLzAppUpgradeable, ERC165Upgradeable, IOFTCoreUpgradeable {\\n    using BytesLib for bytes;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint16 public constant PT_SEND = 0;\\n\\n    bool public useCustomAdapterParams;\\n\\n    function __OFTCoreUpgradeable_init(address _lzEndpoint) internal onlyInitializing {\\n        __Ownable_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_lzEndpoint);\\n    }\\n\\n    function __OFTCoreUpgradeable_init_unchained() internal onlyInitializing {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IOFTCoreUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = abi.encode(PT_SEND, _toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        uint16 packetType;\\n        assembly {\\n            packetType := mload(add(_payload, 32))\\n        }\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\\n\\n        bytes memory lzPayload = abi.encode(PT_SEND, _toAddress, amount);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\\n        (, bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (uint16, bytes, uint));\\n\\n        address to = toAddressBytes.toAddress(0);\\n\\n        amount = _creditTo(_srcChainId, to, amount);\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual returns(uint);\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns(uint);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface IOwnable is IOwnableInternal, IERC173 {}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/IOwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/OwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/OwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return contract owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC173Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/security/pausable/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IPausableInternal } from './IPausableInternal.sol';\\n\\ninterface IPausable is IPausableInternal {\\n    /**\\n     * @notice query whether contract is paused\\n     * @return status whether contract is paused\\n     */\\n    function paused() external view returns (bool status);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/security/pausable/IPausableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IPausableInternal {\\n    error Pausable__Paused();\\n    error Pausable__NotPaused();\\n\\n    event Paused(address account);\\n    event Unpaused(address account);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/security/pausable/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IPausable } from './IPausable.sol';\\nimport { PausableInternal } from './PausableInternal.sol';\\n\\n/**\\n * @title Pausable security control module.\\n */\\nabstract contract Pausable is IPausable, PausableInternal {\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function paused() external view virtual returns (bool status) {\\n        status = _paused();\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/security/pausable/PausableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IPausableInternal } from './IPausableInternal.sol';\\nimport { PausableStorage } from './PausableStorage.sol';\\n\\n/**\\n * @title Internal functions for Pausable security control module.\\n */\\nabstract contract PausableInternal is IPausableInternal {\\n    modifier whenNotPaused() {\\n        if (_paused()) revert Pausable__Paused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        if (!_paused()) revert Pausable__NotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice query whether contract is paused\\n     * @return status whether contract is paused\\n     */\\n    function _paused() internal view virtual returns (bool status) {\\n        status = PausableStorage.layout().paused;\\n    }\\n\\n    /**\\n     * @notice Triggers paused state, when contract is unpaused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Triggers unpaused state, when contract is paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        delete PausableStorage.layout().paused;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/security/pausable/PausableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary PausableStorage {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/security/reentrancy_guard/IReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReentrancyGuard {\\n    error ReentrancyGuard__ReentrantCall();\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/security/reentrancy_guard/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IReentrancyGuard } from './IReentrancyGuard.sol';\\nimport { ReentrancyGuardStorage } from './ReentrancyGuardStorage.sol';\\n\\n/**\\n * @title Utility contract for preventing reentrancy attacks\\n */\\nabstract contract ReentrancyGuard is IReentrancyGuard {\\n    uint256 internal constant REENTRANCY_STATUS_LOCKED = 2;\\n    uint256 internal constant REENTRANCY_STATUS_UNLOCKED = 1;\\n\\n    modifier nonReentrant() virtual {\\n        if (_isReentrancyGuardLocked()) revert ReentrancyGuard__ReentrantCall();\\n        _lockReentrancyGuard();\\n        _;\\n        _unlockReentrancyGuard();\\n    }\\n\\n    /**\\n     * @notice returns true if the reentrancy guard is locked, false otherwise\\n     */\\n    function _isReentrancyGuardLocked() internal view virtual returns (bool) {\\n        return\\n            ReentrancyGuardStorage.layout().status == REENTRANCY_STATUS_LOCKED;\\n    }\\n\\n    /**\\n     * @notice lock functions that use the nonReentrant modifier\\n     */\\n    function _lockReentrancyGuard() internal virtual {\\n        ReentrancyGuardStorage.layout().status = REENTRANCY_STATUS_LOCKED;\\n    }\\n\\n    /**\\n     * @notice unlock functions that use the nonReentrant modifier\\n     */\\n    function _unlockReentrancyGuard() internal virtual {\\n        ReentrancyGuardStorage.layout().status = REENTRANCY_STATUS_UNLOCKED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/security/reentrancy_guard/ReentrancyGuardStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ReentrancyGuard');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/FarmFacet.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.19;\\r\\n\\r\\nimport {IOwnable} from \\\"@solidstate/contracts/access/ownable/IOwnable.sol\\\";\\r\\nimport {LibFarmStorage} from \\\"./LibFarmStorage.sol\\\";\\r\\nimport {Scale} from \\\"../tokens/Scale.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@solidstate/contracts/security/reentrancy_guard/ReentrancyGuard.sol\\\";\\r\\nimport {Pausable} from \\\"@solidstate/contracts/security/pausable/Pausable.sol\\\";\\r\\nimport {OwnableInternal} from \\\"@solidstate/contracts/access/ownable/OwnableInternal.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint amountOut,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\ncontract FarmFacet is IERC20, ReentrancyGuard, Pausable, OwnableInternal {\\r\\n    uint256 private constant MULTIPLIER = 1 ether;\\r\\n\\r\\n    error FarmFacet__MinLockDuration();\\r\\n    error FarmFacet__NotLocker();\\r\\n    error FarmFacet__AlreadyUnlocked();\\r\\n    error FarmFacet__StillLocked(uint256 _timeLeft);\\r\\n    error FarmFacet__NotEnoughRewards();\\r\\n\\r\\n    error FarmFacet__AlreadyVested();\\r\\n    error FarmFacet__NotVester();\\r\\n\\r\\n    error FarmFacet__NotTransferable();\\r\\n\\r\\n    error FarmFacet__InvalidDuration();\\r\\n\\r\\n    modifier setLastRewardBalance() {\\r\\n        _;\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        fs.lastRewardBalance = Scale(payable(fs.rewardToken)).baseBalanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* internal */\\r\\n    function updateRewardIndex(uint reward) internal {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n\\r\\n        if (fs.totalSupply != 0) {\\r\\n            Scale _scale = Scale(payable(fs.rewardToken));\\r\\n            uint256 currentRewardBalance = _scale.baseBalanceOf(address(this));\\r\\n\\r\\n            // if S is directly transferred to contract via ERC20.transfer()\\r\\n            if (reward == 0 && currentRewardBalance > fs.lastRewardBalance) {\\r\\n                reward = currentRewardBalance - fs.lastRewardBalance;\\r\\n            }\\r\\n\\r\\n            fs.rewardIndex = fs.rewardIndex + ((reward * MULTIPLIER) / fs.totalSupply);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateRewards(address account) internal view returns (uint) {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        uint shares = fs.balanceOf[account];\\r\\n        return\\r\\n            (shares * (fs.rewardIndex - fs.rewardIndexOf[account])) /\\r\\n            MULTIPLIER;\\r\\n    }\\r\\n\\r\\n    function _updateRewards(address account) internal {\\r\\n        updateRewardIndex(0);\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        fs.earned[account] = fs.earned[account] + _calculateRewards(account);\\r\\n\\r\\n        fs.rewardIndexOf[account] = fs.rewardIndex;\\r\\n    }\\r\\n\\r\\n    /* public */\\r\\n    function lock(\\r\\n        uint amount,\\r\\n        uint256 duration\\r\\n    ) external whenNotPaused nonReentrant setLastRewardBalance {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        uint maxLockDuration = fs.maxLockDuration;\\r\\n        uint minLockDuration = fs.minLockDuration;\\r\\n\\r\\n        if (duration < minLockDuration) revert FarmFacet__MinLockDuration();\\r\\n        if (duration > maxLockDuration) duration = maxLockDuration;\\r\\n\\r\\n        _updateRewards(msg.sender);\\r\\n\\r\\n        uint receiptAmount = duration >= maxLockDuration\\r\\n            ? amount\\r\\n            : _getReceiptAmount(amount, duration, minLockDuration, maxLockDuration);\\r\\n\\r\\n        // create lock\\r\\n        fs.currentLockingIndex = fs.currentLockingIndex + 1;\\r\\n        fs.lockingIndexToLock[fs.currentLockingIndex] = LibFarmStorage.Lock({\\r\\n            startTimestamp: block.timestamp,\\r\\n            amount: amount,\\r\\n            receiptAmount: receiptAmount,\\r\\n            duration: duration,\\r\\n            unlocked: 0,\\r\\n            locker: msg.sender\\r\\n        });\\r\\n\\r\\n        uint256[] storage userLockingIndexList = fs.addressToLockingIndexList[\\r\\n            msg.sender\\r\\n        ];\\r\\n        userLockingIndexList.push(fs.currentLockingIndex);\\r\\n\\r\\n        // mint receipt tokens\\r\\n        fs.balanceOf[msg.sender] = fs.balanceOf[msg.sender] + receiptAmount;\\r\\n        fs.totalSupply = fs.totalSupply + receiptAmount;\\r\\n\\r\\n        IERC20(fs.stakingToken).transferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function unlock(\\r\\n        uint _lockingIndex\\r\\n    ) external whenNotPaused nonReentrant setLastRewardBalance {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n\\r\\n        LibFarmStorage.Lock storage _lock = fs.lockingIndexToLock[\\r\\n            _lockingIndex\\r\\n        ];\\r\\n\\r\\n        if (_lock.locker != msg.sender) revert FarmFacet__NotLocker(); // prevent others from unlocking your lock\\r\\n        if (_lock.unlocked != 0) revert FarmFacet__AlreadyUnlocked(); // prevent double spending\\r\\n        if (_lock.startTimestamp + _lock.duration > block.timestamp)\\r\\n            revert FarmFacet__StillLocked(\\r\\n                _lock.startTimestamp + _lock.duration - block.timestamp\\r\\n            ); // ensure lock period has passed\\r\\n\\r\\n        _updateRewards(msg.sender);\\r\\n\\r\\n        _lock.unlocked = 1;\\r\\n\\r\\n        fs.balanceOf[msg.sender] = fs.balanceOf[msg.sender]- _lock.receiptAmount;\\r\\n        fs.totalSupply = fs.totalSupply - _lock.receiptAmount;\\r\\n\\r\\n        IERC20(fs.stakingToken).transfer(msg.sender, _lock.amount);\\r\\n    }\\r\\n\\r\\n    function vest() external whenNotPaused nonReentrant setLastRewardBalance {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n\\r\\n        _updateRewards(msg.sender);\\r\\n\\r\\n        if (fs.earned[msg.sender] <= fs.addressToTotalVesting[msg.sender])\\r\\n            revert FarmFacet__NotEnoughRewards();\\r\\n\\r\\n        // create vest\\r\\n        uint256 vestAmount = fs.earned[msg.sender] -\\r\\n            fs.addressToTotalVesting[msg.sender];\\r\\n        fs.currentVestIndex = fs.currentVestIndex + 1;\\r\\n        fs.vestIndexToVest[fs.currentVestIndex] = LibFarmStorage.Vest({\\r\\n            startTimestamp: block.timestamp,\\r\\n            amount: vestAmount,\\r\\n            vested: 0,\\r\\n            vester: msg.sender\\r\\n        });\\r\\n        fs.addressToTotalVesting[msg.sender] = fs.addressToTotalVesting[msg.sender] + vestAmount;\\r\\n\\r\\n        fs.addressToVestIndexList[msg.sender].push(fs.currentVestIndex);\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        uint256 _vestIndex\\r\\n    ) external whenNotPaused nonReentrant setLastRewardBalance returns (uint) {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        _updateRewards(msg.sender);\\r\\n\\r\\n        LibFarmStorage.Vest storage _vest = fs.vestIndexToVest[_vestIndex];\\r\\n\\r\\n        if (_vest.vested != 0) revert FarmFacet__AlreadyVested();\\r\\n        if (_vest.vester != msg.sender) revert FarmFacet__NotVester();\\r\\n\\r\\n        uint256 vestAmount = _vest.amount;\\r\\n\\r\\n        Scale _scale = Scale(payable(fs.rewardToken));\\r\\n        uint256 reward = _scale.baseToReflectionAmount(vestAmount);\\r\\n\\r\\n        // early vest penalty\\r\\n        uint256 toStaker;\\r\\n        uint256 toTreasury;\\r\\n        if (block.timestamp < _vest.startTimestamp + fs.vestDuration) {\\r\\n            uint256 fees = (reward * fs.earlyVestPenalty) / 10_000; // 50%\\r\\n            toStaker = fees * fs.penaltyToStaker / 10_000;\\r\\n            toTreasury = fees * (10_000 - fs.penaltyToStaker) / 10_000;\\r\\n            reward = reward - toStaker - toTreasury;\\r\\n        }\\r\\n\\r\\n        _vest.vested = 1;\\r\\n        fs.earned[msg.sender] = fs.earned[msg.sender] - vestAmount;\\r\\n        fs.addressToTotalVesting[msg.sender] = fs.addressToTotalVesting[msg.sender] - vestAmount;\\r\\n\\r\\n        // transfers\\r\\n        if (toTreasury != 0) {\\r\\n            // swap fees to ETH\\r\\n            IUniswapV2Router02 router = IUniswapV2Router02(fs.router);\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = fs.rewardToken;\\r\\n            path[1] = router.WETH();\\r\\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                toTreasury,\\r\\n                0,\\r\\n                path,\\r\\n                fs.treasury,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n        if (toStaker != 0) {\\r\\n            updateRewardIndex(_scale.reflectionToBaseAmount(toStaker)); // redistribute to stakers\\r\\n        }\\r\\n        _scale.transfer(msg.sender, reward);\\r\\n\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    /* internal */\\r\\n    function _getReceiptAmount(\\r\\n        uint amount,\\r\\n        uint _duration, \\r\\n        uint _minLockDuration, \\r\\n        uint _maxLockDuration\\r\\n    ) internal pure returns(uint) {\\r\\n\\r\\n        int duration = int(_duration);\\r\\n        int minLockDuration = int(_minLockDuration);\\r\\n        int maxLockDuration = int(_maxLockDuration);\\r\\n\\r\\n        int durationSpan = maxLockDuration - minLockDuration;\\r\\n        int linearFactor = 1_000 + (9_000 * (duration - minLockDuration) / durationSpan);\\r\\n        int limit = durationSpan / 172_800;\\r\\n        int curveFactor = 1_000 * limit;\\r\\n        for(\\r\\n            int i = -limit; \\r\\n            i < limit;\\r\\n        ) {\\r\\n            curveFactor = \\r\\n                curveFactor -\\r\\n                _abs(\\r\\n                    500 - \\r\\n                    (1_000 * (duration + (i * 86_400) - minLockDuration)) / durationSpan\\r\\n                );\\r\\n            unchecked { i = i + 1; }\\r\\n        }\\r\\n        return amount * uint(linearFactor + curveFactor / 10_000) / 10_000;\\r\\n    }\\r\\n\\r\\n    function _abs(int val) internal pure returns (int) {\\r\\n        return val > 0 ? val : -val;\\r\\n    }\\r\\n\\r\\n    /* admin */\\r\\n    function setLockDurations(\\r\\n        uint minLockDuration,\\r\\n        uint maxLockDuration,\\r\\n        uint earlyVestPenalty,\\r\\n        uint penaltyToStaker\\r\\n    ) external onlyOwner {\\r\\n        if (minLockDuration >= maxLockDuration)\\r\\n            revert FarmFacet__InvalidDuration();\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        fs.minLockDuration = minLockDuration;\\r\\n        fs.maxLockDuration = maxLockDuration;\\r\\n        fs.earlyVestPenalty = earlyVestPenalty; // in BP\\r\\n        fs.penaltyToStaker = penaltyToStaker; // in BP\\r\\n    }\\r\\n\\r\\n    function setVestDuration(uint256 vestDuration) external onlyOwner {\\r\\n        LibFarmStorage.layout().vestDuration = vestDuration;\\r\\n    }\\r\\n\\r\\n    function setTokens(\\r\\n        address _stakingToken,\\r\\n        address _rewardToken\\r\\n    ) external onlyOwner {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        fs.stakingToken = _stakingToken;\\r\\n        fs.rewardToken = _rewardToken;\\r\\n    }\\r\\n\\r\\n    function setTreasury(\\r\\n        address _treasury,\\r\\n        address _router\\r\\n    ) external onlyOwner {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        fs.treasury = _treasury;\\r\\n\\r\\n        // approve\\r\\n        Scale _scale = Scale(payable(fs.rewardToken));\\r\\n        _scale.approve(fs.router, 0);\\r\\n        fs.router = _router;\\r\\n        _scale.approve(fs.router, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function setPauseStatus(bool _paused) external onlyOwner {\\r\\n        if (_paused) {\\r\\n            _pause();\\r\\n        } else {\\r\\n            _unpause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* view */\\r\\n    function calculateRewardsEarned(\\r\\n        address account\\r\\n    ) external view returns (uint) {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n\\r\\n        if (fs.totalSupply != 0) {\\r\\n            // rewardIndex\\r\\n            Scale _scale = Scale(payable(fs.rewardToken));\\r\\n            uint256 _currentRewardBalance = _scale.baseBalanceOf(address(this));\\r\\n            uint256 _reward = _currentRewardBalance - fs.lastRewardBalance;\\r\\n            uint256 _rewardIndex = fs.rewardIndex +\\r\\n                (_reward * MULTIPLIER) /\\r\\n                fs.totalSupply;\\r\\n\\r\\n            uint256 _shares = fs.balanceOf[account];\\r\\n\\r\\n            return\\r\\n                _scale.baseToReflectionAmount(\\r\\n                    fs.earned[account] +\\r\\n                        ((_shares *\\r\\n                            (_rewardIndex - fs.rewardIndexOf[account])) /\\r\\n                            MULTIPLIER) -\\r\\n                        fs.addressToTotalVesting[account]\\r\\n                );\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getUserLockList(\\r\\n        address _address\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            LibFarmStorage.Lock[] memory _lockList,\\r\\n            uint256[] memory lockingIndexList\\r\\n        )\\r\\n    {\\r\\n        lockingIndexList = addressToLockingIndexList(_address);\\r\\n\\r\\n        _lockList = new LibFarmStorage.Lock[](lockingIndexList.length);\\r\\n        for (uint256 i; i < lockingIndexList.length; i++) {\\r\\n            _lockList[i] = lockingIndexToLock(lockingIndexList[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserVestList(\\r\\n        address _address\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            LibFarmStorage.Vest[] memory _vestList,\\r\\n            uint256[] memory vestIndexList\\r\\n        )\\r\\n    {\\r\\n        vestIndexList = addressToVestIndexList(_address);\\r\\n\\r\\n        _vestList = new LibFarmStorage.Vest[](vestIndexList.length);\\r\\n\\r\\n        for (uint256 i; i < vestIndexList.length; i++) {\\r\\n            _vestList[i] = vestIndexToVest(vestIndexList[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToLockingIndexList(\\r\\n        address _address\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        return LibFarmStorage.layout().addressToLockingIndexList[_address];\\r\\n    }\\r\\n\\r\\n    function lockingIndexToLock(\\r\\n        uint256 _lockingIndex\\r\\n    ) public view returns (LibFarmStorage.Lock memory) {\\r\\n        return LibFarmStorage.layout().lockingIndexToLock[_lockingIndex];\\r\\n    }\\r\\n\\r\\n    function addressToVestIndexList(\\r\\n        address _address\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        return LibFarmStorage.layout().addressToVestIndexList[_address];\\r\\n    }\\r\\n\\r\\n    function vestIndexToVest(\\r\\n        uint256 _vestIndex\\r\\n    ) public view returns (LibFarmStorage.Vest memory) {\\r\\n        return LibFarmStorage.layout().vestIndexToVest[_vestIndex];\\r\\n    }\\r\\n\\r\\n    function stakingToken() external view returns (address) {\\r\\n        return LibFarmStorage.layout().stakingToken;\\r\\n    }\\r\\n\\r\\n    function rewardToken() external view returns (address) {\\r\\n        return LibFarmStorage.layout().rewardToken;\\r\\n    }\\r\\n\\r\\n    function earned(address _address) external view returns (uint256) {\\r\\n        return LibFarmStorage.layout().earned[_address];\\r\\n    }\\r\\n\\r\\n    function rewardIndex() external view returns (uint256) {\\r\\n        return LibFarmStorage.layout().rewardIndex;\\r\\n    }\\r\\n\\r\\n    function getLockDuration() external view returns (uint256, uint256) {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        return (fs.minLockDuration, fs.maxLockDuration);\\r\\n    }\\r\\n\\r\\n    function getVestDuration() external view returns (uint256, uint256) {\\r\\n        LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n        return (fs.vestDuration, fs.earlyVestPenalty);\\r\\n    }\\r\\n\\r\\n    /* ERC20 functions */\\r\\n    function totalSupply() external view returns (uint) {\\r\\n        return LibFarmStorage.layout().totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint) {\\r\\n        return LibFarmStorage.layout().balanceOf[account];\\r\\n    }\\r\\n\\r\\n    /* some ERC20 functions are disabled for receipt tokens */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external pure returns (bool) {\\r\\n        // receipt tokens are not transferable at this moment\\r\\n        revert FarmFacet__NotTransferable();\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external pure returns (uint) {\\r\\n        // no allowance since not transferable\\r\\n        revert FarmFacet__NotTransferable();\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint amount\\r\\n    ) external pure returns (bool) {\\r\\n        // not approvable since not transferable\\r\\n        revert FarmFacet__NotTransferable();\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external pure returns (bool) {\\r\\n        // receipt tokens are not transferable at this moment\\r\\n        revert FarmFacet__NotTransferable();\\r\\n    }\\r\\n\\r\\n    // function _transfer(address from, address to, uint256 amount) internal {\\r\\n    //     require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n    //     require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n    //     LibFarmStorage.Layout storage fs = LibFarmStorage.layout();\\r\\n\\r\\n    //     uint256 fromBalance = fs.balanceOf[from];\\r\\n    //     require(\\r\\n    //         fromBalance >= amount,\\r\\n    //         \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n    //     );\\r\\n    //     unchecked {\\r\\n    //         fs.balanceOf[from] = fromBalance - amount;\\r\\n    //         // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n    //         // decrementing then incrementing.\\r\\n    //         fs.balanceOf[to] += amount;\\r\\n    //     }\\r\\n\\r\\n    //     emit Transfer(from, to, amount);\\r\\n    // }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/diamond/LibFarmStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary LibFarmStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256(\\\"Farm.contracts.storage.LibFarmStorage\\\");\\r\\n\\r\\n    struct Lock {\\r\\n        uint256 startTimestamp; // lock start time\\r\\n        uint256 amount; // amount of LP\\r\\n        uint256 receiptAmount; // amount of receipt tokens\\r\\n        uint256 duration; // lock duration\\r\\n        uint256 unlocked; // 0 false, 1 true\\r\\n        address locker; // address that locked LP\\r\\n    }\\r\\n\\r\\n    struct Vest {\\r\\n        uint256 startTimestamp; // reward vesting start time\\r\\n        uint256 amount; // amount of S rewards vested in base amount\\r\\n        uint256 vested; // 0 false, 1 true\\r\\n        address vester; // address that is vesting\\r\\n    }\\r\\n\\r\\n    struct Layout {\\r\\n        address stakingToken; // WETH-S-LP\\r\\n        address rewardToken; // S\\r\\n        address treasury; // treasury multisig or something\\r\\n        address router; // router for swapping to ETH\\r\\n        mapping(address => uint) balanceOf; // balance of receipt token\\r\\n        uint256 totalSupply; // totalSupply of receipt tokens\\r\\n        uint256 rewardIndex; // in base amount\\r\\n        mapping(address => uint) rewardIndexOf;\\r\\n        mapping(address => uint) earned;\\r\\n        uint256 lastRewardBalance; // rewardToken balance of farm in base amounts\\r\\n        /* lock */\\r\\n        uint256 currentLockingIndex; // current index and current total locks\\r\\n        uint256 minLockDuration; // currently 3 days\\r\\n        uint256 maxLockDuration; // currently 90 days\\r\\n        mapping(uint256 => Lock) lockingIndexToLock; // lockingIndex => Lock\\r\\n        mapping(address => uint256[]) addressToLockingIndexList; // address => lockingIndexList that is still locked\\r\\n        /* vest */\\r\\n        uint256 currentVestIndex;\\r\\n        uint256 earlyVestPenalty; // in BP currently 5_000\\r\\n        uint256 vestDuration; // currently 7 days\\r\\n        mapping(uint256 => Vest) vestIndexToVest; // vestIndex => Vest\\r\\n        mapping(address => uint256[]) addressToVestIndexList; // address => vestIndexList\\r\\n        mapping(address => uint256) addressToTotalVesting; // address => totalVesting\\r\\n        uint256 penaltyToStaker;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/tokens/Scale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\r\\n\\r\\nimport {OFTCoreUpgradeable} from \\\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/token/oft/OFTCoreUpgradeable.sol\\\";\\r\\nimport {IOFTUpgradeable} from \\\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/token/oft/IOFTUpgradeable.sol\\\";\\r\\nimport {ILayerZeroEndpoint} from \\\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\r\\n\\r\\nimport {SingleLinkedList, SingleLinkedListLib} from \\\"../utils/SingleLinkedList.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n    returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] memory path)\\r\\n        external\\r\\n        view\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] memory path)\\r\\n        external\\r\\n        view\\r\\n    returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\n// TODO\\r\\n/**\\r\\n * - share totalSubLP across all chains?\\r\\n * \\r\\n */\\r\\n\\r\\ncontract Scale is OFTCoreUpgradeable, IERC20Upgradeable {\\r\\n    using SingleLinkedListLib for SingleLinkedList;\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   events                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    error InvalidParameters();\\r\\n    error RemoteStateOutOfSync(uint remoteState);\\r\\n    error ERC20InsufficientAllowance(address, address, uint);\\r\\n    error InsuffcientBalance(uint);\\r\\n    error OFTCoreUnknownPacketType();\\r\\n    error MaxTransaction();\\r\\n    error MaxWallet();\\r\\n\\r\\n    event Reflect(uint256 baseAmountReflected, uint256 totalReflected);\\r\\n    event LaunchFee(address user, uint amount);\\r\\n\\r\\n    event TransmitToRemote(\\r\\n        uint16 indexed destinationChain,\\r\\n        uint totalReflections\\r\\n    );\\r\\n    event AnswerToRemote(uint16 indexed remoteChainId, uint answer);\\r\\n    event RequestRemoteState(uint16 indexed requestedChain);\\r\\n    event ReceiveRemoteState(\\r\\n        uint16 indexed sourceChain,\\r\\n        uint receivedRemoteState\\r\\n    );\\r\\n    event XReflect(uint256 baseAmountReflected, uint256 totalReflected);\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                  constants                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    string constant _name = \\\"ScaleX.gg | Scale\\\";\\r\\n    string constant _symbol = \\\"S\\\";\\r\\n\\r\\n    // @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    IUniswapV2Router02 public immutable UNISWAP_V2_ROUTER;\\r\\n\\r\\n    // --- BSC (Pancake)\\r\\n    // IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n    //     IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n\\r\\n    // --- Polygon (Quickswap)\\r\\n    // IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n    //     IUniswapV2Router02(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\\r\\n\\r\\n    // --- Fantom (Spookyswap)\\r\\n    // IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n    //     IUniswapV2Router02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\\r\\n\\r\\n    // --- Arbitrum (Camelot)\\r\\n    // IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n    //     IUniswapV2Router02(0xc873fEcbd354f5A56E00E710B90EF4201db2448d);\\r\\n\\r\\n    // --- Base (Alienbase)\\r\\n    // IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n    //     IUniswapV2Router02(0x8c1A3cF8f83074169FE5D7aD50B978e1cD6b37c7);\\r\\n\\r\\n    // --- Ethereum (Uniswap)\\r\\n    // IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n    //     IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    // supplies\\r\\n    uint256 constant TOTAL_SUPPLY = 1_000_000 ether;\\r\\n    uint256 constant PRESALE_SUPPLY = TOTAL_SUPPLY * 5_257 / MAX_BP;\\r\\n\\r\\n    uint256 constant LZ_GAS_USAGE_LIMIT = 1_000_000;\\r\\n    uint256 constant MAX_BP = 10_000;\\r\\n    \\r\\n    // fees\\r\\n    uint256 constant MAX_FEE = 1_500; /* 15% */\\r\\n    uint256 constant LAUNCH_FEE = 1_500; /* 15% */\\r\\n    uint256 constant LAUNCH_FEE_DURATION = 1 days;\\r\\n\\r\\n    // reflections\\r\\n    uint256 constant REFLECTION_GROWTH_FACTOR = 20;\\r\\n    uint256 constant MAX_BURN_REWARD_RATE = MAX_BP;\\r\\n    uint256 constant ASYMPTOTE = 2;\\r\\n\\r\\n    // TODO adjust\\r\\n    uint256 private constant MIN_MAX_WALLET = (TOTAL_SUPPLY * 160) / MAX_BP; // 1.6%\\r\\n    uint256 private constant MIN_MAX_TX = TOTAL_SUPPLY / 100;\\r\\n\\r\\n    uint16 public constant PT_TRANSMIT_AND_REQUEST = 1;\\r\\n    uint16 public constant PT_TRANSMIT = 2;\\r\\n    uint16 public constant PT_RESPONSE = 3;\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   states                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    struct Fee {\\r\\n        // not to be swapped to native\\r\\n        uint8 reflection;\\r\\n        // sent off\\r\\n        uint8 marketing;\\r\\n        // to be swapped to native\\r\\n        uint8 omnichain /* used to cover gas for transmitting reflections across chains */;\\r\\n        uint8 treasury;\\r\\n        uint8 referral /* 50% user buying free reduction & 50% to referrer */;\\r\\n        uint8 lp /* local LP + chain expansion */;\\r\\n        uint8 buyback;\\r\\n        uint8 burn;\\r\\n        uint128 total;\\r\\n    }\\r\\n\\r\\n    // L0 chain IDs sorted by avg gas costs in decreasing order\\r\\n    SingleLinkedList public chains;\\r\\n\\r\\n    uint16 private lzChainId;\\r\\n    bool private liquidityInitialised;\\r\\n\\r\\n    uint256 public feesEnabled;\\r\\n    uint256 public swapThreshold; // denominated as reflected amount\\r\\n    uint256 public totalReflected;\\r\\n\\r\\n    uint256 private launchTime;\\r\\n    uint256 private isInSwap;\\r\\n    uint256 private isLowGasChain;\\r\\n\\r\\n    // wallet limits\\r\\n    uint256 private limitsEnabled;\\r\\n    uint256 private maxWallet;\\r\\n    uint256 private maxTx;\\r\\n\\r\\n    // for auto lp burn\\r\\n    uint256 private lastBurnTime;\\r\\n    uint256 private burnRewardRate;\\r\\n    uint256 private lpBurnRatePerDay;\\r\\n    uint256 private burnTimeDiffCap;\\r\\n\\r\\n    address private _uniswapPair;\\r\\n\\r\\n    address private marketingFeeReceiver;\\r\\n    address private lpFeeReceiver;\\r\\n    address private buybackFeeReceiver;\\r\\n    address private treasuryReceiver;\\r\\n    address private lpBurnReceiver;\\r\\n\\r\\n    Fee public buyFee;\\r\\n    Fee public sellFee;\\r\\n\\r\\n    mapping(address => uint256) private isRegistredPool;\\r\\n    mapping(address => uint256) private _baseBalance;\\r\\n    mapping(address => uint256) private txLimitsExcluded;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    //@custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    constructor(address router) {\\r\\n        UNISWAP_V2_ROUTER = IUniswapV2Router02(router);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function initialize(\\r\\n        address _lzEndpoint,\\r\\n        address newMarketingFeeReceiver,\\r\\n        address newLPfeeReceiver,\\r\\n        address newBuyBackFeeReceiver,\\r\\n        address newTreasuryReceiver,\\r\\n        address newLPBurnReceiver\\r\\n    ) public payable initializer {\\r\\n\\r\\n        // initialise parents\\r\\n        __Ownable_init_unchained();\\r\\n        __LzAppUpgradeable_init_unchained(_lzEndpoint);\\r\\n\\r\\n        // set variables\\r\\n        swapThreshold = (TOTAL_SUPPLY * 20) / MAX_BP; /* 0.2% of total supply */\\r\\n\\r\\n        // limits\\r\\n        limitsEnabled = 1;\\r\\n        maxWallet = TOTAL_SUPPLY * 160 / MAX_BP;\\r\\n        maxTx = maxWallet;\\r\\n\\r\\n        // LZ setup\\r\\n        lzChainId = ILayerZeroEndpoint(_lzEndpoint).getChainId() + 100;\\r\\n        chains.addNode(lzChainId, 0);\\r\\n\\r\\n        marketingFeeReceiver = newMarketingFeeReceiver;\\r\\n        lpFeeReceiver = newLPfeeReceiver;\\r\\n        buybackFeeReceiver = newBuyBackFeeReceiver;\\r\\n        treasuryReceiver = newTreasuryReceiver;\\r\\n        lpBurnReceiver = newLPBurnReceiver;\\r\\n\\r\\n        // exclude project wallets from limits\\r\\n        txLimitsExcluded[address(this)] = 1;\\r\\n        txLimitsExcluded[treasuryReceiver] = 1;\\r\\n        txLimitsExcluded[marketingFeeReceiver] = 1;\\r\\n        txLimitsExcluded[lpFeeReceiver] = 1;\\r\\n        txLimitsExcluded[buybackFeeReceiver] = 1;\\r\\n        txLimitsExcluded[lpBurnReceiver] = 1;\\r\\n\\r\\n        buyFee = Fee({\\r\\n            reflection: 100,\\r\\n            omnichain: 100,\\r\\n            buyback: 0,\\r\\n            marketing: 100,\\r\\n            lp: 200,\\r\\n            treasury: 100,\\r\\n            referral: 0,\\r\\n            burn: 0,\\r\\n            total: 600\\r\\n        });\\r\\n        sellFee = Fee({\\r\\n            reflection: 100,\\r\\n            omnichain: 100,\\r\\n            buyback: 0,\\r\\n            marketing: 100,\\r\\n            lp: 200,\\r\\n            treasury: 100,\\r\\n            referral: 0,\\r\\n            burn: 0,\\r\\n            total: 600\\r\\n        });\\r\\n\\r\\n        // mint presale supply to treasury\\r\\n        if (block.chainid == 1) {\\r\\n            // only on Ethereum main net\\r\\n            _baseBalance[treasuryReceiver] = PRESALE_SUPPLY;\\r\\n            emit Transfer(address(0), treasuryReceiver, PRESALE_SUPPLY);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint sharesForChain) external payable onlyOwner {\\r\\n        if (liquidityInitialised) revert();\\r\\n        liquidityInitialised = true;\\r\\n\\r\\n        uint liquiditySupply = TOTAL_SUPPLY - PRESALE_SUPPLY;\\r\\n        uint tokensForLiquidity = (liquiditySupply * sharesForChain) / MAX_BP;\\r\\n\\r\\n        // fund address(this) with desired amount of liquidity tokens\\r\\n        _baseBalance[address(this)] = tokensForLiquidity;\\r\\n        emit Transfer(address(0), address(this), tokensForLiquidity);\\r\\n\\r\\n        // create uniswap pair\\r\\n        _uniswapPair = IUniswapV2Factory(UNISWAP_V2_ROUTER.factory())\\r\\n            .createPair(address(this), UNISWAP_V2_ROUTER.WETH());\\r\\n\\r\\n        // set unlimited allowance for uniswap router\\r\\n        _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = type(uint256)\\r\\n            .max;\\r\\n\\r\\n        // add desired amount of liquidity to pair\\r\\n        UNISWAP_V2_ROUTER.addLiquidityETH{value: msg.value}(\\r\\n            address(this), // address token,\\r\\n            tokensForLiquidity, // uint amountTokenDesired,\\r\\n            tokensForLiquidity, // uint amountTokenMin,\\r\\n            msg.value, // uint amountETHMin,\\r\\n            treasuryReceiver, // address to,\\r\\n            block.timestamp // uint deadline\\r\\n        );\\r\\n\\r\\n        // set fee variables\\r\\n        isRegistredPool[_uniswapPair] = 1;\\r\\n        feesEnabled = 1;\\r\\n        launchTime = block.timestamp;\\r\\n\\r\\n        // auto LP burn\\r\\n        lastBurnTime = block.timestamp;\\r\\n        // TODO set reward rate (burn rate is set manually as soon as we enabled the feature)\\r\\n        // lpBurnRatePerDay = 1_000; /* 1% */ \\r\\n        burnRewardRate = 10_000;\\r\\n        burnTimeDiffCap = 1 days;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                    ERC20                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveMax(address spender) external returns (bool) {\\r\\n        return approve(spender, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\r\\n            if (_allowances[sender][msg.sender] < amount)\\r\\n                revert ERC20InsufficientAllowance(\\r\\n                    sender,\\r\\n                    recipient,\\r\\n                    _allowances[sender][msg.sender]\\r\\n                );\\r\\n            _allowances[sender][msg.sender] =\\r\\n                _allowances[sender][msg.sender] -\\r\\n                amount;\\r\\n        }\\r\\n\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                     OFT                                    */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function token() external view override returns (address) {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(\\r\\n        address _from,\\r\\n        uint16 /* dst chain id */,\\r\\n        bytes memory /* toAddress */,\\r\\n        uint _amount\\r\\n    ) internal override returns (uint) {\\r\\n        if (_from != msg.sender) {\\r\\n            if (_allowances[_from][msg.sender] < _amount)\\r\\n                revert ERC20InsufficientAllowance(_from, msg.sender, _amount);\\r\\n\\r\\n            unchecked {\\r\\n                _allowances[_from][msg.sender] =\\r\\n                    _allowances[_from][msg.sender] -\\r\\n                    _amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_baseBalance[_from] < _amount) revert InsuffcientBalance(_amount);\\r\\n\\r\\n        unchecked {\\r\\n            // burn\\r\\n            _baseBalance[_from] = _baseBalance[_from] - _amount;\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    function _creditTo(\\r\\n        uint16 /* src chain id */,\\r\\n        address _toAddress,\\r\\n        uint _amount\\r\\n    ) internal override returns (uint) {\\r\\n        // mint\\r\\n        _baseBalance[_toAddress] = _baseBalance[_toAddress] + _amount;\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                    Views                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual override(OFTCoreUpgradeable) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IOFTUpgradeable).interfaceId ||\\r\\n            interfaceId == type(IERC20Upgradeable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external pure override returns (uint256) {\\r\\n        return TOTAL_SUPPLY;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function name() external pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() external pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return baseToReflectionAmount(_baseBalance[account]);\\r\\n    }\\r\\n\\r\\n    function baseBalanceOf(address account) public view returns(uint256) {\\r\\n        return _baseBalance[account];\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address holder,\\r\\n        address spender\\r\\n    ) external view override returns (uint256) {\\r\\n        return _allowances[holder][spender];\\r\\n    }\\r\\n\\r\\n    function baseToReflectionAmount(\\r\\n        uint256 baseAmount\\r\\n    ) public view returns (uint256) {\\r\\n        // ASYMPTOTE = N = post reflection supply approaches total supply * N\\r\\n        // REFLECTION_GROWTH_FACTOR = M = speed of reflections\\r\\n        // TODO form factor as constant\\r\\n        uint numerator = (ASYMPTOTE - 1) * ASYMPTOTE * TOTAL_SUPPLY * baseAmount;\\r\\n        uint denominator = (REFLECTION_GROWTH_FACTOR * totalReflected) + (ASYMPTOTE * TOTAL_SUPPLY);\\r\\n        return ASYMPTOTE * baseAmount - (numerator / denominator);\\r\\n    }\\r\\n\\r\\n    function reflectionToBaseAmount(\\r\\n        uint reflectionAmount\\r\\n    ) public view returns (uint) {\\r\\n        uint numerator = reflectionAmount * ((TOTAL_SUPPLY * ASYMPTOTE) + (REFLECTION_GROWTH_FACTOR * totalReflected));\\r\\n        uint denominator = ASYMPTOTE * (TOTAL_SUPPLY + (REFLECTION_GROWTH_FACTOR * totalReflected));\\r\\n        return numerator / denominator;\\r\\n    }\\r\\n\\r\\n    function circulatingSupply() public view returns (uint256) {\\r\\n        return baseToReflectionAmount(TOTAL_SUPPLY - balanceOf(DEAD) - balanceOf(ZERO) - totalReflected);\\r\\n    }\\r\\n\\r\\n    function circulatingBaseSupply() public view returns (uint256) {\\r\\n        return TOTAL_SUPPLY - balanceOf(DEAD) - balanceOf(ZERO) - totalReflected;\\r\\n    }\\r\\n\\r\\n    function getMaxWalletAndTx() external view returns (bool, uint, uint) {\\r\\n        return (\\r\\n            feesEnabled != 0,\\r\\n            baseToReflectionAmount(maxWallet),\\r\\n            baseToReflectionAmount(maxTx)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getLPBurnInfo() external view returns (uint, uint, uint, uint) {\\r\\n        return (lpBurnRatePerDay, lastBurnTime, burnRewardRate, burnTimeDiffCap);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                               Access restricted                            */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function clearStuckBalance() external payable onlyOwner {\\r\\n        (bool success, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function clearStuckToken() external payable onlyOwner {\\r\\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function setSwapBackSettings(\\r\\n        uint256 _enabled /* 0 = false, 1 = true */,\\r\\n        uint256 _amount\\r\\n    ) external payable onlyOwner {\\r\\n        feesEnabled = _enabled;\\r\\n        swapThreshold = _amount;\\r\\n    }\\r\\n\\r\\n    function changeFees(\\r\\n        Fee calldata _buyFee,\\r\\n        Fee calldata _sellFee\\r\\n    ) external payable onlyOwner {\\r\\n        // can cast all numbers, or just the first to save gas I think, not sure what the saving differences are like\\r\\n        uint128 totalBuyFee = uint128(_buyFee.reflection) +\\r\\n            _buyFee.marketing +\\r\\n            _buyFee.omnichain +\\r\\n            _buyFee.treasury +\\r\\n            _buyFee.referral +\\r\\n            _buyFee.lp +\\r\\n            _buyFee.buyback +\\r\\n            _buyFee.burn;\\r\\n\\r\\n        uint128 totalSellFee = uint128(_sellFee.reflection) +\\r\\n            _sellFee.marketing +\\r\\n            _sellFee.omnichain +\\r\\n            _sellFee.treasury +\\r\\n            _sellFee.referral +\\r\\n            _sellFee.lp +\\r\\n            _sellFee.buyback +\\r\\n            _sellFee.burn;\\r\\n\\r\\n        if (\\r\\n            totalBuyFee != _buyFee.total ||\\r\\n            totalSellFee != _sellFee.total ||\\r\\n            totalBuyFee > MAX_FEE ||\\r\\n            totalSellFee > MAX_FEE\\r\\n        ) revert InvalidParameters();\\r\\n\\r\\n        buyFee = _buyFee;\\r\\n        sellFee = _sellFee;\\r\\n    }\\r\\n\\r\\n    function setFeeReceivers(\\r\\n        address newMarketingFeeReceiver,\\r\\n        address newLPfeeReceiver,\\r\\n        address newBuybackFeeReceiver,\\r\\n        address newTreasuryReceiver,\\r\\n        address newLPBurnReceiver\\r\\n    ) external payable onlyOwner {\\r\\n        marketingFeeReceiver = newMarketingFeeReceiver;\\r\\n        lpFeeReceiver = newLPfeeReceiver;\\r\\n        buybackFeeReceiver = newBuybackFeeReceiver;\\r\\n        treasuryReceiver = newTreasuryReceiver;\\r\\n        lpBurnReceiver = newLPBurnReceiver;\\r\\n    }\\r\\n\\r\\n    function setTrustedRemoteWithInfo(\\r\\n        uint16 _remoteChainId,\\r\\n        bytes calldata _remoteAddress,\\r\\n        uint8 chainListPosition\\r\\n    ) external payable onlyOwner {\\r\\n        // we only add the chain to the list of lower gas chains if it actually is a lower gas chain\\r\\n        if (chainListPosition != 0) {\\r\\n            chains.addNode(_remoteChainId, chainListPosition);\\r\\n        }\\r\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(\\r\\n            _remoteAddress,\\r\\n            address(this)\\r\\n        );\\r\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\r\\n    }\\r\\n\\r\\n    function setRegistredPool(\\r\\n        address pool,\\r\\n        uint state\\r\\n    ) external payable onlyOwner {\\r\\n        isRegistredPool[pool] = state;\\r\\n    }\\r\\n\\r\\n    function removeChain(uint data) external payable onlyOwner {\\r\\n        chains.removeNode(data);\\r\\n    }\\r\\n\\r\\n    function setLPBurnData(\\r\\n        uint256 newBurnRewardRate,\\r\\n        uint256 newBurnTimeDiffCap,\\r\\n        address receiver\\r\\n    ) public payable onlyOwner {\\r\\n        if (newBurnRewardRate > MAX_BURN_REWARD_RATE)\\r\\n            revert InvalidParameters();\\r\\n        burnRewardRate = newBurnRewardRate;\\r\\n        lpBurnReceiver = receiver;\\r\\n        burnTimeDiffCap = newBurnTimeDiffCap;\\r\\n    }\\r\\n\\r\\n    function manuallyBurnLP() public payable onlyOwner {\\r\\n        _burnLP();\\r\\n    }\\r\\n\\r\\n    function toggleLimitsEnabled(bool target) public payable onlyOwner {\\r\\n        limitsEnabled = target ? 1 : 0;\\r\\n    }\\r\\n\\r\\n    function setExcludeFromLimits(\\r\\n        address toExclude,\\r\\n        bool targetValue\\r\\n    ) public payable onlyOwner {\\r\\n        txLimitsExcluded[toExclude] = targetValue ? 1 : 0;\\r\\n    }\\r\\n\\r\\n    function setMaxWalletTransction(\\r\\n        uint256 newMaxWallet,\\r\\n        uint256 newMaxTx\\r\\n    ) public payable onlyOwner {\\r\\n        require(newMaxWallet >= MIN_MAX_WALLET && newMaxTx >= MIN_MAX_TX);\\r\\n        maxWallet = newMaxWallet;\\r\\n        maxTx = newMaxTx;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   Internal                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function _transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        bool senderIsPool = isRegistredPool[sender] != 0; // = buy\\r\\n        bool recipientIsPool = isRegistredPool[recipient] != 0; // = sell\\r\\n\\r\\n        // take launch fee first\\r\\n        uint baseLaunchFeeAmount;\\r\\n\\r\\n        // take launch fee\\r\\n        if (\\r\\n            feesEnabled != 0 &&\\r\\n            !senderIsPool &&\\r\\n            isInSwap == 0 &&\\r\\n            block.timestamp - launchTime < LAUNCH_FEE_DURATION\\r\\n        ) {\\r\\n            isInSwap = 1;\\r\\n\\r\\n            // swap back\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = address(this);\\r\\n            path[1] = UNISWAP_V2_ROUTER.WETH();\\r\\n\\r\\n            uint reflectedLaunchFeeAmount = (amount *\\r\\n                LAUNCH_FEE *\\r\\n                (LAUNCH_FEE_DURATION - (block.timestamp - launchTime))) /\\r\\n                LAUNCH_FEE_DURATION /\\r\\n                MAX_BP;\\r\\n\\r\\n            baseLaunchFeeAmount = reflectionToBaseAmount(\\r\\n                reflectedLaunchFeeAmount\\r\\n            );\\r\\n\\r\\n            _baseBalance[address(this)] =\\r\\n                _baseBalance[address(this)] +\\r\\n                baseLaunchFeeAmount;\\r\\n            emit Transfer(sender, address(this), reflectedLaunchFeeAmount);\\r\\n            emit LaunchFee(sender, reflectedLaunchFeeAmount);\\r\\n\\r\\n            UNISWAP_V2_ROUTER\\r\\n                .swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                    reflectedLaunchFeeAmount,\\r\\n                    0,\\r\\n                    path,\\r\\n                    treasuryReceiver,\\r\\n                    block.timestamp\\r\\n                );\\r\\n\\r\\n            isInSwap = 0;\\r\\n        }\\r\\n\\r\\n        // Swap own token balance against pool if conditions are fulfilled\\r\\n        // this has to be done before calculating baseAmount since it shifts\\r\\n        // the balance in the liquidity pool, thus altering the result\\r\\n        {\\r\\n            if (\\r\\n                isInSwap == 0 &&\\r\\n                // this only swaps if it's not a buy, amplifying impacts of sells and\\r\\n                // leaving buys untouched but also shifting gas costs of this to sellers only\\r\\n                isRegistredPool[msg.sender] == 0 &&\\r\\n                feesEnabled != 0 &&\\r\\n                _baseBalance[address(this)] >= swapThreshold\\r\\n            ) {\\r\\n                isInSwap = 1;\\r\\n\\r\\n                Fee memory memorySellFee = sellFee;\\r\\n\\r\\n                uint256 stack_SwapThreshold = swapThreshold;\\r\\n                uint256 amountToBurn = (stack_SwapThreshold *\\r\\n                    memorySellFee.burn) / memorySellFee.total;\\r\\n                uint256 amountToSwap = stack_SwapThreshold - amountToBurn;\\r\\n\\r\\n                // burn, no further checks needed here\\r\\n                uint256 baseAmountToBurn = reflectionToBaseAmount(amountToBurn);\\r\\n                _baseBalance[address(this)] =\\r\\n                    _baseBalance[address(this)] -\\r\\n                    baseAmountToBurn;\\r\\n                _baseBalance[DEAD] = _baseBalance[DEAD] + baseAmountToBurn;\\r\\n\\r\\n                // swap non-burned tokens to ETH\\r\\n                address[] memory path = new address[](2);\\r\\n                path[0] = address(this);\\r\\n                path[1] = UNISWAP_V2_ROUTER.WETH();\\r\\n\\r\\n                UNISWAP_V2_ROUTER\\r\\n                    .swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                        amountToSwap,\\r\\n                        0,\\r\\n                        path,\\r\\n                        address(this),\\r\\n                        block.timestamp\\r\\n                    );\\r\\n\\r\\n                uint256 amountETH = address(this).balance;\\r\\n\\r\\n                // share of fees that should be swapped to ETH\\r\\n                uint256 totalSwapShare = memorySellFee.total -\\r\\n                    memorySellFee.reflection -\\r\\n                    memorySellFee.burn;\\r\\n\\r\\n                /*\\r\\n                 * Send proceeds to respective wallets, except for omnichain which remains in contract.\\r\\n                 *\\r\\n                 * We don't need to use return values of low level calls here since we can just manually withdraw\\r\\n                 * funds in case of failure; receiver wallets are owner supplied though and should only be EOAs\\r\\n                 * anyway\\r\\n                 */\\r\\n\\r\\n                // marketing\\r\\n                payable(marketingFeeReceiver).call{\\r\\n                    value: (amountETH * memorySellFee.marketing) /\\r\\n                        totalSwapShare\\r\\n                }(\\\"\\\");\\r\\n                // LP\\r\\n                payable(lpFeeReceiver).call{\\r\\n                    value: (amountETH * memorySellFee.lp) / totalSwapShare\\r\\n                }(\\\"\\\");\\r\\n                // buyback\\r\\n                payable(buybackFeeReceiver).call{\\r\\n                    value: (amountETH * memorySellFee.buyback) / totalSwapShare\\r\\n                }(\\\"\\\");\\r\\n                // treasury\\r\\n                payable(treasuryReceiver).call{\\r\\n                    value: (amountETH * memorySellFee.treasury) / totalSwapShare\\r\\n                }(\\\"\\\");\\r\\n\\r\\n                isInSwap = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint maxRequiredBaseInput;\\r\\n        if(\\r\\n            recipientIsPool &&\\r\\n            lpBurnRatePerDay != 0 &&\\r\\n            block.timestamp > lastBurnTime\\r\\n        ) {\\r\\n            uint totalSellFee = sellFee.total; // gas savings\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = address(this);\\r\\n            path[1] = UNISWAP_V2_ROUTER.WETH();\\r\\n            uint outputIfSwappedBeforeBurn = UNISWAP_V2_ROUTER.getAmountsOut(\\r\\n                feesEnabled != 0\\r\\n                    ? amount * (MAX_BP - totalSellFee) / MAX_BP\\r\\n                    : amount, \\r\\n                path\\r\\n            )[1];\\r\\n\\r\\n            _burnLP();\\r\\n            \\r\\n            // required input to receive correct output after paying fees\\r\\n            maxRequiredBaseInput = reflectionToBaseAmount(\\r\\n                UNISWAP_V2_ROUTER.getAmountsIn(\\r\\n                    outputIfSwappedBeforeBurn, path\\r\\n                )[0] * (\\r\\n                    feesEnabled != 0 \\r\\n                        ? MAX_BP / (MAX_BP - totalSellFee)\\r\\n                        : 1\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 baseAmount = reflectionToBaseAmount(amount);\\r\\n\\r\\n        if (_baseBalance[sender] < baseAmount)\\r\\n            revert InsuffcientBalance(_baseBalance[sender]);\\r\\n\\r\\n        /** \\r\\n         * If we burn before selling, the pool receives eg 10 tokens on \\r\\n         * 80 (+12.5%) instead of 10 tokens on 100 (+10%) and therefore \\r\\n         * creates a higher price to sell at.\\r\\n         * \\r\\n         * We therefore tax the sold amount so that the received ETH amount\\r\\n         * is the same as if the burn didn't happen beforehand, essentially\\r\\n         * making the burn happen 'after' the swap.\\r\\n         */\\r\\n        uint256 postBurnFeeBaseAmount = baseAmount;\\r\\n        if(maxRequiredBaseInput != 0 && maxRequiredBaseInput < baseAmount) {\\r\\n            postBurnFeeBaseAmount = maxRequiredBaseInput;\\r\\n\\r\\n            _baseBalance[address(this)] = _baseBalance[address(this)] + (baseAmount - maxRequiredBaseInput);\\r\\n            emit Transfer(sender, address(this), baseAmount - maxRequiredBaseInput);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * @dev this modifies LP balance and thus also reflection amount that we\\r\\n         * previously calculated, however the actually transferred amount will\\r\\n         * still be based on the conversion from reflected amount to base amount\\r\\n         * at the time of the transaction initiation and will NOT account for\\r\\n         * changes made here\\r\\n         */\\r\\n        uint256 baseAmountReceived = feesEnabled != 0 && isInSwap == 0\\r\\n            ? _performReflectionAndTakeFees(postBurnFeeBaseAmount, sender, senderIsPool)\\r\\n            : postBurnFeeBaseAmount;\\r\\n\\r\\n        if(limitsEnabled != 0) {\\r\\n            if (\\r\\n                !senderIsPool &&\\r\\n                feesEnabled != 0 &&\\r\\n                txLimitsExcluded[sender] == 0 &&\\r\\n                baseAmount > maxTx\\r\\n            ) revert MaxTransaction();\\r\\n\\r\\n            if (\\r\\n                feesEnabled != 0 &&\\r\\n                !recipientIsPool &&\\r\\n                txLimitsExcluded[recipient] == 0 &&\\r\\n                _baseBalance[recipient] + baseAmountReceived > maxWallet\\r\\n            ) revert MaxWallet();\\r\\n        }\\r\\n\\r\\n        _baseBalance[sender] = _baseBalance[sender] - baseAmount;\\r\\n        _baseBalance[recipient] = _baseBalance[recipient] + baseAmountReceived;\\r\\n\\r\\n        emit Transfer(sender, recipient, baseToReflectionAmount(baseAmountReceived));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _burnLP() internal {\\r\\n\\r\\n        uint mem_lastBurnTime = lastBurnTime;\\r\\n        uint256 pairBalance = _baseBalance[_uniswapPair]; // gas savings\\r\\n        uint256 timeDelta = block.timestamp <= mem_lastBurnTime + burnTimeDiffCap\\r\\n            ? (block.timestamp - mem_lastBurnTime)\\r\\n            : 1 days;\\r\\n        uint256 tokensToRemove = \\r\\n            pairBalance * \\r\\n            timeDelta * \\r\\n            lpBurnRatePerDay / \\r\\n            (1 days * MAX_BP);\\r\\n        uint256 tokensToReward = tokensToRemove * burnRewardRate / MAX_BP;\\r\\n        uint256 tokensToBurn = tokensToRemove - tokensToReward;\\r\\n\\r\\n        lastBurnTime = block.timestamp;\\r\\n\\r\\n        _baseBalance[_uniswapPair] = pairBalance - tokensToRemove;\\r\\n\\r\\n        if(tokensToBurn != 0) {\\r\\n            emit Transfer( _uniswapPair, address(0), baseToReflectionAmount(tokensToBurn));\\r\\n        }\\r\\n\\r\\n        if(tokensToReward != 0) {\\r\\n            _baseBalance[lpBurnReceiver] = _baseBalance[lpBurnReceiver] + tokensToReward;\\r\\n            emit Transfer(_uniswapPair, lpBurnReceiver, baseToReflectionAmount(tokensToReward));\\r\\n        }\\r\\n\\r\\n        // Update the uniswap pair's reserves\\r\\n        IUniswapV2Pair(_uniswapPair).sync();\\r\\n    }\\r\\n\\r\\n    function _performReflectionAndTakeFees(\\r\\n        uint256 baseAmount,\\r\\n        address sender,\\r\\n        bool buying\\r\\n    ) internal returns (uint256) {\\r\\n        Fee memory memoryBuyFee = buyFee;\\r\\n        Fee memory memorySellFee = sellFee;\\r\\n\\r\\n        // amount of fees in base amount (non-reflection adjusted)\\r\\n        uint256 baseFeeAmount = buying\\r\\n            ? (baseAmount * memoryBuyFee.total) / MAX_BP\\r\\n            : (baseAmount * memorySellFee.total) / MAX_BP;\\r\\n\\r\\n        // reflect\\r\\n        uint256 baseAmountReflected = buying\\r\\n            ? (baseAmount * memoryBuyFee.reflection) / MAX_BP\\r\\n            : (baseAmount * memorySellFee.reflection) / MAX_BP;\\r\\n\\r\\n        /**\\r\\n         * Omnichain\\r\\n         *\\r\\n         * - integrate local delta into state\\r\\n         * - send local delta to lower gas chains\\r\\n         * - request local state from lowest gas chain\\r\\n         * - set local state to minimum (=most recent) of local state & remote state\\r\\n         */\\r\\n        totalReflected = totalReflected + baseAmountReflected;\\r\\n        emit Reflect(baseAmountReflected, totalReflected);\\r\\n        _transmitReflectionToOtherChainsAndFetchState();\\r\\n\\r\\n        // add entire non-reflected amount to contract balance for later swapping\\r\\n        uint256 baseBalanceToContract = baseFeeAmount - baseAmountReflected;\\r\\n        if (baseBalanceToContract != 0) {\\r\\n            _baseBalance[address(this)] =\\r\\n                _baseBalance[address(this)] +\\r\\n                baseBalanceToContract;\\r\\n            emit Transfer(\\r\\n                sender,\\r\\n                address(this),\\r\\n                baseToReflectionAmount(baseBalanceToContract)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return baseAmount - baseFeeAmount; // - launchFeeAmount;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                     L0                                     */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    /**\\r\\n     * @notice Multicast reflection state change to all chains that are tendencially\\r\\n     * cheaper than the local chain & fetch reflection state of cheapest chain to\\r\\n     * integrate into local state\\r\\n     */\\r\\n    function _transmitReflectionToOtherChainsAndFetchState() internal {\\r\\n        if (chains.length < 2) return;\\r\\n\\r\\n        uint256[] memory lowerGasChains = chains.getBeheadedList();\\r\\n        uint256 lowerGasChainsLen = lowerGasChains.length; // gas savings\\r\\n        uint mem_totalReflected = totalReflected; // gas savings\\r\\n\\r\\n        bytes memory lzPayload = abi.encode(PT_TRANSMIT, mem_totalReflected);\\r\\n\\r\\n        for (uint iterator; iterator < lowerGasChainsLen - 1; ) {\\r\\n            (uint gasRequired /* zroFee */, ) = lzEndpoint.estimateFees(\\r\\n                uint16(lowerGasChains[iterator]),\\r\\n                address(this),\\r\\n                lzPayload,\\r\\n                false,\\r\\n                abi.encodePacked(uint16(1), LZ_GAS_USAGE_LIMIT)\\r\\n            );\\r\\n\\r\\n            if (address(this).balance > gasRequired) {\\r\\n                _lzSend(\\r\\n                    // cheapest chain = destination chainId\\r\\n                    uint16(lowerGasChains[iterator]),\\r\\n                    // abi.encode()'ed bytes\\r\\n                    lzPayload,\\r\\n                    // (msg.sender will be this contract) refund address\\r\\n                    // (LayerZero will refund any extra gas back to caller of send()\\r\\n                    payable(this),\\r\\n                    // future param, unused for this example\\r\\n                    address(0x0),\\r\\n                    // v1 adapterParams, specify custom destination gas qty\\r\\n                    abi.encodePacked(uint16(1), LZ_GAS_USAGE_LIMIT),\\r\\n                    address(this).balance\\r\\n                );\\r\\n                emit TransmitToRemote(\\r\\n                    uint16(lowerGasChains[iterator]),\\r\\n                    mem_totalReflected\\r\\n                );\\r\\n                unchecked {\\r\\n                    iterator = iterator + 1;\\r\\n                }\\r\\n            } else {\\r\\n                // abort transmissions if gas is insufficient\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 lowestGasChainId = lowerGasChains[lowerGasChainsLen - 1];\\r\\n        if (lzChainId != lowestGasChainId) {\\r\\n            lzPayload = abi.encode(PT_TRANSMIT_AND_REQUEST, mem_totalReflected);\\r\\n\\r\\n            (uint gasRequired /* zroFee */, ) = lzEndpoint.estimateFees(\\r\\n                uint16(lowestGasChainId),\\r\\n                address(this),\\r\\n                lzPayload,\\r\\n                false,\\r\\n                abi.encodePacked(uint16(1), LZ_GAS_USAGE_LIMIT)\\r\\n            );\\r\\n\\r\\n            if (address(this).balance > gasRequired) {\\r\\n                // fetch the state from the lowest gas chain\\r\\n                _lzSend(\\r\\n                    // destination chainId\\r\\n                    uint16(lowestGasChainId),\\r\\n                    // abi.encoded bytes\\r\\n                    lzPayload,\\r\\n                    // refund address\\r\\n                    payable(this),\\r\\n                    // future param, unused for this example\\r\\n                    address(0x0),\\r\\n                    // v1 adapterParams, specify custom destination gas qty\\r\\n                    abi.encodePacked(uint16(1), LZ_GAS_USAGE_LIMIT),\\r\\n                    address(this).balance\\r\\n                );\\r\\n                emit TransmitToRemote(\\r\\n                    uint16(lowestGasChainId),\\r\\n                    mem_totalReflected\\r\\n                );\\r\\n                emit RequestRemoteState(uint16(lowestGasChainId));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) internal virtual override {\\r\\n        uint16 packetType;\\r\\n        assembly {\\r\\n            packetType := mload(add(_payload, 32))\\r\\n        }\\r\\n\\r\\n        if (packetType == PT_SEND) {\\r\\n            // token transfers between chains\\r\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        } else if (packetType == PT_TRANSMIT_AND_REQUEST) {\\r\\n            _receiveReflectionAndSendLocalState(\\r\\n                _srcChainId,\\r\\n                _payload,\\r\\n                true /* is request? */\\r\\n            );\\r\\n        } else if (packetType == PT_TRANSMIT) {\\r\\n            _receiveReflectionAndSendLocalState(\\r\\n                _srcChainId,\\r\\n                _payload,\\r\\n                false /* is request? */\\r\\n            );\\r\\n        } else if (packetType == PT_RESPONSE) {\\r\\n            _receiveRemoteReflectionState(_payload);\\r\\n        } else {\\r\\n            revert OFTCoreUnknownPacketType();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _receiveReflectionAndSendLocalState(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _payload,\\r\\n        bool isReq\\r\\n    ) internal {\\r\\n        (, /* packet type */ uint remoteState) = abi.decode(\\r\\n            _payload,\\r\\n            (uint16, uint)\\r\\n        );\\r\\n\\r\\n        // update local reflection data\\r\\n        if (remoteState > totalReflected) {\\r\\n            uint diff = remoteState - totalReflected;\\r\\n            totalReflected = remoteState;\\r\\n            emit XReflect(diff, totalReflected);\\r\\n            emit ReceiveRemoteState(_srcChainId, remoteState);\\r\\n        }\\r\\n\\r\\n        // transmission comes from higher gas chain that wants to know local state\\r\\n        if (isReq) {\\r\\n            // pack payload AFTER integrating remote delta\\r\\n            bytes memory lzPayload = abi.encode(PT_RESPONSE, totalReflected);\\r\\n\\r\\n            // send response to origin chain\\r\\n            _lzSend(\\r\\n                _srcChainId, // destination chainId\\r\\n                lzPayload, // abi.encode()'ed bytes\\r\\n                payable(this), // (msg.sender will be this contract) refund address\\r\\n                address(0x0), // future param, unused for this example\\r\\n                abi.encodePacked(uint16(1), LZ_GAS_USAGE_LIMIT), // v1 adapterParams, specify custom destination gas qty\\r\\n                address(this).balance\\r\\n            );\\r\\n            emit AnswerToRemote(_srcChainId, totalReflected);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice receive response to a request made to the lowest gas chain\\r\\n     * @param _payload contains (uint16 packetType, uint256 remoteReflectionState)\\r\\n     */\\r\\n    function _receiveRemoteReflectionState(bytes memory _payload) internal {\\r\\n        (, /* packet type */ uint remoteReflectionState) = abi.decode(\\r\\n            _payload,\\r\\n            (uint16, uint)\\r\\n        );\\r\\n\\r\\n        // if remote that is less recent than local state, we just ignore instead\\r\\n        // of throwing so L0 does not have to store failed message\\r\\n        if (remoteReflectionState > totalReflected) {\\r\\n            // integrate remote changes if they are more recent than local state (=smaller value)\\r\\n            uint reflectionStateDiff = remoteReflectionState - totalReflected;\\r\\n            if (reflectionStateDiff != 0) {\\r\\n                totalReflected = remoteReflectionState;\\r\\n                emit XReflect(reflectionStateDiff, remoteReflectionState);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/SingleLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nstruct ListElement {\\r\\n    uint data;\\r\\n    bytes32 pointer;\\r\\n}\\r\\n\\r\\nstruct SingleLinkedList {\\r\\n    uint length;\\r\\n    ListElement head;\\r\\n    mapping(bytes32 => ListElement) elements;\\r\\n}\\r\\n\\r\\nlibrary SingleLinkedListLib {\\r\\n\\r\\n    error CannotReplaceHead();\\r\\n\\r\\n    bytes32 constant ZERO_POINTER = keccak256(abi.encode(0));\\r\\n\\r\\n    function addNode(SingleLinkedList storage self, uint data, uint position) internal {\\r\\n\\r\\n        if(position == 0 && self.length != 0) revert CannotReplaceHead();\\r\\n        \\r\\n        ListElement memory element = ListElement({data: data, pointer: ZERO_POINTER});\\r\\n        bytes32 elementHash = keccak256(abi.encode(data));\\r\\n\\r\\n        if(self.length == 0)\\r\\n        {\\r\\n            self.head = element;\\r\\n            self.elements[elementHash] = element;\\r\\n        }\\r\\n        else if(position >= self.length)\\r\\n        {\\r\\n            // find tail = element with a zero pointer\\r\\n            ListElement storage toCheck = self.head;\\r\\n            while(toCheck.pointer != ZERO_POINTER)\\r\\n            {\\r\\n                toCheck = self.elements[toCheck.pointer];\\r\\n            }\\r\\n            toCheck.pointer = elementHash; /* pointer to new element */\\r\\n            self.elements[elementHash] = element;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            ListElement storage toCheck = self.head;\\r\\n            uint iterator;\\r\\n            while(iterator < position)\\r\\n            {\\r\\n                toCheck = self.elements[toCheck.pointer];\\r\\n                unchecked { iterator = iterator + 1; }\\r\\n            }\\r\\n            // after loop executed, iterator is position\\r\\n            // toCheck is predecessor\\r\\n            bytes32 oldPointer = toCheck.pointer;\\r\\n            toCheck.pointer = elementHash;\\r\\n            element.pointer = oldPointer;\\r\\n            self.elements[elementHash] = element;\\r\\n        }\\r\\n        self.length = self.length + 1;\\r\\n    }\\r\\n\\r\\n    function removeNode(SingleLinkedList storage self, uint data) internal {\\r\\n        // TODO\\r\\n    }\\r\\n\\r\\n    function getBeheadedList(SingleLinkedList storage self) internal view returns(uint[] memory) {\\r\\n        uint toReturnLen = self.length-1;\\r\\n        uint[] memory beheadedList = new uint[](self.length-1);\\r\\n        ListElement memory e = self.head;\\r\\n        for(uint iterator; iterator < toReturnLen;)\\r\\n        {   \\r\\n            e = self.elements[e.pointer];\\r\\n            beheadedList[iterator] = e.data;\\r\\n            unchecked { iterator = iterator + 1; }\\r\\n        }\\r\\n        return beheadedList;\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"FarmFacet__AlreadyUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FarmFacet__AlreadyVested\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FarmFacet__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FarmFacet__MinLockDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FarmFacet__NotEnoughRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FarmFacet__NotLocker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FarmFacet__NotTransferable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FarmFacet__NotVester\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeLeft\",\"type\":\"uint256\"}],\"name\":\"FarmFacet__StillLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Pausable__NotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Pausable__Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuard__ReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressToLockingIndexList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressToVestIndexList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserLockList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"internalType\":\"struct LibFarmStorage.Lock[]\",\"name\":\"_lockList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockingIndexList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserVestList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"}],\"internalType\":\"struct LibFarmStorage.Vest[]\",\"name\":\"_vestList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestIndexList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockingIndex\",\"type\":\"uint256\"}],\"name\":\"lockingIndexToLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receiptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"internalType\":\"struct LibFarmStorage.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyVestPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyToStaker\",\"type\":\"uint256\"}],\"name\":\"setLockDurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestDuration\",\"type\":\"uint256\"}],\"name\":\"setVestDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockingIndex\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestIndex\",\"type\":\"uint256\"}],\"name\":\"vestIndexToVest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"}],\"internalType\":\"struct LibFarmStorage.Vest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FarmFacet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}