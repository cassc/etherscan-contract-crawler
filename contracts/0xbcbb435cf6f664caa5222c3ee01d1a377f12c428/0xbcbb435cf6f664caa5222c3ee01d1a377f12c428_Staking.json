{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/demo/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IOutputReceiver.sol\\\";\\nimport \\\"../interfaces/IRevest.sol\\\";\\nimport \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport \\\"../interfaces/IRewardsHandler.sol\\\";\\nimport \\\"../interfaces/IFNFTHandler.sol\\\";\\nimport \\\"../interfaces/IAddressLock.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\ninterface IOldStaking {\\n    function config(uint fnftId) external view returns (uint allocPoints, uint timePeriod);\\n    function manualMapConfig(uint[] memory fnftIds, uint[] memory timePeriod) external;\\n    function customMetadataUrl() external view returns (string memory);\\n}\\n\\ncontract Staking is Ownable, IOutputReceiver, ERC165, IAddressLock {\\n    using SafeERC20 for IERC20;\\n\\n    address private revestAddress;\\n    address public lpAddress;\\n    address public rewardsHandlerAddress;\\n    address public addressRegistry;\\n\\n    //TODO: ADD SETTERS FOR THESE\\n    address public oldStakingContract;\\n    uint public previousStakingIDCutoff;\\n\\n    uint private constant ONE_DAY = 86400;\\n\\n    uint private constant WINDOW_ONE = ONE_DAY;\\n    uint private constant WINDOW_THREE = ONE_DAY*5;\\n    uint private constant WINDOW_SIX = ONE_DAY*9;\\n    uint private constant WINDOW_TWELVE = ONE_DAY*14;\\n    uint private constant MAX_INT = 2**256 - 1;\\n\\n    address internal immutable WETH;\\n\\n    uint[4] internal interestRates = [4, 13, 27, 56];\\n    string public customMetadataUrl = \\\"https://revest.mypinata.cloud/ipfs/Qmb6ADSCJt1xQ99ACGn2SQfZgGiGNP6qvgont1gAQguaoT\\\";\\n    string public addressMetadataUrl = \\\"https://revest.mypinata.cloud/ipfs/QmY3KUBToJBthPLvN1Knd7Y51Zxx7FenFhXYV8tPEMVAP3\\\";\\n\\n    event StakedRevest(uint indexed timePeriod, bool indexed isBasic, uint indexed amount, uint fnftId);\\n\\n    struct StakingData {\\n        uint timePeriod;\\n        uint dateLockedFrom;\\n    }\\n\\n    // fnftId -> timePeriods\\n    mapping(uint => StakingData) public stakingConfigs;\\n\\n    constructor(\\n        address revestAddress_,\\n        address lpAddress_,\\n        address rewardsHandlerAddress_,\\n        address addressRegistry_,\\n        address wrappedEth_\\n    ) {\\n        revestAddress = revestAddress_;\\n        lpAddress = lpAddress_;\\n        addressRegistry = addressRegistry_;\\n        rewardsHandlerAddress = rewardsHandlerAddress_;\\n        WETH = wrappedEth_;\\n        previousStakingIDCutoff = IFNFTHandler(IAddressRegistry(addressRegistry).getRevestFNFT()).getNextId() - 1;\\n\\n        IERC20(lpAddress).approve(address(getRevest()), MAX_INT);\\n        IERC20(revestAddress).approve(address(getRevest()), MAX_INT);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override (ERC165, IERC165) returns (bool) {\\n        return (\\n            interfaceId == type(IOutputReceiver).interfaceId\\n            || interfaceId == type(IAddressLock).interfaceId\\n            || super.supportsInterface(interfaceId)\\n        );\\n    }\\n\\n    function stakeBasicTokens(uint amount, uint monthsMaturity) public returns (uint) {\\n        require(monthsMaturity == 1 || monthsMaturity == 3 || monthsMaturity == 6 || monthsMaturity == 12, 'E055');\\n        IERC20(revestAddress).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        IRevest.FNFTConfig memory fnftConfig;\\n        fnftConfig.asset = revestAddress;\\n        fnftConfig.depositAmount = amount;\\n        fnftConfig.isMulti = true;\\n\\n        fnftConfig.pipeToContract = address(this);\\n\\n        address[] memory recipients = new address[](1);\\n        recipients[0] = _msgSender();\\n\\n        uint[] memory quantities = new uint[](1);\\n        // FNFT quantity will always be singular\\n        quantities[0] = 1;\\n\\n        uint fnftId = getRevest().mintAddressLock(address(this), '', recipients, quantities, fnftConfig);\\n\\n        uint interestRate = getInterestRate(monthsMaturity);\\n        uint allocPoint = amount * interestRate;\\n\\n        StakingData memory cfg = StakingData(monthsMaturity, block.timestamp);\\n        stakingConfigs[fnftId] = cfg;\\n\\n        IRewardsHandler(rewardsHandlerAddress).updateBasicShares(fnftId, allocPoint);\\n\\n        emit StakedRevest(monthsMaturity, true, amount, fnftId);\\n        return fnftId;\\n    }\\n\\n    function stakeLPTokens(uint amount, uint monthsMaturity) public returns (uint) {\\n        require(monthsMaturity == 1 || monthsMaturity == 3 || monthsMaturity == 6 || monthsMaturity == 12, 'E055');\\n        IERC20(lpAddress).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        IRevest.FNFTConfig memory fnftConfig;\\n        fnftConfig.asset = lpAddress;\\n        fnftConfig.depositAmount = amount;\\n        fnftConfig.isMulti = true;\\n\\n        fnftConfig.pipeToContract = address(this);\\n\\n        address[] memory recipients = new address[](1);\\n        recipients[0] = _msgSender();\\n\\n        uint[] memory quantities = new uint[](1);\\n        quantities[0] = 1;\\n\\n        uint fnftId = getRevest().mintAddressLock(address(this), '', recipients, quantities, fnftConfig);\\n\\n        uint interestRate = getInterestRate(monthsMaturity);\\n        uint allocPoint = amount * interestRate;\\n\\n        StakingData memory cfg = StakingData(monthsMaturity, block.timestamp);\\n        stakingConfigs[fnftId] = cfg;\\n\\n        IRewardsHandler(rewardsHandlerAddress).updateLPShares(fnftId, allocPoint);\\n        emit StakedRevest(monthsMaturity, false, amount, fnftId);\\n        return fnftId;\\n    }\\n\\n    function depositAdditionalToStake(uint fnftId, uint amount) public {\\n        //Prevent unauthorized access\\n        require(IFNFTHandler(getRegistry().getRevestFNFT()).getBalance(_msgSender(), fnftId) == 1, 'E061');\\n        require(fnftId > previousStakingIDCutoff, 'E080');\\n        uint time = stakingConfigs[fnftId].timePeriod;\\n        require(time > 0, 'E078');\\n        address asset = ITokenVault(getRegistry().getTokenVault()).getFNFT(fnftId).asset;\\n        require(asset == revestAddress || asset == lpAddress, 'E079');\\n\\n        //Pull tokens from caller\\n        IERC20(asset).safeTransferFrom(_msgSender(), address(this), amount);\\n        //Claim rewards owed\\n        IRewardsHandler(rewardsHandlerAddress).claimRewards(fnftId, _msgSender());\\n        //Write new, extended unlock date\\n        stakingConfigs[fnftId].dateLockedFrom = block.timestamp;\\n        //Retreive current allocation points \u2013 WETH and RVST implicitly have identical alloc points\\n        uint oldAllocPoints = IRewardsHandler(rewardsHandlerAddress).getAllocPoint(fnftId, revestAddress, asset == revestAddress);\\n        uint allocPoints = amount * getInterestRate(time) + oldAllocPoints;\\n        if(asset == revestAddress) {\\n            IRewardsHandler(rewardsHandlerAddress).updateBasicShares(fnftId, allocPoints);\\n        } else if (asset == lpAddress) {\\n            IRewardsHandler(rewardsHandlerAddress).updateLPShares(fnftId, allocPoints);\\n        }\\n        //Deposit additional tokens\\n        getRevest().depositAdditionalToFNFT(fnftId, amount, 1);\\n    }\\n\\n    function getInterestRate(uint months) public view returns (uint) {\\n        if (months <= 1) {\\n            return interestRates[0];\\n        } else if (months <= 3) {\\n            return interestRates[1];\\n        } else if (months <= 6) {\\n            return interestRates[2];\\n        } else {\\n            return interestRates[3];\\n        }\\n    }\\n\\n    function receiveRevestOutput(\\n        uint fnftId,\\n        address asset,\\n        address payable owner,\\n        uint quantity\\n    ) external override {\\n        address vault = getRegistry().getTokenVault();\\n        require(_msgSender() == vault, \\\"E016\\\");\\n\\n        uint totalQuantity = quantity * ITokenVault(vault).getFNFT(fnftId).depositAmount;\\n        IRewardsHandler(rewardsHandlerAddress).claimRewards(fnftId, owner);\\n        if (asset == revestAddress) {\\n            IRewardsHandler(rewardsHandlerAddress).updateBasicShares(fnftId, 0);\\n        } else if (asset == lpAddress) {\\n            IRewardsHandler(rewardsHandlerAddress).updateLPShares(fnftId, 0);\\n        } else {\\n            require(false, \\\"E072\\\");\\n        }\\n        IERC20(asset).safeTransfer(owner, totalQuantity);\\n    }\\n\\n    function claimRewards(uint fnftId) external {\\n        // Check to make sure user owns the fnftId\\n        require(IFNFTHandler(getRegistry().getRevestFNFT()).getBalance(_msgSender(), fnftId) == 1, 'E061');\\n        // Receive rewards\\n        IRewardsHandler(rewardsHandlerAddress).claimRewards(fnftId, _msgSender());\\n    }\\n\\n    function updateLock(uint fnftId, uint, bytes memory) external override {\\n        require(IFNFTHandler(getRegistry().getRevestFNFT()).getBalance(_msgSender(), fnftId) == 1, 'E061');\\n        // Receive rewards\\n        IRewardsHandler(rewardsHandlerAddress).claimRewards(fnftId, _msgSender());\\n    }\\n\\n    function needsUpdate() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function setCustomMetadata(string memory _customMetadataUrl) external onlyOwner {\\n        customMetadataUrl = _customMetadataUrl;\\n    }\\n\\n    function getCustomMetadata(uint fnftId) external view override returns (string memory) {\\n        if(fnftId <= previousStakingIDCutoff) {\\n            return IOldStaking(oldStakingContract).customMetadataUrl();\\n        } else {\\n            return customMetadataUrl;\\n        }\\n    }\\n\\n    function getOutputDisplayValues(uint fnftId) external view override returns (bytes memory) {\\n        bool isRevestToken;\\n        {\\n            // Will be zero if this is an LP stake\\n            uint revestTokenAlloc = IRewardsHandler(rewardsHandlerAddress).getAllocPoint(fnftId, revestAddress, true);\\n            uint wethTokenAlloc = IRewardsHandler(rewardsHandlerAddress).getAllocPoint(fnftId, WETH, true);\\n            isRevestToken = revestTokenAlloc > 0 || wethTokenAlloc > 0;\\n        }\\n        uint revestRewards = IRewardsHandler(rewardsHandlerAddress).getRewards(fnftId, revestAddress);\\n        uint wethRewards = IRewardsHandler(rewardsHandlerAddress).getRewards(fnftId, WETH);\\n        uint timePeriod = stakingConfigs[fnftId].timePeriod;\\n        if(fnftId <= previousStakingIDCutoff) {\\n            (,timePeriod) = IOldStaking(oldStakingContract).config(fnftId);\\n            return abi.encode(revestRewards, wethRewards, timePeriod, isRevestToken ? revestAddress : lpAddress);\\n        }\\n        //This parameter has been modified for new stakes\\n        return abi.encode(revestRewards, wethRewards, timePeriod, stakingConfigs[fnftId].dateLockedFrom, isRevestToken ? revestAddress : lpAddress, stakingConfigs[fnftId].dateLockedFrom);\\n    }\\n\\n    function setLPAddress(address lpAddress_) external onlyOwner {\\n        lpAddress = lpAddress_;\\n    }\\n\\n    function setAddressRegistry(address addressRegistry_) external override onlyOwner {\\n        addressRegistry = addressRegistry_;\\n    }\\n\\n    function getAddressRegistry() external view override returns (address) {\\n        return addressRegistry;\\n    }\\n\\n    function getRevest() private view returns (IRevest) {\\n        return IRevest(getRegistry().getRevest());\\n    }\\n\\n    function getRegistry() public view returns (IAddressRegistry) {\\n        return IAddressRegistry(addressRegistry);\\n    }\\n\\n    function getValue(uint fnftId) external view override returns (uint) {\\n        uint revestStake = IRewardsHandler(rewardsHandlerAddress).getRewards(fnftId, revestAddress);\\n        return revestStake > 0 ? revestStake : IRewardsHandler(rewardsHandlerAddress).getRewards(fnftId, WETH);\\n    }\\n\\n    function getAsset(uint fnftId) external view override returns (address) {\\n        uint revestStake = IRewardsHandler(rewardsHandlerAddress).getRewards(fnftId, revestAddress);\\n        return revestStake > 0 ? revestAddress : WETH;\\n    }\\n\\n    function setMetadata(string memory _addressMetadataUrl) external onlyOwner {\\n        addressMetadataUrl = _addressMetadataUrl;\\n    }\\n\\n    function setRewardsHandler(address _handler) external onlyOwner {\\n        rewardsHandlerAddress = _handler;\\n    }\\n\\n    function getMetadata() external view override returns (string memory) {\\n        return addressMetadataUrl;\\n    }\\n\\n    function getDisplayValues(uint fnftId, uint) external view override returns (bytes memory) {\\n        uint allocPoints;\\n        {\\n            uint revestTokenAlloc = IRewardsHandler(rewardsHandlerAddress).getAllocPoint(fnftId, revestAddress, true);\\n            uint lpTokenAlloc = IRewardsHandler(rewardsHandlerAddress).getAllocPoint(fnftId, revestAddress, false);\\n            allocPoints = revestTokenAlloc > 0 ? revestTokenAlloc : lpTokenAlloc;\\n        }\\n        uint timePeriod = stakingConfigs[fnftId].timePeriod;\\n        if(fnftId <= previousStakingIDCutoff) {\\n            (allocPoints, timePeriod) = IOldStaking(oldStakingContract).config(fnftId);\\n        }\\n        return abi.encode(allocPoints, timePeriod);\\n    }\\n\\n    function createLock(uint, uint, bytes memory) external pure override {\\n        return;\\n    }\\n\\n    function isUnlockable(uint fnftId, uint) external view override returns (bool) {\\n        uint timePeriod = stakingConfigs[fnftId].timePeriod;\\n        uint depositTime;\\n        if(fnftId <= previousStakingIDCutoff) {\\n            (, timePeriod) = IOldStaking(oldStakingContract).config(fnftId);\\n            depositTime =  ILockManager(getRegistry().getLockManager()).fnftIdToLock(fnftId).creationTime;\\n        } else {\\n            depositTime = stakingConfigs[fnftId].dateLockedFrom;\\n        }\\n        uint window = getWindow(timePeriod);\\n        bool mature = block.timestamp - depositTime > window;\\n        bool window_open = (block.timestamp - depositTime) % (timePeriod * 30 * ONE_DAY) < window;\\n        return mature && window_open;\\n    }\\n\\n    function getWindow(uint timePeriod) private pure returns (uint window) {\\n        if(timePeriod == 1) {\\n            window = WINDOW_ONE;\\n        }\\n        if(timePeriod == 3) {\\n            window = WINDOW_THREE;\\n        }\\n        if(timePeriod == 6) {\\n            window = WINDOW_SIX;\\n        }\\n        if(timePeriod == 12) {\\n            window = WINDOW_TWELVE;\\n        }\\n    }\\n\\n    // Admin functions\\n\\n    function manualMapConfig(\\n        uint[] memory fnftIds,\\n        uint[] memory timePeriod,\\n        uint [] memory lockedFrom\\n    ) external onlyOwner {\\n        for(uint i = 0; i < fnftIds.length; i++) {\\n            stakingConfigs[fnftIds[i]].timePeriod = timePeriod[i];\\n            stakingConfigs[fnftIds[i]].dateLockedFrom = lockedFrom[i];\\n        }\\n    }\\n\\n    function updateInterestRates(uint[4] memory newRates) external onlyOwner {\\n        interestRates = newRates;\\n    }\\n\\n    function setCutoff(uint cutoff) external onlyOwner {\\n        previousStakingIDCutoff = cutoff;\\n    }\\n\\n    function setOldStaking(address stake) external onlyOwner {\\n        oldStakingContract = stake;\\n    }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOutputReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRegistryProvider.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n */\\ninterface IOutputReceiver is IRegistryProvider, IERC165 {\\n\\n    function receiveRevestOutput(\\n        uint fnftId,\\n        address asset,\\n        address payable owner,\\n        uint quantity\\n    ) external;\\n\\n    function getCustomMetadata(uint fnftId) external view returns (string memory);\\n\\n    function getValue(uint fnftId) external view returns (uint);\\n\\n    function getAsset(uint fnftId) external view returns (address);\\n\\n    function getOutputDisplayValues(uint fnftId) external view returns (bytes memory);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRevest {\\n    event FNFTTimeLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint endTime,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTValueLockMinted(\\n        address indexed primaryAsset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        address compareTo,\\n        address oracleDispatch,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTAddressLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        address trigger,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTWithdrawn(\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint indexed quantity\\n    );\\n\\n    event FNFTSplit(\\n        address indexed from,\\n        uint[] indexed newFNFTId,\\n        uint[] indexed proportions,\\n        uint quantity\\n    );\\n\\n    event FNFTUnlocked(\\n        address indexed from,\\n        uint indexed fnftId\\n    );\\n\\n    event FNFTMaturityExtended(\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint indexed newExtendedTime\\n    );\\n\\n    event FNFTAddionalDeposited(\\n        address indexed from,\\n        uint indexed newFNFTId,\\n        uint indexed quantity,\\n        uint amount\\n    );\\n\\n    struct FNFTConfig {\\n        address asset; // The token being stored\\n        address pipeToContract; // Indicates if FNFT will pipe to another contract\\n        uint depositAmount; // How many tokens\\n        uint depositMul; // Deposit multiplier\\n        uint split; // Number of splits remaining\\n        uint depositStopTime; //\\n        bool maturityExtension; // Maturity extensions remaining\\n        bool isMulti; //\\n        bool nontransferrable; // False by default (transferrable) //\\n    }\\n\\n    // Refers to the global balance for an ERC20, encompassing possibly many FNFTs\\n    struct TokenTracker {\\n        uint lastBalance;\\n        uint lastMul;\\n    }\\n\\n    enum LockType {\\n        DoesNotExist,\\n        TimeLock,\\n        ValueLock,\\n        AddressLock\\n    }\\n\\n    struct LockParam {\\n        address addressLock;\\n        uint timeLockExpiry;\\n        LockType lockType;\\n        ValueLock valueLock;\\n    }\\n\\n    struct Lock {\\n        address addressLock;\\n        LockType lockType;\\n        ValueLock valueLock;\\n        uint timeLockExpiry;\\n        uint creationTime;\\n        bool unlocked;\\n    }\\n\\n    struct ValueLock {\\n        address asset;\\n        address compareTo;\\n        address oracle;\\n        uint unlockValue;\\n        bool unlockRisingEdge;\\n    }\\n\\n    function mintTimeLock(\\n        uint endTime,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function mintValueLock(\\n        address primaryAsset,\\n        address compareTo,\\n        uint unlockValue,\\n        bool unlockRisingEdge,\\n        address oracleDispatch,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function mintAddressLock(\\n        address trigger,\\n        bytes memory arguments,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function withdrawFNFT(uint tokenUID, uint quantity) external;\\n\\n    function unlockFNFT(uint tokenUID) external;\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external returns (uint[] memory newFNFTIds);\\n\\n    function depositAdditionalToFNFT(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external returns (uint);\\n\\n    function setFlatWeiFee(uint wethFee) external;\\n\\n    function setERC20Fee(uint erc20) external;\\n\\n    function getFlatWeiFee() external returns (uint);\\n\\n    function getERC20Fee() external returns (uint);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n * @dev\\n *\\n */\\ninterface IAddressRegistry {\\n\\n    function initialize(\\n        address lock_manager_,\\n        address liquidity_,\\n        address revest_token_,\\n        address token_vault_,\\n        address revest_,\\n        address fnft_,\\n        address metadata_,\\n        address admin_,\\n        address rewards_\\n    ) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function setAdmin(address admin) external;\\n\\n    function getLockManager() external view returns (address);\\n\\n    function setLockManager(address manager) external;\\n\\n    function getTokenVault() external view returns (address);\\n\\n    function setTokenVault(address vault) external;\\n\\n    function getRevestFNFT() external view returns (address);\\n\\n    function setRevestFNFT(address fnft) external;\\n\\n    function getMetadataHandler() external view returns (address);\\n\\n    function setMetadataHandler(address metadata) external;\\n\\n    function getRevest() external view returns (address);\\n\\n    function setRevest(address revest) external;\\n\\n    function getDEX(uint index) external view returns (address);\\n\\n    function setDex(address dex) external;\\n\\n    function getRevestToken() external view returns (address);\\n\\n    function setRevestToken(address token) external;\\n\\n    function getRewardsHandler() external view returns(address);\\n\\n    function setRewardsHandler(address esc) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLPs() external view returns (address);\\n\\n    function setLPs(address liquidToken) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRewardsHandler {\\n\\n    struct UserBalance {\\n        uint allocPoint; // Allocation points\\n        uint lastMul;\\n    }\\n\\n    function receiveFee(address token, uint amount) external;\\n\\n    function updateLPShares(uint fnftId, uint newShares) external;\\n\\n    function updateBasicShares(uint fnftId, uint newShares) external;\\n\\n    function getAllocPoint(uint fnftId, address token, bool isBasic) external view returns (uint);\\n\\n    function claimRewards(uint fnftId, address caller) external returns (uint);\\n\\n    function setStakingContract(address stake) external;\\n\\n    function getRewards(uint fnftId, address token) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFNFTHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\n\\ninterface IFNFTHandler  {\\n    function mint(address account, uint id, uint amount, bytes memory data) external;\\n\\n    function mintBatchRec(address[] memory recipients, uint[] memory quantities, uint id, uint newSupply, bytes memory data) external;\\n\\n    function mintBatch(address to, uint[] memory ids, uint[] memory amounts, bytes memory data) external;\\n\\n    function setURI(string memory newuri) external;\\n\\n    function burn(address account, uint id, uint amount) external;\\n\\n    function burnBatch(address account, uint[] memory ids, uint[] memory amounts) external;\\n\\n    function getBalance(address tokenHolder, uint id) external view returns (uint);\\n\\n    function getSupply(uint fnftId) external view returns (uint);\\n\\n    function getNextId() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRegistryProvider.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n * @dev Address locks MUST be non-upgradeable to be considered for trusted status\\n * @author Revest\\n */\\ninterface IAddressLock is IRegistryProvider, IERC165{\\n\\n    /// Creates a lock to the specified lockID\\n    /// @param fnftId the fnftId to map this lock to. Not recommended for typical locks, as it will break on splitting\\n    /// @param lockId the lockId to map this lock to. Recommended uint for storing references to lock configurations\\n    /// @param arguments an abi.encode() bytes array. Allows frontend to encode and pass in an arbitrary set of parameters\\n    /// @dev creates a lock for the specified lockId. Will be called during the creation process for address locks when the address\\n    ///      of a contract implementing this interface is passed in as the \\\"trigger\\\" address for minting an address lock. The bytes\\n    ///      representing any parameters this lock requires are passed through to this method, where abi.decode must be call on them\\n    function createLock(uint fnftId, uint lockId, bytes memory arguments) external;\\n\\n    /// Updates a lock at the specified lockId\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @param arguments an abi.encode() bytes array. Allows frontend to encode and pass in an arbitrary set of parameters\\n    /// @dev updates a lock for the specified lockId. Will be called by the frontend from the information section if an update is requested\\n    ///      can further accept and decode parameters to use in modifying the lock's config or triggering other actions\\n    ///      such as triggering an on-chain oracle to update\\n    function updateLock(uint fnftId, uint lockId, bytes memory arguments) external;\\n\\n    /// Whether or not the lock can be unlocked\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @dev this method is called during the unlocking and withdrawal processes by the Revest contract - it is also used by the frontend\\n    ///      if this method is returning true and someone attempts to unlock or withdraw from an FNFT attached to the requested lock, the request will succeed\\n    /// @return whether or not this lock may be unlocked\\n    function isUnlockable(uint fnftId, uint lockId) external view returns (bool);\\n\\n    /// Provides an encoded bytes arary that represents values this lock wants to display on the info screen\\n    /// Info to decode these values is provided in the metadata file\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @dev used by the frontend to fetch on-chain data on the state of any given lock\\n    /// @return a bytes array that represents the result of calling abi.encode on values which the developer wants to appear on the frontend\\n    function getDisplayValues(uint fnftId, uint lockId) external view returns (bytes memory);\\n\\n    /// Maps to a URL, typically IPFS-based, that contains information on how to encode and decode paramters sent to and from this lock\\n    /// Please see additional documentation for JSON config info\\n    /// @dev this method will be called by the frontend only but is crucial to properly implement for proper minting and information workflows\\n    /// @return a URL to the JSON file containing this lock's metadata schema\\n    function getMetadata() external view returns (string memory);\\n\\n    /// Whether or not this lock will need updates and should display the option for them\\n    /// @dev this will be called by the frontend to determine if update inputs and buttons should be displayed\\n    /// @return whether or not the locks created by this contract will need updates\\n    function needsUpdate() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistryProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILockManager.sol\\\";\\nimport \\\"../interfaces/ITokenVault.sol\\\";\\nimport \\\"../lib/uniswap/IUniswapV2Factory.sol\\\";\\n\\ninterface IRegistryProvider {\\n    function setAddressRegistry(address revest) external;\\n\\n    function getAddressRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRevest.sol\\\";\\n\\ninterface ILockManager {\\n\\n    function createLock(uint fnftId, IRevest.LockParam memory lock) external returns (uint);\\n\\n    function getLock(uint lockId) external view returns (IRevest.Lock memory);\\n\\n    function fnftIdToLockId(uint fnftId) external view returns (uint);\\n\\n    function fnftIdToLock(uint fnftId) external view returns (IRevest.Lock memory);\\n\\n    function pointFNFTToLock(uint fnftId, uint lockId) external;\\n\\n    function lockTypes(uint tokenId) external view returns (IRevest.LockType);\\n\\n    function unlockFNFT(uint fnftId, address sender) external returns (bool);\\n\\n    function getLockMaturity(uint fnftId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRevest.sol\\\";\\n\\ninterface ITokenVault {\\n\\n    function createFNFT(\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig,\\n        uint quantity,\\n        address from\\n    ) external;\\n\\n    function withdrawToken(\\n        uint fnftId,\\n        uint quantity,\\n        address user\\n    ) external;\\n\\n    function depositToken(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external;\\n\\n    function cloneFNFTConfig(IRevest.FNFTConfig memory old) external returns (IRevest.FNFTConfig memory);\\n\\n    function mapFNFTToToken(\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external;\\n\\n    function handleMultipleDeposits(\\n        uint fnftId,\\n        uint newFNFTId,\\n        uint amount\\n    ) external;\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory newFNFTIds,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external;\\n\\n    function getFNFT(uint fnftId) external view returns (IRevest.FNFTConfig memory);\\n    function getFNFTCurrentValue(uint fnftId) external view returns (uint);\\n    function getNontransferable(uint fnftId) external view returns (bool);\\n    function getSplitsRemaining(uint fnftId) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revestAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsHandlerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedEth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isBasic\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"StakedRevest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressMetadataUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customMetadataUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAdditionalToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"getCustomMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getDisplayValues\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"months\",\"type\":\"uint256\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"getOutputDisplayValues\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUnlockable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fnftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timePeriod\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockedFrom\",\"type\":\"uint256[]\"}],\"name\":\"manualMapConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needsUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousStakingIDCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"receiveRevestOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressRegistry_\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_customMetadataUrl\",\"type\":\"string\"}],\"name\":\"setCustomMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cutoff\",\"type\":\"uint256\"}],\"name\":\"setCutoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress_\",\"type\":\"address\"}],\"name\":\"setLPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_addressMetadataUrl\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"}],\"name\":\"setOldStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"}],\"name\":\"setRewardsHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthsMaturity\",\"type\":\"uint256\"}],\"name\":\"stakeBasicTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthsMaturity\",\"type\":\"uint256\"}],\"name\":\"stakeLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateLockedFrom\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"newRates\",\"type\":\"uint256[4]\"}],\"name\":\"updateInterestRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"updateLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000120a3879da835a5af037bb2d1456bebd6b54d4ba0000000000000000000000006490828bd87be38279a36f029f3b9af8b4e14b49000000000000000000000000a4e7f2a1edb5ad886baa09fb258f8aca7c934ba6000000000000000000000000d721a90dd7e010c8c5e022cc0100c55ac78e0fc4000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}