{"SourceCode": "contract Ambi {\r\n    function getNodeAddress(bytes32 _name) constant returns (address);\r\n    function addNode(bytes32 _name, address _addr) external returns (bool);\r\n    function hasRelation(bytes32 _from, bytes32 _role, address _to) constant returns (bool);\r\n}\r\n\r\ncontract PotRewards {\r\n    function transfer(address _from, address _to, uint _amount);\r\n}\r\n\r\ncontract PosRewards {\r\n    function transfer(address _from, address _to);\r\n}\r\n\r\ncontract ElcoinInterface {\r\n    function rewardTo(address _to, uint _amount) returns (bool);\r\n}\r\n\r\ncontract EtherTreasuryInterface {\r\n    function withdraw(address _to, uint _value) returns(bool);\r\n}\r\n\r\ncontract MetaCoinInterface {\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approved(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tevent Unapproved(address indexed _owner, address indexed _spender);\r\n\r\n\tfunction totalSupply() constant returns (uint256 supply){}\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance){}\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success){}\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success){}\r\n\tfunction approve(address _spender, uint256 _value) returns (bool success){}\r\n\tfunction unapprove(address _spender) returns (bool success){}\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining){}\r\n}\r\n\r\ncontract ElcoinDb {\r\n    function getBalance(address addr) constant returns(uint balance);\r\n    function deposit(address addr, uint amount, bytes32 hash, uint time) returns (bool res);\r\n    function withdraw(address addr, uint amount, bytes32 hash, uint time) returns (bool res);\r\n}\r\n\r\ncontract AmbiEnabled {\r\n    Ambi ambiC;\r\n    bytes32 public name;\r\n\r\n    modifier checkAccess(bytes32 _role) {\r\n        if(address(ambiC) != 0x0 && ambiC.hasRelation(name, _role, msg.sender)){\r\n            _\r\n        }\r\n    }\r\n    \r\n    function getAddress(bytes32 _name) constant returns (address) {\r\n        return ambiC.getNodeAddress(_name);\r\n    }\r\n\r\n    function setAmbiAddress(address _ambi, bytes32 _name) returns (bool){\r\n        if(address(ambiC) != 0x0){\r\n            return false;\r\n        }\r\n        Ambi ambiContract = Ambi(_ambi);\r\n        if(ambiContract.getNodeAddress(_name)!=address(this)) {\r\n            bool isNode = ambiContract.addNode(_name, address(this));\r\n            if (!isNode){\r\n                return false;\r\n            }   \r\n        }\r\n        name = _name;\r\n        ambiC = ambiContract;\r\n        return true;\r\n    }\r\n\r\n    function remove() checkAccess(\"owner\") {\r\n        suicide(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Elcoin is AmbiEnabled, MetaCoinInterface {\r\n\r\n    event Error(uint8 indexed code, address indexed origin, address indexed sender);\r\n\r\n    mapping (address => uint) public recoveredIndex;\r\n    address[] public recovered;\r\n\r\n    uint public totalSupply;\r\n    uint public absMinFee; // set up in 1/1000000 of Elcoin\r\n    uint public feePercent; // set up in 1/100 of percent, 10 is 0.1%\r\n    uint public absMaxFee; // set up in 1/1000000 of Elcoin\r\n    address public feeAddr;\r\n\r\n    function Elcoin() {\r\n        recovered.length++;\r\n        feeAddr = tx.origin;\r\n        _setFeeStructure(0, 0, 1);\r\n    }\r\n\r\n    function _db() internal constant returns (ElcoinDb) {\r\n        return ElcoinDb(getAddress(\"elcoinDb\"));\r\n    }\r\n\r\n    function _setFeeStructure(uint _absMinFee, uint _feePercent, uint _absMaxFee) internal returns (bool) {\r\n        if(_absMinFee < 0 || _feePercent < 0 || _feePercent > 10000 || _absMaxFee < 0 || _absMaxFee < _absMinFee) {\r\n            Error(1, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n        absMinFee = _absMinFee;\r\n        feePercent = _feePercent;\r\n        absMaxFee = _absMaxFee;\r\n        return true;\r\n    }\r\n\r\n    function _rawTransfer(ElcoinDb _db, address _from, address _to, uint _value) internal {\r\n        _db.withdraw(_from, _value, 0, 0);\r\n        uint fee = calculateFee(_value);\r\n        uint net = _value - fee;\r\n        _db.deposit(_to, net, 0, 0);\r\n\r\n        Transfer(_from, _to, _value);\r\n        if (fee > 0) {\r\n            _db.deposit(feeAddr, fee, 0, 0);\r\n        }\r\n    }\r\n\r\n    function _transfer(ElcoinDb _db, address _from, address _to, uint _value) internal returns (bool) {\r\n        if (_value < absMinFee) {\r\n            return false;\r\n        }\r\n        if (_from == _to) {\r\n            return false;\r\n        }\r\n        uint balance = _db.getBalance(_from);\r\n\r\n        if (balance < _value) {\r\n            return false;\r\n        }\r\n        _rawTransfer(_db, _from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferWithReward(ElcoinDb _db, address _from, address _to, uint _value) internal returns (bool) {\r\n        if (!_transfer(_db, _from, _to, _value)) {\r\n            Error(2, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n\r\n        address pos = getAddress(\"elcoinPoS\");\r\n        address pot = getAddress(\"elcoinPoT\");\r\n        if (pos != 0x0) {\r\n            PosRewards(pos).transfer(_from, _to);\r\n        }\r\n        if (pot != 0x0) {\r\n            PotRewards(pot).transfer(_from, _to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _recoverAccount(ElcoinDb _db, address _old, address _new) internal returns (bool) {\r\n        uint pos =  recovered.length++;\r\n        recovered[pos] = _old;\r\n        recoveredIndex[_old] = pos;\r\n        uint balance = _db.getBalance(_old);\r\n        var rv = _db.withdraw(_old, balance, 0, 0);\r\n        if (!rv) {\r\n            Error(5, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n        _db.deposit(_new, balance, 0, 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    modifier notRecoveredAccount(address _account) {\r\n        if(recoveredIndex[_account] == 0x0) {\r\n            _\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _account) constant returns (uint) {\r\n        return _db().getBalance(_account);\r\n    }\r\n\r\n    function calculateFee(uint _amount) constant returns (uint) {\r\n        uint fee = (_amount * feePercent) / 10000;\r\n\r\n        if (fee < absMinFee) {\r\n            return absMinFee;\r\n        }\r\n\r\n        if (fee > absMaxFee) {\r\n            return absMaxFee;\r\n        }\r\n\r\n        return fee;\r\n    }\r\n\r\n    function issueCoin(address _to, uint _value, uint _totalSupply) checkAccess(\"currencyOwner\") returns (bool) {\r\n        if (totalSupply > 0) {\r\n            Error(6, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n\r\n        bool dep = _db().deposit(_to, _value, 0, 0);\r\n        totalSupply = _totalSupply;\r\n        return dep;\r\n    }\r\n\r\n    function batchTransfer(address[] _to, uint[] _value) checkAccess(\"currencyOwner\") returns (bool) {\r\n        if (_to.length != _value.length) {\r\n            Error(7, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n\r\n        uint totalToSend = 0;\r\n        for (uint8 i = 0; i < _value.length; i++) {\r\n            totalToSend += _value[i];\r\n        }\r\n\r\n        ElcoinDb db = _db();\r\n        if (db.getBalance(msg.sender) < totalToSend) {\r\n            Error(8, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n\r\n        db.withdraw(msg.sender, totalToSend, 0, 0);\r\n        for (uint8 j = 0; j < _to.length; j++) {\r\n            db.deposit(_to[j], _value[j], 0, 0);\r\n            Transfer(msg.sender, _to[j], _value[j]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        uint startGas = msg.gas + transferCallGas;\r\n        if (!_transferWithReward(_db(), msg.sender, _to, _value)) {\r\n            return false;\r\n        }\r\n        uint refund = (startGas - msg.gas + refundGas) * tx.gasprice;\r\n        return _refund(refund);\r\n    }\r\n\r\n    function transferPool(address _from, address _to, uint _value) checkAccess(\"pool\") returns (bool) {\r\n        return _transferWithReward(_db(), _from, _to, _value);\r\n    }\r\n\r\n    function rewardTo(address _to, uint _amount) checkAccess(\"reward\") returns (bool) {\r\n        bool result = _db().deposit(_to, _amount, 0, 0);\r\n        if (result) {\r\n            totalSupply += _amount;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function recoverAccount(address _old, address _new) checkAccess(\"recovery\") notRecoveredAccount(_old) returns (bool) {\r\n        return _recoverAccount(_db(), _old, _new);\r\n    }\r\n\r\n    function setFeeAddr(address _feeAddr) checkAccess(\"currencyOwner\") {\r\n        feeAddr = _feeAddr;\r\n    }\r\n\r\n    function setFee(uint _absMinFee, uint _feePercent, uint _absMaxFee) checkAccess(\"cron\") returns (bool) {\r\n        return _setFeeStructure(_absMinFee, _feePercent, _absMaxFee);\r\n    }\r\n\r\n    uint public txGasPriceLimit = 21000000000;\r\n    uint public transferCallGas = 21000;\r\n    uint public refundGas = 15000;\r\n    EtherTreasuryInterface treasury;\r\n\r\n    function setupTreasury(address _treasury, uint _txGasPriceLimit) checkAccess(\"currencyOwner\") returns (bool) {\r\n        if (_txGasPriceLimit == 0) {\r\n            return false;\r\n        }\r\n        treasury = EtherTreasuryInterface(_treasury);\r\n        txGasPriceLimit = _txGasPriceLimit;\r\n        if (msg.value > 0 && !address(treasury).send(msg.value)) {\r\n            throw;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function updateRefundGas() checkAccess(\"currencyOwner\") returns (uint) {\r\n        uint startGas = msg.gas;\r\n        uint refund = (startGas - msg.gas + refundGas) * tx.gasprice; // just to simulate calculations, dunno if optimizer will remove this.\r\n        if (!_refund(1)) {\r\n            return 0;\r\n        }\r\n        refundGas = startGas - msg.gas;\r\n        return refundGas;\r\n    }\r\n\r\n    function setOperationsCallGas(uint _transfer) checkAccess(\"currencyOwner\") returns (bool) {\r\n        transferCallGas = _transfer;\r\n        return true;\r\n    }\r\n\r\n    function _refund(uint _value) internal returns (bool) {\r\n        if (tx.gasprice > txGasPriceLimit) {\r\n            return false;\r\n        }\r\n        return treasury.withdraw(tx.origin, _value);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recovered\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txGasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRefundGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_txGasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setupTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absMaxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_absMinFee\",\"type\":\"uint256\"},{\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"name\":\"_absMaxFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"issueCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setAmbiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfer\",\"type\":\"uint256\"}],\"name\":\"setOperationsCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"remove\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"absMinFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recoveredIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAddr\",\"type\":\"address\"}],\"name\":\"setFeeAddr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferCallGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_old\",\"type\":\"address\"},{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"recoverAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"unapprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"code\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"Unapproved\",\"type\":\"event\"}]", "ContractName": "Elcoin", "CompilerVersion": "v0.3.2-2016-05-13-4b445b8", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}