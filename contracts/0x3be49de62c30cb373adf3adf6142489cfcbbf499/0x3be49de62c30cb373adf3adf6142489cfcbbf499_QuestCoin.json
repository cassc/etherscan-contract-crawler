{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\n/*\r\n\r\nQUEST (QUEST)\r\n\r\nTwitter: https://x.com/questcoinerc\r\nTg: https://t.me/QuestCoinETH\r\nWebsite: https://www.questcoineth.com\r\n\r\n*/\r\n\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address owner_) {\r\n        _transferOwnership(owner_);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\ncontract ERC20 is IERC20, IERC20Metadata {\r\n\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount greater than allowance\");\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount greater than balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract QuestCoin is ERC20, Ownable {\r\n\r\n    address public LPTokenReceiver;\r\n    address public marketingReceiver;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public sellTotalFees;\r\n\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n\r\n    IUniswapV2Router02 public router;\r\n    address public liquidityPair;\r\n\r\n    mapping(address => bool) public isAMM;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public maxWallet;\r\n\r\n    mapping(address => bool) private isExcludedFromFee;\r\n    mapping(address => bool) public isExcludedFromWalletLimits;\r\n\r\n    uint256 public feeDenominator = 1000;\r\n    \r\n    bool private swapping;\r\n    uint256 public swapThreshold;\r\n    bool public limitsInEffect = true;\r\n\r\n    // While limits are in effect, an EOA can have exactly one transaction per block\r\n    mapping(address => mapping(uint256 => uint256)) public blockTransferCount;\r\n\r\n    // This feature can only be enabled and not disabled.\r\n    // Enabling these will cap the buy or sell fee to some value\r\n    // a value of 50 => 5% max. A value of 150 => 15% max\r\n    bool maxSellFeeSet = false;\r\n    bool maxBuyFeeSet = false;\r\n    uint256 maxSellFee;\r\n    uint256 maxBuyFee;\r\n\r\n    mapping(address => bool) public isFeeWhitelisted;\r\n    bool public feeWhitelistInEffect = true;\r\n\r\n    constructor(\r\n        address router_,\r\n        address LPTokenReceiver_,\r\n        address marketingReceiver_\r\n    ) ERC20(\"QUEST\", \"QUEST\") Ownable(msg.sender) {\r\n\r\n        LPTokenReceiver = LPTokenReceiver_;\r\n        marketingReceiver = marketingReceiver_;\r\n\r\n        router = IUniswapV2Router02(router_);\r\n\r\n        liquidityPair = IUniswapV2Factory(\r\n            router.factory()\r\n        ).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n\r\n        isAMM[liquidityPair] = true;\r\n\r\n        isExcludedFromWalletLimits[address(liquidityPair)] = true;\r\n        isExcludedFromWalletLimits[address(router)] = true;\r\n        isExcludedFromWalletLimits[address(this)] = true;\r\n        isExcludedFromWalletLimits[address(0xdead)] = true;\r\n        isExcludedFromWalletLimits[msg.sender] = true;\r\n        isExcludedFromWalletLimits[LPTokenReceiver] = true;\r\n\r\n        uint256 totalSupply = 1_000_000_000_000 * 1e18;\r\n        \r\n        buyMarketingFee = 0;\r\n        buyLiquidityFee = 0;\r\n\r\n        sellMarketingFee = 280;\r\n        sellLiquidityFee = 20;\r\n\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee;\r\n\r\n        isExcludedFromFee[address(0xdead)] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[msg.sender] = true;\r\n        isExcludedFromFee[LPTokenReceiver] = true;\r\n\r\n        maxTransactionAmount = totalSupply * 5 / 1000;\r\n        maxWallet = totalSupply * 10 / 1000;\r\n        swapThreshold = totalSupply / 1000;\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function airdropTokens(address[] calldata holders, uint256[] calldata amounts) external {\r\n\r\n        for (uint i=0; i<holders.length; i++) {\r\n            super._transfer(msg.sender, holders[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function setFeeWhitelist(address[] calldata accounts, bool[] calldata isWhitelisted) external onlyOwner {\r\n        for (uint i=0; i<accounts.length; i++) {\r\n            isFeeWhitelisted[accounts[i]] = isWhitelisted[i];\r\n        }        \r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount) external payable onlyOwner {\r\n        _addLiquidity(tokenAmount, msg.value);\r\n    }\r\n\r\n    function setBuyFees(uint256 marketingFee, uint256 liquidityFee) external onlyOwner {\r\n        buyMarketingFee = marketingFee;\r\n        buyLiquidityFee = liquidityFee;\r\n\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee;\r\n\r\n        if (maxBuyFeeSet) {\r\n            require(buyTotalFees <= maxBuyFee);\r\n        }\r\n    }\r\n\r\n    function setSellFees(uint256 marketingFee, uint256 liquidityFee) external onlyOwner {\r\n        sellMarketingFee = marketingFee;\r\n        sellLiquidityFee = liquidityFee;\r\n\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee;\r\n\r\n        if (maxSellFeeSet) {\r\n            require(sellTotalFees <= maxSellFee);\r\n        }\r\n    }\r\n\r\n    function setLimits(uint256 maxTransactionAmount_, uint256 maxWallet_) external onlyOwner {\r\n        maxTransactionAmount = maxTransactionAmount_;\r\n        maxWallet = maxWallet_;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        require(limitsInEffect);\r\n        limitsInEffect = false;\r\n    }\r\n\r\n    function setFeeWhitelistInEffect(bool inEffect) external onlyOwner {\r\n        feeWhitelistInEffect = inEffect;\r\n    }\r\n\r\n    function setSwapThreshold(uint256 swapThreshold_) external onlyOwner {\r\n        swapThreshold = swapThreshold_;\r\n    }\r\n\r\n    function setLPTokenReceiver(address newReceiver) external onlyOwner {\r\n        require(LPTokenReceiver != newReceiver);\r\n        isExcludedFromFee[newReceiver] = true;\r\n        isExcludedFromWalletLimits[newReceiver] = true;\r\n        LPTokenReceiver = newReceiver;\r\n    }\r\n\r\n    function setMarketingReceiver(address newReceiver) external onlyOwner {\r\n        require(marketingReceiver != newReceiver);\r\n        isExcludedFromFee[newReceiver] = true;\r\n        isExcludedFromWalletLimits[newReceiver] = true;\r\n        marketingReceiver = newReceiver;\r\n    }\r\n\r\n    function setAMM(address ammAddress, bool isAMM_) external onlyOwner {\r\n        isAMM[ammAddress] = isAMM_;\r\n    }\r\n\r\n    function setWalletExcludedFromLimits(address wallet, bool isExcluded) external onlyOwner {\r\n        isExcludedFromWalletLimits[wallet] = isExcluded;\r\n    }\r\n\r\n    function setWalletExcludedFromFees(address wallet, bool isExcluded) external onlyOwner {\r\n        isExcludedFromFee[wallet] = isExcluded;\r\n    }\r\n\r\n    function setRouter(address router_) external onlyOwner {\r\n        router = IUniswapV2Router02(router_);\r\n    }\r\n\r\n    function setLiquidityPair(address pairAddress) external onlyOwner {\r\n        liquidityPair = pairAddress;\r\n    }\r\n\r\n    function enableMaxSellFeeLimit(uint256 limit) external onlyOwner {\r\n        require(limit <= feeDenominator && limit < maxSellFee);\r\n        maxSellFee = limit;\r\n        maxSellFeeSet = true;\r\n    }\r\n\r\n    function enableMaxBuyFeeLimit(uint256 limit) external onlyOwner {\r\n        require(limit <= feeDenominator && limit < maxBuyFee);\r\n        maxBuyFee = limit;\r\n        maxBuyFeeSet = true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (isExcludedFromFee[from] || isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee) {\r\n\r\n            uint256 fees = 0;\r\n\r\n            if (isAMM[to] && sellTotalFees > 0) {\r\n                uint256 newTokensForMarketing = amount * sellMarketingFee / feeDenominator;\r\n                uint256 newTokensForLiquidity = amount * sellLiquidityFee / feeDenominator;\r\n\r\n                fees = newTokensForMarketing + newTokensForLiquidity;\r\n\r\n                tokensForMarketing += newTokensForMarketing;\r\n                tokensForLiquidity += newTokensForLiquidity;\r\n            }\r\n\r\n            else if (isAMM[from] && buyTotalFees > 0) {\r\n                if (!feeWhitelistInEffect || !isFeeWhitelisted[to]) {\r\n                    uint256 newTokensForMarketing = amount * buyMarketingFee / feeDenominator;\r\n                    uint256 newTokensForLiquidity = amount * buyLiquidityFee / feeDenominator;\r\n\r\n                    fees = newTokensForMarketing + newTokensForLiquidity;\r\n\r\n                    tokensForMarketing += newTokensForMarketing;\r\n                    tokensForLiquidity += newTokensForLiquidity;\r\n                }\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n                amount -= fees;\r\n            }\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                require(blockTransferCount[tx.origin][block.number] == 0);\r\n                blockTransferCount[tx.origin][block.number] = 1;\r\n\r\n                if (\r\n                    isAMM[from] &&\r\n                    !isExcludedFromWalletLimits[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"!maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"!maxWallet\"\r\n                    );\r\n                } else if (\r\n                    isAMM[to] &&\r\n                    !isExcludedFromWalletLimits[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"!maxTransactionAmount.\"\r\n                    );\r\n                } else if (!isExcludedFromWalletLimits[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"!maxWallet\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (\r\n            !swapping &&\r\n            from != liquidityPair &&\r\n            to == liquidityPair &&\r\n            !isExcludedFromFee[from] &&\r\n            !isExcludedFromFee[to] &&\r\n            balanceOf(address(this)) >= swapThreshold\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal {\r\n        tokensForMarketing = balanceOf(address(this)) - tokensForLiquidity;\r\n        if (tokensForLiquidity + tokensForMarketing == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 liquidity = tokensForLiquidity / 2;\r\n        uint256 amountToSwapForETH = tokensForMarketing + (tokensForLiquidity - liquidity);\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethForLiquidity = address(this).balance * (tokensForLiquidity - liquidity) / amountToSwapForETH;\r\n\r\n        if (liquidity > 0 && ethForLiquidity > 0) {\r\n            _addLiquidity(liquidity, ethForLiquidity);\r\n        }\r\n\r\n        if (tokensForMarketing > 0) {\r\n            marketingReceiver.call{value: address(this).balance}(\"\");\r\n        }\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ethAmount} (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            LPTokenReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdrawStuckTokens(address tokenAddress, uint256 amount) external {\r\n        require(tokenAddress != address(this));\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n        uint256 amountToTransfer = amount == 0 ? tokenBalance : amount;\r\n        _safeTransfer(tokenAddress, marketingReceiver, amountToTransfer);\r\n    }\r\n\r\n    function withdrawStuckETH() external {\r\n        (bool success,) = marketingReceiver.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) private {\r\n        bytes4 TRANSFERSELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFERSELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LPTokenReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingReceiver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPTokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockTransferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"enableMaxBuyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"enableMaxSellFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWhitelistInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAMM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromWalletLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAMM_\",\"type\":\"bool\"}],\"name\":\"setAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isWhitelisted\",\"type\":\"bool[]\"}],\"name\":\"setFeeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inEffect\",\"type\":\"bool\"}],\"name\":\"setFeeWhitelistInEffect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setLPTokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransactionAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet_\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setMarketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapThreshold_\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setWalletExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setWalletExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "QuestCoin", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000003fd8086d40bfa97d944b3d5621f8b4d31ca4fc0d0000000000000000000000003fd8086d40bfa97d944b3d5621f8b4d31ca4fc0d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0eedee2ab3269c6006ce25f21f6e9d4739d906562da4d561042193e96f1e59f"}