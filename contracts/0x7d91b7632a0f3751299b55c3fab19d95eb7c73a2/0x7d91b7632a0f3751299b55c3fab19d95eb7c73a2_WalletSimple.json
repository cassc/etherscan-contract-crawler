{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WalletSimple.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\nimport './TransferHelper.sol';\\nimport './ERC20Interface.sol';\\nimport './IForwarder.sol';\\n\\n/** ERC721, ERC1155 imports */\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol';\\n\\n/**\\n *\\n * WalletSimple\\n * ============\\n *\\n * Basic multi-signer wallet designed for use in a co-signing environment where 2 signatures are required to move funds.\\n * Typically used in a 2-of-3 signing configuration. Uses ecrecover to allow for 2 signatures in a single transaction.\\n *\\n * The first signature is created on the operation hash (see Data Formats) and passed to sendMultiSig/sendMultiSigToken\\n * The signer is determined by verifyMultiSig().\\n *\\n * The second signature is created by the submitter of the transaction and determined by msg.signer.\\n *\\n * Data Formats\\n * ============\\n *\\n * The signature is created with ethereumjs-util.ecsign(operationHash).\\n * Like the eth_sign RPC call, it packs the values as a 65-byte array of [r, s, v].\\n * Unlike eth_sign, the message is not prefixed.\\n *\\n * The operationHash the result of keccak256(prefix, toAddress, value, data, expireTime).\\n * For ether transactions, `prefix` is \\\"ETHER\\\".\\n * For token transaction, `prefix` is \\\"ERC20\\\" and `data` is the tokenContractAddress.\\n *\\n *\\n */\\ncontract WalletSimple is IERC721Receiver, ERC1155Receiver {\\n  // Events\\n  event Deposited(address from, uint256 value, bytes data);\\n  event SafeModeActivated(address msgSender);\\n  event Transacted(\\n    address msgSender, // Address of the sender of the message initiating the transaction\\n    address otherSigner, // Address of the signer (second signature) used to initiate the transaction\\n    bytes32 operation, // Operation hash (see Data Formats)\\n    address toAddress, // The address the transaction was sent to\\n    uint256 value, // Amount of Wei sent to the address\\n    bytes data // Data sent when invoking the transaction\\n  );\\n\\n  event BatchTransfer(address sender, address recipient, uint256 value);\\n  // this event shows the other signer and the operation hash that they signed\\n  // specific batch transfer events are emitted in Batcher\\n  event BatchTransacted(\\n    address msgSender, // Address of the sender of the message initiating the transaction\\n    address otherSigner, // Address of the signer (second signature) used to initiate the transaction\\n    bytes32 operation // Operation hash (see Data Formats)\\n  );\\n\\n  // Public fields\\n  mapping(address => bool) public signers; // The addresses that can co-sign transactions on the wallet\\n  bool public safeMode = false; // When active, wallet may only send to signer addresses\\n  bool public initialized = false; // True if the contract has been initialized\\n\\n  // Internal fields\\n  uint256 private constant MAX_SEQUENCE_ID_INCREASE = 10000;\\n  uint256 constant SEQUENCE_ID_WINDOW_SIZE = 10;\\n  uint256[SEQUENCE_ID_WINDOW_SIZE] recentSequenceIds;\\n\\n  /**\\n   * Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet.\\n   * 2 signers will be required to send a transaction from this wallet.\\n   * Note: The sender is NOT automatically added to the list of signers.\\n   * Signers CANNOT be changed once they are set\\n   *\\n   * @param allowedSigners An array of signers on the wallet\\n   */\\n  function init(address[] calldata allowedSigners) external onlyUninitialized {\\n    require(allowedSigners.length == 3, 'Invalid number of signers');\\n\\n    for (uint8 i = 0; i < allowedSigners.length; i++) {\\n      require(allowedSigners[i] != address(0), 'Invalid signer');\\n      signers[allowedSigners[i]] = true;\\n    }\\n\\n    initialized = true;\\n  }\\n\\n  /**\\n   * Get the network identifier that signers must sign over\\n   * This provides protection signatures being replayed on other chains\\n   * This must be a virtual function because chain-specific contracts will need\\n   *    to override with their own network ids. It also can't be a field\\n   *    to allow this contract to be used by proxy with delegatecall, which will\\n   *    not pick up on state variables\\n   */\\n  function getNetworkId() internal virtual pure returns (string memory) {\\n    return 'ETHER';\\n  }\\n\\n  /**\\n   * Get the network identifier that signers must sign over for token transfers\\n   * This provides protection signatures being replayed on other chains\\n   * This must be a virtual function because chain-specific contracts will need\\n   *    to override with their own network ids. It also can't be a field\\n   *    to allow this contract to be used by proxy with delegatecall, which will\\n   *    not pick up on state variables\\n   */\\n  function getTokenNetworkId() internal virtual pure returns (string memory) {\\n    return 'ERC20';\\n  }\\n\\n  /**\\n   * Get the network identifier that signers must sign over for batch transfers\\n   * This provides protection signatures being replayed on other chains\\n   * This must be a virtual function because chain-specific contracts will need\\n   *    to override with their own network ids. It also can't be a field\\n   *    to allow this contract to be used by proxy with delegatecall, which will\\n   *    not pick up on state variables\\n   */\\n  function getBatchNetworkId() internal virtual pure returns (string memory) {\\n    return 'ETHER-Batch';\\n  }\\n\\n  /**\\n   * Determine if an address is a signer on this wallet\\n   * @param signer address to check\\n   * returns boolean indicating whether address is signer or not\\n   */\\n  function isSigner(address signer) public view returns (bool) {\\n    return signers[signer];\\n  }\\n\\n  /**\\n   * Modifier that will execute internal code block only if the sender is an authorized signer on this wallet\\n   */\\n  modifier onlySigner {\\n    require(isSigner(msg.sender), 'Non-signer in onlySigner method');\\n    _;\\n  }\\n\\n  /**\\n   * Modifier that will execute internal code block only if the contract has not been initialized yet\\n   */\\n  modifier onlyUninitialized {\\n    require(!initialized, 'Contract already initialized');\\n    _;\\n  }\\n\\n  /**\\n   * Gets called when a transaction is received with data that does not match any other method\\n   */\\n  fallback() external payable {\\n    if (msg.value > 0) {\\n      // Fire deposited event if we are receiving funds\\n      emit Deposited(msg.sender, msg.value, msg.data);\\n    }\\n  }\\n\\n  /**\\n   * Gets called when a transaction is received with ether and no data\\n   */\\n  receive() external payable {\\n    if (msg.value > 0) {\\n      // Fire deposited event if we are receiving funds\\n      // message data is always empty for receive. If there is data it is sent to fallback function.\\n      emit Deposited(msg.sender, msg.value, '');\\n    }\\n  }\\n\\n  /**\\n   * Execute a multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\\n   *\\n   * @param toAddress the destination address to send an outgoing transaction\\n   * @param value the amount in Wei to be sent\\n   * @param data the data to send to the toAddress when invoking the transaction\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\n   * @param signature see Data Formats\\n   */\\n  function sendMultiSig(\\n    address toAddress,\\n    uint256 value,\\n    bytes calldata data,\\n    uint256 expireTime,\\n    uint256 sequenceId,\\n    bytes calldata signature\\n  ) external onlySigner {\\n    // Verify the other signer\\n    bytes32 operationHash = keccak256(\\n      abi.encodePacked(\\n        getNetworkId(),\\n        toAddress,\\n        value,\\n        data,\\n        expireTime,\\n        sequenceId\\n      )\\n    );\\n\\n    address otherSigner = verifyMultiSig(\\n      toAddress,\\n      operationHash,\\n      signature,\\n      expireTime,\\n      sequenceId\\n    );\\n\\n    // Success, send the transaction\\n    (bool success, ) = toAddress.call{ value: value }(data);\\n    require(success, 'Call execution failed');\\n\\n    emit Transacted(\\n      msg.sender,\\n      otherSigner,\\n      operationHash,\\n      toAddress,\\n      value,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * Execute a batched multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\\n   * The recipients and values to send are encoded in two arrays, where for index i, recipients[i] will be sent values[i].\\n   *\\n   * @param recipients The list of recipients to send to\\n   * @param values The list of values to send to\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\n   * @param signature see Data Formats\\n   */\\n  function sendMultiSigBatch(\\n    address[] calldata recipients,\\n    uint256[] calldata values,\\n    uint256 expireTime,\\n    uint256 sequenceId,\\n    bytes calldata signature\\n  ) external onlySigner {\\n    require(recipients.length != 0, 'Not enough recipients');\\n    require(\\n      recipients.length == values.length,\\n      'Unequal recipients and values'\\n    );\\n    require(recipients.length < 256, 'Too many recipients, max 255');\\n\\n    // Verify the other signer\\n    bytes32 operationHash = keccak256(\\n      abi.encodePacked(\\n        getBatchNetworkId(),\\n        recipients,\\n        values,\\n        expireTime,\\n        sequenceId\\n      )\\n    );\\n\\n    // the first parameter (toAddress) is used to ensure transactions in safe mode only go to a signer\\n    // if in safe mode, we should use normal sendMultiSig to recover, so this check will always fail if in safe mode\\n    require(!safeMode, 'Batch in safe mode');\\n    address otherSigner = verifyMultiSig(\\n      address(0x0),\\n      operationHash,\\n      signature,\\n      expireTime,\\n      sequenceId\\n    );\\n\\n    batchTransfer(recipients, values);\\n    emit BatchTransacted(msg.sender, otherSigner, operationHash);\\n  }\\n\\n  /**\\n   * Transfer funds in a batch to each of recipients\\n   * @param recipients The list of recipients to send to\\n   * @param values The list of values to send to recipients.\\n   *  The recipient with index i in recipients array will be sent values[i].\\n   *  Thus, recipients and values must be the same length\\n   */\\n  function batchTransfer(\\n    address[] calldata recipients,\\n    uint256[] calldata values\\n  ) internal {\\n    for (uint256 i = 0; i < recipients.length; i++) {\\n      require(address(this).balance >= values[i], 'Insufficient funds');\\n\\n      (bool success, ) = recipients[i].call{ value: values[i] }('');\\n      require(success, 'Call failed');\\n\\n      emit BatchTransfer(msg.sender, recipients[i], values[i]);\\n    }\\n  }\\n\\n  /**\\n   * Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\\n   *\\n   * @param toAddress the destination address to send an outgoing transaction\\n   * @param value the amount in tokens to be sent\\n   * @param tokenContractAddress the address of the erc20 token contract\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\n   * @param signature see Data Formats\\n   */\\n  function sendMultiSigToken(\\n    address toAddress,\\n    uint256 value,\\n    address tokenContractAddress,\\n    uint256 expireTime,\\n    uint256 sequenceId,\\n    bytes calldata signature\\n  ) external onlySigner {\\n    // Verify the other signer\\n    bytes32 operationHash = keccak256(\\n      abi.encodePacked(\\n        getTokenNetworkId(),\\n        toAddress,\\n        value,\\n        tokenContractAddress,\\n        expireTime,\\n        sequenceId\\n      )\\n    );\\n\\n    verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\\n\\n    TransferHelper.safeTransfer(tokenContractAddress, toAddress, value);\\n  }\\n\\n  /**\\n   * Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\\n   *\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\n   * @param tokenContractAddress the address of the erc20 token contract\\n   */\\n  function flushForwarderTokens(\\n    address payable forwarderAddress,\\n    address tokenContractAddress\\n  ) external onlySigner {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.flushTokens(tokenContractAddress);\\n  }\\n\\n  /**\\n   * Execute a ERC721 token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\\n   *\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\n   * @param tokenContractAddress the address of the erc20 token contract\\n   */\\n  function flushERC721ForwarderTokens(\\n    address payable forwarderAddress,\\n    address tokenContractAddress,\\n    uint256 tokenId\\n  ) external onlySigner {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.flushERC721Token(tokenContractAddress, tokenId);\\n  }\\n\\n  /**\\n   * Execute a ERC1155 batch token flush from one of the forwarder addresses.\\n   * This transfer needs only a single signature and can be done by any signer.\\n   *\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\n   * @param tokenContractAddress the address of the erc1155 token contract\\n   */\\n  function batchFlushERC1155ForwarderTokens(\\n    address payable forwarderAddress,\\n    address tokenContractAddress,\\n    uint256[] calldata tokenIds\\n  ) external onlySigner {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.batchFlushERC1155Tokens(tokenContractAddress, tokenIds);\\n  }\\n\\n  /**\\n   * Execute a ERC1155 token flush from one of the forwarder addresses.\\n   * This transfer needs only a single signature and can be done by any signer.\\n   *\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\n   * @param tokenContractAddress the address of the erc1155 token contract\\n   * @param tokenId the token id associated with the ERC1155\\n   */\\n  function flushERC1155ForwarderTokens(\\n    address payable forwarderAddress,\\n    address tokenContractAddress,\\n    uint256 tokenId\\n  ) external onlySigner {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.flushERC1155Tokens(tokenContractAddress, tokenId);\\n  }\\n\\n  /**\\n   * Sets the autoflush 721 parameter on the forwarder.\\n   *\\n   * @param forwarderAddress the address of the forwarder to toggle.\\n   * @param autoFlush whether to autoflush erc721 tokens\\n   */\\n  function setAutoFlush721(address forwarderAddress, bool autoFlush)\\n    external\\n    onlySigner\\n  {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.setAutoFlush721(autoFlush);\\n  }\\n\\n  /**\\n   * Sets the autoflush 721 parameter on the forwarder.\\n   *\\n   * @param forwarderAddress the address of the forwarder to toggle.\\n   * @param autoFlush whether to autoflush erc1155 tokens\\n   */\\n  function setAutoFlush1155(address forwarderAddress, bool autoFlush)\\n    external\\n    onlySigner\\n  {\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\n    forwarder.setAutoFlush1155(autoFlush);\\n  }\\n\\n  /**\\n   * Do common multisig verification for both eth sends and erc20token transfers\\n   *\\n   * @param toAddress the destination address to send an outgoing transaction\\n   * @param operationHash see Data Formats\\n   * @param signature see Data Formats\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\n   * returns address that has created the signature\\n   */\\n  function verifyMultiSig(\\n    address toAddress,\\n    bytes32 operationHash,\\n    bytes calldata signature,\\n    uint256 expireTime,\\n    uint256 sequenceId\\n  ) private returns (address) {\\n    address otherSigner = recoverAddressFromSignature(operationHash, signature);\\n\\n    // Verify if we are in safe mode. In safe mode, the wallet can only send to signers\\n    require(!safeMode || isSigner(toAddress), 'External transfer in safe mode');\\n\\n    // Verify that the transaction has not expired\\n    require(expireTime >= block.timestamp, 'Transaction expired');\\n\\n    // Try to insert the sequence ID. Will revert if the sequence id was invalid\\n    tryInsertSequenceId(sequenceId);\\n\\n    require(isSigner(otherSigner), 'Invalid signer');\\n\\n    require(otherSigner != msg.sender, 'Signers cannot be equal');\\n\\n    return otherSigner;\\n  }\\n\\n  /**\\n   * ERC721 standard callback function for when a ERC721 is transfered.\\n   *\\n   * @param _operator The address of the nft contract\\n   * @param _from The address of the sender\\n   * @param _tokenId The token id of the nft\\n   * @param _data Additional data with no specified format, sent in call to `_to`\\n   */\\n  function onERC721Received(\\n    address _operator,\\n    address _from,\\n    uint256 _tokenId,\\n    bytes memory _data\\n  ) external virtual override returns (bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  /**\\n   * @inheritdoc IERC1155Receiver\\n   */\\n  function onERC1155Received(\\n    address _operator,\\n    address _from,\\n    uint256 id,\\n    uint256 value,\\n    bytes calldata data\\n  ) external virtual override returns (bytes4) {\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  /**\\n   * @inheritdoc IERC1155Receiver\\n   */\\n  function onERC1155BatchReceived(\\n    address _operator,\\n    address _from,\\n    uint256[] calldata ids,\\n    uint256[] calldata values,\\n    bytes calldata data\\n  ) external virtual override returns (bytes4) {\\n    return this.onERC1155BatchReceived.selector;\\n  }\\n\\n  /**\\n   * Irrevocably puts contract into safe mode. When in this mode, transactions may only be sent to signing addresses.\\n   */\\n  function activateSafeMode() external onlySigner {\\n    safeMode = true;\\n    emit SafeModeActivated(msg.sender);\\n  }\\n\\n  /**\\n   * Gets signer's address using ecrecover\\n   * @param operationHash see Data Formats\\n   * @param signature see Data Formats\\n   * returns address recovered from the signature\\n   */\\n  function recoverAddressFromSignature(\\n    bytes32 operationHash,\\n    bytes memory signature\\n  ) private pure returns (address) {\\n    require(signature.length == 65, 'Invalid signature - wrong length');\\n\\n    // We need to unpack the signature, which is given as an array of 65 bytes (like eth.sign)\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n\\n    // solhint-disable-next-line\\n    assembly {\\n      r := mload(add(signature, 32))\\n      s := mload(add(signature, 64))\\n      v := and(mload(add(signature, 65)), 255)\\n    }\\n    if (v < 27) {\\n      v += 27; // Ethereum versions are 27 or 28 as opposed to 0 or 1 which is submitted by some signing libs\\n    }\\n\\n    // protect against signature malleability\\n    // S value must be in the lower half orader\\n    // reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/051d340171a93a3d401aaaea46b4b62fa81e5d7c/contracts/cryptography/ECDSA.sol#L53\\n    require(\\n      uint256(s) <=\\n        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n      \\\"ECDSA: invalid signature 's' value\\\"\\n    );\\n\\n    // note that this returns 0 if the signature is invalid\\n    // Since 0x0 can never be a signer, when the recovered signer address\\n    // is checked against our signer list, that 0x0 will cause an invalid signer failure\\n    return ecrecover(operationHash, v, r, s);\\n  }\\n\\n  /**\\n   * Verify that the sequence id has not been used before and inserts it. Throws if the sequence ID was not accepted.\\n   * We collect a window of up to 10 recent sequence ids, and allow any sequence id that is not in the window and\\n   * greater than the minimum element in the window.\\n   * @param sequenceId to insert into array of stored ids\\n   */\\n  function tryInsertSequenceId(uint256 sequenceId) private onlySigner {\\n    // Keep a pointer to the lowest value element in the window\\n    uint256 lowestValueIndex = 0;\\n    // fetch recentSequenceIds into memory for function context to avoid unnecessary sloads\\n\\n\\n      uint256[SEQUENCE_ID_WINDOW_SIZE] memory _recentSequenceIds\\n     = recentSequenceIds;\\n    for (uint256 i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\\n      require(_recentSequenceIds[i] != sequenceId, 'Sequence ID already used');\\n\\n      if (_recentSequenceIds[i] < _recentSequenceIds[lowestValueIndex]) {\\n        lowestValueIndex = i;\\n      }\\n    }\\n\\n    // The sequence ID being used is lower than the lowest value in the window\\n    // so we cannot accept it as it may have been used before\\n    require(\\n      sequenceId > _recentSequenceIds[lowestValueIndex],\\n      'Sequence ID below window'\\n    );\\n\\n    // Block sequence IDs which are much higher than the lowest value\\n    // This prevents people blocking the contract by using very large sequence IDs quickly\\n    require(\\n      sequenceId <=\\n        (_recentSequenceIds[lowestValueIndex] + MAX_SEQUENCE_ID_INCREASE),\\n      'Sequence ID above maximum'\\n    );\\n\\n    recentSequenceIds[lowestValueIndex] = sequenceId;\\n  }\\n\\n  /**\\n   * Gets the next available sequence ID for signing when using executeAndConfirm\\n   * returns the sequenceId one higher than the highest currently stored\\n   */\\n  function getNextSequenceId() external view returns (uint256) {\\n    uint256 highestSequenceId = 0;\\n    for (uint256 i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\\n      if (recentSequenceIds[i] > highestSequenceId) {\\n        highestSequenceId = recentSequenceIds[i];\\n      }\\n    }\\n    return highestSequenceId + 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// source: https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(0xa9059cbb, to, value)\\n    );\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      'TransferHelper::safeTransfer: transfer failed'\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    (bool success, bytes memory returndata) = token.call(\\n      abi.encodeWithSelector(0x23b872dd, from, to, value)\\n    );\\n    Address.verifyCallResult(\\n      success,\\n      returndata,\\n      'TransferHelper::transferFrom: transferFrom failed'\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * Contract that exposes the needed erc20 token functions\\n */\\n\\nabstract contract ERC20Interface {\\n  // Send _value amount of tokens to address _to\\n  function transfer(address _to, uint256 _value)\\n    public\\n    virtual\\n    returns (bool success);\\n\\n  // Get the account balance of another account with address _owner\\n  function balanceOf(address _owner)\\n    public\\n    virtual\\n    view\\n    returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"contracts/IForwarder.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface IForwarder is IERC165 {\\n  /**\\n   * Sets the autoflush721 parameter.\\n   *\\n   * @param autoFlush whether to autoflush erc721 tokens\\n   */\\n  function setAutoFlush721(bool autoFlush) external;\\n\\n  /**\\n   * Sets the autoflush1155 parameter.\\n   *\\n   * @param autoFlush whether to autoflush erc1155 tokens\\n   */\\n  function setAutoFlush1155(bool autoFlush) external;\\n\\n  /**\\n   * Execute a token transfer of the full balance from the forwarder token to the parent address\\n   *\\n   * @param tokenContractAddress the address of the erc20 token contract\\n   */\\n  function flushTokens(address tokenContractAddress) external;\\n\\n  /**\\n   * Execute a nft transfer from the forwarder to the parent address\\n   *\\n   * @param tokenContractAddress the address of the ERC721 NFT contract\\n   * @param tokenId The token id of the nft\\n   */\\n  function flushERC721Token(address tokenContractAddress, uint256 tokenId)\\n    external;\\n\\n  /**\\n   * Execute a nft transfer from the forwarder to the parent address.\\n   *\\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\\n   * @param tokenId The token id of the nft\\n   */\\n  function flushERC1155Tokens(address tokenContractAddress, uint256 tokenId)\\n    external;\\n\\n  /**\\n   * Execute a batch nft transfer from the forwarder to the parent address.\\n   *\\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\\n   * @param tokenIds The token ids of the nfts\\n   */\\n  function batchFlushERC1155Tokens(\\n    address tokenContractAddress,\\n    uint256[] calldata tokenIds\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"otherSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"BatchTransacted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BatchTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"SafeModeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"otherSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transacted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"activateSafeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchFlushERC1155ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC1155ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC721ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"flushForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextSequenceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedSigners\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendMultiSigBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendMultiSigToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WalletSimple", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}