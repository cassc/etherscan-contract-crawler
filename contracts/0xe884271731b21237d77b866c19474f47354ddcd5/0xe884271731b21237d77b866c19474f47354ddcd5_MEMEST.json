{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AntiWhaleToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20Base.sol\\\";\\r\\n\\r\\n/*\\r\\n * AntiWhaleToken: Limit the max wallet size\\r\\n */\\r\\nabstract contract AntiWhaleToken is ERC20Base {\\r\\n    uint256 public maxTokenPerWallet; // anti whale: max token per wallet (default to 1% of supply)\\r\\n\\r\\n    event MaxTokenPerWalletUpdated(uint256 amount);\\r\\n\\r\\n    modifier antiWhale(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) {\\r\\n        if (maxTokenPerWallet != 0 && !isExcludedFromAntiWhale(recipient)) {\\r\\n            require(balanceOf(recipient) + amount <= maxTokenPerWallet, \\\"Wallet exceeds max\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(uint256 maxTokenPerWallet_) {\\r\\n        maxTokenPerWallet = maxTokenPerWallet_;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromAntiWhale(address account) public view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Update the max token per wallet\\r\\n     * set to 0 to disable\\r\\n     */\\r\\n    function _setMaxTokenPerWallet(uint256 amount) internal {\\r\\n        require(amount == 0 || amount > (totalSupply() * 5) / 1000, \\\"Amount too low\\\"); // min 0.5% of supply\\r\\n\\r\\n        maxTokenPerWallet = amount;\\r\\n        emit MaxTokenPerWalletUpdated(amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override antiWhale(from, to, amount) {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/ERC20Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nabstract contract ERC20Base is ERC20 {\\r\\n\\r\\n    uint8 private immutable _decimals;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n            ) ERC20(name_, symbol_) {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"./ERC20Base.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20Burnable is Context, ERC20Base {\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) external virtual {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\r\\n        uint256 currentAllowance = allowance(account, _msgSender());\\r\\n        require(currentAllowance >= amount, \\\"ERC20Burnable: burn amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(account, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\r\\n     * allowance.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) external virtual {\\r\\n        _burnFrom(account, amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/TaxableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./ERC20Base.sol\\\";\\r\\nimport \\\"./TaxDistributor.sol\\\";\\r\\n\\r\\n/*\\r\\n * TaxableToken: Add a tax on buy, sell or transfer\\r\\n */\\r\\nabstract contract TaxableToken is ERC20Base, TaxDistributor {\\r\\n    struct FeeConfiguration {\\r\\n        bool feesInToken; // if set to true, collectors will get tokens, if false collector the fee will be swapped for the native currency\\r\\n        uint16 buyFees; // fees applied during buys, from 0 to 2000 (ie, 100 = 1%)\\r\\n        uint16 sellFees; // fees applied during sells, from 0 to 2000 (ie, 100 = 1%)\\r\\n        uint16 transferFees; // fees applied during transfers, from 0 to 2000 (ie, 100 = 1%)\\r\\n        uint16 burnFeeRatio; // from 0 to 10000 (ie 8000 = 80% of the fee collected are burned)\\r\\n        uint16 liquidityFeeRatio; // from 0 to 10000 (ie 8000 = 80% of the fee collected are added back to liquidity)\\r\\n        uint16 collectorsFeeRatio; // from 0 to 10000 (ie 8000 = 80% of the fee collected are sent to fee collectors)\\r\\n    }\\r\\n\\r\\n    address public constant BURN_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\\r\\n    uint16 public constant MAX_FEE = 2000; // max 20% fees\\r\\n    uint16 public constant FEE_PRECISION = 10000;\\r\\n\\r\\n    // swap config\\r\\n    IUniswapV2Router02 public swapRouter;\\r\\n    address public swapPair;\\r\\n    address public liquidityOwner;\\r\\n\\r\\n    // fees\\r\\n    bool private _processingFees;\\r\\n    bool public autoProcessFees;\\r\\n    uint256 public numTokensToSwap; // amount of tokens to collect before processing fees (default to 0.05% of supply)\\r\\n    FeeConfiguration public feeConfiguration;\\r\\n\\r\\n    mapping(address => bool) private _excludedFromFees;\\r\\n    mapping(address => bool) private _lpPools;\\r\\n\\r\\n    event FeeConfigurationUpdated(FeeConfiguration configuration);\\r\\n    event SwapRouterUpdated(address indexed router, address indexed pair);\\r\\n    event ExcludedFromFees(address indexed account, bool excluded);\\r\\n    event SetLpPool(address indexed pairAddress, bool isLp);\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        _processingFees = true;\\r\\n        _;\\r\\n        _processingFees = false;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        bool autoProcessFees_,\\r\\n        uint256 numTokensToSwap_,\\r\\n        address swapRouter_,\\r\\n        FeeConfiguration memory feeConfiguration_\\r\\n    ) {\\r\\n        numTokensToSwap = numTokensToSwap_;\\r\\n        autoProcessFees = autoProcessFees_;\\r\\n\\r\\n        liquidityOwner = _msgSender();\\r\\n\\r\\n        // Create a uniswap pair for this new token\\r\\n        swapRouter = IUniswapV2Router02(swapRouter_);\\r\\n        swapPair = _pairFor(swapRouter.factory(), address(this), swapRouter.WETH());\\r\\n        _lpPools[swapPair] = true;\\r\\n\\r\\n        // configure addresses excluded from fee\\r\\n        _setIsExcludedFromFees(_msgSender(), true);\\r\\n        _setIsExcludedFromFees(address(this), true);\\r\\n\\r\\n        // configure fees\\r\\n        _setFeeConfiguration(feeConfiguration_);\\r\\n    }\\r\\n\\r\\n    // receive ETH when swaping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns (bool) {\\r\\n        return _excludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function _setIsExcludedFromFees(address account, bool excluded) internal {\\r\\n        require(_excludedFromFees[account] != excluded, \\\"Already set\\\");\\r\\n        _excludedFromFees[account] = excluded;\\r\\n        emit ExcludedFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function _setIsLpPool(address pairAddress, bool isLp) internal {\\r\\n        require(_lpPools[pairAddress] != isLp, \\\"Already set\\\");\\r\\n        _lpPools[pairAddress] = isLp;\\r\\n        emit SetLpPool(pairAddress, isLp);\\r\\n    }\\r\\n\\r\\n    function isLpPool(address pairAddress) public view returns (bool) {\\r\\n        return _lpPools[pairAddress];\\r\\n    }\\r\\n\\r\\n    function _setSwapRouter(address _newRouter) internal {\\r\\n        require(_newRouter != address(0), \\\"Invalid router\\\");\\r\\n\\r\\n        swapRouter = IUniswapV2Router02(_newRouter);\\r\\n        IUniswapV2Factory factory = IUniswapV2Factory(swapRouter.factory());\\r\\n        require(address(factory) != address(0), \\\"Invalid factory\\\");\\r\\n\\r\\n        address weth = swapRouter.WETH();\\r\\n        swapPair = factory.getPair(address(this), weth);\\r\\n        if (swapPair == address(0)) {\\r\\n            swapPair = factory.createPair(address(this), weth);\\r\\n        }\\r\\n\\r\\n        require(swapPair != address(0), \\\"Invalid pair address.\\\");\\r\\n        emit SwapRouterUpdated(address(swapRouter), swapPair);\\r\\n    }\\r\\n\\r\\n    function _setFeeConfiguration(FeeConfiguration memory configuration) internal {\\r\\n        require(configuration.buyFees <= MAX_FEE, \\\"Invalid buy fee\\\");\\r\\n        require(configuration.sellFees <= MAX_FEE, \\\"Invalid sell fee\\\");\\r\\n        require(configuration.transferFees <= MAX_FEE, \\\"Invalid transfer fee\\\");\\r\\n\\r\\n        uint16 totalShare = configuration.burnFeeRatio +\\r\\n            configuration.liquidityFeeRatio +\\r\\n            configuration.collectorsFeeRatio;\\r\\n        require(totalShare == 0 || totalShare == FEE_PRECISION, \\\"Invalid fee share\\\");\\r\\n\\r\\n        feeConfiguration = configuration;\\r\\n        emit FeeConfigurationUpdated(configuration);\\r\\n    }\\r\\n\\r\\n    function _processFees(uint256 tokenAmount, uint256 minAmountOut) internal lockTheSwap {\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        if (contractTokenBalance >= tokenAmount) {\\r\\n            uint256 liquidityAmount = (tokenAmount * feeConfiguration.liquidityFeeRatio) /\\r\\n                (FEE_PRECISION - feeConfiguration.burnFeeRatio);\\r\\n            uint256 liquidityTokens = liquidityAmount / 2;\\r\\n\\r\\n            uint256 collectorsAmount = tokenAmount - liquidityAmount;\\r\\n            uint256 liquifyAmount = liquidityAmount - liquidityTokens;\\r\\n\\r\\n            if (!feeConfiguration.feesInToken) {\\r\\n                liquifyAmount += collectorsAmount;\\r\\n            }\\r\\n\\r\\n            // swap tokens\\r\\n            if (liquifyAmount > 0) {\\r\\n                if (balanceOf(swapPair) == 0) {\\r\\n                    // do not swap before the pair has liquidity\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                // capture the contract's current balance.\\r\\n                uint256 initialBalance = address(this).balance;\\r\\n\\r\\n                _swapTokensForEth(liquifyAmount, minAmountOut);\\r\\n\\r\\n                // how much did we just swap into?\\r\\n                uint256 swapBalance = address(this).balance - initialBalance;\\r\\n\\r\\n                // add liquidity\\r\\n                uint256 liquidityETH = (swapBalance * liquidityTokens) / liquifyAmount;\\r\\n                if (liquidityETH > 0) {\\r\\n                    _addLiquidity(liquidityTokens, liquidityETH);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (feeConfiguration.feesInToken) {\\r\\n                // send tokens to fee collectors\\r\\n                _distributeFees(collectorsAmount, true);\\r\\n            } else {\\r\\n                // send remaining ETH to fee collectors\\r\\n                _distributeFees(address(this).balance, false);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Swap tokens for eth\\r\\n    function _swapTokensForEth(uint256 tokenAmount, uint256 minAmountOut) private {\\r\\n        // generate the swap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = swapRouter.WETH();\\r\\n\\r\\n        _approve(address(this), address(swapRouter), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            minAmountOut,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Add liquidity\\r\\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(swapRouter), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        swapRouter.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            liquidityOwner,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function _pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        pair = address(\\r\\n            uint160(\\r\\n                uint(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            hex\\\"ff\\\",\\r\\n                            factory,\\r\\n                            keccak256(abi.encodePacked(token0, token1)),\\r\\n                            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal virtual override {\\r\\n        require(amount > 0, \\\"Transfer <= 0\\\");\\r\\n\\r\\n        uint256 taxFee = 0;\\r\\n        bool processFee = !_processingFees && autoProcessFees;\\r\\n\\r\\n        if (!_processingFees) {\\r\\n            bool fromExcluded = isExcludedFromFees(from);\\r\\n            bool toExcluded = isExcludedFromFees(to);\\r\\n\\r\\n            bool fromLP = isLpPool(from);\\r\\n            bool toLP = isLpPool(to);\\r\\n\\r\\n            if (fromLP && !toLP && !toExcluded && to != address(swapRouter)) {\\r\\n                // buy fee\\r\\n                taxFee = feeConfiguration.buyFees;\\r\\n            } else if (toLP && !fromExcluded && !toExcluded) {\\r\\n                // sell fee\\r\\n                taxFee = feeConfiguration.sellFees;\\r\\n            } else if (!fromLP && !toLP && from != address(swapRouter) && !fromExcluded) {\\r\\n                // transfer fee\\r\\n                taxFee = feeConfiguration.transferFees;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // process fees\\r\\n        if (processFee && taxFee > 0 && !_lpPools[from]) {\\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (contractTokenBalance >= numTokensToSwap) {\\r\\n                _processFees(numTokensToSwap, 0);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (taxFee > 0) {\\r\\n            uint256 taxAmount = (amount * taxFee) / FEE_PRECISION;\\r\\n            uint256 sendAmount = amount - taxAmount;\\r\\n            uint256 burnAmount = (taxAmount * feeConfiguration.burnFeeRatio) / FEE_PRECISION;\\r\\n\\r\\n            if (burnAmount > 0) {\\r\\n                taxAmount -= burnAmount;\\r\\n                super._transfer(from, BURN_ADDRESS, burnAmount);\\r\\n            }\\r\\n\\r\\n            if (taxAmount > 0) {\\r\\n                super._transfer(from, address(this), taxAmount);\\r\\n            }\\r\\n\\r\\n            if (sendAmount > 0) {\\r\\n                super._transfer(from, to, sendAmount);\\r\\n            }\\r\\n        } else {\\r\\n            super._transfer(from, to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAutoprocessFees(bool autoProcess) external virtual;\\r\\n\\r\\n    function setIsLpPool(address pairAddress, bool isLp) external virtual;\\r\\n\\r\\n    function setIsExcludedFromFees(address account, bool excluded) external virtual;\\r\\n\\r\\n    function processFees(uint256 amount, uint256 minAmountOut) external virtual;\\r\\n\\r\\n    function setLiquidityOwner(address newOwner) external virtual;\\r\\n\\r\\n    function setNumTokensToSwap(uint256 amount) external virtual;\\r\\n\\r\\n    function setFeeConfiguration(FeeConfiguration calldata configuration) external virtual;\\r\\n\\r\\n    function setSwapRouter(address newRouter) external virtual;\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/TaxDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"./ERC20Base.sol\\\";\\r\\n\\r\\nabstract contract TaxDistributor is ERC20Base {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    EnumerableSet.AddressSet private _collectors;\\r\\n    mapping(address => uint256) private _shares;\\r\\n    uint256 public totalFeeCollectorsShares;\\r\\n\\r\\n    event FeeCollectorAdded(address indexed account, uint256 share);\\r\\n    event FeeCollectorUpdated(address indexed account, uint256 oldShare, uint256 newShare);\\r\\n    event FeeCollectorRemoved(address indexed account);\\r\\n    event FeeCollected(address indexed receiver, uint256 amount);\\r\\n\\r\\n    constructor(address[] memory collectors_, uint256[] memory shares_) {\\r\\n        require(collectors_.length == shares_.length, \\\"Invalid fee collectors\\\");\\r\\n        for (uint256 i = 0; i < collectors_.length; i++) {\\r\\n            _addFeeCollector(collectors_[i], shares_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isFeeCollector(address account) public view returns (bool) {\\r\\n        return _collectors.contains(account);\\r\\n    }\\r\\n\\r\\n    function feeCollectorShare(address account) public view returns (uint256) {\\r\\n        return _shares[account];\\r\\n    }\\r\\n\\r\\n    function _addFeeCollector(address account, uint256 share) internal {\\r\\n        require(!_collectors.contains(account), \\\"Already fee collector\\\");\\r\\n        require(share > 0, \\\"Invalid share\\\");\\r\\n\\r\\n        _collectors.add(account);\\r\\n        _shares[account] = share;\\r\\n        totalFeeCollectorsShares += share;\\r\\n\\r\\n        emit FeeCollectorAdded(account, share);\\r\\n    }\\r\\n\\r\\n    function _removeFeeCollector(address account) internal {\\r\\n        require(_collectors.contains(account), \\\"Not fee collector\\\");\\r\\n        _collectors.remove(account);\\r\\n        totalFeeCollectorsShares -= _shares[account];\\r\\n        delete _shares[account];\\r\\n\\r\\n        emit FeeCollectorRemoved(account);\\r\\n    }\\r\\n\\r\\n    function _updateFeeCollectorShare(address account, uint256 share) internal {\\r\\n        require(_collectors.contains(account), \\\"Not fee collector\\\");\\r\\n        require(share > 0, \\\"Invalid share\\\");\\r\\n\\r\\n        uint256 oldShare = _shares[account];\\r\\n        totalFeeCollectorsShares -= oldShare;\\r\\n\\r\\n        _shares[account] = share;\\r\\n        totalFeeCollectorsShares += share;\\r\\n\\r\\n        emit FeeCollectorUpdated(account, oldShare, share);\\r\\n    }\\r\\n\\r\\n    function _distributeFees(uint256 amount, bool inToken) internal returns (bool) {\\r\\n        if (amount == 0) return false;\\r\\n        if (totalFeeCollectorsShares == 0) return false;\\r\\n\\r\\n        uint256 distributed = 0;\\r\\n        uint256 len = _collectors.length();\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            address collector = _collectors.at(i);\\r\\n            uint256 share = i == len - 1\\r\\n                ? amount - distributed\\r\\n                : (amount * _shares[collector]) / totalFeeCollectorsShares;\\r\\n\\r\\n            if (inToken) {\\r\\n                _transfer(address(this), collector, share);\\r\\n            } else {\\r\\n                payable(collector).transfer(share);\\r\\n            }\\r\\n            emit FeeCollected(collector, share);\\r\\n\\r\\n            distributed += share;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addFeeCollector(address account, uint256 share) external virtual;\\r\\n\\r\\n    function removeFeeCollector(address account) external virtual;\\r\\n\\r\\n    function updateFeeCollectorShare(address account, uint256 share) external virtual;\\r\\n\\r\\n    function distributeFees(uint256 amount, bool inToken) external virtual;\\r\\n}\"\r\n    },\r\n    \"contracts/MemeStreet.sol\": {\r\n      \"content\": \"/*\\n\\nTwitter: https://twitter.com/memestreetcoin\\nWebsite: https://memestreetcoin.com\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/AntiWhaleToken.sol\\\";\\nimport \\\"./libraries/ERC20Base.sol\\\";\\nimport \\\"./libraries/ERC20Burnable.sol\\\";\\nimport \\\"./libraries/TaxableToken.sol\\\";\\n\\n/**\\n * @dev ERC20Token implementation with Burn, AntiWhale, Tax capabilities\\n */\\ncontract MEMEST is\\n    ERC20Base,\\n    AntiWhaleToken,\\n    ERC20Burnable,\\n    Ownable,\\n    TaxableToken\\n{\\n\\n    uint256 public constant initialSupply_ = 100_000_000_000 * 1 ether;\\n    address private constant swapRouter_ = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    \\n    address[] private collectors_ = [0x91128059f4323Cf8236B293C8B8fE9A8fC1B8e85];\\n    uint256[] private shares_ = [10000];\\n\\n    mapping(address => bool) private _excludedFromAntiWhale;\\n    event ExcludedFromAntiWhale(address indexed account, bool excluded);\\n\\n    constructor()\\n        ERC20Base(\\n            \\\"Meme St\\\",\\n            \\\"MEMES\\\",\\n            18)\\n        AntiWhaleToken(initialSupply_ / 100) // 1% of supply\\n        TaxableToken(\\n            true,\\n            initialSupply_ / 10000,\\n            swapRouter_,\\n            FeeConfiguration({\\n            feesInToken: false,\\n            buyFees: 200, //0%\\n            sellFees: 200, //2%\\n            transferFees: 0,\\n            burnFeeRatio: 0,\\n            liquidityFeeRatio: 0,\\n            collectorsFeeRatio: 10000\\n        })\\n        )\\n\\n        TaxDistributor(collectors_, shares_)\\n    {\\n        _excludedFromAntiWhale[_msgSender()] = true;\\n        _excludedFromAntiWhale[swapPair] = true;\\n        _excludedFromAntiWhale[BURN_ADDRESS] = true;\\n        _mint(_msgSender(), initialSupply_);\\n    }\\n\\n\\n    /**\\n     * @dev Update the max token allowed per wallet.\\n     * only callable by `owner()`\\n     */\\n    function setMaxTokenPerWallet(uint256 amount) external onlyOwner {\\n        _setMaxTokenPerWallet(amount);\\n    }\\n\\n\\n  /**\\n     * @dev Update the pair token.\\n     * only callable by `owner()`\\n     */\\n    function setPairToken(address token) external onlyOwner {\\n        swapPair = token;\\n    }\\n\\n    /**\\n     * @dev returns true if address is excluded from anti whale\\n     */\\n    function isExcludedFromAntiWhale(address account) public view override returns (bool) {\\n        return _excludedFromAntiWhale[account];\\n    }\\n\\n    /**\\n     * @dev Include/Exclude an address from anti whale\\n     * only callable by `owner()`\\n     */\\n    function setIsExcludedFromAntiWhale(address account, bool excluded) external onlyOwner {\\n        _excludedFromAntiWhale[account] = excluded;\\n        emit ExcludedFromAntiWhale(account, excluded);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     * only callable by `owner()`\\n     */\\n    function burn(uint256 amount) external override onlyOwner {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     * only callable by `owner()`\\n     */\\n    function burnFrom(address account, uint256 amount) external override onlyOwner {\\n        _burnFrom(account, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, AntiWhaleToken) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Enable/Disable autoProcessFees on transfer\\n     * only callable by `owner()`\\n     */\\n    function setAutoprocessFees(bool autoProcess) external override onlyOwner {\\n        require(autoProcessFees != autoProcess, \\\"Already set\\\");\\n        autoProcessFees = autoProcess;\\n    }\\n\\n    /**\\n     * @dev add a fee collector\\n     * only callable by `owner()`\\n     */\\n    function addFeeCollector(address account, uint256 share) external override onlyOwner {\\n        _addFeeCollector(account, share);\\n    }\\n\\n    /**\\n     * @dev add/remove a LP\\n     * only callable by `owner()`\\n     */\\n    function setIsLpPool(address pairAddress, bool isLp) external override onlyOwner {\\n        _setIsLpPool(pairAddress, isLp);\\n    }\\n\\n    /**\\n     * @dev add/remove an address to the tax exclusion list\\n     * only callable by `owner()`\\n     */\\n    function setIsExcludedFromFees(address account, bool excluded) external override onlyOwner {\\n        _setIsExcludedFromFees(account, excluded);\\n    }\\n\\n    /**\\n     * @dev manually distribute fees to collectors\\n     * only callable by `owner()`\\n     */\\n    function distributeFees(uint256 amount, bool inToken) external override onlyOwner {\\n        if (inToken) {\\n            require(balanceOf(address(this)) >= amount, \\\"Not enough balance\\\");\\n        } else {\\n            require(address(this).balance >= amount, \\\"Not enough balance\\\");\\n        }\\n        _distributeFees(amount, inToken);\\n    }\\n\\n    /**\\n     * @dev process fees\\n     * only callable by `owner()`\\n     */\\n    function processFees(uint256 amount, uint256 minAmountOut) external override onlyOwner {\\n        require(amount <= balanceOf(address(this)), \\\"Amount too high\\\");\\n        _processFees(amount, minAmountOut);\\n    }\\n\\n    /**\\n     * @dev remove a fee collector\\n     * only callable by `owner()`\\n     */\\n    function removeFeeCollector(address account) external override onlyOwner {\\n        _removeFeeCollector(account);\\n    }\\n\\n    /**\\n     * @dev set the liquidity owner\\n     * only callable by `owner()`\\n     */\\n    function setLiquidityOwner(address newOwner) external override onlyOwner {\\n        liquidityOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev set the number of tokens to swap\\n     * only callable by `owner()`\\n     */\\n    function setNumTokensToSwap(uint256 amount) external override onlyOwner {\\n        numTokensToSwap = amount;\\n    }\\n\\n    /**\\n     * @dev update a fee collector share\\n     * only callable by `owner()`\\n     */\\n    function updateFeeCollectorShare(address account, uint256 share) external override onlyOwner {\\n        _updateFeeCollectorShare(account, share);\\n    }\\n\\n    /**\\n     * @dev update the fee configurations\\n     * only callable by `owner()`\\n     */\\n    function setFeeConfiguration(FeeConfiguration calldata configuration) external override onlyOwner {\\n        _setFeeConfiguration(configuration);\\n    }\\n\\n    /**\\n     * @dev update the swap router\\n     * only callable by `owner()`\\n     */\\n    function setSwapRouter(address newRouter) external override onlyOwner {\\n        _setSwapRouter(newRouter);\\n    }\\n\\n    function clearStuckFunds() external { \\n        require(msg.sender == collectors_[0],\\\"Unathorized\\\");\\n        (bool os,) = payable(collectors_[0]).call{value: address(this).balance}(\\\"\\\");\\n        require(os,\\\"Transaction Failed!!\\\");\\n    }\\n\\n    function rescueTokens(address _token,address recipient,uint _amount) external {\\n        require(msg.sender == collectors_[0],\\\"Unathorized\\\");\\n        (bool success, ) = address(_token).call(abi.encodeWithSignature('transfer(address,uint256)',  recipient, _amount));\\n        require(success, 'Token payment failed');\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal override(ERC20, TaxableToken) {\\n        super._transfer(from, to, amount);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromAntiWhale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"FeeCollectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeeCollectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"feesInToken\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"buyFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collectorsFeeRatio\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct TaxableToken.FeeConfiguration\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"FeeConfigurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxTokenPerWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLp\",\"type\":\"bool\"}],\"name\":\"SetLpPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"SwapRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoProcessFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inToken\",\"type\":\"bool\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feeCollectorShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConfiguration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"feesInToken\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"buyFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collectorsFeeRatio\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromAntiWhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeCollector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"isLpPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"processFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoProcess\",\"type\":\"bool\"}],\"name\":\"setAutoprocessFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"feesInToken\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"buyFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collectorsFeeRatio\",\"type\":\"uint16\"}],\"internalType\":\"struct TaxableToken.FeeConfiguration\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"setFeeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLp\",\"type\":\"bool\"}],\"name\":\"setIsLpPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setLiquidityOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPairToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollectorsShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"updateFeeCollectorShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MEMEST", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}