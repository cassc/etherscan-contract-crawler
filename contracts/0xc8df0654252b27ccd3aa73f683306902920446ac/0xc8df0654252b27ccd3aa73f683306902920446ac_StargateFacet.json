{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"StargateFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"SafeMath.sol\\\";\\n\\nimport \\\"LibAsset.sol\\\";\\nimport \\\"ISo.sol\\\";\\nimport \\\"ICorrectSwap.sol\\\";\\nimport \\\"IStargate.sol\\\";\\nimport \\\"IStargateFactory.sol\\\";\\nimport \\\"IStargatePool.sol\\\";\\nimport \\\"IStargateFeeLibrary.sol\\\";\\nimport \\\"IStargateReceiver.sol\\\";\\nimport \\\"LibDiamond.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\nimport \\\"GenericErrors.sol\\\";\\nimport \\\"Swapper.sol\\\";\\nimport \\\"IStargateEthVault.sol\\\";\\nimport \\\"ILibSoFee.sol\\\";\\nimport \\\"LibCross.sol\\\";\\nimport \\\"LibBytes.sol\\\";\\n\\n/// @title Stargate Facet\\n/// @author OmniBTC\\n/// @notice Provides functionality for bridging through Stargate\\ncontract StargateFacet is Swapper, ReentrancyGuard, IStargateReceiver {\\n    using SafeMath for uint256;\\n    using LibBytes for bytes;\\n\\n    /// Storage ///\\n\\n    bytes32 internal constant NAMESPACE =\\n        hex\\\"2bd10e5dcb5694caec513d6d8fa1fd90f6a026e0e9320d7b6e2f8e49b93270d1\\\"; //keccak256(\\\"com.so.facets.stargate\\\");\\n\\n    // Data delimiter, represent \\\";\\\"\\n    uint8 public constant INTERDELIMITER = 59;\\n\\n    struct Storage {\\n        address stargate; // The stargate route address\\n        uint16 srcStargateChainId; // The stargate chain id of the source/current chain\\n        mapping(address => bool) allowedList; // Permission to allow calls to sgReceive\\n    }\\n\\n    /// Types ///\\n\\n    struct StargateData {\\n        uint256 srcStargatePoolId; // The stargate pool id of the source chain\\n        uint16 dstStargateChainId; // The stargate chain id of the destination chain\\n        uint256 dstStargatePoolId; // The stargate pool id of the destination chain\\n        uint256 minAmount; // The stargate min amount\\n        uint256 dstGasForSgReceive; // destination gas for sgReceive\\n        address payable dstSoDiamond; // destination SoDiamond address\\n    }\\n\\n    struct CachePayload {\\n        ISo.NormalizedSoData soData;\\n        LibSwap.NormalizedSwapData[] swapDataDst;\\n    }\\n\\n    struct CacheSoSwap {\\n        uint256 bridgeAmount;\\n        address bridgeToken;\\n        uint256 stargateValue;\\n        bytes payload;\\n    }\\n\\n    /// Events ///\\n\\n    event StargateInitialized(address stargate, uint256 chainId);\\n    event SetAllowedList(address router, bool isAllowed);\\n\\n    /// Init ///\\n\\n    /// @notice Initializes local variables for the Stargate facet\\n    /// @param stargate address of the canonical Stargate router contract\\n    /// @param chainId chainId of this deployed contract\\n    function initStargate(address stargate, uint16 chainId) external {\\n        LibDiamond.enforceIsContractOwner();\\n        if (stargate == address(0)) revert InvalidConfig();\\n        Storage storage s = getStorage();\\n        s.stargate = stargate;\\n        s.srcStargateChainId = chainId;\\n        s.allowedList[stargate] = true;\\n        s.allowedList[msg.sender] = true;\\n        emit StargateInitialized(stargate, chainId);\\n    }\\n\\n    /// @dev Set permissions to control calls to sgReceive\\n    function setAllowedAddress(address router, bool isAllowed) external {\\n        LibDiamond.enforceIsContractOwner();\\n        Storage storage s = getStorage();\\n        s.allowedList[router] = isAllowed;\\n        emit SetAllowedList(router, isAllowed);\\n    }\\n\\n    /// External Methods ///\\n\\n    /// @notice Bridges tokens via Stargate\\n    /// @param soDataNo Data for tracking cross-chain transactions and a\\n    ///                portion of the accompanying cross-chain messages\\n    /// @param swapDataSrcNo Contains a set of data required for Swap\\n    ///                     transactions on the source chain side\\n    /// @param stargateData Data used to call Stargate's router for swap\\n    /// @param swapDataDstNo Contains a set of Swap transaction data executed\\n    ///                     on the target chain.\\n    function soSwapViaStargate(\\n        ISo.NormalizedSoData calldata soDataNo,\\n        LibSwap.NormalizedSwapData[] calldata swapDataSrcNo,\\n        StargateData calldata stargateData,\\n        LibSwap.NormalizedSwapData[] calldata swapDataDstNo\\n    ) external payable nonReentrant {\\n        CacheSoSwap memory cache;\\n\\n        ISo.SoData memory soData = LibCross.denormalizeSoData(soDataNo);\\n        LibSwap.SwapData[] memory swapDataSrc = LibCross.denormalizeSwapData(\\n            swapDataSrcNo\\n        );\\n\\n        if (!LibAsset.isNativeAsset(soData.sendingAssetId)) {\\n            LibAsset.depositAsset(soData.sendingAssetId, soData.amount);\\n        }\\n\\n        if (_isEthPool(stargateData.srcStargatePoolId)) {\\n            cache.bridgeToken = address(0x0);\\n        } else {\\n            cache.bridgeToken = _getStargateTokenByPoolId(\\n                stargateData.srcStargatePoolId\\n            );\\n        }\\n\\n        if (swapDataSrc.length == 0) {\\n            transferWrappedAsset(\\n                soData.sendingAssetId,\\n                cache.bridgeToken,\\n                soData.amount\\n            );\\n            cache.bridgeAmount = soData.amount;\\n        } else {\\n            require(soData.amount == swapDataSrc[0].fromAmount, \\\"AmountErr\\\");\\n            cache.bridgeAmount = this.executeAndCheckSwaps(soData, swapDataSrc);\\n            transferWrappedAsset(\\n                swapDataSrc[swapDataSrc.length - 1].receivingAssetId,\\n                cache.bridgeToken,\\n                cache.bridgeAmount\\n            );\\n        }\\n        cache.stargateValue = _getStargateValue(soData);\\n        if (cache.bridgeToken == address(0x0)) {\\n            cache.stargateValue = cache.stargateValue + cache.bridgeAmount;\\n        }\\n        cache.payload = encodeStargatePayload(soDataNo, swapDataDstNo);\\n\\n        _startBridge(stargateData, cache);\\n\\n        emit SoTransferStarted(soData.transactionId);\\n    }\\n\\n    /// @dev Overload sgReceive of IStargateReceiver, called by stargate router\\n    function sgReceive(\\n        uint16,\\n        bytes memory,\\n        uint256,\\n        address token,\\n        uint256 amount,\\n        bytes memory payload\\n    ) external {\\n        Storage storage s = getStorage();\\n        require(s.allowedList[msg.sender], \\\"No permission\\\");\\n\\n        if (LibAsset.getOwnBalance(token) < amount) {\\n            // judge eth\\n            require(\\n                !IStargateEthVault(token).noUnwrapTo(address(this)),\\n                \\\"TokenErr\\\"\\n            );\\n            require(\\n                LibAsset.getOwnBalance(LibAsset.NATIVE_ASSETID) >= amount,\\n                \\\"NotEnough\\\"\\n            );\\n            token = LibAsset.NATIVE_ASSETID;\\n        }\\n\\n        (\\n            ISo.NormalizedSoData memory soDataNo,\\n            LibSwap.NormalizedSwapData[] memory swapDataDstNo\\n        ) = decodeStargatePayload(payload);\\n\\n        ISo.SoData memory soData = LibCross.denormalizeSoData(soDataNo);\\n        LibSwap.SwapData[] memory swapDataDst = LibCross.denormalizeSwapData(\\n            swapDataDstNo\\n        );\\n\\n        if (gasleft() < getTransferGas()) revert(\\\"Not enough gas!\\\");\\n\\n        uint256 swapGas = gasleft().sub(getTransferGas());\\n        try\\n            this.remoteSoSwap{gas: swapGas}(token, amount, soData, swapDataDst)\\n        {} catch Error(string memory revertReason) {\\n            transferUnwrappedAsset(token, token, amount, soData.receiver);\\n            emit SoTransferFailed(\\n                soData.transactionId,\\n                revertReason,\\n                bytes(\\\"\\\")\\n            );\\n        } catch (bytes memory returnData) {\\n            transferUnwrappedAsset(token, token, amount, soData.receiver);\\n            emit SoTransferFailed(soData.transactionId, \\\"\\\", returnData);\\n        }\\n    }\\n\\n    /// @dev For internal calls only, do not add it to DiamondCut,\\n    ///      convenient for sgReceive to catch exceptions\\n    function remoteSoSwap(\\n        address token,\\n        uint256 amount,\\n        ISo.SoData calldata soData,\\n        LibSwap.SwapData[] memory swapDataDst\\n    ) external {\\n        require(msg.sender == address(this), \\\"NotDiamond\\\");\\n        uint256 soFee = getStargateSoFee(amount);\\n        if (soFee < amount) {\\n            amount = amount.sub(soFee);\\n        }\\n\\n        if (swapDataDst.length == 0) {\\n            if (soFee > 0) {\\n                transferUnwrappedAsset(\\n                    token,\\n                    soData.receivingAssetId,\\n                    soFee,\\n                    LibDiamond.contractOwner()\\n                );\\n            }\\n            transferUnwrappedAsset(\\n                token,\\n                soData.receivingAssetId,\\n                amount,\\n                soData.receiver\\n            );\\n            emit SoTransferCompleted(soData.transactionId, amount);\\n        } else {\\n            if (soFee > 0) {\\n                transferUnwrappedAsset(\\n                    token,\\n                    swapDataDst[0].sendingAssetId,\\n                    soFee,\\n                    LibDiamond.contractOwner()\\n                );\\n            }\\n            transferUnwrappedAsset(\\n                token,\\n                swapDataDst[0].sendingAssetId,\\n                amount,\\n                address(this)\\n            );\\n\\n            swapDataDst[0].fromAmount = amount;\\n\\n            address correctSwap = appStorage.correctSwapRouterSelectors;\\n\\n            if (correctSwap != address(0)) {\\n                swapDataDst[0].callData = ICorrectSwap(correctSwap).correctSwap(\\n                    swapDataDst[0].callData,\\n                    swapDataDst[0].fromAmount\\n                );\\n            }\\n\\n            uint256 amountFinal = this.executeAndCheckSwaps(\\n                soData,\\n                swapDataDst\\n            );\\n            transferUnwrappedAsset(\\n                swapDataDst[swapDataDst.length - 1].receivingAssetId,\\n                soData.receivingAssetId,\\n                amountFinal,\\n                soData.receiver\\n            );\\n            emit SoTransferCompleted(soData.transactionId, amountFinal);\\n        }\\n    }\\n\\n    /// @dev Simplifies evaluation of the target chain calls sgReceive's\\n    ///      gas to facilitate building applications in the upper layers.\\n    function sgReceiveForGas(\\n        ISo.NormalizedSoData calldata soDataNo,\\n        uint256 dstStargatePoolId,\\n        LibSwap.NormalizedSwapData[] calldata swapDataDstNo\\n    ) external {\\n        address token = _getStargateTokenByPoolId(dstStargatePoolId);\\n        uint256 amount = LibAsset.getOwnBalance(token);\\n\\n        if (amount == 0) {\\n            // judge eth\\n            require(\\n                !IStargateEthVault(token).noUnwrapTo(address(this)),\\n                \\\"TokenErr\\\"\\n            );\\n            token = LibAsset.NATIVE_ASSETID;\\n            amount = LibAsset.getOwnBalance(token);\\n        }\\n\\n        amount = amount.div(10);\\n        require(amount > 0, \\\"LittleAmount\\\");\\n        bytes memory payload = getSgReceiveForGasPayload(\\n            soDataNo,\\n            swapDataDstNo\\n        );\\n\\n        // monitor sgReceive\\n        if (LibAsset.getOwnBalance(token) < amount) {\\n            require(\\n                !IStargateEthVault(token).noUnwrapTo(address(this)),\\n                \\\"TokenErr\\\"\\n            );\\n            require(\\n                LibAsset.getOwnBalance(LibAsset.NATIVE_ASSETID) >= amount,\\n                \\\"NotEnough\\\"\\n            );\\n            token = LibAsset.NATIVE_ASSETID;\\n        }\\n\\n        (\\n            ISo.NormalizedSoData memory _soDataNo,\\n            LibSwap.NormalizedSwapData[] memory _swapDataDstNo\\n        ) = decodeStargatePayload(payload);\\n\\n        ISo.SoData memory soData = LibCross.denormalizeSoData(_soDataNo);\\n\\n        // Not allow transfer to other\\n        soData.receiver = payable(address(this));\\n\\n        LibSwap.SwapData[] memory swapDataDst = LibCross.denormalizeSwapData(\\n            _swapDataDstNo\\n        );\\n\\n        if (gasleft() < getTransferGas()) revert(\\\"Not enough gas!\\\");\\n\\n        uint256 swapGas = gasleft().sub(getTransferGas());\\n\\n        this.remoteSoSwap{gas: swapGas}(token, amount, soData, swapDataDst);\\n    }\\n\\n    /// @dev Used to obtain stargate cross-chain fee\\n    function getStargateFee(\\n        ISo.NormalizedSoData calldata soDataNo,\\n        StargateData calldata stargateData,\\n        LibSwap.NormalizedSwapData[] calldata swapDataDstNo\\n    ) external view returns (uint256) {\\n        bytes memory payload = encodeStargatePayload(soDataNo, swapDataDstNo);\\n\\n        Storage storage s = getStorage();\\n        IStargate.lzTxObj memory lzTxParams = IStargate.lzTxObj(\\n            stargateData.dstGasForSgReceive,\\n            0,\\n            bytes(\\\"\\\")\\n        );\\n        (uint256 stargateFee, ) = IStargate(s.stargate).quoteLayerZeroFee(\\n            stargateData.dstStargateChainId,\\n            1,\\n            abi.encodePacked(stargateData.dstSoDiamond),\\n            payload,\\n            lzTxParams\\n        );\\n        return stargateFee;\\n    }\\n\\n    /// @dev Estimate the number of tokens that stargate can get\\n    function estimateStargateFinalAmount(\\n        StargateData calldata stargateData,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 amountSD = _convertStargateLDToSDByPoolId(\\n            stargateData.srcStargatePoolId,\\n            amount\\n        );\\n        IStargatePool.SwapObj memory swapObj = IStargateFeeLibrary(\\n            _getStargateFeeLibraryByPoolId(stargateData.srcStargatePoolId)\\n        ).getFees(\\n                stargateData.srcStargatePoolId,\\n                stargateData.dstStargatePoolId,\\n                stargateData.dstStargateChainId,\\n                address(0x0),\\n                amountSD\\n            );\\n        uint256 estimateAmountSD = amountSD\\n            .sub(swapObj.eqFee)\\n            .sub(swapObj.protocolFee)\\n            .sub(swapObj.lpFee)\\n            .add(swapObj.eqReward);\\n        return\\n            _convertStargateSDToLDByPoolId(\\n                stargateData.srcStargatePoolId,\\n                estimateAmountSD\\n            );\\n    }\\n\\n    /// Public Methods ///\\n\\n    /// @dev Get so fee\\n    function getStargateSoFee(uint256 amount) public view returns (uint256) {\\n        Storage storage s = getStorage();\\n        address soFee = appStorage.gatewaySoFeeSelectors[s.stargate];\\n        if (soFee == address(0x0)) {\\n            return 0;\\n        } else {\\n            return ILibSoFee(soFee).getFees(amount);\\n        }\\n    }\\n\\n    /// @dev Get amount from stargate before so fee\\n    function getAmountBeforeSoFee(uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Storage storage s = getStorage();\\n        address soFee = appStorage.gatewaySoFeeSelectors[s.stargate];\\n        if (soFee == address(0x0)) {\\n            return amount;\\n        } else {\\n            return ILibSoFee(soFee).getRestoredAmount(amount);\\n        }\\n    }\\n\\n    /// @dev Get remain gas for transfer\\n    function getTransferGas() public view returns (uint256) {\\n        Storage storage s = getStorage();\\n        address soFee = appStorage.gatewaySoFeeSelectors[s.stargate];\\n        if (soFee == address(0x0)) {\\n            return 30000;\\n        } else {\\n            return ILibSoFee(soFee).getTransferForGas();\\n        }\\n    }\\n\\n    /// @dev Get SgReceive for gas payload\\n    function getSgReceiveForGasPayload(\\n        ISo.NormalizedSoData calldata soDataNo,\\n        LibSwap.NormalizedSwapData[] calldata swapDataDstNo\\n    ) public pure returns (bytes memory) {\\n        return encodeStargatePayload(soDataNo, swapDataDstNo);\\n    }\\n\\n    /// CrossData\\n    // 1. length + transactionId(SoData)\\n    // 2. length + receiver(SoData)\\n    // 3. length + receivingAssetId(SoData)\\n    // 4. length + swapDataLength(u8)\\n    // 5. length + callTo(SwapData)\\n    // 6. length + sendingAssetId(SwapData)\\n    // 7. length + receivingAssetId(SwapData)\\n    // 8. length + callData(SwapData)\\n    function encodeStargatePayload(\\n        ISo.NormalizedSoData memory soData,\\n        LibSwap.NormalizedSwapData[] memory swapDataDst\\n    ) public pure returns (bytes memory) {\\n        bytes memory encodeData = abi.encodePacked(\\n            uint8(soData.transactionId.length),\\n            soData.transactionId,\\n            uint8(soData.receiver.length),\\n            soData.receiver,\\n            uint8(soData.receivingAssetId.length),\\n            soData.receivingAssetId\\n        );\\n\\n        if (swapDataDst.length > 0) {\\n            bytes memory swapLenBytes = LibCross.serializeU256WithHexStr(\\n                swapDataDst.length\\n            );\\n            encodeData = encodeData.concat(\\n                abi.encodePacked(uint8(swapLenBytes.length), swapLenBytes)\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < swapDataDst.length; i++) {\\n            encodeData = encodeData.concat(\\n                abi.encodePacked(\\n                    uint8(swapDataDst[i].callTo.length),\\n                    swapDataDst[i].callTo,\\n                    uint8(swapDataDst[i].sendingAssetId.length),\\n                    swapDataDst[i].sendingAssetId,\\n                    uint8(swapDataDst[i].receivingAssetId.length),\\n                    swapDataDst[i].receivingAssetId,\\n                    uint16(swapDataDst[i].callData.length),\\n                    swapDataDst[i].callData\\n                )\\n            );\\n        }\\n        return encodeData;\\n    }\\n\\n    /// CrossData\\n    // 1. length + transactionId(SoData)\\n    // 2. length + receiver(SoData)\\n    // 3. length + receivingAssetId(SoData)\\n    // 4. length + swapDataLength(u8)\\n    // 5. length + callTo(SwapData)\\n    // 6. length + sendingAssetId(SwapData)\\n    // 7. length + receivingAssetId(SwapData)\\n    // 8. length + callData(SwapData)\\n    function decodeStargatePayload(bytes memory stargatePayload)\\n        public\\n        pure\\n        returns (\\n            ISo.NormalizedSoData memory soData,\\n            LibSwap.NormalizedSwapData[] memory swapDataDst\\n        )\\n    {\\n        CachePayload memory data;\\n        uint256 index;\\n        uint256 nextLen;\\n\\n        nextLen = uint256(stargatePayload.toUint8(index));\\n        index += 1;\\n        data.soData.transactionId = stargatePayload.slice(index, nextLen);\\n        index += nextLen;\\n\\n        nextLen = uint256(stargatePayload.toUint8(index));\\n        index += 1;\\n        data.soData.receiver = stargatePayload.slice(index, nextLen);\\n        index += nextLen;\\n\\n        nextLen = uint256(stargatePayload.toUint8(index));\\n        index += 1;\\n        data.soData.receivingAssetId = stargatePayload.slice(index, nextLen);\\n        index += nextLen;\\n\\n        if (index < stargatePayload.length) {\\n            nextLen = uint256(stargatePayload.toUint8(index));\\n            index += 1;\\n            uint256 swap_len = LibCross.deserializeU256WithHexStr(\\n                stargatePayload.slice(index, nextLen)\\n            );\\n            index += nextLen;\\n\\n            data.swapDataDst = new LibSwap.NormalizedSwapData[](swap_len);\\n            for (uint256 i = 0; i < swap_len; i++) {\\n                nextLen = uint256(stargatePayload.toUint8(index));\\n                index += 1;\\n                data.swapDataDst[i].callTo = stargatePayload.slice(\\n                    index,\\n                    nextLen\\n                );\\n                data.swapDataDst[i].approveTo = data.swapDataDst[i].callTo;\\n                index += nextLen;\\n\\n                nextLen = uint256(stargatePayload.toUint8(index));\\n                index += 1;\\n                data.swapDataDst[i].sendingAssetId = stargatePayload.slice(\\n                    index,\\n                    nextLen\\n                );\\n                index += nextLen;\\n\\n                nextLen = uint256(stargatePayload.toUint8(index));\\n                index += 1;\\n                data.swapDataDst[i].receivingAssetId = stargatePayload.slice(\\n                    index,\\n                    nextLen\\n                );\\n                index += nextLen;\\n\\n                nextLen = uint256(stargatePayload.toUint16(index));\\n                index += 2;\\n                data.swapDataDst[i].callData = stargatePayload.slice(\\n                    index,\\n                    nextLen\\n                );\\n                index += nextLen;\\n            }\\n        }\\n        require(index == stargatePayload.length, \\\"LenErr\\\");\\n        return (data.soData, data.swapDataDst);\\n    }\\n\\n    /// Private Methods ///\\n\\n    /// @dev Conatains the business logic for the bridge via Stargate\\n    function _startBridge(\\n        StargateData calldata stargateData,\\n        CacheSoSwap memory cache\\n    ) private {\\n        Storage storage s = getStorage();\\n        address bridge = s.stargate;\\n\\n        // Do Stargate stuff\\n        if (s.srcStargateChainId == stargateData.dstStargateChainId)\\n            revert CannotBridgeToSameNetwork();\\n\\n        // Give Stargate approval to bridge tokens\\n        if (cache.bridgeToken != address(0x0)) {\\n            LibAsset.maxApproveERC20(\\n                IERC20(\\n                    _getStargateTokenByPoolId(stargateData.srcStargatePoolId)\\n                ),\\n                bridge,\\n                cache.bridgeAmount\\n            );\\n        }\\n        IStargate.lzTxObj memory lzTxParams = IStargate.lzTxObj(\\n            stargateData.dstGasForSgReceive,\\n            0,\\n            bytes(\\\"\\\")\\n        );\\n        bytes memory to = abi.encodePacked(stargateData.dstSoDiamond);\\n        IStargate(bridge).swap{value: cache.stargateValue}(\\n            stargateData.dstStargateChainId,\\n            stargateData.srcStargatePoolId,\\n            stargateData.dstStargatePoolId,\\n            payable(msg.sender),\\n            cache.bridgeAmount,\\n            stargateData.minAmount,\\n            lzTxParams,\\n            to,\\n            cache.payload\\n        );\\n    }\\n\\n    /// @dev Calculate the fee for paying the stargate bridge\\n    function _getStargateValue(SoData memory soData)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        if (LibAsset.isNativeAsset(soData.sendingAssetId)) {\\n            require(msg.value > soData.amount, \\\"NotEnough\\\");\\n            return msg.value.sub(soData.amount);\\n        } else {\\n            return msg.value;\\n        }\\n    }\\n\\n    /// @dev Is eth pool address by poolId\\n    function _isEthPool(uint256 _srcPoolId) internal view returns (bool) {\\n        Storage storage s = getStorage();\\n        return\\n            IStargate(s.stargate).stargateEthVaults(_srcPoolId) != address(0);\\n    }\\n\\n    /// @dev Get stargate pool address by poolId\\n    function _getStargatePoolByPoolId(uint256 poolId)\\n        private\\n        view\\n        returns (address)\\n    {\\n        Storage storage s = getStorage();\\n        address factory = IStargate(s.stargate).factory();\\n        return IStargateFactory(factory).getPool(poolId);\\n    }\\n\\n    /// @dev Get stargate bridge token address by poolId\\n    function _getStargateTokenByPoolId(uint256 poolId)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return IStargatePool(_getStargatePoolByPoolId(poolId)).token();\\n    }\\n\\n    /// @dev Get stargate bridge fee library address by poolId\\n    function _getStargateFeeLibraryByPoolId(uint256 poolId)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return IStargatePool(_getStargatePoolByPoolId(poolId)).feeLibrary();\\n    }\\n\\n    /// @dev Get stargate convert rate by poolId\\n    function _getStargateConvertRateByPoolId(uint256 poolId)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return IStargatePool(_getStargatePoolByPoolId(poolId)).convertRate();\\n    }\\n\\n    /// @dev Get stargate convert LD to SD poolId\\n    function _convertStargateLDToSDByPoolId(uint256 poolId, uint256 amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return amount.div(_getStargateConvertRateByPoolId(poolId));\\n    }\\n\\n    /// @dev Get stargate convert SD to LD poolId\\n    function _convertStargateSDToLDByPoolId(uint256 poolId, uint256 amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return amount.mul(_getStargateConvertRateByPoolId(poolId));\\n    }\\n\\n    /// @dev fetch local storage\\n    function getStorage() private pure returns (Storage storage s) {\\n        bytes32 namespace = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            s.slot := namespace\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"LibAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\nimport {NullAddrIsNotAnERC20Token, NullAddrIsNotAValidSpender, NoTransferToNullAddress, InvalidAmount, NativeValueWithERC, NativeAssetTransferFailed} from \\\"GenericErrors.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IERC20.sol\\\";\\n\\n/// @title LibAsset\\n/// @author Connext <support@connext.network>\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of assets, including accounting for the native asset `assetId`\\n///         conventions and any noncompliant ERC20 transfers\\nlibrary LibAsset {\\n    uint256 private constant MAX_INT = type(uint256).max;\\n\\n    address internal constant NULL_ADDRESS =\\n        0x0000000000000000000000000000000000000000; //address(0)\\n\\n    /// @dev All native assets use the empty address for their asset id\\n    ///      by convention\\n\\n    address internal constant NATIVE_ASSETID = NULL_ADDRESS; //address(0)\\n\\n    /// @notice Gets the balance of the inheriting contract for the given asset\\n    /// @param assetId The asset identifier to get the balance of\\n    /// @return Balance held by contracts using this library\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return\\n            assetId == NATIVE_ASSETID\\n                ? address(this).balance\\n                : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    /// @notice Transfers ether from the inheriting contract to a given\\n    ///         recipient\\n    /// @param recipient Address to send ether to\\n    /// @param amount Amount to send to given recipient\\n    function transferNativeAsset(address payable recipient, uint256 amount)\\n        private\\n    {\\n        if (recipient == NULL_ADDRESS) revert NoTransferToNullAddress();\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) revert NativeAssetTransferFailed();\\n    }\\n\\n    /// @notice Gives MAX approval for another address to spend tokens\\n    /// @param assetId Token address to transfer\\n    /// @param spender Address to give spend approval to\\n    /// @param amount Amount to approve for spending\\n    function maxApproveERC20(\\n        IERC20 assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(assetId) == NATIVE_ASSETID) return;\\n        if (spender == NULL_ADDRESS) revert NullAddrIsNotAValidSpender();\\n        uint256 allowance = assetId.allowance(address(this), spender);\\n        if (allowance < amount)\\n            SafeERC20.safeApprove(IERC20(assetId), spender, MAX_INT);\\n    }\\n\\n    /// @notice Transfers tokens from the inheriting contract to a given\\n    ///         recipient\\n    /// @param assetId Token address to transfer\\n    /// @param recipient Address to send token to\\n    /// @param amount Amount to send to given recipient\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        if (isNativeAsset(assetId)) revert NullAddrIsNotAnERC20Token();\\n        SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n    }\\n\\n    /// @notice Transfers tokens from a sender to a given recipient\\n    /// @param assetId Token address to transfer\\n    /// @param from Address of sender/owner\\n    /// @param to Address of recipient/spender\\n    /// @param amount Amount to transfer from owner to spender\\n    function transferFromERC20(\\n        address assetId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (assetId == NATIVE_ASSETID) revert NullAddrIsNotAnERC20Token();\\n        if (to == NULL_ADDRESS) revert NoTransferToNullAddress();\\n        SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n    }\\n\\n    /// @notice Deposits an asset into the contract and performs checks to avoid NativeValueWithERC\\n    /// @param tokenId Token to deposit\\n    /// @param amount Amount to deposit\\n    /// @param isNative Wether the token is native or ERC20\\n    function depositAsset(\\n        address tokenId,\\n        uint256 amount,\\n        bool isNative\\n    ) internal {\\n        if (amount == 0) revert InvalidAmount();\\n        if (isNative) {\\n            if (msg.value != amount) revert InvalidAmount();\\n        } else {\\n            //            if (msg.value != 0) revert NativeValueWithERC();\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(tokenId);\\n            LibAsset.transferFromERC20(\\n                tokenId,\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n            if (LibAsset.getOwnBalance(tokenId) - _fromTokenBalance != amount)\\n                revert InvalidAmount();\\n        }\\n    }\\n\\n    /// @notice Overload for depositAsset(address tokenId, uint256 amount, bool isNative)\\n    /// @param tokenId Token to deposit\\n    /// @param amount Amount to deposit\\n    function depositAsset(address tokenId, uint256 amount) internal {\\n        return depositAsset(tokenId, amount, tokenId == NATIVE_ASSETID);\\n    }\\n\\n    /// @notice Determines whether the given assetId is the native asset\\n    /// @param assetId The asset identifier to evaluate\\n    /// @return Boolean indicating if the asset is the native asset\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\n        return assetId == NATIVE_ASSETID;\\n    }\\n\\n    /// @notice Wrapper function to transfer a given asset (native or erc20) to\\n    ///         some recipient. Should handle all non-compliant return value\\n    ///         tokens as well by using the SafeERC20 contract by open zeppelin.\\n    /// @param assetId Asset id for transfer (address(0) for native asset,\\n    ///                token address for erc20s)\\n    /// @param recipient Address to send asset to\\n    /// @param amount Amount to send to given recipient\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        (assetId == NATIVE_ASSETID)\\n            ? transferNativeAsset(recipient, amount)\\n            : transferERC20(assetId, recipient, amount);\\n    }\\n\\n    /// @dev Checks whether the given address is a contract and contains code\\n    function isContract(address contractAddr) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(contractAddr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nerror InvalidAmount(); // 0x2c5211c6\\nerror TokenAddressIsZero(); // 0xdc2e5e8d\\nerror CannotBridgeToSameNetwork(); // 0x4ac09ad3\\nerror ZeroPostSwapBalance(); // 0xf74e8909\\nerror InvalidBridgeConfigLength(); // 0x10502ef9\\nerror NoSwapDataProvided(); // 0x0503c3ed\\nerror NotSupportedSwapRouter(); // 0xe986f686\\nerror NativeValueWithERC(); // 0x003f45b5\\nerror ContractCallNotAllowed(); // 0x94539804\\nerror NullAddrIsNotAValidSpender(); // 0x63ba9bff\\nerror NullAddrIsNotAnERC20Token(); // 0xd1bebf0c\\nerror NoTransferToNullAddress(); // 0x21f74345\\nerror NativeAssetTransferFailed(); // 0x5a046737\\nerror InvalidContract(); // 0x6eefed20\\nerror InvalidConfig(); // 0x35be3ac8\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ISo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface ISo {\\n    /// Structs ///\\n\\n    struct SoData {\\n        bytes32 transactionId; // unique identification id\\n        address payable receiver; // token receiving account\\n        uint16 sourceChainId; // source chain id\\n        address sendingAssetId; // The starting token address of the source chain\\n        uint16 destinationChainId; // destination chain id\\n        address receivingAssetId; // The final token address of the destination chain\\n        uint256 amount; // User enters amount\\n    }\\n\\n    struct NormalizedSoData {\\n        bytes transactionId; // unique identification id\\n        bytes receiver; // token receiving account\\n        uint16 sourceChainId; // source chain id\\n        bytes sendingAssetId; // The starting token address of the source chain\\n        uint16 destinationChainId; // destination chain id\\n        bytes receivingAssetId; // The final token address of the destination chain\\n        uint256 amount; // User enters amount\\n    }\\n\\n    /// Events ///\\n\\n    event SoTransferStarted(bytes32 indexed transactionId);\\n\\n    event SoTransferFailed(\\n        bytes32 indexed transactionId,\\n        string revertReason,\\n        bytes otherReason\\n    );\\n\\n    event SoTransferCompleted(\\n        bytes32 indexed transactionId,\\n        uint256 receiveAmount\\n    );\\n}\\n\"\r\n    },\r\n    \"ICorrectSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\ninterface ICorrectSwap {\\n    function correctSwap(bytes calldata, uint256)\\n        external\\n        pure\\n        returns (bytes memory);\\n\\n    function fixMinAmount(bytes calldata, uint256)\\n        external\\n        view\\n        returns (uint256, bytes memory);\\n}\\n\"\r\n    },\r\n    \"IStargate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\ninterface IStargate {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    struct CachedSwap {\\n        address token;\\n        uint256 amountLD;\\n        address to;\\n        bytes payload;\\n    }\\n\\n    event Revert(\\n        uint8 bridgeFunctionType,\\n        uint16 chainId,\\n        bytes srcAddress,\\n        uint256 nonce\\n    );\\n    event CachedSwapSaved(\\n        uint16 chainId,\\n        bytes srcAddress,\\n        uint256 nonce,\\n        bytes reason\\n    );\\n    event RevertRedeemLocal(\\n        uint16 srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        bytes to,\\n        uint256 redeemAmountSD,\\n        uint256 mintAmountSD,\\n        uint256 indexed nonce,\\n        bytes indexed srcAddress\\n    );\\n    event RedeemLocalCallback(\\n        uint16 srcChainId,\\n        bytes indexed srcAddress,\\n        uint256 indexed nonce,\\n        uint256 srcPoolId,\\n        uint256 dstPoolId,\\n        address to,\\n        uint256 amountSD,\\n        uint256 mintAmountSD\\n    );\\n\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(\\n        uint16 _srcPoolId,\\n        uint256 _amountLP,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function stargateEthVaults(uint256 _srcPoolId)\\n        external\\n        view\\n        returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (CachedSwap memory);\\n\\n    function clearCachedSwap(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IStargateFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\ninterface IStargateFactory {\\n    function allPoolsLength() external view returns (uint256);\\n\\n    function allPools(uint256 index) external view returns (address);\\n\\n    function getPool(uint256 poolId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"IStargatePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\ninterface IStargatePool {\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct ChainPath {\\n        bool ready; // indicate if the counter chainPath has been created.\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        uint256 weight;\\n        uint256 balance;\\n        uint256 lkb;\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    struct SwapObj {\\n        uint256 amount;\\n        uint256 eqFee;\\n        uint256 eqReward;\\n        uint256 lpFee;\\n        uint256 protocolFee;\\n        uint256 lkbRemove;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Mint(\\n        address to,\\n        uint256 amountLP,\\n        uint256 amountSD,\\n        uint256 mintFeeAmountSD\\n    );\\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocalCallback(\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _amountToMintSD\\n    );\\n    event Swap(\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        address from,\\n        uint256 amountSD,\\n        uint256 eqReward,\\n        uint256 eqFee,\\n        uint256 protocolFee,\\n        uint256 lpFee\\n    );\\n    event SendCredits(\\n        uint16 dstChainId,\\n        uint256 dstPoolId,\\n        uint256 credits,\\n        uint256 idealBalance\\n    );\\n    event RedeemRemote(\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        address from,\\n        uint256 amountLP,\\n        uint256 amountSD\\n    );\\n    event RedeemLocal(\\n        address from,\\n        uint256 amountLP,\\n        uint256 amountSD,\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        bytes to\\n    );\\n    event InstantRedeemLocal(\\n        address from,\\n        uint256 amountLP,\\n        uint256 amountSD,\\n        address to\\n    );\\n    event CreditChainPath(\\n        uint16 chainId,\\n        uint256 srcPoolId,\\n        uint256 amountSD,\\n        uint256 idealBalance\\n    );\\n    event SwapRemote(\\n        address to,\\n        uint256 amountSD,\\n        uint256 protocolFee,\\n        uint256 dstFee\\n    );\\n    event WithdrawRemote(\\n        uint16 srcChainId,\\n        uint256 srcPoolId,\\n        uint256 swapAmount,\\n        uint256 mintAmount\\n    );\\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\\n    event FeesUpdated(uint256 mintFeeBP);\\n    event FeeLibraryUpdated(address feeLibraryAddr);\\n    event StopSwapUpdated(bool swapStop);\\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\\n    event DeltaParamUpdated(\\n        bool batched,\\n        uint256 swapDeltaBP,\\n        uint256 lpDeltaBP,\\n        bool defaultSwapMode,\\n        bool defaultLPMode\\n    );\\n\\n    function chainPaths(uint256 index) external view returns (ChainPath memory);\\n\\n    function getChainPathsLength() external view returns (uint256);\\n\\n    function getChainPath(uint16 _dstChainId, uint256 _dstPoolId)\\n        external\\n        view\\n        returns (ChainPath memory);\\n\\n    function convertRate() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function feeLibrary() external view returns (address);\\n\\n    function poolId() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IStargateFeeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"IStargatePool.sol\\\";\\n\\ninterface IStargateFeeLibrary {\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external view returns (IStargatePool.SwapObj memory s);\\n\\n    function getVersion() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"IStargateReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IDiamondCut} from \\\"IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress)\\n        internal\\n    {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\n            .facetAddresses\\n            .length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\n/// @title Reentrancy Guard\\n/// @author LI.FI (https://li.fi)\\n/// @notice Abstract contract to provide protection against reentrancy\\nabstract contract ReentrancyGuard {\\n    /// Storage ///\\n\\n    bytes32 private constant NAMESPACE =\\n        hex\\\"a65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b\\\";\\n\\n    /// Types ///\\n\\n    struct ReentrancyStorage {\\n        uint256 status;\\n    }\\n\\n    /// Errors ///\\n\\n    error ReentrancyError();\\n\\n    /// Constants ///\\n\\n    uint256 private constant _NOT_ENTERED = 0;\\n    uint256 private constant _ENTERED = 1;\\n\\n    /// Modifiers ///\\n\\n    modifier nonReentrant() {\\n        ReentrancyStorage storage s = reentrancyStorage();\\n        if (s.status == _ENTERED) revert ReentrancyError();\\n        s.status = _ENTERED;\\n        _;\\n        s.status = _NOT_ENTERED;\\n    }\\n\\n    /// Private Methods ///\\n\\n    /// @dev fetch local storage\\n    function reentrancyStorage()\\n        private\\n        pure\\n        returns (ReentrancyStorage storage data)\\n    {\\n        bytes32 position = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {IWETH} from \\\"IWETH.sol\\\";\\nimport {ISo} from \\\"ISo.sol\\\";\\nimport {ICorrectSwap} from \\\"ICorrectSwap.sol\\\";\\nimport {LibSwap} from \\\"LibSwap.sol\\\";\\nimport {LibAsset} from \\\"LibAsset.sol\\\";\\nimport {LibUtil} from \\\"LibUtil.sol\\\";\\nimport {LibStorage} from \\\"LibStorage.sol\\\";\\nimport {LibAsset} from \\\"LibAsset.sol\\\";\\nimport {InvalidAmount, ContractCallNotAllowed, NoSwapDataProvided, NotSupportedSwapRouter} from \\\"GenericErrors.sol\\\";\\n\\n/// @title Swapper\\n/// @notice Abstract contract to provide swap functionality\\ncontract Swapper is ISo {\\n    /// Storage ///\\n\\n    LibStorage internal appStorage;\\n\\n    struct CacheSwapInnerParam {\\n        LibSwap.SwapData currentSwapData;\\n        uint256 fromAmount;\\n        uint256 minAmount;\\n        uint256 swapBalance;\\n        address receivedToken;\\n    }\\n\\n    struct CacheSwapParam {\\n        address correctSwap;\\n        uint256[] sliceIndex;\\n        uint256 deltaFromAmount;\\n        uint256 deltaMinAmount;\\n        uint256 startIndex;\\n        uint256 endIndex;\\n        bool flag;\\n        uint256 fromAmount;\\n        uint256 minAmount;\\n    }\\n\\n    /// External Methods ///\\n\\n    /// @dev Validates input before executing swaps\\n    /// @param soData So tracking data\\n    /// @param swapData Array of data used to execute swaps\\n    function executeAndCheckSwaps(\\n        SoData memory soData,\\n        LibSwap.SwapData[] calldata swapData\\n    ) external returns (uint256) {\\n        require(msg.sender == address(this), \\\"NotDiamond\\\");\\n        uint256 nSwaps = swapData.length;\\n        if (nSwaps == 0) revert NoSwapDataProvided();\\n        address finalTokenId = swapData[swapData.length - 1].receivingAssetId;\\n        uint256 swapBalance = LibAsset.getOwnBalance(finalTokenId);\\n        _executeSwaps(soData, swapData);\\n        swapBalance = LibAsset.getOwnBalance(finalTokenId) - swapBalance;\\n        if (swapBalance == 0) revert InvalidAmount();\\n        return swapBalance;\\n    }\\n\\n    /// @dev Validates input before executing swaps. Support dynamic slice swap\\n    /// @param soData So tracking data\\n    /// @param swapData Array of data used to execute swaps\\n    function executeAndCheckSwapsV2(\\n        SoData memory soData,\\n        LibSwap.SwapData[] calldata swapData\\n    ) external returns (uint256) {\\n        require(msg.sender == address(this), \\\"NotDiamond\\\");\\n        uint256 nSwaps = swapData.length;\\n        if (nSwaps == 0) revert NoSwapDataProvided();\\n        address finalTokenId = swapData[swapData.length - 1].receivingAssetId;\\n        uint256 swapBalance = LibAsset.getOwnBalance(finalTokenId);\\n        _executeSwapsV2(soData, swapData);\\n        swapBalance = LibAsset.getOwnBalance(finalTokenId) - swapBalance;\\n        if (swapBalance == 0) revert InvalidAmount();\\n        return swapBalance;\\n    }\\n\\n    function libSwap(bytes32 transactionId, LibSwap.SwapData memory _swapData)\\n        external\\n    {\\n        LibSwap.swap(transactionId, _swapData);\\n    }\\n\\n    /// Internal Methods ///\\n\\n    /// @dev Convert eth to wrapped eth and Transfer.\\n    function transferWrappedAsset(\\n        address currentAssetId,\\n        address expectAssetId,\\n        uint256 amount\\n    ) internal {\\n        if (currentAssetId == expectAssetId) {\\n            require(\\n                LibAsset.getOwnBalance(currentAssetId) >= amount,\\n                \\\"NotEnough\\\"\\n            );\\n            return;\\n        }\\n\\n        if (LibAsset.isNativeAsset(currentAssetId)) {\\n            // eth -> weth\\n            try IWETH(expectAssetId).deposit{value: amount}() {} catch {\\n                revert(\\\"DepositErr\\\");\\n            }\\n        } else if (LibAsset.isNativeAsset(expectAssetId)) {\\n            // weth -> eth\\n            try IWETH(currentAssetId).withdraw(amount) {} catch {\\n                revert(\\\"WithdrawErr\\\");\\n            }\\n        } else {\\n            // weth -> eth -> weth\\n            if (currentAssetId != expectAssetId) {\\n                try IWETH(currentAssetId).withdraw(amount) {} catch {\\n                    revert(\\\"WithdrawDepositErr\\\");\\n                }\\n                try IWETH(expectAssetId).deposit{value: amount}() {} catch {\\n                    revert(\\\"WithdrawDepositErr\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Convert wrapped eth to eth and Transfer.\\n    function transferUnwrappedAsset(\\n        address currentAssetId,\\n        address expectAssetId,\\n        uint256 amount,\\n        address receiver\\n    ) internal {\\n        if (LibAsset.isNativeAsset(expectAssetId)) {\\n            if (currentAssetId != expectAssetId) {\\n                try IWETH(currentAssetId).withdraw(amount) {} catch {\\n                    revert(\\\"WithdrawErr\\\");\\n                }\\n            }\\n        } else {\\n            require(currentAssetId == expectAssetId, \\\"AssetIdErr\\\");\\n        }\\n        if (receiver != address(this)) {\\n            require(\\n                LibAsset.getOwnBalance(expectAssetId) >= amount,\\n                \\\"NotEnough\\\"\\n            );\\n            LibAsset.transferAsset(expectAssetId, payable(receiver), amount);\\n        }\\n    }\\n\\n    /// @dev Find swap slice\\n    /// @param swapData Array of data used to execute swaps\\n    function _getSwapAmount(LibSwap.SwapData[] memory swapData)\\n        internal\\n        returns (uint256)\\n    {\\n        address sendingAssetId = swapData[0].sendingAssetId;\\n        uint256 amount;\\n        for (uint256 i = 0; i < swapData.length; i++) {\\n            if (\\n                swapData[i].sendingAssetId == sendingAssetId &&\\n                swapData[i].fromAmount > 0\\n            ) {\\n                amount += swapData[i].fromAmount;\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    /// Private Methods ///\\n\\n    /// @dev Executes swaps and checks that DEXs used are in the allowList\\n    /// @param soData So tracking data\\n    /// @param swapData Array of data used to execute swaps\\n    /// @param startIndex Start index used to execute swaps\\n    /// @param endIndex End index used to execute swaps\\n    /// @param deltaFromAmount Delta fromAmount used to execute swaps,\\n    /// @param deltaMinAmount Delta minAmount used to execute swaps,\\n    /// @param correctSwap Correct swap address\\n    function _executeSwapsInner(\\n        SoData memory soData,\\n        LibSwap.SwapData[] calldata swapData,\\n        uint256 startIndex,\\n        uint256 endIndex,\\n        uint256 deltaFromAmount,\\n        uint256 deltaMinAmount,\\n        address correctSwap\\n    )\\n        private\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        CacheSwapInnerParam memory cache;\\n        cache.currentSwapData = swapData[startIndex];\\n        cache.fromAmount = cache.currentSwapData.fromAmount;\\n        (cache.minAmount, ) = ICorrectSwap(correctSwap).fixMinAmount(\\n            swapData[endIndex - 1].callData,\\n            deltaMinAmount\\n        );\\n        cache.swapBalance = cache.currentSwapData.fromAmount + deltaFromAmount;\\n\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            if (i + 1 == endIndex && deltaMinAmount > 0) {\\n                (, cache.currentSwapData.callData) = ICorrectSwap(correctSwap)\\n                    .fixMinAmount(\\n                        cache.currentSwapData.callData,\\n                        deltaMinAmount\\n                    );\\n            }\\n            if (cache.swapBalance != cache.currentSwapData.fromAmount) {\\n                cache.currentSwapData.fromAmount = cache.swapBalance;\\n                cache.currentSwapData.callData = ICorrectSwap(correctSwap)\\n                    .correctSwap(\\n                        cache.currentSwapData.callData,\\n                        cache.currentSwapData.fromAmount\\n                    );\\n            }\\n\\n            cache.receivedToken = cache.currentSwapData.receivingAssetId;\\n            cache.swapBalance = LibAsset.getOwnBalance(cache.receivedToken);\\n\\n            if (\\n                !(appStorage.dexAllowlist[cache.currentSwapData.approveTo] &&\\n                    appStorage.dexAllowlist[cache.currentSwapData.callTo] &&\\n                    appStorage.dexFuncSignatureAllowList[\\n                        bytes32(\\n                            LibUtil.getSlice(\\n                                cache.currentSwapData.callData,\\n                                0,\\n                                4\\n                            )\\n                        )\\n                    ])\\n            ) revert ContractCallNotAllowed();\\n\\n            try\\n                this.libSwap(soData.transactionId, cache.currentSwapData)\\n            {} catch {\\n                return (false, cache.fromAmount, cache.minAmount);\\n            }\\n\\n            cache.swapBalance =\\n                LibAsset.getOwnBalance(cache.receivedToken) -\\n                cache.swapBalance;\\n\\n            if (i + 1 < swapData.length) {\\n                cache.currentSwapData = swapData[i + 1];\\n            }\\n        }\\n        return (true, cache.fromAmount, cache.minAmount);\\n    }\\n\\n    /// @dev Executes swaps and checks that DEXs used are in the allowList\\n    /// @param soData So tracking data\\n    /// @param swapData Array of data used to execute swaps\\n    function _executeSwaps(\\n        SoData memory soData,\\n        LibSwap.SwapData[] calldata swapData\\n    ) private {\\n        address correctSwap = appStorage.correctSwapRouterSelectors;\\n        if (correctSwap == address(0)) revert NotSupportedSwapRouter();\\n        _executeSwapsInner(\\n            soData,\\n            swapData,\\n            0,\\n            swapData.length,\\n            0,\\n            0,\\n            correctSwap\\n        );\\n    }\\n\\n    /// @dev Find swap slice\\n    /// @param swapData Array of data used to execute swaps\\n    function _findSwapSlice(LibSwap.SwapData[] calldata swapData)\\n        private\\n        returns (uint256[] memory)\\n    {\\n        address sendingAssetId = swapData[0].sendingAssetId;\\n        uint256 sliceLength = 0;\\n        for (uint256 i = 0; i < swapData.length; i++) {\\n            if (\\n                swapData[i].sendingAssetId == sendingAssetId &&\\n                swapData[i].fromAmount > 0\\n            ) {\\n                sliceLength += 1;\\n            }\\n        }\\n\\n        uint256[] memory sliceIndex = new uint256[](sliceLength);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < swapData.length; i++) {\\n            if (\\n                swapData[i].sendingAssetId == sendingAssetId &&\\n                swapData[i].fromAmount > 0\\n            ) {\\n                sliceIndex[index] = i;\\n                index += 1;\\n            }\\n        }\\n        return sliceIndex;\\n    }\\n\\n    /// @dev Executes swaps and checks that DEXs used are in the allowList. Support dynamic slice swap\\n    /// @param soData So tracking data\\n    /// @param swapData Array of data used to execute swaps\\n    function _executeSwapsV2(\\n        SoData memory soData,\\n        LibSwap.SwapData[] calldata swapData\\n    ) private {\\n        CacheSwapParam memory cache;\\n        cache.correctSwap = appStorage.correctSwapRouterSelectors;\\n        if (cache.correctSwap == address(0)) revert NotSupportedSwapRouter();\\n        cache.sliceIndex = _findSwapSlice(swapData);\\n        for (uint256 k = 0; k < cache.sliceIndex.length; k++) {\\n            cache.startIndex = cache.sliceIndex[k];\\n            if (k + 1 == cache.sliceIndex.length) {\\n                cache.endIndex = swapData.length;\\n            } else {\\n                cache.endIndex = cache.sliceIndex[k + 1];\\n            }\\n            (\\n                bool flag,\\n                uint256 fromAmount,\\n                uint256 minAmount\\n            ) = _executeSwapsInner(\\n                    soData,\\n                    swapData,\\n                    cache.startIndex,\\n                    cache.endIndex,\\n                    cache.deltaFromAmount,\\n                    cache.deltaMinAmount,\\n                    cache.correctSwap\\n                );\\n            if (!flag) {\\n                cache.deltaFromAmount += fromAmount;\\n                cache.deltaMinAmount += minAmount;\\n            } else {\\n                cache.deltaFromAmount = 0;\\n                cache.deltaMinAmount = 0;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IWETH.sol\": {\r\n      \"content\": \"pragma solidity 0.8.13;\\n\\nimport \\\"IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"LibSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {LibAsset, IERC20} from \\\"LibAsset.sol\\\";\\nimport {LibUtil} from \\\"LibUtil.sol\\\";\\nimport {InvalidContract} from \\\"GenericErrors.sol\\\";\\n\\nlibrary LibSwap {\\n    error NoSwapFromZeroBalance();\\n\\n    struct SwapData {\\n        address callTo; // The swap address\\n        address approveTo; // The swap address\\n        address sendingAssetId; // The swap start token address\\n        address receivingAssetId; // The swap final token address\\n        uint256 fromAmount; // The swap start token amount\\n        bytes callData; // The swap callData\\n    }\\n\\n    struct NormalizedSwapData {\\n        bytes callTo; // The swap address\\n        bytes approveTo; // The swap address\\n        bytes sendingAssetId; // The swap start token address\\n        bytes receivingAssetId; // The swap final token address\\n        uint256 fromAmount; // The swap start token amount\\n        bytes callData; // The swap callData\\n    }\\n\\n    event AssetSwapped(\\n        bytes32 transactionId,\\n        address dex,\\n        address fromAssetId,\\n        address toAssetId,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        uint256 timestamp\\n    );\\n\\n    function swap(bytes32 transactionId, SwapData memory _swapData) internal {\\n        if (!LibAsset.isContract(_swapData.callTo)) revert InvalidContract();\\n        uint256 fromAmount = _swapData.fromAmount;\\n        if (fromAmount == 0) revert NoSwapFromZeroBalance();\\n        uint256 nativeValue = 0;\\n        address fromAssetId = _swapData.sendingAssetId;\\n        address toAssetId = _swapData.receivingAssetId;\\n        uint256 initialSendingAssetBalance = LibAsset.getOwnBalance(\\n            fromAssetId\\n        );\\n        uint256 initialReceivingAssetBalance = LibAsset.getOwnBalance(\\n            toAssetId\\n        );\\n        uint256 toDeposit = initialSendingAssetBalance < fromAmount\\n            ? fromAmount - initialSendingAssetBalance\\n            : 0;\\n\\n        if (!LibAsset.isNativeAsset(fromAssetId)) {\\n            LibAsset.maxApproveERC20(\\n                IERC20(fromAssetId),\\n                _swapData.approveTo,\\n                fromAmount\\n            );\\n            if (toDeposit != 0) {\\n                LibAsset.transferFromERC20(\\n                    fromAssetId,\\n                    msg.sender,\\n                    address(this),\\n                    toDeposit\\n                );\\n            }\\n        } else {\\n            nativeValue = fromAmount;\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory res) = _swapData.callTo.call{\\n            value: nativeValue\\n        }(_swapData.callData);\\n        if (!success) {\\n            string memory reason = LibUtil.getRevertMsg(res);\\n            revert(reason);\\n        }\\n\\n        emit AssetSwapped(\\n            transactionId,\\n            _swapData.callTo,\\n            _swapData.sendingAssetId,\\n            toAssetId,\\n            fromAmount,\\n            LibAsset.getOwnBalance(toAssetId) - initialReceivingAssetBalance,\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"LibUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"LibBytes.sol\\\";\\n\\nlibrary LibUtil {\\n    using LibBytes for bytes;\\n\\n    function getRevertMsg(bytes memory _res)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_res.length < 68) return \\\"Transaction reverted silently\\\";\\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\n    }\\n\\n    function getSlice(\\n        bytes memory _data,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal pure returns (bytes memory) {\\n        require(_start < _end && _end <= _data.length, \\\"DataLength error!\\\");\\n        bytes memory _out = bytes(\\\"\\\");\\n        for (uint256 i = _start; i < _end; i++) {\\n            _out = bytes.concat(_out, _data[i]);\\n        }\\n        return _out;\\n    }\\n}\\n\"\r\n    },\r\n    \"LibBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nlibrary LibBytes {\\n    // solhint-disable no-inline-assembly\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n    {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function indexOf(\\n        bytes memory _bytes,\\n        uint8 _e,\\n        uint256 _start\\n    ) internal pure returns (uint256) {\\n        while (_start < _bytes.length) {\\n            if (toUint8(_bytes, _start) == _e) {\\n                return _start;\\n            }\\n            _start += 1;\\n        }\\n        return _bytes.length;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        // solhint-disable-next-line no-empty-blocks\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"LibStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nstruct LibStorage {\\n    mapping(address => bool) dexAllowlist;\\n    mapping(bytes32 => bool) dexFuncSignatureAllowList;\\n    address[] dexs;\\n    // maps gateway facet addresses to sofee address\\n    mapping(address => address) gatewaySoFeeSelectors;\\n    // Storage correct swap address\\n    address correctSwapRouterSelectors;\\n}\\n\"\r\n    },\r\n    \"IStargateEthVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IStargateEthVault {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n    event TransferNative(address indexed src, address indexed dst, uint256 wad);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function noUnwrapTo(address) external view returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"ILibSoFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\ninterface ILibSoFee {\\n    function getFees(uint256 _amount) external view returns (uint256 s);\\n\\n    function getRestoredAmount(uint256 _amount)\\n        external\\n        view\\n        returns (uint256 r);\\n\\n    function getTransferForGas() external view returns (uint256);\\n\\n    function getVersion() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"LibCross.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport {ISo} from \\\"ISo.sol\\\";\\nimport {LibSwap} from \\\"LibSwap.sol\\\";\\nimport {LibBytes} from \\\"LibBytes.sol\\\";\\n\\nlibrary LibCross {\\n    using LibBytes for bytes;\\n\\n    function normalizeSoData(ISo.SoData memory soData)\\n        internal\\n        pure\\n        returns (ISo.NormalizedSoData memory)\\n    {\\n        ISo.NormalizedSoData memory data;\\n        data.transactionId = abi.encodePacked(soData.transactionId);\\n        data.receiver = abi.encodePacked(soData.receiver);\\n        data.sourceChainId = soData.sourceChainId;\\n        data.sendingAssetId = abi.encodePacked(soData.sendingAssetId);\\n        data.destinationChainId = soData.destinationChainId;\\n        data.receivingAssetId = abi.encodePacked(soData.receivingAssetId);\\n        data.amount = soData.amount;\\n\\n        return data;\\n    }\\n\\n    function tryAddress(bytes memory data) internal pure returns (address) {\\n        if (data.length == 20) {\\n            return data.toAddress(0);\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function denormalizeSoData(ISo.NormalizedSoData memory data)\\n        internal\\n        pure\\n        returns (ISo.SoData memory)\\n    {\\n        return\\n            ISo.SoData({\\n                transactionId: data.transactionId.toBytes32(0),\\n                receiver: payable(tryAddress(data.receiver)),\\n                sourceChainId: data.sourceChainId,\\n                sendingAssetId: tryAddress(data.sendingAssetId),\\n                destinationChainId: data.destinationChainId,\\n                receivingAssetId: tryAddress(data.receivingAssetId),\\n                amount: data.amount\\n            });\\n    }\\n\\n    function normalizeSwapData(LibSwap.SwapData[] memory swapData)\\n        internal\\n        pure\\n        returns (LibSwap.NormalizedSwapData[] memory)\\n    {\\n        LibSwap.NormalizedSwapData[]\\n            memory data = new LibSwap.NormalizedSwapData[](swapData.length);\\n\\n        for (uint256 i = 0; i < swapData.length; i++) {\\n            data[i].callTo = abi.encodePacked(swapData[i].callTo);\\n            data[i].approveTo = abi.encodePacked(swapData[i].approveTo);\\n            data[i].sendingAssetId = abi.encodePacked(\\n                swapData[i].sendingAssetId\\n            );\\n            data[i].receivingAssetId = abi.encodePacked(\\n                swapData[i].receivingAssetId\\n            );\\n            data[i].fromAmount = swapData[i].fromAmount;\\n            data[i].callData = abi.encodePacked(swapData[i].callData);\\n        }\\n\\n        return data;\\n    }\\n\\n    function denormalizeSwapData(LibSwap.NormalizedSwapData[] memory data)\\n        internal\\n        pure\\n        returns (LibSwap.SwapData[] memory)\\n    {\\n        LibSwap.SwapData[] memory swapData = new LibSwap.SwapData[](\\n            data.length\\n        );\\n        for (uint256 i = 0; i < swapData.length; i++) {\\n            swapData[i].callTo = data[i].callTo.toAddress(0);\\n            swapData[i].approveTo = data[i].approveTo.toAddress(0);\\n            swapData[i].sendingAssetId = data[i].sendingAssetId.toAddress(0);\\n            swapData[i].receivingAssetId = data[i].receivingAssetId.toAddress(\\n                0\\n            );\\n            swapData[i].fromAmount = data[i].fromAmount;\\n            swapData[i].callData = data[i].callData;\\n        }\\n        return swapData;\\n    }\\n\\n    function encodeNormalizedSoData(ISo.NormalizedSoData memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encodeData = abi.encodePacked(\\n            uint64(data.transactionId.length),\\n            data.transactionId,\\n            uint64(data.receiver.length),\\n            data.receiver,\\n            data.sourceChainId\\n        );\\n        // Avoid variable value1 is 1 slot(s) too deep;\\n        encodeData = encodeData.concat(\\n            abi.encodePacked(\\n                uint64(data.sendingAssetId.length),\\n                data.sendingAssetId,\\n                data.destinationChainId,\\n                uint64(data.receivingAssetId.length),\\n                data.receivingAssetId,\\n                data.amount\\n            )\\n        );\\n        return encodeData;\\n    }\\n\\n    function decodeNormalizedSoData(bytes memory soData)\\n        internal\\n        pure\\n        returns (ISo.NormalizedSoData memory)\\n    {\\n        ISo.NormalizedSoData memory data;\\n        uint256 index;\\n        uint256 nextLen;\\n\\n        nextLen = uint256(soData.toUint64(index));\\n        index += 8;\\n        data.transactionId = soData.slice(index, nextLen);\\n        index += nextLen;\\n\\n        nextLen = uint256(soData.toUint64(index));\\n        index += 8;\\n        data.receiver = soData.slice(index, nextLen);\\n        index += nextLen;\\n\\n        nextLen = 2;\\n        data.sourceChainId = soData.toUint16(index);\\n        index += nextLen;\\n\\n        nextLen = uint256(soData.toUint64(index));\\n        index += 8;\\n        data.sendingAssetId = soData.slice(index, nextLen);\\n        index += nextLen;\\n\\n        nextLen = 2;\\n        data.destinationChainId = soData.toUint16(index);\\n        index += nextLen;\\n\\n        nextLen = uint256(soData.toUint64(index));\\n        index += 8;\\n        data.receivingAssetId = soData.slice(index, nextLen);\\n        index += nextLen;\\n\\n        nextLen = 32;\\n        data.amount = soData.toUint256(index);\\n        index += nextLen;\\n\\n        require(index == soData.length, \\\"Length error\\\");\\n\\n        return data;\\n    }\\n\\n    function encodeNormalizedSwapData(LibSwap.NormalizedSwapData[] memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encodeData = bytes(\\\"\\\");\\n\\n        if (data.length > 0) {\\n            encodeData = abi.encodePacked(uint64(data.length));\\n        }\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            encodeData = encodeData.concat(\\n                abi.encodePacked(\\n                    uint64(data[i].callTo.length),\\n                    data[i].callTo,\\n                    uint64(data[i].approveTo.length),\\n                    data[i].approveTo,\\n                    uint64(data[i].sendingAssetId.length),\\n                    data[i].sendingAssetId\\n                )\\n            );\\n            // Avoid variable value1 is 1 slot(s) too deep;\\n            encodeData = encodeData.concat(\\n                abi.encodePacked(\\n                    uint64(data[i].receivingAssetId.length),\\n                    data[i].receivingAssetId,\\n                    data[i].fromAmount,\\n                    uint64(data[i].callData.length),\\n                    data[i].callData\\n                )\\n            );\\n        }\\n\\n        return encodeData;\\n    }\\n\\n    function decodeNormalizedSwapData(bytes memory swapData)\\n        internal\\n        pure\\n        returns (LibSwap.NormalizedSwapData[] memory)\\n    {\\n        uint256 index;\\n        uint256 nextLen;\\n\\n        nextLen = 8;\\n        uint256 swapLen = uint256(swapData.toUint64(index));\\n        index += nextLen;\\n\\n        LibSwap.NormalizedSwapData[]\\n            memory data = new LibSwap.NormalizedSwapData[](swapLen);\\n\\n        for (uint256 i = 0; i < swapLen; i++) {\\n            nextLen = uint256(swapData.toUint64(index));\\n            index += 8;\\n            data[i].callTo = swapData.slice(index, nextLen);\\n            index += nextLen;\\n\\n            nextLen = uint256(swapData.toUint64(index));\\n            index += 8;\\n            data[i].approveTo = swapData.slice(index, nextLen);\\n            index += nextLen;\\n\\n            nextLen = uint256(swapData.toUint64(index));\\n            index += 8;\\n            data[i].sendingAssetId = swapData.slice(index, nextLen);\\n            index += nextLen;\\n\\n            nextLen = uint256(swapData.toUint64(index));\\n            index += 8;\\n            data[i].receivingAssetId = swapData.slice(index, nextLen);\\n            index += nextLen;\\n\\n            nextLen = 32;\\n            data[i].fromAmount = swapData.toUint256(index);\\n            index += nextLen;\\n\\n            nextLen = uint256(swapData.toUint64(index));\\n            index += 8;\\n            data[i].callData = swapData.slice(index, nextLen);\\n            index += nextLen;\\n        }\\n\\n        require(index == swapData.length, \\\"Length error\\\");\\n\\n        return data;\\n    }\\n\\n    function serializeU256WithHexStr(uint256 data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory encodeData = abi.encodePacked(uint8(data & 0xFF));\\n        data = data >> 8;\\n\\n        while (data != 0) {\\n            encodeData = abi.encodePacked(uint8(data & 0xFF)).concat(\\n                encodeData\\n            );\\n            data = data >> 8;\\n        }\\n        return encodeData;\\n    }\\n\\n    function deserializeU256WithHexStr(bytes memory data)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 buf = 0;\\n        for (uint256 i = 0; i < data.length; i++) {\\n            buf = (buf << 8) + data.toUint8(i);\\n        }\\n        return buf;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"StargateFacet.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"CannotBridgeToSameNetwork\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractCallNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeAssetTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSwapDataProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSwapFromZeroBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTransferToNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSupportedSwapRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddrIsNotAValidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddrIsNotAnERC20Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"SetAllowedList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveAmount\",\"type\":\"uint256\"}],\"name\":\"SoTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revertReason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"otherReason\",\"type\":\"bytes\"}],\"name\":\"SoTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"SoTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stargate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"StargateInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERDELIMITER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"stargatePayload\",\"type\":\"bytes\"}],\"name\":\"decodeStargatePayload\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.NormalizedSoData\",\"name\":\"soData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approveTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.NormalizedSwapData[]\",\"name\":\"swapDataDst\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.NormalizedSoData\",\"name\":\"soData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approveTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.NormalizedSwapData[]\",\"name\":\"swapDataDst\",\"type\":\"tuple[]\"}],\"name\":\"encodeStargatePayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcStargatePoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstStargateChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstStargatePoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstGasForSgReceive\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"dstSoDiamond\",\"type\":\"address\"}],\"internalType\":\"struct StargateFacet.StargateData\",\"name\":\"stargateData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"estimateStargateFinalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.SoData\",\"name\":\"soData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.SwapData[]\",\"name\":\"swapData\",\"type\":\"tuple[]\"}],\"name\":\"executeAndCheckSwaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.SoData\",\"name\":\"soData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.SwapData[]\",\"name\":\"swapData\",\"type\":\"tuple[]\"}],\"name\":\"executeAndCheckSwapsV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountBeforeSoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.NormalizedSoData\",\"name\":\"soDataNo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approveTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.NormalizedSwapData[]\",\"name\":\"swapDataDstNo\",\"type\":\"tuple[]\"}],\"name\":\"getSgReceiveForGasPayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.NormalizedSoData\",\"name\":\"soDataNo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcStargatePoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstStargateChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstStargatePoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstGasForSgReceive\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"dstSoDiamond\",\"type\":\"address\"}],\"internalType\":\"struct StargateFacet.StargateData\",\"name\":\"stargateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approveTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.NormalizedSwapData[]\",\"name\":\"swapDataDstNo\",\"type\":\"tuple[]\"}],\"name\":\"getStargateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getStargateSoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stargate\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"initStargate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.SwapData\",\"name\":\"_swapData\",\"type\":\"tuple\"}],\"name\":\"libSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.SoData\",\"name\":\"soData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.SwapData[]\",\"name\":\"swapDataDst\",\"type\":\"tuple[]\"}],\"name\":\"remoteSoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"setAllowedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.NormalizedSoData\",\"name\":\"soDataNo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"dstStargatePoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approveTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.NormalizedSwapData[]\",\"name\":\"swapDataDstNo\",\"type\":\"tuple[]\"}],\"name\":\"sgReceiveForGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"transactionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"sourceChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"destinationChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISo.NormalizedSoData\",\"name\":\"soDataNo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approveTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.NormalizedSwapData[]\",\"name\":\"swapDataSrcNo\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcStargatePoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstStargateChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstStargatePoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstGasForSgReceive\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"dstSoDiamond\",\"type\":\"address\"}],\"internalType\":\"struct StargateFacet.StargateData\",\"name\":\"stargateData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approveTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sendingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receivingAssetId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.NormalizedSwapData[]\",\"name\":\"swapDataDstNo\",\"type\":\"tuple[]\"}],\"name\":\"soSwapViaStargate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "StargateFacet", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}