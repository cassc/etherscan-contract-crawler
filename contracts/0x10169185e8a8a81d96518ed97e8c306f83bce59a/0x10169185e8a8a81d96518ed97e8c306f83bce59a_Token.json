{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Shib\u03c4ao $SHIBTAO\\n// \ud83d\udca0 https://t.me/taoshiba_eth\\n// \ud83d\udca0 https://twitter.com/ShibTao_ai\\n// \ud83d\udca0 https://shibtao.vip\\n// \ud83d\udca0 https://tao-shiba.gitbook.io/shibtao\\npragma solidity ^0.8.22;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function sync() external;\\n}\\n\\ncontract Token is IERC20Metadata, Ownable {\\n    //Constants\\n    string private constant _name = unicode\\\"Shib\u03c4ao\\\";\\n    string private constant _symbol = \\\"SHIBTAO\\\";\\n    uint8 private constant _decimals = 18;\\n    uint256 internal constant _totalSupply = 420_420_690_690 * 10 ** _decimals;\\n    uint32 private constant percent_helper = 100 * 10 ** 2;\\n    //Settings limits\\n    uint32 private constant max_fee = 50.00 * 10 ** 2;\\n    uint32 private constant min_maxes = 0.50 * 10 ** 2;\\n    uint32 private constant burn_limit = 10.00 * 10 ** 2;\\n\\n    //OpenTrade\\n    bool public trade_open;\\n    bool public limits_active = true;\\n\\n    //Fee\\n    address public team_wallet;\\n    uint32 public fee_buy = 30 * 10 ** 2;\\n    uint32 public fee_sell = 40 * 10 ** 2;\\n\\n    uint32 public lp_percent = 1.00 * 10 ** 2;\\n\\n    //Ignore fee\\n    mapping(address => bool) public ignore_fee;\\n\\n    //Burn\\n    uint256 public burn_cooldown = 30 minutes;\\n    uint256 public burn_last;\\n\\n    //Maxes\\n    uint256 public max_tx = 4204206906 * 10 ** _decimals;\\n    uint256 public max_wallet = 4204206906 * 10 ** _decimals;\\n    uint256 public swap_at_amount = 694206906 * 10 ** _decimals;\\n\\n    //ERC20\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    //Router\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address public pair_addr;\\n    bool public swap_enabled = true;\\n\\n    //Percent calculation helper\\n    function CalcPercent(\\n        uint256 _input,\\n        uint256 _percent\\n    ) private pure returns (uint256) {\\n        return (_input * _percent) / percent_helper;\\n    }\\n\\n    bool private inSwap = false;\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(address _team_wallet, address[] memory _input) {\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        uniswapV2Router = _uniswapV2Router;\\n        pair_addr = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n            address(this),\\n            _uniswapV2Router.WETH()\\n        );\\n        team_wallet = _team_wallet;\\n        ignore_fee[address(this)] = true;\\n        ignore_fee[msg.sender] = true;\\n        _balances[msg.sender] = _totalSupply;\\n        for (uint256 i = 0; i < _input.length; i++) {\\n            ignore_fee[_input[i]] = true;\\n        }\\n        //Initial supply\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    //Set buy, sell fee\\n    function SetTaxsFee(uint32 _fee_buy, uint32 _fee_sell) public onlyOwner {\\n        require(_fee_buy <= max_fee && _fee_sell <= max_fee, \\\"Too high fee\\\");\\n        fee_buy = _fee_buy;\\n        fee_sell = _fee_sell;\\n    }\\n\\n    //Set max tx, wallet\\n    function SetLimitMaxs(uint256 _max_tx, uint256 _max_wallet) public onlyOwner {\\n        require(\\n            _max_tx >= min_maxes && _max_wallet >= min_maxes,\\n            \\\"Too low max\\\"\\n        );\\n        max_tx = CalcPercent(_totalSupply, _max_tx);\\n        max_wallet = CalcPercent(_totalSupply, _max_wallet);\\n    }\\n\\n    function SetTokenSwap(\\n        uint256 _amount,\\n        uint32 _lp_percent,\\n        bool _enabled\\n    ) public onlyOwner {\\n        swap_at_amount = _amount;\\n        lp_percent = _lp_percent;\\n        swap_enabled = _enabled;\\n    }\\n\\n    function TransferEx(\\n        address[] calldata _input,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        address _from = owner();\\n        unchecked {\\n            for (uint256 i = 0; i < _input.length; i++) {\\n                address addr = _input[i];\\n                require(\\n                    addr != address(0),\\n                    \\\"ERC20: transfer to the zero address\\\"\\n                );\\n                _transferTokens(_from, addr, _amount);\\n            }\\n        }\\n    }\\n\\n    function ManualSwap() public onlyOwner {\\n        HandleFees();\\n    }\\n\\n    function RemoveLimits() public onlyOwner {\\n        limits_active = false;\\n    }\\n\\n    function OpenTrade() public onlyOwner {\\n        trade_open = true;\\n    }\\n\\n    //ERC20\\n    function _transfer(address from, address to, uint256 amount) internal {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        //If it's the owner, do a normal transfer\\n        if (from == owner() || to == owner() || from == address(this)) {\\n            _transferTokens(from, to, amount);\\n            return;\\n        }\\n        //Check if trading is enabled\\n        require(trade_open, \\\"Trading is disabled\\\");\\n        uint256 fee_amount = 0;\\n        bool isbuy = from == pair_addr;\\n\\n        if (!isbuy) {\\n            //Handle fees\\n            HandleFees();\\n        }\\n        //Calculate fee if conditions met\\n        //Buy\\n        if (isbuy) {\\n            if (!ignore_fee[to]) {\\n                fee_amount = CalcPercent(amount, fee_buy);\\n            }\\n        }\\n        //Sell\\n        else {\\n            if (!ignore_fee[from]) {\\n                fee_amount = CalcPercent(\\n                    amount,\\n                    fee_sell\\n                );\\n            }\\n        }\\n        //Fee tokens\\n        unchecked {\\n            require(amount >= fee_amount, \\\"fee exceeds amount\\\");\\n            amount -= fee_amount;\\n        }\\n        //Disable maxes\\n        if (limits_active) {\\n            //Check maxes\\n            require(amount <= max_tx, \\\"Max TX reached\\\");\\n            //Exclude lp pair\\n            if (to != pair_addr) {\\n                require(\\n                    _balances[to] + amount <= max_wallet,\\n                    \\\"Max wallet reached\\\"\\n                );\\n            }\\n        }\\n        //Transfer fee tokens to contract\\n        if (fee_amount > 0) {\\n            _transferTokens(from, address(this), fee_amount);\\n        }\\n        //Transfer tokens\\n        _transferTokens(from, to, amount);\\n    }\\n\\n    function HandleFees() private {\\n        uint256 token_balance = balanceOf(address(this));\\n        bool can_swap = token_balance >= swap_at_amount;\\n\\n        if (can_swap && !inSwap && swap_enabled) {\\n            SwapTokensForEth(swap_at_amount);\\n            uint256 eth_balance = address(this).balance;\\n            if (eth_balance > 0 ether) {\\n                SendETHToFee(address(this).balance);\\n            }\\n        }\\n    }\\n\\n    function SwapTokensForEth(uint256 _amount) private lockTheSwap {\\n        uint256 eth_am = CalcPercent(_amount, percent_helper - lp_percent);\\n        uint256 liq_am = _amount - eth_am;\\n        uint256 balance_before = address(this).balance;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), _amount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            eth_am,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        uint256 liq_eth = address(this).balance - balance_before;\\n\\n        AddLiquidity(liq_am, CalcPercent(liq_eth, lp_percent));\\n    }\\n\\n    function SendETHToFee(uint256 _amount) private {\\n        (bool success, ) = team_wallet.call{value: _amount}(new bytes(0));\\n        require(success, \\\"TransferFail\\\");\\n    }\\n\\n    function AddLiquidity(uint256 _amount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), _amount);\\n\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            _amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(0),\\n            block.timestamp\\n        );\\n    }\\n\\n    //ERC20\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 fromBalance = _balances[from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team_wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_input\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OpenTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_tx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_wallet\",\"type\":\"uint256\"}],\"name\":\"SetLimitMaxs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_fee_buy\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_fee_sell\",\"type\":\"uint32\"}],\"name\":\"SetTaxsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_lp_percent\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"SetTokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_input\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_last\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_buy\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_sell\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ignore_fee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp_percent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_tx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_wallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap_at_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap_enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trade_open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000753a397f039aa0e523657c358daf786a837ee95500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000012000000000000000000000000fc8fea47f6d040a6f13cd0d931b5c0bc5c1f0494000000000000000000000000c00db47224a555f2bd4a49326966e4cbf30edb6b0000000000000000000000008685ee171ed746754807ad7ed601b2bd8756cf47000000000000000000000000708dbd67b47d54cfb150be7c127bcb245350f981000000000000000000000000e9fc75cf564291b4eb97fe9a64adbf7d6e015edc0000000000000000000000003eba08848eb8fd1e96f48bef656ac7509cce848500000000000000000000000021457a55177bdd9586a00cd0d24c7f70f957ac65000000000000000000000000636a59014bfedc9533f615784875d37352257e58000000000000000000000000dfb472cf2f2088806acdec9af57c78df92a0d7ee0000000000000000000000004d9d87dc83d04fef9211acfce4178b8855aab8a700000000000000000000000074b9714fe6e7a244cd648d7cdeb2df32ef00242300000000000000000000000019194d3f65106a7a8b727fc964325f5560f0d5360000000000000000000000003bfb91f00d3b75afa9cf9dee816d04bfd31d8031000000000000000000000000de7d73c6670f4b19378a010d17e255c93da3a80b000000000000000000000000cbeb9e0e3dc7473bec130cc6ba1cf4cf1b653f9d0000000000000000000000008492cf3875a250a5f36ec2aaedbbf6bda95f7b66000000000000000000000000073408d206b731cbd079a9076f42e7198a74567700000000000000000000000064d49dfb3289a7da307b852b42ac1a1f87b4df34", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}