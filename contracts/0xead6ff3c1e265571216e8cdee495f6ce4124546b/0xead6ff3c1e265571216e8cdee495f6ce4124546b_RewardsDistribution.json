{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/Administrable.sol\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n\r\ncontract Administrable is Pausable, Ownable {\r\n    error AdministrableCallerMustBeAdmin();\r\n    error AdministrableAlreadyAnAdmin();\r\n    error AdministrableNotAnAdmin();\r\n\r\n    mapping(address => bool) private _admins;\r\n\r\n    constructor(address[] memory _initialAdmins){\r\n        for (uint256 i = 0; i < _initialAdmins.length; i++) {\r\n            _admins[_initialAdmins[i]] = true;\r\n        }\r\n    }\r\n\r\n    function addAdminRights(address _newAdmin) external onlyOwner {\r\n        if (_isAdmin(_newAdmin)) revert AdministrableAlreadyAnAdmin();\r\n        _admins[_newAdmin] = true;\r\n    }\r\n\r\n    function revokeAdminRights(address _admin) external onlyOwner {\r\n        if (!_isAdmin(_admin)) revert AdministrableNotAnAdmin();\r\n        delete _admins[_admin];\r\n    }\r\n\r\n    function pause() public onlyAdmin {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyAdmin {\r\n        _unpause();\r\n    }\r\n\r\n    function _isAdmin(address _user) internal view returns (bool){\r\n        return _admins[_user];\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        if (!_admins[_msgSender()]) revert AdministrableCallerMustBeAdmin();\r\n        _;\r\n    }\r\n}\r\n// File: contracts/RewardsDistribution.sol\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\ncontract RewardsDistribution is Administrable {\r\n    bytes32 public merkleRoot;\r\n    uint256 public rootVersion = 1;\r\n    uint256 public lastMerkleRootUpdateTimestamp;\r\n    uint256 public transferAndTerminationTimestamp = type(uint256).max;\r\n    uint256 public fundsGatheredInPeriod;\r\n\r\n    mapping(address => uint256) public lastClaimedVersion;\r\n\r\n    event RewardsClaimed(address claimer, uint256 amount);\r\n    event FundsReceived(address sender, uint256 amount);\r\n    event MerkleRootUpdated();\r\n    event TransferAndTerminateNotified(uint256 transferTimestamp);\r\n    event TransferredAndTerminated();\r\n\r\n    constructor(address[] memory _initialAdmins) Administrable(_initialAdmins) {}\r\n\r\n    function updateMerkleRootAndUnpause(bytes32 _newRoot, bool mustUnpause) external onlyAdmin {\r\n        require(paused(), \"RewardsDistribution: Contract must be paused\");\r\n\r\n        merkleRoot = _newRoot;\r\n        rootVersion += 1;\r\n        lastMerkleRootUpdateTimestamp = block.timestamp;\r\n        fundsGatheredInPeriod = 0;\r\n        if (mustUnpause && paused()) {\r\n            unpause();\r\n        }\r\n    }\r\n\r\n    function verifyProof(address _user, uint256 _fullRewardsAmount, bytes32[] calldata _proof) public view returns (bool){\r\n        bytes32 hash = keccak256(abi.encodePacked(_user, _fullRewardsAmount));\r\n\r\n        for (uint256 i = 0; i < _proof.length; i++) {\r\n            hash = _computeMerkleProofNodes(hash, _proof[i]);\r\n        }\r\n\r\n        return hash == merkleRoot;\r\n    }\r\n\r\n    function claimRewards(uint256 _fullRewardsAmount, bytes32[] calldata _proof) external whenNotPaused {\r\n        require(lastClaimedVersion[msg.sender] < rootVersion, \"RewardsDistribution: Reward already claimed\");\r\n        require(address(this).balance >= _fullRewardsAmount, \"RewardsDistribution: Not enough funds in contract\");\r\n        require(verifyProof(msg.sender, _fullRewardsAmount, _proof), \"RewardsDistribution: Invalid proof\");\r\n\r\n        lastClaimedVersion[msg.sender] = rootVersion;\r\n        emit RewardsClaimed(msg.sender, _fullRewardsAmount);\r\n\r\n        (bool success,) = payable(msg.sender).call{value: _fullRewardsAmount}(\"\");\r\n        require(success, \"RewardsDistribution: Failed to send reward\");\r\n    }\r\n\r\n    receive() external payable {\r\n        handleFundsReception();\r\n    }\r\n\r\n    fallback() external payable {\r\n        handleFundsReception();\r\n    }\r\n\r\n    function handleFundsReception() internal {\r\n        fundsGatheredInPeriod += msg.value;\r\n        emit FundsReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    function notifyTransferAndTermination() public onlyAdmin {\r\n        transferAndTerminationTimestamp = block.timestamp + 30 days;\r\n        emit TransferAndTerminateNotified(transferAndTerminationTimestamp);\r\n    }\r\n\r\n    function cancelTransferAndTerminationNotice() public onlyAdmin {\r\n        transferAndTerminationTimestamp = type(uint256).max;\r\n        emit TransferAndTerminateNotified(transferAndTerminationTimestamp);\r\n    }\r\n\r\n    function transferFundsAndTerminate(address _to) external onlyAdmin {\r\n        require(block.timestamp >= transferAndTerminationTimestamp, \"RewardsDistribution: 30 days notice period not yet passed\");\r\n\r\n        transferAndTerminationTimestamp = type(uint256).max;\r\n        emit TransferredAndTerminated();\r\n        if (!paused()) {\r\n            pause();\r\n        }\r\n\r\n        (bool sent,) = payable(_to).call{value: address(this).balance}(\"\");\r\n        require(sent, \"RewardsDistribution: Funds transfer failed\");\r\n    }\r\n\r\n    function _computeMerkleProofNodes(bytes32 a, bytes32 b) internal pure returns (bytes32){\r\n        return keccak256(a < b ? abi.encodePacked(a, b) : abi.encodePacked(b, a));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_initialAdmins\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdministrableAlreadyAnAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdministrableCallerMustBeAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdministrableNotAnAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTimestamp\",\"type\":\"uint256\"}],\"name\":\"TransferAndTerminateNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferredAndTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"addAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferAndTerminationNotice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fullRewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsGatheredInPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMerkleRootUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyTransferAndTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"revokeAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAndTerminationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferFundsAndTerminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"mustUnpause\",\"type\":\"bool\"}],\"name\":\"updateMerkleRootAndUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fullRewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RewardsDistribution", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000085e0fdb1260f718fc232d6ad2f7ee2694a1b8f32", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66de6910ba7e0d006a163decacffc03d99f87e77aa73c3ebb41c9878c79af30e"}