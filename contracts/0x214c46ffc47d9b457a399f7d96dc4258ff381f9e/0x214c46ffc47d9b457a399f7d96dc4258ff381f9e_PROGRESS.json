{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ERC721TokenReceiver {\r\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) { \r\n        return ERC721TokenReceiver.onERC721Received.selector; \r\n    }\r\n}\r\n\r\nabstract contract ERC721 {\r\n    \r\n    event Transfer(address indexed from_, address indexed to_, uint256 indexed tokenId_);\r\n    event Approval(address indexed owner_, address indexed spender_, uint256 indexed id_);\r\n    event ApprovalForAll(address indexed owner_, address indexed operator_, bool approved_);\r\n    \r\n    string public name; \r\n    string public symbol;\r\n\r\n    struct TokenData { address owner; }\r\n    struct BalanceData { uint32 balance; }\r\n\r\n    mapping(uint256 => TokenData) public _tokenData;\r\n    mapping(address => BalanceData) public _balanceData;\r\n\r\n    function balanceOf(address owner_) public virtual view returns (uint256) {\r\n        require(owner_ != address(0), \"balanceOf to 0x0\");\r\n        return _balanceData[owner_].balance;\r\n    }\r\n    \r\n    function ownerOf(uint256 tokenId_) public virtual view returns (address) {\r\n        address _owner = _tokenData[tokenId_].owner;\r\n        require(_owner != address(0), \"ownerOf token does not exist!\");\r\n        return _owner;\r\n    }\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    constructor(string memory name_, string memory symbol_) { name = name_; symbol = symbol_; }\r\n\r\n    function _mint(address to_, uint256 tokenId_) internal virtual { unchecked {\r\n        require(to_ != address(0), \"_mint to 0x0\");\r\n        require(_tokenData[tokenId_].owner == address(0), \"_mint token exists\");\r\n        _tokenData[tokenId_].owner = to_;\r\n        _balanceData[to_].balance++;\r\n        emit Transfer(address(0), to_, tokenId_);\r\n    }}\r\n\r\n    function _burn(uint256 tokenId_) internal virtual { unchecked {\r\n        address _owner = ownerOf(tokenId_);\r\n        _balanceData[_owner].balance--;\r\n        delete _tokenData[tokenId_];\r\n        delete getApproved[tokenId_];\r\n        emit Transfer(_owner, address(0), tokenId_);\r\n    }}\r\n\r\n    function _transfer(address from_, address to_, uint256 tokenId_, bool checkApproved_) internal virtual { unchecked {\r\n        require(to_ != address(0), \"_transfer to 0x0\");\r\n        address _owner = ownerOf(tokenId_);\r\n        require(from_ == _owner, \"_transfer not from owner\");\r\n        if (checkApproved_) require(_isApprovedOrOwner(_owner, msg.sender, tokenId_), \"_transfer not approved\");\r\n        delete getApproved[tokenId_];\r\n        _tokenData[tokenId_].owner = to_;\r\n        _balanceData[from_].balance--;\r\n        _balanceData[to_].balance++;\r\n        emit Transfer(from_, to_, tokenId_);\r\n    }}\r\n\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) public virtual {\r\n        _transfer(from_, to_, tokenId_, true);\r\n    }\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_, bytes memory data_) public virtual {\r\n        transferFrom(from_, to_, tokenId_);\r\n        require(to_.code.length == 0 || ERC721TokenReceiver(to_).onERC721Received(msg.sender, from_, tokenId_, data_) ==\r\n        ERC721TokenReceiver.onERC721Received.selector, \"safeTransferFrom to unsafe address\");\r\n    }\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_) public virtual {\r\n        safeTransferFrom(from_, to_, tokenId_, \"\");\r\n    }\r\n\r\n    function approve(address spender_, uint256 tokenId_) public virtual {\r\n        address _owner = ownerOf(tokenId_);\r\n        require(msg.sender == _owner || isApprovedForAll[_owner][msg.sender], \"approve not authorized!\");\r\n        getApproved[tokenId_] = spender_;\r\n        emit Approval(_owner, spender_, tokenId_);\r\n    }\r\n\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\r\n        isApprovedForAll[msg.sender][operator_] = approved_;\r\n        emit ApprovalForAll(msg.sender, operator_, approved_);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address owner_, address spender_, uint256 tokenId_) internal virtual view returns (bool) {\r\n        return (owner_ == spender_ || getApproved[tokenId_] == spender_ || isApprovedForAll[owner_][spender_]);\r\n    }\r\n\r\n    function supportsInterface(bytes4 id_) public virtual view returns (bool) {\r\n        return  id_ == 0x01ffc9a7 || \r\n                id_ == 0x80ac58cd || \r\n                id_ == 0x5b5e139f;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId_) public virtual view returns (string memory) {}\r\n}\r\n\r\nabstract contract ERC721TokenURI {\r\n\r\n    string public baseTokenURI;\r\n\r\n    function _setBaseTokenURI(string memory uri_) internal {\r\n        baseTokenURI = uri_;\r\n    }\r\n\r\n    function _toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    address public owner;\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner() { require(owner == msg.sender, \"only owner\");_; }\r\n    function transferOwnership(address newOwner) external onlyOwner { emit OwnershipTransferred(owner, newOwner); owner = newOwner; }\r\n}\r\n\r\ncontract PROGRESS is ERC721, ERC721TokenURI, Ownable {\r\n\r\n    event List(address, uint256);\r\n\r\n    uint256 public current;\r\n    uint256 public totalSupply;\r\n    uint256 public lastMintTimestamp;\r\n    uint256 constant price = 0.04 ether;\r\n    uint256 constant evolveTime = 86400;\r\n    uint256 constant over = 1123200;\r\n    mapping(uint256 => uint256) public tokenIdToTimestamp;\r\n\r\n    constructor() ERC721(\"PROGRESS\", \"PROGRESS\") {\r\n        lastMintTimestamp = block.timestamp;\r\n    }\r\n\r\n    function setBaseTokenURI(string memory uri_) external onlyOwner {\r\n        _setBaseTokenURI(uri_);\r\n    }\r\n\r\n    function mint() external payable {\r\n        uint256 timePassed = block.timestamp - lastMintTimestamp;\r\n        require(timePassed <= over, \"over\");\r\n        tokenIdToTimestamp[totalSupply] = timePassed;\r\n        if (timePassed > current) {\r\n            current = timePassed;\r\n        }\r\n        if (msg.value >= price) {\r\n            emit List(msg.sender, msg.value);\r\n        }\r\n        _mint(msg.sender, totalSupply);\r\n        totalSupply++;\r\n        lastMintTimestamp = block.timestamp;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId_) public view override returns (string memory) {\r\n        return string(abi.encodePacked(baseTokenURI, _toString(tokenIdToTimestamp[tokenId_]), \"/\", _toString(tokenId_)));\r\n    }\r\n\r\n    function withdraw(address destination, uint256 amount) external onlyOwner {\r\n        (bool success, ) = destination.call{value: amount}(\"\");\r\n        require(success, \"TRANSFER FAILED\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"List\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"balance\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PROGRESS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e8175c8b3fa0e805fa6299897ec97593e71ce17c706504f103bdd4388f76e301"}