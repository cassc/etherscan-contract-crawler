{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n//\r\n// DssVest - Token vesting contract\r\n//\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface MintLike {\r\n    function mint(address, uint256) external;\r\n}\r\n\r\ninterface ChainlogLike {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function hope(address) external;\r\n    function suck(address, address, uint256) external;\r\n    function live() external view returns (uint256);\r\n}\r\n\r\ninterface TokenLike {\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n}\r\n\r\nabstract contract DssVest {\r\n    // --- Data ---\r\n    mapping (address => uint256) public wards;\r\n\r\n    struct Award {\r\n        address usr;   // Vesting recipient\r\n        uint48  bgn;   // Start of vesting period  [timestamp]\r\n        uint48  clf;   // The cliff date           [timestamp]\r\n        uint48  fin;   // End of vesting period    [timestamp]\r\n        address mgr;   // A manager address that can yank\r\n        uint8   res;   // Restricted\r\n        uint128 tot;   // Total reward amount\r\n        uint128 rxd;   // Amount of vest claimed\r\n    }\r\n    mapping (uint256 => Award) public awards;\r\n\r\n    uint256 public cap; // Maximum per-second issuance token rate\r\n\r\n    uint256 public ids; // Total vestings\r\n\r\n    uint256 internal locked;\r\n\r\n    uint256 public constant  TWENTY_YEARS = 20 * 365 days;\r\n\r\n    // --- Events ---\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n\r\n    event File(bytes32 indexed what, uint256 data);\r\n\r\n    event Init(uint256 indexed id, address indexed usr);\r\n    event Vest(uint256 indexed id, uint256 amt);\r\n    event Restrict(uint256 indexed id);\r\n    event Unrestrict(uint256 indexed id);\r\n    event Yank(uint256 indexed id, uint256 end);\r\n    event Move(uint256 indexed id, address indexed dst);\r\n\r\n    // Getters to access only to the value desired\r\n    function usr(uint256 _id) external view returns (address) {\r\n        return awards[_id].usr;\r\n    }\r\n\r\n    function bgn(uint256 _id) external view returns (uint256) {\r\n        return awards[_id].bgn;\r\n    }\r\n\r\n    function clf(uint256 _id) external view returns (uint256) {\r\n        return awards[_id].clf;\r\n    }\r\n\r\n    function fin(uint256 _id) external view returns (uint256) {\r\n        return awards[_id].fin;\r\n    }\r\n\r\n    function mgr(uint256 _id) external view returns (address) {\r\n        return awards[_id].mgr;\r\n    }\r\n\r\n    function res(uint256 _id) external view returns (uint256) {\r\n        return awards[_id].res;\r\n    }\r\n\r\n    function tot(uint256 _id) external view returns (uint256) {\r\n        return awards[_id].tot;\r\n    }\r\n\r\n    function rxd(uint256 _id) external view returns (uint256) {\r\n        return awards[_id].rxd;\r\n    }\r\n\r\n    /**\r\n        @dev Base vesting logic contract constructor\r\n    */\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    // --- Mutex ---\r\n    modifier lock {\r\n        require(locked == 0, \"DssVest/system-locked\");\r\n        locked = 1;\r\n        _;\r\n        locked = 0;\r\n    }\r\n\r\n    // --- Auth ---\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"DssVest/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    function rely(address _usr) external auth {\r\n        wards[_usr] = 1;\r\n        emit Rely(_usr);\r\n    }\r\n    function deny(address _usr) external auth {\r\n        wards[_usr] = 0;\r\n        emit Deny(_usr);\r\n    }\r\n\r\n    /**\r\n        @dev (Required) Set the per-second token issuance rate.\r\n        @param what  The tag of the value to change (ex. bytes32(\"cap\"))\r\n        @param data  The value to update (ex. cap of 1000 tokens/yr == 1000*WAD/365 days)\r\n    */\r\n    function file(bytes32 what, uint256 data) external lock auth {\r\n        if      (what == \"cap\")         cap = data;     // The maximum amount of tokens that can be streamed per-second per vest\r\n        else revert(\"DssVest/file-unrecognized-param\");\r\n        emit File(what, data);\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x > y ? y : x;\r\n    }\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"DssVest/add-overflow\");\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"DssVest/sub-underflow\");\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"DssVest/mul-overflow\");\r\n    }\r\n    function toUint48(uint256 x) internal pure returns (uint48 z) {\r\n        require((z = uint48(x)) == x, \"DssVest/uint48-overflow\");\r\n    }\r\n    function toUint128(uint256 x) internal pure returns (uint128 z) {\r\n        require((z = uint128(x)) == x, \"DssVest/uint128-overflow\");\r\n    }\r\n\r\n    /**\r\n        @dev Govanance adds a vesting contract\r\n        @param _usr The recipient of the reward\r\n        @param _tot The total amount of the vest\r\n        @param _bgn The starting timestamp of the vest\r\n        @param _tau The duration of the vest (in seconds)\r\n        @param _eta The cliff duration in seconds (i.e. 1 years)\r\n        @param _mgr An optional manager for the contract. Can yank if vesting ends prematurely.\r\n        @return id  The id of the vesting contract\r\n    */\r\n    function create(address _usr, uint256 _tot, uint256 _bgn, uint256 _tau, uint256 _eta, address _mgr) external lock auth returns (uint256 id) {\r\n        require(_usr != address(0),                        \"DssVest/invalid-user\");\r\n        require(_tot > 0,                                  \"DssVest/no-vest-total-amount\");\r\n        require(_bgn < add(block.timestamp, TWENTY_YEARS), \"DssVest/bgn-too-far\");\r\n        require(_bgn > sub(block.timestamp, TWENTY_YEARS), \"DssVest/bgn-too-long-ago\");\r\n        require(_tau > 0,                                  \"DssVest/tau-zero\");\r\n        require(_tot / _tau <= cap,                        \"DssVest/rate-too-high\");\r\n        require(_tau <= TWENTY_YEARS,                      \"DssVest/tau-too-long\");\r\n        require(_eta <= _tau,                              \"DssVest/eta-too-long\");\r\n        require(ids < type(uint256).max,                   \"DssVest/ids-overflow\");\r\n\r\n        id = ++ids;\r\n        awards[id] = Award({\r\n            usr: _usr,\r\n            bgn: toUint48(_bgn),\r\n            clf: toUint48(add(_bgn, _eta)),\r\n            fin: toUint48(add(_bgn, _tau)),\r\n            tot: toUint128(_tot),\r\n            rxd: 0,\r\n            mgr: _mgr,\r\n            res: 0\r\n        });\r\n        emit Init(id, _usr);\r\n    }\r\n\r\n    /**\r\n        @dev Anyone (or only owner of a vesting contract if restricted) calls this to claim all available rewards\r\n        @param _id     The id of the vesting contract\r\n    */\r\n    function vest(uint256 _id) external {\r\n        _vest(_id, type(uint256).max);\r\n    }\r\n\r\n    /**\r\n        @dev Anyone (or only owner of a vesting contract if restricted) calls this to claim rewards\r\n        @param _id     The id of the vesting contract\r\n        @param _maxAmt The maximum amount to vest\r\n    */\r\n    function vest(uint256 _id, uint256 _maxAmt) external {\r\n        _vest(_id, _maxAmt);\r\n    }\r\n\r\n    /**\r\n        @dev Anyone (or only owner of a vesting contract if restricted) calls this to claim rewards\r\n        @param _id     The id of the vesting contract\r\n        @param _maxAmt The maximum amount to vest\r\n    */\r\n    function _vest(uint256 _id, uint256 _maxAmt) internal lock {\r\n        Award memory _award = awards[_id];\r\n        require(_award.usr != address(0), \"DssVest/invalid-award\");\r\n        require(_award.res == 0 || _award.usr == msg.sender, \"DssVest/only-user-can-claim\");\r\n        uint256 amt = unpaid(block.timestamp, _award.bgn, _award.clf, _award.fin, _award.tot, _award.rxd);\r\n        amt = min(amt, _maxAmt);\r\n        awards[_id].rxd = toUint128(add(_award.rxd, amt));\r\n        pay(_award.usr, amt);\r\n        emit Vest(_id, amt);\r\n    }\r\n\r\n    /**\r\n        @dev amount of tokens accrued, not accounting for tokens paid\r\n        @param _id  The id of the vesting contract\r\n        @return amt The accrued amount\r\n    */\r\n    function accrued(uint256 _id) external view returns (uint256 amt) {\r\n        Award memory _award = awards[_id];\r\n        require(_award.usr != address(0), \"DssVest/invalid-award\");\r\n        amt = accrued(block.timestamp, _award.bgn, _award.fin, _award.tot);\r\n    }\r\n\r\n    /**\r\n        @dev amount of tokens accrued, not accounting for tokens paid\r\n        @param _time The timestamp to perform the calculation\r\n        @param _bgn  The start time of the contract\r\n        @param _fin  The end time of the contract\r\n        @param _tot  The total amount of the contract\r\n        @return amt  The accrued amount\r\n    */\r\n    function accrued(uint256 _time, uint48 _bgn, uint48 _fin, uint128 _tot) internal pure returns (uint256 amt) {\r\n        if (_time < _bgn) {\r\n            amt = 0;\r\n        } else if (_time >= _fin) {\r\n            amt = _tot;\r\n        } else {\r\n            amt = mul(_tot, sub(_time, _bgn)) / sub(_fin, _bgn); // 0 <= amt < _award.tot\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev return the amount of vested, claimable GEM for a given ID\r\n        @param _id  The id of the vesting contract\r\n        @return amt The claimable amount\r\n    */\r\n    function unpaid(uint256 _id) external view returns (uint256 amt) {\r\n        Award memory _award = awards[_id];\r\n        require(_award.usr != address(0), \"DssVest/invalid-award\");\r\n        amt = unpaid(block.timestamp, _award.bgn, _award.clf, _award.fin, _award.tot, _award.rxd);\r\n    }\r\n\r\n    /**\r\n        @dev amount of tokens accrued, not accounting for tokens paid\r\n        @param _time The timestamp to perform the calculation\r\n        @param _bgn  The start time of the contract\r\n        @param _clf  The timestamp of the cliff\r\n        @param _fin  The end time of the contract\r\n        @param _tot  The total amount of the contract\r\n        @param _rxd  The number of gems received\r\n        @return amt  The claimable amount\r\n    */\r\n    function unpaid(uint256 _time, uint48 _bgn, uint48 _clf, uint48 _fin, uint128 _tot, uint128 _rxd) internal pure returns (uint256 amt) {\r\n        amt = _time < _clf ? 0 : sub(accrued(_time, _bgn, _fin, _tot), _rxd);\r\n    }\r\n\r\n    /**\r\n        @dev Allows governance or the owner to restrict vesting to the owner only\r\n        @param _id The id of the vesting contract\r\n    */\r\n    function restrict(uint256 _id) external lock {\r\n        address usr_ = awards[_id].usr;\r\n        require(usr_ != address(0), \"DssVest/invalid-award\");\r\n        require(wards[msg.sender] == 1 || usr_ == msg.sender, \"DssVest/not-authorized\");\r\n        awards[_id].res = 1;\r\n        emit Restrict(_id);\r\n    }\r\n\r\n    /**\r\n        @dev Allows governance or the owner to enable permissionless vesting\r\n        @param _id The id of the vesting contract\r\n    */\r\n    function unrestrict(uint256 _id) external lock {\r\n        address usr_ = awards[_id].usr;\r\n        require(usr_ != address(0), \"DssVest/invalid-award\");\r\n        require(wards[msg.sender] == 1 || usr_ == msg.sender, \"DssVest/not-authorized\");\r\n        awards[_id].res = 0;\r\n        emit Unrestrict(_id);\r\n    }\r\n\r\n    /**\r\n        @dev Allows governance or the manager to remove a vesting contract immediately\r\n        @param _id The id of the vesting contract\r\n    */\r\n    function yank(uint256 _id) external {\r\n        _yank(_id, block.timestamp);\r\n    }\r\n\r\n    /**\r\n        @dev Allows governance or the manager to remove a vesting contract at a future time\r\n        @param _id  The id of the vesting contract\r\n        @param _end A scheduled time to end the vest\r\n    */\r\n    function yank(uint256 _id, uint256 _end) external {\r\n        _yank(_id, _end);\r\n    }\r\n\r\n    /**\r\n        @dev Allows governance or the manager to end pre-maturely a vesting contract\r\n        @param _id  The id of the vesting contract\r\n        @param _end A scheduled time to end the vest\r\n    */\r\n    function _yank(uint256 _id, uint256 _end) internal lock {\r\n        require(wards[msg.sender] == 1 || awards[_id].mgr == msg.sender, \"DssVest/not-authorized\");\r\n        Award memory _award = awards[_id];\r\n        require(_award.usr != address(0), \"DssVest/invalid-award\");\r\n        if (_end < block.timestamp) {\r\n            _end = block.timestamp;\r\n        }\r\n        if (_end < _award.fin) {\r\n            uint48 end = toUint48(_end);\r\n            awards[_id].fin = end;\r\n            if (end < _award.bgn) {\r\n                awards[_id].bgn = end;\r\n                awards[_id].clf = end;\r\n                awards[_id].tot = 0;\r\n            } else if (end < _award.clf) {\r\n                awards[_id].clf = end;\r\n                awards[_id].tot = 0;\r\n            } else {\r\n                awards[_id].tot = toUint128(\r\n                                    add(\r\n                                        unpaid(_end, _award.bgn, _award.clf, _award.fin, _award.tot, _award.rxd),\r\n                                        _award.rxd\r\n                                    )\r\n                                );\r\n            }\r\n        }\r\n\r\n        emit Yank(_id, _end);\r\n    }\r\n\r\n    /**\r\n        @dev Allows owner to move a contract to a different address\r\n        @param _id  The id of the vesting contract\r\n        @param _dst The address to send ownership of the contract to\r\n    */\r\n    function move(uint256 _id, address _dst) external lock {\r\n        require(awards[_id].usr == msg.sender, \"DssVest/only-user-can-move\");\r\n        require(_dst != address(0), \"DssVest/zero-address-invalid\");\r\n        awards[_id].usr = _dst;\r\n        emit Move(_id, _dst);\r\n    }\r\n\r\n    /**\r\n        @dev Return true if a contract is valid\r\n        @param _id The id of the vesting contract\r\n        @return isValid True for valid contract\r\n    */\r\n    function valid(uint256 _id) external view returns (bool isValid) {\r\n        isValid = awards[_id].rxd < awards[_id].tot;\r\n    }\r\n\r\n    /**\r\n        @dev Override this to implement payment logic.\r\n        @param _guy The payment target.\r\n        @param _amt The payment amount. [units are implementation-specific]\r\n    */\r\n    function pay(address _guy, uint256 _amt) virtual internal;\r\n}\r\n\r\ncontract DssVestSuckable is DssVest {\r\n\r\n    uint256 internal constant RAY = 10**27;\r\n\r\n    ChainlogLike public immutable chainlog;\r\n    VatLike      public immutable vat;\r\n    DaiJoinLike  public immutable daiJoin;\r\n\r\n    /**\r\n        @dev This contract must be authorized to 'suck' on the vat\r\n        @param _chainlog The contract address of the MCD chainlog\r\n    */\r\n    constructor(address _chainlog) public DssVest() {\r\n        require(_chainlog != address(0), \"DssVestSuckable/Invalid-chainlog-address\");\r\n        ChainlogLike chainlog_ = chainlog = ChainlogLike(_chainlog);\r\n        VatLike vat_ = vat = VatLike(chainlog_.getAddress(\"MCD_VAT\"));\r\n        DaiJoinLike daiJoin_ = daiJoin = DaiJoinLike(chainlog_.getAddress(\"MCD_JOIN_DAI\"));\r\n\r\n        vat_.hope(address(daiJoin_));\r\n    }\r\n\r\n    /**\r\n        @dev Override pay to handle suck logic\r\n        @param _guy The recipient of the ERC-20 Dai\r\n        @param _amt The amount of Dai to send to the _guy [WAD]\r\n    */\r\n    function pay(address _guy, uint256 _amt) override internal {\r\n        require(vat.live() == 1, \"DssVestSuckable/vat-not-live\");\r\n        vat.suck(chainlog.getAddress(\"MCD_VOW\"), address(this), mul(_amt, RAY));\r\n        daiJoin.exit(_guy, _amt);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlog\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Restrict\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unrestrict\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Vest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"Yank\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TWENTY_YEARS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"accrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"awards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"bgn\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"clf\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"fin\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"mgr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"res\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"tot\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rxd\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"bgn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlog\",\"outputs\":[{\"internalType\":\"contract ChainlogLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"clf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bgn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tau\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"fin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"mgr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"res\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"restrict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"rxd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unpaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unrestrict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"usr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmt\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"yank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"yank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DssVestSuckable", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000da0ab1e0017debcd72be8599041a2aa3ba7e740f", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3494d48492eef281ceec3d3b8e3fdd0c30aadc3d5c702825e61623f99d018b6b"}