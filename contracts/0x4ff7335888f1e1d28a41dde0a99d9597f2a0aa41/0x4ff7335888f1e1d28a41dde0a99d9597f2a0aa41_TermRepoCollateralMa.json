{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuthenticator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/TermAuth.sol\\\";\\n\\n/// @title IAuthenticator defines the functions of the Authenticator contract.\\ninterface IAuthenticator {\\n    /// Verifies a signature\\n    /// @param termAuth The `TermAuth` struct containing user address, nonce, and signature\\n    /// @param txContract The address of the contract the user is trying to get authenticated for\\n    /// @param txMsgData The msg.data of the transaction getting authenticated\\n    /// @return bool A boolean testing whether or not a signature is valid\\n    function authenticate(\\n        TermAuth memory termAuth,\\n        address txContract,\\n        bytes calldata txMsgData\\n    ) external returns (bool);\\n\\n    /// Verifies a signature. Reverts if the signature is not valid.\\n    /// @param termAuth The `TermAuth` struct containing user address, nonce, and signature\\n    /// @param txContract The address of the contract the user is trying to get authenticated for\\n    /// @param txMsgData The msg.data of the transaction getting authenticated\\n    function ensureAuthenticated(\\n        TermAuth memory termAuth,\\n        address txContract,\\n        bytes calldata txMsgData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionBidLocker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./ITermRepoServicer.sol\\\";\\nimport \\\"../lib/TermAuctionBid.sol\\\";\\nimport \\\"../lib/TermAuctionBidSubmission.sol\\\";\\nimport \\\"../lib/TermAuctionRevealedBid.sol\\\";\\nimport \\\"../lib/TermAuth.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITermAuctionBidLocker {\\n    function termRepoId() external view returns (bytes32);\\n\\n    function termAuctionId() external view returns (bytes32);\\n\\n    function auctionEndTime() external view returns (uint256);\\n\\n    function dayCountFractionMantissa() external view returns (uint256);\\n\\n    function purchaseToken() external view returns (address);\\n\\n    function collateralTokens(\\n        IERC20Upgradeable token\\n    ) external view returns (bool);\\n\\n    function termRepoServicer() external view returns (ITermRepoServicer);\\n\\n    // ========================================================================\\n    // = Interface/API ========================================================\\n    // ========================================================================\\n\\n    /// @param bidSubmission A Term Auction bid submission to borrow an amount of money at rate up to but not exceeding the bid rate\\n    /// @param termAuth An authentication struct containing the signed bidder wallet address\\n    /// @return A bytes32 unique on chain bid id.\\n    function lockBid(\\n        TermAuctionBidSubmission calldata bidSubmission,\\n        TermAuth calldata termAuth\\n    ) external returns (bytes32);\\n\\n    /// @param bid A struct containing details of the bid\\n    /// @return A bool representing whether the bid was locked or not\\n    function lockRolloverBid(\\n        TermAuctionBid calldata bid\\n    ) external returns (bool);\\n\\n    /// @param bidSubmissions An array of bid submissions\\n    /// @param termAuth An authentication struct containing the signed bidder wallet address\\n    /// @return A bytes32 array of unique on chain bid ids.\\n    function lockBids(\\n        TermAuctionBidSubmission[] calldata bidSubmissions,\\n        TermAuth calldata termAuth\\n    ) external returns (bytes32[] memory);\\n\\n    /// @param bidSubmissions An array of Term Auction bid submissions to borrow an amount of money at rate up to but not exceeding the bid rate\\n    /// @param referralAddress A user address that referred the submitter of this bid\\n    /// @param termAuth An authentication struct containing the signed bidder wallet address\\n    /// @return A bytes32 array of unique on chain bid ids.\\n    function lockBidsWithReferral(\\n        TermAuctionBidSubmission[] calldata bidSubmissions,\\n        address referralAddress,\\n        TermAuth calldata termAuth\\n    ) external returns (bytes32[] memory);\\n\\n    /// @param id A bid Id\\n    /// @return A struct containing details of the locked bid\\n    function lockedBid(\\n        bytes32 id\\n    ) external view returns (TermAuctionBid memory);\\n\\n    /// @param id The id of the bid to reveal\\n    /// @param price The price to reveal\\n    /// @param nonce The user provided nonce value to generate the bid price hash\\n    function revealBid(bytes32 id, uint256 price, uint256 nonce) external;\\n\\n    /// @param ids An array of bid ids of the bids to reveal\\n    /// @param prices An array of the bid prices to reveal\\n    /// @param nonces An array of nonce values to generate bid price hashes\\n    function revealBids(\\n        bytes32[] calldata ids,\\n        uint256[] calldata prices,\\n        uint256[] calldata nonces\\n    ) external;\\n\\n    /// @notice unlockBid unlocks a bid and returns funds to the borrower\\n    /// @param id A bid id\\n    /// @param termAuth An authentication struct containing the signed bidder wallet address\\n    function unlockBid(bytes32 id, TermAuth calldata termAuth) external;\\n\\n    /// @notice unlockBids unlocks multiple bids and returns funds to the borrower\\n    /// @param ids An array of ids to unlock\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function unlockBids(\\n        bytes32[] calldata ids,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    // ========================================================================\\n    // = Internal Interface/API ===============================================\\n    // ========================================================================\\n\\n    /// @param revealedBids An array of the revealed offer ids\\n    /// @param expiredRolloverBids An array of the expired rollover bid ids\\n    /// @param unrevealedBids An array of the unrevealed offer ids\\n    /// @return An array of TermAuctionRevealedBid structs containing details of the revealed bids\\n    /// @return An array of TermAuctionBid structs containing details of the unrevealed bids\\n    function getAllBids(\\n        bytes32[] calldata revealedBids,\\n        bytes32[] calldata expiredRolloverBids,\\n        bytes32[] calldata unrevealedBids\\n    )\\n        external\\n        returns (TermAuctionRevealedBid[] memory, TermAuctionBid[] memory);\\n\\n    /// @param id A bytes32 bid id\\n    /// @param bidder The address of the bidder\\n    /// @param bidCollateralTokens The addresses of the token used as collateral\\n    /// @param amounts The amounts of collateral tokens to unlock\\n    function auctionUnlockBid(\\n        bytes32 id,\\n        address bidder,\\n        address[] calldata bidCollateralTokens,\\n        uint256[] calldata amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionBidLockerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermAuctionBidLockerEvents is an interface that defines all events emitted by the Term Auction Bid Locker.\\ninterface ITermAuctionBidLockerEvents {\\n    event TermAuctionBidLockerInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuctionBidLocker,\\n        uint256 auctionStartTime,\\n        uint256 revealTime\\n    );\\n\\n    event BidLocked(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        address bidder,\\n        bytes32 bidPrice,\\n        uint256 amount,\\n        address token,\\n        address[] collateralTokens,\\n        uint256[] collateralAmounts,\\n        bool isRollover,\\n        address rolloverPairOffTermRepoServicer,\\n        address referralAddress\\n    );\\n\\n    event BidRevealed(bytes32 termAuctionId, bytes32 id, uint256 bidPrice);\\n\\n    event BidUnlocked(bytes32 termAuctionId, bytes32 id);\\n\\n    event BidInShortfall(bytes32 termAuctionId, bytes32 id);\\n\\n    event BidLockingPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event BidLockingUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event BidUnlockingPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event BidUnlockingUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @title ITermAuctionErrors defines all errors emitted by the Term Auction\\ninterface ITermAuctionErrors {\\n    /// Term contracts have already been paired.\\n    error AlreadyTermContractPaired();\\n\\n    /// Error emmitted when the completing an auction that has already been completed\\n    error AuctionAlreadyCompleted();\\n\\n    /// Error emmitted when the auction is not closed, but must be\\n    error AuctionNotClosed();\\n\\n    /// Error emitted when the provided clearingOffset is not 0 or 1\\n    error ClearingOffsetNot0Or1(uint256 clearingOffset);\\n\\n    /// Complete Auction has been paused.\\n    error CompleteAuctionPaused();\\n\\n    /// Invalid Parameters passed into function\\n    error InvalidParameters(string message);\\n\\n    /// Error emitted when the maximum binary search depth has been exceeded\\n    error MaxPriceSearchDepthExceeded(uint256 maxDepth);\\n\\n    /// Error emitted when there are no bids or offers\\n    error NoBidsOrOffers();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @title ITermAuctionEvents defines all events emitted by the TermAuctionContract.\\ninterface ITermAuctionEvents {\\n    /// Event emitted when a new auction is initialized\\n    /// @param termRepoId The term ID\\n    /// @param termAuctionId The term auction Id\\n    /// @param termAuction auction contract address\\n    /// @param auctionEndTime The auction end time\\n    event TermAuctionInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuction,\\n        uint256 auctionEndTime\\n    );\\n\\n    /// Event emitted when a bid is assigned\\n    /// @param termAuctionId The auction ID\\n    /// @param id The bid ID\\n    /// @param amount The amount assigned\\n    event BidAssigned(bytes32 termAuctionId, bytes32 id, uint256 amount);\\n\\n    /// Event emitted when an offer is assigned\\n    /// @param termAuctionId The term ID\\n    /// @param id The offer ID\\n    /// @param amount The amount assigned\\n    event OfferAssigned(bytes32 termAuctionId, bytes32 id, uint256 amount);\\n\\n    /// Event emitted when an auction is completed\\n    /// @param termAuctionId The ID of the auction\\n    /// @param timestamp The timestamp of the auction completion\\n    /// @param block The block of the auction completion\\n    /// @param totalAssignedBids The total amount of bids assigned\\n    /// @param totalAssignedOffers The total amount of offers assigned\\n    /// @param clearingPrice The clearing price of the auction\\n    event AuctionCompleted(\\n        bytes32 termAuctionId,\\n        uint256 timestamp,\\n        uint256 block,\\n        uint256 totalAssignedBids,\\n        uint256 totalAssignedOffers,\\n        uint256 clearingPrice\\n    );\\n\\n    /// Event emitted when an auction is cancelled.\\n    /// @param termAuctionId The ID of the auction.\\n    /// @param nonViableAuction Auction not viable due to bid and offer prices not intersecting\\n    event AuctionCancelled(bytes32 termAuctionId, bool nonViableAuction);\\n\\n    /// Event emitted when an auction is paused.\\n    /// @param termAuctionId The ID of the auction.\\n    /// @param termRepoId The ID of the repo.\\n    event CompleteAuctionPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    /// Event emitted when an auction is unpaused.\\n    /// @param termAuctionId The ID of the auction.\\n    /// @param termRepoId The ID of the repo.\\n    event CompleteAuctionUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionOfferLocker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/TermAuctionOffer.sol\\\";\\nimport \\\"../lib/TermAuctionOfferSubmission.sol\\\";\\nimport \\\"../lib/TermAuctionRevealedOffer.sol\\\";\\nimport \\\"../lib/TermAuth.sol\\\";\\n\\ninterface ITermAuctionOfferLocker {\\n    function auctionEndTime() external view returns (uint256);\\n\\n    // ========================================================================\\n    // = Interface/API ========================================================\\n    // ========================================================================\\n\\n    /// @param offerSubmission A Term Auction offer submission to lend an amount of money at rate no lower than the offer rate\\n    /// @param termAuth An authentication struct containing the signed offeror wallet address\\n    /// @return A bytes32 unique on chain offer id.\\n    function lockOffer(\\n        TermAuctionOfferSubmission calldata offerSubmission,\\n        TermAuth calldata termAuth\\n    ) external returns (bytes32);\\n\\n    /// @param offerSubmissions An array of offer submissions\\n    /// @param termAuth An authentication struct containing the signed offeror wallet address\\n    /// @return A bytes32 array of unique on chain offer ids.\\n    function lockOffers(\\n        TermAuctionOfferSubmission[] calldata offerSubmissions,\\n        TermAuth calldata termAuth\\n    ) external returns (bytes32[] memory);\\n\\n    /// @param offerSubmissions An array of Term Auction offer submissions to lend an amount of money at rate no lower than the offer rate\\n    /// @param referralAddress A user address that referred the submitter of this offer\\n    /// @param termAuth An authentication struct containing the signed offeror wallet address\\n    /// @return A bytes32 array of unique on chain offer ids.\\n    function lockOffersWithReferral(\\n        TermAuctionOfferSubmission[] calldata offerSubmissions,\\n        address referralAddress,\\n        TermAuth calldata termAuth\\n    ) external returns (bytes32[] memory);\\n\\n    /// @param id An offer Id\\n    /// @return A struct containing the details of the locked offer\\n    function lockedOffer(\\n        bytes32 id\\n    ) external view returns (TermAuctionOffer memory);\\n\\n    /// @param id An offer Id\\n    /// @param price The price of the offer to reveal\\n    /// @param nonce The user provided nonce value to generate the bid price hash\\n    function revealOffer(bytes32 id, uint256 price, uint256 nonce) external;\\n\\n    /// @param ids An array offer ids to reveal\\n    /// @param prices An array of the offer prices to reveal\\n    /// @param nonces An array of nonce values to generate bid price hashes\\n    function revealOffers(\\n        bytes32[] calldata ids,\\n        uint256[] calldata prices,\\n        uint256[] calldata nonces\\n    ) external;\\n\\n    /// @notice unlockOffer unlocks an offer and returns funds to the offeror\\n    /// @param id An offer id\\n    /// @param termAuth An authentication struct containing the signed offeror wallet address\\n    function unlockOffer(bytes32 id, TermAuth calldata termAuth) external;\\n\\n    /// @notice unlockOffers unlocks multiple offers and returns funds to the offeror\\n    /// @param ids An array of offer ids\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function unlockOffers(\\n        bytes32[] calldata ids,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    // ========================================================================\\n    // = Internal Interface/API ===============================================\\n    // ========================================================================\\n\\n    /// @param revealedOffers An array of the revealed offer ids\\n    /// @param unrevealedOffers An array of the unrevealed offer ids\\n    /// @return An array of TermAuctionRevealedOffer structs containing details of the revealed offers\\n    /// @return An array of TermAuctionOffer structs containing details of the unrevealed offers\\n    function getAllOffers(\\n        bytes32[] calldata revealedOffers,\\n        bytes32[] calldata unrevealedOffers\\n    )\\n        external\\n        returns (TermAuctionRevealedOffer[] memory, TermAuctionOffer[] memory);\\n\\n    /// @param id An offer Id\\n    /// @param offeror The address of the offeror\\n    /// @param amount The amount to unlock\\n    function unlockOfferPartial(\\n        bytes32 id,\\n        address offeror,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionOfferLockerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermAuctionOfferLockerEvents is an interface that defines all events emitted by the Term Auction Offer Locker.\\ninterface ITermAuctionOfferLockerEvents {\\n    event TermAuctionOfferLockerInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuctionOfferLocker,\\n        uint256 auctionStartTime,\\n        uint256 revealTime\\n    );\\n\\n    event OfferLocked(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        address offeror,\\n        bytes32 offerPrice,\\n        uint256 amount,\\n        address token,\\n        address referralAddress\\n    );\\n\\n    event OfferRevealed(bytes32 termAuctionId, bytes32 id, uint256 offerPrice);\\n\\n    event OfferUnlocked(bytes32 termAuctionId, bytes32 id);\\n\\n    event OfferLockingPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event OfferLockingUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event OfferUnlockingPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event OfferUnlockingUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermController is an interface that defines events and functions of the Controller contract.\\ninterface ITermController {\\n    // ========================================================================\\n    // = Interface/API ========================================================\\n    // ========================================================================\\n\\n    /// @notice External view function which returns contract address of treasury wallet\\n    function getTreasuryAddress() external view returns (address);\\n\\n    /// @notice External view function which returns contract address of protocol reserve\\n    function getProtocolReserveAddress() external view returns (address);\\n\\n    /// @notice External view function which returns if contract address is a Term Finance contract or not\\n    /// @param contractAddress input contract address\\n    function isTermDeployed(\\n        address contractAddress\\n    ) external view returns (bool);\\n\\n    // ========================================================================\\n    // = Admin Functions ======================================================\\n    // ========================================================================\\n\\n    /// @notice Admin function to update the Term Finance treasury wallet address\\n    /// @param treasuryWallet    new treasury address\\n    function updateTreasuryAddress(address treasuryWallet) external;\\n\\n    /// @notice Admin function to update the Term Finance protocol reserve wallet address\\n    /// @param protocolReserveAddress    new protocol reserve wallet address\\n    function updateProtocolReserveAddress(\\n        address protocolReserveAddress\\n    ) external;\\n\\n    /// @notice Admin function to add a new Term Finance contract to Controller\\n    /// @param termContract    new term contract address\\n    function markTermDeployed(address termContract) external;\\n\\n    /// @notice Admin function to remove a contract from Controller\\n    /// @param termContract    term contract address to remove\\n    function unmarkTermDeployed(address termContract) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermEventEmitter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./ITermAuctionEvents.sol\\\";\\nimport \\\"./ITermAuctionBidLockerEvents.sol\\\";\\nimport \\\"./ITermAuctionOfferLockerEvents.sol\\\";\\nimport \\\"./ITermRepoCollateralManagerEvents.sol\\\";\\nimport \\\"./ITermRepoServicerEvents.sol\\\";\\nimport \\\"./ITermRepoRolloverManagerEvents.sol\\\";\\nimport \\\"./ITermRepoLockerEvents.sol\\\";\\nimport \\\"./ITermRepoTokenEvents.sol\\\";\\nimport \\\"./ITermEventEmitterEvents.sol\\\";\\nimport \\\"../lib/TermAuctionBid.sol\\\";\\n\\ninterface ITermEventEmitter is\\n    ITermAuctionEvents,\\n    ITermAuctionBidLockerEvents,\\n    ITermAuctionOfferLockerEvents,\\n    ITermRepoCollateralManagerEvents,\\n    ITermRepoServicerEvents,\\n    ITermRepoRolloverManagerEvents,\\n    ITermRepoLockerEvents,\\n    ITermRepoTokenEvents,\\n    ITermEventEmitterEvents\\n{\\n    // ========================================================================\\n    // = TermAuction Events ===================================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The id of the current Term Repo deployment being initialized\\n    /// @param termAuctionId The id of the auction being initialized\\n    /// @param termAuction The address of the auction contract being initialized\\n    /// @param auctionEndTime The end time of the auction being initialized\\n    function emitTermAuctionInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuction,\\n        uint256 auctionEndTime\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id A bid id\\n    /// @param amount The amount assigned to this bid\\n    function emitBidAssigned(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id An offer id\\n    /// @param amount The amount assigned to this offer\\n    function emitOfferAssigned(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termAuctionId The Term Auction id of auction completed\\n    /// @param timestamp The timestamp of the current block\\n    /// @param blockNumber The number of the current block\\n    /// @param totalAssignedBids The number of assigned bids in the auction\\n    /// @param totalAssignedOffers The number of assigned offers in the auction\\n    /// @param clearingPrice The clearing price of the auction\\n    function emitAuctionCompleted(\\n        bytes32 termAuctionId,\\n        uint256 timestamp,\\n        uint256 blockNumber,\\n        uint256 totalAssignedBids,\\n        uint256 totalAssignedOffers,\\n        uint256 clearingPrice\\n    ) external;\\n\\n    /// @param nonViableAuction Auction not viable due to bid and offer prices not intersecting\\n    function emitAuctionCancelled(\\n        bytes32 termAuctionId,\\n        bool nonViableAuction\\n    ) external;\\n\\n    /// @param termAuctionId The id of the auction paused\\n    /// @param termRepoId The Term Repo id associated with auction paused\\n    function emitCompleteAuctionPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of the auction unpaused\\n    /// @param termRepoId The Term Repo id associated with auction unpaused\\n    function emitCompleteAuctionUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermAuctionBidLocker Events ==========================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with BidLocker initialized\\n    /// @param termAuctionId The Term Auction id associated with BidLocker initialized\\n    /// @param termAuctionBidLocker The address of the TermAuctionBidLocker contract being intialized\\n    /// @param auctionStartTime The time at which auction bids will be accepted for submission\\n    /// @param revealTime The time at which sealed auction bids can be revealed\\n    function emitTermAuctionBidLockerInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuctionBidLocker,\\n        uint256 auctionStartTime,\\n        uint256 revealTime\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param bid A struct containing details of the locked bid\\n    /// @param referralAddress The address of the referrer. Zero Address if none.\\n    function emitBidLocked(\\n        bytes32 termAuctionId,\\n        TermAuctionBid calldata bid,\\n        address referralAddress\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id The bid id\\n    /// @param bidPrice The revealed price of the bid\\n    function emitBidRevealed(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        uint256 bidPrice\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id A bid id\\n    function emitBidUnlocked(bytes32 termAuctionId, bytes32 id) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id A bid id\\n    function emitBidInShortfall(bytes32 termAuctionId, bytes32 id) external;\\n\\n    /// @param termAuctionId The id of Term Auction where bid locking is paused\\n    /// @param termRepoId The Term Repo id where bid locking is paused\\n    function emitBidLockingPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where bid locking is unpaused\\n    /// @param termRepoId The Term Repo id where bid locking is unpaused\\n    function emitBidLockingUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where bid unlocking is paused\\n    /// @param termRepoId The Term Repo id where bid unlocking is paused\\n    function emitBidUnlockingPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where bid unlocking is unpaused\\n    /// @param termRepoId The Term Repo id where bid unlocking is unpaused\\n    function emitBidUnlockingUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermAuctionOfferLocker Events ========================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with OfferLocker initialized\\n    /// @param termAuctionId The Term Auction id associated with OfferLocker initialized\\n    /// @param termAuctionOfferLocker The address of the TermAuctionOfferLocker contract being intialized\\n    /// @param auctionStartTime The time at which auction bids will be accepted for submission\\n    /// @param revealTime The time at which sealed auction bids can be revealed\\n    function emitTermAuctionOfferLockerInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuctionOfferLocker,\\n        uint256 auctionStartTime,\\n        uint256 revealTime\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id An offer id\\n    /// @param offeror The address of the offeror\\n    /// @param offerPrice The offer price\\n    /// @param amount The amount of purchase tokens offered\\n    /// @param purchaseToken The address of the purchase token being offered\\n    /// @param referralAddress The address of the referrer. Zero Address if none.\\n    function emitOfferLocked(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        address offeror,\\n        bytes32 offerPrice,\\n        uint256 amount,\\n        address purchaseToken,\\n        address referralAddress\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id An offer id\\n    /// @param offerPrice The offer price revealed\\n    function emitOfferRevealed(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        uint256 offerPrice\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id An offer id\\n    function emitOfferUnlocked(bytes32 termAuctionId, bytes32 id) external;\\n\\n    /// @param termAuctionId The id of Term Auction where offer locking is paused\\n    /// @param termRepoId The Term Repo id where offer locking is paused\\n    function emitOfferLockingPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where offer locking is unpaused\\n    /// @param termRepoId The Term Repo id where offer locking is unpaused\\n    function emitOfferLockingUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where offer unlocking is paused\\n    /// @param termRepoId The Term Repo id where offer unlocking is paused\\n    function emitOfferUnlockingPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where offer unlocking is unpaused\\n    /// @param termRepoId The Term Repo id where offer unlocking is unpaused\\n    function emitOfferUnlockingUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermRepoCollateralManager Events =========================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with collateral manger being initialized\\n    /// @param termRepoCollateralManager The address of the TermRepoCollateralManager contract being intialized\\n    /// @param collateralTokens An array containing a list of the addresses of all accepted collateral tokens\\n    /// @param initialCollateralRatios An array containing the initial collateral ratios for each collateral token\\n    /// @param maintenanceCollateralRatios An array containing the maintenance collateral ratios for each collateral token\\n    /// @param liquidatedDamagesSchedule An array containing the liquidated damages applicable to each collateral token\\n    function emitTermRepoCollateralManagerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoCollateralManager,\\n        address[] calldata collateralTokens,\\n        uint256[] calldata initialCollateralRatios,\\n        uint256[] calldata maintenanceCollateralRatios,\\n        uint256[] calldata liquidatedDamagesSchedule\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id for the Term Repo being reopened\\n    /// @param termRepoCollateralManager The TermRepoCollateralManager address for the Term Repo being reopened\\n    /// @param termAuctionBidLocker New TermAuctionBidLocker to be paired for reopening\\n    function emitPairReopeningBidLocker(\\n        bytes32 termRepoId,\\n        address termRepoCollateralManager,\\n        address termAuctionBidLocker\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken The address of the collateral token locked\\n    /// @param amount The amount of collateral being locked\\n    function emitCollateralLocked(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken The address of the collateral token locked\\n    /// @param amount The amount of collateral being unlocked\\n    function emitCollateralUnlocked(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param liquidator The address of the liquidator\\n    /// @param closureAmount The amount of repurchase exposure covered\\n    /// @param collateralToken The address of the collateral tokens liquidated\\n    /// @param amountLiquidated The amount of collateral tokens liquidated\\n    function emitLiquidation(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address liquidator,\\n        uint256 closureAmount,\\n        address collateralToken,\\n        uint256 amountLiquidated,\\n        uint256 protocolSeizureAmount,\\n        bool defaultLiquidation\\n    ) external;\\n\\n    /// @param termRepoId The id of Term Repo where liquidations are paused\\n    function emitLiquidationPaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId The id of Term Repo where liquidation is unpaused\\n    function emitLiquidationUnpaused(bytes32 termRepoId) external;\\n\\n    // ========================================================================\\n    // = TermRepoServicer Events ===============================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with TermRepoServicer being initialized\\n    /// @param termRepoServicer The address of the TermRepoServicer contract being initialized\\n    /// @param purchaseToken The address of the purchase token\\n    /// @param maturityTimestamp The time at which repurchase is due\\n    /// @param endOfRepurchaseWindow The time at which the repurchase window ends\\n    /// @param redemptionTimestamp The time when redemption of Term Repo Tokens begins\\n    function emitTermRepoServicerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoServicer,\\n        address purchaseToken,\\n        uint256 maturityTimestamp,\\n        uint256 endOfRepurchaseWindow,\\n        uint256 redemptionTimestamp\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id for the Term Repo being reopened\\n    /// @param termRepoServicer The address of the TermRepoServicer contract for the Term Repo being reopened\\n    /// @param termAuctionOfferLocker The TermAuctionOfferLocker to be paired for reopening\\n    /// @param termAuction The address of the TermAuction contract to be paired for reopening\\n    function emitReopeningOfferLockerPaired(\\n        bytes32 termRepoId,\\n        address termRepoServicer,\\n        address termAuctionOfferLocker,\\n        address termAuction\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param offeror The address of the offeror\\n    /// @param amount The offer amount to be locked\\n    /// @notice This event is not to be confused with OfferLocked by TermOfferLocker\\n    /// @notice Both will be triggered, this one specifically refers to corresponding action taken by Term Servicer\\n    function emitOfferLockedByServicer(\\n        bytes32 termRepoId,\\n        address offeror,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param offeror The address of the offeror\\n    /// @param amount The offer amount to be unlocked\\n    /// @notice This event is not to be confused with OfferUnlocked by TermOfferLocker\\n    /// @notice Both will be triggered, this one specifically refers to corresponding action taken by Term Servicer\\n    function emitOfferUnlockedByServicer(\\n        bytes32 termRepoId,\\n        address offeror,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param offerId Unique id for offer\\n    /// @param offeror The address of the offeror\\n    /// @param purchasePrice The offer amount fulfilled\\n    /// @param repurchasePrice The repurchase price due to offeror at maturity\\n    /// @param repoTokensMinted The amount of Term Repo Tokens minted to offeror\\n    function emitOfferFulfilled(\\n        bytes32 offerId,\\n        address offeror,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 repoTokensMinted\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param redeemer The address of the redeemer\\n    /// @param redemptionAmount The amount of TermRepoTokens redeemed\\n    /// @param redemptionHaircut The haircut applied to redemptions (if any) due to unrecoverable repo exposure\\n    function emitTermRepoTokensRedeemed(\\n        bytes32 termRepoId,\\n        address redeemer,\\n        uint256 redemptionAmount,\\n        uint256 redemptionHaircut\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param bidder The address of the bidder\\n    /// @param purchasePrice The bid amount fulfilled in auction\\n    /// @param repurchasePrice The repurchase price due at maturity\\n    /// @param servicingFees The fees earned by the protocol\\n    function emitBidFulfilled(\\n        bytes32 termRepoId,\\n        address bidder,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 servicingFees\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param purchasePrice The purchase price received from new TermRepo\\n    /// @param repurchasePrice The new repurchase price due at maturity of new TermRepo\\n    /// @param servicingFees The fees earned by the protocol\\n    function emitExposureOpenedOnRolloverNew(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 servicingFees\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param amountRolled The repurchase exposure balance closed on old Term Repo\\n    function emitExposureClosedOnRolloverExisting(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 amountRolled\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param amount The amount submitted for repurchase\\n    function emitRepurchasePaymentSubmitted(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param minter The address of the minter\\n    /// @param netTokensReceived The amount of Term Repo Tokens received by minter net of servicing fees\\n    /// @param servicingFeeTokens The number of Term Repo Tokens retained by protocol in servicing fees\\n    /// @param repurchasePrice The repurchase exposure opened by minter against Term Repo Token mint\\n    function emitMintExposure(\\n        bytes32 termRepoId,\\n        address minter,\\n        uint256 netTokensReceived,\\n        uint256 servicingFeeTokens,\\n        uint256 repurchasePrice\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param closeAmount The amount of repurchase exposure to close\\n    function emitBurnCollapseExposure(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 closeAmount\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermRepoRolloverManager Events ===========================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with TermRepoRolloverManager being initialized\\n    /// @param rolloverManager The address of the TermRepoRolloverManager contract being initialized\\n    function emitTermRepoRolloverManagerInitialized(\\n        bytes32 termRepoId,\\n        address rolloverManager\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param rolloverTermAuctionId The Term Auction Id that rollover bid will be submitted into\\n    function emitRolloverTermApproved(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermAuctionId\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param rolloverTermAuctionId The Term Auction Id whose rollover approval is revoked\\n    function emitRolloverTermApprovalRevoked(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermAuctionId\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param rolloverTermRepoId Term Repo Id of Rollover Term Repo\\n    /// @param borrower The address of the borrower\\n    /// @param rolloverAuction The address of the auction being rolled over to\\n    /// @param rolloverAmount The repurchase amount being rolled over\\n    /// @param hashedBidPrice The hash of the rollover bid price\\n    function emitRolloverElection(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermRepoId,\\n        address borrower,\\n        address rolloverAuction,\\n        uint256 rolloverAmount,\\n        bytes32 hashedBidPrice\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param borrower The address of the borrower\\n    function emitRolloverCancellation(\\n        bytes32 termRepoId,\\n        address borrower\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param borrower The address of the borrower\\n    function emitRolloverBidLockSucceeded(\\n        bytes32 termRepoId,\\n        address borrower\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param borrower The address of the borrower\\n    function emitRolloverBidLockFailed(\\n        bytes32 termRepoId,\\n        address borrower\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param borrower The address of the borrower\\n    function emitRolloverProcessed(\\n        bytes32 termRepoId,\\n        address borrower\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermRepoLocker Events ======================================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with TermRepoLocker contract being initialized\\n    /// @param termRepoLocker The address of the TermRepoLocker contract being initialized\\n    function emitTermRepoLockerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoLocker\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    function emitTermRepoLockerTransfersPaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    function emitTermRepoLockerTransfersUnpaused(bytes32 termRepoId) external;\\n\\n    // ========================================================================\\n    // = TermRepoToken Events =====================================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken being initalized\\n    /// @param termRepoToken The address of the TermRepoToken contract being initialized\\n    /// @param redemptionRatio The number of purchase tokens redeemable per unit of Term Repo Token at par\\n    function emitTermRepoTokenInitialized(\\n        bytes32 termRepoId,\\n        address termRepoToken,\\n        uint256 redemptionRatio\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken where minting is paused\\n    function emitTermRepoTokenMintingPaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken where minting is unpaused\\n    function emitTermRepoTokenMintingUnpaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken where burning is paused\\n    function emitTermRepoTokenBurningPaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken where burning is unpaused\\n    function emitTermRepoTokenBurningUnpaused(bytes32 termRepoId) external;\\n\\n    // ========================================================================\\n    // = TermEventEmitter Events ==============================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The id of the Term Repo being delisted\\n    function emitDelistTermRepo(bytes32 termRepoId) external;\\n\\n    /// @param termAuctionId The id of the Term Auction being delisted\\n    function emitDelistTermAuction(bytes32 termAuctionId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermEventEmitterEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\ninterface ITermEventEmitterEvents {\\n    /// @notice Event emitted when a new Term Repo is delisted on Term Finance\\n    /// @param termRepoId unique identifier for a Term Repo\\n    event DelistTermRepo(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a new Term Auction is delisted on Term Finance\\n    /// @param termAuctionId unique identifier for a Term Auction\\n    event DelistTermAuction(bytes32 termAuctionId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/ExponentialNoError.sol\\\";\\n\\ninterface ITermPriceOracle {\\n    function reOpenToNewBidLocker(address termAuctionBidLocker) external;\\n\\n    /// @notice A function to return current market value given a token address and an amount\\n    /// @param token The address of the token to query\\n    /// @param amount The amount tokens to value\\n    /// @return The current market value of tokens at the specified amount, in USD\\n    function usdValueOfTokens(\\n        address token,\\n        uint256 amount\\n    ) external view returns (ExponentialNoError.Exp memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermPriceOracleErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermPriceOracleErrors defines all errors emitted by the PriceOracle.\\ninterface ITermPriceOracleErrors {\\n    error NoPriceFeed(address tokenAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermPriceOracleEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermPriceOracleEvents is an interface that defines all events emitted by the Term Price Oracle.\\ninterface ITermPriceOracleEvents {\\n    /// @notice Event emitted when a new price feed is added or updated to price oracle.\\n    /// @param token The address of the token fee subscribe\\n    /// @param tokenPriceAggregator The proxy price aggregator address subscribed\\n    event SubscribePriceFeed(address token, address tokenPriceAggregator);\\n\\n    /// @notice Event emitted when a price feed is removed from price oracle.\\n    /// @param token The address of the token\\n    event UnsubscribePriceFeed(address token);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoCollateralManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/ExponentialNoError.sol\\\";\\nimport \\\"../lib/TermAuth.sol\\\";\\nimport \\\"./ITermRepoLocker.sol\\\";\\n\\n/// @notice ITermManager represents a contract that manages all\\ninterface ITermRepoCollateralManager {\\n    // ========================================================================\\n    // = State Variables  =====================================================\\n    // ========================================================================\\n\\n    function termRepoLocker() external view returns (ITermRepoLocker);\\n\\n    function maintenanceCollateralRatios(\\n        address\\n    ) external view returns (uint256);\\n\\n    function initialCollateralRatios(address) external view returns (uint256);\\n\\n    function numOfAcceptedCollateralTokens() external view returns (uint8);\\n\\n    function collateralTokens(uint256 index) external view returns (address);\\n\\n    function encumberedCollateralRemaining() external view returns (bool);\\n\\n    // ========================================================================\\n    // = Auction Functions  ===================================================\\n    // ========================================================================\\n\\n    /// @param bidder The bidder's address\\n    /// @param collateralToken The address of the token to be used as collateral\\n    /// @param amount The amount of the token to lock\\n    function auctionLockCollateral(\\n        address bidder,\\n        address collateralToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param bidder The bidder's address\\n    /// @param collateralToken The address of the token used as collateral\\n    /// @param amount The amount of collateral tokens to unlock\\n    function auctionUnlockCollateral(\\n        address bidder,\\n        address collateralToken,\\n        uint256 amount\\n    ) external;\\n\\n    // ========================================================================\\n    // = Rollover Functions  ==================================================\\n    // ========================================================================\\n\\n    /// @param borrower The borrower's address\\n    /// @param rolloverProportion The proportion of the collateral to be unlocked, equal to the proportion of the collateral repaid\\n    /// @param rolloverTermRepoLocker The address of the new TermRepoLocker contract to roll into\\n    /// @return An array representing a list of accepted collateral token addresses\\n    /// @return An array containing the amount of collateral tokens to pairoff and transfer to new TermRepoLocker to roll into\\n    function transferRolloverCollateral(\\n        address borrower,\\n        uint256 rolloverProportion,\\n        address rolloverTermRepoLocker\\n    ) external returns (address[] memory, uint256[] memory);\\n\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken The address of a collateral token\\n    /// @param amount The amount of collateral tokens to lock\\n    function acceptRolloverCollateral(\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param rolloverAuction The address of the rollover auction\\n    function approveRolloverAuction(address rolloverAuction) external;\\n\\n    // ========================================================================\\n    // = APIs  ================================================================\\n    // ========================================================================\\n\\n    /// @param collateralToken The address of the collateral token to lock\\n    /// @param amount The amount of collateral token to lock\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function externalLockCollateral(\\n        address collateralToken,\\n        uint256 amount,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    /// @param collateralToken The address of the collateral token to unlock\\n    /// @param amount The amount of collateral token to unlock\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function externalUnlockCollateral(\\n        address collateralToken,\\n        uint256 amount,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    /// @param borrower The address of the borrower\\n    /// @return The market value of borrower's locked collateral denominated in USD\\n    function getCollateralMarketValue(\\n        address borrower\\n    ) external view returns (uint256);\\n\\n    // ========================================================================\\n    // = Margin Maintenance Functions  ========================================\\n    // ========================================================================\\n\\n    /// @param borrower The address of the borrower\\n    function unlockCollateralOnRepurchase(address borrower) external;\\n\\n    /// @param borrower The address of the borrower\\n    /// @param collateralTokenAddresses Collateral token addresses\\n    /// @param collateralTokenAmounts Collateral token amounts\\n    function journalBidCollateralToCollateralManager(\\n        address borrower,\\n        address[] calldata collateralTokenAddresses,\\n        uint256[] calldata collateralTokenAmounts\\n    ) external;\\n\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken Collateral token addresse\\n    /// @param amount Collateral token amount\\n    function mintOpenExposureLockCollateral(\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param collateralToken The collateral token address of tokens locked\\n    /// @param amountToLock The amount of collateral tokens to lock\\n    function calculateMintableExposure(\\n        address collateralToken,\\n        uint256 amountToLock\\n    ) external view returns (ExponentialNoError.Exp memory);\\n\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken The collateral token address to query\\n    /// @return uint256 The amount of collateralToken locked on behalf of borrower\\n    function getCollateralBalance(\\n        address borrower,\\n        address collateralToken\\n    ) external view returns (uint256);\\n\\n    /// @param borrower The address of the borrower\\n    /// @return An array of collateral token addresses\\n    /// @return An array collateral token balances locked on behalf of borrower\\n    function getCollateralBalances(\\n        address borrower\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /// @param borrower The address of the borrower\\n    /// @param closureAmounts An array specifying the amounts of Term Repo exposure the liquidator proposes to cover in liquidation; an amount is required to be specified for each collateral token\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function batchDefault(\\n        address borrower,\\n        uint256[] calldata closureAmounts,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    /// @param borrower The address of the borrower\\n    /// @param closureAmounts An array specifying the amounts of Term Repo exposure the liquidator proposes to cover in liquidation; an amount is required to be specified for each collateral token\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function batchLiquidation(\\n        address borrower,\\n        uint256[] calldata closureAmounts,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    /// @param borrower The address of the borrower\\n    /// @param closureRepoTokenAmounts An array specifying the amounts of Term Repo Tokens the liquidator proposes to cover borrower repo exposure in liquidation; an amount is required to be specified for each collateral token\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function batchLiquidationWithRepoToken(\\n        address borrower,\\n        uint256[] calldata closureRepoTokenAmounts,\\n        TermAuth calldata termAuth\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoCollateralManagerErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoCollateralManagerErrors defines all errors emitted by Term Repo Collateral Manager.\\ninterface ITermRepoCollateralManagerErrors {\\n    error AlreadyTermContractPaired();\\n    error BorrowerNotInShortfall();\\n    error CallerNotBorrower();\\n    error CollateralBelowMaintenanceRatios(address borrower, address token);\\n    error CollateralDepositClosed();\\n    error CollateralTokenNotAllowed(address token);\\n    error CollateralWithdrawalClosed();\\n    error DefaultsClosed();\\n    error InvalidParameters(string message);\\n    error InsufficientCollateralForLiquidationRepayment(\\n        address collateralToken\\n    );\\n    error InsufficientCollateralForRedemption();\\n    error ExceedsNetExposureCapOnLiquidation();\\n    error LiquidationsPaused();\\n    error RepaymentAmountLargerThanAllowed();\\n    error SelfLiquidationNotPermitted();\\n    error ShortfallLiquidationsClosed();\\n    error TermRepurchaseWindowOpen();\\n    error TotalRepaymentGreaterThangetBorrowerRepurchaseObligation();\\n    error UnlockAmountGreaterThanCollateralBalance();\\n    error ZeroAddressContractPaired();\\n    error ZeroBorrowerRepurchaseObligation();\\n    error ZeroCollateralBalance();\\n    error ZeroLiquidationNotPermitted();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoCollateralManagerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoCollateralManagerEvents is an interface that defines all events emitted by Term Repo Collateral Manager.\\ninterface ITermRepoCollateralManagerEvents {\\n    /// @notice Event emitted when a Term Repo Collateral Manager is initialized.\\n    /// @param termRepoId                  term identifier\\n    /// @param collateralTokens        addresses of accepted collateral tokens\\n    /// @param initialCollateralRatios list of initial collateral ratios for each collateral token in the same order as collateral tokens list\\n    /// @param maintenanceCollateralRatios       list of maintenance ratios for each collateral token in the same order as collateral tokens list\\n    /// @param liquidatedDamagesSchedule    liquidation discounts for collateral tokens\\n    event TermRepoCollateralManagerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoCollateralManager,\\n        address[] collateralTokens,\\n        uint256[] initialCollateralRatios,\\n        uint256[] maintenanceCollateralRatios,\\n        uint256[] liquidatedDamagesSchedule\\n    );\\n\\n    /// @notice Event emitted when existing Term Repo Locker is reopened to another auction group\\n    /// @param termRepoId                     term identifier\\n    /// @param termRepoCollateralManager          address of collateral manager\\n    /// @param termAuctionBidLocker       address of auction bid locker paired through reopening\\n    event PairReopeningBidLocker(\\n        bytes32 termRepoId,\\n        address termRepoCollateralManager,\\n        address termAuctionBidLocker\\n    );\\n\\n    /// @notice Event emitted when collateral is locked.\\n    /// @param termRepoId             term identifier\\n    /// @param borrower           address of borrower who locked collateral\\n    /// @param collateralToken    address of collateral token\\n    /// @param amount             amount of collateral token locked\\n    event CollateralLocked(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when collateral is locked.\\n    /// @param termRepoId             term identifier\\n    /// @param borrower           address of borrower who locked collateral\\n    /// @param collateralToken    address of collateral token\\n    /// @param amount             amount of collateral token unlocked\\n    event CollateralUnlocked(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when a liquidation occurs\\n    /// @param termRepoId                term identifier\\n    /// @param borrower              address of borrower being liquidated\\n    /// @param liquidator            address of liquidator\\n    /// @param closureAmount       amount of loan repaid by liquidator\\n    /// @param collateralToken       address of collateral token liquidated\\n    /// @param amountLiquidated      amount of collateral liquidated\\n    /// @param protocolSeizureAmount amount of collateral liquidated and seized by protocol as fee\\n    /// @param defaultLiquidation    boolean indicating if liquidation is a default or not\\n    event Liquidation(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address liquidator,\\n        uint256 closureAmount,\\n        address collateralToken,\\n        uint256 amountLiquidated,\\n        uint256 protocolSeizureAmount,\\n        bool defaultLiquidation\\n    );\\n\\n    /// @notice Event emitted when a Liquidations are paused for a term\\n    /// @param termRepoId                     term identifier\\n    event LiquidationsPaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a Liquidations are unpaused for a term\\n    /// @param termRepoId                     term identifier\\n    event LiquidationsUnpaused(bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoLocker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice TermRepoLocker contracts lock collateral and purchase tokens\\n/// @notice Methods should only be callable from paired TermManager.\\ninterface ITermRepoLocker {\\n    /// @notice Locks tokens from origin wallet\\n    /// @notice Reverts if caller doesn't have SERVICER_ROLE\\n    /// @param originWallet Origin wallet to transfer tokens from\\n    /// @param token Address of token being transferred\\n    /// @param amount Amount of tokens to transfer\\n    function transferTokenFromWallet(\\n        address originWallet,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Unlocks tokens to destination wallet\\n    /// @dev Reverts if caller doesn't have SERVICER_ROLE\\n    /// @param destinationWallet Destination wallet to unlock tokens to\\n    /// @param token Address of token being unlocked\\n    /// @param amount Amount of tokens to unlock\\n    function transferTokenToWallet(\\n        address destinationWallet,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoLockerErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoLockerErrors defines all errors emitted by TermRepoLocker.\\ninterface ITermRepoLockerErrors {\\n    error ERC20TransferFailed();\\n    error TermRepoLockerTransfersPaused();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoLockerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoLockerEvents is an interface that defines all events emitted by the TermRepoLocker.\\ninterface ITermRepoLockerEvents {\\n    /// @notice Event emitted when a TermRepoLocker is initialized.\\n    /// @param termRepoId term identifier\\n    /// @param termRepoLocker address of initialized term repo locker\\n    event TermRepoLockerInitialized(bytes32 termRepoId, address termRepoLocker);\\n\\n    /// @notice Event emitted transfers for a TermRepoLocker are paused.\\n    /// @param termRepoId term identifier\\n    event TermRepoLockerTransfersPaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted transfers for a TermRepoLocker are unpaused.\\n    /// @param termRepoId term identifier\\n    event TermRepoLockerTransfersUnpaused(bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoRolloverManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/TermAuth.sol\\\";\\nimport \\\"../lib/TermRepoRolloverElection.sol\\\";\\nimport \\\"../lib/TermRepoRolloverElectionSubmission.sol\\\";\\n\\ninterface ITermRepoRolloverManager {\\n    // ========================================================================\\n    // = APIs  ================================================================\\n    // ========================================================================\\n\\n    /// @notice An external function that accepted Term Repo rollover instructions\\n    /// @param termRepoRolloverElectionSubmission A struct containing borrower rollover instructions\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function electRollover(\\n        TermRepoRolloverElectionSubmission\\n            calldata termRepoRolloverElectionSubmission,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    /// @notice A view function that returns borrower rollover instructions\\n    /// @param borrower The address of the borrower\\n    /// @return A struct containing borrower rollover instructions\\n    function getRolloverInstructions(\\n        address borrower\\n    ) external view returns (TermRepoRolloverElection memory);\\n\\n    /// @notice An external function to cancel previously submitted rollover instructions, if it hasn't been locked into an auction\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function cancelRollover(TermAuth calldata termAuth) external;\\n\\n    /// @notice An external function that submits rollover bids given a list of borrower addresses\\n    /// @param borrowersToRollover An array containing borrower addresses to process for rollover\\n    function batchProcessRollovers(\\n        address[] calldata borrowersToRollover\\n    ) external;\\n\\n    // ========================================================================\\n    // = Fulfiller Functions ================================================\\n    // ========================================================================\\n\\n    /// @notice An external function called by repo servicer to to mark rollover as fulfilled\\n    /// @param borrower The address of the borrower\\n    function fulfillRollover(address borrower) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoRolloverManagerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoCollateralManagerEvents is an interface that defines all events emitted by Term Repo Collateral Manager.\\ninterface ITermRepoRolloverManagerEvents {\\n    /// @notice Event emitted when a rollover manager is initialized\\n    /// @param termRepoId A Term Repo id\\n    /// @param rolloverManager Address of rollover manager\\n    event TermRepoRolloverManagerInitialized(\\n        bytes32 termRepoId,\\n        address rolloverManager\\n    );\\n\\n    /// @notice Event emitted when a rollover manager approves a future term as a destination for borrows\\n    /// @param termRepoId A Term Repo id\\n    /// @param rolloverTermAuctionId The Term Auction Id that rollover bid will be submitted into\\n    event RolloverTermApproved(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermAuctionId\\n    );\\n\\n    /// @notice Event emitted when a rollover manager revokes approval for a future term as a destination for borrows\\n    /// @param termRepoId A Term Repo id\\n    /// @param rolloverTermAuctionId The Term Auction Id that rollover bid will be submitted into\\n    event RolloverTermApprovalRevoked(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermAuctionId\\n    );\\n\\n    /// @notice Event emitted when a borrower elects a rollover contract\\n    /// @param termRepoId A Term Repo id\\n    /// @param rolloverTermRepoId Term Repo Id of Rollover Term Repo\\n    /// @param borrower The address of the borrower\\n    /// @param rolloverAuction The address of rollover term contract\\n    /// @param rolloverAmount Amount of purchase currency borrower is rolling over\\n    /// @param hashedBidPrice The hash of rollover bid price\\n    event RolloverElection(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermRepoId,\\n        address borrower,\\n        address rolloverAuction,\\n        uint256 rolloverAmount,\\n        bytes32 hashedBidPrice\\n    );\\n\\n    /// @notice Event emitted when a borrower cancels a rollover election\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    event RolloverCancellation(bytes32 termRepoId, address borrower);\\n\\n    /// @notice Event emitted when a bid is locked for a borrower rollover\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of borrower\\n    event RolloverBidLockSucceeded(bytes32 termRepoId, address borrower);\\n\\n    /// @notice Event emitted when a bid fails to be locked for a borrower rollover\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of borrower\\n    event RolloverBidLockFailed(bytes32 termRepoId, address borrower);\\n\\n    /// @notice Event emitted when a rollover is processed completely\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of borrower\\n    event RolloverProcessed(bytes32 termRepoId, address borrower);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoServicer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/TermAuth.sol\\\";\\nimport \\\"./ITermRepoCollateralManager.sol\\\";\\nimport \\\"./ITermRepoRolloverManager.sol\\\";\\nimport \\\"./ITermRepoLocker.sol\\\";\\n\\n/// @notice ITermRepoServicer represents a contract that manages all\\ninterface ITermRepoServicer {\\n    // ========================================================================\\n    // = State Variables  =====================================================\\n    // ========================================================================\\n\\n    function endOfRepurchaseWindow() external view returns (uint256);\\n\\n    function maturityTimestamp() external view returns (uint256);\\n\\n    function redemptionTimestamp() external view returns (uint256);\\n\\n    function purchaseToken() external view returns (address);\\n\\n    function servicingFee() external view returns (uint256);\\n\\n    function termRepoCollateralManager()\\n        external\\n        view\\n        returns (ITermRepoCollateralManager);\\n\\n    function termRepoRolloverManager()\\n        external\\n        view\\n        returns (ITermRepoRolloverManager);\\n\\n    function termRepoLocker() external view returns (ITermRepoLocker);\\n\\n    // ========================================================================\\n    // = Auction Functions  ===================================================\\n    // ========================================================================\\n\\n    /// @param offeror The address of the offeror\\n    /// @param amount The amount of purchase tokens to lock\\n    function lockOfferAmount(address offeror, uint256 amount) external;\\n\\n    /// @param offeror The address of the offeror\\n    /// @param amount The amount of purchase tokens to unlocked\\n    function unlockOfferAmount(address offeror, uint256 amount) external;\\n\\n    /// @param offeror The address of the offeror\\n    /// @param purchasePrice The offer amount to fulfill\\n    /// @param repurchasePrice The repurchase price due to offeror at maturity\\n    /// @param offerId A unique offer id\\n    function fulfillOffer(\\n        address offeror,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        bytes32 offerId\\n    ) external;\\n\\n    /// @param redeemer The address of redeemer\\n    /// @param amountToRedeem The amount of TermRepoTokens to redeem\\n    function redeemTermRepoTokens(\\n        address redeemer,\\n        uint256 amountToRedeem\\n    ) external;\\n\\n    /// @dev This method allows MINTER_ROLE to open repurchase price exposure against a TermRepoToken mint of corresponding value outside of a Term Auction to create new supply\\n    /// @param amount The amount of Term Repo Tokens to mint\\n    /// @param collateralAmounts An array containing an amount of collateral token for each token in collateral basket\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function mintOpenExposure(\\n        uint256 amount,\\n        uint256[] calldata collateralAmounts,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    /// @param bidder The address of the bidder\\n    /// @param purchasePrice The bid amount to fulfill\\n    /// @param repurchasePrice The repurchase price due at maturity\\n    /// @param collateralTokens Collateral token addresses\\n    /// @param collateralAmounts Collateral token amounts\\n    /// @param dayCountFractionMantissa Actual/360 day count fraction parameter from Term Auction Group\\n    function fulfillBid(\\n        address bidder,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        address[] calldata collateralTokens,\\n        uint256[] calldata collateralAmounts,\\n        uint256 dayCountFractionMantissa\\n    ) external;\\n\\n    // ========================================================================\\n    // = Rollover Functions  ==================================================\\n    // ========================================================================\\n\\n    /// @param termAuction The address of a TermAuction contract to receive autioneer role\\n    function approveRolloverAuction(address termAuction) external;\\n\\n    /// @param borrower The address of the borrower rolling into new Term Repo\\n    /// @param purchasePrice The purchase price received from new TermRepo\\n    /// @param repurchasePrice The new repurchase price due at maturity of new TermRepo\\n    /// @param previousTermRepoLocker The address of the old TermRepoLocker contract\\n    /// @param dayCountFractionMantissa Actual/360 day count fraction parameter from Term Auction Group\\n    /// @return The net purchase price received in after deducing protocol servicing fees\\n    function openExposureOnRolloverNew(\\n        address borrower,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        address previousTermRepoLocker,\\n        uint256 dayCountFractionMantissa\\n    ) external returns (uint256);\\n\\n    /// @param borrower The address of the borrower\\n    /// @param rolloverSettlementAmount The amount of net proceeds received from new TermRepo to pay down existing repurchase obligation due to old Term Repo\\n    /// @return A uint256 representing the proportion of total repurchase due to old Term Repo from borrower settled by proceeds from new TermRepo\\n    function closeExposureOnRolloverExisting(\\n        address borrower,\\n        uint256 rolloverSettlementAmount\\n    ) external returns (uint256);\\n\\n    // ========================================================================\\n    // = APIs  ================================================================\\n    // ========================================================================\\n\\n    /// @notice The max repurchase amount is the repurchase balance less any amounts earmarked for rollover\\n    /// @param amount The amount of purchase token to submit for repurchase\\n    /// @param termAuth An authentication struct containing the signed borrower wallet address\\n    function submitRepurchasePayment(\\n        uint256 amount,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    /// @param amountToBurn The amount of TermRepoTokens to burn\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function burnCollapseExposure(\\n        uint256 amountToBurn,\\n        TermAuth calldata termAuth\\n    ) external;\\n\\n    /// @param borrower The address of the borrower to query\\n    /// @return The total repurchase price due at maturity for a given borrower\\n    function getBorrowerRepurchaseObligation(\\n        address borrower\\n    ) external view returns (uint256);\\n\\n    /// @param borrower The address of the borrower\\n    /// @param liquidator The address of the liquidator\\n    /// @param amountToCover The amount of repurchase exposure to cover in liquidation\\n    function liquidatorCoverExposure(\\n        address borrower,\\n        address liquidator,\\n        uint256 amountToCover\\n    ) external;\\n\\n    /// @param borrower The address of the borrower\\n    /// @param liquidator The address of the liquidator\\n    /// @param amountOfRepoToken The amount of term tokens used to cover in liquidation\\n    /// @return A uint256 representing purchase value of repo tokens burned\\n    function liquidatorCoverExposureWithRepoToken(\\n        address borrower,\\n        address liquidator,\\n        uint256 amountOfRepoToken\\n    ) external returns (uint256);\\n\\n    /// @return A boolean that represents whether the term repo locker is balanced\\n    function isTermRepoBalanced() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoServicerErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoServicerErrors defines all errors emitted by the Term Repo Servicer.\\ninterface ITermRepoServicerErrors {\\n    error AfterMaturity();\\n    error AfterRepurchaseWindow();\\n    error AlreadyTermContractPaired();\\n    error CallerNotBorrower();\\n    error EncumberedCollateralRemaining();\\n    error InsufficientgetBorrowerRepurchaseObligation();\\n    error InsufficientCollateral();\\n    error InsufficientTermRepoTokenBalance();\\n    error InvalidParameters(string message);\\n    error LockedBalanceInsufficient();\\n    error NoMintOpenExposureAccess();\\n    error NotMaturedYet();\\n    error RedemptionPeriodNotOpen();\\n    error RepurchaseAmountTooHigh();\\n    error ZeroBorrowerRepurchaseObligation();\\n    error ZeroTermRepoTokenBalance();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoServicerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoServicerEvents is an interface that defines all events emitted by the Term Repo Servicer.\\ninterface ITermRepoServicerEvents {\\n    /// @notice Event emitted when a Term Loan Manager is initialized.\\n    /// @param termRepoId A Term Repo id\\n    /// @param purchaseToken The address of purchase token used for loans and repay\\n    /// @param maturityTimestamp The timestamp at which term reaches maturity\\n    /// @param endOfRepurchaseWindow The timestamp at which Term Repo is closed to repurchase\\n    /// @param redemptionTimestamp The timestamp at which loaners can redeem term repo tokens\\n    event TermRepoServicerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoServicer,\\n        address purchaseToken,\\n        uint256 maturityTimestamp,\\n        uint256 endOfRepurchaseWindow,\\n        uint256 redemptionTimestamp\\n    );\\n\\n    /// @notice Event emitted when a TermRepoLocker is reopened to another auction group\\n    /// @param termRepoId A Term Repo id\\n    /// @param termRepoServicer The address of loan manager\\n    /// @param termAuctionOfferLocker The address of auction offer locker paired through reopening\\n    /// @param termAuction The address of auction  paired through reopening\\n    event ReopeningOfferLockerPaired(\\n        bytes32 termRepoId,\\n        address termRepoServicer,\\n        address termAuctionOfferLocker,\\n        address termAuction\\n    );\\n\\n    /// @notice Event emitted when a loan offer is locked.\\n    /// @param termRepoId A Term Repo id\\n    /// @param offeror The address who submitted offer\\n    /// @param amount The amount of purchase token locked for offer\\n    event OfferLockedByServicer(\\n        bytes32 termRepoId,\\n        address offeror,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when a loan offer is unlocked.\\n    /// @param termRepoId A Term Repo id\\n    /// @param offeror The address who submitted offer\\n    /// @param amount The amount of purchase token unlocked for offer\\n    event OfferUnlockedByServicer(\\n        bytes32 termRepoId,\\n        address offeror,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when a loan offer is fulfilled.\\n    /// @param offerId A unique offer id\\n    /// @param offeror The address whose offer is fulfilled\\n    /// @param purchasePrice The purchasePrice of loan offer fulfilled\\n    /// @param repurchasePrice The repurchasePrice of loan offer fulfilled\\n    /// @param repoTokensMinted The amount of Term Repo Tokens minted to offeror\\n    event OfferFulfilled(\\n        bytes32 offerId,\\n        address offeror,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 repoTokensMinted\\n    );\\n\\n    /// @notice Event emitted when a term repo token is redeemed.\\n    /// @param termRepoId A Term Repo id\\n    /// @param redeemer The address who is redeeming term repo tokens\\n    /// @param redemptionAmount The amount of loan offer redeemed by term repo tokens\\n    /// @param redemptionHaircut The haircut applied to redemptions (if any) due to unrecoverable repo exposure\\n    event TermRepoTokensRedeemed(\\n        bytes32 termRepoId,\\n        address redeemer,\\n        uint256 redemptionAmount,\\n        uint256 redemptionHaircut\\n    );\\n\\n    /// @notice Event emitted when a loan is processed to a borrower\\n    /// @param termRepoId A Term Repo id\\n    /// @param bidder The address who is receiving the loan\\n    /// @param purchasePrice The purchasePrice transferred to borrower\\n    /// @param repurchasePrice The repurchasePrice owed by borrower at maturity\\n    /// @param servicingFees The protocol fees paid for loan\\n    event BidFulfilled(\\n        bytes32 termRepoId,\\n        address bidder,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 servicingFees\\n    );\\n\\n    /// @notice Event emitted when a rollover from a previous loan opens a position in this new term\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The borrower who has loan position opened in new term\\n    /// @param purchasePrice The purchasePrice transferred to previous term\\n    /// @param repurchasePrice The repurchasePrice owed by borrower at maturity\\n    /// @param servicingFees The protocol fees paid for loan\\n    event ExposureOpenedOnRolloverNew(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 servicingFees\\n    );\\n\\n    /// @notice Event emitted when a rollover from a previous loan opens a position in this new term\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The borrower who has loan position opened in new term\\n    /// @param amountRolled The amount of borrower loan collapsed by rollover opening\\n    event ExposureClosedOnRolloverExisting(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 amountRolled\\n    );\\n\\n    /// @notice Event emitted when term repo tokens are minted for a loan\\n    /// @param termRepoId A Term Repo id\\n    /// @param minter The address who is opening the loan\\n    /// @param netTokensReceived The amount of Term Repo Tokens received by minter net of servicing fees\\n    /// @param servicingFeeTokens The number of Term Repo Tokens retained by protocol in servicing fees\\n    /// @param repurchasePrice The repurchase exposure opened by minter against Term Repo Token mint\\n    event TermRepoTokenMint(\\n        bytes32 termRepoId,\\n        address minter,\\n        uint256 netTokensReceived,\\n        uint256 servicingFeeTokens,\\n        uint256 repurchasePrice\\n    );\\n\\n    /// @notice Event emitted when a loan is collapsed by burning term repo tokens\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address who is repaying the loan\\n    /// @param amountToClose The amount repaid by borrower\\n    event BurnCollapseExposure(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 amountToClose\\n    );\\n\\n    /// @notice Event emitted when a loan is repaid by borrower\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address who is repaying the loan\\n    /// @param repurchaseAmount The amount repaid by borrower\\n    event RepurchasePaymentSubmitted(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 repurchaseAmount\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITermRepoToken is IERC20Upgradeable {\\n    // ========================================================================\\n    // = State Variables ======================================================\\n    // ========================================================================\\n    /// @notice The number of purchase tokens redeemable\\n    function redemptionValue() external view returns (uint256);\\n\\n    // ========================================================================\\n    // = Interface/API ========================================================\\n    // ========================================================================\\n\\n    /// @notice Calculates the total USD redemption value of all outstanding TermRepoTokens\\n    /// @return totalRedemptionValue Total redemption value of TermRepoTokens in USD\\n    function totalRedemptionValue() external view returns (uint256);\\n\\n    /// @notice Burns TermRepoTokens held by an account\\n    /// @notice Reverts if caller does not have BURNER_ROLE\\n    /// @param account Address of account holding TermRepoTokens to burn\\n    /// @param amount Amount of TermRepoTokens to burn without decimal factor\\n    function burn(address account, uint256 amount) external;\\n\\n    /// @notice Burns TermRepoTokens held by an account and returns purchase redemption value of tokens burned\\n    /// @notice Reverts if caller does not have BURNER_ROLE\\n    /// @param account Address of account holding TermRepoTokens to burn\\n    /// @param amount Amount of TermRepoTokens to burn without decimal factor\\n    /// @return totalRedemptionValue Total redemption value of TermRepoTokens burned\\n    function burnAndReturnValue(\\n        address account,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /// @notice Mints TermRepoTokens in an amount equal to caller specified target redemption amount\\n    /// @notice The redemptionValue is the amount of purchase tokens redeemable per unit of TermRepoToken\\n    /// @notice Reverts if caller does not have MINTER_ROLE\\n    /// @param account Address of account to mint TermRepoTokens to\\n    /// @param redemptionAmount The target redemption amount to mint in TermRepoTokens\\n    function mintRedemptionValue(\\n        address account,\\n        uint256 redemptionAmount\\n    ) external returns (uint256);\\n\\n    /// @notice Mints an exact amount of TermRepoTokens to an account\\n    /// @notice Reverts if caller does not have MINTER_ROLE\\n    /// @param account Theaddress of account to mint TermRepoTokens\\n    /// @param numTokens         exact number of term repo tokens to mint\\n    function mintTokens(\\n        address account,\\n        uint256 numTokens\\n    ) external returns (uint256);\\n\\n    /// @notice Decrements the mintExposureCap\\n    /// @notice Reverts if caller does not have MINTER_ROLE\\n    /// @param supplyMinted Number of Tokens Minted\\n    function decrementMintExposureCap(uint256 supplyMinted) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoTokenErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoTokenErrors defines all errors emitted by Term Repo Token.\\ninterface ITermRepoTokenErrors {\\n    error AlreadyTermContractPaired();\\n    error TermRepoTokenMintingPaused();\\n    error TermRepoTokenBurningPaused();\\n    error MintExposureCapExceeded();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoTokenEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoTokenEvents is an interface that defines all events emitted by the Term Repo Token\\ninterface ITermRepoTokenEvents {\\n    /// @notice Event emitted when a Term Repo Servicer is initialized.\\n    /// @param termRepoId term identifier\\n    /// @param termRepoToken   address of initialized term repo token\\n    /// @param redemptionRatio The number of purchase tokens redeemable per unit of Term Repo Token at par\\n    event TermRepoTokenInitialized(\\n        bytes32 termRepoId,\\n        address termRepoToken,\\n        uint256 redemptionRatio\\n    );\\n\\n    /// @notice Event emitted when a Term Repo Token Minting is Paused\\n    /// @param termRepoId A Term Repo id\\n    event TermRepoTokenMintingPaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a Term Repo Token Minting is Unpaused\\n    /// @param termRepoId A Term Repo id\\n    event TermRepoTokenMintingUnpaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a Term Repo Token Burning is Paused\\n    /// @param termRepoId A Term Repo id\\n    event TermRepoTokenBurningPaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a Term Repo Token Burning is Unpaused\\n    /// @param termRepoId A Term Repo id\\n    event TermRepoTokenBurningUnpaused(bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Collateral.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev Collateral info for price oracle\\nstruct Collateral {\\n    address tokenAddress;\\n    uint256 initialCollateralRatio;\\n    uint256 maintenanceRatio;\\n    uint256 liquidatedDamage;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CompleteAuctionInput.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuctionOffer represents an offer to lend an specific amount of tokens at a specific interest rate (or better)\\nstruct CompleteAuctionInput {\\n    bytes32[] revealedBidSubmissions;\\n    bytes32[] expiredRolloverBids;\\n    bytes32[] unrevealedBidSubmissions;\\n    bytes32[] revealedOfferSubmissions;\\n    bytes32[] unrevealedOfferSubmissions;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ExponentialNoError.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.18;\\n\\n// solhint-disable\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint256 constant expScale = 1e18;\\n    uint256 constant doubleScale = 1e36;\\n\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    struct Double {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(\\n        Exp memory a,\\n        uint256 scalar\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        uint256 b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return\\n            Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        uint256 b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function fraction(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\\n// solhint-enable\\n\"\r\n    },\r\n    \"contracts/lib/TermAuctionBid.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuctionBid represents a bid to borrow a specific amount of tokens at a specific interest rate (or better)\\nstruct TermAuctionBid {\\n    /// @dev Unique identifier for this bid\\n    bytes32 id;\\n    /// @dev The address of the bidder\\n    address bidder;\\n    /// @dev Hash of the offered price as a percentage of the initial loaned amount vs amount returned at maturity. This stores 9 decimal places\\n    bytes32 bidPriceHash;\\n    /// @dev Revealed bid price; this is only a valid value if isRevealed is true; this stores 18 decimal places\\n    uint256 bidPriceRevealed;\\n    /// @dev The maximum amount of purchase tokens that can be borrowed\\n    uint256 amount;\\n    /// @dev The amount of collateral tokens initially locked\\n    uint256[] collateralAmounts;\\n    /// @dev The address of the ERC20 purchase token\\n    address purchaseToken;\\n    /// @dev The addresses of the collateral ERC20 tokens in the bid\\n    address[] collateralTokens;\\n    /// @dev A boolean indicating if bid was submitted as rollover from previous term\\n    bool isRollover;\\n    /// @dev The address of term repo servicer whose bid is being rolled over\\n    address rolloverPairOffTermRepoServicer;\\n    /// @dev A boolean that is true if bid has been revealed\\n    bool isRevealed;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermAuctionBidSubmission.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuctionBidSubmission represents a bid submission to borrow an amount of money for a specific interest rate\\nstruct TermAuctionBidSubmission {\\n    /// @dev For an existing bid this is the unique onchain identifier for this bid. For a new bid this is a randomized input that will be used to generate the unique onchain identifier.\\n    bytes32 id;\\n    /// @dev The address of the bidder\\n    address bidder;\\n    /// @dev Hash of the offered price as a percentage of the initial loaned amount vs amount returned at maturity. This stores 9 decimal places\\n    bytes32 bidPriceHash;\\n    /// @dev The maximum amount of purchase tokens that can be borrowed\\n    uint256 amount;\\n    /// @dev The amount of collateral tokens initially locked\\n    uint256[] collateralAmounts;\\n    /// @dev The address of the ERC20 purchase token\\n    address purchaseToken;\\n    /// @dev The addresses of the collateral ERC20 tokens in the bid\\n    address[] collateralTokens;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermAuctionGroup.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"../interfaces/ITermAuctionBidLocker.sol\\\";\\nimport \\\"../interfaces/ITermAuctionOfferLocker.sol\\\";\\nimport \\\"../TermAuction.sol\\\";\\n\\n/// @dev TermMaturityPeriod represents the contracts in a maturity period. This does not inlude auctions\\nstruct TermAuctionGroup {\\n    /// @dev The address of the term auction contract\\n    TermAuction auction;\\n    /// @dev The address of the collateral manager\\n    ITermAuctionBidLocker termAuctionBidLocker;\\n    /// @dev The address of the term repo locker\\n    ITermAuctionOfferLocker termAuctionOfferLocker;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermAuctionOffer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuctionOffer represents an offer to offeror an amount of money for a specific interest rate\\nstruct TermAuctionOffer {\\n    /// @dev Unique identifier for this bid\\n    bytes32 id;\\n    /// @dev The address of the offeror\\n    address offeror;\\n    /// @dev Hash of the offered price as a percentage of the initial loaned amount vs amount returned at maturity. This stores 9 decimal places\\n    bytes32 offerPriceHash;\\n    /// @dev Revealed offer price. This is not valid unless isRevealed is true. This stores 18 decimal places\\n    uint256 offerPriceRevealed;\\n    /// @dev The maximum amount of purchase tokens that can be lent\\n    uint256 amount;\\n    /// @dev The address of the ERC20 purchase token\\n    address purchaseToken;\\n    /// @dev Is offer price revealed\\n    bool isRevealed;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermAuctionOfferSubmission.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuctionOfferSubmission represents an offer submission to offeror an amount of money for a specific interest rate\\nstruct TermAuctionOfferSubmission {\\n    /// @dev For an existing offer this is the unique onchain identifier for this offer. For a new offer this is a randomized input that will be used to generate the unique onchain identifier.\\n    bytes32 id;\\n    /// @dev The address of the offeror\\n    address offeror;\\n    /// @dev Hash of the offered price as a percentage of the initial loaned amount vs amount returned at maturity. This stores 9 decimal places\\n    bytes32 offerPriceHash;\\n    /// @dev The maximum amount of purchase tokens that can be lent\\n    uint256 amount;\\n    /// @dev The address of the ERC20 purchase token\\n    address purchaseToken;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermAuctionRevealedBid.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuctionBid represents a bid to borrow an amount of money for a specific interest rate\\nstruct TermAuctionRevealedBid {\\n    /// @dev Unique identifier for this bid\\n    bytes32 id;\\n    /// @dev The address of the bidder\\n    address bidder;\\n    /// @dev The offered price as a percentage of the initial loaned amount vs amount returned at maturity. This stores 9 decimal places\\n    uint256 bidPriceRevealed;\\n    /// @dev The maximum amount of TermRepoTokens borrowed. This stores 18 decimal places\\n    uint256 amount;\\n    /// @dev The amount of collateral tokens initially locked\\n    uint256[] collateralAmounts;\\n    /// @dev The purchase token address\\n    address purchaseToken;\\n    /// @dev The collateral token address\\n    address[] collateralTokens;\\n    /// @dev A boolean indicating whether bid is submitted as rollover from previous term\\n    bool isRollover;\\n    /// @dev The address of term repo servicer whose bid is being rolled over\\n    address rolloverPairOffTermRepoServicer;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermAuctionRevealedOffer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuctionBid represents an offer to offeror an amount of money for a specific interest rate\\nstruct TermAuctionRevealedOffer {\\n    /// @dev Unique identifier for this bid\\n    bytes32 id;\\n    /// @dev The address of the offeror\\n    address offeror;\\n    /// @dev The offered price as a percentage of the initial loaned amount vs amount returned at maturity. This stores 9 decimal places\\n    uint256 offerPriceRevealed;\\n    /// @dev The maximum amount of purchase tokens offered\\n    uint256 amount;\\n    /// @dev The address of the lent ERC20 token\\n    address purchaseToken;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermAuth.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuth contains arguments needed for TermAuthenticator to authenticate a user calling a Term function\\nstruct TermAuth {\\n    /// @dev The address of the user submitting transaction\\n    address user;\\n    /// @dev A unique nonce associated with the transaction\\n    uint256 nonce;\\n    ///@dev The expiration timestamp\\n    uint256 expirationTimestamp;\\n    /// @dev The signature submitted by user for the transaction\\n    bytes signature;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermRepoRolloverElection.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.18;\\n\\n/// @dev TermRepoRolloverElection represents an election to rollover a borrow into a future term\\nstruct TermRepoRolloverElection {\\n    /// @dev The address of the term auction bidlocker that loan is being rolled into\\n    address rolloverAuction;\\n    /// @dev The amount of loan being rolled over\\n    uint256 rolloverAmount;\\n    /// @dev The hashed value of the rollover bid price to place in the rollover auction\\n    bytes32 rolloverBidPriceHash;\\n    /// @dev A boolean that is true if rollover is successfully locked into auction\\n    bool locked;\\n    /// @dev A boolean testing whether rollover has been successfully processsed: false if bid fails to lock or is not successful in rollover auction\\n    bool processed;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermRepoRolloverElectionSubmission.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.18;\\n\\n/// @dev TermRepoRolloverElectionSubmission represents a user submission for a rollover election to a future term\\nstruct TermRepoRolloverElectionSubmission {\\n    /// @dev The address of the term auction bidlocker that loan is being rolled into\\n    address rolloverAuction;\\n    /// @dev The amount of loan being rolled over\\n    uint256 rolloverAmount;\\n    ///@dev The hashed value of the rollover bid price to place in the rollover auction\\n    bytes32 rolloverBidPriceHash;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TermRepoTokenConfig.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermRepoTokenConfig represents key metadata associated with a Term Repo Token\\nstruct TermRepoTokenConfig {\\n    /// @dev The date and time at which the Term Repo associated with this Term Repo Token comes due\\n    uint256 redemptionTimestamp;\\n    /// @dev The purchase token in which this Term Repo Token is denominated and is redeemable for\\n    address purchaseToken;\\n    /// @dev A list of collateral token addresses backing a Term Repo associated with this Term Repo Token\\n    address[] collateralTokens;\\n    /// @dev A list of the maintenance margin ratios applied to each eligible collateral token\\n    uint256[] maintenanceCollateralRatios;\\n}\\n\"\r\n    },\r\n    \"contracts/TermAuction.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/ITermAuctionBidLocker.sol\\\";\\nimport \\\"./interfaces/ITermAuctionErrors.sol\\\";\\nimport \\\"./interfaces/ITermAuctionOfferLocker.sol\\\";\\nimport \\\"./interfaces/ITermEventEmitter.sol\\\";\\nimport \\\"./interfaces/ITermRepoCollateralManager.sol\\\";\\nimport \\\"./interfaces/ITermRepoServicer.sol\\\";\\n\\nimport \\\"./lib/CompleteAuctionInput.sol\\\";\\n\\nimport \\\"./lib/ExponentialNoError.sol\\\";\\nimport \\\"./lib/TermAuctionRevealedBid.sol\\\";\\nimport \\\"./lib/TermAuctionRevealedOffer.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/// @author TermLabs\\n/// @title Term Auction\\n/// @notice This contract calculates a clearing price in a blind double auction and manages auction clearing and settlement\\n/// @dev This contract belongs to the Term Auction group of contracts and is specific to a Term Repo deployment\\ncontract TermAuction is\\n    ITermAuctionErrors,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ExponentialNoError\\n{\\n    // ========================================================================\\n    // = Structs  =============================================================\\n    // ========================================================================\\n    /// State used during the `calculateClearingPrice` function\\n    /// @dev Used to reduce the number of stack variables\\n    struct ClearingPriceState {\\n        // Variables describing current loop iteration\\n        uint256 offerPrice; // p^o_i\\n        uint256 offerIndex; // idxo(p^o_i)\\n        uint256 bidIndex; // idxb(p^o_i)\\n        uint256 cumSumOffers; // cso(p^o_i)\\n        uint256 cumSumBids; // csb(p^o_i)\\n        uint256 maxClearingVolume; // maxcv_i\\n        // Variables describing next loop iteration\\n        uint256 nextOfferIndex;\\n        uint256 nextBidIndex;\\n        uint256 nextCumSumOffers;\\n        uint256 nextCumSumBids;\\n        uint256 nextOfferPrice;\\n        uint256 nextMaxClearingVolume;\\n        // Auxiliary variables\\n        bool minCumSumCorrection; // Minimisation correction indicator\\n        uint256 nextBidPrice; // Next bid price in minimisation\\n        // Principal quantities of interest\\n        uint256 clearingPrice; // p_c\\n    }\\n\\n    // ========================================================================\\n    // = Constants  ===========================================================\\n    // ========================================================================\\n    uint256 public constant CLEARING_PRICE_MAX_SEARCH_DEPTH = uint256(50);\\n    uint256 public constant CLEARING_PRICE_POST_PROCESSING_OFFSET = uint256(1);\\n    uint256 public constant THREESIXTY_DAYCOUNT_SECONDS = 360 days;\\n\\n    // ========================================================================\\n    // = Access Roles  ========================================================\\n    // ========================================================================\\n    bytes32 public constant INITIALIZER_ROLE = keccak256(\\\"INITIALIZER_ROLE\\\");\\n\\n    // ========================================================================\\n    // = State Variables  =====================================================\\n    // ========================================================================\\n\\n    // Auction configuration.\\n    bytes32 public termRepoId;\\n    bytes32 public termAuctionId;\\n    uint256 public auctionEndTime;\\n    uint256 public dayCountFractionMantissa;\\n    ITermRepoServicer public termRepoServicer;\\n    ITermAuctionBidLocker public termAuctionBidLocker;\\n    ITermAuctionOfferLocker public termAuctionOfferLocker;\\n    IERC20MetadataUpgradeable public purchaseToken;\\n    ITermEventEmitter internal emitter;\\n\\n    // Completed auction state\\n    uint256 public clearingPrice;\\n    bool public auctionCompleted;\\n    bool public auctionCancelledForWithdrawal;\\n    bool public completeAuctionPaused;\\n    bool internal termContractPaired;\\n\\n    // ========================================================================\\n    // = Modifiers  ===========================================================\\n    // ========================================================================\\n\\n    /// @notice This only runs if the auction is closed (after auction end time)\\n    /// @dev This uses the block timestamp to determine if the auction is closed\\n    modifier onlyWhileAuctionClosed() {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp <= auctionEndTime) {\\n            revert AuctionNotClosed();\\n        }\\n        _;\\n    }\\n\\n    modifier whenCompleteAuctionNotPaused() {\\n        if (completeAuctionPaused) {\\n            revert CompleteAuctionPaused();\\n        }\\n        _;\\n    }\\n\\n    modifier notTermContractPaired() {\\n        if (termContractPaired) {\\n            revert AlreadyTermContractPaired();\\n        }\\n        termContractPaired = true;\\n        _;\\n    }\\n\\n    // ========================================================================\\n    // = Deploy (https://docs.openzeppelin.com/contracts/4.x/upgradeable) =\\n    // ========================================================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// Initializes the contract\\n    /// @dev See: https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n    function initialize(\\n        string calldata termRepoId_,\\n        string calldata auctionId_,\\n        uint256 auctionEndTime_,\\n        uint256 termStart_,\\n        uint256 redemptionTimestamp_,\\n        IERC20MetadataUpgradeable purchaseToken_\\n    ) external initializer {\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n        AccessControlUpgradeable.__AccessControl_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(INITIALIZER_ROLE, msg.sender);\\n\\n        termRepoId = keccak256(abi.encodePacked(termRepoId_));\\n        termAuctionId = keccak256(abi.encodePacked(auctionId_));\\n\\n        auctionEndTime = auctionEndTime_;\\n        dayCountFractionMantissa =\\n            ((redemptionTimestamp_ - termStart_) * expScale) /\\n            THREESIXTY_DAYCOUNT_SECONDS;\\n        purchaseToken = purchaseToken_;\\n        auctionCompleted = false;\\n        termContractPaired = false;\\n        auctionCancelledForWithdrawal = false;\\n    }\\n\\n    function pairTermContracts(\\n        ITermEventEmitter emitter_,\\n        ITermRepoServicer termRepoServicer_,\\n        ITermAuctionBidLocker termAuctionBidLocker_,\\n        ITermAuctionOfferLocker termAuctionOfferLocker_\\n    ) external onlyRole(INITIALIZER_ROLE) notTermContractPaired {\\n        emitter = emitter_;\\n\\n        termRepoServicer = termRepoServicer_;\\n        termAuctionBidLocker = termAuctionBidLocker_;\\n        termAuctionOfferLocker = termAuctionOfferLocker_;\\n\\n        emitter.emitTermAuctionInitialized(\\n            termRepoId,\\n            termAuctionId,\\n            address(this),\\n            auctionEndTime\\n        );\\n    }\\n\\n    // ========================================================================\\n    // = Interface/API ========================================================\\n    // ========================================================================\\n\\n    /// @notice Calculates an auction's clearing price, assigns bids/offers, and returns unassigned funds\\n    /// @param completeAuctionInput A struct containing all revealed and unrevealed bids and offers and expired rollover bids\\n    function completeAuction(\\n        CompleteAuctionInput calldata completeAuctionInput\\n    ) external onlyWhileAuctionClosed whenCompleteAuctionNotPaused {\\n        if (auctionCompleted) {\\n            revert AuctionAlreadyCompleted();\\n        }\\n        auctionCompleted = true;\\n\\n        // Sort bids/offers by price. Orders right on the price\\n        // edge will be partially filled.\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            if (\\n                completeAuctionInput.unrevealedBidSubmissions.length > 0 ||\\n                completeAuctionInput.unrevealedOfferSubmissions.length > 0\\n            ) {\\n                revert InvalidParameters(\\n                    \\\"All tender prices must be revealed for auction to be complete\\\"\\n                );\\n            }\\n        }\\n\\n        (\\n            TermAuctionRevealedBid[] memory sortedBids,\\n            TermAuctionBid[] memory unrevealedBids\\n        ) = termAuctionBidLocker.getAllBids(\\n                completeAuctionInput.revealedBidSubmissions,\\n                completeAuctionInput.expiredRolloverBids,\\n                completeAuctionInput.unrevealedBidSubmissions\\n            );\\n        (\\n            TermAuctionRevealedOffer[] memory sortedOffers,\\n            TermAuctionOffer[] memory unrevealedOffers\\n        ) = termAuctionOfferLocker.getAllOffers(\\n                completeAuctionInput.revealedOfferSubmissions,\\n                completeAuctionInput.unrevealedOfferSubmissions\\n            );\\n\\n        // Calculate a clearing price only if both bids and offers exist and market intersects\\n        if (\\n            sortedBids.length > 0 &&\\n            sortedOffers.length > 0 &&\\n            sortedBids[sortedBids.length - 1].bidPriceRevealed >=\\n            sortedOffers[0].offerPriceRevealed\\n        ) {\\n            (\\n                ,\\n                // uint256 clearingPrice_\\n                uint256 maxAssignable\\n            ) = _calculateAndStoreClearingPrice(sortedBids, sortedOffers);\\n\\n            uint256 purchaseTokenDecimals = purchaseToken.decimals();\\n\\n            // Process revealed bids/offers\\n            uint256 totalAssignedBids = _assignBids(\\n                sortedBids,\\n                maxAssignable,\\n                purchaseTokenDecimals\\n            );\\n            uint256 totalAssignedOffers = _assignOffers(\\n                sortedOffers,\\n                maxAssignable,\\n                purchaseTokenDecimals\\n            );\\n\\n            emitter.emitAuctionCompleted(\\n                termAuctionId, // solhint-disable-next-line not-rely-on-time\\n                block.timestamp,\\n                block.number,\\n                totalAssignedBids,\\n                totalAssignedOffers,\\n                clearingPrice\\n            );\\n        } else {\\n            // Return sorted bid funds.\\n            for (uint256 i = 0; i < sortedBids.length; ++i) {\\n                if (sortedBids[i].isRollover) {\\n                    _markRolloverAsProcessed(\\n                        sortedBids[i].rolloverPairOffTermRepoServicer,\\n                        sortedBids[i].bidder\\n                    );\\n                } else {\\n                    termAuctionBidLocker.auctionUnlockBid(\\n                        sortedBids[i].id,\\n                        sortedBids[i].bidder,\\n                        sortedBids[i].collateralTokens,\\n                        sortedBids[i].collateralAmounts\\n                    );\\n                }\\n            }\\n            // Return sorted offer funds.\\n            for (uint256 i = 0; i < sortedOffers.length; ++i) {\\n                termAuctionOfferLocker.unlockOfferPartial(\\n                    sortedOffers[i].id,\\n                    sortedOffers[i].offeror,\\n                    sortedOffers[i].amount\\n                );\\n            }\\n\\n            if (\\n                sortedBids.length > 0 &&\\n                sortedOffers.length > 0 &&\\n                sortedBids[sortedBids.length - 1].bidPriceRevealed <\\n                sortedOffers[0].offerPriceRevealed\\n            ) {\\n                emitter.emitAuctionCancelled(termAuctionId, true);\\n            } else {\\n                emitter.emitAuctionCancelled(termAuctionId, false);\\n            }\\n        }\\n\\n        // Return unrevealed bid funds.\\n        for (uint256 i = 0; i < unrevealedBids.length; ++i) {\\n            if (unrevealedBids[i].isRollover) {\\n                _markRolloverAsProcessed(\\n                    unrevealedBids[i].rolloverPairOffTermRepoServicer,\\n                    unrevealedBids[i].bidder\\n                );\\n            } else {\\n                termAuctionBidLocker.auctionUnlockBid(\\n                    unrevealedBids[i].id,\\n                    unrevealedBids[i].bidder,\\n                    unrevealedBids[i].collateralTokens,\\n                    unrevealedBids[i].collateralAmounts\\n                );\\n            }\\n        }\\n        // Return unrevealed offer funds.\\n        for (uint256 i = 0; i < unrevealedOffers.length; ++i) {\\n            termAuctionOfferLocker.unlockOfferPartial(\\n                unrevealedOffers[i].id,\\n                unrevealedOffers[i].offeror,\\n                unrevealedOffers[i].amount\\n            );\\n        }\\n\\n        assert(termRepoServicer.isTermRepoBalanced());\\n    }\\n\\n    // ========================================================================\\n    // = Admin ================================================================\\n    // ========================================================================\\n\\n    /// @notice Cancels an auction and returns all funds to bidders and fulfillBiders\\n    /// @param completeAuctionInput A struct containing all revealed and unrevealed bids and offers and expired rollover bids\\n    function cancelAuction(\\n        CompleteAuctionInput calldata completeAuctionInput\\n    ) public onlyWhileAuctionClosed onlyRole(DEFAULT_ADMIN_ROLE) {\\n        // Sort bids/offers by price. Orders right on the price\\n        // edge will be partially filled.\\n        (\\n            TermAuctionRevealedBid[] memory sortedBids,\\n            TermAuctionBid[] memory unrevealedBids\\n        ) = termAuctionBidLocker.getAllBids(\\n                completeAuctionInput.revealedBidSubmissions,\\n                completeAuctionInput.expiredRolloverBids,\\n                completeAuctionInput.unrevealedBidSubmissions\\n            );\\n        (\\n            TermAuctionRevealedOffer[] memory sortedOffers,\\n            TermAuctionOffer[] memory unrevealedOffers\\n        ) = termAuctionOfferLocker.getAllOffers(\\n                completeAuctionInput.revealedOfferSubmissions,\\n                completeAuctionInput.unrevealedOfferSubmissions\\n            );\\n\\n        // Return revealed bid funds.\\n        uint256 i = 0;\\n        for (i = 0; i < sortedBids.length; ++i) {\\n            if (sortedBids[i].isRollover) {\\n                _markRolloverAsProcessed(\\n                    sortedBids[i].rolloverPairOffTermRepoServicer,\\n                    sortedBids[i].bidder\\n                );\\n            } else {\\n                termAuctionBidLocker.auctionUnlockBid(\\n                    sortedBids[i].id,\\n                    sortedBids[i].bidder,\\n                    sortedBids[i].collateralTokens,\\n                    sortedBids[i].collateralAmounts\\n                );\\n            }\\n        }\\n        // Return revealed offer funds.\\n        for (i = 0; i < sortedOffers.length; ++i) {\\n            termAuctionOfferLocker.unlockOfferPartial(\\n                sortedOffers[i].id,\\n                sortedOffers[i].offeror,\\n                sortedOffers[i].amount\\n            );\\n        }\\n        // Return unrevealed bid funds.\\n        for (i = 0; i < unrevealedBids.length; ++i) {\\n            if (unrevealedBids[i].isRollover) {\\n                _markRolloverAsProcessed(\\n                    unrevealedBids[i].rolloverPairOffTermRepoServicer,\\n                    unrevealedBids[i].bidder\\n                );\\n            } else {\\n                termAuctionBidLocker.auctionUnlockBid(\\n                    unrevealedBids[i].id,\\n                    unrevealedBids[i].bidder,\\n                    unrevealedBids[i].collateralTokens,\\n                    unrevealedBids[i].collateralAmounts\\n                );\\n            }\\n        }\\n        // Return unrevealed offer funds.\\n        for (i = 0; i < unrevealedOffers.length; ++i) {\\n            termAuctionOfferLocker.unlockOfferPartial(\\n                unrevealedOffers[i].id,\\n                unrevealedOffers[i].offeror,\\n                unrevealedOffers[i].amount\\n            );\\n        }\\n\\n        emitter.emitAuctionCancelled(termAuctionId, false);\\n\\n        assert(termRepoServicer.isTermRepoBalanced());\\n    }\\n\\n    /// @notice Cancels an auction and sets auctionCancelledForWithdrawal to true to open unlocking tenders\\n    function cancelAuctionForWithdrawal(\\n        address[] calldata rolloverBorrowers,\\n        address[] calldata rolloverPairOffTermRepoServicer\\n    ) public onlyWhileAuctionClosed onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < rolloverBorrowers.length; ++i) {\\n            _markRolloverAsProcessed(\\n                rolloverPairOffTermRepoServicer[i],\\n                rolloverBorrowers[i]\\n            );\\n        }\\n\\n        auctionCancelledForWithdrawal = true;\\n        emitter.emitAuctionCancelled(termAuctionId, false);\\n    }\\n\\n    // ========================================================================\\n    // = Helpers ==============================================================\\n    // ========================================================================\\n    function _increaseCumSumBids(\\n        TermAuctionRevealedBid[] memory sortedBids,\\n        uint256 startIndex,\\n        uint256 previousCumSumBids,\\n        uint256 currentPrice\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 cumsumBids = previousCumSumBids;\\n        uint256 i;\\n\\n        for (\\n            i = startIndex;\\n            sortedBids[i].bidPriceRevealed >= currentPrice;\\n            --i\\n        ) {\\n            cumsumBids += sortedBids[i].amount;\\n            if (i == 0) break;\\n        }\\n        return (\\n            cumsumBids,\\n            sortedBids[i].bidPriceRevealed < currentPrice ? i + 1 : i\\n        );\\n    }\\n\\n    function _decreaseCumSumBids(\\n        TermAuctionRevealedBid[] memory sortedBids,\\n        uint256 startIndex,\\n        uint256 previousCumSumBids,\\n        uint256 currentPrice\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 cumsumBids = previousCumSumBids;\\n        uint256 i;\\n\\n        for (\\n            i = startIndex;\\n            i < sortedBids.length &&\\n                sortedBids[i].bidPriceRevealed < currentPrice;\\n            i++\\n        ) cumsumBids -= sortedBids[i].amount;\\n\\n        return (cumsumBids, i);\\n    }\\n\\n    /// Returns the min of two `uint256` values\\n    /// @param a The first value to compare\\n    /// @param b The second value to compare\\n    /// @return The min of the two values\\n    function _minUint256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// Calculates the intersection between bid/offer schedules to arrive at a clearing price\\n    /// @dev Imagine a graph with price along the X-axis and cumsum(bid/offerAmount*price) along the Y-axis. This function finds the point where the supply line crosses the demand line using binary search\\n    /// @param sortedBids A sorted array of bids used to arrive at a demand schedule\\n    /// @param sortedOffers A sorted array of offers used to arrive at a supply schedule\\n    /// @param clearingOffset The offset to apply to the marginal bid and offer indexes when calculating the final clearing price\\n    /// @return clearingPrice The price at which Term Auction will be cleared\\n    function _calculateClearingPrice(\\n        TermAuctionRevealedBid[] memory sortedBids,\\n        TermAuctionRevealedOffer[] memory sortedOffers,\\n        uint256 clearingOffset\\n    ) internal pure returns (uint256, uint256) {\\n        if (clearingOffset != 1 && clearingOffset != 0) {\\n            revert ClearingOffsetNot0Or1(clearingOffset);\\n        }\\n\\n        // Local function variables are kept in memory\\n        ClearingPriceState memory state = ClearingPriceState({\\n            offerPrice: sortedOffers[0].offerPriceRevealed, // p^o_i\\n            offerIndex: 1, // idxo(offerPrice)\\n            cumSumOffers: sortedOffers[0].amount, // cso(offerPrice)\\n            bidIndex: sortedBids.length,\\n            cumSumBids: 0,\\n            maxClearingVolume: 0,\\n            nextOfferIndex: 0,\\n            nextBidIndex: 0,\\n            nextCumSumOffers: 0,\\n            nextCumSumBids: 0,\\n            nextOfferPrice: 0,\\n            nextMaxClearingVolume: 0,\\n            minCumSumCorrection: false,\\n            nextBidPrice: 0,\\n            clearingPrice: 0\\n        });\\n\\n        // Calculate bidIndex = idxb(offerPrice) and cumSumBids = csb(offerPrice)\\n        (state.cumSumBids, state.bidIndex) = _increaseCumSumBids(\\n            sortedBids,\\n            state.bidIndex - 1,\\n            0,\\n            state.offerPrice\\n        );\\n\\n        // Calculate initial maximal clearing volume\\n        state.maxClearingVolume = _minUint256(\\n            state.cumSumBids,\\n            state.cumSumOffers\\n        );\\n\\n        // Calculate the pre-clearance price: maximise the clearing volume\\n        while (\\n            state.offerIndex < sortedOffers.length &&\\n            state.bidIndex < sortedBids.length\\n        ) {\\n            // Initialise the next iteration of the relevant variables\\n            state.nextOfferIndex = state.offerIndex;\\n            state.nextBidIndex = state.bidIndex;\\n            state.nextCumSumOffers = state.cumSumOffers;\\n            state.nextCumSumBids = state.cumSumBids;\\n            state.nextOfferPrice = sortedOffers[state.offerIndex]\\n                .offerPriceRevealed;\\n\\n            // Obtain next offer index, increase cumulative sum\\n            while (\\n                state.nextOfferIndex < sortedOffers.length &&\\n                sortedOffers[state.nextOfferIndex].offerPriceRevealed ==\\n                state.nextOfferPrice\\n            )\\n                state.nextCumSumOffers += sortedOffers[state.nextOfferIndex++]\\n                    .amount;\\n\\n            // Obtain next bid index, decrease cumulative sum\\n            (state.nextCumSumBids, state.nextBidIndex) = _decreaseCumSumBids(\\n                sortedBids,\\n                state.nextBidIndex,\\n                state.nextCumSumBids,\\n                state.nextOfferPrice\\n            );\\n\\n            state.nextMaxClearingVolume = _minUint256(\\n                state.nextCumSumBids,\\n                state.nextCumSumOffers\\n            );\\n            if (state.nextMaxClearingVolume > state.maxClearingVolume) {\\n                state.offerIndex = state.nextOfferIndex;\\n                state.bidIndex = state.nextBidIndex;\\n                state.cumSumOffers = state.nextCumSumOffers;\\n                state.cumSumBids = state.nextCumSumBids;\\n                state.offerPrice = state.nextOfferPrice;\\n                state.maxClearingVolume = state.nextMaxClearingVolume;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        // Get next offer price: first offer price higher than the pre-clearance price\\n        state.nextOfferPrice = (state.offerIndex < sortedOffers.length)\\n            ? sortedOffers[state.offerIndex].offerPriceRevealed\\n            : type(uint256).max;\\n\\n        // Minimise css by minimising csb as long as bid price is smaller than next offer price\\n        while (state.bidIndex < sortedBids.length) {\\n            state.nextBidIndex = state.bidIndex;\\n            state.nextBidPrice = sortedBids[state.bidIndex].bidPriceRevealed;\\n            state.nextCumSumBids = state.cumSumBids;\\n            if (state.nextBidPrice < state.nextOfferPrice) {\\n                while (\\n                    state.nextBidIndex < sortedBids.length &&\\n                    sortedBids[state.nextBidIndex].bidPriceRevealed ==\\n                    state.nextBidPrice\\n                ) {\\n                    state.nextCumSumBids -= sortedBids[state.nextBidIndex++]\\n                        .amount;\\n                }\\n                if (state.nextCumSumBids >= state.cumSumOffers) {\\n                    state.minCumSumCorrection = true;\\n                    state.cumSumBids = state.nextCumSumBids;\\n                    state.bidIndex = state.nextBidIndex;\\n                } else {\\n                    break;\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        // Calculate clearing price: bid price if minimum correction was made and offer price otherwise\\n        if (state.minCumSumCorrection)\\n            state.clearingPrice = (state.bidIndex == sortedBids.length)\\n                ? sortedBids[state.bidIndex - 1].bidPriceRevealed\\n                : sortedBids[state.bidIndex].bidPriceRevealed;\\n        else state.clearingPrice = state.offerPrice;\\n\\n        // The main loop positions `offerIndex` at the first index greater than the price.\\n        // It needs to be shifted back to get the last index smaller than or equal to the price.\\n        state.offerIndex--;\\n\\n        // If non-zero clearing offset, find the offset tender prices and then average them to find the final clearing price.\\n        if (clearingOffset == 1) {\\n            uint256 nextOfferPriceIndex = state.offerIndex;\\n            while (\\n                nextOfferPriceIndex > 0 &&\\n                sortedOffers[nextOfferPriceIndex].offerPriceRevealed ==\\n                sortedOffers[state.offerIndex].offerPriceRevealed\\n            ) {\\n                nextOfferPriceIndex -= 1;\\n            }\\n\\n            uint256 nextBidPriceIndex = state.bidIndex;\\n\\n            // In the case that there is no clear, bid index is past end of array, so decrement it to last element.\\n            if (state.bidIndex == sortedBids.length) {\\n                nextBidPriceIndex -= 1;\\n            }\\n\\n            while (\\n                nextBidPriceIndex < sortedBids.length - 1 &&\\n                sortedBids[nextBidPriceIndex].bidPriceRevealed ==\\n                sortedBids[state.bidIndex].bidPriceRevealed\\n            ) {\\n                nextBidPriceIndex += 1;\\n            }\\n\\n            state.clearingPrice =\\n                (sortedOffers[nextOfferPriceIndex].offerPriceRevealed +\\n                    sortedBids[nextBidPriceIndex].bidPriceRevealed) /\\n                2;\\n        } else {\\n            // In the case that there is no clear, bid index is past end of array, so decrement it to last element.\\n            if (state.bidIndex == sortedBids.length) {\\n                state.bidIndex -= 1;\\n            }\\n            state.clearingPrice =\\n                (sortedOffers[state.offerIndex].offerPriceRevealed +\\n                    sortedBids[state.bidIndex].bidPriceRevealed) /\\n                2;\\n        }\\n\\n        //update state.cumSumOffers\\n        if (\\n            sortedOffers[state.offerIndex].offerPriceRevealed <=\\n            state.clearingPrice\\n        ) {\\n            state.offerIndex++;\\n            while (\\n                state.offerIndex < sortedOffers.length &&\\n                sortedOffers[state.offerIndex].offerPriceRevealed <=\\n                state.clearingPrice\\n            ) {\\n                state.cumSumOffers += sortedOffers[state.offerIndex].amount;\\n                state.offerIndex++;\\n            }\\n        } else {\\n            while (\\n                sortedOffers[state.offerIndex].offerPriceRevealed >\\n                state.clearingPrice\\n            ) {\\n                state.cumSumOffers -= sortedOffers[state.offerIndex].amount;\\n                if (state.offerIndex == 0) break;\\n                state.offerIndex--;\\n            }\\n        }\\n\\n        //update state.cumSumBids\\n        if (\\n            state.bidIndex < sortedBids.length &&\\n            sortedBids[state.bidIndex].bidPriceRevealed < state.clearingPrice\\n        ) {\\n            (state.cumSumBids, state.bidIndex) = _decreaseCumSumBids(\\n                sortedBids,\\n                state.bidIndex,\\n                state.cumSumBids,\\n                state.clearingPrice\\n            );\\n        } else if (state.bidIndex > 0) {\\n            (state.cumSumBids, state.bidIndex) = _increaseCumSumBids(\\n                sortedBids,\\n                state.bidIndex - 1,\\n                state.cumSumBids,\\n                state.clearingPrice\\n            );\\n        }\\n\\n        return (\\n            state.clearingPrice,\\n            _minUint256(state.cumSumBids, state.cumSumOffers)\\n        );\\n    }\\n\\n    /// Finds the index of the first bid with a bidPrice of `price` and calculate the cumsum of the bid amounts up to that index\\n    /// @param price The price to search for\\n    /// @param sortedBids An array of sorted bids to search\\n    /// @param startIndex The index to start searching from\\n    /// @return i The index of the first bid with a bidPrice of `price`\\n    /// @return totalAmount The cumsum of the bid amounts up to return index i\\n    function _findFirstIndexForPrice(\\n        uint256 price,\\n        TermAuctionRevealedBid[] memory sortedBids,\\n        uint256 startIndex\\n    ) internal pure returns (uint256 i, uint256 totalAmount) {\\n        i = startIndex;\\n        totalAmount = sortedBids[i].amount;\\n        while (true) {\\n            if (i == 0 || sortedBids[i - 1].bidPriceRevealed != price) {\\n                break;\\n            }\\n            totalAmount += sortedBids[i - 1].amount;\\n            --i;\\n        }\\n        return (i, totalAmount);\\n    }\\n\\n    /// Finds the index of the last offer with a offerPrice of `price` and calculate the cumsum of the offer amounts up to that index\\n    /// @param price The price to search for\\n    /// @param sortedOffers An array of offers to search\\n    /// @param startIndex The index to start searching from\\n    /// @return i The index of the last offer with a offerPrice of `price`\\n    /// @return totalAmount The cumsum of the offer amounts up to return index i\\n    function _findLastIndexForPrice(\\n        uint256 price,\\n        TermAuctionRevealedOffer[] memory sortedOffers,\\n        uint256 startIndex\\n    ) internal pure returns (uint256 i, uint256 totalAmount) {\\n        i = startIndex;\\n        totalAmount = sortedOffers[i].amount;\\n        while (i < (sortedOffers.length - 1)) {\\n            if (sortedOffers[i + 1].offerPriceRevealed != price) {\\n                break;\\n            }\\n            totalAmount += sortedOffers[i + 1].amount;\\n            ++i;\\n        }\\n        return (i, totalAmount);\\n    }\\n\\n    /// Fully assigns a bid\\n    /// @param bid The bid to assign\\n    /// @return The amount that was assigned\\n    function _fullyAssignBid(\\n        TermAuctionRevealedBid memory bid\\n    ) internal nonReentrant returns (uint256) {\\n        uint256 repurchaseAmount = _calculateRepurchasePrice(bid.amount);\\n\\n        if (!bid.isRollover) {\\n            termRepoServicer.fulfillBid(\\n                bid.bidder,\\n                bid.amount,\\n                repurchaseAmount,\\n                bid.collateralTokens,\\n                bid.collateralAmounts,\\n                dayCountFractionMantissa\\n            );\\n        } else {\\n            _assignRolloverBid(\\n                bid.bidder,\\n                bid.amount,\\n                repurchaseAmount,\\n                bid.rolloverPairOffTermRepoServicer\\n            );\\n        }\\n\\n        emitter.emitBidAssigned(termAuctionId, bid.id, bid.amount);\\n\\n        return bid.amount;\\n    }\\n\\n    /// Fully assigns an offer\\n    /// @param offer The offer to assign\\n    /// @return The amount that was assigned\\n    function _fullyAssignOffer(\\n        TermAuctionRevealedOffer memory offer\\n    ) internal nonReentrant returns (uint256) {\\n        uint256 repurchaseAmount = _calculateRepurchasePrice(offer.amount);\\n\\n        termRepoServicer.fulfillOffer(\\n            offer.offeror,\\n            offer.amount,\\n            repurchaseAmount,\\n            offer.id\\n        );\\n\\n        emitter.emitOfferAssigned(termAuctionId, offer.id, offer.amount);\\n\\n        return offer.amount;\\n    }\\n\\n    /// Partially assigns a bid\\n    /// @param bid The bid to assign\\n    /// @param assignedAmount The amount to assign\\n    /// @return The amount that was assigned\\n    function _partiallyAssignBid(\\n        TermAuctionRevealedBid memory bid,\\n        uint256 assignedAmount\\n    ) internal nonReentrant returns (uint256) {\\n        uint256 repurchaseAmount = _calculateRepurchasePrice(assignedAmount);\\n\\n        if (!bid.isRollover) {\\n            termRepoServicer.fulfillBid(\\n                bid.bidder,\\n                assignedAmount,\\n                repurchaseAmount,\\n                bid.collateralTokens,\\n                bid.collateralAmounts,\\n                dayCountFractionMantissa\\n            );\\n        } else {\\n            _assignRolloverBid(\\n                bid.bidder,\\n                assignedAmount,\\n                repurchaseAmount,\\n                bid.rolloverPairOffTermRepoServicer\\n            );\\n        }\\n\\n        emitter.emitBidAssigned(termAuctionId, bid.id, assignedAmount);\\n\\n        return assignedAmount;\\n    }\\n\\n    /// Partially assigns an offer\\n    /// @param offer The offer to assign\\n    /// @param assignedAmount The amount to assign\\n    /// @return The amount that was assigned\\n    function _partiallyAssignOffer(\\n        TermAuctionRevealedOffer memory offer,\\n        uint256 assignedAmount\\n    ) internal nonReentrant returns (uint256) {\\n        uint256 repurchaseAmount = _calculateRepurchasePrice(assignedAmount);\\n\\n        termRepoServicer.fulfillOffer(\\n            offer.offeror,\\n            assignedAmount,\\n            repurchaseAmount,\\n            offer.id\\n        );\\n\\n        // Unlock remaining.\\n        termAuctionOfferLocker.unlockOfferPartial(\\n            offer.id,\\n            offer.offeror,\\n            offer.amount - assignedAmount\\n        );\\n\\n        emitter.emitOfferAssigned(termAuctionId, offer.id, assignedAmount);\\n\\n        return assignedAmount;\\n    }\\n\\n    function _assignRolloverBid(\\n        address borrower,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        address rolloverPairOffTermRepoServicer\\n    ) internal {\\n        ITermRepoServicer previousTermRepoServicer = ITermRepoServicer(\\n            rolloverPairOffTermRepoServicer\\n        );\\n        uint256 rolloverPaymentToCollapseBorrower = termRepoServicer\\n            .openExposureOnRolloverNew(\\n                borrower,\\n                purchasePrice,\\n                repurchasePrice,\\n                address(previousTermRepoServicer.termRepoLocker()),\\n                dayCountFractionMantissa\\n            );\\n        uint256 proportionPreviousLoanPaid = previousTermRepoServicer\\n            .closeExposureOnRolloverExisting(\\n                borrower,\\n                rolloverPaymentToCollapseBorrower\\n            );\\n        ITermRepoCollateralManager previousTermRepoCollateralManager = ITermRepoCollateralManager(\\n                previousTermRepoServicer.termRepoCollateralManager()\\n            );\\n        (\\n            address[] memory collateralTypes,\\n            uint256[] memory collateralAmounts\\n        ) = previousTermRepoCollateralManager.transferRolloverCollateral(\\n                borrower,\\n                proportionPreviousLoanPaid,\\n                address(termRepoServicer.termRepoLocker())\\n            );\\n\\n        ITermRepoCollateralManager currentTermRepoCollateralManager = termRepoServicer\\n                .termRepoCollateralManager();\\n\\n        for (uint256 i = 0; i < collateralTypes.length; ++i) {\\n            if (collateralAmounts[i] > 0) {\\n                currentTermRepoCollateralManager.acceptRolloverCollateral(\\n                    borrower,\\n                    collateralTypes[i],\\n                    collateralAmounts[i]\\n                );\\n            }\\n        }\\n    }\\n\\n    function _markRolloverAsProcessed(\\n        address rolloverPairOffTermRepoServicer,\\n        address borrower\\n    ) internal {\\n        ITermRepoServicer termRepoServicer_ = ITermRepoServicer(\\n            rolloverPairOffTermRepoServicer\\n        );\\n        ITermRepoRolloverManager rolloverManager = termRepoServicer_\\n            .termRepoRolloverManager();\\n        rolloverManager.fulfillRollover(borrower);\\n    }\\n\\n    /// Assigns bids up to `maxAssignable`\\n    /// @dev This method allocates pro-rata across an the marginal price group (pro-rata on the margin) and attempts to prevent residuals from accumulating to a single bid\\n    /// @param sortedBids An array of sorted bids to process\\n    /// @param maxAssignable The maximum bid amount that can be assigned across all bidders\\n    /// @param purchaseTokenDecimals The number of decimals of the purchase token\\n    /// @return The total amount assigned\\n    function _assignBids(\\n        TermAuctionRevealedBid[] memory sortedBids,\\n        uint256 maxAssignable,\\n        uint256 purchaseTokenDecimals\\n    ) internal returns (uint256) {\\n        // Process revealed bids.\\n        uint256 totalAssignedBids = 0;\\n        uint256 innerIndex = 0;\\n        uint256 i = 0;\\n        for (uint256 j = sortedBids.length; j > 0; --j) {\\n            i = j - 1;\\n\\n            // First, find the sub-range that contains the current price.\\n            (uint256 k, uint256 priceGroupAmount) = _findFirstIndexForPrice(\\n                sortedBids[i].bidPriceRevealed,\\n                sortedBids,\\n                i\\n            );\\n            // NOTE: priceGroupAmount gets changed later on in this function and is used as the \\\"remaining\\\" priceGroupAmount during partial assignment.\\n\\n            if (\\n                sortedBids[i].bidPriceRevealed >= clearingPrice &&\\n                totalAssignedBids < maxAssignable &&\\n                priceGroupAmount <= (maxAssignable - totalAssignedBids)\\n            ) {\\n                // Full assignment for entire price group.\\n\\n                innerIndex = 0;\\n                for (; (i - innerIndex) >= k; ++innerIndex) {\\n                    // NOTE: This loop is actually decrementing!\\n                    totalAssignedBids += _fullyAssignBid(\\n                        sortedBids[i - innerIndex]\\n                    );\\n\\n                    if (i == innerIndex) {\\n                        ++innerIndex;\\n                        break;\\n                    }\\n                }\\n                if (innerIndex > 0) {\\n                    j -= (innerIndex - 1);\\n                }\\n            } else if (\\n                sortedBids[i].bidPriceRevealed >= clearingPrice &&\\n                totalAssignedBids < maxAssignable\\n            ) {\\n                // Partial assignment for entire price group.\\n\\n                innerIndex = 0;\\n                for (; (i - innerIndex) >= k; ++innerIndex) {\\n                    if ((i - innerIndex) == k) {\\n                        // Last iteration of loop. Assign remaining amount left to assign.\\n                        totalAssignedBids += _partiallyAssignBid(\\n                            sortedBids[i - innerIndex],\\n                            maxAssignable - totalAssignedBids\\n                        );\\n                        priceGroupAmount -= maxAssignable - totalAssignedBids;\\n                    } else {\\n                        // Assign an amount based upon the partial assignment ratio.\\n\\n                        uint256 bidAmount = sortedBids[i - innerIndex].amount;\\n                        Exp memory partialAssignmentRatio = div_(\\n                            Exp({\\n                                mantissa: (maxAssignable - totalAssignedBids) *\\n                                    10 ** (18 - purchaseTokenDecimals)\\n                            }),\\n                            Exp({\\n                                mantissa: priceGroupAmount *\\n                                    10 ** (18 - purchaseTokenDecimals)\\n                            })\\n                        );\\n                        uint256 assignedAmount = mul_(\\n                            partialAssignmentRatio,\\n                            Exp({\\n                                mantissa: bidAmount *\\n                                    10 ** (18 - purchaseTokenDecimals)\\n                            })\\n                        ).mantissa / 10 ** (18 - purchaseTokenDecimals);\\n\\n                        totalAssignedBids += _partiallyAssignBid(\\n                            sortedBids[i - innerIndex],\\n                            assignedAmount\\n                        );\\n                        priceGroupAmount -= sortedBids[i - innerIndex].amount;\\n                    }\\n\\n                    if (i == innerIndex) {\\n                        ++innerIndex;\\n                        break;\\n                    }\\n                }\\n                if (innerIndex > 0) {\\n                    j -= (innerIndex - 1);\\n                }\\n            } else {\\n                // No assignment.\\n                if (sortedBids[i].isRollover) {\\n                    _markRolloverAsProcessed(\\n                        sortedBids[i].rolloverPairOffTermRepoServicer,\\n                        sortedBids[i].bidder\\n                    );\\n                } else {\\n                    termAuctionBidLocker.auctionUnlockBid(\\n                        sortedBids[i].id,\\n                        sortedBids[i].bidder,\\n                        sortedBids[i].collateralTokens,\\n                        sortedBids[i].collateralAmounts\\n                    );\\n                }\\n            }\\n        }\\n\\n        return totalAssignedBids;\\n    }\\n\\n    /// Assigns offers up to `maxAssignable`\\n    /// @dev This method allocates pro-rata across an the marginal price group (pro-rata on the margin) and attempts to prevent residuals from accumulating to a single offer\\n    /// @param sortedOffers An array of sorted offers to process\\n    /// @param maxAssignable The maximum offer amount that can be assigned across all offers\\n    /// @param purchaseTokenDecimals The number of decimals of the purchase token\\n    /// @return The total amount assigned\\n    function _assignOffers(\\n        TermAuctionRevealedOffer[] memory sortedOffers,\\n        uint256 maxAssignable,\\n        uint256 purchaseTokenDecimals\\n    ) internal returns (uint256) {\\n        // Process revealed offers.\\n        uint256 totalAssignedOffers = 0;\\n        uint256 innerIndex = 0;\\n        uint256 i = 0;\\n        for (i = 0; i < sortedOffers.length; ++i) {\\n            // First, find the sub-range that contains the current price.\\n            (uint256 k, uint256 priceGroupAmount) = _findLastIndexForPrice(\\n                sortedOffers[i].offerPriceRevealed,\\n                sortedOffers,\\n                i\\n            );\\n            // NOTE: priceGroupAmount gets changed later on in this function and is used as the \\\"remaining\\\" priceGroupAmount during partial assignment.\\n\\n            if (\\n                sortedOffers[i].offerPriceRevealed <= clearingPrice &&\\n                totalAssignedOffers < maxAssignable &&\\n                priceGroupAmount <= (maxAssignable - totalAssignedOffers)\\n            ) {\\n                // Full assignment.\\n                innerIndex = 0;\\n                for (; (innerIndex + i) <= k; ++innerIndex) {\\n                    totalAssignedOffers += _fullyAssignOffer(\\n                        sortedOffers[innerIndex + i]\\n                    );\\n                }\\n                if (innerIndex > 0) {\\n                    i += innerIndex - 1;\\n                }\\n            } else if (\\n                sortedOffers[i].offerPriceRevealed <= clearingPrice &&\\n                totalAssignedOffers < maxAssignable\\n            ) {\\n                // Partial assignment.\\n                innerIndex = 0;\\n                for (; (innerIndex + i) <= k; innerIndex++) {\\n                    if ((innerIndex + i) == k) {\\n                        // Last iteration of loop. Assign remaining amount left to assign.\\n                        totalAssignedOffers += _partiallyAssignOffer(\\n                            sortedOffers[innerIndex + i],\\n                            maxAssignable - totalAssignedOffers\\n                        );\\n                        priceGroupAmount -= maxAssignable - totalAssignedOffers;\\n                    } else {\\n                        // Assign an amount based upon the partial assignment ratio.\\n\\n                        uint256 offerAmount = sortedOffers[innerIndex + i]\\n                            .amount;\\n                        Exp memory partialAssignmentRatio = div_(\\n                            Exp({\\n                                mantissa: (maxAssignable -\\n                                    totalAssignedOffers) *\\n                                    10 ** (18 - purchaseTokenDecimals)\\n                            }),\\n                            Exp({\\n                                mantissa: priceGroupAmount *\\n                                    10 ** (18 - purchaseTokenDecimals)\\n                            })\\n                        );\\n                        uint256 assignedAmount = (innerIndex + i) != k\\n                            ? mul_(\\n                                partialAssignmentRatio,\\n                                Exp({\\n                                    mantissa: offerAmount *\\n                                        10 ** (18 - purchaseTokenDecimals)\\n                                })\\n                            ).mantissa / 10 ** (18 - purchaseTokenDecimals)\\n                            : maxAssignable - totalAssignedOffers;\\n\\n                        totalAssignedOffers += _partiallyAssignOffer(\\n                            sortedOffers[innerIndex + i],\\n                            assignedAmount\\n                        );\\n                        priceGroupAmount -= sortedOffers[innerIndex + i].amount;\\n                    }\\n                }\\n                if (innerIndex > 0) {\\n                    i += innerIndex - 1;\\n                }\\n            } else {\\n                // No assignment.\\n\\n                // Return purchase tokens to offeror.\\n                termAuctionOfferLocker.unlockOfferPartial(\\n                    sortedOffers[i].id,\\n                    sortedOffers[i].offeror,\\n                    sortedOffers[i].amount\\n                );\\n            }\\n        }\\n\\n        return totalAssignedOffers;\\n    }\\n\\n    /// Calculates repurchase price given a purchase price (equivalent to principal plus interest)\\n    /// @param purchasePrice The purchase price\\n    /// @return The repurchase price obtained by applying the clearing rate on an Actual/360 day-count convention\\n    function _calculateRepurchasePrice(\\n        uint256 purchasePrice\\n    ) internal view returns (uint256) {\\n        Exp memory repurchaseFactor = add_(\\n            Exp({mantissa: expScale}),\\n            mul_(\\n                Exp({mantissa: dayCountFractionMantissa}),\\n                Exp({mantissa: clearingPrice})\\n            )\\n        );\\n\\n        return\\n            truncate(\\n                mul_(\\n                    Exp({mantissa: purchasePrice * expScale}),\\n                    repurchaseFactor\\n                )\\n            );\\n    }\\n\\n    function _calculateAndStoreClearingPrice(\\n        TermAuctionRevealedBid[] memory sortedBids,\\n        TermAuctionRevealedOffer[] memory sortedOffers\\n    ) internal nonReentrant returns (uint256, uint256) {\\n        (\\n            uint256 clearingPrice_,\\n            uint256 maxAssignable\\n        ) = _calculateClearingPrice(\\n                sortedBids,\\n                sortedOffers,\\n                CLEARING_PRICE_POST_PROCESSING_OFFSET\\n            );\\n\\n        clearingPrice = clearingPrice_;\\n\\n        return (clearingPrice_, maxAssignable);\\n    }\\n\\n    // ========================================================================\\n    // = Pausable =============================================================\\n    // ========================================================================\\n\\n    /// @dev This function pauses the TermAuction contract preventing public state changes\\n    /// @dev See {Pausable-_pause}.\\n    function pauseCompleteAuction() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        completeAuctionPaused = true;\\n        emitter.emitCompleteAuctionPaused(termAuctionId, termRepoId);\\n    }\\n\\n    /// Unpuses the TermAuction contract allowing public state changes\\n    /// @dev See {Pausable-_unpause}.\\n    function unpauseCompleteAuction() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        completeAuctionPaused = false;\\n        emitter.emitCompleteAuctionUnpaused(termAuctionId, termRepoId);\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    ///@dev required override by the OpenZeppelin UUPS module\\n    function _authorizeUpgrade(\\n        address\\n    ) internal view override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n    // solhint-enable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/TermPriceConsumerV3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/ITermPriceOracle.sol\\\";\\nimport \\\"./interfaces/ITermPriceOracleErrors.sol\\\";\\nimport \\\"./interfaces/ITermPriceOracleEvents.sol\\\";\\n\\nimport \\\"./interfaces/ITermEventEmitter.sol\\\";\\n\\nimport \\\"./lib/Collateral.sol\\\";\\nimport \\\"./lib/ExponentialNoError.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/// @author TermLabs\\n/// @title Term Price Consumer V3\\n/// @notice This contract is a centralized price oracle contract that feeds pricing data to all Term Repos\\n/// @dev This contract operates at the protocol level and governs all instances of a Term Repo\\ncontract TermPriceConsumerV3 is\\n    ITermPriceOracle,\\n    ITermPriceOracleErrors,\\n    ITermPriceOracleEvents,\\n    Initializable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    ExponentialNoError\\n{\\n    // ========================================================================\\n    // = Access Role  ======================================================\\n    // ========================================================================\\n\\n    bytes32 public constant AUCTIONEER_ROLE = keccak256(\\\"AUCTIONEER_ROLE\\\");\\n    bytes32 public constant AUCTION_SCHEDULER = keccak256(\\\"TERM_REOPENER_ROLE\\\");\\n    bytes32 public constant TERM_CONTRACT = keccak256(\\\"TERM_CONTRACT\\\");\\n\\n    mapping(address => AggregatorV3Interface) internal priceFeeds;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Intializes with an array of token addresses, followed with an array of Chainlink aggregator addresses\\n    /// @notice https://docs.chain.link/docs/ethereum-addresses/\\n    function initialize() external initializer {\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n        AccessControlUpgradeable.__AccessControl_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(AUCTION_SCHEDULER, msg.sender);\\n        _grantRole(AUCTIONEER_ROLE, msg.sender);\\n    }\\n\\n    /// @param token The address of the token to add a price feed for\\n    /// @param tokenPriceAggregator The proxy price aggregator address for token to be added\\n    function addNewTokenPriceFeed(\\n        address token,\\n        address tokenPriceAggregator\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        priceFeeds[token] = AggregatorV3Interface(tokenPriceAggregator);\\n        emit SubscribePriceFeed(token, tokenPriceAggregator);\\n    }\\n\\n    /// @param token The address of the token whose price feed needs to be removed\\n    function removeTokenPriceFeed(\\n        address token\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        delete priceFeeds[token];\\n        emit UnsubscribePriceFeed(token);\\n    }\\n\\n    /// @param termRepoCollateralManager The address of the TermRepoCollateralManager contract\\n    function reOpenToNewTerm(\\n        address termRepoCollateralManager\\n    ) external onlyRole(AUCTION_SCHEDULER) {\\n        _grantRole(TERM_CONTRACT, termRepoCollateralManager);\\n        _grantRole(AUCTIONEER_ROLE, termRepoCollateralManager);\\n    }\\n\\n    /// @param termAuctionBidLocker The address of the TermAuctionBidLocker contract\\n    function reOpenToNewBidLocker(\\n        address termAuctionBidLocker\\n    ) external onlyRole(AUCTIONEER_ROLE) {\\n        _grantRole(TERM_CONTRACT, termAuctionBidLocker);\\n    }\\n\\n    /// @notice A function to return current market value given a token address and an amount\\n    /// @param token The address of the token to query\\n    /// @param amount The amount tokens to value\\n    /// @return The current market value of tokens at the specified amount, in USD\\n    function usdValueOfTokens(\\n        address token,\\n        uint256 amount\\n    ) external view returns (Exp memory) {\\n        if (address(priceFeeds[token]) == address(0)) {\\n            revert NoPriceFeed(token);\\n        }\\n        uint256 latestPrice = uint256(_getLatestPrice(token));\\n        uint8 priceDecimals = _getDecimals(token);\\n\\n        IERC20MetadataUpgradeable tokenInstance = IERC20MetadataUpgradeable(\\n            token\\n        );\\n        uint8 tokenDecimals = tokenInstance.decimals();\\n\\n        return\\n            mul_(\\n                Exp({mantissa: (amount * expScale) / 10 ** tokenDecimals}),\\n                Exp({mantissa: (latestPrice * expScale) / 10 ** priceDecimals})\\n            );\\n    }\\n\\n    /// @return The latest price from price aggregator\\n    function _getLatestPrice(address token) internal view returns (int256) {\\n        (\\n            ,\\n            // uint80 roundID\\n            int256 price, // uint startedAt // //uint timeStamp// //uint80 answeredInRound//\\n            ,\\n            ,\\n\\n        ) = priceFeeds[token].latestRoundData();\\n        return price;\\n    }\\n\\n    /// @return The decimal places in price feed\\n    function _getDecimals(address token) internal view returns (uint8) {\\n        return priceFeeds[token].decimals();\\n    }\\n\\n    // ========================================================================\\n    // = Upgrades =============================================================\\n    // ========================================================================\\n\\n    // solhint-disable no-empty-blocks\\n    /// @dev required override by the OpenZeppelin UUPS module\\n    function _authorizeUpgrade(\\n        address\\n    ) internal view override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n    // solhint-enable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/TermRepoCollateralManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IAuthenticator.sol\\\";\\nimport \\\"./interfaces/ITermController.sol\\\";\\nimport \\\"./interfaces/ITermEventEmitter.sol\\\";\\nimport \\\"./interfaces/ITermRepoCollateralManager.sol\\\";\\nimport \\\"./interfaces/ITermRepoCollateralManagerErrors.sol\\\";\\nimport \\\"./interfaces/ITermRepoLocker.sol\\\";\\nimport \\\"./interfaces/ITermRepoServicer.sol\\\";\\nimport \\\"./interfaces/ITermRepoToken.sol\\\";\\nimport \\\"./interfaces/ITermPriceOracle.sol\\\";\\n\\nimport \\\"./lib/Collateral.sol\\\";\\nimport \\\"./lib/ExponentialNoError.sol\\\";\\nimport \\\"./lib/TermAuctionGroup.sol\\\";\\nimport \\\"./lib/TermAuth.sol\\\";\\n\\nimport \\\"./TermPriceConsumerV3.sol\\\";\\nimport \\\"./TermRepoLocker.sol\\\";\\nimport \\\"./TermRepoServicer.sol\\\";\\nimport \\\"./TermRepoToken.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/// @author TermLabs\\n/// @title Term Repo Collateral Manager\\n/// @notice This contract enforces margin maintenance rules for adding/withdrawing, repurchasing and liquidating collateral\\n/// @dev This contract belongs to the Term Servicer group of contracts and is specific to a Term Repo deployment\\ncontract TermRepoCollateralManager is\\n    ITermRepoCollateralManager,\\n    ITermRepoCollateralManagerErrors,\\n    Initializable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    ExponentialNoError\\n{\\n    // ========================================================================\\n    // = Access Role  =========================================================\\n    // ========================================================================\\n\\n    bytes32 public constant AUCTION_LOCKER = keccak256(\\\"AUCTION_LOCKER\\\");\\n    bytes32 public constant SERVICER_ROLE = keccak256(\\\"SERVICER_ROLE\\\");\\n    bytes32 public constant ROLLOVER_MANAGER = keccak256(\\\"ROLLOVER_MANAGER\\\");\\n    bytes32 public constant ROLLOVER_TARGET_AUCTIONEER_ROLE =\\n        keccak256(\\\"ROLLOVER_TARGET_AUCTIONEER_ROLE\\\");\\n    bytes32 public constant INITIALIZER_ROLE = keccak256(\\\"INITIALIZER_ROLE\\\");\\n\\n    // ========================================================================\\n    // = State Variables  =====================================================\\n    // ========================================================================\\n\\n    // Term Identifier\\n    bytes32 public termRepoId;\\n\\n    // Boolean indicating if liquidations are paused\\n    bool public liquidationsPaused;\\n\\n    // Boolean indicatting if term contracts paired\\n    bool internal termContractPaired;\\n\\n    // Number of Collateral Tokens Accepted By Term\\n    uint8 public numOfAcceptedCollateralTokens;\\n\\n    // De minimis margin threshold triggering full liquidation\\n    uint256 public deMinimisMarginThreshold;\\n\\n    // Collateral Seizures Share for Protocol in Liquidations\\n    uint256 public liquidateDamangesDueToProtocol;\\n\\n    //Max percentage collateralization of repurchase after liquidation\\n    uint256 public netExposureCapOnLiquidation;\\n\\n    // Repo servicer within same term\\n    ITermRepoServicer internal termRepoServicer;\\n\\n    // token used for purchase/loans\\n    address public purchaseToken;\\n\\n    // consumer for Chainlink price feeds\\n    ITermPriceOracle internal termPriceOracle;\\n\\n    // TermRepoLocker for term funds\\n    ITermRepoLocker public termRepoLocker;\\n\\n    // Term Controller contract\\n    ITermController internal termController;\\n\\n    // Term Authenticator contract\\n    IAuthenticator internal authenticator;\\n\\n    // Term Event Emitter contract\\n    ITermEventEmitter internal emitter;\\n\\n    //list of acceptable collateral token addresses\\n    address[] public collateralTokens;\\n\\n    // mapping of encumbered collateral balances\\n    mapping(address => uint256) internal encumberedCollateralBalances;\\n\\n    // maintenance collateral ratios applicable to accepted collateral token basket\\n    mapping(address => uint256) public maintenanceCollateralRatios;\\n\\n    // initial collateral ratios applicable to accepted collateral token basket\\n    mapping(address => uint256) public initialCollateralRatios;\\n\\n    // liquidated damages schedule applicable to collateral token basket\\n    mapping(address => uint256) public liquidatedDamages;\\n\\n    // Locked Collateral Balance Ledger\\n    // For each wallet address, keep ledger of collateral balances of different token addresses\\n    mapping(address => mapping(address => uint256))\\n        internal lockedCollateralLedger;\\n\\n    // ========================================================================\\n    // = Modifiers  ===========================================================\\n    // ========================================================================\\n    modifier userAuthenticated(TermAuth calldata termAuth) {\\n        authenticator.ensureAuthenticated(termAuth, address(this), msg.data);\\n        _;\\n    }\\n\\n    modifier isCollateralTokenAccepted(address token) {\\n        if (!_isAcceptedCollateralToken(token)) {\\n            revert CollateralTokenNotAllowed(token);\\n        }\\n        _;\\n    }\\n\\n    modifier whileLiquidationsNotPaused() {\\n        if (liquidationsPaused) {\\n            revert LiquidationsPaused();\\n        }\\n        _;\\n    }\\n\\n    modifier notTermContractPaired() {\\n        if (termContractPaired) {\\n            revert AlreadyTermContractPaired();\\n        }\\n        termContractPaired = true;\\n        _;\\n    }\\n\\n    // ========================================================================\\n    // = Deploy  ==============================================================\\n    // ========================================================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string calldata termRepoId_,\\n        uint256 liquidateDamangesDueToProtocol_,\\n        uint256 netExposureCapOnLiquidation_,\\n        uint256 deMinimisMarginThreshold_,\\n        address purchaseToken_,\\n        Collateral[] calldata collateralTokens_,\\n        ITermEventEmitter emitter_\\n    ) external initializer {\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n        AccessControlUpgradeable.__AccessControl_init();\\n\\n        termRepoId = keccak256(abi.encodePacked(termRepoId_));\\n\\n        liquidationsPaused = false;\\n\\n        // slither-disable-start reentrancy-no-eth events-maths\\n        liquidateDamangesDueToProtocol = liquidateDamangesDueToProtocol_;\\n\\n        netExposureCapOnLiquidation = netExposureCapOnLiquidation_;\\n        deMinimisMarginThreshold = deMinimisMarginThreshold_;\\n        // slither-disable-end reentrancy-no-eth events-maths\\n\\n        require(purchaseToken_ != address(0), \\\"Zero address purchase token\\\");\\n        purchaseToken = purchaseToken_;\\n\\n        numOfAcceptedCollateralTokens = uint8(collateralTokens_.length);\\n        collateralTokens = new address[](collateralTokens_.length);\\n\\n        for (uint256 i = 0; i < collateralTokens_.length; ++i) {\\n            collateralTokens[i] = collateralTokens_[i].tokenAddress;\\n            maintenanceCollateralRatios[\\n                collateralTokens_[i].tokenAddress\\n            ] = collateralTokens_[i].maintenanceRatio;\\n            initialCollateralRatios[\\n                collateralTokens_[i].tokenAddress\\n            ] = collateralTokens_[i].initialCollateralRatio;\\n\\n            require(\\n                collateralTokens_[i].liquidatedDamage != 0,\\n                \\\"Liquidated damage is zero\\\"\\n            );\\n            liquidatedDamages[\\n                collateralTokens_[i].tokenAddress\\n            ] = collateralTokens_[i].liquidatedDamage;\\n\\n            termContractPaired = false;\\n        }\\n\\n        emitter = emitter_;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(INITIALIZER_ROLE, msg.sender);\\n    }\\n\\n    function pairTermContracts(\\n        address termRepoLocker_,\\n        address termRepoServicer_,\\n        address termAuctionBidLocker_,\\n        address termAuction_,\\n        address termController_,\\n        address termPriceOracle_,\\n        address authenticator_,\\n        address termRepoRolloverManager\\n    ) external onlyRole(INITIALIZER_ROLE) notTermContractPaired {\\n        termRepoLocker = TermRepoLocker(termRepoLocker_);\\n        termRepoServicer = TermRepoServicer(termRepoServicer_);\\n        termPriceOracle = TermPriceConsumerV3(termPriceOracle_);\\n        termController = ITermController(termController_);\\n        authenticator = IAuthenticator(authenticator_);\\n\\n        _grantRole(AUCTION_LOCKER, termAuctionBidLocker_);\\n        _grantRole(AUCTION_LOCKER, termAuction_);\\n        _grantRole(AUCTION_LOCKER, termRepoServicer_);\\n        _grantRole(SERVICER_ROLE, termRepoServicer_);\\n        _grantRole(ROLLOVER_MANAGER, termRepoRolloverManager);\\n\\n        uint256[] memory maintenanceRatioList = new uint256[](\\n            collateralTokens.length\\n        );\\n        uint256[] memory initialCollateralRatioList = new uint256[](\\n            collateralTokens.length\\n        );\\n        uint256[] memory liquidatedDamagesList = new uint256[](\\n            collateralTokens.length\\n        );\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            maintenanceRatioList[i] = maintenanceCollateralRatios[\\n                collateralTokens[i]\\n            ];\\n\\n            initialCollateralRatioList[i] = initialCollateralRatios[\\n                collateralTokens[i]\\n            ];\\n\\n            liquidatedDamagesList[i] = liquidatedDamages[collateralTokens[i]];\\n        }\\n\\n        emitter.emitTermRepoCollateralManagerInitialized(\\n            termRepoId,\\n            address(this),\\n            collateralTokens,\\n            initialCollateralRatioList,\\n            maintenanceRatioList,\\n            liquidatedDamagesList\\n        );\\n    }\\n\\n    // ========================================================================\\n    // = APIs  ================================================================\\n    // ========================================================================\\n\\n    /// @param collateralToken The address of the collateral token to lock\\n    /// @param amount The amount of collateral token to lock\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function externalLockCollateral(\\n        address collateralToken,\\n        uint256 amount,\\n        TermAuth calldata termAuth\\n    )\\n        external\\n        userAuthenticated(termAuth)\\n        isCollateralTokenAccepted(collateralToken)\\n    {\\n        address borrower = termAuth.user;\\n\\n        if (block.timestamp > termRepoServicer.endOfRepurchaseWindow()) {\\n            revert CollateralDepositClosed();\\n        }\\n\\n        if (termRepoServicer.getBorrowerRepurchaseObligation(borrower) == 0) {\\n            revert ZeroBorrowerRepurchaseObligation();\\n        }\\n\\n        _lockCollateral(borrower, collateralToken, amount);\\n    }\\n\\n    /// @param collateralToken The address of the collateral token to unlock\\n    /// @param amount The amount of collateral token to unlock\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function externalUnlockCollateral(\\n        address collateralToken,\\n        uint256 amount,\\n        TermAuth calldata termAuth\\n    )\\n        external\\n        userAuthenticated(termAuth)\\n        isCollateralTokenAccepted(collateralToken)\\n    {\\n        address borrower = termAuth.user;\\n\\n        if (amount == 0) {\\n            revert InvalidParameters(\\\"Zero amount\\\");\\n        }\\n\\n        if (lockedCollateralLedger[borrower][collateralToken] == 0) {\\n            revert ZeroCollateralBalance();\\n        }\\n        if (\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp >= termRepoServicer.maturityTimestamp() &&\\n            block.timestamp < termRepoServicer.redemptionTimestamp()\\n        ) {\\n            revert CollateralWithdrawalClosed();\\n        }\\n        bool decrementEncumberedCollateral;\\n\\n        // if borrow balance is zero, collateral has already been unencumbered through liquidation\\n        if (termRepoServicer.getBorrowerRepurchaseObligation(borrower) != 0) {\\n            decrementEncumberedCollateral = true;\\n        }\\n        _unlockCollateral(\\n            borrower,\\n            collateralToken,\\n            amount,\\n            decrementEncumberedCollateral\\n        );\\n        if (isBorrowerInShortfall(borrower)) {\\n            revert CollateralBelowMaintenanceRatios(borrower, collateralToken);\\n        }\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @param closureAmounts An array specifying the amounts of Term Repo exposure the liquidator proposes to cover in liquidation; an amount is required to be specified for each collateral token\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function batchLiquidation(\\n        address borrower,\\n        uint256[] calldata closureAmounts,\\n        TermAuth calldata termAuth\\n    ) external userAuthenticated(termAuth) whileLiquidationsNotPaused {\\n        bool allowFullLiquidation = _validateBatchLiquidationForFullLiquidation(\\n            borrower,\\n            termAuth.user,\\n            closureAmounts\\n        );\\n\\n        uint256 totalClosureAmount = 0;\\n\\n        uint256 collateralSeizureAmount;\\n        uint256 collateralSeizureProtocolShare;\\n\\n        for (uint256 i = 0; i < closureAmounts.length; ++i) {\\n            if (closureAmounts[i] == 0) {\\n                continue;\\n            }\\n            if (closureAmounts[i] == type(uint256).max) {\\n                revert InvalidParameters(\\\"closureAmounts cannot be uint max\\\");\\n            }\\n            totalClosureAmount += closureAmounts[i];\\n\\n            termRepoServicer.liquidatorCoverExposure(\\n                borrower,\\n                termAuth.user,\\n                closureAmounts[i]\\n            );\\n\\n            (\\n                collateralSeizureAmount,\\n                collateralSeizureProtocolShare\\n            ) = _collateralSeizureAmounts(\\n                closureAmounts[i],\\n                collateralTokens[i]\\n            );\\n\\n            _transferLiquidationCollateral(\\n                borrower,\\n                termAuth.user,\\n                collateralTokens[i],\\n                closureAmounts[i],\\n                collateralSeizureAmount,\\n                collateralSeizureProtocolShare,\\n                false\\n            );\\n        }\\n\\n        if (totalClosureAmount == 0) {\\n            revert ZeroLiquidationNotPermitted();\\n        }\\n\\n        /// allow any liquidations if within margin minimum\\n        if (!allowFullLiquidation) {\\n            if (!_withinNetExposureCapOnLiquidation(borrower)) {\\n                revert ExceedsNetExposureCapOnLiquidation();\\n            }\\n        }\\n\\n        // unencumber all collateral tokens owned by borrower if balance paid off\\n        if (termRepoServicer.getBorrowerRepurchaseObligation(borrower) == 0) {\\n            _unencumberRemainingBorrowerCollateralOnZeroObligation(borrower);\\n        }\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @param closureRepoTokenAmounts An array specifying the amounts of Term Repo Tokens the liquidator proposes to cover borrower repo exposure in liquidation; an amount is required to be specified for each collateral token\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function batchLiquidationWithRepoToken(\\n        address borrower,\\n        uint256[] calldata closureRepoTokenAmounts,\\n        TermAuth calldata termAuth\\n    ) external userAuthenticated(termAuth) whileLiquidationsNotPaused {\\n        bool allowFullLiquidation = _validateBatchLiquidationForFullLiquidation(\\n            borrower,\\n            termAuth.user,\\n            closureRepoTokenAmounts\\n        );\\n\\n        uint256 totalClosureRepoTokenAmounts = 0;\\n\\n        uint256 closureValue;\\n\\n        uint256 collateralSeizureAmount;\\n        uint256 collateralSeizureProtocolShare;\\n\\n        for (uint256 i = 0; i < closureRepoTokenAmounts.length; ++i) {\\n            if (closureRepoTokenAmounts[i] == 0) {\\n                continue;\\n            }\\n            if (closureRepoTokenAmounts[i] == type(uint256).max) {\\n                revert InvalidParameters(\\n                    \\\"closureRepoTokenAmounts cannot be uint max\\\"\\n                );\\n            }\\n            totalClosureRepoTokenAmounts += closureRepoTokenAmounts[i];\\n\\n            closureValue = termRepoServicer\\n                .liquidatorCoverExposureWithRepoToken(\\n                    borrower,\\n                    termAuth.user,\\n                    closureRepoTokenAmounts[i]\\n                );\\n\\n            (\\n                collateralSeizureAmount,\\n                collateralSeizureProtocolShare\\n            ) = _collateralSeizureAmounts(closureValue, collateralTokens[i]);\\n\\n            _transferLiquidationCollateral(\\n                borrower,\\n                termAuth.user,\\n                collateralTokens[i],\\n                closureRepoTokenAmounts[i],\\n                collateralSeizureAmount,\\n                collateralSeizureProtocolShare,\\n                false\\n            );\\n        }\\n\\n        if (totalClosureRepoTokenAmounts == 0) {\\n            revert ZeroLiquidationNotPermitted();\\n        }\\n\\n        /// allow any liquidations if within margin minimum\\n        if (!allowFullLiquidation) {\\n            if (!_withinNetExposureCapOnLiquidation(borrower)) {\\n                revert ExceedsNetExposureCapOnLiquidation();\\n            }\\n        }\\n\\n        // unencumber all collateral tokens owned by borrower if balance paid off\\n        if (termRepoServicer.getBorrowerRepurchaseObligation(borrower) == 0) {\\n            _unencumberRemainingBorrowerCollateralOnZeroObligation(borrower);\\n        }\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @param closureAmounts An array specifying the amounts of Term Repo exposure the liquidator proposes to cover in liquidation; an amount is required to be specified for each collateral token\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function batchDefault(\\n        address borrower,\\n        uint256[] calldata closureAmounts,\\n        TermAuth calldata termAuth\\n    ) external userAuthenticated(termAuth) whileLiquidationsNotPaused {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp <= termRepoServicer.endOfRepurchaseWindow()) {\\n            revert DefaultsClosed();\\n        }\\n        if (termAuth.user == borrower) {\\n            revert SelfLiquidationNotPermitted();\\n        }\\n        if (collateralTokens.length != closureAmounts.length) {\\n            revert InvalidParameters(\\n                \\\"Closure amounts array not same length as collateral tokens list\\\"\\n            );\\n        }\\n\\n        uint256 totalClosureAmount = 0;\\n        uint256 borrowerRepurchaseObligation = termRepoServicer\\n            .getBorrowerRepurchaseObligation(borrower);\\n\\n        if (borrowerRepurchaseObligation == 0) {\\n            revert ZeroBorrowerRepurchaseObligation();\\n        }\\n\\n        uint256 collateralSeizureAmount;\\n\\n        uint256 collateralSeizureProtocolShare;\\n\\n        for (uint256 i = 0; i < closureAmounts.length; ++i) {\\n            if (closureAmounts[i] == 0) {\\n                continue;\\n            }\\n            if (closureAmounts[i] == type(uint256).max) {\\n                revert InvalidParameters(\\\"closureAmounts cannot be uint max\\\");\\n            }\\n            totalClosureAmount += closureAmounts[i];\\n\\n            if (totalClosureAmount > borrowerRepurchaseObligation) {\\n                revert TotalRepaymentGreaterThangetBorrowerRepurchaseObligation();\\n            }\\n\\n            termRepoServicer.liquidatorCoverExposure(\\n                borrower,\\n                termAuth.user,\\n                closureAmounts[i]\\n            );\\n\\n            (\\n                collateralSeizureAmount,\\n                collateralSeizureProtocolShare\\n            ) = _collateralSeizureAmounts(\\n                closureAmounts[i],\\n                collateralTokens[i]\\n            );\\n\\n            _transferLiquidationCollateral(\\n                borrower,\\n                termAuth.user,\\n                collateralTokens[i],\\n                closureAmounts[i],\\n                collateralSeizureAmount,\\n                collateralSeizureProtocolShare,\\n                true\\n            );\\n        }\\n\\n        if (totalClosureAmount == 0) {\\n            revert ZeroLiquidationNotPermitted();\\n        }\\n\\n        // unencumber all collateral tokens owned by borrower if balance paid off\\n        if (termRepoServicer.getBorrowerRepurchaseObligation(borrower) == 0) {\\n            _unencumberRemainingBorrowerCollateralOnZeroObligation(borrower);\\n        }\\n    }\\n\\n    /// @param collateralToken The collateral token address of tokens locked\\n    /// @param amountToLock The amount of collateral tokens to lock\\n    function calculateMintableExposure(\\n        address collateralToken,\\n        uint256 amountToLock\\n    ) external view returns (Exp memory) {\\n        return\\n            div_(\\n                div_(\\n                    termPriceOracle.usdValueOfTokens(\\n                        collateralToken,\\n                        amountToLock\\n                    ),\\n                    Exp({mantissa: initialCollateralRatios[collateralToken]})\\n                ),\\n                termPriceOracle.usdValueOfTokens(purchaseToken, 1)\\n            );\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @return An array of collateral token addresses\\n    /// @return An array collateral token balances locked on behalf of borrower\\n    function getCollateralBalances(\\n        address borrower\\n    ) external view returns (address[] memory, uint256[] memory) {\\n        address[] memory collateralTokensOwnedByBorrower = new address[](\\n            collateralTokens.length\\n        );\\n        uint256[] memory collateralBalancesOwnedByBorrower = new uint256[](\\n            collateralTokens.length\\n        );\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            address collateralToken = collateralTokens[i];\\n            uint256 collateralAmount = lockedCollateralLedger[borrower][\\n                collateralToken\\n            ];\\n            collateralTokensOwnedByBorrower[i] = collateralToken;\\n            collateralBalancesOwnedByBorrower[i] = collateralAmount;\\n        }\\n        return (\\n            collateralTokensOwnedByBorrower,\\n            collateralBalancesOwnedByBorrower\\n        );\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken The collateral token address to query\\n    /// @return uint256 The amount of collateralToken locked on behalf of borrower\\n    function getCollateralBalance(\\n        address borrower,\\n        address collateralToken\\n    ) external view returns (uint256) {\\n        return lockedCollateralLedger[borrower][collateralToken];\\n    }\\n\\n    /// @return bool A boolean that tests whether any encumbered collateral remains locked\\n    function encumberedCollateralRemaining() external view returns (bool) {\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            if (encumberedCollateralBalances[collateralTokens[i]] > 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // ========================================================================\\n    // = Auction Functions  ===================================================\\n    // ========================================================================\\n\\n    /// @param bidder The bidder's address\\n    /// @param collateralToken The address of the token to be used as collateral\\n    /// @param amount The amount of the token to lock\\n    function auctionLockCollateral(\\n        address bidder,\\n        address collateralToken,\\n        uint256 amount\\n    ) external onlyRole(AUCTION_LOCKER) {\\n        termRepoLocker.transferTokenFromWallet(bidder, collateralToken, amount);\\n    }\\n\\n    /// @param bidder The bidder's address\\n    /// @param collateralToken The address of the token used as collateral\\n    /// @param amount The amount of collateral tokens to unlock\\n    function auctionUnlockCollateral(\\n        address bidder,\\n        address collateralToken,\\n        uint256 amount\\n    ) external onlyRole(AUCTION_LOCKER) {\\n        termRepoLocker.transferTokenToWallet(bidder, collateralToken, amount);\\n    }\\n\\n    // ========================================================================\\n    // = Rollover Functions  ==================================================\\n    // ========================================================================\\n\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken The address of a collateral token\\n    /// @param amount The amount of collateral tokens to lock\\n    function acceptRolloverCollateral(\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) external onlyRole(AUCTION_LOCKER) {\\n        lockedCollateralLedger[borrower][collateralToken] += amount;\\n        encumberedCollateralBalances[collateralToken] += amount;\\n\\n        emitter.emitCollateralLocked(\\n            termRepoId,\\n            borrower,\\n            collateralToken,\\n            amount\\n        );\\n    }\\n\\n    /// @param borrower The borrower's address\\n    /// @param rolloverProportion The proportion of the collateral to be unlocked, equal to the proportion of the collateral repaid\\n    /// @param rolloverTermRepoLocker The address of the new TermRepoLocker contract to roll into\\n    /// @return An array representing a list of accepted collateral token addresses\\n    /// @return An array containing the amount of collateral tokens to pairoff and transfer to new TermRepoLocker to roll into\\n    function transferRolloverCollateral(\\n        address borrower,\\n        uint256 rolloverProportion,\\n        address rolloverTermRepoLocker\\n    )\\n        external\\n        onlyRole(ROLLOVER_TARGET_AUCTIONEER_ROLE)\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        return (\\n            collateralTokens,\\n            _partialUnlockCollateral(\\n                borrower,\\n                rolloverProportion,\\n                rolloverTermRepoLocker\\n            )\\n        );\\n    }\\n\\n    /// @param rolloverAuction The address of the rollover auction\\n    function approveRolloverAuction(\\n        address rolloverAuction\\n    ) external onlyRole(ROLLOVER_MANAGER) {\\n        _grantRole(ROLLOVER_TARGET_AUCTIONEER_ROLE, rolloverAuction);\\n    }\\n\\n    // ========================================================================\\n    // = Servicer Functions  ========================================\\n    // ========================================================================\\n\\n    /// @param borrower The address of the borrower\\n    function unlockCollateralOnRepurchase(\\n        address borrower\\n    ) external onlyRole(SERVICER_ROLE) {\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            address collateralToken = collateralTokens[i];\\n            uint256 collateralAmount = lockedCollateralLedger[borrower][\\n                collateralToken\\n            ];\\n\\n            if (collateralAmount > 0) {\\n                _unlockCollateral(\\n                    borrower,\\n                    collateralToken,\\n                    collateralAmount,\\n                    true\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @param collateralTokenAddresses Collateral token addresses\\n    /// @param collateralTokenAmounts Collateral token amounts\\n    function journalBidCollateralToCollateralManager(\\n        address borrower,\\n        address[] calldata collateralTokenAddresses,\\n        uint256[] calldata collateralTokenAmounts\\n    ) external onlyRole(SERVICER_ROLE) {\\n        for (uint256 i = 0; i < collateralTokenAddresses.length; ++i) {\\n            lockedCollateralLedger[borrower][\\n                collateralTokenAddresses[i]\\n            ] += collateralTokenAmounts[i];\\n            encumberedCollateralBalances[\\n                collateralTokenAddresses[i]\\n            ] += collateralTokenAmounts[i];\\n\\n            emitter.emitCollateralLocked(\\n                termRepoId,\\n                borrower,\\n                collateralTokenAddresses[i],\\n                collateralTokenAmounts[i]\\n            );\\n        }\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken Collateral token addresse\\n    /// @param amount Collateral token amount\\n    function mintOpenExposureLockCollateral(\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) external onlyRole(SERVICER_ROLE) {\\n        _lockCollateral(borrower, collateralToken, amount);\\n    }\\n\\n    // ========================================================================\\n    // = Admin Functions ======================================================\\n    // ========================================================================\\n\\n    /// @param termAuctionGroup A struct of auction contracts\\n    function reopenToNewAuction(\\n        TermAuctionGroup calldata termAuctionGroup\\n    ) external onlyRole(INITIALIZER_ROLE) {\\n        _grantRole(\\n            AUCTION_LOCKER,\\n            address(termAuctionGroup.termAuctionBidLocker)\\n        );\\n\\n        _grantRole(AUCTION_LOCKER, address(termAuctionGroup.auction));\\n\\n        termPriceOracle.reOpenToNewBidLocker(\\n            address(termAuctionGroup.termAuctionBidLocker)\\n        );\\n\\n        emitter.emitPairReopeningBidLocker(\\n            termRepoId,\\n            address(this),\\n            address(termAuctionGroup.termAuctionBidLocker)\\n        );\\n    }\\n\\n    function pauseLiquidations() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        liquidationsPaused = true;\\n        emitter.emitLiquidationPaused(termRepoId);\\n    }\\n\\n    function unpauseLiquidations() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        liquidationsPaused = false;\\n        emitter.emitLiquidationUnpaused(termRepoId);\\n    }\\n\\n    // ========================================================================\\n    // = Public Functions  ====================================================\\n    // ========================================================================\\n\\n    /// @param borrower The address of the borrower\\n    /// @return Boolean testing whether the given borrower is in shortfall or margin deficit\\n    function isBorrowerInShortfall(\\n        address borrower\\n    ) public view returns (bool) {\\n        Exp memory repurchasePriceUSDValue = termPriceOracle.usdValueOfTokens(\\n            purchaseToken,\\n            termRepoServicer.getBorrowerRepurchaseObligation(borrower)\\n        );\\n        Exp memory haircutUSDTotalCollateralValue = Exp({mantissa: 0});\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            address collateralToken = collateralTokens[i];\\n            Exp memory additionalHairCutUSDCollateralValue = div_(\\n                termPriceOracle.usdValueOfTokens(\\n                    collateralToken,\\n                    lockedCollateralLedger[borrower][collateralToken]\\n                ),\\n                Exp({mantissa: maintenanceCollateralRatios[collateralToken]})\\n            );\\n            haircutUSDTotalCollateralValue = add_(\\n                additionalHairCutUSDCollateralValue,\\n                haircutUSDTotalCollateralValue\\n            );\\n        }\\n        if (\\n            lessThanExp(haircutUSDTotalCollateralValue, repurchasePriceUSDValue)\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @return The market value of borrower's locked collateral denominated in USD\\n    function getCollateralMarketValue(\\n        address borrower\\n    ) public view returns (uint256) {\\n        return _usdValueOfBalances(lockedCollateralLedger[borrower]);\\n    }\\n\\n    // ========================================================================\\n    // = Internal Functions  ==================================================\\n    // ========================================================================\\n    function _lockCollateral(\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) internal {\\n        lockedCollateralLedger[borrower][collateralToken] += amount;\\n        encumberedCollateralBalances[collateralToken] += amount;\\n        termRepoLocker.transferTokenFromWallet(\\n            borrower,\\n            collateralToken,\\n            amount\\n        );\\n\\n        emitter.emitCollateralLocked(\\n            termRepoId,\\n            borrower,\\n            collateralToken,\\n            amount\\n        );\\n    }\\n\\n    function _unlockCollateral(\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount,\\n        bool decrementEncumberedCollateral\\n    ) internal {\\n        if (amount > lockedCollateralLedger[borrower][collateralToken]) {\\n            revert UnlockAmountGreaterThanCollateralBalance();\\n        }\\n        lockedCollateralLedger[borrower][collateralToken] -= amount;\\n        if (decrementEncumberedCollateral) {\\n            encumberedCollateralBalances[collateralToken] -= amount;\\n        }\\n        termRepoLocker.transferTokenToWallet(borrower, collateralToken, amount);\\n\\n        emitter.emitCollateralUnlocked(\\n            termRepoId,\\n            borrower,\\n            collateralToken,\\n            amount\\n        );\\n    }\\n\\n    function _partialUnlockCollateral(\\n        address borrower,\\n        uint256 unlockProportion,\\n        address destinationwallet\\n    ) internal returns (uint256[] memory) {\\n        uint256[] memory unlockedCollateral = new uint256[](\\n            collateralTokens.length\\n        );\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            address collateralToken = collateralTokens[i];\\n            uint256 collateralAmount = lockedCollateralLedger[borrower][\\n                collateralToken\\n            ];\\n\\n            if (collateralAmount > 0) {\\n                if (unlockProportion == expScale) {\\n                    uint256 unlockedAmount = lockedCollateralLedger[borrower][\\n                        collateralToken\\n                    ];\\n                    // slither-disable-start reentrancy-no-eth\\n                    lockedCollateralLedger[borrower][collateralToken] = 0;\\n                    unlockedCollateral[i] = unlockedAmount;\\n                    encumberedCollateralBalances[\\n                        collateralToken\\n                    ] -= unlockedAmount;\\n                    // slither-disable-end reentrancy-no-eth\\n\\n                    termRepoLocker.transferTokenToWallet(\\n                        destinationwallet,\\n                        collateralToken,\\n                        unlockedAmount\\n                    );\\n                    emitter.emitCollateralUnlocked(\\n                        termRepoId,\\n                        borrower,\\n                        collateralToken,\\n                        unlockedAmount\\n                    );\\n                } else {\\n                    uint256 proportionToUnlock = mul_ScalarTruncate(\\n                        Exp({mantissa: unlockProportion}),\\n                        collateralAmount\\n                    );\\n                    // slither-disable-start reentrancy-no-eth\\n                    lockedCollateralLedger[borrower][\\n                        collateralToken\\n                    ] -= proportionToUnlock;\\n                    unlockedCollateral[i] = proportionToUnlock;\\n                    encumberedCollateralBalances[\\n                        collateralToken\\n                    ] -= proportionToUnlock;\\n                    // slither-disable-end reentrancy-no-eth\\n\\n                    termRepoLocker.transferTokenToWallet(\\n                        destinationwallet,\\n                        collateralToken,\\n                        proportionToUnlock\\n                    );\\n                    emitter.emitCollateralUnlocked(\\n                        termRepoId,\\n                        borrower,\\n                        collateralToken,\\n                        proportionToUnlock\\n                    );\\n                }\\n            }\\n        }\\n        return unlockedCollateral;\\n    }\\n\\n    /// @dev A helper function to validate various conditions required to liquidate\\n    /// @return A boolean for whether borrower position eligible for full liquidation\\n    function _validateBatchLiquidationForFullLiquidation(\\n        address borrower,\\n        address liquidator,\\n        uint256[] calldata closureTokenAmounts\\n    ) internal returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp > termRepoServicer.endOfRepurchaseWindow()) {\\n            revert ShortfallLiquidationsClosed();\\n        }\\n        if (liquidator == borrower) {\\n            revert SelfLiquidationNotPermitted();\\n        }\\n        if (collateralTokens.length != closureTokenAmounts.length) {\\n            revert InvalidParameters(\\n                \\\"Closure amounts array not same length as collateral tokens list\\\"\\n            );\\n        }\\n        uint256 borrowerRepurchaseObligation = termRepoServicer\\n            .getBorrowerRepurchaseObligation(borrower);\\n        if (borrowerRepurchaseObligation == 0) {\\n            revert ZeroBorrowerRepurchaseObligation();\\n        }\\n        bool allowFullLiquidation = getCollateralMarketValue(borrower) <\\n            termPriceOracle\\n                .usdValueOfTokens(purchaseToken, borrowerRepurchaseObligation)\\n                .mantissa +\\n                deMinimisMarginThreshold;\\n\\n        if (!allowFullLiquidation && !isBorrowerInShortfall(borrower)) {\\n            revert BorrowerNotInShortfall();\\n        }\\n        return allowFullLiquidation;\\n    }\\n\\n    function _unencumberRemainingBorrowerCollateralOnZeroObligation(\\n        address borrower\\n    ) internal {\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            encumberedCollateralBalances[\\n                collateralTokens[i]\\n            ] -= lockedCollateralLedger[borrower][collateralTokens[i]];\\n        }\\n    }\\n\\n    function _withinNetExposureCapOnLiquidation(\\n        address borrower\\n    ) internal view returns (bool) {\\n        uint256 borrowerRepurchaseObligation = termRepoServicer\\n            .getBorrowerRepurchaseObligation(borrower);\\n\\n        /// Borrower should not be liquidated to zero balance in this case.\\n        if (borrowerRepurchaseObligation == 0) {\\n            return false;\\n        }\\n\\n        Exp memory haircutUSDTotalCollateralValue = Exp({mantissa: 0});\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            address collateralToken = collateralTokens[i];\\n            Exp memory additionalHairCutUSDCollateralValue = div_(\\n                termPriceOracle.usdValueOfTokens(\\n                    collateralToken,\\n                    lockedCollateralLedger[borrower][collateralToken]\\n                ),\\n                Exp({mantissa: initialCollateralRatios[collateralToken]})\\n            );\\n            haircutUSDTotalCollateralValue = add_(\\n                additionalHairCutUSDCollateralValue,\\n                haircutUSDTotalCollateralValue\\n            );\\n        }\\n        Exp memory borrowerRepurchaseValue = termPriceOracle.usdValueOfTokens(\\n            purchaseToken,\\n            borrowerRepurchaseObligation\\n        );\\n\\n        if (\\n            lessThanExp(haircutUSDTotalCollateralValue, borrowerRepurchaseValue)\\n        ) {\\n            return true;\\n        }\\n        Exp memory excessEquity = sub_(\\n            haircutUSDTotalCollateralValue,\\n            borrowerRepurchaseValue\\n        );\\n\\n        return\\n            lessThanOrEqualExp(\\n                div_(excessEquity, borrowerRepurchaseValue),\\n                Exp({mantissa: netExposureCapOnLiquidation})\\n            );\\n    }\\n\\n    ///@dev returns total amount of collateral seized in liquidation and the amount of that total going protocol\\n    function _collateralSeizureAmounts(\\n        uint256 amountToCover_,\\n        address collateralToken\\n    ) internal view returns (uint256, uint256) {\\n        IERC20MetadataUpgradeable tokenInstance = IERC20MetadataUpgradeable(\\n            collateralToken\\n        );\\n        Exp memory usdValueOfCoverAmount = termPriceOracle.usdValueOfTokens(\\n            purchaseToken,\\n            amountToCover_\\n        );\\n        Exp memory latestPriceValueCollateralAmount = div_(\\n            usdValueOfCoverAmount,\\n            termPriceOracle.usdValueOfTokens(\\n                collateralToken,\\n                10 ** (tokenInstance.decimals())\\n            )\\n        );\\n\\n        Exp memory collateralAmountWithDiscount = mul_(\\n            latestPriceValueCollateralAmount,\\n            add_(\\n                Exp({mantissa: expScale}),\\n                Exp({mantissa: liquidatedDamages[collateralToken]})\\n            )\\n        );\\n\\n        Exp memory protocolSeizureAmount = mul_(\\n            latestPriceValueCollateralAmount,\\n            Exp({mantissa: liquidateDamangesDueToProtocol})\\n        );\\n\\n        // this is equivalent to usdValueOfClosureAmount / discountedPriceofCollateralToken\\n        return (\\n            collateralAmountWithDiscount.mantissa /\\n                10 ** (18 - tokenInstance.decimals()),\\n            protocolSeizureAmount.mantissa /\\n                10 ** (18 - tokenInstance.decimals())\\n        );\\n    }\\n\\n    /// @dev A helper function to transfer tokens and update relevant state variables and mappings\\n    function _transferLiquidationCollateral(\\n        address borrower,\\n        address liquidator,\\n        address collateralAddress,\\n        uint256 closureAmount,\\n        uint256 collateralSeizureAmount,\\n        uint256 collateralSeizureProtocolShare,\\n        bool isDefault\\n    ) internal {\\n        if (\\n            collateralSeizureAmount >\\n            lockedCollateralLedger[borrower][collateralAddress]\\n        ) {\\n            revert InsufficientCollateralForLiquidationRepayment(\\n                collateralAddress\\n            );\\n        }\\n        // slither-disable-start reentrancy-no-eth\\n        lockedCollateralLedger[borrower][\\n            collateralAddress\\n        ] -= collateralSeizureAmount;\\n\\n        encumberedCollateralBalances[\\n            collateralAddress\\n        ] -= collateralSeizureAmount;\\n        // slither-disable-end reentrancy-no-eth\\n\\n        termRepoLocker.transferTokenToWallet(\\n            termController.getProtocolReserveAddress(),\\n            collateralAddress,\\n            collateralSeizureProtocolShare\\n        );\\n\\n        termRepoLocker.transferTokenToWallet(\\n            liquidator,\\n            collateralAddress,\\n            collateralSeizureAmount - collateralSeizureProtocolShare // Liquidation yield\\n        );\\n\\n        emitter.emitLiquidation(\\n            termRepoId,\\n            borrower,\\n            liquidator,\\n            closureAmount,\\n            collateralAddress,\\n            collateralSeizureAmount,\\n            collateralSeizureProtocolShare,\\n            isDefault\\n        );\\n    }\\n\\n    function _isAcceptedCollateralToken(\\n        address token_\\n    ) internal view returns (bool) {\\n        if (liquidatedDamages[token_] == 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function _usdValueOfBalances(\\n        mapping(address => uint256) storage _tokenBalances\\n    ) internal view returns (uint256) {\\n        Exp memory totalValue = Exp({mantissa: 0});\\n        for (uint256 i = 0; i < collateralTokens.length; ++i) {\\n            totalValue = add_(\\n                totalValue,\\n                termPriceOracle.usdValueOfTokens(\\n                    collateralTokens[i],\\n                    _tokenBalances[collateralTokens[i]]\\n                )\\n            );\\n        }\\n        return totalValue.mantissa;\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    ///@dev required override by the OpenZeppelin UUPS module\\n    function _authorizeUpgrade(\\n        address\\n    ) internal view override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n    // solhint-enable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/TermRepoLocker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/ITermRepoLocker.sol\\\";\\nimport \\\"./interfaces/ITermRepoLockerErrors.sol\\\";\\n\\nimport \\\"./interfaces/ITermEventEmitter.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @author TermLabs\\n/// @title Term Repo Locker\\n/// @notice This is the contract in which Term Servicer locks collateral and purchase tokens\\n/// @dev This contract belongs to the Term Servicer group of contracts and is specific to a Term Repo deployment\\ncontract TermRepoLocker is\\n    ITermRepoLocker,\\n    ITermRepoLockerErrors,\\n    Initializable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // ========================================================================\\n    // = Access Roles =========================================================\\n    // ========================================================================\\n    bytes32 public constant SERVICER_ROLE = keccak256(\\\"SERVICER_ROLE\\\");\\n    bytes32 public constant INITIALIZER_ROLE = keccak256(\\\"INITIALIZER_ROLE\\\");\\n\\n    // ========================================================================\\n    // = State Variables ======================================================\\n    // ========================================================================\\n    bytes32 public termRepoId;\\n    bool public transfersPaused;\\n    ITermEventEmitter internal emitter;\\n\\n    // ========================================================================\\n    // = Modifiers  ===========================================================\\n    // ========================================================================\\n\\n    modifier whileTransfersNotPaused() {\\n        if (transfersPaused) {\\n            revert TermRepoLockerTransfersPaused();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string calldata termRepoId_,\\n        address termRepoCollateralManager_,\\n        address termRepoServicer_\\n    ) external initializer {\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n        AccessControlUpgradeable.__AccessControl_init();\\n\\n        termRepoId = keccak256(abi.encodePacked(termRepoId_));\\n\\n        transfersPaused = false;\\n\\n        _grantRole(SERVICER_ROLE, termRepoCollateralManager_);\\n        _grantRole(SERVICER_ROLE, termRepoServicer_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(INITIALIZER_ROLE, msg.sender);\\n    }\\n\\n    function pairTermContracts(\\n        ITermEventEmitter emitter_\\n    ) external onlyRole(INITIALIZER_ROLE) {\\n        emitter = emitter_;\\n\\n        emitter.emitTermRepoLockerInitialized(termRepoId, address(this));\\n    }\\n\\n    /// @notice Locks tokens from origin wallet\\n    /// @notice Reverts if caller doesn't have SERVICER_ROLE\\n    /// @param originWallet The wallet from which to transfer tokens\\n    /// @param token The address of token being transferred\\n    /// @param amount The amount of tokens to transfer\\n    function transferTokenFromWallet(\\n        address originWallet,\\n        address token,\\n        uint256 amount\\n    ) external override whileTransfersNotPaused onlyRole(SERVICER_ROLE) {\\n        IERC20Upgradeable tokenInstance = IERC20Upgradeable(token);\\n\\n        // slither-disable-start arbitrary-send-erc20\\n        /// @dev This function is permissioned to be only callable by other term contracts. The entry points of calls that end up utilizing this function all use Authenticator to\\n        /// authenticate that the caller is the owner of the token whose approved this contract to spend the tokens. Therefore there is no risk of another wallet using this function\\n        /// to transfer somebody else's tokens.\\n        tokenInstance.safeTransferFrom(originWallet, address(this), amount);\\n        // slither-disable-end arbitrary-send-erc20\\n    }\\n\\n    /// @notice Unlocks tokens to destination wallet\\n    /// @dev Reverts if caller doesn't have SERVICER_ROLE\\n    /// @param destinationWallet The wallet to unlock tokens into\\n    /// @param token The address of token being unlocked\\n    /// @param amount The amount of tokens to unlock\\n    function transferTokenToWallet(\\n        address destinationWallet,\\n        address token,\\n        uint256 amount\\n    ) external override whileTransfersNotPaused onlyRole(SERVICER_ROLE) {\\n        IERC20Upgradeable tokenInstance = IERC20Upgradeable(token);\\n\\n        tokenInstance.safeTransfer(destinationWallet, amount);\\n    }\\n\\n    // ========================================================================\\n    // = Pause Functions ======================================================\\n    // ========================================================================\\n\\n    function pauseTransfers() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        transfersPaused = true;\\n        emitter.emitTermRepoLockerTransfersPaused(termRepoId);\\n    }\\n\\n    function unpauseTransfers() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        transfersPaused = false;\\n        emitter.emitTermRepoLockerTransfersUnpaused(termRepoId);\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    /// @dev Required override by the OpenZeppelin UUPS module\\n    function _authorizeUpgrade(\\n        address\\n    ) internal view override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n    // solhint-enable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/TermRepoServicer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IAuthenticator.sol\\\";\\nimport \\\"./interfaces/ITermEventEmitter.sol\\\";\\nimport \\\"./interfaces/ITermRepoServicer.sol\\\";\\nimport \\\"./interfaces/ITermRepoServicerErrors.sol\\\";\\nimport \\\"./interfaces/ITermController.sol\\\";\\nimport \\\"./interfaces/ITermRepoCollateralManager.sol\\\";\\nimport \\\"./interfaces/ITermRepoLocker.sol\\\";\\nimport \\\"./interfaces/ITermRepoRolloverManager.sol\\\";\\nimport \\\"./interfaces/ITermRepoToken.sol\\\";\\n\\nimport \\\"./lib/ExponentialNoError.sol\\\";\\nimport \\\"./lib/TermAuctionGroup.sol\\\";\\nimport \\\"./lib/TermAuth.sol\\\";\\nimport \\\"./lib/TermRepoRolloverElection.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/// @author TermLabs\\n/// @title Term Repo Servicer\\n/// @notice This contract maintains records, collects and disburse repurchase payments\\n/// @dev This contract belongs to the Term Servicer group of contracts and is specific to a Term Repo deployment\\ncontract TermRepoServicer is\\n    ITermRepoServicer,\\n    ITermRepoServicerErrors,\\n    Initializable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    ExponentialNoError\\n{\\n    // ========================================================================\\n    // = Constants  ===========================================================\\n    // ========================================================================\\n    uint256 public constant YEAR_SECONDS = 60 * 60 * 24 * 360;\\n\\n    // ========================================================================\\n    // = Access Roles  ========================================================\\n    // ========================================================================\\n\\n    bytes32 public constant AUCTION_LOCKER = keccak256(\\\"AUCTION_LOCKER\\\");\\n    bytes32 public constant AUCTIONEER = keccak256(\\\"AUCTIONEER\\\");\\n    bytes32 public constant COLLATERAL_MANAGER =\\n        keccak256(\\\"COLLATERAL_MANAGER\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant ROLLOVER_MANAGER = keccak256(\\\"ROLLOVER_MANAGER\\\");\\n    bytes32 public constant ROLLOVER_TARGET_AUCTIONEER_ROLE =\\n        keccak256(\\\"ROLLOVER_TARGET_AUCTIONEER_ROLE\\\");\\n    bytes32 public constant INITIALIZER_ROLE = keccak256(\\\"INITIALIZER_ROLE\\\");\\n\\n    // ========================================================================\\n    // = State Variables  =====================================================\\n    // ========================================================================\\n\\n    bytes32 public termRepoId;\\n\\n    // Total Repurchase Price Owed by all borrowers\\n    uint256 public totalOutstandingRepurchaseExposure;\\n\\n    // Total Repurchase Currency locked by TermLocker\\n    uint256 public totalRepurchaseCollected;\\n\\n    // block timestamp at which repurchase is due\\n    uint256 public maturityTimestamp;\\n\\n    //block timestamp at which repurchase period ends\\n    uint256 public endOfRepurchaseWindow;\\n\\n    /// block timestamp at which term repo tokens can be redeemed\\n    uint256 public redemptionTimestamp;\\n\\n    /// percentage share of bid amounts charged to bidder\\n    uint256 public servicingFee;\\n\\n    /// proportion of redemption value for redemption\\n    uint256 public shortfallHaircutMantissa;\\n\\n    // token used for purchase/loans\\n    address public purchaseToken;\\n\\n    // collateral manager in same term\\n    ITermRepoCollateralManager public termRepoCollateralManager;\\n\\n    // rollover manager in same term\\n    ITermRepoRolloverManager public termRepoRolloverManager;\\n\\n    // TermRepoLocker for term funds\\n    ITermRepoLocker public termRepoLocker;\\n\\n    // TermRepoToken for current term\\n    ITermRepoToken public termRepoToken;\\n\\n    // global term controller contract\\n    ITermController internal termController;\\n\\n    // global term signature authenticator\\n    IAuthenticator internal authenticator;\\n\\n    // global term event emitter\\n    ITermEventEmitter internal emitter;\\n\\n    // Repurchase Exposure Ledger\\n    // For each borrower wallet address, keep ledger of repurchase obligations\\n    mapping(address => uint256) internal repurchaseExposureLedger;\\n\\n    bool internal termContractPaired;\\n\\n    // ========================================================================\\n    // = Modifiers  ===========================================================\\n    // ========================================================================\\n    modifier userAuthenticated(TermAuth calldata termAuth) {\\n        authenticator.ensureAuthenticated(termAuth, address(this), msg.data);\\n        _;\\n    }\\n\\n    modifier notTermContractPaired() {\\n        if (termContractPaired) {\\n            revert AlreadyTermContractPaired();\\n        }\\n        termContractPaired = true;\\n        _;\\n    }\\n\\n    // ========================================================================\\n    // = Deploy  ==============================================================\\n    // ========================================================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string calldata termRepoId_,\\n        uint256 maturityTimestamp_,\\n        uint256 repurchaseWindow_,\\n        uint256 redemptionBuffer_,\\n        uint256 servicingFee_,\\n        address purchaseToken_,\\n        ITermController termController_,\\n        ITermEventEmitter emitter_\\n    ) external initializer {\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n        AccessControlUpgradeable.__AccessControl_init();\\n\\n        termRepoId = keccak256(abi.encodePacked(termRepoId_));\\n        totalOutstandingRepurchaseExposure = 0;\\n        totalRepurchaseCollected = 0;\\n        maturityTimestamp = maturityTimestamp_;\\n        endOfRepurchaseWindow = maturityTimestamp_ + repurchaseWindow_;\\n        redemptionTimestamp =\\n            maturityTimestamp_ +\\n            repurchaseWindow_ +\\n            redemptionBuffer_;\\n        servicingFee = servicingFee_;\\n\\n        require(purchaseToken_ != address(0), \\\"Zero address purchase token\\\");\\n        purchaseToken = purchaseToken_;\\n\\n        termController = termController_;\\n        emitter = emitter_;\\n\\n        termContractPaired = false;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(INITIALIZER_ROLE, msg.sender);\\n    }\\n\\n    function pairTermContracts(\\n        address termRepoLocker_,\\n        address termRepoCollateralManager_,\\n        address termRepoToken_,\\n        address termAuctionOfferLocker_,\\n        address termAuction_,\\n        address authenticator_,\\n        address rolloverManager_\\n    ) external onlyRole(INITIALIZER_ROLE) notTermContractPaired {\\n        termRepoLocker = ITermRepoLocker(termRepoLocker_);\\n        termRepoCollateralManager = ITermRepoCollateralManager(\\n            termRepoCollateralManager_\\n        );\\n        termRepoRolloverManager = ITermRepoRolloverManager(rolloverManager_);\\n        termRepoToken = ITermRepoToken(termRepoToken_);\\n        authenticator = IAuthenticator(authenticator_);\\n\\n        _grantRole(AUCTION_LOCKER, termAuctionOfferLocker_);\\n        _grantRole(AUCTIONEER, termAuction_);\\n        _grantRole(COLLATERAL_MANAGER, termRepoCollateralManager_);\\n        _grantRole(ROLLOVER_MANAGER, rolloverManager_);\\n\\n        emitter.emitTermRepoServicerInitialized(\\n            termRepoId,\\n            address(this),\\n            purchaseToken,\\n            maturityTimestamp,\\n            endOfRepurchaseWindow,\\n            redemptionTimestamp\\n        );\\n    }\\n\\n    // ========================================================================\\n    // = APIs  ================================================================\\n    // ========================================================================\\n\\n    /// @notice The max repurchase amount is the repurchase balance less any amounts earmarked for rollover\\n    /// @param amount The amount of purchase token to submit for repurchase\\n    /// @param termAuth An authentication struct containing the signed borrower wallet address\\n    function submitRepurchasePayment(\\n        uint256 amount,\\n        TermAuth calldata termAuth\\n    ) external userAuthenticated(termAuth) {\\n        address borrower = termAuth.user;\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp < maturityTimestamp) {\\n            revert NotMaturedYet();\\n        }\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp >= endOfRepurchaseWindow) {\\n            revert AfterRepurchaseWindow();\\n        }\\n\\n        if (repurchaseExposureLedger[borrower] == 0) {\\n            revert ZeroBorrowerRepurchaseObligation();\\n        }\\n\\n        if (amount == type(uint256).max) {\\n            revert InvalidParameters(\\\"repurchase amount cannot be uint max\\\");\\n        }\\n\\n        uint256 maxRepurchaseAmount = _getMaxRepaymentAroundRollover(borrower);\\n\\n        if (amount > maxRepurchaseAmount) {\\n            revert RepurchaseAmountTooHigh();\\n        }\\n\\n        _repay(borrower, borrower, amount);\\n\\n        if (repurchaseExposureLedger[borrower] == 0) {\\n            termRepoCollateralManager.unlockCollateralOnRepurchase(borrower);\\n        }\\n\\n        emitter.emitRepurchasePaymentSubmitted(termRepoId, borrower, amount);\\n    }\\n\\n    /// @param amountToBurn The amount of TermRepoTokens to burn\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function burnCollapseExposure(\\n        uint256 amountToBurn,\\n        TermAuth calldata termAuth\\n    ) external userAuthenticated(termAuth) {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp >= endOfRepurchaseWindow) {\\n            revert AfterRepurchaseWindow();\\n        }\\n\\n        address borrower = termAuth.user;\\n\\n        if (repurchaseExposureLedger[borrower] == 0) {\\n            revert ZeroBorrowerRepurchaseObligation();\\n        }\\n\\n        IERC20MetadataUpgradeable purchaseTokenInstance = IERC20MetadataUpgradeable(\\n                purchaseToken\\n            );\\n        uint256 purchaseTokenDecimals = uint256(\\n            purchaseTokenInstance.decimals()\\n        );\\n\\n        uint256 maxRepurchaseAmount = _getMaxRepaymentAroundRollover(borrower);\\n\\n        uint256 termRepoTokenValueOfRepurchase = div_(\\n            Exp({\\n                mantissa: maxRepurchaseAmount *\\n                    10 ** (18 - purchaseTokenDecimals)\\n            }),\\n            Exp({mantissa: termRepoToken.redemptionValue()})\\n        ).mantissa / 10 ** (18 - purchaseTokenDecimals);\\n\\n        if (amountToBurn < termRepoTokenValueOfRepurchase) {\\n            uint256 repayAmount = termRepoToken.burnAndReturnValue(\\n                borrower,\\n                amountToBurn\\n            );\\n            // slither-disable-start reentrancy-no-eth\\n            repurchaseExposureLedger[borrower] -= repayAmount;\\n\\n            totalOutstandingRepurchaseExposure -= repayAmount;\\n            // slither-disable-end reentrancy-no-eth\\n\\n            assert(_isTermRepoBalanced());\\n\\n            emitter.emitBurnCollapseExposure(termRepoId, borrower, repayAmount);\\n        } else {\\n            // slither-disable-start reentrancy-no-eth\\n            totalOutstandingRepurchaseExposure -= maxRepurchaseAmount;\\n            repurchaseExposureLedger[borrower] -= maxRepurchaseAmount;\\n            // slither-disable-end reentrancy-no-eth\\n\\n            termRepoToken.burn(borrower, termRepoTokenValueOfRepurchase);\\n\\n            assert(_isTermRepoBalanced());\\n\\n            emitter.emitBurnCollapseExposure(\\n                termRepoId,\\n                borrower,\\n                maxRepurchaseAmount\\n            );\\n\\n            termRepoCollateralManager.unlockCollateralOnRepurchase(borrower);\\n        }\\n    }\\n\\n    /// @param borrower The address of the borrower to query\\n    /// @return The total repurchase price due at maturity for a given borrower\\n    function getBorrowerRepurchaseObligation(\\n        address borrower\\n    ) external view returns (uint256) {\\n        return repurchaseExposureLedger[borrower];\\n    }\\n\\n    /// @dev This method allows MINTER_ROLE to open repurchase price exposure against a TermRepoToken mint of corresponding value outside of a Term Auction to create new supply\\n    /// @param amount The amount of Term Repo Tokens to mint\\n    /// @param collateralAmounts An array containing an amount of collateral token for each token in collateral basket\\n    /// @param termAuth An authentication struct containing the signed user wallet address\\n    function mintOpenExposure(\\n        uint256 amount,\\n        uint256[] calldata collateralAmounts,\\n        TermAuth calldata termAuth\\n    ) external userAuthenticated(termAuth) {\\n        address borrower = termAuth.user;\\n\\n        if (!hasRole(MINTER_ROLE, borrower)) {\\n            revert NoMintOpenExposureAccess();\\n        }\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp > maturityTimestamp) {\\n            revert AfterMaturity();\\n        }\\n\\n        if (\\n            collateralAmounts.length !=\\n            termRepoCollateralManager.numOfAcceptedCollateralTokens()\\n        ) {\\n            revert InvalidParameters(\\n                \\\"Collateral Amounts array not same length as collateral tokens list\\\"\\n            );\\n        }\\n\\n        uint256 maxMintValue = 0;\\n        for (uint256 i = 0; i < collateralAmounts.length; ++i) {\\n            termRepoCollateralManager.mintOpenExposureLockCollateral(\\n                borrower,\\n                termRepoCollateralManager.collateralTokens(i),\\n                collateralAmounts[i]\\n            );\\n            uint256 maxTokensFromCollateral = truncate(\\n                div_(\\n                    termRepoCollateralManager.calculateMintableExposure(\\n                        termRepoCollateralManager.collateralTokens(i),\\n                        collateralAmounts[i]\\n                    ),\\n                    Exp({mantissa: termRepoToken.redemptionValue()})\\n                )\\n            );\\n            maxMintValue += maxTokensFromCollateral;\\n        }\\n        if (amount > maxMintValue) {\\n            revert InsufficientCollateral();\\n        }\\n\\n        Exp memory proRate = div_(\\n            // solhint-disable-next-line not-rely-on-time\\n            Exp({mantissa: (maturityTimestamp - block.timestamp)}),\\n            Exp({mantissa: (YEAR_SECONDS)})\\n        );\\n\\n        Exp memory protocolShareProRated = mul_(\\n            Exp({mantissa: servicingFee}),\\n            proRate\\n        );\\n\\n        uint256 protocolMintTokens = mul_ScalarTruncate(\\n            protocolShareProRated,\\n            amount\\n        );\\n        uint256 minterTokens = amount - protocolMintTokens;\\n\\n        uint256 protocolMintTokensValue = termRepoToken.mintTokens(\\n            termController.getTreasuryAddress(),\\n            protocolMintTokens\\n        );\\n        uint256 minterTokensValue = termRepoToken.mintTokens(\\n            borrower,\\n            minterTokens\\n        );\\n        termRepoToken.decrementMintExposureCap(amount);\\n\\n        uint256 totalMintValue = protocolMintTokensValue + minterTokensValue;\\n\\n        // slither-disable-start reentrancy-benign\\n        repurchaseExposureLedger[borrower] += totalMintValue;\\n\\n        totalOutstandingRepurchaseExposure += totalMintValue;\\n        // slither-disable-end reentrancy-benign\\n\\n        assert(_isTermRepoBalanced());\\n\\n        emitter.emitBidFulfilled(\\n            termRepoId,\\n            borrower,\\n            minterTokensValue,\\n            totalMintValue,\\n            protocolMintTokensValue\\n        );\\n\\n        emitter.emitMintExposure(\\n            termRepoId,\\n            borrower,\\n            minterTokens,\\n            protocolMintTokens,\\n            totalMintValue\\n        );\\n    }\\n\\n    /// @param redeemer The address of redeemer\\n    /// @param amountToRedeem The amount of TermRepoTokens to redeem\\n    function redeemTermRepoTokens(\\n        address redeemer,\\n        uint256 amountToRedeem\\n    ) external {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp <= redemptionTimestamp) {\\n            revert RedemptionPeriodNotOpen();\\n        }\\n\\n        if (termRepoToken.balanceOf(redeemer) == 0) {\\n            revert ZeroTermRepoTokenBalance();\\n        }\\n\\n        if (\\n            termRepoToken.totalRedemptionValue() <=\\n            totalRepurchaseCollected + 10 ** 4\\n        ) {\\n            _parRedemption(redeemer, amountToRedeem);\\n        } else if (!termRepoCollateralManager.encumberedCollateralRemaining()) {\\n            _proRataRedemption(redeemer, amountToRedeem);\\n        } else {\\n            revert EncumberedCollateralRemaining();\\n        }\\n    }\\n\\n    /// @return A boolean that represents whether the term repo locker is balanced\\n    function isTermRepoBalanced() external view returns (bool) {\\n        return _isTermRepoBalanced();\\n    }\\n\\n    // ========================================================================\\n    // = Auction Functions  ===================================================\\n    // ========================================================================\\n\\n    /// @param offeror The address of the offeror\\n    /// @param amount The amount of purchase tokens to lock\\n    function lockOfferAmount(\\n        address offeror,\\n        uint256 amount\\n    ) external onlyRole(AUCTION_LOCKER) {\\n        termRepoLocker.transferTokenFromWallet(offeror, purchaseToken, amount);\\n\\n        emitter.emitOfferLockedByServicer(termRepoId, offeror, amount);\\n    }\\n\\n    /// @param offeror The address of the offeror\\n    /// @param amount The amount of purchase tokens to unlocked\\n    function unlockOfferAmount(\\n        address offeror,\\n        uint256 amount\\n    ) external onlyRole(AUCTION_LOCKER) {\\n        termRepoLocker.transferTokenToWallet(offeror, purchaseToken, amount);\\n\\n        emitter.emitOfferUnlockedByServicer(termRepoId, offeror, amount);\\n    }\\n\\n    /// @param offeror The address of the offeror\\n    /// @param purchasePrice The offer amount to fulfill\\n    /// @param repurchasePrice The repurchase price due to offeror at maturity\\n    /// @param offerId Unique identifier for this offer\\n    function fulfillOffer(\\n        address offeror,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        bytes32 offerId\\n    ) external onlyRole(AUCTIONEER) {\\n        uint256 repoTokensMinted = termRepoToken.mintRedemptionValue(\\n            offeror,\\n            repurchasePrice\\n        );\\n\\n        emitter.emitOfferFulfilled(\\n            offerId,\\n            offeror,\\n            purchasePrice,\\n            repurchasePrice,\\n            repoTokensMinted\\n        );\\n    }\\n\\n    /// @param bidder The address of the bidder\\n    /// @param purchasePrice The bid amount to fulfill\\n    /// @param repurchasePrice The repurchase price due at maturity\\n    /// @param collateralTokens Collateral token addresses\\n    /// @param collateralAmounts Collateral token amounts\\n    /// @param dayCountFractionMantissa Actual/360 day count fraction parameter from Term Auction Group\\n    function fulfillBid(\\n        address bidder,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        address[] calldata collateralTokens,\\n        uint256[] calldata collateralAmounts,\\n        uint256 dayCountFractionMantissa\\n    ) external onlyRole(AUCTIONEER) {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp >= maturityTimestamp) {\\n            revert AfterMaturity();\\n        }\\n\\n        repurchaseExposureLedger[bidder] += repurchasePrice;\\n        totalOutstandingRepurchaseExposure += repurchasePrice;\\n\\n        termRepoCollateralManager.journalBidCollateralToCollateralManager(\\n            bidder,\\n            collateralTokens,\\n            collateralAmounts\\n        );\\n\\n        uint256 protocolShare = mul_ScalarTruncate(\\n            mul_(\\n                Exp({mantissa: dayCountFractionMantissa}),\\n                Exp({mantissa: servicingFee})\\n            ),\\n            purchasePrice\\n        );\\n\\n        termRepoLocker.transferTokenToWallet(\\n            termController.getTreasuryAddress(),\\n            purchaseToken,\\n            protocolShare\\n        );\\n\\n        termRepoLocker.transferTokenToWallet(\\n            bidder,\\n            purchaseToken,\\n            purchasePrice - protocolShare\\n        );\\n\\n        emitter.emitBidFulfilled(\\n            termRepoId,\\n            bidder,\\n            purchasePrice,\\n            repurchasePrice,\\n            protocolShare\\n        );\\n    }\\n\\n    // ========================================================================\\n    // = Rollover Functions  ==================================================\\n    // ========================================================================\\n\\n    /// @param termAuction The address of a TermAuction contract to receive autioneer role\\n    function approveRolloverAuction(\\n        address termAuction\\n    ) external onlyRole(ROLLOVER_MANAGER) {\\n        _grantRole(ROLLOVER_TARGET_AUCTIONEER_ROLE, termAuction);\\n    }\\n\\n    /// @param borrower The address of the borrower rolling into new Term Repo\\n    /// @param purchasePrice The purchase price received from new TermRepo\\n    /// @param repurchasePrice The new repurchase price due at maturity of new TermRepo\\n    /// @param previousTermRepoLocker   The address of the old TermRepoLocker contract\\n    /// @param dayCountFractionMantissa Actual/360 day count fraction parameter from Term Auction Group\\n    /// @return The net purchase price received in after deducing protocol servicing fees\\n    function openExposureOnRolloverNew(\\n        address borrower,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        address previousTermRepoLocker,\\n        uint256 dayCountFractionMantissa\\n    ) external onlyRole(AUCTIONEER) returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp >= maturityTimestamp) {\\n            revert AfterMaturity();\\n        }\\n\\n        repurchaseExposureLedger[borrower] += repurchasePrice;\\n        totalOutstandingRepurchaseExposure += repurchasePrice;\\n\\n        uint256 protocolShare = mul_ScalarTruncate(\\n            mul_(\\n                Exp({mantissa: dayCountFractionMantissa}),\\n                Exp({mantissa: servicingFee})\\n            ),\\n            purchasePrice\\n        );\\n\\n        termRepoLocker.transferTokenToWallet(\\n            termController.getTreasuryAddress(),\\n            purchaseToken,\\n            protocolShare\\n        );\\n\\n        uint256 netPurchasePrice = purchasePrice - protocolShare;\\n\\n        termRepoLocker.transferTokenToWallet(\\n            previousTermRepoLocker,\\n            purchaseToken,\\n            netPurchasePrice\\n        );\\n\\n        emitter.emitExposureOpenedOnRolloverNew(\\n            termRepoId,\\n            borrower,\\n            netPurchasePrice,\\n            repurchasePrice,\\n            protocolShare\\n        );\\n\\n        return netPurchasePrice;\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @param rolloverSettlementAmount The amount of net proceeds received from new TermRepo to pay down existing repurchase obligation due to old Term Repo\\n    /// @return A uint256 representing the proportion of total repurchase due to old Term Repo from borrower settled by proceeds from new TermRepo\\n    function closeExposureOnRolloverExisting(\\n        address borrower,\\n        uint256 rolloverSettlementAmount\\n    ) external onlyRole(ROLLOVER_TARGET_AUCTIONEER_ROLE) returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp < maturityTimestamp) {\\n            revert NotMaturedYet();\\n        }\\n        // solhint-disable-next-line not-rely-on-time\\n        if (block.timestamp >= endOfRepurchaseWindow) {\\n            revert AfterRepurchaseWindow();\\n        }\\n        uint256 proportionPaid;\\n        if (rolloverSettlementAmount >= repurchaseExposureLedger[borrower]) {\\n            proportionPaid = expScale;\\n        } else {\\n            proportionPaid =\\n                (rolloverSettlementAmount * expScale) /\\n                repurchaseExposureLedger[borrower];\\n        }\\n\\n        //NOTE: Prevent overflow errors in the case purchasePrice > remaining borrow balance\\n        if (rolloverSettlementAmount > repurchaseExposureLedger[borrower]) {\\n            totalOutstandingRepurchaseExposure -= repurchaseExposureLedger[\\n                borrower\\n            ];\\n\\n            totalRepurchaseCollected += repurchaseExposureLedger[borrower];\\n\\n            emitter.emitExposureClosedOnRolloverExisting(\\n                termRepoId,\\n                borrower,\\n                repurchaseExposureLedger[borrower]\\n            );\\n            // slither-disable-start reentrancy-no-eth\\n            repurchaseExposureLedger[borrower] = 0;\\n            // slither-disable-end reentrancy-no-eth\\n        } else {\\n            repurchaseExposureLedger[borrower] -= rolloverSettlementAmount;\\n            totalOutstandingRepurchaseExposure -= rolloverSettlementAmount;\\n            totalRepurchaseCollected += rolloverSettlementAmount;\\n\\n            emitter.emitExposureClosedOnRolloverExisting(\\n                termRepoId,\\n                borrower,\\n                rolloverSettlementAmount\\n            );\\n        }\\n\\n        assert(_isTermRepoBalanced());\\n\\n        termRepoRolloverManager.fulfillRollover(borrower);\\n\\n        return proportionPaid;\\n    }\\n\\n    // ========================================================================\\n    // = Collateral Functions  ================================================\\n    // ========================================================================\\n\\n    /// @param borrower The address of the borrower\\n    /// @param liquidator The address of the liquidator\\n    /// @param amountToCover The amount of repurchase exposure to cover in liquidation\\n    function liquidatorCoverExposure(\\n        address borrower,\\n        address liquidator,\\n        uint256 amountToCover\\n    ) external onlyRole(COLLATERAL_MANAGER) {\\n        _repay(borrower, liquidator, amountToCover);\\n    }\\n\\n    /// @param borrower The address of the borrower\\n    /// @param liquidator The address of the liquidator\\n    /// @param amountOfRepoToken The amount of term tokens used to cover in liquidation\\n    /// @return A uint256 representing purchase value of repo tokens burned\\n    function liquidatorCoverExposureWithRepoToken(\\n        address borrower,\\n        address liquidator,\\n        uint256 amountOfRepoToken\\n    ) external onlyRole(COLLATERAL_MANAGER) returns (uint256) {\\n        uint256 burnValue = termRepoToken.burnAndReturnValue(\\n            liquidator,\\n            amountOfRepoToken\\n        );\\n        if (burnValue > repurchaseExposureLedger[borrower]) {\\n            revert RepurchaseAmountTooHigh();\\n        }\\n        repurchaseExposureLedger[borrower] -= burnValue;\\n        totalOutstandingRepurchaseExposure -= burnValue;\\n\\n        assert(_isTermRepoBalanced());\\n\\n        return burnValue;\\n    }\\n\\n    // ========================================================================\\n    // = Admin Functions ======================================================\\n    // ========================================================================\\n\\n    /// @param authedUser The address of user granted acces to create mint exposure\\n    function grantMintExposureAccess(\\n        address authedUser\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(MINTER_ROLE, authedUser);\\n    }\\n\\n    /// @param termAuctionGroup A struct containing contract addresses of a Term Auction deployment to pair for a reopening of a TermRepo\\n    function reopenToNewAuction(\\n        TermAuctionGroup calldata termAuctionGroup\\n    ) external onlyRole(INITIALIZER_ROLE) {\\n        _grantRole(\\n            AUCTION_LOCKER,\\n            address(termAuctionGroup.termAuctionOfferLocker)\\n        );\\n        _grantRole(AUCTIONEER, address(termAuctionGroup.auction));\\n\\n        emitter.emitReopeningOfferLockerPaired(\\n            termRepoId,\\n            address(this),\\n            address(termAuctionGroup.termAuctionOfferLocker),\\n            address(termAuctionGroup.auction)\\n        );\\n    }\\n\\n    // ========================================================================\\n    // = Internal Functions  ==================================================\\n    // ========================================================================\\n\\n    /// @notice Truncation is by 4 decimal places due to the assumption that number of participants < 10000\\n    function _isTermRepoBalanced() internal view returns (bool) {\\n        if (shortfallHaircutMantissa == 0) {\\n            return\\n                (totalOutstandingRepurchaseExposure +\\n                    totalRepurchaseCollected) /\\n                    (10 ** 4) ==\\n                termRepoToken.totalRedemptionValue() / (10 ** 4);\\n        }\\n\\n        // @note in the case of shortfall, purchase currency in termRepoLocker must balance the pro rata redemption value of remaining term repo tokens\\n        return\\n            (totalRepurchaseCollected) / (10 ** 4) ==\\n            mul_ScalarTruncate(\\n                Exp({mantissa: shortfallHaircutMantissa}),\\n                termRepoToken.totalRedemptionValue()\\n            ) /\\n                (10 ** 4);\\n    }\\n\\n    function _getMaxRepaymentAroundRollover(\\n        address borrower\\n    ) internal view returns (uint256) {\\n        uint256 outstandingRolloverAmount;\\n        TermRepoRolloverElection\\n            memory rolloverElection = termRepoRolloverManager\\n                .getRolloverInstructions(borrower);\\n        if (\\n            rolloverElection.rolloverAmount == 0 || rolloverElection.processed\\n        ) {\\n            outstandingRolloverAmount = 0;\\n        } else {\\n            outstandingRolloverAmount = rolloverElection.rolloverAmount;\\n        }\\n\\n        return repurchaseExposureLedger[borrower] - outstandingRolloverAmount;\\n    }\\n\\n    // Reentrancy risk\\n    function _repay(\\n        address _borrower,\\n        address repayer_,\\n        uint256 amount_\\n    ) internal {\\n        if (amount_ > repurchaseExposureLedger[_borrower]) {\\n            revert RepurchaseAmountTooHigh();\\n        }\\n        repurchaseExposureLedger[_borrower] -= amount_;\\n        totalOutstandingRepurchaseExposure -= amount_;\\n        totalRepurchaseCollected += amount_;\\n\\n        termRepoLocker.transferTokenFromWallet(\\n            repayer_,\\n            purchaseToken,\\n            amount_\\n        );\\n\\n        assert(_isTermRepoBalanced());\\n    }\\n\\n    function _parRedemption(address redeemer_, uint256 amount_) internal {\\n        uint256 redemptionValue = termRepoToken.burnAndReturnValue(\\n            redeemer_,\\n            amount_\\n        );\\n\\n        if (redemptionValue <= totalRepurchaseCollected) {\\n            totalRepurchaseCollected -= redemptionValue;\\n\\n            termRepoLocker.transferTokenToWallet(\\n                redeemer_,\\n                purchaseToken,\\n                redemptionValue\\n            );\\n\\n            emitter.emitTermRepoTokensRedeemed(\\n                termRepoId,\\n                redeemer_,\\n                redemptionValue,\\n                0\\n            );\\n        } else {\\n            uint256 repurchaseRedeemed = totalRepurchaseCollected;\\n            totalRepurchaseCollected = 0;\\n\\n            termRepoLocker.transferTokenToWallet(\\n                redeemer_,\\n                purchaseToken,\\n                repurchaseRedeemed\\n            );\\n\\n            emitter.emitTermRepoTokensRedeemed(\\n                termRepoId,\\n                redeemer_,\\n                repurchaseRedeemed,\\n                0\\n            );\\n        }\\n\\n        assert(_isTermRepoBalanced());\\n    }\\n\\n    function _proRataRedemption(address redeemer_, uint256 amount_) internal {\\n        if (shortfallHaircutMantissa == 0) {\\n            shortfallHaircutMantissa = div_(\\n                Exp({mantissa: totalRepurchaseCollected * expScale}),\\n                Exp({\\n                    mantissa: (totalRepurchaseCollected +\\n                        totalOutstandingRepurchaseExposure) * expScale\\n                })\\n            ).mantissa;\\n        }\\n\\n        // slither-disable-start reentrancy-no-eth\\n        uint256 redemptionAmount = termRepoToken.burnAndReturnValue(\\n            redeemer_,\\n            amount_\\n        );\\n\\n        uint256 proRataRedemptionAmount = mul_ScalarTruncate(\\n            Exp({mantissa: shortfallHaircutMantissa}),\\n            redemptionAmount\\n        );\\n\\n        if (proRataRedemptionAmount <= totalRepurchaseCollected) {\\n            totalRepurchaseCollected -= proRataRedemptionAmount;\\n\\n            termRepoLocker.transferTokenToWallet(\\n                redeemer_,\\n                purchaseToken,\\n                proRataRedemptionAmount\\n            );\\n\\n            emitter.emitTermRepoTokensRedeemed(\\n                termRepoId,\\n                redeemer_,\\n                proRataRedemptionAmount,\\n                expScale - shortfallHaircutMantissa\\n            );\\n        } else {\\n            uint256 repurchaseRedeemed = totalRepurchaseCollected;\\n            totalRepurchaseCollected = 0;\\n\\n            termRepoLocker.transferTokenToWallet(\\n                redeemer_,\\n                purchaseToken,\\n                repurchaseRedeemed\\n            );\\n\\n            emitter.emitTermRepoTokensRedeemed(\\n                termRepoId,\\n                redeemer_,\\n                repurchaseRedeemed,\\n                expScale - shortfallHaircutMantissa\\n            );\\n        }\\n\\n        assert(_isTermRepoBalanced());\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    ///@dev required override by the OpenZeppelin UUPS module\\n    function _authorizeUpgrade(\\n        address\\n    ) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n    // solhint-enable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/TermRepoToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./lib/ExponentialNoError.sol\\\";\\nimport \\\"./lib/TermRepoTokenConfig.sol\\\";\\nimport \\\"./interfaces/ITermRepoToken.sol\\\";\\nimport \\\"./interfaces/ITermRepoTokenErrors.sol\\\";\\nimport \\\"./interfaces/ITermEventEmitter.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// @author TermLabs\\n/// @title Term Repo Token\\n/// @notice This is an ERC-20 contract to track claims to the aggregate repurchase obligations due on the repurchase date across all borrowers to a Term Repo\\n/// @dev This contract belongs to the Term Servicer group of contracts and is specific to a Term Repo deployment\\ncontract TermRepoToken is\\n    Initializable,\\n    ERC20Upgradeable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    ExponentialNoError,\\n    ITermRepoTokenErrors,\\n    ITermRepoToken\\n{\\n    // ========================================================================\\n    // = Access Roles  ========================================================\\n    // ========================================================================\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    bytes32 public constant INITIALIZER_ROLE = keccak256(\\\"INITIALIZER_ROLE\\\");\\n\\n    // ========================================================================\\n    // = State Variables ======================================================\\n    // ========================================================================\\n    uint8 internal decimalPlaces; // NOTE: aligned with purchase token\\n    bool internal termContractPaired;\\n    bool public mintingPaused;\\n    bool public burningPaused;\\n    uint256 public redemptionValue; // NOTE: number of purchase tokens per unit\\n    bytes32 public termRepoId;\\n    uint256 public mintExposureCap;\\n    TermRepoTokenConfig public config;\\n    ITermEventEmitter internal emitter;\\n\\n    // ========================================================================\\n    // = Modifiers  ===========================================================\\n    // ========================================================================\\n\\n    modifier whileMintingNotPaused() {\\n        if (mintingPaused) {\\n            revert TermRepoTokenMintingPaused();\\n        }\\n        _;\\n    }\\n\\n    modifier whileBurningNotPaused() {\\n        if (burningPaused) {\\n            revert TermRepoTokenBurningPaused();\\n        }\\n        _;\\n    }\\n\\n    modifier notTermContractPaired() {\\n        if (termContractPaired) {\\n            revert AlreadyTermContractPaired();\\n        }\\n        termContractPaired = true;\\n        _;\\n    }\\n\\n    // ========================================================================\\n    // = Deploy (https://docs.openzeppelin.com/contracts/4.x/upgradeable) =====\\n    // ========================================================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string calldata termRepoId_,\\n        string calldata name_,\\n        string calldata symbol_,\\n        address termRepoServicer_,\\n        uint8 decimalPlaces_,\\n        uint256 redemptionValue_,\\n        uint256 mintExposureCap_,\\n        TermRepoTokenConfig calldata config_\\n    ) external initializer {\\n        ERC20Upgradeable.__ERC20_init(name_, symbol_);\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n        AccessControlUpgradeable.__AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, termRepoServicer_);\\n        _grantRole(BURNER_ROLE, termRepoServicer_);\\n        _grantRole(INITIALIZER_ROLE, msg.sender);\\n\\n        // slither-disable-start reentrancy-no-eth events-maths\\n        decimalPlaces = decimalPlaces_;\\n        redemptionValue = redemptionValue_;\\n        config = config_;\\n        // slither-disable-end reentrancy-no-eth events-maths\\n\\n        termRepoId = keccak256(abi.encodePacked(termRepoId_));\\n\\n        mintExposureCap = mintExposureCap_;\\n\\n        mintingPaused = false;\\n\\n        termContractPaired = false;\\n    }\\n\\n    function pairTermContracts(\\n        ITermEventEmitter emitter_\\n    ) external onlyRole(INITIALIZER_ROLE) notTermContractPaired {\\n        emitter = emitter_;\\n\\n        emitter.emitTermRepoTokenInitialized(\\n            termRepoId,\\n            address(this),\\n            redemptionValue\\n        );\\n    }\\n\\n    function resetMintExposureCap(\\n        uint256 mintExposureCap_\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintExposureCap = mintExposureCap_;\\n    }\\n\\n    // ========================================================================\\n    // = Interface/API ========================================================\\n    // ========================================================================\\n\\n    /// @notice Calculates the total USD redemption value of all outstanding TermRepoTokens\\n    /// @return totalRedemptionValue The total redemption value of TermRepoTokens in USD\\n    function totalRedemptionValue() external view returns (uint256) {\\n        uint256 totalValue = truncate(\\n            mul_(\\n                Exp({mantissa: totalSupply() * expScale}),\\n                Exp({mantissa: redemptionValue})\\n            )\\n        );\\n        return totalValue;\\n    }\\n\\n    /// @notice Burns TermRepoTokens held by an account\\n    /// @notice Reverts if caller does not have BURNER_ROLE\\n    /// @param account The address of account holding TermRepoTokens to burn\\n    /// @param amount The amount of TermRepoTokens to burn without decimal factor\\n    function burn(\\n        address account,\\n        uint256 amount\\n    ) external override onlyRole(BURNER_ROLE) whileBurningNotPaused {\\n        _burn(account, amount);\\n        mintExposureCap += amount;\\n    }\\n\\n    /// @notice Burns TermRepoTokens held by an account and returns purchase redemption value of tokens burned\\n    /// @notice Reverts if caller does not have BURNER_ROLE\\n    /// @param account The address of account holding TermRepoTokens to burn\\n    /// @param amount The amount of TermRepoTokens to burn without decimal factor\\n    /// @return totalRedemptionValue Total redemption value of TermRepoTokens burned\\n    function burnAndReturnValue(\\n        address account,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        onlyRole(BURNER_ROLE)\\n        whileBurningNotPaused\\n        returns (uint256)\\n    {\\n        _burn(account, amount);\\n        mintExposureCap += amount;\\n        uint256 valueBurned = truncate(\\n            mul_(\\n                Exp({mantissa: amount * expScale}),\\n                Exp({mantissa: redemptionValue})\\n            )\\n        );\\n        return valueBurned;\\n    }\\n\\n    /// @notice Mints TermRepoTokens in an amount equal to caller specified target redemption amount\\n    /// @notice The redemptionValue is the amount of purchase tokens redeemable per unit of TermRepoToken\\n    /// @notice Reverts if caller does not have MINTER_ROLE\\n    /// @param account The address of account to mint TermRepoTokens to\\n    /// @param redemptionAmount The target redemption amount to mint in TermRepoTokens\\n    /// @return numTokens The amount of Term Repo Tokens minted\\n    function mintRedemptionValue(\\n        address account,\\n        uint256 redemptionAmount\\n    )\\n        external\\n        override\\n        whileMintingNotPaused\\n        onlyRole(MINTER_ROLE)\\n        returns (uint256)\\n    {\\n        uint256 numTokens = truncate(\\n            div_(\\n                Exp({mantissa: redemptionAmount * expScale}),\\n                Exp({mantissa: redemptionValue})\\n            )\\n        );\\n        _mint(account, numTokens);\\n        return numTokens;\\n    }\\n\\n    /// @notice Mints an exact amount of TermRepoTokens\\n    /// @notice Reverts if caller does not have MINTER_ROLE\\n    /// @param account The address of account to mint TermRepoTokens to\\n    /// @param numTokens The exact number of term repo tokens to mint\\n    function mintTokens(\\n        address account,\\n        uint256 numTokens\\n    )\\n        external\\n        override\\n        whileMintingNotPaused\\n        onlyRole(MINTER_ROLE)\\n        returns (uint256)\\n    {\\n        _mint(account, numTokens);\\n        uint256 redemptionValueMinted = truncate(\\n            mul_(\\n                Exp({mantissa: numTokens * expScale}),\\n                Exp({mantissa: redemptionValue})\\n            )\\n        );\\n        return redemptionValueMinted;\\n    }\\n\\n    /// @notice Decrements the mintExposureCap\\n    /// @notice Reverts if caller does not have MINTER_ROLE\\n    /// @param supplyMinted The number of Tokens Minted\\n    function decrementMintExposureCap(\\n        uint256 supplyMinted\\n    ) external override onlyRole(MINTER_ROLE) {\\n        if (supplyMinted > mintExposureCap) {\\n            revert MintExposureCapExceeded();\\n        }\\n        mintExposureCap -= supplyMinted;\\n    }\\n\\n    /// @return uint8 A uint8 that specifies how many decimal places a token has\\n    function decimals() public view virtual override returns (uint8) {\\n        return decimalPlaces;\\n    }\\n\\n    // ========================================================================\\n    // = Pause Functions ======================================================\\n    // ========================================================================\\n\\n    function pauseMinting() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintingPaused = true;\\n        emitter.emitTermRepoTokenMintingPaused(termRepoId);\\n    }\\n\\n    function unpauseMinting() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mintingPaused = false;\\n        emitter.emitTermRepoTokenMintingUnpaused(termRepoId);\\n    }\\n\\n    function pauseBurning() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        burningPaused = true;\\n        emitter.emitTermRepoTokenBurningPaused(termRepoId);\\n    }\\n\\n    function unpauseBurning() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        burningPaused = false;\\n        emitter.emitTermRepoTokenBurningUnpaused(termRepoId);\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    ///@dev Required override by the OpenZeppelin UUPS module\\n    function _authorizeUpgrade(\\n        address\\n    ) internal view override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n    // solhint-enable no-empty-blocks\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyTermContractPaired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerNotInShortfall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CollateralBelowMaintenanceRatios\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralDepositClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CollateralTokenNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralWithdrawalClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefaultsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsNetExposureCapOnLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"InsufficientCollateralForLiquidationRepayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateralForRedemption\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepaymentAmountLargerThanAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SelfLiquidationNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShortfallLiquidationsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TermRepurchaseWindowOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalRepaymentGreaterThangetBorrowerRepurchaseObligation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnlockAmountGreaterThanCollateralBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressContractPaired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBorrowerRepurchaseObligation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCollateralBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroLiquidationNotPermitted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_LOCKER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIALIZER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLLOVER_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLLOVER_TARGET_AUCTIONEER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVICER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acceptRolloverCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rolloverAuction\",\"type\":\"address\"}],\"name\":\"approveRolloverAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"auctionLockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"auctionUnlockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"closureAmounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TermAuth\",\"name\":\"termAuth\",\"type\":\"tuple\"}],\"name\":\"batchDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"closureAmounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TermAuth\",\"name\":\"termAuth\",\"type\":\"tuple\"}],\"name\":\"batchLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"closureRepoTokenAmounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TermAuth\",\"name\":\"termAuth\",\"type\":\"tuple\"}],\"name\":\"batchLiquidationWithRepoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToLock\",\"type\":\"uint256\"}],\"name\":\"calculateMintableExposure\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct ExponentialNoError.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deMinimisMarginThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encumberedCollateralRemaining\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TermAuth\",\"name\":\"termAuth\",\"type\":\"tuple\"}],\"name\":\"externalLockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TermAuth\",\"name\":\"termAuth\",\"type\":\"tuple\"}],\"name\":\"externalUnlockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getCollateralBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getCollateralMarketValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialCollateralRatios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"termRepoId_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"liquidateDamangesDueToProtocol_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netExposureCapOnLiquidation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deMinimisMarginThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"purchaseToken_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedDamage\",\"type\":\"uint256\"}],\"internalType\":\"struct Collateral[]\",\"name\":\"collateralTokens_\",\"type\":\"tuple[]\"},{\"internalType\":\"contract ITermEventEmitter\",\"name\":\"emitter_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"isBorrowerInShortfall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"collateralTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"journalBidCollateralToCollateralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateDamangesDueToProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidatedDamages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maintenanceCollateralRatios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintOpenExposureLockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netExposureCapOnLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfAcceptedCollateralTokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"termRepoLocker_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"termRepoServicer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"termAuctionBidLocker_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"termAuction_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"termController_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"termPriceOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authenticator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"termRepoRolloverManager\",\"type\":\"address\"}],\"name\":\"pairTermContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseLiquidations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract TermAuction\",\"name\":\"auction\",\"type\":\"address\"},{\"internalType\":\"contract ITermAuctionBidLocker\",\"name\":\"termAuctionBidLocker\",\"type\":\"address\"},{\"internalType\":\"contract ITermAuctionOfferLocker\",\"name\":\"termAuctionOfferLocker\",\"type\":\"address\"}],\"internalType\":\"struct TermAuctionGroup\",\"name\":\"termAuctionGroup\",\"type\":\"tuple\"}],\"name\":\"reopenToNewAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termRepoId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termRepoLocker\",\"outputs\":[{\"internalType\":\"contract ITermRepoLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rolloverProportion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rolloverTermRepoLocker\",\"type\":\"address\"}],\"name\":\"transferRolloverCollateral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"unlockCollateralOnRepurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseLiquidations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "TermRepoCollateralManager", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}