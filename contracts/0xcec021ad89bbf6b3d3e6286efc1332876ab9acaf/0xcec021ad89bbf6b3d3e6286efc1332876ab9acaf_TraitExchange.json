{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\r\n     * reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\r\n * {IERC721-setApprovalForAll}.\r\n */\r\nabstract contract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface that must be implemented by smart contracts in order to receive\r\n * ERC-1155 token transfers.\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\r\n *\r\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\r\n * stuck.\r\n */\r\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC1155Receiver).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed account,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\r\n     *\r\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\r\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\r\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\r\n     * reentrancy guards when interacting with untrusted contracts.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     *\r\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\r\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\r\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\r\n     * reentrancy guards when interacting with untrusted contracts.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `values` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract TraitExchange is Ownable, ERC721Holder, ERC1155Holder {\r\n    event OfferCreated(StructOffer);\r\n\r\n    event Status(StructOffer, OfferStatus);\r\n\r\n    event ExecludedFromFees(address contractAddress);\r\n    event IncludedFromFees(address contractAddress);\r\n    event FeesClaimedByAdmin(uint256 feesValue);\r\n    event ExchangeFeesUpdated(uint256 prevFees, uint256 updatedFees);\r\n\r\n    enum OfferStatus {\r\n        pending,\r\n        withdrawan,\r\n        accepted,\r\n        rejected\r\n    }\r\n\r\n    struct StructERC20Value {\r\n        address erc20Contract;\r\n        uint256 erc20Value;\r\n    }\r\n\r\n    struct StructERC721Value {\r\n        address erc721Contract;\r\n        uint256 erc721Id;\r\n    }\r\n\r\n    struct StructERC1155Value {\r\n        address erc1155Contract;\r\n        uint256 erc1155Id;\r\n        uint256 amount;\r\n        bytes data;\r\n    }\r\n\r\n    struct StructOffer {\r\n        uint256 offerId;\r\n        address sender;\r\n        address receiver;\r\n        uint256 offeredETH;\r\n        uint256 requestedETH;\r\n        StructERC20Value offeredERC20;\r\n        StructERC20Value requestedERC20;\r\n        StructERC721Value[] offeredERC721;\r\n        StructERC721Value[] requestedERC721;\r\n        StructERC1155Value[] offeredERC1155;\r\n        StructERC1155Value[] requestedERC1155;\r\n        uint256 timeStamp;\r\n        uint256 validDuration;\r\n        OfferStatus status;\r\n    }\r\n\r\n    struct StructAccount {\r\n        uint256[] offersReceived;\r\n        uint256[] offersCreated;\r\n    }\r\n\r\n    uint256 private _offerIds;\r\n    address[] private _excludedFeesContracts;\r\n    uint256 private _fees;\r\n    uint256 private _feesCollected;\r\n    uint256 private _feesClaimed;\r\n    bool private _isTransacting;\r\n\r\n    mapping(uint256 => StructOffer) private _mappingOffer;\r\n    mapping(address => StructAccount) private _mappingAccounts;\r\n\r\n    constructor(uint256 _feesInWei) {\r\n        _fees = _feesInWei;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    modifier noReentrancy() {\r\n        require(\r\n            !_isTransacting,\r\n            \"whileTreansacting(): Contract is already transaction\"\r\n        );\r\n        _isTransacting = true;\r\n        _;\r\n        _isTransacting = false;\r\n    }\r\n\r\n    modifier isOfferValidForWithdrawal(uint256 _offerId) {\r\n        StructOffer memory offerAccount = _mappingOffer[_offerId];\r\n\r\n        require(\r\n            offerAccount.sender != address(0),\r\n            \"Address zero cannot make offer.\"\r\n        );\r\n\r\n        require(\r\n            offerAccount.receiver != address(0),\r\n            \"Cannot make offer to address zero.\"\r\n        );\r\n\r\n        require(\r\n            offerAccount.status != OfferStatus.accepted,\r\n            \"Offer already used.\"\r\n        );\r\n\r\n        require(\r\n            offerAccount.status != OfferStatus.withdrawan,\r\n            \"Offer already withdrawan.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isValidOffer(uint256 _offerId) {\r\n        StructOffer memory offerAccount = _mappingOffer[_offerId];\r\n\r\n        require(\r\n            offerAccount.sender != address(0),\r\n            \"Address zero cannot make offer.\"\r\n        );\r\n\r\n        require(\r\n            offerAccount.receiver != address(0),\r\n            \"Cannot make offer to address zero.\"\r\n        );\r\n\r\n        require(\r\n            offerAccount.status == OfferStatus.pending,\r\n            \"Offer already accepted or withdrawan.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isReceiver(uint256 _offerId) {\r\n        StructOffer memory offerAccount = _mappingOffer[_offerId];\r\n        require(\r\n            msg.sender == offerAccount.receiver,\r\n            \"You are not the receiver of this offer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function createOffer(StructOffer memory _structOffer)\r\n        external\r\n        payable\r\n        returns (uint256 offerId)\r\n    {\r\n        require(\r\n            _structOffer.receiver != address(0),\r\n            \"createOffer(): _receiver cannot be address zero.\"\r\n        );\r\n        require(\r\n            _structOffer.offeredERC721.length < type(uint8).max,\r\n            \"createOffer(): Offered erc721 cannot be more than 255\"\r\n        );\r\n        require(\r\n            _structOffer.requestedERC721.length < type(uint8).max,\r\n            \"createOffer(): requested erc721 cannot be more than 255\"\r\n        );\r\n        require(\r\n            _structOffer.offeredERC1155.length < type(uint8).max,\r\n            \"createOffer(): Offered erc721 cannot be more than 255\"\r\n        );\r\n        require(\r\n            _structOffer.requestedERC1155.length < type(uint8).max,\r\n            \"createOffer(): Offered erc721 cannot be more than 255\"\r\n        );\r\n\r\n        uint256 msgValue = msg.value;\r\n        address msgSender = msg.sender;\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        offerId = _offerIds;\r\n\r\n        if (!_isBalanceExcludedFromFees(msgSender)) {\r\n            require(\r\n                msgValue >= _fees + _structOffer.offeredETH,\r\n                \"createOffer(): user is not included in exclude from fees and msgValue no included fees amount.\"\r\n            );\r\n            _feesCollected += _fees;\r\n        } else {\r\n            require(\r\n                msgValue == _structOffer.offeredETH,\r\n                \"createOffer(): msgValue is not equal to ethOffered.\"\r\n            );\r\n        }\r\n\r\n        StructOffer storage offerAccount = _mappingOffer[offerId];\r\n\r\n        offerAccount.offerId = offerId;\r\n        offerAccount.sender = msgSender;\r\n        offerAccount.receiver = _structOffer.receiver;\r\n        offerAccount.offeredETH = _structOffer.offeredETH;\r\n        offerAccount.requestedETH = _structOffer.requestedETH;\r\n        offerAccount.offeredERC20 = _structOffer.offeredERC20;\r\n        offerAccount.requestedERC20 = _structOffer.requestedERC20;\r\n\r\n        ///@dev please ensure that there is sufficient allowance to successfully invoke the transferFrom function.\r\n        if (\r\n            _structOffer.offeredERC20.erc20Contract != address(0) &&\r\n            _structOffer.offeredERC20.erc20Value > 0\r\n        ) {\r\n            IERC20(_structOffer.offeredERC20.erc20Contract).transferFrom(\r\n                msgSender,\r\n                address(this),\r\n                _structOffer.offeredERC20.erc20Value\r\n            );\r\n        }\r\n\r\n        ///@dev please ensure that there is sufficient allowance to successfully invoke the transferFrom function.\r\n\r\n        for (uint8 i; i < _structOffer.offeredERC721.length; ++i) {\r\n            IERC721(_structOffer.offeredERC721[i].erc721Contract)\r\n                .safeTransferFrom(\r\n                    msgSender,\r\n                    address(this),\r\n                    _structOffer.offeredERC721[i].erc721Id\r\n                );\r\n            offerAccount.offeredERC721.push(_structOffer.offeredERC721[i]);\r\n        }\r\n\r\n        for (uint8 i; i < _structOffer.requestedERC721.length; ++i) {\r\n            offerAccount.requestedERC721.push(_structOffer.requestedERC721[i]);\r\n        }\r\n\r\n        for (uint8 i; i < _structOffer.offeredERC1155.length; ++i) {\r\n            IERC1155(_structOffer.offeredERC1155[i].erc1155Contract)\r\n                .safeTransferFrom(\r\n                    msgSender,\r\n                    address(this),\r\n                    _structOffer.offeredERC1155[i].erc1155Id,\r\n                    _structOffer.offeredERC1155[i].amount,\r\n                    _structOffer.offeredERC1155[i].data\r\n                );\r\n\r\n            offerAccount.offeredERC1155.push(_structOffer.offeredERC1155[i]);\r\n        }\r\n\r\n        for (uint8 i; i < _structOffer.requestedERC1155.length; ++i) {\r\n            offerAccount.requestedERC1155.push(\r\n                _structOffer.requestedERC1155[i]\r\n            );\r\n        }\r\n\r\n        offerAccount.timeStamp = currentTime;\r\n        offerAccount.validDuration = _structOffer.validDuration;\r\n        offerAccount.status = OfferStatus.pending;\r\n\r\n        _mappingAccounts[msgSender].offersCreated.push(offerId);\r\n        _mappingAccounts[_structOffer.receiver].offersReceived.push(offerId);\r\n\r\n        emit OfferCreated(_mappingOffer[offerId]);\r\n\r\n        _offerIds++;\r\n    }\r\n\r\n    function acceptOffer(uint256 _offerId)\r\n        external\r\n        payable\r\n        noReentrancy\r\n        isValidOffer(_offerId)\r\n        isReceiver(_offerId)\r\n    {\r\n        address msgSender = msg.sender;\r\n        uint256 msgValue = msg.value;\r\n\r\n        StructOffer storage offerAccount = _mappingOffer[_offerId];\r\n        require(\r\n            msgValue >= offerAccount.requestedETH,\r\n            \"Receiver has not sent enough eth, offer creator requested.\"\r\n        );\r\n        require(\r\n            block.timestamp <\r\n                offerAccount.timeStamp + offerAccount.validDuration,\r\n            \"Offer expired.\"\r\n        );\r\n\r\n        ///@dev please ensure that there is sufficient allowance to successfully invoke the transferFrom function.\r\n        for (uint8 i; i < offerAccount.offeredERC721.length; i++) {\r\n            IERC721(offerAccount.offeredERC721[i].erc721Contract).transferFrom(\r\n                address(this),\r\n                offerAccount.receiver,\r\n                offerAccount.offeredERC721[i].erc721Id\r\n            );\r\n        }\r\n\r\n        for (uint8 i; i < offerAccount.offeredERC1155.length; i++) {\r\n            IERC1155(offerAccount.offeredERC1155[i].erc1155Contract)\r\n                .safeTransferFrom(\r\n                    address(this),\r\n                    offerAccount.receiver,\r\n                    offerAccount.offeredERC1155[i].erc1155Id,\r\n                    offerAccount.offeredERC1155[i].amount,\r\n                    offerAccount.offeredERC1155[i].data\r\n                );\r\n        }\r\n\r\n        ///@dev please ensure that there is sufficient allowance to successfully invoke the transferFrom function.\r\n        for (uint8 i; i < offerAccount.requestedERC721.length; i++) {\r\n            IERC721(offerAccount.requestedERC721[i].erc721Contract)\r\n                .transferFrom(\r\n                    offerAccount.receiver,\r\n                    offerAccount.sender,\r\n                    offerAccount.requestedERC721[i].erc721Id\r\n                );\r\n        }\r\n\r\n        for (uint8 i; i < offerAccount.requestedERC1155.length; i++) {\r\n            IERC1155(offerAccount.requestedERC1155[i].erc1155Contract)\r\n                .safeTransferFrom(\r\n                    offerAccount.receiver,\r\n                    offerAccount.sender,\r\n                    offerAccount.requestedERC1155[i].erc1155Id,\r\n                    offerAccount.requestedERC1155[i].amount,\r\n                    \"0x\"\r\n                );\r\n        }\r\n\r\n        if (offerAccount.offeredETH > 0) {\r\n            payable(offerAccount.receiver).transfer(offerAccount.offeredETH);\r\n        }\r\n\r\n        if (offerAccount.requestedETH > 0) {\r\n            payable(offerAccount.sender).transfer(offerAccount.requestedETH);\r\n        }\r\n\r\n        if (\r\n            offerAccount.requestedERC20.erc20Contract != address(0) &&\r\n            offerAccount.requestedERC20.erc20Value > 0\r\n        ) {\r\n            IERC20(offerAccount.requestedERC20.erc20Contract).transferFrom(\r\n                msgSender,\r\n                offerAccount.sender,\r\n                offerAccount.requestedERC20.erc20Value\r\n            );\r\n        }\r\n\r\n        ///@dev please ensure that there is sufficient allowance to successfully invoke the transferFrom function.\r\n        if (\r\n            offerAccount.offeredERC20.erc20Contract != address(0) &&\r\n            offerAccount.offeredERC20.erc20Value > 0\r\n        ) {\r\n            IERC20(offerAccount.offeredERC20.erc20Contract).transfer(\r\n                offerAccount.receiver,\r\n                offerAccount.offeredERC20.erc20Value\r\n            );\r\n        }\r\n\r\n        offerAccount.status = OfferStatus.accepted;\r\n        emit Status(offerAccount, OfferStatus.accepted);\r\n    }\r\n\r\n    function rejectOffer(uint256 _offerId)\r\n        external\r\n        noReentrancy\r\n        isValidOffer(_offerId)\r\n        isReceiver(_offerId)\r\n    {\r\n        StructOffer storage offerAccount = _mappingOffer[_offerId];\r\n\r\n        offerAccount.status = OfferStatus.rejected;\r\n        emit Status(offerAccount, OfferStatus.rejected);\r\n    }\r\n\r\n    function withdrawOffer(uint256 _offerId)\r\n        external\r\n        noReentrancy\r\n        isOfferValidForWithdrawal(_offerId)\r\n    {\r\n        address msgSender = msg.sender;\r\n\r\n        StructOffer storage offerAccount = _mappingOffer[_offerId];\r\n\r\n        require(\r\n            msgSender == offerAccount.sender,\r\n            \"Only offer creator can withdrawOffer.\"\r\n        );\r\n\r\n        for (uint8 i; i < offerAccount.offeredERC721.length; i++) {\r\n            IERC721(offerAccount.offeredERC721[i].erc721Contract).transferFrom(\r\n                address(this),\r\n                offerAccount.sender,\r\n                offerAccount.offeredERC721[i].erc721Id\r\n            );\r\n        }\r\n\r\n        for (uint8 i; i < offerAccount.offeredERC1155.length; i++) {\r\n            IERC1155(offerAccount.offeredERC1155[i].erc1155Contract)\r\n                .safeTransferFrom(\r\n                    address(this),\r\n                    offerAccount.sender,\r\n                    offerAccount.offeredERC1155[i].erc1155Id,\r\n                    offerAccount.offeredERC1155[i].amount,\r\n                    offerAccount.offeredERC1155[i].data\r\n                );\r\n        }\r\n\r\n        if (offerAccount.offeredETH > 0) {\r\n            payable(offerAccount.sender).transfer(offerAccount.offeredETH);\r\n        }\r\n\r\n        if (\r\n            offerAccount.offeredERC20.erc20Contract != address(0) &&\r\n            offerAccount.offeredERC20.erc20Value > 0\r\n        ) {\r\n            IERC20(offerAccount.offeredERC20.erc20Contract).transfer(\r\n                offerAccount.sender,\r\n                offerAccount.offeredERC20.erc20Value\r\n            );\r\n        }\r\n\r\n        offerAccount.status = OfferStatus.withdrawan;\r\n\r\n        emit Status(offerAccount, OfferStatus.withdrawan);\r\n    }\r\n\r\n    function getOfferById(uint256 _offerId)\r\n        public\r\n        view\r\n        returns (StructOffer memory)\r\n    {\r\n        return _mappingOffer[_offerId];\r\n    }\r\n\r\n    function userOffers(address _userAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory offersCreated,\r\n            uint256[] memory offersReceived\r\n        )\r\n    {\r\n        StructAccount memory userAccount = _mappingAccounts[_userAddress];\r\n        offersCreated = userAccount.offersCreated;\r\n        offersReceived = userAccount.offersReceived;\r\n    }\r\n\r\n    function allOffersCount() external view returns (uint256 offersCount) {\r\n        if (_offerIds > 0) {\r\n            offersCount = _offerIds + 1;\r\n        }\r\n    }\r\n\r\n    function _isBalanceExcludedFromFees(address _userAddress)\r\n        private\r\n        view\r\n        returns (bool _isExcluded)\r\n    {\r\n        address[] memory excludedContractsList = _excludedFeesContracts;\r\n        if (excludedContractsList.length > 0) {\r\n            for (uint8 i; i < excludedContractsList.length; ++i) {\r\n                if (\r\n                    IERC721(excludedContractsList[i]).balanceOf(_userAddress) >\r\n                    0\r\n                ) {\r\n                    _isExcluded = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getFeesExcludedList() external view returns (address[] memory) {\r\n        return _excludedFeesContracts;\r\n    }\r\n\r\n    function includeInFees(address _contractAddress) external onlyOwner {\r\n        address[] memory excludedContractsList = _excludedFeesContracts;\r\n\r\n        if (excludedContractsList.length > 0) {\r\n            for (uint8 i; i < excludedContractsList.length; ++i) {\r\n                if (_excludedFeesContracts[i] == _contractAddress) {\r\n                    _excludedFeesContracts[i] ==\r\n                        _excludedFeesContracts[\r\n                            _excludedFeesContracts.length - 1\r\n                        ];\r\n                    _excludedFeesContracts.pop();\r\n\r\n                    emit IncludedFromFees(_contractAddress);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromExchangeFees(address _contractAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        address[] memory excludedContractsList = _excludedFeesContracts;\r\n\r\n        if (excludedContractsList.length > 0) {\r\n            for (uint8 i; i < excludedContractsList.length; ++i) {\r\n                if (_excludedFeesContracts[i] == _contractAddress) {\r\n                    revert(\"Contract already in exempted list.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        _excludedFeesContracts.push(_contractAddress);\r\n        emit ExecludedFromFees(_contractAddress);\r\n    }\r\n\r\n    function getFees() external view returns (uint256) {\r\n        return _fees;\r\n    }\r\n\r\n    function setFees(uint256 _feesInWei) external onlyOwner {\r\n        emit ExchangeFeesUpdated(_fees, _feesInWei);\r\n        _fees = _feesInWei;\r\n    }\r\n\r\n    function getFeesCollected()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 feesCollected,\r\n            uint256 feesClaimed,\r\n            uint256 feesPendingToClaim\r\n        )\r\n    {\r\n        feesCollected = _feesCollected;\r\n        feesClaimed = _feesClaimed;\r\n        feesPendingToClaim = _feesCollected - _feesClaimed;\r\n    }\r\n\r\n    function claimFees() external noReentrancy onlyOwner {\r\n        uint256 pendingFees = _feesCollected - _feesClaimed;\r\n        require(pendingFees > 0, \"No fees to claimed\");\r\n        _feesClaimed += pendingFees;\r\n\r\n        payable(owner()).transfer(pendingFees);\r\n\r\n        emit FeesClaimedByAdmin(pendingFees);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feesInWei\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedFees\",\"type\":\"uint256\"}],\"name\":\"ExchangeFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ExecludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesValue\",\"type\":\"uint256\"}],\"name\":\"FeesClaimedByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"IncludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offeredETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedETH\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC20Value\",\"name\":\"offeredERC20\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC20Value\",\"name\":\"requestedERC20\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC721Value[]\",\"name\":\"offeredERC721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC721Value[]\",\"name\":\"requestedERC721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TraitExchange.StructERC1155Value[]\",\"name\":\"offeredERC1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TraitExchange.StructERC1155Value[]\",\"name\":\"requestedERC1155\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validDuration\",\"type\":\"uint256\"},{\"internalType\":\"enum TraitExchange.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct TraitExchange.StructOffer\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offeredETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedETH\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC20Value\",\"name\":\"offeredERC20\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC20Value\",\"name\":\"requestedERC20\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC721Value[]\",\"name\":\"offeredERC721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC721Value[]\",\"name\":\"requestedERC721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TraitExchange.StructERC1155Value[]\",\"name\":\"offeredERC1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TraitExchange.StructERC1155Value[]\",\"name\":\"requestedERC1155\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validDuration\",\"type\":\"uint256\"},{\"internalType\":\"enum TraitExchange.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct TraitExchange.StructOffer\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum TraitExchange.OfferStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Status\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allOffersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offeredETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedETH\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC20Value\",\"name\":\"offeredERC20\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC20Value\",\"name\":\"requestedERC20\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC721Value[]\",\"name\":\"offeredERC721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC721Value[]\",\"name\":\"requestedERC721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TraitExchange.StructERC1155Value[]\",\"name\":\"offeredERC1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TraitExchange.StructERC1155Value[]\",\"name\":\"requestedERC1155\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validDuration\",\"type\":\"uint256\"},{\"internalType\":\"enum TraitExchange.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraitExchange.StructOffer\",\"name\":\"_structOffer\",\"type\":\"tuple\"}],\"name\":\"createOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"excludeFromExchangeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feesCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesPendingToClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesExcludedList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"getOfferById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offeredETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedETH\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC20Value\",\"name\":\"offeredERC20\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC20Value\",\"name\":\"requestedERC20\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC721Value[]\",\"name\":\"offeredERC721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"}],\"internalType\":\"struct TraitExchange.StructERC721Value[]\",\"name\":\"requestedERC721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TraitExchange.StructERC1155Value[]\",\"name\":\"offeredERC1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TraitExchange.StructERC1155Value[]\",\"name\":\"requestedERC1155\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validDuration\",\"type\":\"uint256\"},{\"internalType\":\"enum TraitExchange.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraitExchange.StructOffer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"rejectOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feesInWei\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"userOffers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"offersCreated\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"offersReceived\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"withdrawOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TraitExchange", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000001550f7dca70000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f442ac4be30e5d4a5045300a7811a7c7b90a04557156b6ec8b050068cb9ed63a"}