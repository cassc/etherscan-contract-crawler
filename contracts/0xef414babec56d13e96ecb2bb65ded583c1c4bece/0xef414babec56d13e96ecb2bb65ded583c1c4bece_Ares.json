{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Ares Baby.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\nimport \\\"@openzeppelin/contracts@4.9.3/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts@4.9.3/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\n/// @title Ares Token\\r\\n/// @notice An erc20 token contract with buy/sell fees\\r\\n/// @dev Inherits the OpenZepplin ERC20, Ownable implementation\\r\\ncontract Ares is ERC20, Ownable {\\r\\n           \\r\\n      /// @notice custom errors\\r\\n      error MaxFeeLimitExceeded();\\r\\n      error ZeroAddressNotAllowed();\\r\\n      error UpdateBoolValue();\\r\\n      error AmountNotInLimits();\\r\\n      error CanNotModifyMainPair();\\r\\n      error LimitsAlreadyDisabled();\\r\\n      error CannotClaimNativeToken();\\r\\n      error NotAuthorized();\\r\\n\\r\\n      /// @notice Max Fee limit for buy OR sell side     \\r\\n      uint16 constant public MAX_FEE_LIMIT = 5;\\r\\n      /// @notice Minimum swap threshold amount that can be set\\r\\n      /// to swap collected tax tokens to eth\\r\\n      uint256 constant private MIN_SWAP_AT_AMOUNT = 1e3 * 1e9;\\r\\n      /// @notice max supply of token\\r\\n      uint256 constant private maxSupply = 4e7 * 1e9; // 40 million\\r\\n      ///@notice max tokens that can swapped to convert fees to eth in single tx\\r\\n      uint256 constant private MAX_SWAP_AMOUNT = 125_000 * 1e9;\\r\\n      ///@notice burn address\\r\\n      address constant public DEAD = address(0xdead);\\r\\n      ///@notice wrapper contract to manage transferWithLock \\r\\n      address private  wrapperContract;\\r\\n      \\r\\n      ///@notice higest eth spent by single wallet\\r\\n      uint256 private highestBuyAmount;\\r\\n\\r\\n       /// @notice max wallet amount\\r\\n      uint256 public maxWalletAmount = 125_000 * 1e9; \\r\\n      /// max wallet status\\r\\n      bool private limitEnabled = true;\\r\\n      \\r\\n     /// @notice struct for fees on buy side \\r\\n      struct BuyFee {\\r\\n          uint16 marketing;\\r\\n          uint16 lottery;\\r\\n          uint16 highBuyReward;\\r\\n          }\\r\\n     /// @notice struct for fees on sell side \\r\\n      struct SellFee {\\r\\n          uint16 marketing;\\r\\n          uint16 lottery;\\r\\n          uint16 highBuyReward;\\r\\n      }   \\r\\n      \\r\\n      /// @notice buyFees\\r\\n      BuyFee public buyFees;\\r\\n      /// @notice sellFees\\r\\n      SellFee public sellFees; \\r\\n       \\r\\n      /// @notice sum of buy fees\\r\\n      uint256 public totalBuyFees;\\r\\n      /// @notice sum of sell fees\\r\\n      uint256 private totalSellFees;\\r\\n      \\r\\n      \\r\\n      /// @notice current highest eth spender address\\r\\n      address public highestEthSpender;  \\r\\n\\r\\n      /// @notice lottery wallet \\r\\n      address public lotteryWallet = 0x1d5393bda55199494b7845F8a2c7BA986145BC02;\\r\\n\\r\\n      /// @notice marketing wallet \\r\\n      address public marketingWallet = 0x46C5Ca6f51A67F380259b76bb17A58bD25F64359;\\r\\n      /// @notice store winners in array\\r\\n      address [] private winners;\\r\\n\\r\\n      /// @notice address of uniswap V2 pair\\r\\n      address public immutable uniswapV2Pair;\\r\\n      /// @notice address of router\\r\\n      IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n        \\r\\n\\r\\n     \\r\\n      /// @notice token threshold after which collected fees will be swapped to ether\\r\\n      uint256 public swapTokensAtAmount = 1000 * 1e9; // 1000 tokens\\r\\n      /// @dev last lp burn timestamp\\r\\n      uint256 public lastBurnTimestamp;\\r\\n      /// @dev total eth distributed till date in rewards\\r\\n      uint256 public totalEthDistributed;\\r\\n\\r\\n      /// @notice current higest eth spend amount\\r\\n     mapping (address => uint256) public userBuyAmount;   \\r\\n\\r\\n      /// @notice  mapping of user address which are excluded from fees  \\r\\n      mapping(address => bool) public isExcludedFromFees;\\r\\n      /// @notice mapping of valid pair addresses\\r\\n      mapping(address=> bool) public isLiquidityPair;\\r\\n      /// @notice keep track of last buy Timestamp;\\r\\n      mapping (address => uint256) private lastBuyTimestamp;\\r\\n      /// @notice keep track of locked amount;\\r\\n      mapping (address => uint256) private lockedAmount;\\r\\n      /// @notice keep track of sent tokens\\r\\n      mapping(address => uint256) private movedUnlockedAmount;\\r\\n      \\r\\n\\r\\n       \\r\\n      /// @notice bool variable to indicate if collected fees can be swapped\\r\\n      /// for ether or not\\r\\n      bool public swapEnabled = true;\\r\\n      /// @notice bool variable to be used while swapping\\r\\n      bool private swapping;\\r\\n\\r\\n\\r\\n      event SwapTokensAmountUpdated (uint256 indexed newAmount);\\r\\n      event FeeWalletUpdated(address indexed newDevWallet, address indexed newMarketingWallet);\\r\\n      event ExcludedFromFees (address account, bool value);\\r\\n      event NewLPUpdated(address lp, bool value); \\r\\n      event BuyFeesUpdated(uint16 lotteryFee, uint16 marketingFee, uint16 highBuyRewardFee);  \\r\\n      event SellFeesUpdated(uint16 lotteryFee, uint16 marketingFee, uint16 highBuyRewardFee);  \\r\\n      \\r\\n\\r\\n    /// @notice Deploys the smart contract, \\r\\n    /// update buy, sell fees,\\r\\n    /// set the uniswap router address\\r\\n    /// create uniswap v2 pair address, exclude the deployer, token address,\\r\\n    /// burn wallet and fee wallet from fees. Mint the supply to owner.\\r\\n      constructor() ERC20(\\\"Ares Baby\\\", \\\"$ARES\\\"){\\r\\n\\r\\n\\r\\n        buyFees.marketing = 2;\\r\\n        buyFees.lottery = 2;\\r\\n        buyFees.highBuyReward = 1;\\r\\n\\r\\n        sellFees.marketing = 2;\\r\\n        sellFees.lottery = 2;\\r\\n        sellFees.highBuyReward = 1;\\r\\n\\r\\n        totalBuyFees = 5;\\r\\n        totalSellFees = 5;\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D //uniswap v2 router Mainnet and goerli\\r\\n        );\\r\\n\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n        isLiquidityPair[uniswapV2Pair] = true;    \\r\\n        \\r\\n        isExcludedFromFees[msg.sender] = true;\\r\\n        isExcludedFromFees[address(this)] = true;\\r\\n        isExcludedFromFees[lotteryWallet] = true;\\r\\n        isExcludedFromFees[marketingWallet]=true;\\r\\n        isExcludedFromFees[DEAD] = true;\\r\\n\\r\\n        wrapperContract = address(msg.sender);\\r\\n        _mint(owner(), maxSupply);\\r\\n      }\\r\\n    \\r\\n    /// @notice receive external ether\\r\\n    receive () external payable {}  \\r\\n\\r\\n    ///@notice returns token decimals\\r\\n    function decimals () public pure override returns (uint8) {\\r\\n        return 9;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    \\r\\n    ///@dev update fee wallet \\r\\n    ///@param _newLotteryFeeWallet: new dev wallet address \\r\\n    ///@param _newMarketingFeeWallet: new marketing wallet address \\r\\n    ///Requirements -\\r\\n    /// _newLotteryFeeWallet address should not be zero address.\\r\\n    function updateFeeWallets (address _newLotteryFeeWallet, address _newMarketingFeeWallet) external  onlyOwner {\\r\\n        if(_newLotteryFeeWallet == address(0) || _newMarketingFeeWallet == address(0)){\\r\\n            revert ZeroAddressNotAllowed();\\r\\n        }\\r\\n        lotteryWallet = _newLotteryFeeWallet;\\r\\n        marketingWallet = _newMarketingFeeWallet;\\r\\n        emit FeeWalletUpdated(lotteryWallet, marketingWallet);\\r\\n    }\\r\\n    \\r\\n    ///@dev update fees for buy \\r\\n    ///@param lottery: new lottery fees\\r\\n    ///@param marketing: new marketing fees\\r\\n    ///@param highBuyReward: new high buy reward fees\\r\\n    ///Requirements-\\r\\n    /// sum of buy and sell should be less than equal to MAX_FEE \\r\\n    function updateBuyFees (uint16 lottery, uint16 marketing, uint16 highBuyReward) external onlyOwner {\\r\\n        if(lottery + marketing + highBuyReward > MAX_FEE_LIMIT){\\r\\n            revert MaxFeeLimitExceeded();\\r\\n        }\\r\\n       buyFees.lottery = lottery;\\r\\n       buyFees.marketing = marketing;\\r\\n       buyFees.highBuyReward = highBuyReward;\\r\\n       totalBuyFees = buyFees.lottery + buyFees.marketing + buyFees.highBuyReward;\\r\\n        emit BuyFeesUpdated(lottery, marketing, highBuyReward);\\r\\n    }\\r\\n\\r\\n    ///@dev update fees for sell\\r\\n    ///@param lottery: new lottery fees\\r\\n    ///@param marketing: new marketing fees\\r\\n    ///@param highBuyReward: new high buy reward fees\\r\\n    ///Requirements-\\r\\n    /// sum of buy and sell should be less than equal to MAX_FEE \\r\\n    function updateSellFees (uint16 lottery, uint16 marketing, uint16 highBuyReward) external onlyOwner {\\r\\n        if(lottery + marketing + highBuyReward > MAX_FEE_LIMIT){\\r\\n            revert MaxFeeLimitExceeded();\\r\\n        }\\r\\n       sellFees.lottery = lottery;\\r\\n       sellFees.marketing = marketing;\\r\\n       sellFees.highBuyReward = highBuyReward;\\r\\n       totalSellFees = lottery + marketing + highBuyReward;\\r\\n        emit SellFeesUpdated(lottery, marketing, highBuyReward);\\r\\n    }\\r\\n    \\r\\n    ///@dev exclude or include in fee mapping\\r\\n    ///@param user: user to exclude or include in fee\\r\\n    ///Requirements - \\r\\n    /// owner must enter correct bool value\\r\\n    function excludeFromFees (address user, bool isExcluded) external onlyOwner {\\r\\n        if(isExcludedFromFees[user] == isExcluded){\\r\\n            revert UpdateBoolValue();\\r\\n        }\\r\\n        isExcludedFromFees[user] = isExcluded;\\r\\n        emit ExcludedFromFees(user, isExcluded);\\r\\n    }\\r\\n    \\r\\n    ///@dev add or remove new pairs\\r\\n    ///@param newPair; new pair address\\r\\n    ///@param value: boolean value true true for adding, false for removing\\r\\n    ///Requirements -\\r\\n    ///Can't modify uniswapV2Pair (main pair)\\r\\n    function manageLiquidityPairs (address newPair, bool value) external onlyOwner{\\r\\n        if(newPair == uniswapV2Pair){\\r\\n            revert CanNotModifyMainPair();\\r\\n        }\\r\\n        isLiquidityPair[newPair] = value;\\r\\n        emit NewLPUpdated(newPair, value);\\r\\n    }\\r\\n    \\r\\n\\r\\n    ///@dev update the swap token amount\\r\\n    ///@param _newSwapAmount: new token amount to swap threshold\\r\\n    ///Requirements--\\r\\n    /// amount must greator than equal to MIN_SWAP_AT_AMOUNT\\r\\n    function updateSwapTokensAtAmount (uint256 _newSwapAmount) external onlyOwner {\\r\\n        if(_newSwapAmount < MIN_SWAP_AT_AMOUNT && _newSwapAmount > maxSupply / 100){\\r\\n            revert AmountNotInLimits();\\r\\n        }\\r\\n       \\r\\n        swapTokensAtAmount = _newSwapAmount;\\r\\n        emit SwapTokensAmountUpdated(_newSwapAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice remove limits globally\\r\\n    /// @dev owner can remove the limits globally,\\r\\n    /// once called it can never be restored\\r\\n    function removeLimits() external onlyOwner {\\r\\n        if(!limitEnabled){\\r\\n            revert LimitsAlreadyDisabled();\\r\\n        }\\r\\n        limitEnabled = false;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice owner can claim other than native token\\r\\n    /// @param token: token to rescue\\r\\n    function claimStuckedTokens (address token) external onlyOwner {\\r\\n        if(token == address(this)){\\r\\n            revert CannotClaimNativeToken();\\r\\n        }\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        IERC20(token).transfer(lotteryWallet, balance);\\r\\n    }\\r\\n\\r\\n    /// @dev claim stucked ether\\r\\n    /// @param wallet: to which eth is being sent\\r\\n    function claimEther(address wallet) external onlyOwner {\\r\\n        (bool sent,) = wallet.call{value: address(this).balance}(\\\"\\\");\\r\\n        require (sent, \\\"eth transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function updateWrapper (address _wrapper) external onlyOwner {\\r\\n        if(_wrapper == address(0)){\\r\\n            revert ZeroAddressNotAllowed();\\r\\n        }\\r\\n        isExcludedFromFees[_wrapper] = true;\\r\\n        wrapperContract = _wrapper;\\r\\n    }\\r\\n    \\r\\n\\r\\n    ///@notice transfer function to manage token transfer/fees/limits\\r\\n    ///@param from: token sender\\r\\n    ///@param to: token receiver\\r\\n    ///@param amount: amount to transfer\\r\\n    ///@dev Moves a `value` amount of tokens from `from` to `to`\\r\\n    /// there is fees on buy and sell transfer (based on liquidityPairAddress)\\r\\n    /// Requirements -- \\r\\n    /// from and to address should not be zero address\\r\\n    /// amount must be greator than 0\\r\\n    /// trading should be enabled (owner and excluded address are exception)\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        \\r\\n        \\r\\n            \\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n\\r\\n        if (\\r\\n            swapEnabled && //if this is true\\r\\n            !swapping && //if this is false\\r\\n            !isLiquidityPair[from] && //if this is false\\r\\n            !isExcludedFromFees[from] && //if this is false\\r\\n            !isExcludedFromFees[to] && //if this false\\r\\n            contractBalance >=swapTokensAtAmount //if this is true\\r\\n        ) {\\r\\n             if(contractBalance > MAX_SWAP_AMOUNT){\\r\\n                contractBalance = MAX_SWAP_AMOUNT;\\r\\n               }\\r\\n            \\r\\n            swapping = true;\\r\\n            swapAndliquify(contractBalance);\\r\\n            swapping = false;\\r\\n        }\\r\\n        \\r\\n        if( !swapping && //if this is false\\r\\n            !isLiquidityPair[from] && //if this is false\\r\\n            !isExcludedFromFees[from] && //if this is false\\r\\n            !isExcludedFromFees[to] &&block.timestamp > lastBurnTimestamp + 1 hours){\\r\\n          uint256 lpBalance = balanceOf(uniswapV2Pair);\\r\\n          uint256 amountToBurn = (lpBalance * 25) / 10000; //0.25% every hour\\r\\n          lastBurnTimestamp = block.timestamp;\\r\\n          super._transfer(uniswapV2Pair, DEAD, amountToBurn);\\r\\n          IUniswapV2Pair(uniswapV2Pair).sync();            \\r\\n\\r\\n        }\\r\\n\\r\\n        bool takeFee = !swapping;\\r\\n        \\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (isExcludedFromFees[from] || isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n         /// check unlocked amount for user, if it's not a buy transaction \\r\\n            if(!isLiquidityPair[from]){\\r\\n               uint256 tAmount = lockedAmount[from];\\r\\n               (uint256 unlockedAmount, uint256 difference) = getUnlockedAmount(from);\\r\\n               uint256 claimedAmount = movedUnlockedAmount[from];\\r\\n               require (unlockedAmount > 0, \\\"No unlocked Tokens Yet\\\");  \\r\\n              \\r\\n              if(unlockedAmount > difference){\\r\\n                  if(unlockedAmount <= tAmount + difference && amount > unlockedAmount - difference){\\r\\n                   require (amount <= unlockedAmount, \\\"try to transfer less amount, 10% unlock per day\\\");\\r\\n                   movedUnlockedAmount[from] = claimedAmount + amount - difference;\\r\\n                  } else {\\r\\n                      movedUnlockedAmount[from] = claimedAmount + amount;\\r\\n                  }\\r\\n              }\\r\\n           \\r\\n               if(unlockedAmount > tAmount && tAmount > 0){\\r\\n                    lockedAmount[from] = 0;\\r\\n                    movedUnlockedAmount[from] = 0;\\r\\n                  }\\r\\n               }\\r\\n       \\r\\n        uint256 fees = 0;\\r\\n        // only take fees on buys/sells, do not take on wallet transfers\\r\\n        if (takeFee) {\\r\\n            \\r\\n            // if limits enabled, check maxWalletAmount limit\\r\\n            if(limitEnabled){\\r\\n                if(!isLiquidityPair[to]){\\r\\n                    require (balanceOf(to) + amount < maxWalletAmount, \\\"maxWalletLimit exceeds\\\");                }\\r\\n            }\\r\\n               \\r\\n              uint256 currentEth = 0;\\r\\n             \\r\\n            //on sell\\r\\n            \\r\\n            if ( isLiquidityPair[to] && totalSellFees > 0) {\\r\\n                fees = (amount * totalSellFees) / 100;\\r\\n                \\r\\n                \\r\\n            }\\r\\n            \\r\\n            // on buy\\r\\n            else if (isLiquidityPair[from] && totalBuyFees > 0) {\\r\\n                fees = (amount * totalBuyFees) / 100;\\r\\n                lastBuyTimestamp[to] = block.timestamp;\\r\\n\\r\\n                uint256 lockedAmountUser = lockedAmount[to];\\r\\n                lockedAmount[to] = lockedAmountUser + (amount - fees);\\r\\n                \\r\\n\\r\\n\\r\\n                uint256 userPrevBuy = userBuyAmount[to];\\r\\n                currentEth =  getEthForAmount(amount);\\r\\n                uint256 totalEthSpentByUser = userPrevBuy + currentEth;\\r\\n                userBuyAmount[to] = totalEthSpentByUser;\\r\\n                if(totalEthSpentByUser > highestBuyAmount){\\r\\n                    highestBuyAmount = totalEthSpentByUser;\\r\\n                    if(highestEthSpender != to){\\r\\n                    highestEthSpender = to;\\r\\n                    winners.push(to);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n           \\r\\n            if (fees > 0) {\\r\\n                super._transfer(from, address(this), fees);\\r\\n            }\\r\\n            amount -= fees;\\r\\n        }\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice transfer tokens with lock\\r\\n    /// @dev owner can send tokens to users with lockup \\r\\n    /// 10% amount is unlocked instantly, rest unlocked 10% per day\\r\\n    function transferWithLock(address to, uint256 amount) external  {\\r\\n        if(msg.sender != wrapperContract){\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n        uint256 lockedAmountUser = lockedAmount[to];\\r\\n        lockedAmount[to] = lockedAmountUser + amount;\\r\\n        lastBuyTimestamp[to] = block.timestamp;\\r\\n        super._transfer(msg.sender, to, amount);\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @dev swap the input tokens to ether and send to designated wallets\\r\\n    function swapAndliquify(uint256 amount) private {\\r\\n        bool success;\\r\\n        uint256 totalFees = totalBuyFees + totalSellFees;\\r\\n        uint256 totalLotteryFees = buyFees.lottery + sellFees.lottery;\\r\\n        uint256 totalRewardFees = buyFees.highBuyReward + sellFees.highBuyReward;\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        swapTokensForEth(amount);\\r\\n        uint256 newBalance = address(this).balance - ethBalance;\\r\\n        uint256 lotteryShare = (totalLotteryFees * newBalance) / totalFees;\\r\\n        uint256 userRewardShare = (totalRewardFees * newBalance)  / totalFees;\\r\\n        (success,) = payable(lotteryWallet).call{value: lotteryShare}(\\\"\\\");\\r\\n        (success,) = payable(highestEthSpender).call{value: userRewardShare}(\\\"\\\");\\r\\n        (success,) = marketingWallet.call{value: address(this).balance}(\\\"\\\");\\r\\n        totalEthDistributed = totalEthDistributed + userRewardShare;\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n\\r\\n    ///@notice private function to swap tax to eth\\r\\n    ///@param tokenAmount: token amount to swap for eth\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        if(allowance(address(this), address(uniswapV2Router)) < tokenAmount){\\r\\n          _approve(address(this), address(uniswapV2Router), type(uint256).max);\\r\\n        }\\r\\n       \\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice returns eth amount\\r\\n    /// @param tokenAmount: tokens bought by the user\\r\\n    /// eth - eth spent by the user\\r\\n    function getEthForAmount(uint256 tokenAmount) private view returns (uint256 eth){\\r\\n                address tokenA = uniswapV2Router.WETH();\\r\\n                (uint reserve0, uint reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\\r\\n                address token0 = IUniswapV2Pair(uniswapV2Pair).token0();\\r\\n                (uint reserveA, uint reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n                uint256 ethReserve = reserveA;\\r\\n                uint256 tokenReserve = reserveB;\\r\\n                if(ethReserve > 0 && tokenReserve > 0){\\r\\n                 eth = uniswapV2Router.getAmountIn(tokenAmount, ethReserve, tokenReserve);\\r\\n                \\r\\n                }\\r\\n             \\r\\n    }\\r\\n\\r\\n    ///@return  totalAmount and difference for user that's unlocked\\r\\n    function getUnlockedAmount(address user) public view returns (uint256 totalAmount, uint256 difference){\\r\\n        uint256 tAmount = lockedAmount[user];\\r\\n        \\r\\n                uint256 claimedAmount = movedUnlockedAmount[user];\\r\\n                uint256 userBalance = balanceOf(user);\\r\\n                  \\r\\n      \\r\\n      \\r\\n        if(!isLiquidityPair[user]){\\r\\n         \\r\\n           uint256 unlockedPerDay = (tAmount * 10) / 100; //10 percent instant then 10% per day afterwards\\r\\n           uint256 daysElapsed = (block.timestamp - lastBuyTimestamp[user] ) / 1 days;\\r\\n           uint256 unlockedAmount = (daysElapsed * unlockedPerDay) + unlockedPerDay;\\r\\n           if(unlockedAmount >= claimedAmount){\\r\\n            unlockedAmount = unlockedAmount - claimedAmount;\\r\\n           }\\r\\n           if  (unlockedAmount < claimedAmount){\\r\\n            unlockedAmount = unlockedAmount + claimedAmount - claimedAmount;\\r\\n           }\\r\\n           \\r\\n           if(userBalance >= tAmount){\\r\\n            difference = userBalance + claimedAmount - tAmount;\\r\\n           }\\r\\n           if(userBalance < tAmount){\\r\\n           \\r\\n                difference = userBalance - (tAmount - claimedAmount);\\r\\n           \\r\\n           }\\r\\n           \\r\\n\\r\\n          if(unlockedAmount < tAmount){ \\r\\n           totalAmount = unlockedAmount + difference;\\r\\n           return (totalAmount, difference);\\r\\n          }\\r\\n          if(unlockedAmount >= tAmount){\\r\\n            totalAmount = balanceOf(user);  \\r\\n            return (totalAmount, difference);\\r\\n          }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @return Last six winners in ascending orders with eth amounts\\r\\n    function getLastSixWinners() public view returns (address[6] memory, uint256[6] memory) {\\r\\n       uint256 length = winners.length;\\r\\n\\r\\n       address[6] memory lastSixAddresses;\\r\\n       uint256[6] memory lastSixEthSpent;\\r\\n\\r\\n       uint256 startIndex = (length > 6) ? length - 6 : 0;\\r\\n       uint256 count = 0; // Initialize count to track unique addresses\\r\\n\\r\\n       for (int256 i = int256(length) - 1; i >= int256(startIndex) && count < 6; i--) {\\r\\n          address winnerAddress = winners[uint256(i)];\\r\\n\\r\\n            bool isUnique = true;\\r\\n            for (uint256 j = uint256(i) + 1; j < length; j++) {\\r\\n                if (winners[j] == winnerAddress) {\\r\\n                   isUnique = false;\\r\\n                   break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n              if (isUnique) {\\r\\n                 lastSixAddresses[count] = winnerAddress;\\r\\n                 lastSixEthSpent[count] = userBuyAmount[winnerAddress]; // Retrieve ethSpent from mapping\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n      // Fill remaining slots with empty addresses (0)\\r\\n      for (uint256 i = count; i < 6; i++) {\\r\\n          lastSixAddresses[i] = address(0);\\r\\n        }\\r\\n\\r\\n      return (lastSixAddresses, lastSixEthSpent);\\r\\n   }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountNotInLimits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotModifyMainPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LimitsAlreadyDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxFeeLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateBoolValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lotteryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"marketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"highBuyRewardFee\",\"type\":\"uint16\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"NewLPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lotteryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"marketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"highBuyRewardFee\",\"type\":\"uint16\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SwapTokensAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_LIMIT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lottery\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"highBuyReward\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"claimEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimStuckedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastSixWinners\",\"outputs\":[{\"internalType\":\"address[6]\",\"name\":\"\",\"type\":\"address[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnlockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestEthSpender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"manageLiquidityPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lottery\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"highBuyReward\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lottery\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"highBuyReward\",\"type\":\"uint16\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLotteryFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newMarketingFeeWallet\",\"type\":\"address\"}],\"name\":\"updateFeeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lottery\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"highBuyReward\",\"type\":\"uint16\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"updateWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Ares", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}