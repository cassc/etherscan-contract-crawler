{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/subStrategies/ETHStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IAavePool.sol\\\";\\nimport \\\"./interfaces/IAave.sol\\\";\\nimport \\\"./interfaces/IETHLeverage.sol\\\";\\nimport \\\"./interfaces/IFlashloanReceiver.sol\\\";\\nimport \\\"./interfaces/IWeth.sol\\\";\\nimport \\\"./interfaces/IExchange.sol\\\";\\nimport \\\"../interfaces/ISubStrategy.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\n\\nimport \\\"../utils/TransferHelper.sol\\\";\\n\\ncontract ETHStrategy is Ownable, ISubStrategy, IETHLeverage {\\n\\n    // Sub Strategy name\\n    string public constant poolName = \\\"ETHStrategy V0.9\\\";\\n\\n    // Controller address\\n    address public controller;\\n\\n    // Vault address\\n    address public vault;\\n\\n    // Constant magnifier\\n    uint256 public constant magnifier = 10000;\\n\\n    // Harvest Gap\\n    uint256 public override harvestGap;\\n\\n    // Latest Harvest\\n    uint256 public override latestHarvest;\\n\\n    // Exchange Address\\n    address public exchange;\\n\\n    // Flashloan receiver\\n    address public receiver;\\n\\n    // Fee collector\\n    address public feePool;\\n\\n    // WETH Address\\n    address public weth;\\n\\n    // STETH Address\\n    address public stETH;\\n\\n    // ASTETH Address\\n    address public astETH;\\n\\n    // aave address\\n    address public IaavePool;\\n\\n    // Slippages for deposit and withdraw\\n    uint256 public depositSlippage;\\n    uint256 public withdrawSlippage;\\n    uint256 public swapSlippage = 100;\\n\\n    uint256 public feeRate = 1000;\\n\\n    // Max Deposit\\n    uint256 public override maxDeposit;\\n\\n    // Last Earn Total\\n    uint256 public lastTotal;\\n\\n    // Max Loan Ratio\\n    uint256 public mlr;\\n\\n    enum SrategyState {\\n        Normal,\\n        Deposit,\\n        Withdraw\\n        //EmergencyWithdraw\\n    }\\n\\n    event SetController(address controller);\\n\\n    event SetVault(address vault);\\n\\n    event SetExchange(address exchange);\\n\\n    event SetFeePool(address feePool);\\n\\n    event SetDepositSlippage(uint256 depositSlippage);\\n\\n    event SetWithdrawSlippage(uint256 withdrawSlippage);\\n\\n    event SetSwapSlippage(uint256 swapSlippage);\\n\\n    event SetHarvestGap(uint256 harvestGap);\\n\\n    event SetMaxDeposit(uint256 maxDeposit);\\n\\n    event SetFlashloanReceiver(address receiver);\\n\\n    event SetMLR(uint256 oldMlr, uint256 newMlr);\\n\\n    event SetFeeRate(uint256 oldRate, uint256 newRate);\\n\\n    event LTVUpdate(\\n        uint256 oldDebt,\\n        uint256 oldCollateral,\\n        uint256 newDebt,\\n        uint256 newCollateral\\n    );\\n\\n    constructor(\\n        address _weth,\\n        address _stETH,\\n        address _astETH,\\n        uint256 _mlr,\\n        address _IaavePool,\\n        address _vault,\\n        address _feePool\\n    ) {\\n        mlr = _mlr;\\n        weth = _weth;\\n        stETH = _stETH;\\n        astETH = _astETH;\\n        IaavePool = _IaavePool;\\n\\n        vault = _vault;\\n        feePool = _feePool;\\n\\n\\n        // Set Max Deposit as max uin256\\n        maxDeposit = type(uint256).max;\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n        Only controller can call\\n     */\\n    modifier onlyController() {\\n        require(controller == _msgSender(), \\\"NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n        Only Flashloan receiver can call\\n     */\\n    modifier onlyReceiver() {\\n        require(receiver == _msgSender(), \\\"NOT_FLASHLOAN_RECEIVER\\\");\\n        _;\\n    }\\n    modifier collectFee(){\\n        (,uint256 mintAmount) = _calculateFee();\\n        if(mintAmount>0){\\n            IVault(vault).mint(mintAmount, feePool);\\n        }\\n        _;\\n        lastTotal = _realTotalAssets();\\n    }\\n    //////////////////////////////////////////\\n    //           Flash loan Fallback        //\\n    //////////////////////////////////////////\\n\\n    /**\\n        External Function for Callback when to flash loan\\n     */\\n    function loanFallback(\\n        uint256 loanAmt,\\n        uint256 feeAmt,\\n        bytes calldata userData\\n    ) external override onlyReceiver {\\n        SrategyState curState = abi.decode(userData,(SrategyState));\\n        require(curState != SrategyState.Normal, \\\"NORMAL_STATE_CANT_CALL_THIS\\\");\\n        require(\\n            IERC20(weth).balanceOf(address(this)) >= loanAmt,\\n            \\\"INSUFFICIENT_TRANSFERED\\\"\\n        );\\n        address aave = IAavePool(IaavePool).aave();\\n        if (curState == SrategyState.Deposit) {\\n            // Withdraw ETH from WETH\\n            IWeth(weth).withdraw(loanAmt);\\n            uint256 ethBal = address(this).balance;\\n            // Transfer ETH to Exchange\\n            TransferHelper.safeTransferETH(exchange, ethBal);\\n            // Swap ETH to STETH\\n            uint256 minOut = IAavePool(IaavePool).convertEthTo(ethBal*(magnifier-swapSlippage)/magnifier,stETH,1e18);\\n            IExchange(exchange).swapStETH(stETH,ethBal,minOut);\\n    \\n            // Deposit STETH to AAVE\\n            uint256 stETHBal = IERC20(stETH).balanceOf(address(this));\\n            IERC20(stETH).approve(aave, 0);\\n            IERC20(stETH).approve(aave, stETHBal);\\n\\n            IAave(aave).deposit(stETH, stETHBal, address(this), 0);\\n            if (IAavePool(IaavePool).getCollateral(address(this)) == 0) {\\n                IAave(aave).setUserUseReserveAsCollateral(stETH, true);\\n            }\\n            // Repay flash loan\\n            uint256 repay = loanAmt + feeAmt;\\n            IAave(aave).borrow(weth, repay, 2, 0, address(this));\\n\\n            TransferHelper.safeTransfer(weth, receiver, repay);\\n        } else if (curState == SrategyState.Withdraw) {\\n            // Withdraw ETH from WETH\\n            uint256 stETHAmt = (loanAmt *\\n                IERC20(astETH).balanceOf(address(this))) / IAavePool(IaavePool).getDebt(address(this));\\n            // Approve WETH to AAVE\\n            IERC20(weth).approve(aave, 0);\\n            IERC20(weth).approve(aave, loanAmt);\\n\\n            // Repay WETH to aave\\n            IAave(aave).repay(weth, loanAmt, 2, address(this));\\n            IAave(aave).withdraw(stETH, stETHAmt, address(this));\\n\\n            // Swap STETH to ETH\\n            TransferHelper.safeTransfer(stETH, exchange, stETHAmt);\\n            uint256 minOut = IAavePool(IaavePool).convertToEth(stETHAmt*(magnifier-swapSlippage)/magnifier,stETH,1e18);\\n            IExchange(exchange).swapETH(stETH,stETHAmt,minOut);\\n            // Deposit WETH\\n            TransferHelper.safeTransferETH(weth, (loanAmt + feeAmt));\\n            // Repay Weth to receiver\\n            TransferHelper.safeTransfer(weth, receiver, loanAmt + feeAmt);\\n        } /*else if (curState == SrategyState.EmergencyWithdraw) {\\n            // Withdraw ETH from WETH\\n            uint256 stETHAmt = (loanAmt *\\n                IERC20(astETH).balanceOf(address(this))) / IAavePool(IaavePool).getDebt(address(this));\\n\\n            // Approve WETH to AAVE\\n            IERC20(weth).approve(aave, 0);\\n            IERC20(weth).approve(aave, loanAmt);\\n\\n            // Repay WETH to aave\\n            IAave(aave).repay(weth, loanAmt, 2, address(this));\\n            IAave(aave).withdraw(stETH, stETHAmt, address(this));\\n\\n            // Swap STETH to repay flashloan\\n            IERC20(stETH).approve(exchange, 0);\\n            IERC20(stETH).approve(exchange, stETHAmt);\\n\\n            uint256 flashAll = loanAmt + feeAmt;\\n            IExchange(exchange).swapExactETH(stETHAmt, flashAll);\\n            // Deposit WETH\\n            TransferHelper.safeTransferETH(weth, flashAll);\\n            // Repay Weth to receiver\\n            TransferHelper.safeTransfer(weth, receiver, flashAll);\\n        }*/ else {\\n            revert(\\\"NOT_A_SS_STATE\\\");\\n        }\\n    }\\n\\n    //////////////////////////////////////////\\n    //          VIEW FUNCTIONS              //\\n    //////////////////////////////////////////\\n\\n    /**\\n        External view function of total USDC deposited in Covex Booster\\n     */\\n    function totalAssets() external view override returns (uint256) {\\n        return _totalAssets();\\n    }\\n\\n    /**\\n        Internal view function of total USDC deposited\\n    */\\n    function _totalAssets() internal view returns (uint256) {\\n        (uint256 fee,) = _calculateFee();\\n        return _realTotalAssets() - fee;\\n    }\\n    function _realTotalAssets()internal view returns (uint256) {\\n        (uint256 st,uint256 e) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n        return st-e;\\n    }\\n    /**\\n        Deposit function of USDC\\n     */\\n    function deposit(\\n        uint256 _amount\\n    ) external override onlyController collectFee returns (uint256) {\\n        uint256 deposited = _deposit(_amount);\\n        return deposited;\\n    }\\n\\n    /**\\n        Deposit internal function\\n     */\\n    function _deposit(uint256 _amount) internal returns (uint256) {\\n        // Get Prev Deposit Amt\\n        uint256 prevAmt = _totalAssets();\\n\\n        // Check Max Deposit\\n        require(prevAmt + _amount <= maxDeposit, \\\"EXCEED_MAX_DEPOSIT\\\");\\n\\n        uint256 ethAmt = address(this).balance;\\n        require(ethAmt >= _amount, \\\"INSUFFICIENT_ETH_TRANSFER\\\");\\n\\n        // Calculate Flashloan Fee - in terms of 1e4\\n        uint256 fee = IFlashloanReceiver(receiver).getFee();\\n        uint256 feeParam = fee + magnifier;\\n        uint256 loanAmt = (_amount * mlr) / (feeParam - mlr);\\n        // uint256 feeAmt = (loanAmt * fee) / magnifier;\\n\\n        // Execute flash loan\\n        IFlashloanReceiver(receiver).flashLoan(weth, loanAmt,abi.encode(SrategyState.Deposit));\\n\\n        // Get new total assets amount\\n        uint256 newAmt = _totalAssets();\\n\\n        // Deposited amt\\n        uint256 deposited = newAmt - prevAmt;\\n        uint256 minOutput = (_amount * (magnifier - depositSlippage)) /\\n            magnifier;\\n        require(deposited >= minOutput, \\\"DEPOSIT_SLIPPAGE_TOO_BIG\\\");\\n        return deposited;\\n    }\\n\\n    /**\\n        Withdraw function of USDC\\n     */\\n    function withdraw(\\n        uint256 _amount\\n    ) external override onlyController collectFee returns (uint256) {\\n\\n        // Get Prev Deposit Amt\\n        uint256 prevAmt = _totalAssets();\\n        require(_amount <= prevAmt, \\\"INSUFFICIENT_ASSET\\\");\\n\\n        uint256 loanAmt = (IAavePool(IaavePool).getDebt(address(this)) * _amount) / prevAmt;\\n        IFlashloanReceiver(receiver).flashLoan(weth, loanAmt,abi.encode(SrategyState.Withdraw));\\n\\n        uint256 toSend = address(this).balance;\\n        TransferHelper.safeTransferETH(controller, toSend);\\n\\n        return toSend;\\n    }\\n\\n    /**\\n        Harvest reward token from convex booster\\n     */\\n    function harvest() external onlyOwner collectFee {\\n    }\\n    function _calculateFee()internal view returns (uint256,uint256) {\\n        uint256 currentAssets = _realTotalAssets();\\n        if(lastTotal>=currentAssets){\\n            return (0,0);\\n        }else{\\n            uint256 totalEF = IERC20(vault).totalSupply();\\n            if (totalEF == 0){\\n                return (0,0);\\n            }\\n            //uint256 feePoolBal = IERC20(vault).balanceOf(feePool);\\n            \\n            uint256 stFee = (currentAssets-lastTotal) *feeRate /magnifier;\\n            //stFee = stFee - ((stFee * feePoolBal) / (totalEF));\\n            uint256 mintAmt = (stFee * totalEF) / (currentAssets - stFee);\\n            if (mintAmt == 0){\\n                return (0,0);\\n            }\\n            return (stFee,mintAmt);\\n        }\\n    }\\n\\n\\n    /**\\n        Raise LTV\\n     */\\n    function raiseLTV(uint256 lt) public onlyOwner {\\n        (uint256 st,uint256 e) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n\\n        require(e * magnifier < st * mlr, \\\"NO_NEED_TO_RAISE\\\");\\n\\n        address aave = IAavePool(IaavePool).aave();\\n        uint256 x = (st * mlr - (e * magnifier)) / (magnifier - mlr);\\n        uint256 y = (st * lt) / magnifier - e - 1;\\n\\n        if (x > y) {\\n            x = y;\\n        }\\n\\n        IAave(aave).borrow(weth, x, 2, 0, address(this));\\n        uint256 wethAmt = IERC20(weth).balanceOf(address(this));\\n        IWeth(weth).withdraw(wethAmt);\\n\\n        // Transfer ETH to Exchange\\n        TransferHelper.safeTransferETH(exchange, wethAmt);\\n        // Swap ETH to STETH\\n        uint256 minOut = IAavePool(IaavePool).convertEthTo(wethAmt*(magnifier-swapSlippage)/magnifier,stETH,1e18);\\n        IExchange(exchange).swapStETH(stETH,wethAmt,minOut);\\n\\n        // Deposit STETH to AAVE\\n        uint256 stETHBal = IERC20(stETH).balanceOf(address(this));\\n        IERC20(stETH).approve(aave, 0);\\n        IERC20(stETH).approve(aave, stETHBal);\\n\\n        IAave(aave).deposit(stETH, stETHBal, address(this), 0);\\n        (uint256 st1,uint256 e1) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n        emit LTVUpdate(e, st, e1, st1);\\n    }\\n\\n    /**\\n        Reduce LTV\\n     */\\n    function reduceLTV() public onlyOwner {\\n        (uint256 st,uint256 e) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n\\n        require(e * magnifier > st * mlr, \\\"NO_NEED_TO_REDUCE\\\");\\n\\n        address aave = IAavePool(IaavePool).aave();\\n\\n        uint256 x = (e * magnifier - st * mlr) / (magnifier - mlr);\\n\\n        uint256 loanAmt = (x * e) / st;\\n\\n        IFlashloanReceiver(receiver).flashLoan(weth, loanAmt,abi.encode(SrategyState.Withdraw));\\n\\n        uint256 toSend = address(this).balance;\\n        TransferHelper.safeTransferETH(weth, toSend);\\n\\n        uint256 wethBal = IERC20(weth).balanceOf(address(this));\\n        // Approve WETH to AAVE\\n        IERC20(weth).approve(aave, 0);\\n        IERC20(weth).approve(aave, wethBal);\\n\\n        // Repay WETH to aave\\n        IAave(aave).repay(weth, wethBal, 2, address(this));\\n    }\\n\\n\\n\\n    /**\\n        Check withdrawable status of required amount\\n     */\\n    function withdrawable(\\n        uint256 _amount\\n    ) external view override returns (uint256) {\\n        // Get Current Deposit Amt\\n        uint256 total = _totalAssets();\\n\\n        // If requested amt is bigger than total asset, return false\\n        if (_amount > total) return total;\\n        // Todo Have to check withdrawable amount\\n        else return _amount;\\n    }\\n\\n\\n    //////////////////////////////////////////////////\\n    //               SET CONFIGURATION              //\\n    //////////////////////////////////////////////////\\n\\n    /**\\n        Set Controller\\n     */\\n    function setController(address _controller) public onlyOwner {\\n        require(_controller != address(0), \\\"INVALID_ADDRESS\\\");\\n        controller = _controller;\\n\\n        emit SetController(controller);\\n    }\\n\\n    /**\\n        Set Vault\\n     */\\n    function setVault(address _vault) public onlyOwner {\\n        require(_vault != address(0), \\\"INVALID_ADDRESS\\\");\\n        vault = _vault;\\n\\n        emit SetVault(vault);\\n    }\\n\\n    /**\\n        Set Fee Pool\\n     */\\n    function setFeePool(address _feePool) public onlyOwner {\\n        require(_feePool != address(0), \\\"INVALID_ADDRESS\\\");\\n        feePool = _feePool;\\n\\n        emit SetFeePool(feePool);\\n    }\\n\\n    /**\\n        Set Deposit Slipage\\n     */\\n    function setDepositSlippage(uint256 _slippage) public onlyOwner {\\n        require(_slippage < magnifier, \\\"INVALID_SLIPPAGE\\\");\\n\\n        depositSlippage = _slippage;\\n\\n        emit SetDepositSlippage(depositSlippage);\\n    }\\n\\n    /**\\n        Set Withdraw Slipage\\n     */\\n    function setWithdrawSlippage(uint256 _slippage) public onlyOwner {\\n        require(_slippage < magnifier, \\\"INVALID_SLIPPAGE\\\");\\n\\n        withdrawSlippage = _slippage;\\n\\n        emit SetWithdrawSlippage(withdrawSlippage);\\n    }\\n\\n    /**\\n        Set swap Slipage\\n     */\\n    function setSwapSlippage(uint256 _slippage) public onlyOwner {\\n        require(_slippage < magnifier, \\\"INVALID_SLIPPAGE\\\");\\n\\n        swapSlippage = _slippage;\\n\\n        emit SetSwapSlippage(swapSlippage);\\n    }\\n\\n    /**\\n        Set Harvest Gap\\n     */\\n    function setHarvestGap(uint256 _harvestGap) public onlyOwner {\\n        require(_harvestGap > 0, \\\"INVALID_HARVEST_GAP\\\");\\n        harvestGap = _harvestGap;\\n\\n        emit SetHarvestGap(harvestGap);\\n    }\\n\\n    /**\\n        Set Max Deposit\\n     */\\n    function setMaxDeposit(uint256 _maxDeposit) public onlyOwner {\\n        require(_maxDeposit > 0, \\\"INVALID_MAX_DEPOSIT\\\");\\n        maxDeposit = _maxDeposit;\\n\\n        emit SetMaxDeposit(maxDeposit);\\n    }\\n\\n    /**\\n        Set Flashloan Receiver\\n     */\\n    function setFlashLoanReceiver(address _receiver) public onlyOwner {\\n        require(_receiver != address(0), \\\"INVALID_RECEIVER_ADDRESS\\\");\\n        receiver = _receiver;\\n\\n        emit SetFlashloanReceiver(receiver);\\n    }\\n\\n    /**\\n        Set Exchange\\n     */\\n    function setExchange(address _exchange) public onlyOwner {\\n        require(_exchange != address(0), \\\"INVALID_ADDRESS\\\");\\n        exchange = _exchange;\\n\\n        emit SetExchange(exchange);\\n    }\\n\\n    /**\\n        Set Fee Rate\\n     */\\n    function setFeeRate(uint256 _rate) public onlyOwner {\\n        require(_rate > 0, \\\"INVALID_RATE\\\");\\n\\n        uint256 oldRate = feeRate;\\n        feeRate = _rate;\\n\\n        emit SetFeeRate(oldRate, feeRate);\\n    }\\n\\n    /**\\n        Set MLR\\n     */\\n    function setMLR(uint256 _mlr) public onlyOwner {\\n        require(_mlr > 0 && _mlr < magnifier, \\\"INVALID_RATE\\\");\\n\\n        uint256 oldMlr = mlr;\\n        mlr = _mlr;\\n\\n        emit SetMLR(oldMlr, _mlr);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    /**\\n        Transfer Util for both Ether and ERC20\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (address(token) == address(0)) {\\n            safeTransferETH(to, value);\\n        } else {\\n            safeTransferToken(address(token), to, value);\\n        }\\n    }\\n\\n    function safeTransferToken(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IWeth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWeth {\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IFlashloanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFlashloanReceiver {\\n    function getFee() external view returns (uint256 fee);\\n\\n    function flashLoan(address token, uint256 amount,bytes calldata userData) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExchange {\\n    function swapStETH(address token,uint256 amount,uint256 minAmount) external;\\n\\n    function swapETH(address token,uint256 amount,uint256 minAmount) external;\\n\\n    //function swapExactETH(uint256 input, uint256 output) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IETHLeverage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IETHLeverage {\\n    function loanFallback(uint256 loanAmt, uint256 feeAmt,bytes calldata userData) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IAavePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\ninterface IAavePool {\\r\\n    function aave() external view returns (address);\\r\\n    function convertEthTo(uint256 _amount,address _token,uint256 _decimals) external view returns (uint256);\\r\\n    function convertToEth(uint256 _amount,address _token,uint256 _decimals) external view returns (uint256);\\r\\n    function getCollateral(address _user) external view returns (uint256);\\r\\n    function getDebt(address _user) external view returns (uint256);\\r\\n    function getCollateralAndDebt(address _user)external view returns (uint256 _collateral, uint256 _debt);\\r\\n    function getCollateralTo(address _user,address _token,uint256 _decimals) external view returns (uint256);\\r\\n\\r\\n    function getDebtTo(address _user,address _token,uint256 _decimals) external view returns (uint256);\\r\\n    function getCollateralAndDebtTo(address _user,address _token,uint256 _decimals)external view returns (uint256 _collateral, uint256 _debt);\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAave {\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    function getUserAccountData(address)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function setUserUseReserveAsCollateral(address _reserse, bool _useAsCollateral) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function deposit(address receiver) external payable returns (uint256 shares);\\n\\n    function mint(uint256 amount, address account) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ISubStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISubStrategy {\\n    function totalAssets() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external returns (uint256);\\n\\n    function withdraw(uint256 _amount) external returns (uint256);\\n\\n    function maxDeposit() external view returns (uint256);\\n\\n    function withdrawable(uint256 _amount) external view returns (uint256);\\n\\n    function latestHarvest() external view returns (uint256);\\n\\n    function harvestGap() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_astETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mlr\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_IaavePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateral\",\"type\":\"uint256\"}],\"name\":\"LTVUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositSlippage\",\"type\":\"uint256\"}],\"name\":\"SetDepositSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"SetExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feePool\",\"type\":\"address\"}],\"name\":\"SetFeePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"SetFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SetFlashloanReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestGap\",\"type\":\"uint256\"}],\"name\":\"SetHarvestGap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMlr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMlr\",\"type\":\"uint256\"}],\"name\":\"SetMLR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"}],\"name\":\"SetMaxDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapSlippage\",\"type\":\"uint256\"}],\"name\":\"SetSwapSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"SetVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawSlippage\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IaavePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestGap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"loanFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magnifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mlr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lt\",\"type\":\"uint256\"}],\"name\":\"raiseLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setDepositSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePool\",\"type\":\"address\"}],\"name\":\"setFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setFlashLoanReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestGap\",\"type\":\"uint256\"}],\"name\":\"setHarvestGap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mlr\",\"type\":\"uint256\"}],\"name\":\"setMLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"}],\"name\":\"setMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setWithdrawSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHStrategy", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000b925ed163218f6662a35e0f0371ac234f9e937100000000000000000000000000000000000000000000000000000000000105b8000000000000000000000000185dc556e0f1ce777ec0ebb48bb29776cec03f4a000000000000000000000000adbfc7577856c3dae606ea5a226c569c5e32d6430000000000000000000000007a4f3b287a6733df390c66c9fdf5334a7a5103bd", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}