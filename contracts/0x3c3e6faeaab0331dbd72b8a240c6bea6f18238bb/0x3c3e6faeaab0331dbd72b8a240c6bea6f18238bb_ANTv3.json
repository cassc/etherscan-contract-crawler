{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token.sol\": {\r\n      \"content\": \"/**\\r\\n\\r\\n       \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\r\\n      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588   \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2588\u2588 \\r\\n      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588   \u2580 \\r\\n      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588\\r\\n    \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588     \\r\\n      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588     \\r\\n      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588     \\r\\n      \u2588\u2588\u2588    \u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580     \u2584\u2588\u2588\u2588\u2588\u2580   \\r\\n                                    \\r\\n*/\\r\\n\\r\\npragma solidity ^0.4.17;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    /**\\r\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n      * account.\\r\\n      */\\r\\n    function Ownable() public {\\r\\n        owner = 0x9c188e0682D140659f6d3b62dc5e439294c6FaF8;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev Throws if called by any account other than the owner.\\r\\n      */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    * @param newOwner The address to transfer ownership to.\\r\\n    */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        if (newOwner != address(0)) {\\r\\n            owner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20Basic\\r\\n * @dev Simpler version of ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20Basic {\\r\\n    uint public _totalSupply;\\r\\n    function totalSupply() public constant returns (uint);\\r\\n    function balanceOf(address who) public constant returns (uint);\\r\\n    function transfer(address to, uint value) public;\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is ERC20Basic {\\r\\n    function allowance(address owner, address spender) public constant returns (uint);\\r\\n    function transferFrom(address from, address to, uint value) public;\\r\\n    function approve(address spender, uint value) public;\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Basic token\\r\\n * @dev Basic version of StandardToken, with no allowances.\\r\\n */\\r\\ncontract BasicToken is Ownable, ERC20Basic {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    mapping(address => uint) public balances;\\r\\n\\r\\n    // additional variables for use if transaction fees ever became necessary\\r\\n    uint public basisPointsRate = 0;\\r\\n    uint public maximumFee = 0;\\r\\n\\r\\n    /**\\r\\n    * @dev Fix for the ERC20 short address attack.\\r\\n    */\\r\\n    modifier onlyPayloadSize(uint size) {\\r\\n        require(!(msg.data.length < size + 4));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev transfer token for a specified address\\r\\n    * @param _to The address to transfer to.\\r\\n    * @param _value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\r\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\r\\n        if (fee > maximumFee) {\\r\\n            fee = maximumFee;\\r\\n        }\\r\\n        uint sendAmount = _value.sub(fee);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(sendAmount);\\r\\n        if (fee > 0) {\\r\\n            balances[owner] = balances[owner].add(fee);\\r\\n            Transfer(msg.sender, owner, fee);\\r\\n        }\\r\\n        Transfer(msg.sender, _to, sendAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param _owner The address to query the the balance of.\\r\\n    * @return An uint representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Standard ERC20 token\\r\\n *\\r\\n * @dev Implementation of the basic standard token.\\r\\n * @dev https://github.com/ethereum/EIPs/issues/20\\r\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n */\\r\\ncontract StandardToken is BasicToken, ERC20 {\\r\\n\\r\\n    mapping (address => mapping (address => uint)) public allowed;\\r\\n\\r\\n    uint public constant MAX_UINT = 2**256 - 1;\\r\\n\\r\\n    /**\\r\\n    * @dev Transfer tokens from one address to another\\r\\n    * @param _from address The address which you want to send tokens from\\r\\n    * @param _to address The address which you want to transfer to\\r\\n    * @param _value uint the amount of tokens to be transferred\\r\\n    */\\r\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\r\\n        var _allowance = allowed[_from][msg.sender];\\r\\n\\r\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\r\\n        // if (_value > _allowance) throw;\\r\\n\\r\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\r\\n        if (fee > maximumFee) {\\r\\n            fee = maximumFee;\\r\\n        }\\r\\n        if (_allowance < MAX_UINT) {\\r\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n        }\\r\\n        uint sendAmount = _value.sub(fee);\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(sendAmount);\\r\\n        if (fee > 0) {\\r\\n            balances[owner] = balances[owner].add(fee);\\r\\n            Transfer(_from, owner, fee);\\r\\n        }\\r\\n        Transfer(_from, _to, sendAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n    * @param _spender The address which will spend the funds.\\r\\n    * @param _value The amount of tokens to be spent.\\r\\n    */\\r\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\r\\n\\r\\n        // To change the approve amount you first have to reduce the addresses`\\r\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\r\\n        //  already 0 to mitigate the race condition described here:\\r\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        Approval(msg.sender, _spender, _value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n    * @param _owner address The address which owns the funds.\\r\\n    * @param _spender address The address which will spend the funds.\\r\\n    * @return A uint specifying the amount of tokens still available for the spender.\\r\\n    */\\r\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract UpgradedStandardToken is StandardToken{\\r\\n    // those methods are called by the legacy contract\\r\\n    // and they must ensure msg.sender to be the contract address\\r\\n    function transferByLegacy(address from, address to, uint value) public;\\r\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\r\\n    function approveByLegacy(address from, address spender, uint value) public;\\r\\n}\\r\\n\\r\\ncontract Log {\\r\\n    mapping (address => mapping (address => mapping(uint => uint))) public history;\\r\\n    function record(address _from, address _to, uint _value) public {\\r\\n        history[_from][_to][now] = _value;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ANTv3 Token\\r\\n * @dev The official token for Aragon\\r\\n * ERC-20 with supply controls + add-ons to allow for offchain signing\\r\\n * See EIP-712, EIP-2612, and EIP-3009 for details\\r\\n */\\r\\ncontract ANTv3 is StandardToken {\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint public decimals;\\r\\n    address public upgradedAddress;\\r\\n    bool public deprecated;\\r\\n    Log public log;\\r\\n    \\r\\n    function ANTv3(uint _initialSupply, string _name, string _symbol, uint _decimals, address _log) public {\\r\\n        _totalSupply = _initialSupply;\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n        balances[owner] = _initialSupply;\\r\\n        deprecated = false;\\r\\n        log = Log(_log);\\r\\n    }\\r\\n\\r\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\r\\n    function transfer(address _to, uint _value) public {\\r\\n        log.record(msg.sender, _to, _value);\\r\\n        if (deprecated) {\\r\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\r\\n        } else {\\r\\n            return super.transfer(_to, _value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\r\\n    function transferFrom(address _from, address _to, uint _value) public {\\r\\n        log.record(_from, _to, _value);\\r\\n        if (deprecated) {\\r\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\r\\n        } else {\\r\\n            return super.transferFrom(_from, _to, _value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\r\\n    function balanceOf(address who) public constant returns (uint) {\\r\\n        if (deprecated) {\\r\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\r\\n        } else {\\r\\n            return super.balanceOf(who);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\r\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\r\\n        if (deprecated) {\\r\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\r\\n        } else {\\r\\n            return super.approve(_spender, _value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\r\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\r\\n        if (deprecated) {\\r\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\r\\n        } else {\\r\\n            return super.allowance(_owner, _spender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // deprecate current contract in favour of a new one\\r\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\r\\n        deprecated = true;\\r\\n        upgradedAddress = _upgradedAddress;\\r\\n        Deprecate(_upgradedAddress);\\r\\n    }\\r\\n\\r\\n    // deprecate current contract if favour of a new one\\r\\n    function totalSupply() public constant returns (uint) {\\r\\n        if (deprecated) {\\r\\n            return StandardToken(upgradedAddress).totalSupply();\\r\\n        } else {\\r\\n            return _totalSupply;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this history config is setted by the owner\\r\\n    function setLog(address _log) public onlyOwner {\\r\\n        log = Log(_log);\\r\\n    }\\r\\n    \\r\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\r\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\r\\n        require(newBasisPoints < 20);\\r\\n        require(newMaxFee < 50);\\r\\n\\r\\n        basisPointsRate = newBasisPoints;\\r\\n        maximumFee = newMaxFee.mul(10**decimals);\\r\\n\\r\\n        Params(basisPointsRate, maximumFee);\\r\\n    }\\r\\n\\r\\n    // Called when contract is deprecated\\r\\n    event Deprecate(address newAddress);\\r\\n\\r\\n    // Called if contract ever adds fees\\r\\n    event Params(uint feeBasisPoints, uint maxFee);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": []\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_log\",\"type\":\"address\"}],\"name\":\"setLog\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_log\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "ANTv3", "CompilerVersion": "v0.4.17+commit.bdeb9e52", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000000000000000000000295be96e6406697200000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000699c3a1581795c223d1c81e7a25763310ab4a2e10000000000000000000000000000000000000000000000000000000000000015417261676f6e204f6666696369616c20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000003414f540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://875af8abb831a32d3e6078e50ae1b22badcf0e07c09038ceef6b515a1f6a14a8"}