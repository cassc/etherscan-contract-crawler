{"SourceCode": "/**\r\nhttps://t.me/friendperp_sniperbot\r\nhttps://twitter.com/friendperp\r\nhttps://friendperp.io/\r\nhttps://t.me/FriendPerpbot\r\n\r\n\r\n\r\n\r\n\r\n*/\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IUniswapV2Factory {\r\n function createPair(address tokenA, address tokenB) external returns(address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n function totalSupply() external view returns(uint256);\r\n\r\n function balanceOf(address account) external view returns(uint256);\r\n\r\n function transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n function allowance(address owner, address spender) external view returns(uint256);\r\n\r\n function approve(address spender, uint256 amount) external returns(bool);\r\n\r\n function transferFrom(\r\n address sender,\r\n address recipient,\r\n uint256 amount\r\n ) external returns(bool);\r\n\r\n event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n function name() external view returns(string memory);\r\n\r\n function symbol() external view returns(string memory);\r\n\r\n function decimals() external view returns(uint8);\r\n}\r\n\r\nabstract contract Context {\r\n function _msgSender() internal view virtual returns(address) {\r\n return msg.sender;\r\n }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n using SafeMath for uint256;\r\n\r\n mapping(address => uint256) private _balances;\r\n mapping(address => mapping(address => uint256)) private _allowances;\r\n uint256 private _totalSupply;\r\n\r\n string private _name;\r\n string private _symbol;\r\n\r\n constructor(string memory name_, string memory symbol_) {\r\n _name = name_;\r\n _symbol = symbol_;\r\n }\r\n\r\n function name() public view virtual override returns(string memory) {\r\n return _name;\r\n }\r\n\r\n function symbol() public view virtual override returns(string memory) {\r\n return _symbol;\r\n }\r\n\r\n function decimals() public view virtual override returns(uint8) {\r\n return 9;\r\n }\r\n\r\n function totalSupply() public view virtual override returns(uint256) {\r\n return _totalSupply;\r\n }\r\n\r\n function balanceOf(address account) public view virtual override returns(uint256) {\r\n return _balances[account];\r\n }\r\n\r\n function transfer(address recipient, uint256 amount) public virtual override returns(bool) {\r\n _transfer(_msgSender(), recipient, amount);\r\n return true;\r\n }\r\n\r\n function allowance(address owner, address spender) public view virtual override returns(uint256) {\r\n return _allowances[owner][spender];\r\n }\r\n\r\n function approve(address spender, uint256 amount) public virtual override returns(bool) {\r\n _approve(_msgSender(), spender, amount);\r\n return true;\r\n }\r\n\r\n function transferFrom(\r\n address sender,\r\n address recipient,\r\n uint256 amount\r\n ) public virtual override returns(bool) {\r\n _transfer(sender, recipient, amount);\r\n _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n return true;\r\n }\r\n\r\n function increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n return true;\r\n }\r\n\r\n function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased cannot be below zero\"));\r\n return true;\r\n }\r\n\r\n function _transfer(\r\n address sender,\r\n address recipient,\r\n uint256 amount\r\n ) internal virtual {\r\n\r\n _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n _balances[recipient] = _balances[recipient].add(amount);\r\n emit Transfer(sender, recipient, amount);\r\n }\r\n\r\n function _mint(address account, uint256 amount) internal virtual {\r\n require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n _totalSupply = _totalSupply.add(amount);\r\n _balances[account] = _balances[account].add(amount);\r\n emit Transfer(address(0), account, amount);\r\n }\r\n\r\n function _approve(\r\n address owner,\r\n address spender,\r\n uint256 amount\r\n ) internal virtual {\r\n _allowances[owner][spender] = amount;\r\n emit Approval(owner, spender, amount);\r\n }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n uint256 c = a + b;\r\n require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n return c;\r\n }\r\n\r\n function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n return sub(a, b, \"SafeMath: subtraction overflow\");\r\n }\r\n\r\n function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n require(b <= a, errorMessage);\r\n uint256 c = a - b;\r\n\r\n return c;\r\n }\r\n\r\n function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\r\n if (a == 0) {\r\n return 0;\r\n }\r\n\r\n uint256 c = a * b;\r\n require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n return c;\r\n }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n return div(a, b, \"SafeMath: division by zero\");\r\n }\r\n\r\n function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n require(b > 0, errorMessage);\r\n uint256 c = a / b;\r\n\r\n return c;\r\n }\r\n}\r\n\r\ncontract Ownable is Context {\r\n address private _owner;\r\n\r\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n constructor() {\r\n address msgSender = _msgSender();\r\n _owner = msgSender;\r\n emit OwnershipTransferred(address(0), msgSender);\r\n }\r\n\r\n function owner() public view returns(address) {\r\n return _owner;\r\n }\r\n\r\n modifier onlyOwner() {\r\n require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n _;\r\n }\r\n\r\n function renounceOwnership() public virtual onlyOwner {\r\n emit OwnershipTransferred(_owner, address(0));\r\n _owner = address(0);\r\n }\r\n\r\n function transferOwnership(address newOwner) public virtual onlyOwner {\r\n require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n emit OwnershipTransferred(_owner, newOwner);\r\n _owner = newOwner;\r\n }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n int256 private constant MIN_INT256 = int256(1) << 255;\r\n int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n function mul(int256 a, int256 b) internal pure returns(int256) {\r\n int256 c = a * b;\r\n\r\n require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n require((b == 0) || (c / b == a));\r\n return c;\r\n }\r\n\r\n function div(int256 a, int256 b) internal pure returns(int256) {\r\n require(b != -1 || a != MIN_INT256);\r\n\r\n return a / b;\r\n }\r\n\r\n function sub(int256 a, int256 b) internal pure returns(int256) {\r\n int256 c = a - b;\r\n require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n return c;\r\n }\r\n\r\n function add(int256 a, int256 b) internal pure returns(int256) {\r\n int256 c = a + b;\r\n require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n return c;\r\n }\r\n\r\n function abs(int256 a) internal pure returns(int256) {\r\n require(a != MIN_INT256);\r\n return a < 0 ? -a : a;\r\n }\r\n\r\n function toUint256Safe(int256 a) internal pure returns(uint256) {\r\n require(a >= 0);\r\n return uint256(a);\r\n }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n function toInt256Safe(uint256 a) internal pure returns(int256) {\r\n int256 b = int256(a);\r\n require(b >= 0);\r\n return b;\r\n }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n function factory() external pure returns(address);\r\n function WETH() external pure returns(address);\r\n\r\n function addLiquidity(\r\n address tokenA,\r\n address tokenB,\r\n uint amountADesired,\r\n uint amountBDesired,\r\n uint amountAMin,\r\n uint amountBMin,\r\n address to,\r\n uint deadline\r\n ) external returns(uint amountA, uint amountB, uint liquidity);\r\n function addLiquidityETH(\r\n address token,\r\n uint amountTokenDesired,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline\r\n ) external payable returns(uint amountToken, uint amountETH, uint liquidity);\r\n function removeLiquidity(\r\n address tokenA,\r\n address tokenB,\r\n uint liquidity,\r\n uint amountAMin,\r\n uint amountBMin,\r\n address to,\r\n uint deadline\r\n ) external returns(uint amountA, uint amountB);\r\n function removeLiquidityETH(\r\n address token,\r\n uint liquidity,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline\r\n ) external returns(uint amountToken, uint amountETH);\r\n function removeLiquidityWithPermit(\r\n address tokenA,\r\n address tokenB,\r\n uint liquidity,\r\n uint amountAMin,\r\n uint amountBMin,\r\n address to,\r\n uint deadline,\r\n bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n ) external returns(uint amountA, uint amountB);\r\n function removeLiquidityETHWithPermit(\r\n address token,\r\n uint liquidity,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline,\r\n bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n ) external returns(uint amountToken, uint amountETH);\r\n function swapExactTokensForTokens(\r\n uint amountIn,\r\n uint amountOutMin,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external returns(uint[] memory amounts);\r\n function swapTokensForExactTokens(\r\n uint amountOut,\r\n uint amountInMax,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external returns(uint[] memory amounts);\r\n function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n external\r\n payable\r\n returns(uint[] memory amounts);\r\n function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n external\r\n returns(uint[] memory amounts);\r\n function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n external\r\n returns(uint[] memory amounts);\r\n function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n external\r\n payable\r\n returns(uint[] memory amounts);\r\n\r\n function quote(uint amountA, uint reserveA, uint reserveB) external pure returns(uint amountB);\r\n function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns(uint amountOut);\r\n function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns(uint amountIn);\r\n function getAmountsOut(uint amountIn, address[] calldata path) external view returns(uint[] memory amounts);\r\n function getAmountsIn(uint amountOut, address[] calldata path) external view returns(uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n address token,\r\n uint liquidity,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline\r\n ) external returns(uint amountETH);\r\n function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n address token,\r\n uint liquidity,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline,\r\n bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n ) external returns(uint amountETH);\r\n\r\n function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n uint amountIn,\r\n uint amountOutMin,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external;\r\n function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n uint amountOutMin,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external payable;\r\n function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n uint amountIn,\r\n uint amountOutMin,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external;\r\n}\r\n\r\ncontract FriendPerp  is ERC20, Ownable {\r\n using SafeMath for uint256;\r\n\r\n IUniswapV2Router02 public immutable router;\r\n address public immutable uniswapV2Pair;\r\n\r\n // addresses\r\n address public devWallet;\r\n address private marketingWallet;\r\n\r\n // limits\r\n uint256 private maxBuyAmount;\r\n uint256 private maxSellAmount;\r\n uint256 private maxWalletAmount;\r\n\r\n uint256 private thresholdSwapAmount;\r\n\r\n // status flags\r\n bool private isTrading = false;\r\n bool public swapEnabled = false;\r\n bool public isSwapping;\r\n\r\n struct Fees {\r\n uint8 buyTotalFees;\r\n uint8 buyMarketingFee;\r\n uint8 buyDevFee;\r\n uint8 buyLiquidityFee;\r\n\r\n uint8 sellTotalFees;\r\n uint8 sellMarketingFee;\r\n uint8 sellDevFee;\r\n uint8 sellLiquidityFee;\r\n }\r\n\r\n Fees public _fees = Fees({\r\n sellTotalFees: 0,\r\n sellMarketingFee: 0,\r\n sellDevFee:0,\r\n sellLiquidityFee: 0,\r\n\r\n buyTotalFees: 0,\r\n buyMarketingFee: 0,\r\n buyDevFee:0,\r\n buyLiquidityFee: 0\r\n });\r\n\r\n mapping(address => bool) private _isExcludedFromFees;\r\n mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n mapping(address => bool) public _isExcludedMaxWalletAmount;\r\n\r\n uint256 public tokensForMarketing;\r\n uint256 public tokensForLiquidity;\r\n uint256 public tokensForDev;\r\n uint256 private taxTill;\r\n\r\n mapping(address => bool) public marketPair;\r\n mapping(address => bool) public _isBlacklisted;\r\n\r\n event SwapAndLiquify(\r\n uint256 tokensSwapped,\r\n uint256 ethReceived\r\n );\r\n\r\n constructor() ERC20(\"Friend Perp bot\", \"FP\") {\r\n\r\n router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n //Wallets\r\n devWallet = address(0x3FCb58804cA3a1212F9908DBe45f25e5a9a7A841);\r\n marketingWallet = address(0x3FCb58804cA3a1212F9908DBe45f25e5a9a7A841);\r\n\r\n//Fees\r\n _fees.buyMarketingFee = 15;\r\n _fees.buyLiquidityFee = 0;\r\n _fees.buyDevFee = 5;\r\n _fees.buyTotalFees = _fees.buyMarketingFee + _fees.buyLiquidityFee + _fees.buyDevFee;\r\n\r\n _fees.sellMarketingFee = 15;\r\n _fees.sellLiquidityFee = 0;\r\n _fees.sellDevFee = 5;\r\n _fees.sellTotalFees = _fees.sellMarketingFee + _fees.sellLiquidityFee + _fees.sellDevFee;\r\n\r\n// Lists\r\n _isExcludedMaxWalletAmount[owner()] = true;\r\n _isExcludedMaxWalletAmount[address(this)] = true;\r\n _isExcludedMaxWalletAmount[address(uniswapV2Pair)] = true;\r\n\r\n _isExcludedMaxTransactionAmount[address(router)] = true;\r\n _isExcludedMaxTransactionAmount[address(uniswapV2Pair)] = true;\r\n _isExcludedMaxTransactionAmount[owner()] = true;\r\n _isExcludedMaxTransactionAmount[address(this)] = true;\r\n\r\n _isExcludedFromFees[owner()] = true;\r\n _isExcludedFromFees[address(this)] = true;\r\n\r\n marketPair[address(uniswapV2Pair)] = true;\r\n approve(address(router), type(uint256).max);\r\n\r\n //Supply\r\n uint256 totalSupply = 1000000 * 10**9;\r\n\r\n//Limits\r\n maxBuyAmount = totalSupply * 2 / 100;\r\n maxSellAmount = totalSupply * 2 / 100;\r\n maxWalletAmount = totalSupply * 2 / 100;\r\n thresholdSwapAmount = totalSupply * 2 / 1000;\r\n\r\n _mint(msg.sender, totalSupply);\r\n }\r\n\r\n receive() external payable {\r\n }\r\n\r\n function openTrading() external onlyOwner {\r\n isTrading = true;\r\n swapEnabled = true;\r\n taxTill = block.number + 3;\r\n }\r\n\r\n function updateThresholdSwapAmount(uint256 newAmount) external onlyOwner returns(bool){\r\n thresholdSwapAmount = newAmount;\r\n return true;\r\n }\r\n\r\n\r\n\r\n\r\n function toggleSwapEnabled(bool enabled) external onlyOwner(){\r\n swapEnabled = enabled;\r\n }\r\n\r\n   function blacklist(address account, bool value) external onlyOwner{\r\n _isBlacklisted[account] = value;\r\n }\r\n\r\n function updateFPwalletAmount(uint256 newPercentage) external onlyOwner {\r\n require(((totalSupply() * newPercentage) / 1000) >= (totalSupply() / 100), \"Cannot set maxWallet lower than 1%\");\r\n maxWalletAmount = (totalSupply() * newPercentage) / 1000;\r\n }\r\n\r\n\r\n\r\n function FPfee(uint8 _marketingFeeBuy, uint8 _liquidityFeeBuy,uint8 _devFeeBuy,uint8 _marketingFeeSell, uint8 _liquidityFeeSell,uint8 _devFeeSell) external onlyOwner{\r\n _fees.buyMarketingFee = _marketingFeeBuy;\r\n _fees.buyLiquidityFee = _liquidityFeeBuy;\r\n _fees.buyDevFee = _devFeeBuy;\r\n _fees.buyTotalFees = _fees.buyMarketingFee + _fees.buyLiquidityFee + _fees.buyDevFee;\r\n\r\n _fees.sellMarketingFee = _marketingFeeSell;\r\n _fees.sellLiquidityFee = _liquidityFeeSell;\r\n _fees.sellDevFee = _devFeeSell;\r\n _fees.sellTotalFees = _fees.sellMarketingFee + _fees.sellLiquidityFee + _fees.sellDevFee;\r\n\r\n }\r\n\r\n function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n _isExcludedFromFees[account] = excluded;\r\n }\r\n function excludeFromWalletLimit(address account, bool excluded) public onlyOwner {\r\n _isExcludedMaxWalletAmount[account] = excluded;\r\n }\r\n function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\r\n _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n }\r\n  function addLiquidity(uint256 tAmount, uint256 ethAmount) private {\r\n _approve(address(this), address(router), tAmount);\r\n\r\n router.addLiquidityETH{ value: ethAmount } (address(this), tAmount, 0, 0 , address(this), block.timestamp);\r\n }\r\n\r\n function setMarketPair(address pair, bool value) public onlyOwner {\r\n require(pair != uniswapV2Pair, \"Must keep uniswapV2Pair\");\r\n marketPair[pair] = value;\r\n }\r\n\r\n function updateFPMaxTxnAmount(uint256 newMaxBuy, uint256 newMaxSell) external onlyOwner {\r\n require(((totalSupply() * newMaxBuy) / 1000) >= (totalSupply() / 100), \"maxBuyAmount must be higher than 1%\");\r\n require(((totalSupply() * newMaxSell) / 1000) >= (totalSupply() / 100), \"maxSellAmount must be higher than 1%\");\r\n maxBuyAmount = (totalSupply() * newMaxBuy) / 1000;\r\n maxSellAmount = (totalSupply() * newMaxSell) / 1000;\r\n }\r\n\r\n\r\n\r\n function setWallets(address _marketingWallet,address _devWallet) external onlyOwner{\r\n marketingWallet = _marketingWallet;\r\n devWallet = _devWallet;\r\n }\r\n\r\n function isExcludedFromFees(address account) public view returns(bool) {\r\n return _isExcludedFromFees[account];\r\n }\r\n\r\n function _transfer(\r\n address sender,\r\n address recipient,\r\n uint256 amount\r\n\r\n ) internal override {\r\n\r\n if (amount == 0) {\r\n super._transfer(sender, recipient, 0);\r\n return;\r\n }\r\n\r\n if (\r\n sender != owner() &&\r\n recipient != owner() &&\r\n !isSwapping\r\n ) {\r\n\r\n if (!isTrading) {\r\n require(_isExcludedFromFees[sender] || _isExcludedFromFees[recipient], \"Trading is not active.\");\r\n }\r\n if (marketPair[sender] && !_isExcludedMaxTransactionAmount[recipient]) {\r\n require(amount <= maxBuyAmount, \"buy transfer over max amount\");\r\n }\r\n else if (marketPair[recipient] && !_isExcludedMaxTransactionAmount[sender]) {\r\n require(amount <= maxSellAmount, \"Sell transfer over max amount\");\r\n }\r\n\r\n if (!_isExcludedMaxWalletAmount[recipient]) {\r\n require(amount + balanceOf(recipient) <= maxWalletAmount, \"Max wallet exceeded\");\r\n }\r\n require(!_isBlacklisted[sender] && !_isBlacklisted[recipient], \"Blacklisted address\");\r\n }\r\n\r\n\r\n\r\n\r\n uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n bool canSwap = contractTokenBalance >= thresholdSwapAmount;\r\n\r\n if (\r\n canSwap &&\r\n swapEnabled &&\r\n !isSwapping &&\r\n marketPair[recipient] &&\r\n !_isExcludedFromFees[sender] &&\r\n !_isExcludedFromFees[recipient]\r\n ) {\r\n isSwapping = true;\r\n swapBack();\r\n isSwapping = false;\r\n }\r\n\r\n bool takeFee = !isSwapping;\r\n\r\n if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\r\n takeFee = false;\r\n }\r\n\r\n if (takeFee) {\r\n uint256 fees = 0;\r\n if(block.number < taxTill) {\r\n fees = amount.mul(99).div(100);\r\n tokensForMarketing += (fees * 94) / 99;\r\n tokensForDev += (fees * 5) / 99;\r\n } else if (marketPair[recipient] && _fees.sellTotalFees > 0) {\r\n fees = amount.mul(_fees.sellTotalFees).div(100);\r\n tokensForLiquidity += fees * _fees.sellLiquidityFee / _fees.sellTotalFees;\r\n tokensForMarketing += fees * _fees.sellMarketingFee / _fees.sellTotalFees;\r\n tokensForDev += fees * _fees.sellDevFee / _fees.sellTotalFees;\r\n }\r\n // on buy\r\n else if (marketPair[sender] && _fees.buyTotalFees > 0) {\r\n fees = amount.mul(_fees.buyTotalFees).div(100);\r\n tokensForLiquidity += fees * _fees.buyLiquidityFee / _fees.buyTotalFees;\r\n tokensForMarketing += fees * _fees.buyMarketingFee / _fees.buyTotalFees;\r\n tokensForDev += fees * _fees.buyDevFee / _fees.buyTotalFees;\r\n }\r\n\r\n if (fees > 0) {\r\n super._transfer(sender, address(this), fees);\r\n }\r\n\r\n amount -= fees;\r\n\r\n }\r\n\r\n super._transfer(sender, recipient, amount);\r\n }\r\n\r\n function swapTokensForEth(uint256 tAmount) private {\r\n\r\n address[] memory path = new address[](2);\r\n path[0] = address(this);\r\n path[1] = router.WETH();\r\n\r\n _approve(address(this), address(router), tAmount);\r\n\r\n router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n tAmount,\r\n 0, // accept any amount of ETH!\r\n path,\r\n address(this),\r\n block.timestamp\r\n );\r\n }\r\n\r\n\r\n\r\n function swapBack() private {\r\n uint256 contractTokenBalance = balanceOf(address(this));\r\n uint256 toSwap = tokensForLiquidity + tokensForMarketing + tokensForDev;\r\n bool success;\r\n\r\n if (contractTokenBalance == 0 || toSwap == 0) { return; }\r\n\r\n if (contractTokenBalance > thresholdSwapAmount * 20) {\r\n contractTokenBalance = thresholdSwapAmount * 20;\r\n }\r\n\r\n uint256 liquidityTokens = contractTokenBalance * tokensForLiquidity / toSwap / 2;\r\n uint256 amountToSwapForETH = contractTokenBalance.sub(liquidityTokens);\r\n\r\n uint256 initialETHBalance = address(this).balance;\r\n\r\n swapTokensForEth(amountToSwapForETH);\r\n\r\n uint256 newBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n uint256 ethForMarketing = newBalance.mul(tokensForMarketing).div(toSwap);\r\n uint256 ethForDev = newBalance.mul(tokensForDev).div(toSwap);\r\n uint256 ethForLiquidity = newBalance - (ethForMarketing + ethForDev);\r\n\r\n\r\n\r\n\r\n tokensForLiquidity = 0;\r\n tokensForMarketing = 0;\r\n tokensForDev = 0;\r\n\r\n if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n addLiquidity(liquidityTokens, ethForLiquidity);\r\n emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity);\r\n }\r\n\r\n (success,) = address(devWallet).call{ value: (address(this).balance - ethForMarketing) } (\"\");\r\n (success,) = address(marketingWallet).call{ value: address(this).balance } (\"\");\r\n }\r\n\r\n// That is all\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_marketingFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeSell\",\"type\":\"uint8\"}],\"name\":\"FPfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTotalFees\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyMarketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDevFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyLiquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTotalFees\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellMarketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDevFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellLiquidityFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxWalletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMarketPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"toggleSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxSell\",\"type\":\"uint256\"}],\"name\":\"updateFPMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"updateFPwalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateThresholdSwapAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FriendPerp", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f15329cdaee8bc9e41ef339b0ac53a149134ab2b12cda435eab32a106899ff4c"}