{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"modules/withdrawal-manager-queue/modules/maple-proxy-factory/modules/proxy-factory/contracts/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport { IDefaultImplementationBeacon } from \\\"./interfaces/IDefaultImplementationBeacon.sol\\\";\\n\\nimport { SlotManipulatable } from \\\"./SlotManipulatable.sol\\\";\\n\\n/// @title A completely transparent, and thus interface-less, proxy contract.\\ncontract Proxy is SlotManipulatable {\\n\\n    /// @dev Storage slot with the address of the current factory. `keccak256('eip1967.proxy.factory') - 1`.\\n    bytes32 private constant FACTORY_SLOT = bytes32(0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1);\\n\\n    /// @dev Storage slot with the address of the current factory. `keccak256('eip1967.proxy.implementation') - 1`.\\n    bytes32 private constant IMPLEMENTATION_SLOT = bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\\n\\n    /**\\n     *  @dev   The constructor requires at least one of `factory_` or `implementation_`.\\n     *         If an implementation is not provided, the factory is treated as an IDefaultImplementationBeacon\\n     *         to fetch the default implementation.\\n     *  @param factory_        The address of a proxy factory, if any.\\n     *  @param implementation_ The address of the implementation contract being proxied, if any.\\n     */\\n    constructor(address factory_, address implementation_) {\\n        _setSlotValue(FACTORY_SLOT, bytes32(uint256(uint160(factory_))));\\n\\n        // If the implementation is empty, fetch it from the factory, which can act as a beacon.\\n        address implementation = implementation_ == address(0)\\n            ? IDefaultImplementationBeacon(factory_).defaultImplementation()\\n            : implementation_;\\n\\n        require(implementation != address(0));\\n\\n        _setSlotValue(IMPLEMENTATION_SLOT, bytes32(uint256(uint160(implementation))));\\n    }\\n\\n    fallback() payable external virtual {\\n        bytes32 implementation = _getSlotValue(IMPLEMENTATION_SLOT);\\n\\n        require(address(uint160(uint256(implementation))).code.length != uint256(0));\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"modules/withdrawal-manager-queue/modules/maple-proxy-factory/modules/proxy-factory/contracts/interfaces/IDefaultImplementationBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\n/// @title An beacon that provides a default implementation for proxies, must implement IDefaultImplementationBeacon.\\ninterface IDefaultImplementationBeacon {\\n\\n    /// @dev The address of an implementation for proxies.\\n    function defaultImplementation() external view returns (address defaultImplementation_);\\n\\n}\\n\"\r\n    },\r\n    \"modules/withdrawal-manager-queue/modules/maple-proxy-factory/modules/proxy-factory/contracts/SlotManipulatable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nabstract contract SlotManipulatable {\\n\\n    function _getReferenceTypeSlot(bytes32 slot_, bytes32 key_) internal pure returns (bytes32 value_) {\\n        return keccak256(abi.encodePacked(key_, slot_));\\n    }\\n\\n    function _getSlotValue(bytes32 slot_) internal view returns (bytes32 value_) {\\n        assembly {\\n            value_ := sload(slot_)\\n        }\\n    }\\n\\n    function _setSlotValue(bytes32 slot_, bytes32 value_) internal {\\n        assembly {\\n            sstore(slot_, value_)\\n        }\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"address-registry/=modules/address-registry/contracts/\",\r\n      \"contract-test-utils/=modules/erc20/modules/contract-test-utils/contracts/\",\r\n      \"ds-test/=modules/forge-std/lib/ds-test/src/\",\r\n      \"erc20-helper/=modules/erc20-helper/src/\",\r\n      \"erc20/=modules/erc20/\",\r\n      \"fixed-term-loan-manager/=modules/fixed-term-loan-manager/contracts/\",\r\n      \"fixed-term-loan/=modules/fixed-term-loan/contracts/\",\r\n      \"forge-std/=modules/forge-std/src/\",\r\n      \"globals/=modules/globals/contracts/\",\r\n      \"liquidations/=modules/liquidations/contracts/\",\r\n      \"maple-proxy-factory/=modules/open-term-loan/modules/maple-proxy-factory/\",\r\n      \"non-transparent-proxy/=modules/globals/modules/non-transparent-proxy/\",\r\n      \"ntp/=modules/pool-permission-manager/modules/ntp/\",\r\n      \"open-term-loan-manager/=modules/open-term-loan-manager/contracts/\",\r\n      \"open-term-loan/=modules/open-term-loan/contracts/\",\r\n      \"pool-permission-manager/=modules/pool-permission-manager/contracts/\",\r\n      \"pool/=modules/pool/contracts/\",\r\n      \"proxy-factory/=modules/open-term-loan/modules/maple-proxy-factory/modules/proxy-factory/\",\r\n      \"withdrawal-manager-cyclical/=modules/withdrawal-manager-cyclical/contracts/\",\r\n      \"withdrawal-manager-queue/=modules/withdrawal-manager-queue/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ca33105902e8d232ddfb9f71ff3d79c7e7f2c4e50000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x899b57bbd8597aa2d1898476504f479c982c5c2c", "SwarmSource": ""}