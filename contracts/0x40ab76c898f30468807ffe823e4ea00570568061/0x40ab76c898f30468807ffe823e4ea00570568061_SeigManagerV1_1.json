{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 625\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AuthControlSeigManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AuthRoleSeigManager.sol\\\";\\n\\ncontract AuthControlSeigManager is AuthRoleSeigManager, ERC165Storage, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"AuthControl: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"AuthControl: Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(hasRole(OPERATOR_ROLE, msg.sender), \\\"AuthControl: Caller is not an operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyChallenger() {\\n        require(hasRole(CHALLENGER_ROLE, msg.sender), \\\"AuthControl: Caller is not a challenger\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(hasRole(PAUSE_ROLE, msg.sender), \\\"AuthControl: Caller is not a pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinterOrAdmin() {\\n        require(isAdmin(msg.sender) || hasRole(MINTER_ROLE, msg.sender), \\\"not onlyMinterOrAdmin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function addMinter(address account) public virtual onlyOwner {\\n        grantRole(MINTER_ROLE, account);\\n    }\\n\\n    function addOperator(address account) public virtual onlyOwner {\\n        grantRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function addChallenger(address account) public virtual onlyMinterOrAdmin {\\n        grantRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function removeMinter(address account) public virtual onlyOwner {\\n        renounceRole(MINTER_ROLE, account);\\n    }\\n\\n    function removeChallenger(address account) public virtual onlyOwner {\\n        renounceRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    function removeOperator(address account) public virtual onlyOwner {\\n        renounceRole(OPERATOR_ROLE, account);\\n    }\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\\n        transferAdmin(newAdmin);\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function renounceMinter() public {\\n        renounceRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    function renounceOperator() public {\\n        renounceRole(OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    function renounceChallenger() public {\\n        renounceRole(CHALLENGER_ROLE, msg.sender);\\n    }\\n\\n    function revokeMinter(address account) public onlyOwner {\\n        revokeRole(MINTER_ROLE, account);\\n    }\\n\\n    function revokeOperator(address account) public onlyOwner {\\n        revokeRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function revokeChallenger(address account) public onlyOwner {\\n        revokeRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function isOwner() public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function isMinter(address account) public view virtual returns (bool) {\\n        return hasRole(MINTER_ROLE, account);\\n    }\\n\\n    function isOperator(address account) public view virtual returns (bool) {\\n        return hasRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function isChallenger(address account) public view virtual returns (bool) {\\n        return hasRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AuthRoleSeigManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract AuthRoleSeigManager {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR\\\");\\n    bytes32 public constant CHALLENGER_ROLE = keccak256(\\\"CHALLENGER\\\");\\n    bytes32 public constant PAUSE_ROLE = keccak256(\\\"PAUSE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/dao/interfaces/CoinageFactoryI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface CoinageFactoryI {\\n  function deploy() external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/dao/interfaces/IWTON.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWTON {\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n    function swapToTONAndTransfer(address to, uint256 wtonAmount) external returns (bool);\\n    function swapFromTONAndTransfer(address to, uint256 tonAmount) external returns (bool);\\n    function renounceTonMinter() external;\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function renounceMinter() external ;\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n}\"\r\n    },\r\n    \"contracts/dao/interfaces/Layer2I.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface Layer2I {\\n  function operator() external view returns (address);\\n  function isLayer2() external view returns (bool);\\n  function currentFork() external view returns (uint);\\n  function lastEpoch(uint forkNumber) external view returns (uint);\\n  function changeOperator(address _operator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DSMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract DSMath {\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n    return x <= y ? x : y;\\n  }\\n  function max(uint x, uint y) internal pure returns (uint z) {\\n    return x >= y ? x : y;\\n  }\\n  function imin(int x, int y) internal pure returns (int z) {\\n    return x <= y ? x : y;\\n  }\\n  function imax(int x, int y) internal pure returns (int z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  uint constant WAD_ = 10 ** 18;\\n  uint constant RAY_ = 10 ** 27;\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), WAD_ / 2) / WAD_;\\n  }\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), RAY_ / 2) / RAY_;\\n  }\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, WAD_), y / 2) / y;\\n  }\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, RAY_), y / 2) / y;\\n  }\\n\\n  function wmul2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, y) / WAD_;\\n  }\\n  function rmul2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, y) / RAY_;\\n  }\\n  function wdiv2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, WAD_) / y;\\n  }\\n  function rdiv2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, RAY_) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //  x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //  floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function wpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : WAD_;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = wmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = wmul(z, x);\\n      }\\n    }\\n  }\\n\\n  function rpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : RAY_;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/ProxyStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\"\r\n    },\r\n    \"contracts/stake/interfaces/IRefactor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRefactor {\\n  struct Balance {\\n        uint256 balance;\\n        uint256 refactoredCount;\\n    }\\n\\n    struct Factor {\\n        uint256 factor;\\n        uint256 refactorCount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stake/interfaces/RefactorCoinageSnapshotI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IRefactor } from \\\"../interfaces/IRefactor.sol\\\";\\ninterface RefactorCoinageSnapshotI {\\n  function factor() external view returns (uint256);\\n  function setFactor(uint256 factor) external returns (bool);\\n  function setSeigManager(address _seigManager) external  ;\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function mint(address account, uint256 amount) external returns (bool);\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function addMinter(address account) external;\\n  function renounceMinter() external;\\n  function transferOwnership(address newOwner) external;\\n  function snapshot() external returns (uint256 id);\\n  function totalSupplyAt(uint256 snapshotId) external view returns (uint256 amount);\\n  function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256 amount);\\n\\n  function getTotalAndFactor() external view returns (IRefactor.Balance memory, IRefactor.Factor memory);\\n  function getBalanceAndFactor(address account) external view returns (IRefactor.Balance memory, IRefactor.Factor memory);\\n  function getTotalAndFactorAt(uint256 snapshotId) external view returns (IRefactor.Balance memory, IRefactor.Factor memory);\\n  function getBalanceAndFactorAt(address account, uint256 snapshotId) external view returns (IRefactor.Balance memory, IRefactor.Factor memory);\\n}\\n\"\r\n    },\r\n    \"contracts/stake/interfaces/SeigManagerV1I.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface SeigManagerV1I {\\n  function registry() external view returns (address);\\n  function depositManager() external view returns (address);\\n  function ton() external view returns (address);\\n  function wton() external view returns (address);\\n  function powerton() external view returns (address);\\n  function tot() external view returns (address);\\n  function coinages(address layer2) external view returns (address);\\n  function commissionRates(address layer2) external view returns (uint256);\\n\\n  function lastCommitBlock(address layer2) external view returns (uint256);\\n  function seigPerBlock() external view returns (uint256);\\n  function lastSeigBlock() external view returns (uint256);\\n  function pausedBlock() external view returns (uint256);\\n  function unpausedBlock() external view returns (uint256);\\n  function DEFAULT_FACTOR() external view returns (uint256);\\n\\n  function deployCoinage(address layer2) external returns (bool);\\n  function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\\n\\n  function uncommittedStakeOf(address layer2, address account) external view returns (uint256);\\n  function uncommittedStakeOf(address account) external view returns (uint256 amount);\\n  function unallocatedSeigniorage() external view returns (uint256 amount);\\n\\n  function stakeOf(address layer2, address account) external view returns (uint256);\\n  function stakeOf(address account) external view returns (uint256 amount);\\n  function stakeOfTotal() external view returns (uint256 amount);\\n  function stakeOfAllLayers() external view returns (uint256 amount);\\n\\n  function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\\n\\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\\n  function updateSeigniorage() external returns (bool);\\n  function updateSeigniorageLayer(address layer2) external returns (bool);\\n\\n  function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\\n  function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\\n  function onSnapshot() external returns (uint256 snapshotId);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/stake/managers/SeigManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { RefactorCoinageSnapshotI } from \\\"../interfaces/RefactorCoinageSnapshotI.sol\\\";\\n\\n/// @title\\n/// @notice\\ncontract SeigManagerStorage   {\\n\\n    //////////////////////////////\\n    // Constants\\n    //////////////////////////////\\n\\n    uint256 constant public RAY = 10 ** 27; // 1 RAY\\n    uint256 constant internal _DEFAULT_FACTOR = RAY;\\n\\n    uint256 constant public MAX_VALID_COMMISSION = RAY; // 1 RAY\\n    uint256 constant public MIN_VALID_COMMISSION = 10 ** 25; // 0.01 RAY\\n\\n    //////////////////////////////\\n    // Common contracts\\n    //////////////////////////////\\n\\n    address internal _registry;\\n    address internal _depositManager;\\n    address internal _powerton;\\n    address public dao;\\n\\n    //////////////////////////////\\n    // Token-related\\n    //////////////////////////////\\n\\n    // TON token contract\\n    address internal _ton;\\n\\n    // WTON token contract\\n    address internal _wton; // TODO: use mintable erc20!\\n\\n    // contract factory\\n    address public factory;\\n\\n    // track total deposits of each layer2.\\n    RefactorCoinageSnapshotI internal _tot;\\n\\n    // coinage token for each layer2.\\n    mapping (address => RefactorCoinageSnapshotI) internal _coinages;\\n\\n    // last commit block number for each layer2.\\n    mapping (address => uint256) internal _lastCommitBlock;\\n\\n    // total seigniorage per block\\n    uint256 internal _seigPerBlock;\\n\\n    // the block number when seigniorages are given\\n    uint256 internal _lastSeigBlock;\\n\\n    // block number when paused or unpaused\\n    uint256 internal _pausedBlock;\\n    uint256 internal _unpausedBlock;\\n\\n    // commission rates in RAY\\n    mapping (address => uint256) internal _commissionRates;\\n\\n    // whether commission is negative or not (default=possitive)\\n    mapping (address => bool) internal _isCommissionRateNegative;\\n\\n    // setting commissionrate delay\\n    uint256 public adjustCommissionDelay;\\n    mapping (address => uint256) public delayedCommissionBlock;\\n    mapping (address => uint256) public delayedCommissionRate;\\n    mapping (address => bool) public delayedCommissionRateNegative;\\n\\n    // minimum deposit amount\\n    uint256 public minimumAmount;\\n\\n    uint256 public powerTONSeigRate;\\n    uint256 public daoSeigRate;\\n    uint256 public relativeSeigRate;\\n\\n    uint256 public accRelativeSeig;\\n\\n    bool public paused;\\n    uint256 public lastSnapshotId;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/stake/managers/SeigManagerV1_1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IRefactor } from \\\"../interfaces/IRefactor.sol\\\";\\nimport { DSMath } from \\\"../../libraries/DSMath.sol\\\";\\nimport { RefactorCoinageSnapshotI } from \\\"../interfaces/RefactorCoinageSnapshotI.sol\\\";\\nimport { CoinageFactoryI } from \\\"../../dao/interfaces/CoinageFactoryI.sol\\\";\\nimport { IWTON } from \\\"../../dao/interfaces/IWTON.sol\\\";\\nimport { Layer2I } from \\\"../../dao/interfaces/Layer2I.sol\\\";\\nimport { SeigManagerV1I } from \\\"../interfaces/SeigManagerV1I.sol\\\";\\n\\nimport \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AuthControlSeigManager } from \\\"../../common/AuthControlSeigManager.sol\\\";\\nimport { SeigManagerStorage } from \\\"./SeigManagerStorage.sol\\\";\\nimport { SeigManagerV1_1Storage } from \\\"./SeigManagerV1_1Storage.sol\\\";\\n\\ninterface MinterRoleRenounceTarget {\\n  function renounceMinter() external;\\n}\\n\\ninterface PauserRoleRenounceTarget {\\n  function renouncePauser() external;\\n}\\n\\ninterface OwnableTarget {\\n  function renounceOwnership() external;\\n  function transferOwnership(address newOwner) external;\\n}\\n\\ninterface IILayer2Registry {\\n  function layer2s(address layer2) external view returns (bool);\\n  function numLayer2s() external view  returns (uint256);\\n  function layer2ByIndex(uint256 index) external view returns (address);\\n}\\n\\ninterface IPowerTON {\\n  function updateSeigniorage(uint256 amount) external;\\n  function onDeposit(address layer2, address account, uint256 amount) external;\\n  function onWithdraw(address layer2, address account, uint256 amount) external;\\n}\\n\\ninterface ITON {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface IRefactorCoinageSnapshot {\\n  function snapshot() external returns (uint256 id);\\n}\\n\\ninterface ICandidate {\\n  function updateSeigniorage() external returns (bool);\\n}\\n\\n\\ninterface IDepositManager {\\n  function updateSeigniorage() external returns (bool);\\n}\\n\\n/**\\n * @dev SeigManager gives seigniorage to operator and WTON holders.\\n * For each commit by operator, operator (or user) will get seigniorage\\n * in propotion to the staked (or delegated) amount of WTON.\\n *\\n * [Tokens]\\n * - {tot} tracks total staked or delegated WTON of each Layer2 contract (and depositor?).\\n * - {coinages[layer2]} tracks staked or delegated WTON of user or operator to a Layer2 contract.\\n *\\n * For each commit by operator,\\n *  1. increases all layer2's balance of {tot} by (the staked amount of WTON) /\\n *     (total supply of TON and WTON) * (num blocks * seigniorage per block).\\n *  2. increases all depositors' blanace of {coinages[layer2]} in proportion to the staked amount of WTON,\\n *     up to the increased amount in step (1).\\n *  3. set the layer2's balance of {committed} as the layer2's {tot} balance.\\n *\\n * For each stake or delegate with amount of {v} to a Layer2,\\n *  1. mint {v} {coinages[layer2]} tokens to the account\\n *  2. mint {v} {tot} tokens to the layer2 contract\\n *\\n * For each unstake or undelegate (or get rewards) with amount of {v} to a Layer2,\\n *  1. burn {v} {coinages[layer2]} tokens from the account\\n *  2. burn {v + \u237a} {tot} tokens from the layer2 contract,\\n *   where \u237a = SEIGS * staked ratio of the layer2 * withdrawal ratio of the account\\n *     - SEIGS                              = tot total supply - tot total supply at last commit from the layer2\\n *     - staked ratio of the layer2     = tot balance of the layer2 / tot total supply\\n *     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage\\n *\\n */\\ncontract SeigManagerV1_1 is ProxyStorage, AuthControlSeigManager, SeigManagerStorage, SeigManagerV1_1Storage, SeigManagerV1I, DSMath {\\n\\n  //////////////////////////////\\n  // Modifiers\\n  //////////////////////////////\\n\\n  modifier onlyRegistry() {\\n    require(msg.sender == _registry, \\\"not onlyRegistry\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegistryOrOperator(address layer2) {\\n    require(msg.sender == _registry || msg.sender == Layer2I(layer2).operator(), \\\"not onlyRegistryOrOperator\\\");\\n    _;\\n  }\\n\\n  modifier onlyDepositManager() {\\n    require(msg.sender == _depositManager, \\\"not onlyDepositManager\\\");\\n    _;\\n  }\\n\\n  modifier onlyLayer2(address layer2) {\\n    require(IILayer2Registry(_registry).layer2s(layer2), \\\"not onlyLayer2\\\");\\n    _;\\n  }\\n\\n  modifier checkCoinage(address layer2) {\\n    require(address(_coinages[layer2]) != address(0), \\\"SeigManager: coinage has not been deployed yet\\\");\\n    _;\\n  }\\n\\n  modifier whenNotPaused() {\\n      require(!paused, \\\"Pausable: paused\\\");\\n      _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n      require(paused, \\\"Pausable: not paused\\\");\\n      _;\\n  }\\n\\n\\n  //////////////////////////////\\n  // Events\\n  //////////////////////////////\\n\\n  event CoinageCreated(address indexed layer2, address coinage);\\n  event SeigGiven(address indexed layer2, uint256 totalSeig, uint256 stakedSeig, uint256 unstakedSeig, uint256 powertonSeig, uint256 daoSeig, uint256 pseig);\\n  event Comitted(address indexed layer2);\\n  event CommissionRateSet(address indexed layer2, uint256 previousRate, uint256 newRate);\\n  event Paused(address account);\\n  event Unpaused(address account);\\n  event UnstakeLog(uint coinageBurnAmount, uint totBurnAmount);\\n\\n   /** These were reflected from 18732908 block. */\\n  event AddedSeigAtLayer(address layer2, uint256 seigs, uint256 operatorSeigs, uint256 nextTotalSupply, uint256 prevTotalSupply);\\n  event OnSnapshot(uint256 snapshotId);\\n  event SetPowerTONSeigRate(uint256 powerTONSeigRate);\\n  event SetDaoSeigRate(uint256 daoSeigRate);\\n  event SetPseigRate(uint256 pseigRate);\\n\\n  /** It was deleted from block 18732908, but was added again on v1. */\\n  event CommitLog1(uint256 totalStakedAmount, uint256 totalSupplyOfWTON, uint256 prevTotalSupply, uint256 nextTotalSupply);\\n\\n  /** Added from v1. */\\n  event SetSeigStartBlock(uint256 _seigStartBlock);\\n  event SetInitialTotalSupply(uint256 _initialTotalSupply);\\n  event SetBurntAmountAtDAO(uint256 _burntAmountAtDAO);\\n\\n  //////////////////////////////\\n  // Constuctor\\n  //////////////////////////////\\n\\n  function initialize (\\n    address ton_,\\n    address wton_,\\n    address registry_,\\n    address depositManager_,\\n    uint256 seigPerBlock_,\\n    address factory_,\\n    uint256 lastSeigBlock_\\n  ) external {\\n    require(_ton == address(0) && _lastSeigBlock == 0, \\\"already initialized\\\");\\n\\n    _ton = ton_;\\n    _wton = wton_;\\n    _registry = registry_;\\n    _depositManager = depositManager_;\\n    _seigPerBlock = seigPerBlock_;\\n\\n    factory = factory_;\\n    address c = CoinageFactoryI(factory).deploy();\\n    require(c != address(0), \\\"zero tot\\\");\\n    _tot = RefactorCoinageSnapshotI(c);\\n\\n    _lastSeigBlock = lastSeigBlock_;\\n  }\\n\\n  //////////////////////////////\\n  // Pausable\\n  //////////////////////////////\\n\\n  function pause() public onlyPauser whenNotPaused {\\n    _pausedBlock = block.number;\\n    paused = true;\\n    emit Paused(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Called by a pauser to unpause, returns to normal state.\\n   */\\n  function unpause() public onlyPauser whenPaused {\\n    _unpausedBlock = block.number;\\n    paused = false;\\n    emit Unpaused(msg.sender);\\n  }\\n\\n\\n  //////////////////////////////\\n  // onlyOwner\\n  //////////////////////////////\\n\\n  function setData(\\n      address powerton_,\\n      address daoAddress,\\n      uint256 powerTONSeigRate_,\\n      uint256 daoSeigRate_,\\n      uint256 relativeSeigRate_,\\n      uint256 adjustDelay_,\\n      uint256 minimumAmount_\\n  ) external onlyOwner {\\n    require(\\n      powerTONSeigRate + daoSeigRate + relativeSeigRate <= RAY, \\\"exceeded seigniorage rate\\\"\\n    );\\n    _powerton = powerton_;\\n    dao = daoAddress;\\n    powerTONSeigRate = powerTONSeigRate_;\\n    daoSeigRate = daoSeigRate_;\\n    relativeSeigRate = relativeSeigRate_;\\n    adjustCommissionDelay = adjustDelay_;\\n    minimumAmount = minimumAmount_;\\n\\n    emit SetPowerTONSeigRate (powerTONSeigRate_);\\n    emit SetDaoSeigRate (daoSeigRate_) ;\\n    emit SetDaoSeigRate (daoSeigRate_) ;\\n  }\\n\\n  function setPowerTON(address powerton_) external onlyOwner {\\n    _powerton = powerton_;\\n  }\\n\\n  function setDao(address daoAddress) external onlyOwner {\\n    dao = daoAddress;\\n  }\\n\\n  function setPowerTONSeigRate(uint256 powerTONSeigRate_) external onlyOwner {\\n    require(powerTONSeigRate_ + daoSeigRate + relativeSeigRate <= RAY, \\\"exceeded seigniorage rate\\\");\\n    powerTONSeigRate = powerTONSeigRate_;\\n    emit SetPowerTONSeigRate (powerTONSeigRate_);\\n  }\\n\\n  function setDaoSeigRate(uint256 daoSeigRate_) external onlyOwner {\\n    require(powerTONSeigRate + daoSeigRate_ + relativeSeigRate <= RAY, \\\"exceeded seigniorage rate\\\");\\n    daoSeigRate = daoSeigRate_;\\n    emit SetDaoSeigRate (daoSeigRate_) ;\\n  }\\n\\n  function setPseigRate(uint256 pseigRate_) external onlyOwner {\\n    require(powerTONSeigRate + daoSeigRate + pseigRate_ <= RAY, \\\"exceeded seigniorage rate\\\");\\n    relativeSeigRate = pseigRate_;\\n    emit SetPseigRate (pseigRate_);\\n  }\\n\\n  function setCoinageFactory(address factory_) external onlyOwner {\\n    factory = factory_;\\n  }\\n\\n  function transferCoinageOwnership(address newSeigManager, address[] calldata coinages_) external onlyOwner {\\n    for (uint256 i = 0; i < coinages_.length; i++) {\\n      RefactorCoinageSnapshotI c = RefactorCoinageSnapshotI(coinages_[i]);\\n      c.addMinter(newSeigManager);\\n      c.renounceMinter();\\n      c.transferOwnership(newSeigManager);\\n    }\\n  }\\n\\n  function renounceWTONMinter() external onlyOwner {\\n    IWTON(_wton).renounceMinter();\\n  }\\n\\n  function setAdjustDelay(uint256 adjustDelay_) external onlyOwner {\\n    adjustCommissionDelay = adjustDelay_;\\n  }\\n\\n  function setMinimumAmount(uint256 minimumAmount_) external onlyOwner {\\n    minimumAmount = minimumAmount_;\\n  }\\n\\n  function setSeigStartBlock(uint256 _seigStartBlock) external onlyOwner {\\n    seigStartBlock = _seigStartBlock;\\n    emit SetSeigStartBlock(_seigStartBlock);\\n  }\\n\\n  function setInitialTotalSupply(uint256 _initialTotalSupply) external onlyOwner {\\n    initialTotalSupply = _initialTotalSupply;\\n    emit SetInitialTotalSupply(_initialTotalSupply);\\n  }\\n\\n  function setBurntAmountAtDAO(uint256 _burntAmountAtDAO) external onlyOwner {\\n    burntAmountAtDAO = _burntAmountAtDAO;\\n    emit SetBurntAmountAtDAO(_burntAmountAtDAO);\\n  }\\n\\n  //////////////////////////////\\n  // onlyRegistry\\n  //////////////////////////////\\n\\n  /**\\n   * @dev deploy coinage token for the layer2.\\n   */\\n  function deployCoinage(address layer2) external onlyRegistry returns (bool) {\\n    // create new coinage token for the layer2 contract\\n    if (address(_coinages[layer2]) == address(0)) {\\n      address c = CoinageFactoryI(factory).deploy();\\n      _lastCommitBlock[layer2] = block.number;\\n      // addChallenger(layer2);\\n      _coinages[layer2] = RefactorCoinageSnapshotI(c);\\n      emit CoinageCreated(layer2, c);\\n    }\\n\\n    return true;\\n  }\\n\\n  function setCommissionRate(\\n    address layer2,\\n    uint256 commissionRate,\\n    bool isCommissionRateNegative_\\n  )\\n    external\\n    onlyRegistryOrOperator(layer2)\\n    returns (bool)\\n  {\\n    // check commission range\\n    require(\\n      (commissionRate == 0) ||\\n      (MIN_VALID_COMMISSION <= commissionRate && commissionRate <= MAX_VALID_COMMISSION),\\n      \\\"SeigManager: commission rate must be 0 or between 1 RAY and 0.01 RAY\\\"\\n    );\\n\\n    uint256 previous = _commissionRates[layer2];\\n    if (adjustCommissionDelay == 0) {\\n      _commissionRates[layer2] = commissionRate;\\n      _isCommissionRateNegative[layer2] = isCommissionRateNegative_;\\n    } else {\\n      delayedCommissionBlock[layer2] = block.number + adjustCommissionDelay;\\n      delayedCommissionRate[layer2] = commissionRate;\\n      delayedCommissionRateNegative[layer2] = isCommissionRateNegative_;\\n    }\\n\\n    emit CommissionRateSet(layer2, previous, commissionRate);\\n\\n    return true;\\n  }\\n\\n  // No implementation in registry.\\n  // function addChallenger(address account) public onlyRegistry {\\n  //   grantRole(CHALLENGER_ROLE, account);\\n  // }\\n\\n  // No implementation in layer2 (candidate).\\n  function slash(address layer2, address challenger) external onlyChallenger checkCoinage(layer2) returns (bool) {\\n    Layer2I(layer2).changeOperator(challenger);\\n\\n    return true;\\n  }\\n\\n  //////////////////////////////\\n  // onlyDepositManager\\n  //////////////////////////////\\n\\n  /**\\n   * @dev Callback for a new deposit\\n   */\\n  function onDeposit(address layer2, address account, uint256 amount)\\n    external\\n    onlyDepositManager\\n    checkCoinage(layer2)\\n    returns (bool)\\n  {\\n    if (_isOperator(layer2, account)) {\\n      uint256 newAmount = _coinages[layer2].balanceOf(account) + amount;\\n      require(newAmount >= minimumAmount, \\\"minimum amount is required\\\");\\n    }\\n    _tot.mint(layer2, amount);\\n    _coinages[layer2].mint(account, amount);\\n\\n    // if (_powerton != address(0)) IPowerTON(_powerton).onDeposit(layer2, account, amount);\\n    return true;\\n  }\\n\\n  function onWithdraw(address layer2, address account, uint256 amount)\\n    external\\n    onlyDepositManager\\n    checkCoinage(layer2)\\n    returns (bool)\\n  {\\n    require(_coinages[layer2].balanceOf(account) >= amount, \\\"SeigManager: insufficiant balance to unstake\\\");\\n\\n    if (_isOperator(layer2, account)) {\\n      uint256 newAmount = _coinages[layer2].balanceOf(account) - amount;\\n      require(newAmount >= minimumAmount, \\\"minimum amount is required\\\");\\n    }\\n\\n    // burn {v + \u237a} {tot} tokens to the layer2 contract,\\n    uint256 totAmount = _additionalTotBurnAmount(layer2, account, amount);\\n    _tot.burnFrom(layer2, amount+totAmount);\\n\\n    // burn {v} {coinages[layer2]} tokens to the account\\n    _coinages[layer2].burnFrom(account, amount);\\n\\n    // if (_powerton != address(0)) IPowerTON(_powerton).onWithdraw(layer2, account, amount);\\n    emit UnstakeLog(amount, totAmount);\\n\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // checkCoinage\\n  //////////////////////////////\\n\\n  /**\\n   * @dev Callback for a new commit\\n   */\\n  function updateSeigniorage()\\n    public\\n    checkCoinage(msg.sender)\\n    returns (bool)\\n  {\\n    // short circuit if paused\\n    if (paused) {\\n      return true;\\n    }\\n    require(block.number > _lastSeigBlock, \\\"last seig block is not past\\\");\\n\\n    uint256 operatorAmount = getOperatorAmount(msg.sender);\\n    require(operatorAmount >= minimumAmount, \\\"minimumAmount is insufficient\\\");\\n\\n    RefactorCoinageSnapshotI coinage = _coinages[msg.sender];\\n\\n    _increaseTot();\\n\\n    _lastCommitBlock[msg.sender] = block.number;\\n\\n    // 2. increase total supply of {coinages[layer2]}\\n    // RefactorCoinageSnapshotI coinage = _coinages[msg.sender];\\n\\n    uint256 prevTotalSupply = coinage.totalSupply();\\n    uint256 nextTotalSupply = _tot.balanceOf(msg.sender);\\n\\n    // short circuit if there is no seigs for the layer2\\n    if (prevTotalSupply >= nextTotalSupply) {\\n      emit Comitted(msg.sender);\\n      return true;\\n    }\\n\\n    uint256 seigs = nextTotalSupply - prevTotalSupply;\\n    address operator = Layer2I(msg.sender).operator();\\n    uint256 operatorSeigs;\\n\\n    // calculate commission amount\\n    bool isCommissionRateNegative_ = _isCommissionRateNegative[msg.sender];\\n\\n    (nextTotalSupply, operatorSeigs) = _calcSeigsDistribution(\\n      msg.sender,\\n      coinage,\\n      prevTotalSupply,\\n      seigs,\\n      isCommissionRateNegative_,\\n      operator\\n    );\\n\\n    // gives seigniorages to the layer2 as coinage\\n    coinage.setFactor(\\n      _calcNewFactor(\\n        prevTotalSupply,\\n        nextTotalSupply,\\n        coinage.factor()\\n      )\\n    );\\n\\n    // give commission to operator or delegators\\n    if (operatorSeigs != 0) {\\n      if (isCommissionRateNegative_) {\\n        // TODO: adjust arithmetic error\\n        // burn by \ud835\udf38\\n        coinage.burnFrom(operator, operatorSeigs);\\n      } else {\\n        coinage.mint(operator, operatorSeigs);\\n      }\\n    }\\n\\n    IWTON(_wton).mint(address(_depositManager), seigs);\\n\\n    emit Comitted(msg.sender);\\n    emit AddedSeigAtLayer(msg.sender, seigs, operatorSeigs, nextTotalSupply, prevTotalSupply);\\n\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // External functions\\n  //////////////////////////////\\n\\n  function getOperatorAmount(address layer2) public view returns (uint256) {\\n    address operator = Layer2I(msg.sender).operator();\\n    return _coinages[layer2].balanceOf(operator);\\n  }\\n\\n  /**\\n   * @dev Callback for a token transfer\\n   */\\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool) {\\n    require(msg.sender == address(_ton) || msg.sender == address(_wton),\\n      \\\"SeigManager: only TON or WTON can call onTransfer\\\");\\n\\n    if (!paused) {\\n      _increaseTot();\\n    }\\n\\n    return true;\\n  }\\n\\n\\n  function additionalTotBurnAmount(address layer2, address account, uint256 amount)\\n    external\\n    view\\n    returns (uint256 totAmount)\\n  {\\n    return _additionalTotBurnAmount(layer2, account, amount);\\n  }\\n\\n\\n  function uncommittedStakeOf(address layer2, address account) public view returns (uint256) {\\n    RefactorCoinageSnapshotI coinage = RefactorCoinageSnapshotI(_coinages[layer2]);\\n\\n    uint256 prevFactor = coinage.factor();\\n    uint256 prevTotalSupply = coinage.totalSupply();\\n    uint256 nextTotalSupply = _tot.balanceOf(layer2);\\n    uint256 newFactor = _calcNewFactor(prevTotalSupply, nextTotalSupply, prevFactor);\\n\\n    uint256 uncommittedBalance = rmul(\\n      rdiv(coinage.balanceOf(account), prevFactor),\\n      newFactor\\n    );\\n\\n    return (uncommittedBalance - _coinages[layer2].balanceOf(account));\\n  }\\n\\n  function uncommittedStakeOf(address account) external view returns (uint256 amount) {\\n\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += uncommittedStakeOf(layer2, account);\\n    }\\n  }\\n\\n  function unallocatedSeigniorage() external view returns (uint256 amount) {\\n    amount = stakeOfTotal() - stakeOfAllLayers();\\n  }\\n\\n  function unallocatedSeigniorageAt(uint256 snapshotId) external view returns (uint256 amount) {\\n    amount = stakeOfTotalAt(snapshotId) - stakeOfAllLayersAt(snapshotId);\\n  }\\n\\n  function stakeOf(address layer2, address account) public view returns (uint256) {\\n    return _coinages[layer2].balanceOf(account);\\n  }\\n\\n  function stakeOfAt(address layer2, address account, uint256 snapshotId) external view returns (uint256 amount) {\\n    return _coinages[layer2].balanceOfAt(account, snapshotId);\\n  }\\n\\n  function stakeOf(address account) external view returns (uint256 amount) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    // amount = 0;\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += _coinages[layer2].balanceOf(account);\\n    }\\n  }\\n\\n  function stakeOfAt(address account, uint256 snapshotId) external view returns (uint256 amount) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    // amount = 0;\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += _coinages[layer2].balanceOfAt(account, snapshotId);\\n    }\\n  }\\n\\n  function stakeOfTotal() public view returns (uint256 amount) {\\n    amount = _tot.totalSupply();\\n  }\\n\\n  function stakeOfTotalAt(uint256 snapshotId) public view returns (uint256 amount) {\\n    amount = _tot.totalSupplyAt(snapshotId);\\n  }\\n\\n  function stakeOfAllLayers() public view returns (uint256 amount) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += _coinages[layer2].totalSupply();\\n    }\\n  }\\n\\n  function stakeOfAllLayersAt(uint256 snapshotId) public view returns (uint256 amount) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += _coinages[layer2].totalSupplyAt(snapshotId);\\n    }\\n  }\\n\\n  function onSnapshot() external returns (uint256 snapshotId) {\\n    snapshotId = lastSnapshotId;\\n    emit OnSnapshot(snapshotId);\\n    lastSnapshotId++;\\n  }\\n\\n  function updateSeigniorageLayer(address layer2) external returns (bool){\\n    require(ICandidate(layer2).updateSeigniorage(), \\\"fail updateSeigniorage\\\");\\n    return true;\\n  }\\n\\n  //////////////////////////////\\n  // Public functions\\n  //////////////////////////////\\n\\n\\n  //////////////////////////////\\n  // Internal functions\\n  //////////////////////////////\\n\\n  // return \u237a, where \u237a = (tot.balanceOf(layer2) - coinages[layer2].totalSupply()) * (amount / coinages[layer2].totalSupply())\\n  function _additionalTotBurnAmount(address layer2, address account, uint256 amount)\\n    internal\\n    view\\n    returns (uint256 totAmount)\\n  {\\n    uint256 coinageTotalSupply = _coinages[layer2].totalSupply();\\n    uint256 totBalalnce = _tot.balanceOf(layer2);\\n\\n    // NOTE: arithamtic operations (mul and div) make some errors, so we gonna adjust them under 1e-9 WTON.\\n    //       note that coinageTotalSupply and totBalalnce are RAY values.\\n    if (coinageTotalSupply >= totBalalnce && coinageTotalSupply - totBalalnce < WAD_) {\\n      return 0;\\n    }\\n\\n    return rdiv(\\n      rmul(\\n        totBalalnce - coinageTotalSupply,\\n        amount\\n      ),\\n      coinageTotalSupply\\n    );\\n  }\\n\\n\\n  function _calcSeigsDistribution(\\n    address layer2,\\n    RefactorCoinageSnapshotI coinage,\\n    uint256 prevTotalSupply,\\n    uint256 seigs,\\n    bool isCommissionRateNegative_,\\n    address operator\\n  ) internal returns (\\n    uint256 nextTotalSupply,\\n    uint256 operatorSeigs\\n  ) {\\n    if (block.number >= delayedCommissionBlock[layer2] && delayedCommissionBlock[layer2] != 0) {\\n      _commissionRates[layer2] = delayedCommissionRate[layer2];\\n      _isCommissionRateNegative[layer2] = delayedCommissionRateNegative[layer2];\\n      delayedCommissionBlock[layer2] = 0;\\n    }\\n\\n    uint256 commissionRate = _commissionRates[msg.sender];\\n\\n    nextTotalSupply = prevTotalSupply + seigs;\\n\\n    // short circuit if there is no commission rate\\n    if (commissionRate == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // if commission rate is possitive\\n    if (!isCommissionRateNegative_) {\\n      operatorSeigs = rmul(seigs, commissionRate); // additional seig for operator\\n      nextTotalSupply = nextTotalSupply - operatorSeigs;\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // short circuit if there is no previous total deposit (meanning, there is no deposit)\\n    if (prevTotalSupply == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // See negative commission distribution formular here: TBD\\n    uint256 operatorBalance = coinage.balanceOf(operator);\\n\\n    // short circuit if there is no operator deposit\\n    if (operatorBalance == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    uint256 operatorRate = rdiv(operatorBalance, prevTotalSupply);\\n\\n    // \u0251: insufficient seig for operator\\n    operatorSeigs = rmul(\\n      rmul(seigs, operatorRate), // seigs for operator\\n      commissionRate\\n    );\\n\\n    // \u03b2:\\n    uint256 delegatorSeigs = operatorRate == RAY\\n      ? operatorSeigs\\n      : rdiv(operatorSeigs, RAY - operatorRate);\\n\\n    // \ud835\udf38:\\n    operatorSeigs = operatorRate == RAY\\n      ? operatorSeigs\\n      : operatorSeigs + rmul(delegatorSeigs, operatorRate);\\n\\n    nextTotalSupply = nextTotalSupply + delegatorSeigs;\\n\\n    return (nextTotalSupply, operatorSeigs);\\n  }\\n\\n  function _calcNewFactor(uint256 source, uint256 target, uint256 oldFactor) internal pure returns (uint256) {\\n    return rdiv(rmul(target, oldFactor), source);\\n  }\\n\\n\\n  function _calcNumSeigBlocks() internal view returns (uint256) {\\n    require(!paused);\\n\\n    uint256 span = block.number - _lastSeigBlock;\\n    if (_unpausedBlock < _lastSeigBlock) {\\n      return span;\\n    }\\n\\n    return span - (_unpausedBlock - _pausedBlock);\\n  }\\n\\n  function _isOperator(address layer2, address operator) internal view returns (bool) {\\n    return operator == Layer2I(layer2).operator();\\n  }\\n\\n\\n  function _increaseTot() internal returns (bool) {\\n    // short circuit if already seigniorage is given.\\n    if (block.number <= _lastSeigBlock) {\\n      return false;\\n    }\\n\\n    if (RefactorCoinageSnapshotI(_tot).totalSupply() == 0) {\\n      _lastSeigBlock = block.number;\\n      return false;\\n    }\\n\\n    uint256 prevTotalSupply;\\n    uint256 nextTotalSupply;\\n\\n    // 1. increase total supply of {tot} by maximum seigniorages * staked rate\\n    //    staked rate = total staked amount / total supply of (W)TON\\n\\n    prevTotalSupply = _tot.totalSupply();\\n\\n    // maximum seigniorages\\n    uint256 maxSeig = _calcNumSeigBlocks() * _seigPerBlock;\\n\\n    // total supply of (W)TON , https://github.com/tokamak-network/TON-total-supply\\n    uint256 tos = totalSupplyOfTon();\\n\\n    // maximum seigniorages * staked rate\\n    uint256 stakedSeig = rdiv(\\n      rmul(\\n        maxSeig,\\n        // total staked amount\\n        _tot.totalSupply()\\n      ),\\n      tos\\n    );\\n\\n    // pseig\\n    uint256 totalPseig = rmul(maxSeig - stakedSeig, relativeSeigRate);\\n\\n    nextTotalSupply = prevTotalSupply + stakedSeig + totalPseig;\\n    _lastSeigBlock = block.number;\\n\\n    _tot.setFactor(_calcNewFactor(prevTotalSupply, nextTotalSupply, _tot.factor()));\\n\\n    emit CommitLog1(\\n      _tot.totalSupply(),\\n      tos,\\n      prevTotalSupply,\\n      nextTotalSupply\\n    );\\n\\n    uint256 unstakedSeig = maxSeig - stakedSeig;\\n    uint256 powertonSeig;\\n    uint256 daoSeig;\\n    uint256 relativeSeig;\\n\\n    if (address(_powerton) != address(0)) {\\n      powertonSeig = rmul(unstakedSeig, powerTONSeigRate);\\n      IWTON(_wton).mint(address(_powerton), powertonSeig);\\n      IPowerTON(_powerton).updateSeigniorage(powertonSeig);\\n    }\\n\\n    if (dao != address(0)) {\\n      daoSeig = rmul(unstakedSeig, daoSeigRate);\\n      IWTON(_wton).mint(address(dao), daoSeig);\\n    }\\n\\n    if (relativeSeigRate != 0) {\\n      relativeSeig = totalPseig;\\n      accRelativeSeig = accRelativeSeig + relativeSeig;\\n    }\\n\\n    emit SeigGiven(msg.sender, maxSeig, stakedSeig, unstakedSeig, powertonSeig, daoSeig, relativeSeig);\\n\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // Storage getters\\n  //////////////////////////////\\n\\n  // solium-disable\\n  function registry() external view returns (address) { return address(_registry); }\\n  function depositManager() external view returns (address) { return address(_depositManager); }\\n  function ton() external view returns (address) { return address(_ton); }\\n  function wton() external view returns (address) { return address(_wton); }\\n  function powerton() external view returns (address) { return address(_powerton); }\\n  function tot() external view returns (address) { return address(_tot); }\\n  function coinages(address layer2) external view returns (address) { return address(_coinages[layer2]); }\\n  function commissionRates(address layer2) external view returns (uint256) { return _commissionRates[layer2]; }\\n  function isCommissionRateNegative(address layer2) external view returns (bool) { return _isCommissionRateNegative[layer2]; }\\n\\n  function lastCommitBlock(address layer2) external view returns (uint256) { return _lastCommitBlock[layer2]; }\\n  function seigPerBlock() external view returns (uint256) { return _seigPerBlock; }\\n  function lastSeigBlock() external view returns (uint256) { return _lastSeigBlock; }\\n  function pausedBlock() external view returns (uint256) { return _pausedBlock; }\\n  function unpausedBlock() external view returns (uint256) { return _unpausedBlock; }\\n\\n  function DEFAULT_FACTOR() external pure returns (uint256) { return _DEFAULT_FACTOR; }\\n  // solium-enable\\n\\n\\n  //====\\n  function renounceMinter(address target) public onlyOwner {\\n    MinterRoleRenounceTarget(target).renounceMinter();\\n  }\\n\\n  function renouncePauser(address target) public onlyOwner {\\n    PauserRoleRenounceTarget(target).renouncePauser();\\n  }\\n\\n  function renounceOwnership(address target) public onlyOwner {\\n    OwnableTarget(target).renounceOwnership();\\n  }\\n\\n  function transferOwnership(address target, address newOwner) public onlyOwner {\\n    OwnableTarget(target).transferOwnership(newOwner);\\n  }\\n\\n  //=====\\n\\n  function progressSnapshotId() public view returns (uint256) {\\n      return lastSnapshotId;\\n  }\\n\\n  // https://github.com/tokamak-network/TON-total-supply\\n  // 50,000,000 + 3.92*(target block # - 10837698) - TON in 0x0..1 - 178111.66690985573\\n  function totalSupplyOfTon() public view returns (uint256 tos) {\\n\\n    uint256 startBlock = (seigStartBlock == 0? SEIG_START_MAINNET: seigStartBlock);\\n    uint256 initial = (initialTotalSupply == 0? INITIAL_TOTAL_SUPPLY_MAINNET: initialTotalSupply);\\n    uint256 burntAmount =(burntAmountAtDAO == 0? BURNT_AMOUNT_MAINNET: burntAmountAtDAO);\\n\\n    tos = initial\\n      + (_seigPerBlock * (block.number - startBlock))\\n      - (ITON(_ton).balanceOf(address(1)) * (10 ** 9))\\n      - burntAmount ;\\n  }\\n\\n  // Actual wton and ton issuance amount\\n  // function totalSupplyOfTon_1() public view returns (uint256 tos) {\\n  //   tos = (\\n  //     (ITON(_ton).totalSupply() - ITON(_ton).balanceOf(_wton) - ITON(_ton).balanceOf(address(1))) * (10 ** 9)\\n  //     ) + ITON(_wton).totalSupply();\\n  // }\\n\\n  /// Unstaked wton was not reflected, this function was used as totalSupplyOfTon before 18732908 block.\\n  function totalSupplyOfTon_2() public view returns (uint256 tos) {\\n    tos = (\\n        (ITON(_ton).totalSupply() - ITON(_ton).balanceOf(_wton) - ITON(_ton).balanceOf(address(0)) - ITON(_ton).balanceOf(address(1))\\n      ) * (10 ** 9)) + (_tot.totalSupply());\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/stake/managers/SeigManagerV1_1Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title\\n/// @notice\\ncontract SeigManagerV1_1Storage  {\\n\\n    uint256 constant public SEIG_START_MAINNET = 10837698;\\n    uint256 constant public INITIAL_TOTAL_SUPPLY_MAINNET = 50000000000000000000000000000000000;\\n    uint256 constant public BURNT_AMOUNT_MAINNET = 178111666909855730000000000000000;\\n\\n    /// Seigniorage issuance start block\\n    uint256 public seigStartBlock;\\n\\n    /// initial total supply\\n    uint256 public initialTotalSupply;\\n\\n    /// burnt amount at DAO\\n    uint256 public burntAmountAtDAO;\\n\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorSeigs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotalSupply\",\"type\":\"uint256\"}],\"name\":\"AddedSeigAtLayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinage\",\"type\":\"address\"}],\"name\":\"CoinageCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"Comitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupplyOfWTON\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotalSupply\",\"type\":\"uint256\"}],\"name\":\"CommitLog1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"OnSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powertonSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pseig\",\"type\":\"uint256\"}],\"name\":\"SeigGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burntAmountAtDAO\",\"type\":\"uint256\"}],\"name\":\"SetBurntAmountAtDAO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoSeigRate\",\"type\":\"uint256\"}],\"name\":\"SetDaoSeigRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_initialTotalSupply\",\"type\":\"uint256\"}],\"name\":\"SetInitialTotalSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powerTONSeigRate\",\"type\":\"uint256\"}],\"name\":\"SetPowerTONSeigRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pseigRate\",\"type\":\"uint256\"}],\"name\":\"SetPseigRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_seigStartBlock\",\"type\":\"uint256\"}],\"name\":\"SetSeigStartBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinageBurnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totBurnAmount\",\"type\":\"uint256\"}],\"name\":\"UnstakeLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNT_AMOUNT_MAINNET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TOTAL_SUPPLY_MAINNET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALID_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VALID_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEIG_START_MAINNET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRelativeSeig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"additionalTotBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustCommissionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burntAmountAtDAO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"coinages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"commissionRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionRateNegative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"deployCoinage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"getOperatorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seigPerBlock_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastSeigBlock_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isChallenger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"isCommissionRateNegative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"lastCommitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSeigBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSnapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerTONSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressSnapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relativeSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWTONMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustDelay_\",\"type\":\"uint256\"}],\"name\":\"setAdjustDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burntAmountAtDAO\",\"type\":\"uint256\"}],\"name\":\"setBurntAmountAtDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"name\":\"setCoinageFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCommissionRateNegative_\",\"type\":\"bool\"}],\"name\":\"setCommissionRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoSeigRate_\",\"type\":\"uint256\"}],\"name\":\"setDaoSeigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"powerTONSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount_\",\"type\":\"uint256\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setInitialTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount_\",\"type\":\"uint256\"}],\"name\":\"setMinimumAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerton_\",\"type\":\"address\"}],\"name\":\"setPowerTON\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"powerTONSeigRate_\",\"type\":\"uint256\"}],\"name\":\"setPowerTONSeigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pseigRate_\",\"type\":\"uint256\"}],\"name\":\"setPseigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seigStartBlock\",\"type\":\"uint256\"}],\"name\":\"setSeigStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeOfAllLayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"stakeOfAllLayersAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"stakeOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"stakeOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeOfTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"stakeOfTotalAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOfTon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tos\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOfTon_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tos\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSeigManager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"coinages_\",\"type\":\"address[]\"}],\"name\":\"transferCoinageOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unallocatedSeigniorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"unallocatedSeigniorageAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"uncommittedStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"uncommittedStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSeigniorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"updateSeigniorageLayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SeigManagerV1_1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "625", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}