{"SourceCode": "# @version 0.3.10\r\n\r\n\"\"\"\r\n@title Simple Vesting Escrow\r\n@author Curve Finance, Yearn Finance\r\n@license MIT\r\n@notice Vests ERC20 tokens for a single address\r\n@dev Intended to be deployed many times via `VotingEscrowFactory`\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\nevent Claim:\r\n    recipient: indexed(address)\r\n    claimed: uint256\r\n\r\n\r\nevent Revoked:\r\n    recipient: address\r\n    owner: address\r\n    rugged: uint256\r\n    ts: uint256\r\n\r\n\r\nevent Disowned:\r\n    owner: address\r\n\r\n\r\nevent SetOpenClaim:\r\n    state: bool\r\n\r\n\r\nrecipient: public(address)\r\ntoken: public(ERC20)\r\nstart_time: public(uint256)\r\nend_time: public(uint256)\r\ncliff_length: public(uint256)\r\ntotal_locked: public(uint256)\r\ntotal_claimed: public(uint256)\r\ndisabled_at: public(uint256)\r\nopen_claim: public(bool)\r\ninitialized: public(bool)\r\n\r\nowner: public(address)\r\n\r\n\r\n@external\r\ndef __init__():\r\n    # ensure that the original contract cannot be initialized\r\n    self.initialized = True\r\n\r\n\r\n@external\r\ndef initialize(\r\n    owner: address,\r\n    token: ERC20,\r\n    recipient: address,\r\n    amount: uint256,\r\n    start_time: uint256,\r\n    end_time: uint256,\r\n    cliff_length: uint256,\r\n    open_claim: bool,\r\n) -> bool:\r\n    \"\"\"\r\n    @notice Initialize the contract\r\n    @dev This function is seperate from `__init__` because of the factory pattern\r\n         used in `VestingEscrowFactory.deploy_vesting_contract`. It may be called\r\n         once per deployment\r\n    @param owner Owner address\r\n    @param token Address of the ERC20 token being distributed\r\n    @param recipient Address to vest tokens for\r\n    @param amount Amount of tokens being vested for `recipient`\r\n    @param start_time Epoch time at which token distribution starts\r\n    @param end_time Time until everything should be vested\r\n    @param cliff_length Duration (in seconds) after which the first portion vests\r\n    @param open_claim Switch if anyone can claim for `recipient`\r\n    \"\"\"\r\n    assert not self.initialized  # dev: can only initialize once\r\n    self.initialized = True\r\n\r\n    self.token = token\r\n    self.owner = owner\r\n    self.start_time = start_time\r\n    self.end_time = end_time\r\n    self.cliff_length = cliff_length\r\n\r\n    self.recipient = recipient\r\n    self.disabled_at = end_time  # Set to maximum time\r\n    self.total_locked = amount\r\n    self.open_claim = open_claim\r\n\r\n    return True\r\n\r\n\r\n@internal\r\n@view\r\ndef _total_vested_at(time: uint256 = block.timestamp) -> uint256:\r\n    start: uint256 = self.start_time\r\n    end: uint256 = self.end_time\r\n    locked: uint256 = self.total_locked\r\n    if time < start + self.cliff_length:\r\n        return 0\r\n    return min(locked * (time - start) / (end - start), locked)\r\n\r\n\r\n@internal\r\n@view\r\ndef _unclaimed(time: uint256 = block.timestamp) -> uint256:\r\n    return self._total_vested_at(time) - self.total_claimed\r\n\r\n\r\n@external\r\n@view\r\ndef unclaimed() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of unclaimed, vested tokens for recipient\r\n    @dev If `revoke` is activated, limit by the activation timestamp\r\n    \"\"\"\r\n    return self._unclaimed(min(block.timestamp, self.disabled_at))\r\n\r\n\r\n@internal\r\n@view\r\ndef _locked(time: uint256 = block.timestamp) -> uint256:\r\n    return self._total_vested_at(self.disabled_at) - self._total_vested_at(time)\r\n\r\n\r\n@external\r\n@view\r\ndef locked() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of locked tokens for recipient\r\n    @dev If `revoke` is activated, limit by the activation timestamp\r\n    \"\"\"\r\n    return self._locked(min(block.timestamp, self.disabled_at))\r\n\r\n\r\n@external\r\ndef claim(beneficiary: address = msg.sender, amount: uint256 = max_value(uint256)) -> uint256:\r\n    \"\"\"\r\n    @notice Claim tokens which have vested\r\n    @param beneficiary Address to transfer claimed tokens to\r\n    @param amount Amount of tokens to claim\r\n    \"\"\"\r\n    recipient: address = self.recipient\r\n    assert msg.sender == recipient or self.open_claim and recipient == beneficiary  # dev: not authorized\r\n\r\n    claim_period_end: uint256 = min(block.timestamp, self.disabled_at)\r\n    claimable: uint256 = min(self._unclaimed(claim_period_end), amount)\r\n    self.total_claimed += claimable\r\n\r\n    assert self.token.transfer(beneficiary, claimable, default_return_value=True)\r\n    log Claim(beneficiary, claimable)\r\n\r\n    return claimable\r\n\r\n\r\n@external\r\ndef revoke(ts: uint256 = block.timestamp, beneficiary: address = msg.sender):\r\n    \"\"\"\r\n    @notice Disable further flow of tokens and clawback the unvested part to `beneficiary`\r\n            Revoking more than once is futile\r\n    @dev Owner is set to zero address\r\n    @param ts Timestamp of the clawback\r\n    @param beneficiary Recipient of the unvested part\r\n    \"\"\"\r\n    owner: address = self.owner\r\n    assert msg.sender == owner  # dev: not owner\r\n    assert ts >= block.timestamp and ts < self.end_time  # dev: no back to the future\r\n\r\n    ruggable: uint256 = self._locked(ts)\r\n    self.disabled_at = ts\r\n\r\n    assert self.token.transfer(beneficiary, ruggable, default_return_value=True)\r\n\r\n    self.owner = empty(address)\r\n\r\n    log Disowned(owner)\r\n    log Revoked(self.recipient, owner, ruggable, ts)\r\n\r\n\r\n@external\r\ndef disown():\r\n    \"\"\"\r\n    @notice Renounce owner control of the escrow\r\n    \"\"\"\r\n    owner: address = self.owner\r\n    assert msg.sender == owner  # dev: not owner\r\n    self.owner = empty(address)\r\n\r\n    log Disowned(owner)\r\n\r\n\r\n@external\r\ndef set_open_claim(open_claim: bool):\r\n    \"\"\"\r\n    @notice Disallow or let anyone claim tokens for `recipient`\r\n    \"\"\"\r\n    assert msg.sender == self.recipient  # dev: not recipient\r\n    self.open_claim = open_claim\r\n\r\n    log SetOpenClaim(open_claim)\r\n\r\n\r\n@external\r\ndef collect_dust(token: ERC20, beneficiary: address = msg.sender):\r\n    recipient: address = self.recipient\r\n    assert msg.sender == recipient or self.open_claim and recipient == beneficiary  # dev: not authorized\r\n\r\n    amount: uint256 = token.balanceOf(self)\r\n    if token == self.token:\r\n        amount = amount + self.total_claimed - self._total_vested_at(self.disabled_at)\r\n\r\n    assert token.transfer(beneficiary, amount, default_return_value=True)", "ABI": "[{\"name\":\"Claim\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true},{\"name\":\"claimed\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Revoked\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":false},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"rugged\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"ts\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Disowned\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetOpenClaim\",\"inputs\":[{\"name\":\"state\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start_time\",\"type\":\"uint256\"},{\"name\":\"end_time\",\"type\":\"uint256\"},{\"name\":\"cliff_length\",\"type\":\"uint256\"},{\"name\":\"open_claim\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"unclaimed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"locked\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revoke\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revoke\",\"inputs\":[{\"name\":\"ts\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revoke\",\"inputs\":[{\"name\":\"ts\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"disown\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_open_claim\",\"inputs\":[{\"name\":\"open_claim\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"collect_dust\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"collect_dust\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"recipient\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"start_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"end_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cliff_length\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_locked\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_claimed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"disabled_at\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"open_claim\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initialized\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Simple Vesting Escrow", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}