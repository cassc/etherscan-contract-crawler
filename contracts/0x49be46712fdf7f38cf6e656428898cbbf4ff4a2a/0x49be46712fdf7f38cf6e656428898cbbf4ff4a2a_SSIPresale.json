{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function mint(uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Permit {\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function getAmountsOut(\r\n        uint amountIn, \r\n        address[] memory path\r\n        ) external view returns (uint[] memory amounts);\r\n    \r\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (uint256);\r\n}\r\n\r\ncontract SSIPresale is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    AggregatorInterface public constant ethUsdData = AggregatorInterface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n    AggregatorInterface public constant bnbUsdData = AggregatorInterface(0x14e613AC84a31f709eadbdF89C6CC390fDc9540A);\r\n\r\n    event Buy(address indexed _account, uint256 _tokenAmount, uint256 _phase);\r\n    event BuyWithBnb(address indexed _account, uint256 _tokenAmount, uint256 _nonce,uint256 _phase);\r\n\r\n    \r\n    struct Phase {\r\n        uint256 roundId;\r\n        uint256 maxTokens;\r\n        uint256 tokensSold;\r\n        uint256 fundsRaisedEth;\r\n        uint256 fundsRaisedUsdt;\r\n        uint256 fundsRaisedBnb;\r\n        uint256 tokenPriceInUsd;\r\n        uint256 claimStart;\r\n    }\r\n\r\n    struct AddPhase {\r\n        uint256 roundId;\r\n        uint256 maxTokens;\r\n        uint256 tokenPriceInUsd;\r\n        uint256 claimStart;\r\n    }\r\n\r\n    struct ClaimableAmount {\r\n        uint256 roundId;\r\n        address account;\r\n        uint256 tokenAmount;\r\n    }\r\n\r\n    mapping (uint256 => Phase) public phase;\r\n    mapping (address => mapping(uint256 =>  uint256)) public deservedAmount;\r\n    mapping (address => mapping(uint256 =>  uint256)) public claimedAmount;\r\n    mapping(uint256 => bool) public isSold;\r\n\r\n\r\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public constant BNB = 0xB8c77482e45F1F44dE1745F52C74426C631bDD52;\r\n    \r\n    bool public isWhitelistPresale;\r\n    address public bnbAdministrator;\r\n\r\n    address public tokenAddress;\r\n    uint256 private tokenWithDecimals = 1e18; \r\n\r\n    IRouter public router;\r\n    address private WETH;\r\n    uint256 public activePhase = 1;\r\n    bool public isAutoMovePhase = true;\r\n    uint256 public discountRate = 10;\r\n    bool public isClaimableActive;\r\n\r\n    modifier onlyBnbAdministrator() {\r\n        require(owner() == _msgSender() || bnbAdministrator == _msgSender(), \"Ownable: caller is not the owner or administrator\");\r\n        require(phase[activePhase].maxTokens > 0,\"Phase is not active or presale ended\");\r\n        _;\r\n    }\r\n\r\n\r\n    function addPhases(AddPhase[] calldata _addPhase) external onlyOwner {\r\n        for(uint256 i = 0; i < _addPhase.length ; i++) {\r\n            phase[_addPhase[i].roundId].roundId = _addPhase[i].roundId;\r\n            phase[_addPhase[i].roundId].maxTokens = _addPhase[i].maxTokens;\r\n            phase[_addPhase[i].roundId].tokenPriceInUsd = _addPhase[i].tokenPriceInUsd;\r\n            phase[_addPhase[i].roundId].claimStart = _addPhase[i].claimStart;\r\n        }\r\n    }\r\n\r\n    function getPhases(uint256[] calldata _roundId) public view returns(Phase[] memory){\r\n        Phase[] memory _phase = new Phase[](_roundId.length);\r\n        for(uint256 i = 0 ; i < _roundId.length ; i++) {\r\n            _phase[i] = phase[_roundId[i]];\r\n        }\r\n        return _phase;\r\n    }\r\n\r\n\r\n    function updatePhaseClaimTime(uint256 _roundId, uint256 _startTime)external onlyOwner{\r\n            phase[_roundId].claimStart = _startTime;\r\n\r\n    }\r\n    function setActivePhase(uint256 _roundId, bool _isAutoPhase) external onlyOwner {\r\n        activePhase = _roundId;\r\n        isAutoMovePhase = _isAutoPhase;\r\n    }\r\n\r\n    function currentTimestamp() public view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function buyTokensWithEth() public payable {\r\n        require(phase[activePhase].maxTokens > 0,\"Phase is not active\");\r\n        require(msg.value > 0, \"Must send ETH to get tokens\");\r\n        uint256 ethAmount = msg.value;\r\n        uint256 tokenAmount = estimatedToken(ethAmount);\r\n        bool isReachMaxAmount;\r\n        if(!(phase[activePhase].maxTokens > tokenAmount + phase[activePhase].tokensSold) && isAutoMovePhase){\r\n            uint256 tokenAmount2 = phase[activePhase].maxTokens - phase[activePhase].tokensSold;\r\n            \r\n            uint newEthAmount = ethAmount.mul(tokenAmount2).div(tokenAmount);\r\n            uint256 returnAmount = ethAmount.sub(newEthAmount);\r\n            returnEth(msg.sender, returnAmount);\r\n            ethAmount = newEthAmount;\r\n            tokenAmount = tokenAmount2;\r\n            isReachMaxAmount = true;\r\n\r\n        }\r\n\r\n        phase[activePhase].tokensSold += tokenAmount;\r\n        phase[activePhase].fundsRaisedEth += ethAmount;\r\n        deservedAmount[msg.sender][activePhase] += tokenAmount;\r\n        emit Buy(msg.sender, tokenAmount, activePhase);\r\n        if(isReachMaxAmount){\r\n            activePhase++;\r\n        }\r\n    }\r\n\r\n    function buyTokensWithUsdt(uint256 _tokenAmount) public {\r\n        require(phase[activePhase].maxTokens > 0,\"Phase is not active\");\r\n        require(_tokenAmount > 0, \"Must send USDT to get tokens\");\r\n        bool isReachMaxAmount;\r\n\r\n        IERC20(USDT).safeTransferFrom(msg.sender, address(this), _tokenAmount);\r\n\r\n        uint256 tokenPriceInUsd = getCurrentTokenPrice();\r\n\r\n        uint256 tokenAmount = _tokenAmount.mul(tokenWithDecimals).div(tokenPriceInUsd);\r\n\r\n        if(!(phase[activePhase].maxTokens > tokenAmount + phase[activePhase].tokensSold) && isAutoMovePhase){\r\n            uint256 tokenAmount2 = phase[activePhase].maxTokens - phase[activePhase].tokensSold;\r\n            uint256 returnAmount = _tokenAmount.sub(_tokenAmount.mul(tokenAmount2).div(tokenAmount));\r\n            IERC20(USDT).safeTransfer(msg.sender, returnAmount);\r\n\r\n            tokenAmount = tokenAmount2;\r\n            isReachMaxAmount = true;\r\n        }\r\n\r\n        phase[activePhase].tokensSold += tokenAmount;\r\n        phase[activePhase].fundsRaisedUsdt += _tokenAmount;\r\n        deservedAmount[msg.sender][activePhase] += tokenAmount;\r\n        emit Buy(msg.sender, tokenAmount, activePhase);\r\n\r\n\r\n        if(isReachMaxAmount){\r\n            activePhase++;\r\n        } \r\n    }\r\n\r\n    function setClaimableAmount(ClaimableAmount[] calldata _claimableAmounts ) external onlyOwner {\r\n        for(uint256 i = 0 ; i < _claimableAmounts.length; i ++){\r\n            deservedAmount[_claimableAmounts[i].account][_claimableAmounts[i].roundId] = _claimableAmounts[i].tokenAmount;\r\n        }\r\n    }\r\n\r\n    function buyWithBnbChain(address _account, uint256 _tokenAmount, uint256 _nonce) public onlyBnbAdministrator {\r\n        require(phase[activePhase].maxTokens > 0,\"Phase is not active\");\r\n        require(_tokenAmount > 0);\r\n        require(!isSold[_nonce],\"Already sended token\");\r\n        if(!(phase[activePhase].maxTokens > _tokenAmount + phase[activePhase].tokensSold) && isAutoMovePhase ){\r\n            uint256 _latestPhaseTokenAmount = phase[activePhase].maxTokens - phase[activePhase].tokensSold;\r\n            uint256 _remainingTokenAmount = _tokenAmount - _latestPhaseTokenAmount;\r\n            uint256 _finalPhaseTokenAmount = (phase[activePhase].tokenPriceInUsd.mul(_remainingTokenAmount)).div(phase[activePhase + 1].tokenPriceInUsd);\r\n            phase[activePhase].tokensSold += _latestPhaseTokenAmount;\r\n            deservedAmount[_account][activePhase] += _latestPhaseTokenAmount;\r\n\r\n            emit Buy(_account, _latestPhaseTokenAmount, activePhase);\r\n\r\n            activePhase++;\r\n\r\n            phase[activePhase].tokensSold += _finalPhaseTokenAmount;\r\n            deservedAmount[_account][activePhase] += _finalPhaseTokenAmount;\r\n\r\n            emit Buy(_account, _finalPhaseTokenAmount, activePhase);\r\n            isSold[_nonce] = true;\r\n\r\n\r\n        }else{\r\n            phase[activePhase].tokensSold += _tokenAmount;\r\n            deservedAmount[_account][activePhase] += _tokenAmount;\r\n\r\n            emit BuyWithBnb(_account, _tokenAmount,_nonce, activePhase);\r\n            isSold[_nonce] = true;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function claim(uint256 _currentPhase) external {\r\n        require(isClaimableActive, \"Claimable is not active yet\");\r\n        require(phase[_currentPhase].maxTokens > 0,\"Phase is not active\");\r\n        require(block.timestamp > phase[_currentPhase].claimStart , \"Claiming Not Started Yet\" );\r\n        uint256 claimableReward = deservedAmount[msg.sender][_currentPhase] - claimedAmount[msg.sender][_currentPhase];\r\n        require(claimableReward > 0, \"There is no reward\" );\r\n        claimedAmount[msg.sender][_currentPhase] = deservedAmount[msg.sender][_currentPhase];\r\n        IERC20(tokenAddress).safeTransfer(msg.sender, claimableReward);\r\n    }\r\n\r\n    function claimAll(uint256[] calldata _phases) external {\r\n        require(isClaimableActive, \"Claimable is not active yet\");\r\n        uint256 claimableReward;\r\n        for(uint256 i = 0 ; i < _phases.length ; i++) {\r\n            require(phase[_phases[i]].maxTokens > 0,\"Phase is not active\");\r\n            require(block.timestamp > phase[_phases[i]].claimStart , \"Claiming Not Started Yet\" );\r\n            claimableReward += deservedAmount[msg.sender][_phases[i]] - claimedAmount[msg.sender][_phases[i]];\r\n            claimedAmount[msg.sender][_phases[i]] = deservedAmount[msg.sender][_phases[i]];\r\n        }\r\n        require(claimableReward > 0, \"There is no reward\" );\r\n        IERC20(tokenAddress).safeTransfer(msg.sender, claimableReward);\r\n    }\r\n\r\n    function claimableAmount(address _account,uint256[] calldata _phases) public view returns(uint256) {\r\n        uint256 claimableReward;\r\n        for(uint256 i = 0 ; i < _phases.length ; i++) {\r\n            claimableReward += deservedAmount[_account][_phases[i]] - claimedAmount[_account][_phases[i]];\r\n        }\r\n        return claimableReward;\r\n    }\r\n\r\n    \r\n\r\n     function usdToEth(uint256 _amount) public view returns(uint256) {\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = WETH;\r\n        path[1] = USDT;\r\n        uint256[] memory amounts = router.getAmountsIn(_amount,path);\r\n        return amounts[0];\r\n    }\r\n\r\n    \r\n    // owner can withdraw ETH after people get tokens\r\n    function withdrawETH(uint256 _ethAmount) external onlyOwner {\r\n\r\n        ( bool success,) = owner().call{value: _ethAmount}(\"\");\r\n        require(success, \"Withdrawal was not successful\");\r\n    }\r\n\r\n    function returnEth(address _account, uint256 _amount) internal {\r\n        ( bool success,) = _account.call{value: _amount}(\"\");\r\n        require(success, \"Withdrawal was not successful\");\r\n    }\r\n\r\n    function withdrawToken(address _tokenAddress,uint256 _amount) external onlyOwner {\r\n        IERC20(_tokenAddress).safeTransfer(owner(),_amount);\r\n    }\r\n\r\n    function getEthPrice() public view returns(uint256) {\r\n        return ethUsdData.latestAnswer();\r\n    } \r\n\r\n    function getBnbPrice() public view returns(uint256) {\r\n        return bnbUsdData.latestAnswer();\r\n    } \r\n\r\n    function getEthToUsd(uint256 _ethAmount) public view returns(uint256){\r\n        return _ethAmount.mul(getEthPrice()).div(1e18); \r\n    }\r\n\r\n    function getBnbToUsd(uint256 _bnbAmount) public view returns(uint256){\r\n        return _bnbAmount.mul(getBnbPrice()).div(1e18); \r\n    }\r\n\r\n    function estimatedToken (uint256 _weiAmount) public view returns (uint256) {\r\n        uint256 tokenPriceInUsd =getCurrentTokenPrice();\r\n        uint256 tokensPerEth = usdToEth(tokenPriceInUsd);\r\n        return (_weiAmount / tokensPerEth) * tokenWithDecimals;\r\n\r\n    }\r\n\r\n    function getEstimatedTokenAmount(uint256 _bnbAmount,uint256 _tokenPriceInUsd) public view returns(uint256) {\r\n        return getBnbToUsd(_bnbAmount).mul(tokenWithDecimals).div(100).div(_tokenPriceInUsd);\r\n    }\r\n\r\n    function getEstimatedUsdtTokenAmount(uint256 _usdtAmount,uint256 _tokenPriceInUsd) public view returns(uint256) {\r\n        return _usdtAmount.mul(tokenWithDecimals).div(_tokenPriceInUsd);\r\n    }\r\n\r\n    function _swapToUsdt(uint256 _weiAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = USDT;\r\n\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value : _weiAmount}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getCurrentTokenPrice() public view returns(uint256) {\r\n        uint256 tokenPriceInUsd = phase[activePhase].tokenPriceInUsd;\r\n        if(isWhitelistPresale){\r\n            tokenPriceInUsd = tokenPriceInUsd * (100 - discountRate) / 100;\r\n        }\r\n        return tokenPriceInUsd;\r\n    }\r\n\r\n    constructor(address _router, address _bnbAdministrator) {        \r\n        router = IRouter(_router);\r\n        WETH = router.WETH();\r\n        bnbAdministrator = _bnbAdministrator;\r\n    }\r\n\r\n    function transferBnbAdministrator( address _newAddress) external onlyOwner {\r\n        bnbAdministrator = _newAddress;\r\n    }\r\n    \r\n    function setToken(address _token) external onlyOwner {\r\n        tokenAddress = _token;\r\n    }\r\n\r\n    function claimableStatus(bool _flag) external onlyOwner{\r\n        isClaimableActive = _flag;\r\n    }\r\n    \r\n    receive() external payable {\r\n        buyTokensWithEth();\r\n    }\r\n    \r\n    function setWhiteListPresale(bool _flag) external onlyOwner {\r\n        isWhitelistPresale = _flag;\r\n    }\r\n    \r\n\r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnbAdministrator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_phase\",\"type\":\"uint256\"}],\"name\":\"BuyWithBnb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"}],\"internalType\":\"struct SSIPresale.AddPhase[]\",\"name\":\"_addPhase\",\"type\":\"tuple[]\"}],\"name\":\"addPhases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbUsdData\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"buyWithBnbChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPhase\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_phases\",\"type\":\"uint256[]\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_phases\",\"type\":\"uint256[]\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"claimableStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deservedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"estimatedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUsdData\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBnbPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bnbAmount\",\"type\":\"uint256\"}],\"name\":\"getBnbToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bnbAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPriceInUsd\",\"type\":\"uint256\"}],\"name\":\"getEstimatedTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPriceInUsd\",\"type\":\"uint256\"}],\"name\":\"getEstimatedUsdtTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getEthToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_roundId\",\"type\":\"uint256[]\"}],\"name\":\"getPhases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsRaisedEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsRaisedUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsRaisedBnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"}],\"internalType\":\"struct SSIPresale.Phase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoMovePhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimableActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isSold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsRaisedEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsRaisedUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsRaisedBnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAutoPhase\",\"type\":\"bool\"}],\"name\":\"setActivePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct SSIPresale.ClaimableAmount[]\",\"name\":\"_claimableAmounts\",\"type\":\"tuple[]\"}],\"name\":\"setClaimableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setWhiteListPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"transferBnbAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updatePhaseClaimTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SSIPresale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000038838d2971027c55b66a1de13f83561552d26c96", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c13833c2cc8d1ba403e9fe5ae0596b6bafc92bbc5f6d2578ef43536dffb6d772"}