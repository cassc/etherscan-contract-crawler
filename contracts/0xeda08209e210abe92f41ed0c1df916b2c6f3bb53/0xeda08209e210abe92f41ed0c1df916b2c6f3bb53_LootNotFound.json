{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/* \r\nhttps://t.me/fourohfourloot\r\nhttps://twitter.com/404loot\r\nhttps://404loot.com/\r\n*/\r\n\r\npragma solidity ^0.8.24;\r\n\r\ninterface IERC20 {\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction allowance(address, address) external view returns (uint256);\r\n\tfunction transfer(address, uint256) external returns (bool);\r\n\tfunction transferFrom(address, address, uint256) external returns (bool);\r\n}\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    error Unauthorized();\r\n    error InvalidOwner();\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        if (msg.sender != owner) revert Unauthorized();\r\n\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner) {\r\n        if (_owner == address(0)) revert InvalidOwner();\r\n\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function transferOwnership(address _owner) public virtual onlyOwner {\r\n        if (_owner == address(0)) revert InvalidOwner();\r\n\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(msg.sender, _owner);\r\n    }\r\n\r\n    function revokeOwnership() public virtual onlyOwner {\r\n        owner = address(0);\r\n\r\n        emit OwnershipTransferred(msg.sender, address(0));\r\n    }\r\n}\r\n\r\nabstract contract ERC721Receiver {\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external virtual returns (bytes4) {\r\n        return ERC721Receiver.onERC721Received.selector;\r\n    }\r\n}\r\n\r\nabstract contract ERC404 is Ownable {\r\n    event ERC20Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed id\r\n    );\r\n    event ERC721Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 indexed id\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n    \r\n    error NotFound();\r\n    error AlreadyExists();\r\n    error InvalidRecipient();\r\n    error InvalidSender();\r\n    error UnsafeRecipient();\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public immutable decimals;\r\n    uint256 public immutable totalSupply;\r\n    uint256 public minted;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(uint256 => address) public getApproved;\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n    mapping(uint256 => address) internal _ownerOf;\r\n    mapping(address => uint256[]) private _owned;\r\n\r\n\tfunction getLastOwnedTokenId(address owner) internal view returns (uint256) {\r\n\t\trequire(_owned[owner].length > 0, \"Owner has no tokens\");\r\n\t\treturn _owned[owner][_owned[owner].length - 1];\r\n\t}\r\n\tfunction getOwnedTokens(address owner) internal view returns(uint[] memory){\r\n\t\treturn _owned[owner];\r\n\t}\r\n\r\n    mapping(uint256 => uint256) internal _ownedIndex;\r\n    mapping(address => bool) public whitelist;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalNativeSupply,\r\n        address _owner\r\n    ) Ownable(_owner) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalNativeSupply * (10 ** decimals);\r\n        setWhitelist(_owner,true);\r\n    }\r\n\r\n    function setWhitelist(address target, bool state) public onlyOwner {\r\n        whitelist[target] = state;\r\n    }\r\n \r\n    function setWhitelist() public {\r\n    \tif(balanceOf[msg.sender]==0)\r\n        \twhitelist[msg.sender] = true;\r\n    }\r\n\r\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\r\n        owner = _ownerOf[id];\r\n\r\n        if (owner == address(0)) {\r\n            revert NotFound();\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amountOrId\r\n    ) public virtual returns (bool) {\r\n        if (amountOrId <= minted && amountOrId > 0) {\r\n            address owner = _ownerOf[amountOrId];\r\n\r\n            if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) {\r\n                revert Unauthorized();\r\n            }\r\n\r\n            getApproved[amountOrId] = spender;\r\n\r\n            emit Approval(owner, spender, amountOrId);\r\n        } else {\r\n            allowance[msg.sender][spender] = amountOrId;\r\n\r\n            emit Approval(msg.sender, spender, amountOrId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amountOrId\r\n    ) public virtual {\r\n        if (amountOrId <= minted) {\r\n            if (from != _ownerOf[amountOrId]) {\r\n                revert InvalidSender();\r\n            }\r\n\r\n            if (to == address(0)) {\r\n                revert InvalidRecipient();\r\n            }\r\n\r\n            if (\r\n                msg.sender != from &&\r\n                !isApprovedForAll[from][msg.sender] &&\r\n                msg.sender != getApproved[amountOrId]\r\n            ) {\r\n                revert Unauthorized();\r\n            }\r\n\r\n            balanceOf[from] -= _getUnit();\r\n\r\n            unchecked {\r\n                balanceOf[to] += _getUnit();\r\n            }\r\n\r\n            _ownerOf[amountOrId] = to;\r\n            delete getApproved[amountOrId];\r\n\r\n            uint256 updatedId = _owned[from][_owned[from].length - 1];\r\n            _owned[from][_ownedIndex[amountOrId]] = updatedId;\r\n            _owned[from].pop();\r\n            _ownedIndex[updatedId] = _ownedIndex[amountOrId];\r\n            _owned[to].push(amountOrId);\r\n            _ownedIndex[amountOrId] = _owned[to].length - 1;\r\n\r\n            emit Transfer(from, to, amountOrId);\r\n            emit ERC20Transfer(from, to, _getUnit());\r\n        } else {\r\n            uint256 allowed = allowance[from][msg.sender];\r\n\r\n            if (allowed != type(uint256).max)\r\n                allowance[from][msg.sender] = allowed - amountOrId;\r\n\r\n            _transfer(from, to, amountOrId);\r\n        }\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        return _transfer(msg.sender, to, amount);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (\r\n            to.code.length != 0 &&\r\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, \"\") !=\r\n            ERC721Receiver.onERC721Received.selector\r\n        ) {\r\n            revert UnsafeRecipient();\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (\r\n            to.code.length != 0 &&\r\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, data) !=\r\n            ERC721Receiver.onERC721Received.selector\r\n        ) {\r\n            revert UnsafeRecipient();\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 unit = _getUnit();\r\n        uint256 balanceBeforeSender = balanceOf[from];\r\n        uint256 balanceBeforeReceiver = balanceOf[to];\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        // Skip burn for certain addresses to save gas\r\n        if (!whitelist[from]) {\r\n            uint256 tokens_to_burn = (balanceBeforeSender / unit) - (balanceOf[from] / unit);\r\n            for (uint256 i = 0; i < tokens_to_burn; i++) {\r\n                _burn(from);\r\n            }\r\n        }\r\n\r\n        // Skip minting for certain addresses to save gas\r\n        if (!whitelist[to]) {\r\n            uint256 tokens_to_mint = (balanceOf[to] / unit) - (balanceBeforeReceiver / unit);\r\n            for (uint256 i = 0; i < tokens_to_mint; i++) {\r\n                _mint(to);\r\n            }\r\n        }\r\n\r\n        emit ERC20Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _getUnit() internal view returns (uint256) {\r\n        return 10 ** decimals;\r\n    }\r\n\r\n    function _mint(address to) internal virtual {\r\n        if (to == address(0)) {\r\n            revert InvalidRecipient();\r\n        }\r\n\r\n        unchecked {\r\n            minted++;\r\n        }\r\n\r\n        uint256 id = minted;\r\n\r\n        if (_ownerOf[id] != address(0)) {\r\n            revert AlreadyExists();\r\n        }\r\n\r\n        _ownerOf[id] = to;\r\n        _owned[to].push(id);\r\n        _ownedIndex[id] = _owned[to].length - 1;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function _burn(address from) internal virtual {\r\n        if (from == address(0)) {\r\n            revert InvalidSender();\r\n        }\r\n\r\n        uint256 id = _owned[from][_owned[from].length - 1];\r\n        _owned[from].pop();\r\n        delete _ownedIndex[id];\r\n        delete _ownerOf[id];\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(from, address(0), id);\r\n    }\r\n\r\n    function _setNameSymbol(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) internal {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n}\r\n\r\ncontract LootNotFound is ERC404 {\r\n\r\n    string[] private weapons = [\r\n        \"DDoS Cannon\",\r\n        \"Keylogger Rod\",\r\n        \"Malware Injector\",\r\n        \"Phishing Spear\",\r\n        \"Brute Forcer\",\r\n        \"Encryption Cutter\",\r\n        \"Script Blade\",\r\n        \"Ransomware Slicer\",\r\n        \"Firewall Breacher\",\r\n        \"Virus Shard\",\r\n        \"Stealth Scanner\",\r\n        \"Data Wiper\",\r\n        \"Botnet Controller\",\r\n        \"Exploit Probe\",\r\n        \"Hacker's Handbook\",\r\n        \"Code Repository\",\r\n        \"Protocol Tome\",\r\n        \"Algorithm Volume\"\r\n    ];\r\n    \r\n    string[] private chestArmor = [\r\n        \"Quantum Cloak\",\r\n        \"Stealth Mesh\",\r\n        \"Proxy Vest\",\r\n        \"Encryption Weave\",\r\n        \"Anonymity Overlay\",\r\n        \"Malware Guard\",\r\n        \"Firewall Matrix\",\r\n        \"Anti-Virus Jacket\",\r\n        \"Spyware Shield\",\r\n        \"Intrusion Detector Suit\",\r\n        \"Secure Kernel Plate\",\r\n        \"Advanced Encryption Plate\",\r\n        \"Network Fortress Shell\",\r\n        \"Phishing Filter Mesh\",\r\n        \"Data Encryption Wrap\"\r\n    ];\r\n    \r\n    string[] private headArmor = [\r\n        \"Root Access Visor\",\r\n        \"Crypto Cap\",\r\n        \"Stealth Interface\",\r\n        \"Network Helmet\",\r\n        \"Hacker Hood\",\r\n        \"Zero-Day Tiara\",\r\n        \"Admin Crown\",\r\n        \"Script Kiddie Cap\",\r\n        \"Phreaker's Cap\",\r\n        \"Debugger's Cap\",\r\n        \"Sovereign Firewall Crown\",\r\n        \"Anonymizer Hood\",\r\n        \"Datastream Hood\",\r\n        \"Signal Jammer Hood\",\r\n        \"Stealth Mode Hood\"\r\n    ];\r\n    \r\n    string[] private waistArmor = [\r\n        \"Encrypted Keyring\",\r\n        \"Utility Belt\",\r\n        \"Password Vault\",\r\n        \"Connectivity Mesh\",\r\n        \"Bandwidth Harness\",\r\n        \"Anonymity Belt\",\r\n        \"Firewall Waistguard\",\r\n        \"Anti-Malware Belt\",\r\n        \"Data Protection Belt\",\r\n        \"Code Secure Belt\",\r\n        \"Fiber-Optic Sash\",\r\n        \"Stealth Cable Wrap\",\r\n        \"Bandwidth Sash\",\r\n        \"Network Sash\",\r\n        \"Script Sash\"\r\n    ];\r\n    \r\n    string[] private footArmor = [\r\n        \"Stealth Steps\",\r\n        \"Encryption Boots\",\r\n        \"Proxy Treads\",\r\n        \"Secure Line Boots\",\r\n        \"Firewall Stompers\",\r\n        \"Anonymity Sneakers\",\r\n        \"Data Trail Erasers\",\r\n        \"Malware Kicker Boots\",\r\n        \"Anti-Phishing Loafers\",\r\n        \"Code Walker Shoes\",\r\n        \"Silent Access Slides\",\r\n        \"Lightweight Process Sneakers\",\r\n        \"Comfort Coding Shoes\",\r\n        \"Casual Browsing Loafers\",\r\n        \"Debugging Slippers\"\r\n    ];\r\n    \r\n    string[] private handArmor = [\r\n        \"Encryption Gloves\",\r\n        \"Command Line Gloves\",\r\n        \"Hacking Gloves\",\r\n        \"Data Gloves\",\r\n        \"Firewall Gauntlets\",\r\n        \"Spoofing Gloves\",\r\n        \"Code Crafting Gloves\",\r\n        \"Anti-Hack Mitts\",\r\n        \"Scripting Gloves\",\r\n        \"Keygen Gloves\",\r\n        \"Stealth Mode Gloves\",\r\n        \"Precision Typing Gloves\",\r\n        \"Comfort Coding Gloves\",\r\n        \"Quick Command Gloves\",\r\n        \"Multi-Tool Wraps\"\r\n    ];\r\n    \r\n    string[] private necklaces = [\r\n        \"Identity Token\",\r\n        \"Encryption Amulet\",\r\n        \"Data Pendant\"\r\n    ];\r\n    \r\n    string[] private rings = [\r\n        \"Quantum Ring\",\r\n        \"Crypto Ring\",\r\n        \"Hacker's Ring\",\r\n        \"Stealth Ring\",\r\n        \"Firewall Ring\"\r\n    ];\r\n    \r\n    string[] private suffixes = [\r\n        \"of Overclocking\",\r\n        \"of Supercomputers\",\r\n        \"of Cryptography\",\r\n        \"of Coding\",\r\n        \"of Optimization\",\r\n        \"of Quantum Computing\",\r\n        \"of Open Source\",\r\n        \"of Encryption\",\r\n        \"of System Intrusion\",\r\n        \"of Network Assault\",\r\n        \"of Data Breach\",\r\n        \"of Malware\",\r\n        \"of Anonymity\",\r\n        \"of Surveillance\",\r\n        \"of Firewall\",\r\n        \"of Dual-Core\"\r\n    ];\r\n    \r\n    string[] private namePrefixes = [\r\n        \"Byte\", \"Zero Day\", \"Blackout\", \"Trojan\", \"Mainframe\", \"Virus\", \"Phreak\", \"Sniffer\", \r\n        \"Brute Force\", \"Cluster\", \"Cache\", \"DDoS\", \"Hybrid Cloud\", \"Zombie PC\", \"Corruptor\", \"Data Leak\", \r\n        \"Deadlock\", \"Daemon\", \"Debug\", \"Firewall\", \"Dark Web\", \"DoS\", \"Dusknet\", \"Eagle Eye\", \"Cloud\", \"Fatal Error\", \"Phisher\", \r\n        \"Gigabit\", \"Ghost Protocol\", \"Glitch\", \"Glyph Code\", \"Golem Grid\", \"Grim Hacker\", \"Hash\", \"Hacker\", \"Honorary Member\", \"Heap Overflow\", \"Hypervisor\", \r\n        \"Kernel\", \"Logic Bomb\", \"Malware Storm\", \"Mind Map\", \"Mirrored Server\", \"Morbid Packet\", \"Overflow\", \"Onslaught Protocol\", \"Ping Flood\", \r\n        \"Pandemic Virus\", \"Phoenix Cycle\", \"Payload\", \"Rootkit\", \"Raptor Cable\", \"Runtime\", \"Skullcap Proxy\", \"Solar Flare\", \"Source Code\", \"Syntax Error\", \r\n        \"Spyware\", \"Storm Worm\", \"Tempest Box\", \"Tor Network\", \"Vector\", \"Virtual Machine\", \"Viper Script\", \"Vortex Decoder\", \"Worm\", \"Wraith Protocol\",\r\n        \"Light's Encryption\", \"Shimmering Algorithm\"  \r\n    ];\r\n    \r\n    string[] private nameSuffixes = [\r\n        \"Exploit\",\r\n        \"Root Access\",\r\n        \"Code Injector\",\r\n        \"Signal\",\r\n        \"Router\",\r\n        \"Gateway\",\r\n        \"Interface\",\r\n        \"Stealth Operator\",\r\n        \"Bandwidth\",\r\n        \"Shadow Ban\",\r\n        \"Shell\",\r\n        \"Buffer Overflow\",\r\n        \"Ransomware\",\r\n        \"Terabyte\",\r\n        \"Overclock\",\r\n        \"Decompiler\",\r\n        \"Sunburst\",\r\n        \"Moonwalk\"\r\n    ];\r\n    \r\n    function random(string memory input) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n    \r\n    function getWeapon(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"WEAPON\", weapons);\r\n    }\r\n    \r\n    function getChest(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"CHEST\", chestArmor);\r\n    }\r\n    \r\n    function getHead(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"HEAD\", headArmor);\r\n    }\r\n    \r\n    function getWaist(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"WAIST\", waistArmor);\r\n    }\r\n\r\n    function getFoot(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"FOOT\", footArmor);\r\n    }\r\n    \r\n    function getHand(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"HAND\", handArmor);\r\n    }\r\n    \r\n    function getNeck(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"NECK\", necklaces);\r\n    }\r\n    \r\n    function getRing(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"RING\", rings);\r\n    }\r\n    \r\n    function pluck(uint256 tokenId, string memory keyPrefix, string[] memory sourceArray) internal view returns (string memory) {\r\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\r\n        string memory output = sourceArray[rand % sourceArray.length];\r\n        uint256 greatness = rand % 21;\r\n        if (greatness > 14) {\r\n            output = string(abi.encodePacked(output, \" \", suffixes[rand % suffixes.length]));\r\n        }\r\n        if (greatness >= 19) {\r\n            string[2] memory name;\r\n            name[0] = namePrefixes[rand % namePrefixes.length];\r\n            name[1] = nameSuffixes[rand % nameSuffixes.length];\r\n            if (greatness == 19) {\r\n                output = string(abi.encodePacked('\"', name[0], ' ', name[1], '\" ', output));\r\n            } else {\r\n                output = string(abi.encodePacked('\"', name[0], ' ', name[1], '\" ', output, \" +1\"));\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\r\n        string[17] memory parts;\r\n        parts[0] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 352 352\"><style>.base { fill: white; font-family: serif; font-size: 13px; }</style><rect width=\"100%\" height=\"100%\" fill=\"black\" /><text x=\"10\" y=\"20\" class=\"base\">';\r\n\r\n        parts[1] = getWeapon(tokenId);\r\n\r\n        parts[2] = '</text><text x=\"10\" y=\"40\" class=\"base\">';\r\n\r\n        parts[3] = getChest(tokenId);\r\n\r\n        parts[4] = '</text><text x=\"10\" y=\"60\" class=\"base\">';\r\n\r\n        parts[5] = getHead(tokenId);\r\n\r\n        parts[6] = '</text><text x=\"10\" y=\"80\" class=\"base\">';\r\n\r\n        parts[7] = getWaist(tokenId);\r\n\r\n        parts[8] = '</text><text x=\"10\" y=\"100\" class=\"base\">';\r\n\r\n        parts[9] = getFoot(tokenId);\r\n\r\n        parts[10] = '</text><text x=\"10\" y=\"120\" class=\"base\">';\r\n\r\n        parts[11] = getHand(tokenId);\r\n\r\n        parts[12] = '</text><text x=\"10\" y=\"140\" class=\"base\">';\r\n\r\n        parts[13] = getNeck(tokenId);\r\n\r\n        parts[14] = '</text><text x=\"10\" y=\"160\" class=\"base\">';\r\n\r\n        parts[15] = getRing(tokenId);\r\n\r\n        parts[16] = '</text></svg>';\r\n\r\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\r\n        output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\r\n        \r\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Bag #', toString(tokenId), '\", \"description\": \"404 Loot is randomized hacker gear generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret. Feel free to use 404 Loot in any way you want.\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\"}'))));\r\n        output = string(abi.encodePacked('data:application/json;base64,', json));\r\n\r\n        return output;\r\n    }\r\n    \r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT license\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function setNameSymbol(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) public onlyOwner {\r\n        _setNameSymbol(_name, _symbol);\r\n    }\r\n\r\n    function withdraw(address payable _to) public onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdraw20(address _tokenAddress, address payable _to) public onlyOwner {\r\n        uint balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        IERC20(_tokenAddress).transfer(_to, balance);\r\n    }\r\n\r\n    constructor() ERC404(\"404 Loot\", \"LOOT404\", 18, 10000, msg.sender) {\r\n        balanceOf[msg.sender] = 10000 * 10 ** 18;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getChest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFoot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNeck\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRing\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWaist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWeapon\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setNameSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LootNotFound", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20ce546368c511e5ebd82b9886b84cdf6551967310ef946450937aab3c730b6a"}