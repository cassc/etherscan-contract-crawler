{"SourceCode": "pragma solidity ^0.5.10;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Removed mul, div, mod\r\n */\r\nlibrary SafeMath {\r\n        /**\r\n         * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n         */\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n                require(b <= a);\r\n                uint256 c = a - b;\r\n\r\n                return c;\r\n        }\r\n\r\n        /**\r\n         * @dev Adds two unsigned integers, reverts on overflow.\r\n         */\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n                uint256 c = a + b;\r\n                require(c >= a);\r\n\r\n                return c;\r\n        }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n      function totalSupply() public view returns (uint256);\r\n      function balanceOf(address _who) public view returns (uint256);\r\n      function transfer(address _to, uint256 _value) public returns (bool);\r\n      function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n      function allowance(address _owner, address _spender) public view returns (uint256);\r\n      function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n      event Transfer(address indexed from, address indexed to, uint256 value);\r\n      event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20 {\r\n        using SafeMath for uint256;\r\n\r\n        uint256 internal _totalSupply;\r\n        mapping(address => uint256) internal _balances;\r\n        mapping(address => mapping (address => uint256)) internal _allowed;\r\n\r\n        modifier validDestination( address _to )\r\n        {\r\n                require(_to != address(0x0), \"Invalid address.\");\r\n                require(_to != address(this), \"Invalid address.\");\r\n                _;\r\n        }\r\n\r\n        function totalSupply() public view returns (uint256) {\r\n                return _totalSupply;\r\n        }\r\n\r\n        function balanceOf(address _who) public view returns (uint256) {\r\n                return _balances[_who];\r\n        }\r\n\r\n        function transfer(address _to, uint256 _value)\r\n                public\r\n                validDestination(_to)\r\n                returns (bool)\r\n        {\r\n                _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n                _balances[_to] = _balances[_to].add(_value);\r\n                emit Transfer(msg.sender, _to, _value);\r\n                return true;\r\n        }\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value)\r\n                public\r\n                validDestination(_to)\r\n                returns (bool)\r\n        {\r\n                require(_value <= _allowed[_from][msg.sender],\"Insufficient allowance.\");\r\n\r\n                _balances[_from] = _balances[_from].sub(_value);\r\n                _balances[_to] = _balances[_to].add(_value);\r\n\r\n                _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\r\n\r\n                emit Transfer(_from, _to, _value);\r\n                return true;\r\n        }\r\n\r\n        function burn(uint _value) public returns (bool)\r\n        {\r\n                _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n                _totalSupply = _totalSupply.sub(_value);\r\n                emit Transfer(msg.sender, address(0x0), _value);\r\n                return true;\r\n        }\r\n\r\n        function burnFrom(address _from, uint256 _value) public validDestination(_from) returns (bool)\r\n        {\r\n                _balances[_from] = _balances[_from].sub(_value);\r\n                _totalSupply = _totalSupply.sub(_value);\r\n                emit Transfer(_from, address(0x0), _value);\r\n\r\n                approve(msg.sender, _allowed[_from][msg.sender].sub(_value));\r\n\r\n                return true;\r\n        }\r\n\r\n        function approve(address _spender, uint256 _value) public validDestination(_spender) returns (bool) {\r\n\r\n                _allowed[msg.sender][_spender] = _value;\r\n                emit Approval(msg.sender, _spender, _value);\r\n                return true;\r\n        }\r\n\r\n        function allowance(address _owner, address _spender) public view returns (uint256)\r\n        {\r\n                return _allowed[_owner][_spender];\r\n        }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n        address public owner;\r\n        mapping (address => bool) public delegatee;\r\n\r\n        event OwnershipTransferred(\r\n                address indexed previousOwner,\r\n                address indexed newOwner\r\n        );\r\n\r\n        event LockableDelegated(address indexed delegatee);\r\n        event LockableUndelegated(address indexed delegatee);\r\n\r\n        constructor() public {\r\n                owner = msg.sender;\r\n        }\r\n\r\n        modifier validateAddress(address _to) {\r\n                require(_to != address(0x0));\r\n\t\t\t\trequire(_to != address(this));\r\n                _;\r\n        }\r\n\r\n        modifier onlyOwner() {\r\n                require(msg.sender == owner, 'Permission denied.');\r\n                _;\r\n        }\r\n\t\t\r\n\t\tmodifier onlyLocker() {\r\n                require(msg.sender == owner || delegatee[msg.sender], 'Permission denied');\r\n                _;\r\n        }\r\n\r\n        function transferOwnership(address _newOwner) public onlyOwner validateAddress(_newOwner) {\r\n                owner = _newOwner;\r\n                emit OwnershipTransferred(owner, _newOwner);\r\n        }\r\n\r\n\tfunction delegateLockable(address _delegatee) public onlyOwner validateAddress(_delegatee) {\r\n\t\trequire(!delegatee[_delegatee], 'Delegatee already.');\r\n\t\tdelegatee[_delegatee] = true;\r\n\t\temit LockableDelegated(_delegatee);\r\n\t}\r\n\t\r\n\tfunction undelegateLockable(address _delegatee) public onlyOwner validateAddress(_delegatee) {\r\n\t\trequire(delegatee[_delegatee], 'Not a delegatee.');\r\n\t\tdelegatee[_delegatee] = false;\r\n\t\temit LockableUndelegated(_delegatee);\r\n\t}\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n        event Pause();\r\n        event Unpause();\r\n\r\n        bool public paused = false;\r\n\r\n        modifier whenNotPaused() {\r\n                require(!paused, 'Paused by owner.');\r\n                _;\r\n        }\r\n\r\n        modifier whenPaused() {\r\n                require(paused, 'Paused requied.');\r\n                _;\r\n        }\r\n\r\n        function pause() public onlyOwner whenNotPaused {\r\n                paused = true;\r\n                emit Pause();\r\n        }\r\n\r\n        function unpause() public onlyOwner whenPaused {\r\n                paused = false;\r\n                emit Unpause();\r\n        }\r\n}\r\n\r\n\r\ncontract Freezable is Ownable {\r\n        mapping (address => bool) public frozenAccount;\r\n\r\n        event Freezed(address indexed target, bool frozen);\r\n        event Unfreezed(address indexed target, bool frozen);\r\n\r\n        modifier isNotFrozen(address _target) {\r\n                require(!frozenAccount[_target], 'Frozen account.');\r\n                _;\r\n        }\r\n\r\n        modifier isFrozen(address _target) {\r\n                require(frozenAccount[_target], 'Not a frozen account.');\r\n                _;\r\n        }\r\n\r\n        function freeze(address _target) public onlyOwner isNotFrozen(_target) validateAddress(_target) {\r\n                frozenAccount[_target] = true;\r\n                emit Freezed(_target, true);\r\n        }\r\n\r\n        function unfreeze(address _target) public onlyOwner isFrozen(_target) validateAddress(_target) {\r\n                frozenAccount[_target] = false;\r\n                emit Unfreezed(_target, false);\r\n        }\r\n\r\n}\r\n\r\ncontract TimeLockable is Ownable {\r\n        using SafeMath for uint256;\r\n\r\n        mapping (address => uint256) internal _lockType1;\r\n\tmapping (address => uint256) internal _lockType2;\r\n\tmapping (address => uint256) internal _lockType3;\r\n\r\n        event LockAccount(address indexed target, uint256 value, uint256 lockedType);\r\n\r\n        function _setTimeLockAccount(address _target, uint256 _value, uint256 _newLockType)\r\n                internal\r\n                onlyLocker\r\n                returns (bool)\r\n        {\r\n\t\tif (_newLockType == 1) {\r\n\t\t\t_lockType1[_target] = _lockType1[_target].add(_value);\r\n\t\t\treturn true;\r\n\t\t} else if (_newLockType == 2) {\r\n\t\t\t_lockType2[_target] = _lockType2[_target].add(_value);\r\n\t\t\treturn true;\r\n\t\t} else if (_newLockType == 3) {\r\n\t\t\t_lockType3[_target] = _lockType3[_target].add(_value);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n        }\r\n\r\n\tfunction balanceLocked(address _target) public view returns ( uint256 lockType1, uint256 lockType2, uint256 lockType3 ) {\r\n\t\tif (now > 1614556800) {\t\t\t\t// Mar 1, 2021\r\n\t\t\treturn (0, 0, 0);\r\n\t\t} else if (now > 1598918400) {\t\t\t// Sep 1, 2020\r\n\t\t\treturn (0, 0, _lockType3[_target]);\r\n\t\t} else if (now > 1593561600) {\t\t\t// Jul 1, 2020\r\n\t\t\treturn (0, _lockType2[_target], _lockType3[_target]);\r\n\t\t} else {\r\n\t\t\treturn (_lockType1[_target], _lockType2[_target], _lockType3[_target]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\ncontract VKNF is StandardToken, Pausable, Freezable, TimeLockable {\r\n        using SafeMath for uint256;\r\n\r\n        string  public  name = \"VKenaf\";\r\n        string  public  symbol = 'VKNF';\r\n        uint256 public  constant decimals = 12;\r\n\r\n        constructor(\r\n                uint256 _initialSupply\r\n        )\r\n                public\r\n        {\r\n                _totalSupply = _initialSupply * 10 ** uint256(decimals);\r\n                _balances[msg.sender] = _totalSupply;                  \r\n        }\r\n\t\t\r\n        modifier balanceValidate(address _from, uint256 _value) {\r\n                require(balanceAvailable(_from) >= _value, 'Insufficient available balance.');\r\n                _;\r\n        }\r\n\r\n        function balanceAvailable(address _target) public view returns ( uint256 ) {\r\n\t\tuint256 _locked1;\r\n\t\tuint256 _locked2;\r\n\t\tuint256 _locked3;\r\n\t\t\r\n\t\t(_locked1, _locked2, _locked3) = balanceLocked(_target);\r\n\t\treturn _balances[_target].sub(_locked1).sub(_locked2).sub(_locked3);\r\n        }\r\n\r\n\r\n\tfunction lockAndTransfer(address _to, uint256 _value, uint256 _newLockType) \r\n\t\tpublic\r\n\t\tonlyLocker \r\n\t{\r\n\t\trequire(_setTimeLockAccount(_to, _value, _newLockType));\r\n\t\ttransfer(_to, _value);\r\n\t}\r\n\r\n        function transfer(address _to, uint256 _value)\r\n                public\r\n                whenNotPaused\r\n                isNotFrozen(msg.sender)\r\n                isNotFrozen(_to)\r\n\t\tbalanceValidate(msg.sender, _value)\r\n                returns (bool)\r\n        {\r\n                return super.transfer(_to, _value);\r\n        }\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value)\r\n                public\r\n                whenNotPaused\r\n                isNotFrozen(_from)\r\n                isNotFrozen(_to)\r\n\t\t\t\tbalanceValidate(_from, _value)\r\n                returns (bool)\r\n        {\r\n                return super.transferFrom(_from, _to, _value);\r\n        }\r\n\r\n        function burn(uint256 _value)\r\n                public\r\n                whenNotPaused\r\n                isNotFrozen(msg.sender)\r\n\t\t\t\tbalanceValidate(msg.sender, _value)\r\n                returns (bool)\r\n        {\r\n                return super.burn(_value);\r\n        }\r\n\r\n        function burnFrom(address _from, uint256 _value)\r\n                public\r\n                whenNotPaused\r\n                isNotFrozen(_from)\r\n\t\tbalanceValidate(_from, _value)\r\n                returns (bool)\r\n        {\r\n                return super.burnFrom(_from, _value);\r\n        }\r\n\r\n        function approve(address _spender, uint256 _value)\r\n                public\r\n                whenNotPaused\r\n                isNotFrozen(msg.sender)\r\n                isNotFrozen(_spender)\r\n\t\tbalanceValidate(msg.sender, _value)\r\n                returns (bool)\r\n        {\r\n                return super.approve(_spender, _value);\r\n        }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"undelegateLockable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_newLockType\",\"type\":\"uint256\"}],\"name\":\"lockAndTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"delegateLockable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"balanceLocked\",\"outputs\":[{\"name\":\"lockType1\",\"type\":\"uint256\"},{\"name\":\"lockType2\",\"type\":\"uint256\"},{\"name\":\"lockType3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"balanceAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedType\",\"type\":\"uint256\"}],\"name\":\"LockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Unfreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"LockableDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"LockableUndelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "VKNF", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000005f5e100", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c115e1c7354c7768adb11e7a2d7577ad8ff8fb14657dd4cb93407b819058978e"}