{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `to`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `from` to `to` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the decimals places of the token.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    _checkOwner();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if the sender is not the owner.\r\n   */\r\n  function _checkOwner() internal view virtual {\r\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby disabling any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n  bool private _paused;\r\n\r\n  /**\r\n   * @dev Emitted when the pause is triggered by `account`.\r\n   */\r\n  event Paused(address account);\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted by `account`.\r\n   */\r\n  event Unpaused(address account);\r\n\r\n  /**\r\n   * @dev The operation failed because the contract is paused.\r\n   */\r\n  error EnforcedPause();\r\n\r\n  /**\r\n   * @dev The operation failed because the contract is not paused.\r\n   */\r\n  error ExpectedPause();\r\n\r\n  /**\r\n   * @dev Initializes the contract in unpaused state.\r\n   */\r\n  constructor() {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    _requireNotPaused();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  modifier whenPaused() {\r\n    _requirePaused();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract is paused, and false otherwise.\r\n   */\r\n  function paused() public view virtual returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if the contract is paused.\r\n   */\r\n  function _requireNotPaused() internal view virtual {\r\n    if (paused()) {\r\n      revert EnforcedPause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if the contract is not paused.\r\n   */\r\n  function _requirePaused() internal view virtual {\r\n    if (!paused()) {\r\n      revert ExpectedPause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Triggers stopped state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  function _pause() internal virtual whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns to normal state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  function _unpause() internal virtual whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(_msgSender());\r\n  }\r\n}\r\n\r\ncontract FrogWifHatToken is Context, IERC20Metadata, Ownable, Pausable {\r\n  mapping(address => uint256) private _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  mapping(address => bool) public isBlacklisted;\r\n  uint256 private _totalSupply;\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private constant _decimals = 18;\r\n  uint256 public constant hardCap = 1_000_000_000 * (10 ** _decimals); //1 billion\r\n  address public _pauser;\r\n  address public _blacklister;\r\n\r\n  event PauserUpdated(address indexed by, address indexed oldPauser, address indexed newPauser, uint256 timestamp);\r\n  event BlacklisterUpdated(address indexed by, address indexed oldBlacklister, address indexed newBlacklister, uint256 timestamp);\r\n  event PauserRenounced(address indexed by, uint256 timestamp);\r\n  event BlacklisterRenounced(address indexed by, uint256 timestamp);\r\n  event AddedToBlacklist(address indexed by, address[] users, uint256 timestamp);\r\n  event RemovedFromBlacklist(address indexed by, address[] users, uint256 timestamp);\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param name_ The name of the token.\r\n   * @param symbol_ The symbol of the token.\r\n   * @param pauser_ Pauser address.\r\n   * @param blacklister_ Blacklister address.\r\n   */\r\n  constructor(string memory name_, string memory symbol_, address pauser_, address blacklister_) {\r\n    require(pauser_ != address(0) && blacklister_ != address(0), 'Zero Address');\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _pauser = pauser_;\r\n    _blacklister = blacklister_;\r\n    _mint(msg.sender, hardCap);\r\n\r\n    emit PauserUpdated(msg.sender, address(0), pauser_, block.timestamp);\r\n    emit BlacklisterUpdated(msg.sender, address(0), blacklister_, block.timestamp);\r\n  }\r\n\r\n  modifier onlyBlacklister() {\r\n    require(msg.sender == _blacklister, 'Caller is not the blacklister');\r\n    _;\r\n  }\r\n  modifier onlyPauser() {\r\n    require(msg.sender == _pauser, 'Caller is not the pauser');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Function for blacklister to blacklist users.\r\n   * @param _users Array of user addresses to be blacklisted.\r\n   */\r\n  function blacklistUser(address[] calldata _users) external onlyBlacklister {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      isBlacklisted[_users[i]] = true;\r\n    }\r\n    emit AddedToBlacklist(msg.sender, _users, block.timestamp);\r\n  }\r\n\r\n  /**\r\n   * @notice Function for blacklister to remove users from blacklist.\r\n   * @param _users Array of user addresses to be removed from blacklist.\r\n   */\r\n  function removeUserFromBlacklist(address[] calldata _users) external onlyBlacklister {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      isBlacklisted[_users[i]] = false;\r\n    }\r\n    emit RemovedFromBlacklist(msg.sender, _users, block.timestamp);\r\n  }\r\n\r\n  /// @notice Function to pause the contract.\r\n  function pause() external onlyPauser {\r\n    _pause();\r\n  }\r\n\r\n  /// @notice Function to unpause the contract.\r\n  function unpause() external onlyPauser {\r\n    _unpause();\r\n  }\r\n\r\n  /**\r\n   * @notice Function for owner to update the blacklister address.\r\n   * @param _newBlacklister Address of the new blacklister.\r\n   */\r\n  function updateBlacklister(address _newBlacklister) external onlyOwner {\r\n    require(_newBlacklister != address(0), 'Zero Address!');\r\n    require(_blacklister != address(0), 'Blacklister functionality is renounced!');\r\n    address oldBlacklister = _blacklister;\r\n    _blacklister = _newBlacklister;\r\n    emit BlacklisterUpdated(msg.sender, oldBlacklister, _newBlacklister, block.timestamp);\r\n  }\r\n\r\n  /**\r\n   * @notice Function for owner to update the pauser address.\r\n   * @param _newPauser Address of the new pauser.\r\n   */\r\n  function updatePauser(address _newPauser) external onlyOwner {\r\n    require(_newPauser != address(0), 'Zero Address!');\r\n    require(_pauser != address(0), 'Pauser functionality is renounced!');\r\n    address oldPauser = _pauser;\r\n    _pauser = _newPauser;\r\n    emit PauserUpdated(msg.sender, oldPauser, _newPauser, block.timestamp);\r\n  }\r\n\r\n  /**\r\n   * @notice Function for owner to renounce the blacklister functionality.\r\n   * @dev This will make blacklisting functionality unusable.\r\n   */\r\n  function renounceBlacklister() external onlyOwner {\r\n    _blacklister = address(0);\r\n    emit BlacklisterRenounced(msg.sender, block.timestamp);\r\n  }\r\n\r\n  /**\r\n   * @notice Function for owner to renounce the pauser functionality.\r\n   * @dev This will make pause/unpause functionality unusable.\r\n   */\r\n  function renouncePauser() external onlyOwner {\r\n    _pauser = address(0);\r\n    emit PauserRenounced(msg.sender, block.timestamp);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   * @return The name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   * @return The symbol of the token.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used for token display.\r\n   * @return The number of decimals.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total supply of the token.\r\n   * @return The total supply.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the balance of the specified account.\r\n   * @param account The address to check the balance for.\r\n   * @return The balance of the account.\r\n   */\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers tokens from the caller to a specified recipient.\r\n   * @param recipient The address to transfer tokens to.\r\n   * @param amount The amount of tokens to transfer.\r\n   * @return A boolean value indicating whether the transfer was successful.\r\n   */\r\n  function transfer(address recipient, uint256 amount) public virtual override whenNotPaused returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.\r\n   * @param from The address that approves the spending.\r\n   * @param to The address that is allowed to spend.\r\n   * @return The remaining allowance for the spender.\r\n   */\r\n  function allowance(address from, address to) public view virtual override returns (uint256) {\r\n    return _allowances[from][to];\r\n  }\r\n\r\n  /**\r\n   * @dev Approves the specified address to spend the specified amount of tokens on behalf of the caller.\r\n   * @param to The address to approve the spending for.\r\n   * @param amount The amount of tokens to approve.\r\n   * @return A boolean value indicating whether the approval was successful.\r\n   */\r\n  function approve(address to, uint256 amount) public virtual override whenNotPaused returns (bool) {\r\n    _approve(_msgSender(), to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers tokens from one address to another.\r\n   * @param sender The address to transfer tokens from.\r\n   * @param recipient The address to transfer tokens to.\r\n   * @param amount The amount of tokens to transfer.\r\n   * @return A boolean value indicating whether the transfer was successful.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override whenNotPaused returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');\r\n    unchecked {\r\n      _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increases the allowance of the specified address to spend tokens on behalf of the caller.\r\n   * @param to The address to increase the allowance for.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   * @return A boolean value indicating whether the increase was successful.\r\n   */\r\n  function increaseAllowance(address to, uint256 addedValue) public virtual whenNotPaused returns (bool) {\r\n    _approve(_msgSender(), to, _allowances[_msgSender()][to] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decreases the allowance granted by the owner of the tokens to `to` account.\r\n   * @param to The account allowed to spend the tokens.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   * @return A boolean value indicating whether the operation succeeded.\r\n   */\r\n  function decreaseAllowance(address to, uint256 subtractedValue) public virtual whenNotPaused returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][to];\r\n    require(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\r\n    unchecked {\r\n      _approve(_msgSender(), to, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `amount` tokens from `sender` to `recipient`.\r\n   * @param sender The account to transfer tokens from.\r\n   * @param recipient The account to transfer tokens to.\r\n   * @param amount The amount of tokens to transfer.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n    require(!isBlacklisted[sender], 'sender blacklisted for this action');\r\n    require(!isBlacklisted[recipient], 'recipient blacklisted for this action');\r\n    require(amount > 0, 'ERC20: transfer amount zero');\r\n    require(sender != address(0), 'ERC20: transfer from the zero address');\r\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\r\n    unchecked {\r\n      _balances[sender] = senderBalance - amount;\r\n    }\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Creates `amount` tokens and assigns them to `account`.\r\n   * @param account The account to assign the newly created tokens to.\r\n   * @param amount The amount of tokens to create.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), 'ERC20: mint to the zero address');\r\n\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the total supply.\r\n   * @param account The account to burn tokens from.\r\n   * @param amount The amount of tokens to burn.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), 'ERC20: burn from the zero address');\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\r\n    unchecked {\r\n      _balances[account] = accountBalance - amount;\r\n    }\r\n    _totalSupply -= amount;\r\n\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from the caller's account, reducing the total supply.\r\n   * @param amount The amount of tokens to burn.\r\n   */\r\n  function burn(uint256 amount) external whenNotPaused {\r\n    _burn(_msgSender(), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `to` over the caller's tokens.\r\n   * @param from The account granting the allowance.\r\n   * @param to The account allowed to spend the tokens.\r\n   * @param amount The amount of tokens to allow.\r\n   */\r\n  function _approve(address from, address to, uint256 amount) internal virtual {\r\n    require(from != address(0), 'ERC20: approve from the zero address');\r\n    require(to != address(0), 'ERC20: approve to the zero address');\r\n\r\n    _allowances[from][to] = amount;\r\n    emit Approval(from, to, amount);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pauser_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"blacklister_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BlacklisterRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBlacklister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BlacklisterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PauserRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_blacklister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blacklistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeUserFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauser\",\"type\":\"address\"}],\"name\":\"updatePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FrogWifHatToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000c169b989cd015390a01873c03ba6aae8341d0abd000000000000000000000000acfa807c93aa76c1d11b997897da043d9019dd91000000000000000000000000000000000000000000000000000000000000000c46726f672057696620486174000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044657494600000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6708c130b773406a5bb70aa5f6520bff6141a005d992759d54d30922dd75662f"}