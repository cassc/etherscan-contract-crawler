{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * 'onlyOwner', which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * 'onlyOwner' functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account ('newOwner').\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account ('newOwner').\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when 'value' tokens are moved from one account ('from') to\\r\\n     * another ('to').\\r\\n     *\\r\\n     * Note that 'value' may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a 'spender' for an 'owner' is set by\\r\\n     * a call to {approve}. 'value' is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by 'account'.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves 'amount' tokens from the caller's account to 'to'.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that 'spender' will be\\r\\n     * allowed to spend on behalf of 'owner' through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets 'amount' as the allowance of 'spender' over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves 'amount' tokens from 'from' to 'to' using the\\r\\n     * allowance mechanism. 'amount' is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * The default value of {decimals} is 18. To change this, you should override\\r\\n * this function so it returns a different value.\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning 'false' on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if 'decimals' equals '2', a balance of '505' tokens should\\r\\n     * be displayed to a user as '5.05' ('505 / 10 ** 2').\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the default value returned by this function, unless\\r\\n     * it's overridden.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'to' cannot be the zero address.\\r\\n     * - the caller must have a balance of at least 'amount'.\\r\\n     */\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If 'amount' is the maximum 'uint256', the allowance is not updated on\\r\\n     * 'transferFrom'. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'spender' cannot be the zero address.\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum 'uint256'.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'from' and 'to' cannot be the zero address.\\r\\n     * - 'from' must have a balance of at least 'amount'.\\r\\n     * - the caller must have allowance for ''from'''s tokens of at least\\r\\n     * 'amount'.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to 'spender' by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'spender' cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to 'spender' by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'spender' cannot be the zero address.\\r\\n     * - 'spender' must have allowance for the caller of at least\\r\\n     * 'subtractedValue'.\\r\\n     */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves 'amount' of tokens from 'from' to 'to'.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'from' cannot be the zero address.\\r\\n     * - 'to' cannot be the zero address.\\r\\n     * - 'from' must have a balance of at least 'amount'.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(\\r\\n            fromBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates 'amount' tokens and assigns them to 'account', increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with 'from' set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'account' cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys 'amount' tokens from 'account', reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with 'to' set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'account' cannot be the zero address.\\r\\n     * - 'account' must have at least 'amount' tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets 'amount' as the allowance of 'spender' over the 'owner' s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to 'approve', and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'owner' cannot be the zero address.\\r\\n     * - 'spender' cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates 'owner' s allowance for 'spender' based on spent 'amount'.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when 'from' and 'to' are both non-zero, 'amount' of ''from'''s tokens\\r\\n     * will be transferred to 'to'.\\r\\n     * - when 'from' is zero, 'amount' tokens will be minted for 'to'.\\r\\n     * - when 'to' is zero, 'amount' of ''from'''s tokens will be burned.\\r\\n     * - 'from' and 'to' are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when 'from' and 'to' are both non-zero, 'amount' of ''from'''s tokens\\r\\n     * has been transferred to 'to'.\\r\\n     * - when 'from' is zero, 'amount' tokens have been minted for 'to'.\\r\\n     * - when 'to' is zero, 'amount' of ''from'''s tokens have been burned.\\r\\n     * - 'from' and 'to' are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20Burnable is Context, ERC20 {\\r\\n    /**\\r\\n     * @dev Destroys 'amount' tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys 'amount' tokens from 'account', deducting from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ''accounts'''s tokens of at least\\r\\n     * 'amount'.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) public virtual {\\r\\n        _spendAllowance(account, _msgSender(), amount);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint amountA,\\r\\n        uint reserveA,\\r\\n        uint reserveB\\r\\n    ) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint amountIn,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint amountOut,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountIn);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint amountOut,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// File contracts/Token.sol\\r\\n\\r\\ncontract Token is ERC20Burnable, Ownable {\\r\\n    // ADDRESSESS -------------------------------------------------------------------------------------------\\r\\n    address public lpPair; // Liquidity token address\\r\\n    address[] public platformFeeAddresses; // service fee wallet address\\r\\n    address public treasuryAddress; // owner fee wallet address\\r\\n\\r\\n    // VALUES -----------------------------------------------------------------------------------------------\\r\\n    uint256 public swapThreshold; // swap tokens limit\\r\\n    uint256 public constant TAX_DIVISOR = 10000; // divisor | 0.0001 max presition fee\\r\\n    uint256 public maxWalletAmount; // max balance amount (Anti-whale)\\r\\n    uint256 public platformFeeAmount; // accumulated fee amount for w1\\r\\n    uint256 public preMintAmount; // pre-mint amount mint to treasury\\r\\n    uint256 public constant PLATFORM_FEE_PERCENT = 50; // platform fee percent of tx amount : 0.5%\\r\\n    uint256[] public platformFeePercents;\\r\\n    uint256 public autoLiquidityPercent; // amm percent of fee\\r\\n    uint256 public maxTransactionAmount;\\r\\n    uint256 public buyBackThreshold; // swap tokens limit\\r\\n    uint256 public buyBackPercent;\\r\\n    uint256 public maxBuyLimit;\\r\\n    uint256 public initialDelayTime; // to store the block in which the trading was enabled\\r\\n    uint256 public totalDelayTime;\\r\\n    uint256 public maxGasPriceLimit; // for store max gas price value\\r\\n    uint256 public timeDelayBetweenTx; // time wait for txs\\r\\n\\r\\n    // BOOLEANS ---------------------------------------------------------------------------------------------\\r\\n    bool public inSwap; // used for dont take fee on swaps\\r\\n    bool public gasLimitActive;\\r\\n    bool public transferDelayEnabled; // for enable / disable delay between transactions\\r\\n\\r\\n    // MAPPINGS\\r\\n    mapping(address => bool) public _isExcludedFromFee; // list of users excluded from fee\\r\\n    mapping(address => bool) public _isExcludedFromMaxTx; // list of users excluded from fee\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n    mapping(address => uint256) public _holderLastTransferTimestamp; // to hold last Transfers temporarily  // todo remove\\r\\n\\r\\n    // STRUCTS ----------------------------------------------------------------------------------------------\\r\\n    struct Fees {\\r\\n        uint16 buyFee; // fee when people BUY tokens\\r\\n        uint16 sellFee; // fee when people SELL tokens\\r\\n        uint16 transferFee; // fee when people TRANSFER tokens\\r\\n    }\\r\\n\\r\\n    // OBJECTS ----------------------------------------------------------------------------------------------\\r\\n    IUniswapV2Router02 public router;\\r\\n    Fees public _feesRates; // fees rates\\r\\n\\r\\n    // MODIFIERS --------------------------------------------------------------------------------------------\\r\\n    modifier swapping() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    // CONSTRUCTOR ------------------------------------------------------------------------------------------\\r\\n    constructor(\\r\\n        string memory tokenName,\\r\\n        string memory tokenSymbol,\\r\\n        uint256 supply,\\r\\n        uint256 preMint,\\r\\n        address[] memory addresses, // routerAddress, treasuryAddress,\\r\\n        uint16[] memory percents // burnPercent, buyFee, sellFee, maxPerWallet, maxPerTx\\r\\n    ) ERC20(tokenName, tokenSymbol) {\\r\\n        require(addresses.length == 2, \\\"Invalid argument\\\");\\r\\n        require(percents.length == 5, \\\"Invalid argument\\\");\\r\\n        require(percents[1] <= 9900 && percents[2] <= 9900, \\\"Too hight tax\\\");\\r\\n\\r\\n        // super.transferOwnership(tokenOwner);\\r\\n        treasuryAddress = addresses[1];\\r\\n\\r\\n        uint256 burnAmount = (supply * percents[0]) / TAX_DIVISOR;\\r\\n        _mint(msg.sender, supply - preMint - burnAmount);\\r\\n        if (preMint > 0) _mint(treasuryAddress, preMint);\\r\\n        if (burnAmount > 0) _mint(address(0xdead), burnAmount);\\r\\n\\r\\n        maxWalletAmount = percents[3] == 0\\r\\n            ? supply\\r\\n            : (supply * percents[3]) / TAX_DIVISOR;\\r\\n        maxTransactionAmount = percents[4] == 0\\r\\n            ? supply\\r\\n            : (supply * percents[4]) / TAX_DIVISOR;\\r\\n\\r\\n        platformFeeAddresses.push(0x7A93936c57587A5A0de1bBc0d99b61139394698C);\\r\\n        platformFeeAddresses.push(0x18bb1D7E5DD7dd0017a828dABF16472d9fD1c6aE);\\r\\n\\r\\n        platformFeePercents.push(8000);\\r\\n        platformFeePercents.push(2000);\\r\\n\\r\\n        // default fees\\r\\n        _feesRates = Fees({\\r\\n            buyFee: percents[1],\\r\\n            sellFee: percents[2],\\r\\n            transferFee: 0\\r\\n        });\\r\\n\\r\\n        router = IUniswapV2Router02(addresses[0]);\\r\\n\\r\\n        // Create a uniswap pair for this new token\\r\\n        lpPair = IUniswapV2Factory(router.factory()).createPair(\\r\\n            address(this),\\r\\n            router.WETH()\\r\\n        );\\r\\n        automatedMarketMakerPairs[lpPair] = true;\\r\\n\\r\\n        // exclude from fees\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[treasuryAddress] = true;\\r\\n        _isExcludedFromFee[platformFeeAddresses[0]] = true;\\r\\n        _isExcludedFromFee[platformFeeAddresses[1]] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        _isExcludedFromMaxTx[owner()] = true;\\r\\n        _isExcludedFromMaxTx[treasuryAddress] = true;\\r\\n        _isExcludedFromMaxTx[platformFeeAddresses[0]] = true;\\r\\n        _isExcludedFromMaxTx[platformFeeAddresses[1]] = true;\\r\\n        _isExcludedFromMaxTx[address(this)] = true;\\r\\n        _isExcludedFromMaxTx[address(router)] = true;\\r\\n        _isExcludedFromMaxTx[lpPair] = true;\\r\\n\\r\\n        // contract do swap when have 1k tokens balance\\r\\n        swapThreshold = 1000 ether;\\r\\n\\r\\n        autoLiquidityPercent = 8000; //80%\\r\\n        buyBackPercent = 0; //0%\\r\\n\\r\\n        buyBackThreshold = 1 ether; // buyback 1 eth\\r\\n\\r\\n        // do approve to router from owner and contract\\r\\n        _approve(owner(), address(router), type(uint256).max);\\r\\n        _approve(address(this), address(router), type(uint256).max);\\r\\n\\r\\n        maxBuyLimit = supply;\\r\\n        gasLimitActive = false;\\r\\n        // used for store max gas price limit value\\r\\n        transferDelayEnabled = false;\\r\\n        initialDelayTime = block.timestamp;\\r\\n        // used enable or disable max gas price limit\\r\\n        maxGasPriceLimit = 15000000000;\\r\\n\\r\\n        // enable / disable transfer to wallets when contract do swap tokens for busd\\r\\n        timeDelayBetweenTx = 5;\\r\\n        totalDelayTime = 3600;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This function is used to Update the Max Gas Price Limit for transactions\\r\\n     * @dev This function is used inside the tokenTransfer during the first hour of the contract\\r\\n     * @param newValue uint256 The new Max Gas Price Limit\\r\\n     */\\r\\n    function updateMaxGasPriceLimit(uint256 newValue) public onlyOwner {\\r\\n        require(\\r\\n            newValue >= 10000000000,\\r\\n            \\\"max gas price cant be lower than 10 gWei\\\"\\r\\n        );\\r\\n        maxGasPriceLimit = newValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This function is updating the value of the variable transferDelayEnabled\\r\\n     * @param newVal New value of the variable\\r\\n     */\\r\\n    function updateTransferDelayEnabled(bool newVal) external onlyOwner {\\r\\n        transferDelayEnabled = newVal;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the max amount of tokens that can be buyed in one transaction\\r\\n     * @param percent New max buy limit in wei\\r\\n     */\\r\\n    function updateMaxBuyLimit(uint256 percent) public onlyOwner {\\r\\n        maxBuyLimit = (totalSupply() * percent) / TAX_DIVISOR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the max gas limit that can be used in the transaction\\r\\n     * @param newVal New gas limit amount\\r\\n     */\\r\\n    function updateGasLimitActive(bool newVal) public onlyOwner {\\r\\n        gasLimitActive = newVal;\\r\\n    }\\r\\n\\r\\n    // To receive BNB from dexRouter when swapping\\r\\n    receive() external payable {}\\r\\n\\r\\n    // Set fees\\r\\n    function setTaxes(\\r\\n        uint16 buyFee,\\r\\n        uint16 sellFee,\\r\\n        uint16 transferFee\\r\\n    ) external virtual onlyOwner {\\r\\n        require(buyFee <= 9900 && sellFee <= 9900, \\\"Too hight tax\\\");\\r\\n        _feesRates.buyFee = buyFee;\\r\\n        _feesRates.sellFee = sellFee;\\r\\n        _feesRates.transferFee = transferFee;\\r\\n    }\\r\\n\\r\\n    // function for set buyBackThreshold\\r\\n    function setBuyBackThreshold(uint256 newThreshold) external onlyOwner {\\r\\n        buyBackThreshold = newThreshold;\\r\\n    }\\r\\n\\r\\n    // function for set buyBackPercent\\r\\n    function setBuyBackPercent(uint16 newPercent) external onlyOwner {\\r\\n        require(\\r\\n            newPercent + autoLiquidityPercent <= TAX_DIVISOR,\\r\\n            \\\"Percent cant be higher than 100%\\\"\\r\\n        );\\r\\n        buyBackPercent = newPercent;\\r\\n    }\\r\\n\\r\\n    // function for set autoLiquidityPercent\\r\\n    function setAutoLiquidityPercent(uint16 newPercent) external onlyOwner {\\r\\n        require(\\r\\n            newPercent + buyBackPercent <= TAX_DIVISOR,\\r\\n            \\\"Percent cant be higher than 100%\\\"\\r\\n        );\\r\\n        autoLiquidityPercent = newPercent;\\r\\n    }\\r\\n\\r\\n    // this function will be called every buy, sell or transfer\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        _beforeTransferCheck(from, to, amount);\\r\\n\\r\\n        if (inSwap) {\\r\\n            super._transfer(from, to, amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (contractMustSwap(from, to)) {\\r\\n            doSwap();\\r\\n        }\\r\\n\\r\\n        _finalizeTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function doSwap() internal swapping {\\r\\n        // Get contract tokens balance\\r\\n        uint256 numTokensToSwap = balanceOf(address(this));\\r\\n\\r\\n        // swap to team\\r\\n        if (platformFeeAmount > 0) {\\r\\n            uint256 _amount = platformFeeAmount;\\r\\n            numTokensToSwap -= platformFeeAmount;\\r\\n            platformFeeAmount = 0;\\r\\n            uint256 _remain = _amount;\\r\\n            for (uint256 i = platformFeeAddresses.length; i > 0; i--) {\\r\\n                uint256 _fee = i == 1\\r\\n                    ? _remain\\r\\n                    : (_amount * platformFeePercents[i - 1]) / TAX_DIVISOR;\\r\\n                swapTokensForNative(_fee, platformFeeAddresses[i - 1]);\\r\\n                if (i > 1) _remain -= _fee;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (numTokensToSwap > 0) {\\r\\n            // swap to contract\\r\\n            if (buyBackPercent > 0) {\\r\\n                swapTokensForNative(\\r\\n                    (numTokensToSwap * buyBackPercent) / TAX_DIVISOR,\\r\\n                    address(this)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // inject liquidity\\r\\n            if (autoLiquidityPercent > 0) {\\r\\n                autoLiquidity(\\r\\n                    (numTokensToSwap * autoLiquidityPercent) / TAX_DIVISOR\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // treasury fee\\r\\n            uint256 treasuryAmount = numTokensToSwap -\\r\\n                (numTokensToSwap * (autoLiquidityPercent + buyBackPercent)) /\\r\\n                TAX_DIVISOR;\\r\\n            if (treasuryAmount > 0) {\\r\\n                swapTokensForNative(treasuryAmount, treasuryAddress);\\r\\n            }\\r\\n\\r\\n            // buy back\\r\\n            if (buyBackThreshold > 0) {\\r\\n                uint256 ethBalance = address(this).balance;\\r\\n\\r\\n                if (ethBalance > buyBackThreshold) {\\r\\n                    swapNativeForTokens(ethBalance, address(0xdead));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapNativeForTokens(uint256 nativeAmount, address to) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(this);\\r\\n        uint256 deadline = block.timestamp;\\r\\n        // uint256 amountOutIn = router.getAmountsOut(\\r\\n        //     nativeAmount,\\r\\n        //     path\\r\\n        // )[1];\\r\\n        router.swapExactETHForTokens{value: nativeAmount}(\\r\\n            0,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapTokensForNative(uint256 tokenAmount, address to) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        uint256 deadline = block.timestamp;\\r\\n        _approve(address(this), address(router), tokenAmount);\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _finalizeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        // by default receiver receive 100% of sended amount\\r\\n        uint256 amountReceived = amount;\\r\\n\\r\\n        // If takeFee is false there is 0% fee\\r\\n        bool takeFee = true;\\r\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        // check if we need take fee or not\\r\\n        if (takeFee) {\\r\\n            // if we need take fee\\r\\n            // calc how much we need take\\r\\n            (uint256 feeAmount1, uint256 feeAmount2) = calcBuySellTransferFee(\\r\\n                from,\\r\\n                to,\\r\\n                amount\\r\\n            );\\r\\n\\r\\n            if (feeAmount1 + feeAmount2 > 0) {\\r\\n                // we substract fee amount from recipient amount\\r\\n                amountReceived = amount - feeAmount1 - feeAmount2;\\r\\n                if (feeAmount2 > 0) platformFeeAmount += feeAmount2;\\r\\n\\r\\n                // and transfer fee to contract\\r\\n                super._transfer(from, address(this), feeAmount1 + feeAmount2);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // finally send remaining tokens to recipient\\r\\n        super._transfer(from, to, amountReceived);\\r\\n    }\\r\\n\\r\\n    function calcBuySellTransferFee(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal view virtual returns (uint256, uint256) {\\r\\n        // by default we take zero fee\\r\\n        uint256 totalFeePercent = 0;\\r\\n        uint256 feeAmount1 = 0;\\r\\n        uint256 feeAmount2 = 0;\\r\\n        bool isTransfer = false;\\r\\n\\r\\n        // BUY -> FROM == LP ADDRESS\\r\\n        if (automatedMarketMakerPairs[from]) {\\r\\n            totalFeePercent += _feesRates.buyFee;\\r\\n        }\\r\\n        // SELL -> TO == LP ADDRESS\\r\\n        else if (automatedMarketMakerPairs[to]) {\\r\\n            totalFeePercent += _feesRates.sellFee;\\r\\n        }\\r\\n        // TRANSFER\\r\\n        else {\\r\\n            totalFeePercent += _feesRates.transferFee;\\r\\n            isTransfer = true;\\r\\n        }\\r\\n\\r\\n        // CALC FEES AMOUT\\r\\n        if (totalFeePercent > 0) {\\r\\n            feeAmount1 = (amount * totalFeePercent) / TAX_DIVISOR;\\r\\n        }\\r\\n\\r\\n        if (!isTransfer) {\\r\\n            feeAmount2 = (amount * PLATFORM_FEE_PERCENT) / TAX_DIVISOR;\\r\\n        }\\r\\n\\r\\n        return (feeAmount1, feeAmount2);\\r\\n    }\\r\\n\\r\\n    function autoLiquidity(uint256 tokenAmount) public {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = tokenAmount / 2;\\r\\n\\r\\n        // capture the contract's current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForNative(half, address(this));\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance - initialBalance;\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(half, newBalance);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        uint256 deadline = block.timestamp;\\r\\n        _approve(address(this), address(router), type(uint256).max);\\r\\n        router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(this), // send lp tokens to owner\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _beforeTransferCheck(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(\\r\\n            from != address(0),\\r\\n            \\\"ERC20: transfer from the ZERO_ADDRESS address\\\"\\r\\n        );\\r\\n        require(\\r\\n            to != address(0),\\r\\n            \\\"ERC20: transfer to the ZERO_ADDRESS address\\\"\\r\\n        );\\r\\n        require(\\r\\n            amount > 0,\\r\\n            \\\"Transfer amount must be greater than ZERO_ADDRESS\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            transferDelayEnabled &&\\r\\n            block.timestamp < (initialDelayTime + totalDelayTime)\\r\\n        ) {\\r\\n            // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\\r\\n            if (\\r\\n                from != owner() &&\\r\\n                to != address(router) &&\\r\\n                to != address(lpPair) &&\\r\\n                to != address(this)\\r\\n            ) {\\r\\n                // in the first one hour, a maximum of XX BUSD purchase is adjustable (TAX_DIVISOR BUSD is the default value)\\r\\n                if (maxBuyLimit > 0) {\\r\\n                    require(amount <= maxBuyLimit, \\\"Max Buy Limit.\\\");\\r\\n                }\\r\\n\\r\\n                // only use to prevent sniper buys in the first blocks.\\r\\n                if (gasLimitActive) {\\r\\n                    require(\\r\\n                        tx.gasprice <= maxGasPriceLimit,\\r\\n                        \\\"Gas price exceeds limit.\\\"\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                // delay between tx\\r\\n                require(\\r\\n                    _holderLastTransferTimestamp[msg.sender] <= block.timestamp,\\r\\n                    \\\"_transfer:: Transfer Delay enabled.\\\"\\r\\n                );\\r\\n                _holderLastTransferTimestamp[msg.sender] =\\r\\n                    block.timestamp +\\r\\n                    timeDelayBetweenTx;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            from != owner() &&\\r\\n            to != owner() &&\\r\\n            to != address(0) &&\\r\\n            to != address(0xdead) &&\\r\\n            to != address(this) &&\\r\\n            !inSwap\\r\\n        ) {\\r\\n            // BUY -> FROM == LP ADDRESS\\r\\n            if (automatedMarketMakerPairs[from]) {\\r\\n                if (!_isExcludedFromMaxTx[to]) {\\r\\n                    require(\\r\\n                        amount <= maxTransactionAmount,\\r\\n                        \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        amount + balanceOf(to) <= maxWalletAmount,\\r\\n                        \\\"Max wallet exceeded\\\"\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            // SELL -> TO == LP ADDRESS\\r\\n            else if (automatedMarketMakerPairs[to]) {\\r\\n                if (!_isExcludedFromMaxTx[to]) {\\r\\n                    require(\\r\\n                        amount <= maxTransactionAmount,\\r\\n                        \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\"\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            // TRANSFER\\r\\n            else {\\r\\n                if (!_isExcludedFromMaxTx[to]) {\\r\\n                    require(\\r\\n                        amount + balanceOf(to) <= maxWalletAmount,\\r\\n                        \\\"Max wallet exceeded\\\"\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function contractMustSwap(\\r\\n        address from,\\r\\n        address to\\r\\n    ) internal view virtual returns (bool) {\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        return\\r\\n            contractTokenBalance >= swapThreshold &&\\r\\n            !inSwap &&\\r\\n            from != lpPair &&\\r\\n            balanceOf(lpPair) > 0 &&\\r\\n            !_isExcludedFromFee[to] &&\\r\\n            !_isExcludedFromFee[from];\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(\\r\\n        address account\\r\\n    ) public view virtual returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(\\r\\n        address account,\\r\\n        bool val\\r\\n    ) public virtual onlyOwner {\\r\\n        _isExcludedFromFee[account] = val;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromMaxTx(\\r\\n        address account\\r\\n    ) public view virtual returns (bool) {\\r\\n        return _isExcludedFromMaxTx[account];\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTx(\\r\\n        address account,\\r\\n        bool val\\r\\n    ) public virtual onlyOwner {\\r\\n        _isExcludedFromMaxTx[account] = val;\\r\\n    }\\r\\n\\r\\n    function setSwapThreshold(uint256 value) public virtual onlyOwner {\\r\\n        swapThreshold = value;\\r\\n    }\\r\\n\\r\\n    function setMaxWalletAmount(uint256 percent) public virtual onlyOwner {\\r\\n        maxWalletAmount = (totalSupply() * percent) / TAX_DIVISOR;\\r\\n    }\\r\\n\\r\\n    function setMaxTransactionAmount(uint256 percent) public virtual onlyOwner {\\r\\n        maxTransactionAmount = (totalSupply() * percent) / TAX_DIVISOR;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual override onlyOwner {\\r\\n        require(\\r\\n            _feesRates.buyFee < 4500 && _feesRates.sellFee < 4500,\\r\\n            \\\"Too hight tax, can't renounce ownership.\\\"\\r\\n        );\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMint\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"percents\",\"type\":\"uint16[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feesRates\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_holderLastTransferTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"autoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPriceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformFeeAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformFeePercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newPercent\",\"type\":\"uint16\"}],\"name\":\"setAutoLiquidityPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newPercent\",\"type\":\"uint16\"}],\"name\":\"setBuyBackPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setBuyBackThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDelayBetweenTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"updateGasLimitActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"updateTransferDelayEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000c685fa11e01ec6f000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000001453454c4c205045504520425559204455434b455200000000000000000000000000000000000000000000000000000000000000000000000000000000000000064455434b4552000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000005c5808387868a9d6c033ca2f65cf2a0bb8d81858000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000000001194000000000000000000000000000000000000000000000000000000000000119400000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000c8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}