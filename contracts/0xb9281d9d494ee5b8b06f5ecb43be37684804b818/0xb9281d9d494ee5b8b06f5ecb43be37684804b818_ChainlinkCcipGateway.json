{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BalanceManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ITokenBalance } from './interfaces/ITokenBalance.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\nimport './helpers/TransferHelper.sol' as TransferHelper;\\nimport './Constants.sol' as Constants;\\n\\n/**\\n * @title BalanceManagement\\n * @notice Base contract for the withdrawal of tokens, except for reserved ones\\n */\\nabstract contract BalanceManagement is ManagerRole {\\n    /**\\n     * @notice Emitted when the specified token is reserved\\n     */\\n    error ReservedTokenError();\\n\\n    /**\\n     * @notice Performs the withdrawal of tokens, except for reserved ones\\n     * @dev Use the \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\" address for the native token\\n     * @param _tokenAddress The address of the token\\n     * @param _tokenAmount The amount of the token\\n     */\\n    function cleanup(address _tokenAddress, uint256 _tokenAmount) external onlyManager {\\n        if (isReservedToken(_tokenAddress)) {\\n            revert ReservedTokenError();\\n        }\\n\\n        if (_tokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            TransferHelper.safeTransferNative(msg.sender, _tokenAmount);\\n        } else {\\n            TransferHelper.safeTransfer(_tokenAddress, msg.sender, _tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the token balance of the current contract\\n     * @dev Use the \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\" address for the native token\\n     * @param _tokenAddress The address of the token\\n     * @return The token balance of the current contract\\n     */\\n    function tokenBalance(address _tokenAddress) public view returns (uint256) {\\n        if (_tokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            return address(this).balance;\\n        } else {\\n            return ITokenBalance(_tokenAddress).balanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the reserved token flag\\n     * @dev Override to add reserved token addresses\\n     * @param _tokenAddress The address of the token\\n     * @return The reserved token flag\\n     */\\n    function isReservedToken(address _tokenAddress) public view virtual returns (bool) {\\n        // The function returns false by default.\\n        // The explicit return statement is omitted to avoid the unused parameter warning.\\n        // See https://github.com/ethereum/solidity/issues/5295\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev The default token decimals value\\n */\\nuint256 constant DECIMALS_DEFAULT = 18;\\n\\n/**\\n * @dev The maximum uint256 value for swap amount limit settings\\n */\\nuint256 constant INFINITY = type(uint256).max;\\n\\n/**\\n * @dev The default limit of account list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_DEFAULT = 100;\\n\\n/**\\n * @dev The limit of swap router list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_ROUTERS = 200;\\n\\n/**\\n * @dev The factor for percentage settings. Example: 100 is 0.1%\\n */\\nuint256 constant MILLIPERCENT_FACTOR = 100_000;\\n\\n/**\\n * @dev The de facto standard address to denote the native token\\n */\\naddress constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/crosschain/chainlink-ccip/ChainlinkCcipGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport { IERC165 } from '@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol';\\nimport { IAny2EVMMessageReceiver } from '@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol';\\nimport { IRouterClient } from '@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol';\\nimport { Client } from '@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol';\\nimport { IActionDataStructures } from '../../interfaces/IActionDataStructures.sol';\\nimport { IGateway } from '../interfaces/IGateway.sol';\\nimport { IGatewayClient } from '../interfaces/IGatewayClient.sol';\\nimport { IVariableBalanceRecords } from '../../interfaces/IVariableBalanceRecords.sol';\\nimport { IVariableBalanceRecordsProvider } from '../../interfaces/IVariableBalanceRecordsProvider.sol';\\nimport { GatewayBase } from '../GatewayBase.sol';\\nimport { SystemVersionId } from '../../SystemVersionId.sol';\\nimport { ZeroAddressError } from '../../Errors.sol';\\nimport '../../helpers/AddressHelper.sol' as AddressHelper;\\nimport '../../helpers/GasReserveHelper.sol' as GasReserveHelper;\\nimport '../../helpers/TransferHelper.sol' as TransferHelper;\\nimport '../../DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title ChainlinkCcipGateway\\n * @notice The contract implementing the cross-chain messaging logic specific to Chainlink CCIP\\n */\\ncontract ChainlinkCcipGateway is\\n    SystemVersionId,\\n    GatewayBase,\\n    IAny2EVMMessageReceiver,\\n    IERC165,\\n    IActionDataStructures\\n{\\n    /**\\n     * @notice Chain ID pair structure\\n     * @param standardId The standard EVM chain ID\\n     * @param ccipId The CCIP chain selector\\n     */\\n    struct ChainIdPair {\\n        uint256 standardId;\\n        uint64 ccipId;\\n    }\\n\\n    /**\\n     * @dev CCIP endpoint reference\\n     */\\n    IRouterClient public endpoint;\\n\\n    /**\\n     * @dev Variable balance records contract reference for targetGasEstimate\\n     */\\n    IVariableBalanceRecords public variableBalanceRecords;\\n\\n    /**\\n     * @dev Contract self-reference for targetGasEstimate\\n     */\\n    ChainlinkCcipGateway public self;\\n\\n    /**\\n     * @dev The correspondence between standard EVM chain IDs and CCIP chain selectors\\n     */\\n    mapping(uint256 /*standardId*/ => uint64 /*ccipId*/) public standardToCcipChainId;\\n\\n    /**\\n     * @dev The correspondence between CCIP chain selectors and standard EVM chain IDs\\n     */\\n    mapping(uint64 /*ccipId*/ => uint256 /*standardId*/) public ccipToStandardChainId;\\n\\n    /**\\n     * @dev The default value of minimum target gas\\n     */\\n    uint256 public minTargetGasDefault;\\n\\n    /**\\n     * @dev The custom values of minimum target gas by standard chain IDs\\n     */\\n    mapping(uint256 /*standardChainId*/ => DataStructures.OptionalValue /*minTargetGas*/)\\n        public minTargetGasCustom;\\n\\n    /**\\n     * @dev The address of the processing fee collector\\n     */\\n    address public processingFeeCollector;\\n\\n    address private constant ESTIMATOR_ADDRESS = 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa;\\n    uint64 private constant ESTIMATE_SOURCE_CCIP_CHAIN_ID =\\n        uint64(uint256(keccak256('Source - CCIP Chain ID')));\\n    uint256 private constant ESTIMATE_SOURCE_STANDARD_CHAIN_ID =\\n        uint256(keccak256('Source - EVM Chain ID'));\\n    bytes32 private constant ESTIMATE_CCIP_MESSAGE_ID = keccak256('CCIP Message ID');\\n    address private constant ESTIMATE_SOURCE_ADDRESS = 0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC;\\n\\n    /**\\n     * @notice Emitted when the cross-chain endpoint contract reference is set\\n     * @param endpointAddress The address of the cross-chain endpoint contract\\n     */\\n    event SetEndpoint(address indexed endpointAddress);\\n\\n    /**\\n     * @notice Emitted when a chain ID pair is added or updated\\n     * @param standardId The standard EVM chain ID\\n     * @param ccipId The CCIP chain selector\\n     */\\n    event SetChainIdPair(uint256 indexed standardId, uint64 indexed ccipId);\\n\\n    /**\\n     * @notice Emitted when a chain ID pair is removed\\n     * @param standardId The standard EVM chain ID\\n     * @param ccipId The CCIP chain selector\\n     */\\n    event RemoveChainIdPair(uint256 indexed standardId, uint64 indexed ccipId);\\n\\n    /**\\n     * @notice Emitted when the default value of minimum target gas is set\\n     * @param minTargetGas The value of minimum target gas\\n     */\\n    event SetMinTargetGasDefault(uint256 minTargetGas);\\n\\n    /**\\n     * @notice Emitted when the custom value of minimum target gas is set\\n     * @param standardChainId The standard EVM chain ID\\n     * @param minTargetGas The value of minimum target gas\\n     */\\n    event SetMinTargetGasCustom(uint256 standardChainId, uint256 minTargetGas);\\n\\n    /**\\n     * @notice Emitted when the custom value of minimum target gas is removed\\n     * @param standardChainId The standard EVM chain ID\\n     */\\n    event RemoveMinTargetGasCustom(uint256 standardChainId);\\n\\n    /**\\n     * @notice Emitted when the address of the processing fee collector is set\\n     * @param processingFeeCollector The address of the processing fee collector\\n     */\\n    event SetProcessingFeeCollector(address indexed processingFeeCollector);\\n\\n    /**\\n     * @notice Emitted when the result info value is returned from targetGasEstimate\\n     * @param isSuccess The status of the action execution\\n     * @param gasUsed The amount of gas used\\n     */\\n    error ResultInfo(bool isSuccess, uint256 gasUsed);\\n\\n    /**\\n     * @notice Emitted when there is no registered CCIP chain selector matching the standard EVM chain ID\\n     */\\n    error CcipChainIdNotSetError();\\n\\n    /**\\n     * @notice Emitted when the provided target gas value is not sufficient for the message processing\\n     */\\n    error MinTargetGasError();\\n\\n    /**\\n     * @notice Emitted when the provided call value is not sufficient for the message processing\\n     */\\n    error ProcessingFeeError();\\n\\n    /**\\n     * @notice Emitted when the caller is not the CCIP endpoint\\n     */\\n    error OnlyEndpointError();\\n\\n    /**\\n     * @notice Emitted when the caller is not the estimator account\\n     */\\n    error OnlyEstimatorError();\\n\\n    /**\\n     * @dev Modifier to check if the caller is the CCIP endpoint\\n     */\\n    modifier onlyEndpointOrSelf() {\\n        if (msg.sender != address(endpoint) && msg.sender != address(this)) {\\n            revert OnlyEndpointError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the caller is the estimator account\\n     */\\n    modifier onlyEstimator() {\\n        if (msg.sender != ESTIMATOR_ADDRESS) {\\n            revert OnlyEstimatorError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deploys the ChainlinkCcipGateway contract\\n     * @param _endpointAddress The cross-chain endpoint address\\n     * @param _chainIdPairs The correspondence between standard EVM chain IDs and CCIP chain selectors\\n     * @param _minTargetGasDefault The default value of minimum target gas\\n     * @param _minTargetGasCustomData The custom values of minimum target gas by standard chain IDs\\n     * @param _targetGasReserve The initial gas reserve value for target chain action processing\\n     * @param _processingFeeCollector The initial address of the processing fee collector\\n     * @param _owner The address of the initial owner of the contract\\n     * @param _managers The addresses of initial managers of the contract\\n     * @param _addOwnerToManagers The flag to optionally add the owner to the list of managers\\n     */\\n    constructor(\\n        address _endpointAddress,\\n        ChainIdPair[] memory _chainIdPairs,\\n        uint256 _minTargetGasDefault,\\n        DataStructures.KeyToValue[] memory _minTargetGasCustomData,\\n        uint256 _targetGasReserve,\\n        address _processingFeeCollector,\\n        address _owner,\\n        address[] memory _managers,\\n        bool _addOwnerToManagers\\n    ) {\\n        _setEndpoint(_endpointAddress);\\n\\n        for (uint256 index; index < _chainIdPairs.length; index++) {\\n            ChainIdPair memory chainIdPair = _chainIdPairs[index];\\n\\n            _setChainIdPair(chainIdPair.standardId, chainIdPair.ccipId);\\n        }\\n\\n        _setMinTargetGasDefault(_minTargetGasDefault);\\n\\n        for (uint256 index; index < _minTargetGasCustomData.length; index++) {\\n            DataStructures.KeyToValue memory minTargetGasCustomEntry = _minTargetGasCustomData[\\n                index\\n            ];\\n\\n            _setMinTargetGasCustom(minTargetGasCustomEntry.key, minTargetGasCustomEntry.value);\\n        }\\n\\n        _setTargetGasReserve(_targetGasReserve);\\n\\n        _setProcessingFeeCollector(_processingFeeCollector);\\n\\n        _initEstimate();\\n\\n        _initRoles(_owner, _managers, _addOwnerToManagers);\\n    }\\n\\n    /**\\n     * @notice Sets the gateway client contract reference\\n     * @param _clientAddress The gateway client contract address\\n     */\\n    function setClient(address payable _clientAddress) external virtual override onlyManager {\\n        AddressHelper.requireContract(_clientAddress);\\n\\n        client = IGatewayClient(_clientAddress);\\n\\n        variableBalanceRecords = IVariableBalanceRecordsProvider(_clientAddress)\\n            .variableBalanceRecords();\\n\\n        emit SetClient(_clientAddress);\\n    }\\n\\n    /**\\n     * @notice Sets the cross-chain endpoint contract reference\\n     * @param _endpointAddress The address of the cross-chain endpoint contract\\n     */\\n    function setEndpoint(address _endpointAddress) external onlyManager {\\n        _setEndpoint(_endpointAddress);\\n    }\\n\\n    /**\\n     * @notice Adds or updates registered chain ID pairs\\n     * @param _chainIdPairs The list of chain ID pairs\\n     */\\n    function setChainIdPairs(ChainIdPair[] calldata _chainIdPairs) external onlyManager {\\n        for (uint256 index; index < _chainIdPairs.length; index++) {\\n            ChainIdPair calldata chainIdPair = _chainIdPairs[index];\\n\\n            _setChainIdPair(chainIdPair.standardId, chainIdPair.ccipId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes registered chain ID pairs\\n     * @param _standardChainIds The list of standard EVM chain IDs\\n     */\\n    function removeChainIdPairs(uint256[] calldata _standardChainIds) external onlyManager {\\n        for (uint256 index; index < _standardChainIds.length; index++) {\\n            uint256 standardId = _standardChainIds[index];\\n\\n            _removeChainIdPair(standardId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the default value of minimum target gas\\n     * @param _minTargetGas The value of minimum target gas\\n     */\\n    function setMinTargetGasDefault(uint256 _minTargetGas) external onlyManager {\\n        _setMinTargetGasDefault(_minTargetGas);\\n    }\\n\\n    /**\\n     * @notice Sets the custom value of minimum target gas by the standard chain ID\\n     * @param _standardChainId The standard EVM ID of the target chain\\n     * @param _minTargetGas The value of minimum target gas\\n     */\\n    function setMinTargetGasCustom(\\n        uint256 _standardChainId,\\n        uint256 _minTargetGas\\n    ) external onlyManager {\\n        _setMinTargetGasCustom(_standardChainId, _minTargetGas);\\n    }\\n\\n    /**\\n     * @notice Removes the custom value of minimum target gas by the standard chain ID\\n     * @param _standardChainId The standard EVM ID of the target chain\\n     */\\n    function removeMinTargetGasCustom(uint256 _standardChainId) external onlyManager {\\n        _removeMinTargetGasCustom(_standardChainId);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the processing fee collector\\n     * @param _processingFeeCollector The address of the processing fee collector\\n     */\\n    function setProcessingFeeCollector(address _processingFeeCollector) external onlyManager {\\n        _setProcessingFeeCollector(_processingFeeCollector);\\n    }\\n\\n    /**\\n     * @notice Send a cross-chain message\\n     * @dev The settings parameter contains ABI-encoded values (targetGas, processingFee)\\n     * @param _targetChainId The message target chain ID\\n     * @param _message The message content\\n     * @param _settings The gateway-specific settings\\n     */\\n    function sendMessage(\\n        uint256 _targetChainId,\\n        bytes calldata _message,\\n        bytes calldata _settings\\n    ) external payable onlyClient whenNotPaused {\\n        (address peerAddress, uint64 targetCcipChainId) = _checkPeer(_targetChainId);\\n\\n        (bytes memory adapterParameters, uint256 processingFee) = _checkSettings(\\n            _settings,\\n            _targetChainId\\n        );\\n\\n        // - - - Processing fee transfer - - -\\n\\n        if (msg.value < processingFee) {\\n            revert ProcessingFeeError();\\n        }\\n\\n        if (processingFee > 0 && processingFeeCollector != address(0)) {\\n            TransferHelper.safeTransferNative(processingFeeCollector, processingFee);\\n        }\\n\\n        // - - -\\n\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        Client.EVM2AnyMessage memory evm2AnyMessage = _createCcipMessage(\\n            peerAddress,\\n            _message,\\n            adapterParameters\\n        );\\n\\n        // Send the message\\n        endpoint.ccipSend{ value: msg.value - processingFee }(targetCcipChainId, evm2AnyMessage);\\n    }\\n\\n    /**\\n     * @notice Receives cross-chain messages\\n     * @dev The function is called by the cross-chain endpoint\\n     * @param _message The structure containing the message data\\n     */\\n    function ccipReceive(\\n        Client.Any2EVMMessage memory _message\\n    ) external override nonReentrant onlyEndpointOrSelf {\\n        if (paused()) {\\n            emit TargetPausedFailure();\\n\\n            return;\\n        }\\n\\n        if (address(client) == address(0)) {\\n            emit TargetClientNotSetFailure();\\n\\n            return;\\n        }\\n\\n        uint256 sourceStandardChainId = ccipToStandardChainId[_message.sourceChainSelector];\\n\\n        address fromAddress = abi.decode(_message.sender, (address));\\n\\n        bool condition = sourceStandardChainId != 0 &&\\n            fromAddress != address(0) &&\\n            fromAddress == peerMap[sourceStandardChainId];\\n\\n        if (!condition) {\\n            emit TargetFromAddressFailure(sourceStandardChainId, fromAddress);\\n\\n            return;\\n        }\\n\\n        (bool hasGasReserve, uint256 gasAllowed) = GasReserveHelper.checkGasReserve(\\n            targetGasReserve\\n        );\\n\\n        if (!hasGasReserve) {\\n            emit TargetGasReserveFailure(sourceStandardChainId);\\n\\n            return;\\n        }\\n\\n        try\\n            client.handleExecutionPayload{ gas: gasAllowed }(sourceStandardChainId, _message.data)\\n        {} catch {\\n            emit TargetExecutionFailure();\\n        }\\n    }\\n\\n    /**\\n     * @notice Gas consumption estimate on the target chain\\n     * @param _targetMessage The content of the cross-chain message\\n     */\\n    function estimateTarget(\\n        TargetMessage calldata _targetMessage\\n    ) external onlyEstimator whenNotPaused {\\n        uint256 variableBalanceBefore = variableBalanceRecords.getAccountBalance(\\n            _targetMessage.targetRecipient,\\n            _targetMessage.vaultType\\n        );\\n\\n        bytes memory payloadData = abi.encode(_targetMessage);\\n\\n        Client.Any2EVMMessage memory ccipMessage = Client.Any2EVMMessage({\\n            messageId: ESTIMATE_CCIP_MESSAGE_ID,\\n            sourceChainSelector: ESTIMATE_SOURCE_CCIP_CHAIN_ID,\\n            sender: abi.encode(ESTIMATE_SOURCE_ADDRESS),\\n            data: payloadData,\\n            destTokenAmounts: new Client.EVMTokenAmount[](0)\\n        });\\n\\n        uint256 gasBefore = gasleft();\\n\\n        // - - - Target chain actions - - -\\n\\n        self.ccipReceive(ccipMessage);\\n\\n        // - - -\\n\\n        uint256 gasUsed = gasBefore - gasleft();\\n\\n        uint256 variableBalanceAfter = variableBalanceRecords.getAccountBalance(\\n            _targetMessage.targetRecipient,\\n            _targetMessage.vaultType\\n        );\\n\\n        bool isSuccess = (variableBalanceAfter == variableBalanceBefore);\\n\\n        revert ResultInfo(isSuccess, gasUsed);\\n    }\\n\\n    /**\\n     * @notice Cross-chain message fee estimation\\n     * @dev The settings parameter contains ABI-encoded values (targetGas, processingFee)\\n     * @param _targetChainId The ID of the target chain\\n     * @param _message The message content\\n     * @param _settings The gateway-specific settings\\n     * @return Message fee\\n     */\\n    function messageFee(\\n        uint256 _targetChainId,\\n        bytes calldata _message,\\n        bytes calldata _settings\\n    ) external view returns (uint256) {\\n        (address peerAddress, uint64 targetCcipChainId) = _checkPeer(_targetChainId);\\n\\n        (bytes memory adapterParameters, uint256 processingFee) = _checkSettings(\\n            _settings,\\n            _targetChainId\\n        );\\n\\n        Client.EVM2AnyMessage memory ccipMessage = _createCcipMessage(\\n            peerAddress,\\n            _message,\\n            adapterParameters\\n        );\\n\\n        uint256 endpointNativeFee = endpoint.getFee(targetCcipChainId, ccipMessage);\\n\\n        return endpointNativeFee + processingFee;\\n    }\\n\\n    /**\\n     * @notice IERC165 supports an interface ID\\n     * @param _interfaceId The interface ID to check\\n     * @return true if the interface ID is supported\\n     */\\n    function supportsInterface(bytes4 _interfaceId) external pure override returns (bool) {\\n        return\\n            _interfaceId == type(IAny2EVMMessageReceiver).interfaceId ||\\n            _interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    /**\\n     * @notice The value of minimum target gas by the standard chain ID\\n     * @param _standardChainId The standard EVM ID of the target chain\\n     * @return The value of minimum target gas\\n     */\\n    function minTargetGas(uint256 _standardChainId) public view returns (uint256) {\\n        DataStructures.OptionalValue storage optionalValue = minTargetGasCustom[_standardChainId];\\n\\n        if (optionalValue.isSet) {\\n            return optionalValue.value;\\n        }\\n\\n        return minTargetGasDefault;\\n    }\\n\\n    function _setEndpoint(address _endpointAddress) private {\\n        AddressHelper.requireContract(_endpointAddress);\\n\\n        endpoint = IRouterClient(_endpointAddress);\\n\\n        emit SetEndpoint(_endpointAddress);\\n    }\\n\\n    function _setChainIdPair(uint256 _standardId, uint64 _ccipId) private {\\n        standardToCcipChainId[_standardId] = _ccipId;\\n        ccipToStandardChainId[_ccipId] = _standardId;\\n\\n        emit SetChainIdPair(_standardId, _ccipId);\\n    }\\n\\n    function _removeChainIdPair(uint256 _standardId) private {\\n        uint64 ccipId = standardToCcipChainId[_standardId];\\n\\n        delete standardToCcipChainId[_standardId];\\n        delete ccipToStandardChainId[ccipId];\\n\\n        emit RemoveChainIdPair(_standardId, ccipId);\\n    }\\n\\n    function _setMinTargetGasDefault(uint256 _minTargetGas) private {\\n        minTargetGasDefault = _minTargetGas;\\n\\n        emit SetMinTargetGasDefault(_minTargetGas);\\n    }\\n\\n    function _setMinTargetGasCustom(uint256 _standardChainId, uint256 _minTargetGas) private {\\n        minTargetGasCustom[_standardChainId] = DataStructures.OptionalValue({\\n            isSet: true,\\n            value: _minTargetGas\\n        });\\n\\n        emit SetMinTargetGasCustom(_standardChainId, _minTargetGas);\\n    }\\n\\n    function _removeMinTargetGasCustom(uint256 _standardChainId) private {\\n        delete minTargetGasCustom[_standardChainId];\\n\\n        emit RemoveMinTargetGasCustom(_standardChainId);\\n    }\\n\\n    function _setProcessingFeeCollector(address _processingFeeCollector) private {\\n        processingFeeCollector = _processingFeeCollector;\\n\\n        emit SetProcessingFeeCollector(_processingFeeCollector);\\n    }\\n\\n    function _checkPeer(\\n        uint256 _chainId\\n    ) private view returns (address peerAddress, uint64 ccipChainId) {\\n        peerAddress = peerMap[_chainId];\\n\\n        if (peerAddress == address(0)) {\\n            revert PeerNotSetError();\\n        }\\n\\n        ccipChainId = standardToCcipChainId[_chainId];\\n\\n        if (ccipChainId == 0) {\\n            revert CcipChainIdNotSetError();\\n        }\\n    }\\n\\n    function _checkSettings(\\n        bytes calldata _settings,\\n        uint256 _targetChainId\\n    ) private view returns (bytes memory adapterParameters, uint256 processingFee) {\\n        uint256 targetGas;\\n        (targetGas, processingFee) = abi.decode(_settings, (uint256, uint256));\\n\\n        uint256 minTargetGasValue = minTargetGas(_targetChainId);\\n\\n        if (targetGas < minTargetGasValue) {\\n            revert MinTargetGasError();\\n        }\\n\\n        adapterParameters = Client._argsToBytes(\\n            Client.EVMExtraArgsV1({ gasLimit: targetGas, strict: false })\\n        );\\n    }\\n\\n    function _createCcipMessage(\\n        address _peerAddress,\\n        bytes calldata _message,\\n        bytes memory _adapterParameters\\n    ) private pure returns (Client.EVM2AnyMessage memory) {\\n        return\\n            Client.EVM2AnyMessage({\\n                receiver: abi.encode(_peerAddress), // ABI-encoded receiver address\\n                data: _message,\\n                tokenAmounts: new Client.EVMTokenAmount[](0), // Empty array indicating no tokens are being sent\\n                extraArgs: _adapterParameters,\\n                feeToken: address(0) // Native token\\n            });\\n    }\\n\\n    function _initEstimate() private {\\n        self = this;\\n\\n        peerMap[ESTIMATE_SOURCE_STANDARD_CHAIN_ID] = ESTIMATE_SOURCE_ADDRESS;\\n        ccipToStandardChainId[ESTIMATE_SOURCE_CCIP_CHAIN_ID] = ESTIMATE_SOURCE_STANDARD_CHAIN_ID;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/crosschain/GatewayBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport { IGateway } from './interfaces/IGateway.sol';\\nimport { IGatewayClient } from './interfaces/IGatewayClient.sol';\\nimport { BalanceManagement } from '../BalanceManagement.sol';\\nimport { Pausable } from '../Pausable.sol';\\nimport { TargetGasReserve } from './TargetGasReserve.sol';\\nimport { ZeroAddressError } from '../Errors.sol';\\nimport '../helpers/AddressHelper.sol' as AddressHelper;\\nimport '../Constants.sol' as Constants;\\nimport '../DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title GatewayBase\\n * @notice Base contract that implements the cross-chain gateway logic\\n */\\nabstract contract GatewayBase is\\n    Pausable,\\n    ReentrancyGuard,\\n    TargetGasReserve,\\n    BalanceManagement,\\n    IGateway\\n{\\n    /**\\n     * @dev Gateway client contract reference\\n     */\\n    IGatewayClient public client;\\n\\n    /**\\n     * @dev Registered peer gateway addresses by the chain ID\\n     */\\n    mapping(uint256 /*peerChainId*/ => address /*peerAddress*/) public peerMap;\\n\\n    /**\\n     * @dev Registered peer gateway chain IDs\\n     */\\n    uint256[] public peerChainIdList;\\n\\n    /**\\n     * @dev Registered peer gateway chain ID indices\\n     */\\n    mapping(uint256 /*peerChainId*/ => DataStructures.OptionalValue /*peerChainIdIndex*/)\\n        public peerChainIdIndexMap;\\n\\n    /**\\n     * @notice Emitted when the gateway client contract reference is set\\n     * @param clientAddress The gateway client contract address\\n     */\\n    event SetClient(address indexed clientAddress);\\n\\n    /**\\n     * @notice Emitted when a registered peer gateway contract address is added or updated\\n     * @param chainId The chain ID of the registered peer gateway\\n     * @param peerAddress The address of the registered peer gateway contract\\n     */\\n    event SetPeer(uint256 indexed chainId, address indexed peerAddress);\\n\\n    /**\\n     * @notice Emitted when a registered peer gateway contract address is removed\\n     * @param chainId The chain ID of the registered peer gateway\\n     */\\n    event RemovePeer(uint256 indexed chainId);\\n\\n    /**\\n     * @notice Emitted when the target chain gateway is paused\\n     */\\n    event TargetPausedFailure();\\n\\n    /**\\n     * @notice Emitted when the target chain gateway client contract is not set\\n     */\\n    event TargetClientNotSetFailure();\\n\\n    /**\\n     * @notice Emitted when the message source address does not match the registered peer gateway on the target chain\\n     * @param sourceChainId The ID of the message source chain\\n     * @param fromAddress The address of the message source\\n     */\\n    event TargetFromAddressFailure(uint256 indexed sourceChainId, address indexed fromAddress);\\n\\n    /**\\n     * @notice Emitted when the gas reserve on the target chain does not allow further action processing\\n     * @param sourceChainId The ID of the message source chain\\n     */\\n    event TargetGasReserveFailure(uint256 indexed sourceChainId);\\n\\n    /**\\n     * @notice Emitted when the gateway client execution on the target chain fails\\n     */\\n    event TargetExecutionFailure();\\n\\n    /**\\n     * @notice Emitted when the caller is not the gateway client contract\\n     */\\n    error OnlyClientError();\\n\\n    /**\\n     * @notice Emitted when the peer config address for the current chain does not match the current contract\\n     */\\n    error PeerAddressMismatchError();\\n\\n    /**\\n     * @notice Emitted when the peer gateway address for the specified chain is not set\\n     */\\n    error PeerNotSetError();\\n\\n    /**\\n     * @notice Emitted when the chain ID is not set\\n     */\\n    error ZeroChainIdError();\\n\\n    /**\\n     * @dev Modifier to check if the caller is the gateway client contract\\n     */\\n    modifier onlyClient() {\\n        if (msg.sender != address(client)) {\\n            revert OnlyClientError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the gateway client contract reference\\n     * @param _clientAddress The gateway client contract address\\n     */\\n    function setClient(address payable _clientAddress) external virtual onlyManager {\\n        AddressHelper.requireContract(_clientAddress);\\n\\n        client = IGatewayClient(_clientAddress);\\n\\n        emit SetClient(_clientAddress);\\n    }\\n\\n    /**\\n     * @notice Adds or updates registered peer gateways\\n     * @param _peers Chain IDs and addresses of peer gateways\\n     */\\n    function setPeers(\\n        DataStructures.KeyToAddressValue[] calldata _peers\\n    ) external virtual onlyManager {\\n        for (uint256 index; index < _peers.length; index++) {\\n            DataStructures.KeyToAddressValue calldata item = _peers[index];\\n\\n            uint256 chainId = item.key;\\n            address peerAddress = item.value;\\n\\n            // Allow the same configuration on multiple chains\\n            if (chainId == block.chainid) {\\n                if (peerAddress != address(this)) {\\n                    revert PeerAddressMismatchError();\\n                }\\n            } else {\\n                _setPeer(chainId, peerAddress);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes registered peer gateways\\n     * @param _chainIds Peer gateway chain IDs\\n     */\\n    function removePeers(uint256[] calldata _chainIds) external virtual onlyManager {\\n        for (uint256 index; index < _chainIds.length; index++) {\\n            uint256 chainId = _chainIds[index];\\n\\n            // Allow the same configuration on multiple chains\\n            if (chainId != block.chainid) {\\n                _removePeer(chainId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the peer gateway count\\n     * @return The peer gateway count\\n     */\\n    function peerCount() external view virtual returns (uint256) {\\n        return peerChainIdList.length;\\n    }\\n\\n    /**\\n     * @notice Getter of the complete list of the peer gateway chain IDs\\n     * @return The complete list of the peer gateway chain IDs\\n     */\\n    function fullPeerChainIdList() external view virtual returns (uint256[] memory) {\\n        return peerChainIdList;\\n    }\\n\\n    function _setPeer(uint256 _chainId, address _peerAddress) internal virtual {\\n        if (_chainId == 0) {\\n            revert ZeroChainIdError();\\n        }\\n\\n        if (_peerAddress == address(0)) {\\n            revert ZeroAddressError();\\n        }\\n\\n        DataStructures.combinedMapSet(\\n            peerMap,\\n            peerChainIdList,\\n            peerChainIdIndexMap,\\n            _chainId,\\n            _peerAddress,\\n            Constants.LIST_SIZE_LIMIT_DEFAULT\\n        );\\n\\n        emit SetPeer(_chainId, _peerAddress);\\n    }\\n\\n    function _removePeer(uint256 _chainId) internal virtual {\\n        if (_chainId == 0) {\\n            revert ZeroChainIdError();\\n        }\\n\\n        DataStructures.combinedMapRemove(peerMap, peerChainIdList, peerChainIdIndexMap, _chainId);\\n\\n        emit RemovePeer(_chainId);\\n    }\\n\\n    function _checkPeerAddress(uint256 _chainId) internal virtual returns (address) {\\n        address peerAddress = peerMap[_chainId];\\n\\n        if (peerAddress == address(0)) {\\n            revert PeerNotSetError();\\n        }\\n\\n        return peerAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/crosschain/interfaces/IGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IGateway\\n * @notice Cross-chain gateway interface\\n */\\ninterface IGateway {\\n    /**\\n     * @notice Send a cross-chain message\\n     * @param _targetChainId The message target chain ID\\n     * @param _message The message content\\n     * @param _settings The gateway-specific settings\\n     */\\n    function sendMessage(\\n        uint256 _targetChainId,\\n        bytes calldata _message,\\n        bytes calldata _settings\\n    ) external payable;\\n\\n    /**\\n     * @notice Cross-chain message fee estimation\\n     * @param _targetChainId The ID of the target chain\\n     * @param _message The message content\\n     * @param _settings The gateway-specific settings\\n     */\\n    function messageFee(\\n        uint256 _targetChainId,\\n        bytes calldata _message,\\n        bytes calldata _settings\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/crosschain/interfaces/IGatewayClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IGatewayClient\\n * @notice Cross-chain gateway client interface\\n */\\ninterface IGatewayClient {\\n    /**\\n     * @notice Cross-chain message handler on the target chain\\n     * @dev The function is called by cross-chain gateways\\n     * @param _messageSourceChainId The ID of the message source chain\\n     * @param _payloadData The content of the cross-chain message\\n     */\\n    function handleExecutionPayload(\\n        uint256 _messageSourceChainId,\\n        bytes calldata _payloadData\\n    ) external;\\n\\n    /**\\n     * @notice The standard \\\"receive\\\" function\\n     */\\n    receive() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/crosschain/TargetGasReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ManagerRole } from '../roles/ManagerRole.sol';\\n\\n/**\\n * @title TargetGasReserve\\n * @notice Base contract that implements the gas reserve logic for the target chain actions\\n */\\nabstract contract TargetGasReserve is ManagerRole {\\n    /**\\n     * @dev The target chain gas reserve value\\n     */\\n    uint256 public targetGasReserve;\\n\\n    /**\\n     * @notice Emitted when the target chain gas reserve value is set\\n     * @param gasReserve The target chain gas reserve value\\n     */\\n    event SetTargetGasReserve(uint256 gasReserve);\\n\\n    /**\\n     * @notice Sets the target chain gas reserve value\\n     * @param _gasReserve The target chain gas reserve value\\n     */\\n    function setTargetGasReserve(uint256 _gasReserve) external onlyManager {\\n        _setTargetGasReserve(_gasReserve);\\n    }\\n\\n    function _setTargetGasReserve(uint256 _gasReserve) internal virtual {\\n        targetGasReserve = _gasReserve;\\n\\n        emit SetTargetGasReserve(_gasReserve);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Optional value structure\\n * @dev Is used in mappings to allow zero values\\n * @param isSet Value presence flag\\n * @param value Numeric value\\n */\\nstruct OptionalValue {\\n    bool isSet;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure\\n * @dev Is used as an array parameter item to perform multiple key-value settings\\n * @param key Numeric key\\n * @param value Numeric value\\n */\\nstruct KeyToValue {\\n    uint256 key;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure for address values\\n * @dev Is used as an array parameter item to perform multiple key-value settings with address values\\n * @param key Numeric key\\n * @param value Address value\\n */\\nstruct KeyToAddressValue {\\n    uint256 key;\\n    address value;\\n}\\n\\n/**\\n * @notice Address-to-flag structure\\n * @dev Is used as an array parameter item to perform multiple settings\\n * @param account Account address\\n * @param flag Flag value\\n */\\nstruct AccountToFlag {\\n    address account;\\n    bool flag;\\n}\\n\\n/**\\n * @notice Emitted when a list exceeds the size limit\\n */\\nerror ListSizeLimitError();\\n\\n/**\\n * @notice Sets or updates a value in a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @param _value The address value\\n * @param _sizeLimit The map and list size limit\\n * @return isNewKey True if the key was just added, otherwise false\\n */\\nfunction combinedMapSet(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isNewKey) {\\n    isNewKey = !_keyIndexMap[_key].isSet;\\n\\n    if (isNewKey) {\\n        uniqueListAdd(_keyList, _keyIndexMap, _key, _sizeLimit);\\n    }\\n\\n    _map[_key] = _value;\\n}\\n\\n/**\\n * @notice Removes a value from a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @return isChanged True if the combined map was changed, otherwise false\\n */\\nfunction combinedMapRemove(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key\\n) returns (bool isChanged) {\\n    isChanged = _keyIndexMap[_key].isSet;\\n\\n    if (isChanged) {\\n        delete _map[_key];\\n        uniqueListRemove(_keyList, _keyIndexMap, _key);\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListAdd(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListRemove(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            uint256 lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListAdd(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListRemove(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            address lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds or removes a value to/from a unique address value list (a list with value index mapping)\\n * @dev The list size limit is checked on items adding only\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _flag The value inclusion flag\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListUpdate(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    bool _flag,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    return\\n        _flag\\n            ? uniqueAddressListAdd(_list, _indexMap, _value, _sizeLimit)\\n            : uniqueAddressListRemove(_list, _indexMap, _value);\\n}\\n\"\r\n    },\r\n    \"contracts/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when an attempt to burn a token fails\\n */\\nerror TokenBurnError();\\n\\n/**\\n * @notice Emitted when an attempt to mint a token fails\\n */\\nerror TokenMintError();\\n\\n/**\\n * @notice Emitted when a zero address is specified where it is not allowed\\n */\\nerror ZeroAddressError();\\n\"\r\n    },\r\n    \"contracts/helpers/AddressHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when the account is not a contract\\n * @param account The account address\\n */\\nerror NonContractAddressError(address account);\\n\\n/**\\n * @notice Function to check if the account is a contract\\n * @return The account contract status flag\\n */\\nfunction isContract(address _account) view returns (bool) {\\n    return _account.code.length > 0;\\n}\\n\\n/**\\n * @notice Function to require an account to be a contract\\n */\\nfunction requireContract(address _account) view {\\n    if (!isContract(_account)) {\\n        revert NonContractAddressError(_account);\\n    }\\n}\\n\\n/**\\n * @notice Function to require an account to be a contract or a zero address\\n */\\nfunction requireContractOrZeroAddress(address _account) view {\\n    if (_account != address(0)) {\\n        requireContract(_account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/GasReserveHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Function to check if the available gas matches the specified gas reserve value\\n * @param _gasReserve Gas reserve value\\n * @return hasGasReserve Flag of gas reserve availability\\n * @return gasAllowed The remaining gas quantity taking the reserve into account\\n */\\nfunction checkGasReserve(\\n    uint256 _gasReserve\\n) view returns (bool hasGasReserve, uint256 gasAllowed) {\\n    uint256 gasLeft = gasleft();\\n\\n    hasGasReserve = gasLeft >= _gasReserve;\\n    gasAllowed = hasGasReserve ? gasLeft - _gasReserve : 0;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when an approval action fails\\n */\\nerror SafeApproveError();\\n\\n/**\\n * @notice Emitted when a transfer action fails\\n */\\nerror SafeTransferError();\\n\\n/**\\n * @notice Emitted when a transferFrom action fails\\n */\\nerror SafeTransferFromError();\\n\\n/**\\n * @notice Emitted when a transfer of the native token fails\\n */\\nerror SafeTransferNativeError();\\n\\n/**\\n * @notice Safely approve the token to the account\\n * @param _token The token address\\n * @param _to The token approval recipient address\\n * @param _value The token approval amount\\n */\\nfunction safeApprove(address _token, address _to, uint256 _value) {\\n    // 0x095ea7b3 is the selector for \\\"approve(address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0x095ea7b3, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeApproveError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the token to the account\\n * @param _token The token address\\n * @param _to The token transfer recipient address\\n * @param _value The token transfer amount\\n */\\nfunction safeTransfer(address _token, address _to, uint256 _value) {\\n    // 0xa9059cbb is the selector for \\\"transfer(address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0xa9059cbb, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeTransferError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the token between the accounts\\n * @param _token The token address\\n * @param _from The token transfer source address\\n * @param _to The token transfer recipient address\\n * @param _value The token transfer amount\\n */\\nfunction safeTransferFrom(address _token, address _from, address _to, uint256 _value) {\\n    // 0x23b872dd is the selector for \\\"transferFrom(address,address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0x23b872dd, _from, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeTransferFromError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the native token to the account\\n * @param _to The native token transfer recipient address\\n * @param _value The native token transfer amount\\n */\\nfunction safeTransferNative(address _to, uint256 _value) {\\n    (bool success, ) = _to.call{ value: _value }(new bytes(0));\\n\\n    if (!success) {\\n        revert SafeTransferNativeError();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IActionDataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IActionDataStructures\\n * @notice Action data structure declarations\\n */\\ninterface IActionDataStructures {\\n    /**\\n     * @notice Single-chain action data structure\\n     * @param fromTokenAddress The address of the input token\\n     * @param toTokenAddress The address of the output token\\n     * @param swapInfo The data for the single-chain swap\\n     * @param recipient The address of the recipient\\n     */\\n    struct LocalAction {\\n        address fromTokenAddress;\\n        address toTokenAddress;\\n        SwapInfo swapInfo;\\n        address recipient;\\n    }\\n\\n    /**\\n     * @notice Cross-chain action data structure\\n     * @param gatewayType The numeric type of the cross-chain gateway\\n     * @param vaultType The numeric type of the vault\\n     * @param sourceTokenAddress The address of the input token on the source chain\\n     * @param sourceSwapInfo The data for the source chain swap\\n     * @param targetChainId The action target chain ID\\n     * @param targetTokenAddress The address of the output token on the destination chain\\n     * @param targetSwapInfoOptions The list of data options for the target chain swap\\n     * @param targetRecipient The address of the recipient on the target chain\\n     * @param gatewaySettings The gateway-specific settings data\\n     */\\n    struct Action {\\n        uint256 gatewayType;\\n        uint256 vaultType;\\n        address sourceTokenAddress;\\n        SwapInfo sourceSwapInfo;\\n        uint256 targetChainId;\\n        address targetTokenAddress;\\n        SwapInfo[] targetSwapInfoOptions;\\n        address targetRecipient;\\n        bytes gatewaySettings;\\n    }\\n\\n    /**\\n     * @notice Token swap data structure\\n     * @param fromAmount The quantity of the token\\n     * @param routerType The numeric type of the swap router\\n     * @param routerData The data for the swap router call\\n     */\\n    struct SwapInfo {\\n        uint256 fromAmount;\\n        uint256 routerType;\\n        bytes routerData;\\n    }\\n\\n    /**\\n     * @notice Cross-chain message data structure\\n     * @param actionId The unique identifier of the cross-chain action\\n     * @param sourceSender The address of the sender on the source chain\\n     * @param vaultType The numeric type of the vault\\n     * @param targetTokenAddress The address of the output token on the target chain\\n     * @param targetSwapInfo The data for the target chain swap\\n     * @param targetRecipient The address of the recipient on the target chain\\n     */\\n    struct TargetMessage {\\n        uint256 actionId;\\n        address sourceSender;\\n        uint256 vaultType;\\n        address targetTokenAddress;\\n        SwapInfo targetSwapInfo;\\n        address targetRecipient;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ITokenBalance\\n * @notice Token balance interface\\n */\\ninterface ITokenBalance {\\n    /**\\n     * @notice Getter of the token balance by the account\\n     * @param _account The account address\\n     * @return Token balance\\n     */\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableBalanceRecords.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IVariableBalanceRecords\\n * @notice Variable balance records interface\\n */\\ninterface IVariableBalanceRecords {\\n    /**\\n     * @notice Increases the variable balance for the account\\n     * @param _account The account address\\n     * @param _vaultType The vault type\\n     * @param _amount The amount by which to increase the variable balance\\n     */\\n    function increaseBalance(address _account, uint256 _vaultType, uint256 _amount) external;\\n\\n    /**\\n     * @notice Clears the variable balance for the account\\n     * @param _account The account address\\n     * @param _vaultType The vault type\\n     */\\n    function clearBalance(address _account, uint256 _vaultType) external;\\n\\n    /**\\n     * @notice Getter of the variable balance by the account\\n     * @param _account The account address\\n     * @param _vaultType The vault type\\n     */\\n    function getAccountBalance(\\n        address _account,\\n        uint256 _vaultType\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableBalanceRecordsProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { IVariableBalanceRecords } from './IVariableBalanceRecords.sol';\\n\\n/**\\n * @title IVariableBalanceRecordsProvider\\n * @notice The variable balance records provider interface\\n */\\ninterface IVariableBalanceRecordsProvider {\\n    /**\\n     * @notice Getter of the variable balance records contract reference\\n     * @return The variable balance records contract reference\\n     */\\n    function variableBalanceRecords() external returns (IVariableBalanceRecords);\\n}\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Pausable as PausableBase } from '@openzeppelin/contracts/security/Pausable.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\n\\n/**\\n * @title Pausable\\n * @notice Base contract that implements the emergency pause mechanism\\n */\\nabstract contract Pausable is PausableBase, ManagerRole {\\n    /**\\n     * @notice Enter pause state\\n     */\\n    function pause() external onlyManager whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Exit pause state\\n     */\\n    function unpause() external onlyManager whenPaused {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/ManagerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { RoleBearers } from './RoleBearers.sol';\\n\\n/**\\n * @title ManagerRole\\n * @notice Base contract that implements the Manager role.\\n * The manager role is a high-permission role for core team members only.\\n * Managers can set vaults and routers addresses, fees, cross-chain protocols,\\n * and other parameters for Interchain (cross-chain) swaps and single-network swaps.\\n * Please note, the manager role is unique for every contract,\\n * hence different addresses may be assigned as managers for different contracts.\\n */\\nabstract contract ManagerRole is Ownable, RoleBearers {\\n    bytes32 private constant ROLE_KEY = keccak256('Manager');\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is updated\\n     * @param account The account address\\n     * @param value The Manager role status flag\\n     */\\n    event SetManager(address indexed account, bool indexed value);\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is renounced\\n     * @param account The account address\\n     */\\n    event RenounceManagerRole(address indexed account);\\n\\n    /**\\n     * @notice Emitted when the caller is not a Manager role bearer\\n     */\\n    error OnlyManagerError();\\n\\n    /**\\n     * @dev Modifier to check if the caller is a Manager role bearer\\n     */\\n    modifier onlyManager() {\\n        if (!isManager(msg.sender)) {\\n            revert OnlyManagerError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the Manager role status for the account\\n     * @param _account The account address\\n     * @param _value The Manager role status flag\\n     */\\n    function setManager(address _account, bool _value) public onlyOwner {\\n        _setRoleBearer(ROLE_KEY, _account, _value);\\n\\n        emit SetManager(_account, _value);\\n    }\\n\\n    /**\\n     * @notice Renounces the Manager role\\n     */\\n    function renounceManagerRole() external onlyManager {\\n        _setRoleBearer(ROLE_KEY, msg.sender, false);\\n\\n        emit RenounceManagerRole(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer count\\n     * @return The Manager role bearer count\\n     */\\n    function managerCount() external view returns (uint256) {\\n        return _roleBearerCount(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the complete list of the Manager role bearers\\n     * @return The complete list of the Manager role bearers\\n     */\\n    function fullManagerList() external view returns (address[] memory) {\\n        return _fullRoleBearerList(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer status\\n     * @param _account The account address\\n     */\\n    function isManager(address _account) public view returns (bool) {\\n        return _isRoleBearer(ROLE_KEY, _account);\\n    }\\n\\n    function _initRoles(\\n        address _owner,\\n        address[] memory _managers,\\n        bool _addOwnerToManagers\\n    ) internal {\\n        address ownerAddress = _owner == address(0) ? msg.sender : _owner;\\n\\n        for (uint256 index; index < _managers.length; index++) {\\n            setManager(_managers[index], true);\\n        }\\n\\n        if (_addOwnerToManagers && !isManager(ownerAddress)) {\\n            setManager(ownerAddress, true);\\n        }\\n\\n        if (ownerAddress != msg.sender) {\\n            transferOwnership(ownerAddress);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RoleBearers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '../Constants.sol' as Constants;\\nimport '../DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title RoleBearers\\n * @notice Base contract that implements role-based access control\\n * @dev A custom implementation providing full role bearer lists\\n */\\nabstract contract RoleBearers {\\n    mapping(bytes32 /*roleKey*/ => address[] /*roleBearers*/) private roleBearerTable;\\n    mapping(bytes32 /*roleKey*/ => mapping(address /*account*/ => DataStructures.OptionalValue /*status*/))\\n        private roleBearerIndexTable;\\n\\n    function _setRoleBearer(bytes32 _roleKey, address _account, bool _value) internal {\\n        DataStructures.uniqueAddressListUpdate(\\n            roleBearerTable[_roleKey],\\n            roleBearerIndexTable[_roleKey],\\n            _account,\\n            _value,\\n            Constants.LIST_SIZE_LIMIT_DEFAULT\\n        );\\n    }\\n\\n    function _isRoleBearer(bytes32 _roleKey, address _account) internal view returns (bool) {\\n        return roleBearerIndexTable[_roleKey][_account].isSet;\\n    }\\n\\n    function _roleBearerCount(bytes32 _roleKey) internal view returns (uint256) {\\n        return roleBearerTable[_roleKey].length;\\n    }\\n\\n    function _fullRoleBearerList(bytes32 _roleKey) internal view returns (address[] memory) {\\n        return roleBearerTable[_roleKey];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SystemVersionId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title SystemVersionId\\n * @notice Base contract providing the system version identifier\\n */\\nabstract contract SystemVersionId {\\n    /**\\n     * @dev The system version identifier\\n     */\\n    uint256 public constant SYSTEM_VERSION_ID = uint256(keccak256('Initial'));\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpointAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"standardId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"ccipId\",\"type\":\"uint64\"}],\"internalType\":\"struct ChainlinkCcipGateway.ChainIdPair[]\",\"name\":\"_chainIdPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_minTargetGasDefault\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct KeyToValue[]\",\"name\":\"_minTargetGasCustomData\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_targetGasReserve\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_processingFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_addOwnerToManagers\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CcipChainIdNotSetError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListSizeLimitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTargetGasError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NonContractAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyClientError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEndpointError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEstimatorError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManagerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeerAddressMismatchError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeerNotSetError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProcessingFeeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReservedTokenError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"name\":\"ResultInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferNativeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroChainIdError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"standardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ccipId\",\"type\":\"uint64\"}],\"name\":\"RemoveChainIdPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"standardChainId\",\"type\":\"uint256\"}],\"name\":\"RemoveMinTargetGasCustom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RemovePeer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RenounceManagerRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"standardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"ccipId\",\"type\":\"uint64\"}],\"name\":\"SetChainIdPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"SetClient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"endpointAddress\",\"type\":\"address\"}],\"name\":\"SetEndpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"standardChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTargetGas\",\"type\":\"uint256\"}],\"name\":\"SetMinTargetGasCustom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTargetGas\",\"type\":\"uint256\"}],\"name\":\"SetMinTargetGasDefault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"peerAddress\",\"type\":\"address\"}],\"name\":\"SetPeer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processingFeeCollector\",\"type\":\"address\"}],\"name\":\"SetProcessingFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasReserve\",\"type\":\"uint256\"}],\"name\":\"SetTargetGasReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TargetClientNotSetFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TargetExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"TargetFromAddressFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"}],\"name\":\"TargetGasReserveFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TargetPausedFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SYSTEM_VERSION_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"_message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"ccipToStandardChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"cleanup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"client\",\"outputs\":[{\"internalType\":\"contract IGatewayClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct IActionDataStructures.SwapInfo\",\"name\":\"targetSwapInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"targetRecipient\",\"type\":\"address\"}],\"internalType\":\"struct IActionDataStructures.TargetMessage\",\"name\":\"_targetMessage\",\"type\":\"tuple\"}],\"name\":\"estimateTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullManagerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullPeerChainIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_settings\",\"type\":\"bytes\"}],\"name\":\"messageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_standardChainId\",\"type\":\"uint256\"}],\"name\":\"minTargetGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minTargetGasCustom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTargetGasDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peerChainIdIndexMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peerChainIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peerMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processingFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_standardChainIds\",\"type\":\"uint256[]\"}],\"name\":\"removeChainIdPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_standardChainId\",\"type\":\"uint256\"}],\"name\":\"removeMinTargetGasCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"}],\"name\":\"removePeers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"self\",\"outputs\":[{\"internalType\":\"contract ChainlinkCcipGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_settings\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"standardId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"ccipId\",\"type\":\"uint64\"}],\"internalType\":\"struct ChainlinkCcipGateway.ChainIdPair[]\",\"name\":\"_chainIdPairs\",\"type\":\"tuple[]\"}],\"name\":\"setChainIdPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_clientAddress\",\"type\":\"address\"}],\"name\":\"setClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpointAddress\",\"type\":\"address\"}],\"name\":\"setEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_standardChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTargetGas\",\"type\":\"uint256\"}],\"name\":\"setMinTargetGasCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTargetGas\",\"type\":\"uint256\"}],\"name\":\"setMinTargetGasDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"internalType\":\"struct KeyToAddressValue[]\",\"name\":\"_peers\",\"type\":\"tuple[]\"}],\"name\":\"setPeers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_processingFeeCollector\",\"type\":\"address\"}],\"name\":\"setProcessingFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasReserve\",\"type\":\"uint256\"}],\"name\":\"setTargetGasReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"standardToCcipChainId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetGasReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableBalanceRecords\",\"outputs\":[{\"internalType\":\"contract IVariableBalanceRecords\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainlinkCcipGateway", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e561d5e02207fb5eb32cca20a699e0d8919a1476000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000249f00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000271000000000000000000000000036dd4c9151a3bb9aacb18547aa9743e2ffec359000000000000000000000000072e28c7f34100afefc399fcc0ae041b8fe5841ae000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000045849994fc9c7b15000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000033d343f77863cab8000000000000000000000000000000000000000000000000000000000000a86a000000000000000000000000000000000000000000000000594862ae1802b3d5000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000044ae84d8e9a374440000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000383a1891ae1915b100000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000009d70576d8e253bcf0000000000000000000000000000000000000000000000000000000000002105000000000000000000000000000000000000000000000000dda641cfe44aff8200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000bea976e3206971e6c96cb634c6a9f3c0a504416f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}