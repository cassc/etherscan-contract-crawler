{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IboInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\ninterface IboInterface is IERC721Enumerable {\\r\\n    function totalCvgPerToken(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function iboStartTimestamp() external view returns (uint256);\\r\\n\\r\\n    function getTokenIdsForWallet(address _wallet) external view returns (uint256[] memory);\\r\\n\\r\\n    function getTotalCvgDue() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPresaleCvgSeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\ninterface IPresaleCvgSeed is IERC721Enumerable {\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            ENUMS & STRUCTS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    enum SaleState {\\r\\n        NOT_ACTIVE,\\r\\n        PRESEED,\\r\\n        SEED,\\r\\n        OVER\\r\\n    }\\r\\n\\r\\n    struct PresaleInfo {\\r\\n        uint256 vestingType; // Define the presaler type\\r\\n        uint256 cvgAmount; // Total CVG amount claimable for the nft owner\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            SETTERS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    function setSaleState(SaleState _saleState) external;\\r\\n\\r\\n    function grantPreseed(address _wallet, uint256 _amount) external;\\r\\n\\r\\n    function grantSeed(address _wallet, uint256 _amount) external;\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            EXTERNALS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    function investMint(bool _isDai) external;\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            GETTERS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    function presaleInfoTokenId(uint256 _tokenId) external view returns (PresaleInfo memory);\\r\\n\\r\\n    function saleState() external view returns (SaleState);\\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view override returns (uint256);\\r\\n\\r\\n    function getTokenIdAndType(\\r\\n        address _wallet,\\r\\n        uint256 _index\\r\\n    ) external view returns (uint256 tokenId, uint256 typeVesting);\\r\\n\\r\\n    function getTokenIdsForWallet(address _wallet) external view returns (uint256[] memory);\\r\\n\\r\\n    function getTotalCvg() external view returns (uint256);\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                        WITHDRAW OWNER\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    function withdrawFunds() external;\\r\\n\\r\\n    function withdrawToken(address _token) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPresaleCvgWl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\ninterface IPresaleCvgWl is IERC721Enumerable {\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            ENUMS & STRUCTS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    enum SaleState {\\r\\n        NOT_ACTIVE,\\r\\n        WL,\\r\\n        OVER\\r\\n    }\\r\\n\\r\\n    struct PresaleInfo {\\r\\n        uint256 vestingType;\\r\\n        uint256 cvgAmount;\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            SETTERS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    function setSaleState(SaleState _saleState) external;\\r\\n\\r\\n    function setMerkleRootWlS(bytes32 _newMerkleRootWlS) external;\\r\\n\\r\\n    function setMerkleRootWlM(bytes32 _newMerkleRootWlM) external;\\r\\n\\r\\n    function setMerkleRootWlL(bytes32 _newMerkleRootWlL) external;\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            EXTERNALS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    function investMint(bytes32[] calldata _merkleProof, uint256 _amount) external;\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            GETTERS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    function presaleInfos(uint256 _tokenId) external view returns (PresaleInfo memory);\\r\\n\\r\\n    function getAmountCvgForVesting() external view returns (uint256);\\r\\n\\r\\n    function getTotalCvg() external view returns (uint256);\\r\\n\\r\\n    function saleState() external view returns (SaleState);\\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view override returns (uint256);\\r\\n\\r\\n    function getTokenIdAndType(\\r\\n        address _wallet,\\r\\n        uint256 _index\\r\\n    ) external view returns (uint256 tokenId, uint256 typeVesting);\\r\\n\\r\\n    function getTokenIdsForWallet(address _wallet) external view returns (uint256[] memory);\\r\\n\\r\\n    function MAX_SUPPLY_PRESALE() external view returns (uint256);\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                        WITHDRAW OWNER\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    function withdrawFunds() external;\\r\\n\\r\\n    function withdrawToken(address _token) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PresaleVesting/VestingCvg.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n _____\\r\\n/  __ \\\\\\r\\n| /  \\\\/ ___  _ ____   _____ _ __ __ _  ___ _ __   ___ ___\\r\\n| |    / _ \\\\| '_ \\\\ \\\\ / / _ \\\\ '__/ _` |/ _ \\\\ '_ \\\\ / __/ _ \\\\\\r\\n| \\\\__/\\\\ (_) | | | \\\\ V /  __/ | | (_| |  __/ | | | (_|  __/\\r\\n \\\\____/\\\\___/|_| |_|\\\\_/ \\\\___|_|  \\\\__, |\\\\___|_| |_|\\\\___\\\\___|\\r\\n                                 __/ |\\r\\n                                |___/\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/IPresaleCvgWl.sol\\\";\\r\\nimport \\\"../interfaces/IPresaleCvgSeed.sol\\\";\\r\\nimport \\\"../interfaces/IboInterface.sol\\\";\\r\\n\\r\\ncontract VestingCvg is Ownable2Step {\\r\\n    /// @dev Enum about vesting types\\r\\n    enum VestingType {\\r\\n        SEED,\\r\\n        WL,\\r\\n        IBO,\\r\\n        TEAM,\\r\\n        DAO\\r\\n    }\\r\\n    /// @dev Enum about the state of the vesting\\r\\n    enum State {\\r\\n        NOT_ACTIVE,\\r\\n        SET,\\r\\n        OPEN\\r\\n    }\\r\\n    /// @dev Struct Info about VestingSchedules\\r\\n    struct VestingSchedule {\\r\\n        uint80 daysBeforeCliff;\\r\\n        uint80 daysAfterCliff;\\r\\n        uint96 dropCliff;\\r\\n        uint256 totalAmount;\\r\\n        uint256 totalReleased;\\r\\n    }\\r\\n    struct InfoVestingTokenId {\\r\\n        uint256 amountReleasable;\\r\\n        uint256 totalCvg;\\r\\n        uint256 amountRedeemed;\\r\\n    }\\r\\n    /// @dev Max supply TEAM & DAO\\r\\n    uint256 public constant MAX_SUPPLY_TEAM = 12_750_000 * 10 ** 18;\\r\\n    uint256 public constant MAX_SUPPLY_DAO = 14_250_000 * 10 ** 18;\\r\\n\\r\\n    uint256 public constant ONE_DAY = 1 days;\\r\\n    uint256 public constant ONE_GWEI = 10 ** 9;\\r\\n\\r\\n    State public state;\\r\\n\\r\\n    IPresaleCvgWl public presaleWl;\\r\\n    IPresaleCvgSeed public presaleSeed;\\r\\n    IboInterface public ibo;\\r\\n    IERC20 public cvg;\\r\\n\\r\\n    address public whitelistedTeam;\\r\\n    address public whitelistedDao;\\r\\n\\r\\n    /// @dev Timestamp shared between all vestingSchedules to mark the beginning of the vesting\\r\\n    uint256 public startTimestamp;\\r\\n\\r\\n    /// @dev VestingType associated to the vesting schedule info\\r\\n    mapping(VestingType => VestingSchedule) public vestingSchedules;\\r\\n\\r\\n    mapping(uint256 => uint256) public amountReleasedIdSeed; // tokenId => amountReleased\\r\\n    mapping(uint256 => uint256) public amountReleasedIdWl; // tokenId => amountReleased\\r\\n    mapping(uint256 => uint256) public amountReleasedIdIbo; // tokenId => amountReleased\\r\\n\\r\\n    constructor(IPresaleCvgWl _presaleWl, IPresaleCvgSeed _presaleSeed, IboInterface _ibo) {\\r\\n        presaleWl = _presaleWl;\\r\\n        presaleSeed = _presaleSeed;\\r\\n        ibo = _ibo;\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            MODIFIERS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n\\r\\n    modifier onlyOwnerOfSeed(uint256 _tokenId) {\\r\\n        require(presaleSeed.ownerOf(_tokenId) == msg.sender, \\\"NOT_OWNED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerOfWl(uint256 _tokenId) {\\r\\n        require(presaleWl.ownerOf(_tokenId) == msg.sender, \\\"NOT_OWNED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerOfIbo(uint256 _tokenId) {\\r\\n        require(ibo.ownerOf(_tokenId) == msg.sender, \\\"NOT_OWNED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            SETTERS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n\\r\\n    function setWhitelistTeam(address newWhitelistedTeam) external onlyOwner {\\r\\n        whitelistedTeam = newWhitelistedTeam;\\r\\n    }\\r\\n\\r\\n    function setWhitelistDao(address newWhitelistedDao) external onlyOwner {\\r\\n        whitelistedDao = newWhitelistedDao;\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            GETTERS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n\\r\\n    function getTotalReleasedScheduleId(VestingType _vestingType) external view returns (uint256) {\\r\\n        return (vestingSchedules[_vestingType].totalReleased);\\r\\n    }\\r\\n\\r\\n    function getInfoVestingTokenId(\\r\\n        uint256 _tokenId,\\r\\n        VestingType _vestingType\\r\\n    ) external view returns (InfoVestingTokenId memory) {\\r\\n        (uint256 amountReleasable, uint256 totalCvg, uint256 amountRedeemed) = _computeReleaseAmount(\\r\\n            _tokenId,\\r\\n            _vestingType\\r\\n        );\\r\\n        return\\r\\n            InfoVestingTokenId({\\r\\n                amountReleasable: amountReleasable,\\r\\n                totalCvg: totalCvg,\\r\\n                amountRedeemed: amountRedeemed\\r\\n            });\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            EXTERNALS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n    /// @notice Set vesting with current timestamp, creates vestingSchedules for all vesting types (only callable by owner)\\r\\n    /// @dev Sum of all vesting schedule must be distributed in the contract before intializing it the vesting\\r\\n    function setVesting(IERC20 _cvg) external onlyOwner {\\r\\n        require(state == State.NOT_ACTIVE, \\\"VESTING_ALREADY_SET\\\");\\r\\n        state = State.SET;\\r\\n\\r\\n        require(\\r\\n            presaleSeed.saleState() == IPresaleCvgSeed.SaleState.OVER &&\\r\\n                presaleWl.saleState() == IPresaleCvgWl.SaleState.OVER,\\r\\n            \\\"PRESALE_ROUND_NOT_FINISHED\\\"\\r\\n        );\\r\\n\\r\\n        startTimestamp = block.timestamp;\\r\\n\\r\\n        /// @dev SEED SCHEDULE\\r\\n        uint256 seedAmount = presaleSeed.getTotalCvg();\\r\\n        vestingSchedules[VestingType.SEED] = VestingSchedule({\\r\\n            totalAmount: seedAmount,\\r\\n            totalReleased: 0,\\r\\n            daysBeforeCliff: 4 * 30,\\r\\n            daysAfterCliff: 15 * 30,\\r\\n            dropCliff: 50\\r\\n        });\\r\\n\\r\\n        /// @dev WL SCHEDULE\\r\\n        uint256 wlAmount = presaleWl.MAX_SUPPLY_PRESALE();\\r\\n        vestingSchedules[VestingType.WL] = VestingSchedule({\\r\\n            totalAmount: wlAmount,\\r\\n            totalReleased: 0,\\r\\n            daysBeforeCliff: 0,\\r\\n            daysAfterCliff: 3 * 30,\\r\\n            dropCliff: 330\\r\\n        });\\r\\n\\r\\n        /// @dev IBO SCHEDULE\\r\\n        uint256 iboAmount = ibo.getTotalCvgDue();\\r\\n        vestingSchedules[VestingType.IBO] = VestingSchedule({\\r\\n            totalAmount: iboAmount,\\r\\n            totalReleased: 0,\\r\\n            daysBeforeCliff: 0,\\r\\n            daysAfterCliff: 2 * 30,\\r\\n            dropCliff: 0\\r\\n        });\\r\\n\\r\\n        /// @dev TEAM SCHEDULE\\r\\n        uint256 teamAmount = MAX_SUPPLY_TEAM;\\r\\n        vestingSchedules[VestingType.TEAM] = VestingSchedule({\\r\\n            totalAmount: teamAmount,\\r\\n            totalReleased: 0,\\r\\n            daysBeforeCliff: 180,\\r\\n            daysAfterCliff: 18 * 30,\\r\\n            dropCliff: 50\\r\\n        });\\r\\n\\r\\n        /// @dev DAO SCHEDULE\\r\\n        uint256 daoAmount = MAX_SUPPLY_DAO;\\r\\n        vestingSchedules[VestingType.DAO] = VestingSchedule({\\r\\n            totalAmount: daoAmount,\\r\\n            totalReleased: 0,\\r\\n            daysBeforeCliff: 0,\\r\\n            daysAfterCliff: 18 * 30,\\r\\n            dropCliff: 50\\r\\n        });\\r\\n\\r\\n        require(address(_cvg) != address(0), \\\"CVG_ZERO\\\");\\r\\n        cvg = _cvg;\\r\\n        require(\\r\\n            _cvg.balanceOf(address(this)) >= seedAmount + wlAmount + iboAmount + teamAmount + daoAmount,\\r\\n            \\\"NOT_ENOUGH_CVG\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Open vesting for all\\r\\n    function openVesting() external onlyOwner {\\r\\n        require(state == State.SET, \\\"VESTING_ALREADY_OPENED\\\");\\r\\n        state = State.OPEN;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release CVG token available for SEED nft owner\\r\\n     * @param _tokenId token Id SEED\\r\\n     */\\r\\n    function releaseSeed(uint256 _tokenId) external onlyOwnerOfSeed(_tokenId) {\\r\\n        require(state == State.OPEN, \\\"VESTING_NOT_OPEN\\\");\\r\\n        (uint256 amountToRelease, , ) = _computeReleaseAmount(_tokenId, VestingType.SEED);\\r\\n        require(amountToRelease != 0, \\\"NOT_RELEASABLE\\\");\\r\\n\\r\\n        //update totalReleased & amountReleasedId\\r\\n        vestingSchedules[VestingType.SEED].totalReleased += amountToRelease;\\r\\n\\r\\n        amountReleasedIdSeed[_tokenId] += amountToRelease;\\r\\n\\r\\n        //transfer Cvg amount to release\\r\\n        cvg.transfer(msg.sender, amountToRelease);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release CVG token available for WL nft owner\\r\\n     * @param _tokenId token Id WL\\r\\n     */\\r\\n    function releaseWl(uint256 _tokenId) external onlyOwnerOfWl(_tokenId) {\\r\\n        require(state == State.OPEN, \\\"VESTING_NOT_OPEN\\\");\\r\\n        (uint256 amountToRelease, , ) = _computeReleaseAmount(_tokenId, VestingType.WL);\\r\\n        require(amountToRelease != 0, \\\"NOT_RELEASABLE\\\");\\r\\n\\r\\n        //update totalReleased & amountReleasedIdSeed\\r\\n        vestingSchedules[VestingType.WL].totalReleased += amountToRelease;\\r\\n\\r\\n        amountReleasedIdWl[_tokenId] += amountToRelease;\\r\\n\\r\\n        //transfer Cvg amount to release\\r\\n        cvg.transfer(msg.sender, amountToRelease);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release CVG token available for IBO nft owner\\r\\n     * @param _tokenId token Id IBO\\r\\n     */\\r\\n    function releaseIbo(uint256 _tokenId) external onlyOwnerOfIbo(_tokenId) {\\r\\n        require(state == State.OPEN, \\\"VESTING_NOT_OPEN\\\");\\r\\n        (uint256 amountToRelease, , ) = _computeReleaseAmount(_tokenId, VestingType.IBO);\\r\\n        require(amountToRelease != 0, \\\"NOT_RELEASABLE\\\");\\r\\n\\r\\n        //update totalReleased & amountReleasedIdSeed\\r\\n        vestingSchedules[VestingType.IBO].totalReleased += amountToRelease;\\r\\n\\r\\n        amountReleasedIdIbo[_tokenId] += amountToRelease;\\r\\n\\r\\n        //transfer Cvg amount to release\\r\\n        cvg.transfer(msg.sender, amountToRelease);\\r\\n    }\\r\\n\\r\\n    /// @notice Release CVG token available for whitelisted address TEAM or DAO\\r\\n    function releaseTeamOrDao(bool _isTeam) external {\\r\\n        uint256 amountToRelease;\\r\\n        VestingType _vestingType;\\r\\n\\r\\n        if (_isTeam) {\\r\\n            require(msg.sender == whitelistedTeam, \\\"NOT_TEAM\\\");\\r\\n            _vestingType = VestingType.TEAM;\\r\\n        } else {\\r\\n            require(msg.sender == whitelistedDao, \\\"NOT_DAO\\\");\\r\\n            _vestingType = VestingType.DAO;\\r\\n        }\\r\\n\\r\\n        (amountToRelease, , ) = _computeReleaseAmount(0, _vestingType);\\r\\n        require(amountToRelease != 0, \\\"NOT_RELEASABLE\\\");\\r\\n\\r\\n        vestingSchedules[_vestingType].totalReleased += amountToRelease;\\r\\n\\r\\n        /// @dev transfer Cvg amount to release\\r\\n        cvg.transfer(msg.sender, amountToRelease);\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            INTERNALS\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n\\r\\n    function _computeReleaseAmount(\\r\\n        uint256 _tokenId,\\r\\n        VestingType _vestingType\\r\\n    ) internal view returns (uint256 amountToRelease, uint256 totalAmount, uint256 totalAmountReleased) {\\r\\n        if (_vestingType == VestingType.SEED) {\\r\\n            totalAmountReleased = amountReleasedIdSeed[_tokenId];\\r\\n            totalAmount = presaleSeed.presaleInfoTokenId(_tokenId).cvgAmount;\\r\\n        } else if (_vestingType == VestingType.WL) {\\r\\n            totalAmountReleased = amountReleasedIdWl[_tokenId];\\r\\n            totalAmount = presaleWl.presaleInfos(_tokenId).cvgAmount;\\r\\n        } else if (_vestingType == VestingType.IBO) {\\r\\n            totalAmountReleased = amountReleasedIdIbo[_tokenId];\\r\\n            totalAmount = ibo.totalCvgPerToken(_tokenId);\\r\\n        } else if (_vestingType == VestingType.TEAM) {\\r\\n            totalAmountReleased = vestingSchedules[_vestingType].totalReleased;\\r\\n            totalAmount = MAX_SUPPLY_TEAM;\\r\\n        } else {\\r\\n            totalAmountReleased = vestingSchedules[_vestingType].totalReleased;\\r\\n            totalAmount = MAX_SUPPLY_DAO;\\r\\n        }\\r\\n\\r\\n        amountToRelease = _calculateRelease(_vestingType, totalAmount, totalAmountReleased);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the releasable amount in function of the vestingSchedule params, the total amount vested for a tokenId\\r\\n     * and the total amount already released. Calculated linearly between cliff release and the end of the vesting.\\r\\n     */\\r\\n    function _calculateRelease(\\r\\n        VestingType vestingType,\\r\\n        uint256 totalAmount,\\r\\n        uint256 totalAmountReleased\\r\\n    ) private view returns (uint256 amountToRelease) {\\r\\n        uint256 cliffTimestamp = startTimestamp + vestingSchedules[vestingType].daysBeforeCliff * ONE_DAY;\\r\\n\\r\\n        uint256 endVestingTimestamp = cliffTimestamp + vestingSchedules[vestingType].daysAfterCliff * ONE_DAY;\\r\\n\\r\\n        if (block.timestamp > cliffTimestamp) {\\r\\n            if (block.timestamp > endVestingTimestamp) {\\r\\n                amountToRelease = totalAmount - totalAmountReleased;\\r\\n            } else {\\r\\n                uint256 ratio = ((endVestingTimestamp - block.timestamp) * ONE_GWEI) /\\r\\n                    (endVestingTimestamp - cliffTimestamp);\\r\\n\\r\\n                uint256 amountDroppedAtCliff = (totalAmount * vestingSchedules[vestingType].dropCliff) / 1000;\\r\\n\\r\\n                uint256 totalAmountAfterCliff = totalAmount - amountDroppedAtCliff;\\r\\n\\r\\n                amountToRelease =\\r\\n                    amountDroppedAtCliff +\\r\\n                    (((ONE_GWEI - ratio) * totalAmountAfterCliff) / ONE_GWEI) -\\r\\n                    totalAmountReleased;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 250\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPresaleCvgWl\",\"name\":\"_presaleWl\",\"type\":\"address\"},{\"internalType\":\"contract IPresaleCvgSeed\",\"name\":\"_presaleSeed\",\"type\":\"address\"},{\"internalType\":\"contract IboInterface\",\"name\":\"_ibo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY_DAO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY_TEAM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_GWEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountReleasedIdIbo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountReleasedIdSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountReleasedIdWl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvg\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum VestingCvg.VestingType\",\"name\":\"_vestingType\",\"type\":\"uint8\"}],\"name\":\"getInfoVestingTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountReleasable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCvg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRedeemed\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingCvg.InfoVestingTokenId\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VestingCvg.VestingType\",\"name\":\"_vestingType\",\"type\":\"uint8\"}],\"name\":\"getTotalReleasedScheduleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ibo\",\"outputs\":[{\"internalType\":\"contract IboInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleSeed\",\"outputs\":[{\"internalType\":\"contract IPresaleCvgSeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleWl\",\"outputs\":[{\"internalType\":\"contract IPresaleCvgWl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"releaseIbo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"releaseSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isTeam\",\"type\":\"bool\"}],\"name\":\"releaseTeamOrDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"releaseWl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cvg\",\"type\":\"address\"}],\"name\":\"setVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelistedDao\",\"type\":\"address\"}],\"name\":\"setWhitelistDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelistedTeam\",\"type\":\"address\"}],\"name\":\"setWhitelistTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum VestingCvg.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VestingCvg.VestingType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"daysBeforeCliff\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"daysAfterCliff\",\"type\":\"uint80\"},{\"internalType\":\"uint96\",\"name\":\"dropCliff\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReleased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VestingCvg", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "250", "ConstructorArguments": "000000000000000000000000c9740aa94a8a02a3373f5f1b493d7e10d99ae81100000000000000000000000006feb7a047e540b8d92620a2c13ec96e1ff5e19b0000000000000000000000005f02134c35449d9b6505723a56b02581356320fb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}