{"SourceCode": "pragma solidity ^0.5.6;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a && c >= b);\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\ncontract owned {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface tokenRecipient {\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \r\n}\r\n\r\n\r\ncontract TokenERC20 {\r\n  using SafeMath for uint256;\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n\r\n  constructor(string memory tokenName, string memory tokenSymbol, uint8 dec) public {\r\n    decimals = dec;\r\n    name = tokenName;                                   // Set the name for display purposes\r\n    symbol = tokenSymbol;   \r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n    require(_to != address(0x0));\r\n    balanceOf[_from] = balanceOf[_from].sub(_value);\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n      return true;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract Blockburn is owned, TokenERC20  {\r\n\r\n  string _tokenName = \"Blockburn\";  \r\n  string _tokenSymbol = \"BURN\";\r\n  uint8 _decimals = 18;\r\n\r\n  address[] public frozenAddresses;\r\n\r\n  struct frozenWallet {\r\n    bool isFrozen; //true or false\r\n    uint256 rewardedAmount; //amount\r\n    uint256 frozenAmount; //amount\r\n    uint256 frozenTime; // in days\r\n  }\r\n\r\n  mapping (address => frozenWallet) public frozenWallets;\r\n\r\n  constructor() TokenERC20(_tokenName, _tokenSymbol, _decimals) public {\r\n\r\n    /*Locked Tokens */\r\n    frozenAddresses.push(address(0xCC0d10070F973F03b6CF463F64CF4BB5e253C7F6));\r\n    frozenWallets[frozenAddresses[0]] = frozenWallet({\r\n      isFrozen: true,\r\n      rewardedAmount: 200000000 * 10 ** uint256(decimals),\r\n      frozenAmount: 200000000 * 10 ** uint256(decimals),\r\n      frozenTime: now + 360 * 1 days\r\n    });\r\n    \r\n    /*Available Tokens */\r\n    frozenAddresses.push(address(0x615faD1CC018e100b0994FfbdB6B7A00Cd83F4f9));\r\n    frozenWallets[frozenAddresses[1]] = frozenWallet({\r\n      isFrozen: true,\r\n      rewardedAmount: 1800000000 * 10 ** uint256(decimals),\r\n      frozenAmount: 0 * 10 ** uint256(decimals),\r\n      frozenTime: now + 1 * 1 seconds //seconds, minutes, hours, days\r\n    });\r\n\r\n    for (uint256 i = 0; i < frozenAddresses.length; i++) {\r\n      balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount;\r\n      totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount);\r\n    }\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n    require(_to != address(0x0));\r\n    require(checkFrozenWallet(_from, _value));\r\n    balanceOf[_from] = balanceOf[_from].sub(_value);      \r\n    balanceOf[_to] = balanceOf[_to].add(_value);     \r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function checkFrozenWallet(address _from, uint _value) public view returns (bool) {\r\n    return(\r\n      _from==owner || \r\n      (\r\n        // !tokenFrozen && \r\n      (!frozenWallets[_from].isFrozen || \r\n       now>=frozenWallets[_from].frozenTime || \r\n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\r\n    );\r\n  }\r\n\r\n  function burn(uint256 _value) onlyOwner public returns (bool success) {\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);   // Subtract from the sender\r\n    totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n    emit Burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n    balanceOf[_from] = balanceOf[_from].sub(_value);                          // Subtract from the targeted balance\r\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);   // Subtract from the sender's allowance\r\n    totalSupply = totalSupply.sub(_value);                              // Update totalSupply\r\n    emit Burn(_from, _value);\r\n    return true;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkFrozenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenWallets\",\"outputs\":[{\"name\":\"isFrozen\",\"type\":\"bool\"},{\"name\":\"rewardedAmount\",\"type\":\"uint256\"},{\"name\":\"frozenAmount\",\"type\":\"uint256\"},{\"name\":\"frozenTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "Blockburn", "CompilerVersion": "v0.5.6+commit.b259423e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fd9db57772442f2673ea9d41e594d9ba0da58893ae8549ba88bbbda3dbd61228"}