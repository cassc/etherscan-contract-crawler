{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/AccPlanetData.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.21;\\r\\n\\r\\nstruct AccPlanetData {\\r\\n    uint256 planetId; // id of the planet or 0\\r\\n    uint256 tokenStaked; // count of staked tokens of account\\r\\n    uint256 claimPeriod; // last used claim period\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ISpace.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.21;\\r\\n\\r\\ninterface ISpace {\\r\\n    function executeNewPlanets() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Planet.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.21;\\r\\n\\r\\nstruct Planet {\\r\\n    // constant for planet\\r\\n    uint256 id; // id of planet or 0 if it not exists\\r\\n    uint256 creationTime; // when was created\\r\\n    uint256 periodTimer; // period time interval\\r\\n    uint256 claimResourcesTimer; // time seconds to extract resources on new claim period\\r\\n    // destruction\\r\\n    uint256 destroyTime; // time when will be destroyed or 0\\r\\n    // total savings\\r\\n    uint256 eth; // eth to claim\\r\\n    uint256 token; // token to claim\\r\\n    uint256 token2; // token2 to claim\\r\\n    // accounts data\\r\\n    uint256 accountsCount; // accounts count on planet\\r\\n    uint256 tokenStaked; // total staked tokens\\r\\n    // snapshot\\r\\n    uint256 claimPeriodSnapshot; // number of snapshot period to claim\\r\\n    uint256 tokenStakedSnapshot; // tokens staked for claims on claim period\\r\\n    uint256 ethSnapshot;\\r\\n    uint256 tokenSnapshot;\\r\\n    uint256 token2Snapshot;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PlanetPrediction.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"./Planet.sol\\\";\\r\\n\\r\\nstruct Period {\\r\\n    uint256 number; // period number\\r\\n    uint256 eth; // ether on period for rewards\\r\\n    uint256 token; // token on period (not includes stakes) for rewards\\r\\n    uint256 token2; // token2 on period for rewards\\r\\n    uint256 tokenStaked; // token stacks sum on period\\r\\n    bool isClaimTime; // is now claim time or not\\r\\n    bool isDirty; // is period dirty\\r\\n    uint256 time; // time since the beginning of the period\\r\\n    uint256 remainingTime; // remaining time until next period\\r\\n    uint256 endTime; // when period expires\\r\\n}\\r\\n\\r\\nstruct PlanetData {\\r\\n    Planet planet; // planet data\\r\\n    Period period; // planet period data\\r\\n    uint8 number; // planet number\\r\\n    bool isExists; // is planet exists\\r\\n}\\r\\n\\r\\nlibrary PlanetPrediction {\\r\\n    // time from period start\\r\\n    function periodTime(Planet memory planet) internal view returns (uint256) {\\r\\n        return (block.timestamp - planet.creationTime) % planet.periodTimer;\\r\\n    }\\r\\n\\r\\n    function nextPeriodRemainingTime(\\r\\n        Planet memory planet\\r\\n    ) internal view returns (uint256) {\\r\\n        return planet.periodTimer - periodTime(planet);\\r\\n    }\\r\\n\\r\\n    function nextPeriodTime(\\r\\n        Planet memory planet\\r\\n    ) internal view returns (uint256) {\\r\\n        return block.timestamp + nextPeriodRemainingTime(planet);\\r\\n    }\\r\\n\\r\\n    function periodNumber(\\r\\n        Planet memory planet\\r\\n    ) internal view returns (uint256) {\\r\\n        return (block.timestamp - planet.creationTime) / planet.periodTimer;\\r\\n    }\\r\\n\\r\\n    function isClaimPeriodDirty(\\r\\n        Planet memory planet\\r\\n    ) internal view returns (bool) {\\r\\n        return planet.claimPeriodSnapshot != periodNumber(planet);\\r\\n    }\\r\\n\\r\\n    function isClaimTime(Planet memory planet) internal view returns (bool) {\\r\\n        return periodTime(planet) < planet.claimResourcesTimer;\\r\\n    }\\r\\n\\r\\n    function ethOnPlanet(Planet memory planet) internal view returns (uint256) {\\r\\n        if (!isExists(planet)) return 0;\\r\\n        return planet.eth;\\r\\n    }\\r\\n\\r\\n    function token2OnPlanet(\\r\\n        Planet memory planet\\r\\n    ) internal view returns (uint256) {\\r\\n        if (!isExists(planet)) return 0;\\r\\n        return planet.token2;\\r\\n    }\\r\\n\\r\\n    function ethOnPeriod(Planet memory planet) internal view returns (uint256) {\\r\\n        if (!isExists(planet)) return 0;\\r\\n        if (isClaimPeriodDirty(planet)) return planet.eth;\\r\\n        else return planet.ethSnapshot;\\r\\n    }\\r\\n\\r\\n    function tokenOnPeriod(\\r\\n        Planet memory planet\\r\\n    ) internal view returns (uint256) {\\r\\n        if (!isExists(planet)) return 0;\\r\\n        if (isClaimPeriodDirty(planet)) return planet.token;\\r\\n        else return planet.tokenSnapshot;\\r\\n    }\\r\\n\\r\\n    function token2OnPeriod(\\r\\n        Planet memory planet\\r\\n    ) internal view returns (uint256) {\\r\\n        if (!isExists(planet)) return 0;\\r\\n        if (isClaimPeriodDirty(planet)) return planet.token2;\\r\\n        else return planet.token2Snapshot;\\r\\n    }\\r\\n\\r\\n    function tokenStakedOnPeriod(\\r\\n        Planet memory planet\\r\\n    ) internal view returns (uint256) {\\r\\n        if (isClaimPeriodDirty(planet)) return planet.tokenStaked;\\r\\n        else return planet.tokenStakedSnapshot;\\r\\n    }\\r\\n\\r\\n    function ethRewardForTokens(\\r\\n        Planet memory planet,\\r\\n        uint256 tokenstaked\\r\\n    ) internal view returns (uint256) {\\r\\n        if (tokenstaked == 0 || !isExists(planet)) return 0;\\r\\n        if (planet.tokenStaked == 0) return planet.eth;\\r\\n        return (planet.eth * tokenstaked) / planet.tokenStaked;\\r\\n    }\\r\\n\\r\\n    function tokenRewardForTokens(\\r\\n        Planet memory planet,\\r\\n        uint256 tokenstaked\\r\\n    ) internal view returns (uint256) {\\r\\n        if (tokenstaked == 0 || !isExists(planet)) return 0;\\r\\n        if (planet.tokenStaked == 0) return planet.token;\\r\\n        return (planet.token * tokenstaked) / planet.tokenStaked;\\r\\n    }\\r\\n\\r\\n    function token2RewardForTokens(\\r\\n        Planet memory planet,\\r\\n        uint256 tokenstaked\\r\\n    ) internal view returns (uint256) {\\r\\n        if (tokenstaked == 0 || !isExists(planet)) return 0;\\r\\n        if (planet.tokenStaked == 0) return planet.token2;\\r\\n        return (planet.token2 * tokenstaked) / planet.tokenStaked;\\r\\n    }\\r\\n\\r\\n    function ethRewardPeriod(\\r\\n        Planet memory planet,\\r\\n        uint256 tokenstaked\\r\\n    ) internal view returns (uint256) {\\r\\n        if (tokenstaked == 0 || !isExists(planet)) return 0;\\r\\n        uint256 stacke = tokenStakedOnPeriod(planet);\\r\\n        if (stacke == 0) return ethOnPeriod(planet);\\r\\n        return (ethOnPeriod(planet) * tokenstaked) / stacke;\\r\\n    }\\r\\n\\r\\n    function tokenRewardPeriod(\\r\\n        Planet memory planet,\\r\\n        uint256 tokenstaked\\r\\n    ) internal view returns (uint256) {\\r\\n        if (tokenstaked == 0 || !isExists(planet)) return 0;\\r\\n        uint256 stacke = tokenStakedOnPeriod(planet);\\r\\n        if (stacke == 0) return tokenOnPeriod(planet);\\r\\n        return (tokenOnPeriod(planet) * tokenstaked) / stacke;\\r\\n    }\\r\\n\\r\\n    function token2RewardPeriod(\\r\\n        Planet memory planet,\\r\\n        uint256 tokenstaked\\r\\n    ) internal view returns (uint256) {\\r\\n        if (tokenstaked == 0 || !isExists(planet)) return 0;\\r\\n        uint256 stacke = tokenStakedOnPeriod(planet);\\r\\n        if (stacke == 0) return token2OnPeriod(planet);\\r\\n        return (token2OnPeriod(planet) * tokenstaked) / stacke;\\r\\n    }\\r\\n\\r\\n    function isExists(Planet memory planet) internal view returns (bool) {\\r\\n        return\\r\\n            planet.id > 0 &&\\r\\n            (planet.destroyTime == 0 || (block.timestamp < planet.destroyTime));\\r\\n    }\\r\\n\\r\\n    function getData(\\r\\n        Planet memory planet,\\r\\n        uint8 number\\r\\n    ) internal view returns (PlanetData memory) {\\r\\n        return\\r\\n            PlanetData(\\r\\n                planet,\\r\\n                Period(\\r\\n                    periodNumber(planet),\\r\\n                    ethOnPeriod(planet),\\r\\n                    tokenOnPeriod(planet),\\r\\n                    token2OnPeriod(planet),\\r\\n                    tokenStakedOnPeriod(planet),\\r\\n                    isClaimTime(planet),\\r\\n                    isClaimPeriodDirty(planet),\\r\\n                    periodTime(planet),\\r\\n                    nextPeriodRemainingTime(planet),\\r\\n                    nextPeriodTime(planet)\\r\\n                ),\\r\\n                number,\\r\\n                isExists(planet)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setDestroyTimer(Planet storage planet, uint256 timer) internal {\\r\\n        planet.destroyTime = block.timestamp + timer;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Space.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"./ISpace.sol\\\";\\r\\nimport \\\"./Planet.sol\\\";\\r\\nimport \\\"./AccPlanetData.sol\\\";\\r\\nimport \\\"./PlanetPrediction.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Ownable {\\r\\n    address _owner;\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() external view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership(address newOwner) external onlyOwner {\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Space is ISpace, Ownable {\\r\\n    using PlanetPrediction for Planet;\\r\\n\\r\\n    address public immutable dev;\\r\\n\\r\\n    uint256 public minPlanetRewardPercent = 50; // 100%=1000\\r\\n    uint256 public maxPlanetRewardPercent = 500; // 100%=1000\\r\\n    uint8 constant _startPlanetsCount = 2;\\r\\n    uint8 public constant maxPlanetsCount = 4; // maximum planets count\\r\\n    uint256 public constant newPlanetTimeMin = 1 minutes;\\r\\n    uint256 public constant newPlanetTimeMax = 1 hours;\\r\\n    uint256 public planetDestructionTimeMin = 60 seconds;\\r\\n    uint256 public planetDestructionTimeMax = 600 seconds;\\r\\n    uint256 public planetPeriodWaitTimerMin = 60 seconds; // planet period wait time interval min\\r\\n    uint256 public planetPeriodWaitTimerMax = 36000 seconds; // planet period wait time interval max\\r\\n    uint256 public planetClaimResourcesTimerMin = 60 seconds; // planet claim time interval min\\r\\n    uint256 public planetClaimResourcesTimerMax = 3600 seconds; // planet claim time interval max\\r\\n    uint256 public destructionStartProb = 30; // noe of this is starts destruction on claim\\r\\n    IERC20 public erc20;\\r\\n    IERC20 public erc202;\\r\\n    uint256 public totalCreatedPlanets; // total created planets count\\r\\n    bool public isStarted;\\r\\n\\r\\n    uint256 _devFeePercent = 40; // dev fee percent\\r\\n    address _deployer;\\r\\n    uint256 internal _nonce = 1;\\r\\n    Planet[maxPlanetsCount] _planets; // accounts planet data\\r\\n    mapping(address => AccPlanetData[maxPlanetsCount]) accs;\\r\\n    uint256 _newPlanetTime;\\r\\n\\r\\n    constructor(address dev_) {\\r\\n        _deployer = msg.sender;\\r\\n        dev = dev_;\\r\\n    }\\r\\n\\r\\n    function start() external onlyOwner {\\r\\n        require(!isStarted, \\\"already started\\\");\\r\\n        isStarted = true;\\r\\n        for (uint8 i = 1; i <= _startPlanetsCount; ++i) _createPlanet(i);\\r\\n    }\\r\\n\\r\\n    function setPeriodWaitTimer(\\r\\n        uint256 planetPeriodWaitTimerMin_,\\r\\n        uint256 planetPeriodWaitTimerMax_\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            planetPeriodWaitTimerMin_ > 0 &&\\r\\n                planetPeriodWaitTimerMin_ <= planetPeriodWaitTimerMax_,\\r\\n            \\\"not correct\\\"\\r\\n        );\\r\\n        planetPeriodWaitTimerMin = planetPeriodWaitTimerMin_;\\r\\n        planetPeriodWaitTimerMax = planetPeriodWaitTimerMax_;\\r\\n    }\\r\\n\\r\\n    function setClaimResourcesTimer(\\r\\n        uint256 planetClaimResourcesTimerMin_,\\r\\n        uint256 planetClaimResourcesTimerMax_\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            planetClaimResourcesTimerMin_ > 0 &&\\r\\n                planetClaimResourcesTimerMin_ <= planetClaimResourcesTimerMax_,\\r\\n            \\\"not correct\\\"\\r\\n        );\\r\\n        planetClaimResourcesTimerMin = planetClaimResourcesTimerMin_;\\r\\n        planetClaimResourcesTimerMax = planetClaimResourcesTimerMax_;\\r\\n    }\\r\\n\\r\\n    function setRewardPercent(uint256 min, uint256 max) external onlyOwner {\\r\\n        require(min <= max, \\\"not correct\\\");\\r\\n        require(max <= 1000, \\\"not correct\\\");\\r\\n        minPlanetRewardPercent = min;\\r\\n        maxPlanetRewardPercent = max;\\r\\n    }\\r\\n\\r\\n    function setDestructionStartProb(uint256 prob) external onlyOwner {\\r\\n        require(prob > 1);\\r\\n        destructionStartProb = prob;\\r\\n    }\\r\\n\\r\\n    function setErc20(address erc20_, address erc202_) external {\\r\\n        require(msg.sender == _deployer);\\r\\n        delete _deployer;\\r\\n        erc20 = IERC20(erc20_);\\r\\n        erc202 = IERC20(erc202_);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        uint256 devFee = (msg.value * _devFeePercent) / 100;\\r\\n        (bool sentFee, ) = payable(dev).call{value: devFee}(\\\"\\\");\\r\\n        require(sentFee, \\\"sent fee error: dev ether is not sent\\\");\\r\\n    }\\r\\n\\r\\n    function devFeePercent() external view returns (uint256) {\\r\\n        return _devFeePercent;\\r\\n    }\\r\\n\\r\\n    function setDevFeePercent(uint256 percent) external onlyOwner {\\r\\n        require(percent <= 50);\\r\\n        _devFeePercent = percent;\\r\\n    }\\r\\n\\r\\n    function goToPlanet(uint256 planetId, uint256 tokensCount) external {\\r\\n        // limitations\\r\\n        require(isStarted, \\\"not started\\\");\\r\\n        // get planet\\r\\n        (Planet storage planet, uint8 number) = _getPlanetByIdInternal(\\r\\n            planetId\\r\\n        );\\r\\n        require(planet.isExists(), \\\"planet is not exists\\\");\\r\\n        // update planet\\r\\n        //_updateBeforeUsePlanet(planet, number);\\r\\n        _destroyPlanet(planet, number);\\r\\n        _updatePlanet(planet, number);\\r\\n        require(planet.isExists(), \\\"planet is not exists\\\");\\r\\n\\r\\n        // thansfer stak tokens\\r\\n        uint256 lastTokens = erc20.balanceOf(address(this));\\r\\n        erc20.transferFrom(msg.sender, address(this), tokensCount);\\r\\n        uint256 staked = erc20.balanceOf(address(this)) - lastTokens;\\r\\n\\r\\n        // write data\\r\\n        AccPlanetData storage acc = accs[msg.sender][number - 1];\\r\\n        if (acc.planetId != planet.id) ++planet.accountsCount;\\r\\n        acc.planetId = planet.id;\\r\\n        acc.claimPeriod = planet.periodNumber();\\r\\n        acc.tokenStaked += staked;\\r\\n        planet.tokenStaked += staked;\\r\\n    }\\r\\n\\r\\n    function leavePlanet(uint256 planetId) external {\\r\\n        (Planet storage planet, uint8 number) = _getPlanetByIdInternal(\\r\\n            planetId\\r\\n        );\\r\\n        _updateBeforeUsePlanet(planet, number);\\r\\n        AccPlanetData storage acc = accs[msg.sender][number - 1];\\r\\n        require(acc.planetId > 0, \\\"address slot for planet not found\\\");\\r\\n        //if (_canClaimRewards(acc, planet))\\r\\n        //    _claimRewards(msg.sender, acc, planet);\\r\\n        erc20.transfer(msg.sender, acc.tokenStaked);\\r\\n        --planet.accountsCount;\\r\\n        planet.tokenStaked -= acc.tokenStaked;\\r\\n        delete accs[msg.sender][number - 1];\\r\\n    }\\r\\n\\r\\n    function _updateBeforeUsePlanet(\\r\\n        Planet storage planet,\\r\\n        uint8 number\\r\\n    ) private {\\r\\n        require(planet.isExists(), \\\"the planet is not exists\\\");\\r\\n        _executePlanetsDestructions();\\r\\n        _updatePlanet(planet, number);\\r\\n        _executeNewPlanets();\\r\\n        require(planet.isExists(), \\\"the planet is not exisits\\\");\\r\\n    }\\r\\n\\r\\n    function getAccSlots(\\r\\n        address addr\\r\\n    ) external view returns (AccPlanetData[] memory) {\\r\\n        AccPlanetData[] memory res = new AccPlanetData[](maxPlanetsCount);\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            AccPlanetData storage data = accs[addr][i];\\r\\n            Planet memory planet = _planets[i];\\r\\n            if (!planet.isExists()) continue;\\r\\n            res[i] = data;\\r\\n        }\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function getAccSlotForPlanet(\\r\\n        address acc,\\r\\n        uint256 planetId\\r\\n    ) public view returns (AccPlanetData memory) {\\r\\n        return _getAccSlotForPlanet(acc, planetId);\\r\\n    }\\r\\n\\r\\n    function _getAccSlotForPlanet(\\r\\n        address acc,\\r\\n        uint256 planetId\\r\\n    ) private view returns (AccPlanetData storage) {\\r\\n        require(planetId > 0, \\\"planet with id=0 is not exists\\\");\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            AccPlanetData storage data = accs[acc][i];\\r\\n            if (data.planetId == planetId) {\\r\\n                require(\\r\\n                    isPlanetExists(data.planetId),\\r\\n                    \\\"address slot for planet not found\\\"\\r\\n                );\\r\\n                return data;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert(\\\"address slot for planet not found\\\");\\r\\n    }\\r\\n\\r\\n    function _trySetDestructionTime(Planet storage planet) private {\\r\\n        if (!planet.isExists() || planet.destroyTime != 0) return;\\r\\n        if (_rand(1, destructionStartProb) % destructionStartProb != 1) return;\\r\\n\\r\\n        planet.setDestroyTimer(\\r\\n            _rand(planetDestructionTimeMin, planetDestructionTimeMax)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isPlanetClaimInterval(\\r\\n        uint8 planetNumber\\r\\n    ) public view returns (bool) {\\r\\n        return _isPlanetClaimInterval(_getPlanetByNumber(planetNumber));\\r\\n    }\\r\\n\\r\\n    function _isPlanetClaimInterval(\\r\\n        Planet memory planet\\r\\n    ) private view returns (bool) {\\r\\n        return planet.id > 0 && planet.isClaimTime();\\r\\n    }\\r\\n\\r\\n    /*function claimRewardsAllPlanets() external {\\r\\n        uint8 claimCount;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            AccPlanetData storage data = accs[msg.sender][i];\\r\\n            Planet storage planet = _planets[i];\\r\\n            if (!planet.isExists()) continue;\\r\\n            _updatePlanet(planet, i + 1);\\r\\n            if (!_canClaimRewards(data, planet)) continue;\\r\\n            _claimRewards(msg.sender, data, planet);\\r\\n            ++claimCount;\\r\\n        }\\r\\n        _executeNewPlanets();\\r\\n        require(claimCount > 0, \\\"can not claim rewards yet\\\");\\r\\n    }*/\\r\\n\\r\\n    function claimRewards(uint256 planetId) external {\\r\\n        (Planet storage planet, uint8 number) = _getPlanetByIdInternal(\\r\\n            planetId\\r\\n        );\\r\\n        _updateBeforeUsePlanet(planet, number);\\r\\n        AccPlanetData storage data = accs[msg.sender][number - 1];\\r\\n        require(_canClaimRewards(data, planet), \\\"can not claim rewards yet\\\");\\r\\n        _claimRewards(msg.sender, data, planet);\\r\\n    }\\r\\n\\r\\n    function _canClaimRewards(\\r\\n        AccPlanetData memory acc,\\r\\n        Planet memory planet\\r\\n    ) private view returns (bool) {\\r\\n        return\\r\\n            planet.isExists() &&\\r\\n            planet.isClaimTime() &&\\r\\n            acc.claimPeriod + 1 < planet.periodNumber();\\r\\n    }\\r\\n\\r\\n    function _claimRewards(\\r\\n        address addr,\\r\\n        AccPlanetData storage acc,\\r\\n        Planet storage planet\\r\\n    )\\r\\n        private\\r\\n        returns (\\r\\n            uint256 ethRewarded,\\r\\n            uint256 tokenRewarded,\\r\\n            uint256 token2Rewarded\\r\\n        )\\r\\n    {\\r\\n        _tryNextClaimPeriodSnapshot(planet);\\r\\n\\r\\n        ethRewarded = planet.ethRewardPeriod(acc.tokenStaked);\\r\\n        tokenRewarded = planet.tokenRewardPeriod(acc.tokenStaked);\\r\\n        token2Rewarded = planet.token2RewardPeriod(acc.tokenStaked);\\r\\n\\r\\n        acc.claimPeriod = planet.periodNumber() - 1;\\r\\n\\r\\n        if (ethRewarded > 0) {\\r\\n            (bool sentFee, ) = payable(addr).call{value: ethRewarded}(\\\"\\\");\\r\\n            require(sentFee, \\\"sent fee error: ether is not sent\\\");\\r\\n            planet.eth -= ethRewarded;\\r\\n        }\\r\\n        if (tokenRewarded > 0) {\\r\\n            erc20.transfer(addr, tokenRewarded);\\r\\n            planet.token -= tokenRewarded;\\r\\n        }\\r\\n        if (token2Rewarded > 0) {\\r\\n            erc202.transfer(addr, token2Rewarded);\\r\\n            planet.token2 -= token2Rewarded;\\r\\n        }\\r\\n\\r\\n        _trySetDestructionTime(planet);\\r\\n    }\\r\\n\\r\\n    function _tryNextClaimPeriodSnapshot(Planet storage planet) private {\\r\\n        if (\\r\\n            !planet.isExists() ||\\r\\n            planet.destroyTime != 0 ||\\r\\n            !planet.isClaimPeriodDirty()\\r\\n        ) return;\\r\\n        _addRewardsToPlanet(planet);\\r\\n        planet.tokenStakedSnapshot = planet.tokenStaked;\\r\\n        planet.claimPeriodSnapshot = planet.periodNumber();\\r\\n        planet.ethSnapshot = planet.eth;\\r\\n        planet.tokenSnapshot = planet.token;\\r\\n        planet.token2Snapshot = planet.token2;\\r\\n    }\\r\\n\\r\\n    function getRewardForTokens(\\r\\n        uint256 planetId,\\r\\n        uint256 tokensCount\\r\\n    ) external view returns (uint256 eth, uint256 token, uint256 token2) {\\r\\n        (Planet storage planet, ) = _getPlanetByIdInternal(planetId);\\r\\n        eth = planet.ethRewardForTokens(tokensCount);\\r\\n        token = planet.tokenRewardForTokens(tokensCount);\\r\\n        token2 = planet.token2RewardForTokens(tokensCount);\\r\\n    }\\r\\n\\r\\n    function getRewardForAccount(\\r\\n        uint256 planetId,\\r\\n        address account\\r\\n    ) external view returns (uint256 eth, uint256 token, uint256 token2) {\\r\\n        (Planet storage planet, uint8 number) = _getPlanetByIdInternal(\\r\\n            planetId\\r\\n        );\\r\\n        AccPlanetData memory acc = accs[account][number - 1];\\r\\n        if (acc.claimPeriod == planet.periodNumber()) {\\r\\n            return (0, 0, 0);\\r\\n        }\\r\\n        eth = planet.ethRewardPeriod(acc.tokenStaked);\\r\\n        token = planet.tokenRewardPeriod(acc.tokenStaked);\\r\\n        token2 = planet.token2RewardPeriod(acc.tokenStaked);\\r\\n    }\\r\\n\\r\\n    function _getPlanetNumber(\\r\\n        AccPlanetData memory acc\\r\\n    ) private view returns (uint8) {\\r\\n        if (acc.planetId == 0) return 0;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            if (_planets[i].id == acc.planetId) return i + 1;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getPlanetByNumber(\\r\\n        uint8 number\\r\\n    ) external view returns (Planet memory) {\\r\\n        return _getPlanetByNumber(number);\\r\\n    }\\r\\n\\r\\n    function _getPlanetByNumber(\\r\\n        uint8 number\\r\\n    ) private view returns (Planet storage) {\\r\\n        require(\\r\\n            number >= 1 && number <= maxPlanetsCount,\\r\\n            \\\"incorrect planet number\\\"\\r\\n        );\\r\\n        return _planets[number - 1];\\r\\n    }\\r\\n\\r\\n    function getPlanetNumberById(uint256 id) public view returns (uint8) {\\r\\n        if (id == 0) return 0;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            if (_planets[i].id == id) return i + 1;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function isPlanetExists(uint256 id) public view returns (bool) {\\r\\n        return _getPlanetById(id).isExists();\\r\\n    }\\r\\n\\r\\n    function getPlanetById(uint256 id) external view returns (Planet memory) {\\r\\n        return _getPlanetById(id);\\r\\n    }\\r\\n\\r\\n    function _getPlanetByIdInternal(\\r\\n        uint256 id\\r\\n    ) private view returns (Planet storage planet, uint8 number) {\\r\\n        number = getPlanetNumberById(id);\\r\\n        require(number > 0, \\\"has no planet with certain id\\\");\\r\\n        planet = _planets[number - 1];\\r\\n    }\\r\\n\\r\\n    function _getPlanetById(\\r\\n        uint256 id\\r\\n    ) internal view returns (Planet storage planet) {\\r\\n        (planet, ) = _getPlanetByIdInternal(id);\\r\\n    }\\r\\n\\r\\n    function getPlanetClaimPeriod(\\r\\n        uint256 planetId\\r\\n    ) external view returns (uint256) {\\r\\n        return _getPlanetById(planetId).periodNumber();\\r\\n    }\\r\\n\\r\\n    function tokenStacked() public view returns (uint256) {\\r\\n        uint256 res;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            if (!_planets[i].isExists()) continue;\\r\\n            res += _planets[i].tokenStaked;\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function token2Total() public view returns (uint256) {\\r\\n        return erc202.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function ethOnPlanets() public view returns (uint256) {\\r\\n        uint256 res;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            res += _planets[i].ethOnPlanet();\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function tokenOnPlanets() public view returns (uint256) {\\r\\n        uint256 res;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            res += _planets[i].tokenOnPeriod();\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function tokenOnPlanetsRewardWithStacks() public view returns (uint256) {\\r\\n        uint256 res;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            res += _planets[i].token + _planets[i].tokenStaked;\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function token2OnPlanets() public view returns (uint256) {\\r\\n        uint256 res;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            res += _planets[i].token2OnPlanet();\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function accountsOnPlanets() public view returns (uint256) {\\r\\n        uint256 res;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            res += _planets[i].accountsCount;\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function planetsCount() public view returns (uint8) {\\r\\n        uint8 res;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            if (_planets[i].id > 0) ++res;\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function _getEmptyPlanetNumber() internal view returns (uint8) {\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            if (_planets[i].id == 0) return i + 1;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _rand() internal virtual returns (uint256) {\\r\\n        //return _nonce++ * block.timestamp * block.number;\\r\\n        return _nonce++ * block.number;\\r\\n    }\\r\\n\\r\\n    function _rand(uint256 min, uint256 max) private returns (uint256) {\\r\\n        return min + (_rand() % (max - min + 1));\\r\\n    }\\r\\n\\r\\n    function ethRewardsCount() public view returns (uint256) {\\r\\n        return address(this).balance - ethOnPlanets();\\r\\n    }\\r\\n\\r\\n    function tokenRewardsCount() public view returns (uint256) {\\r\\n        return\\r\\n            erc20.balanceOf(address(this)) - tokenOnPlanetsRewardWithStacks();\\r\\n    }\\r\\n\\r\\n    function token2RewardsCount() public view returns (uint256) {\\r\\n        return token2Total() - token2OnPlanets();\\r\\n    }\\r\\n\\r\\n    function _generatePlanetEth() private returns (uint256) {\\r\\n        return\\r\\n            (ethRewardsCount() *\\r\\n                _rand(minPlanetRewardPercent, maxPlanetRewardPercent)) / 1000;\\r\\n    }\\r\\n\\r\\n    function _generatePlanetToken() private returns (uint256) {\\r\\n        return\\r\\n            (tokenRewardsCount() *\\r\\n                _rand(minPlanetRewardPercent, maxPlanetRewardPercent)) / 1000;\\r\\n    }\\r\\n\\r\\n    function _generatePlanetToken2() private returns (uint256) {\\r\\n        return\\r\\n            (token2RewardsCount() *\\r\\n                _rand(minPlanetRewardPercent, maxPlanetRewardPercent)) / 1000;\\r\\n    }\\r\\n\\r\\n    function _addRewardsToPlanet(Planet storage planet) private {\\r\\n        planet.eth += _generatePlanetEth();\\r\\n        planet.token += _generatePlanetToken();\\r\\n        planet.token2 += _generatePlanetToken2();\\r\\n    }\\r\\n\\r\\n    function getPlanets()\\r\\n        external\\r\\n        view\\r\\n        returns (PlanetData[maxPlanetsCount] memory)\\r\\n    {\\r\\n        PlanetData[maxPlanetsCount] memory res;\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            if (!_planets[i].isExists()) continue;\\r\\n            res[i] = _planets[i].getData(i + 1);\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function getPlanetData(\\r\\n        uint256 planetId\\r\\n    ) external view returns (PlanetData memory) {\\r\\n        (Planet storage planet, uint8 number) = _getPlanetByIdInternal(\\r\\n            planetId\\r\\n        );\\r\\n        return planet.getData(number);\\r\\n    }\\r\\n\\r\\n    function _createPlanet(uint8 number) private {\\r\\n        Planet storage planet = _getPlanetByNumber(number);\\r\\n        planet.id = ++totalCreatedPlanets;\\r\\n        uint256 periodClaim = _rand(\\r\\n            planetClaimResourcesTimerMin,\\r\\n            planetClaimResourcesTimerMax\\r\\n        );\\r\\n        uint256 periodWait = _rand(\\r\\n            planetPeriodWaitTimerMin,\\r\\n            planetPeriodWaitTimerMax\\r\\n        );\\r\\n        planet.periodTimer = periodClaim + periodWait;\\r\\n        planet.claimResourcesTimer = periodClaim;\\r\\n        planet.creationTime = block.timestamp;\\r\\n        _addRewardsToPlanet(planet);\\r\\n        _newPlanetTime =\\r\\n            block.timestamp +\\r\\n            _rand(newPlanetTimeMin, newPlanetTimeMax);\\r\\n    }\\r\\n\\r\\n    function _isNeedDestroyPlanet(\\r\\n        Planet memory planet\\r\\n    ) private view returns (bool) {\\r\\n        return planet.id > 0 && !planet.isExists();\\r\\n    }\\r\\n\\r\\n    function executeNewPlanets() external {\\r\\n        _executeNewPlanets();\\r\\n    }\\r\\n\\r\\n    function _executeNewPlanets() private {\\r\\n        // time limit\\r\\n        if (block.timestamp < _newPlanetTime) return;\\r\\n        // getting new planet number\\r\\n        uint8 newPlanetNumber = _getEmptyPlanetNumber();\\r\\n        if (newPlanetNumber == 0) return;\\r\\n        // creating the new planet\\r\\n        _createPlanet(newPlanetNumber);\\r\\n    }\\r\\n\\r\\n    function updatePlanet(uint8 number) external {\\r\\n        _updatePlanet(_getPlanetByNumber(number), number);\\r\\n        _executeNewPlanets();\\r\\n    }\\r\\n\\r\\n    function _updatePlanet(Planet storage planet, uint8 number) private {\\r\\n        if (_destroyPlanet(planet, number)) return;\\r\\n        _tryNextClaimPeriodSnapshot(planet);\\r\\n    }\\r\\n\\r\\n    function _executePlanetsDestructions() private {\\r\\n        for (uint8 i = 1; i <= maxPlanetsCount; ++i) {\\r\\n            _destroyPlanet(_planets[i - 1], i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _destroyPlanet(\\r\\n        Planet storage planet,\\r\\n        uint8 number\\r\\n    ) private returns (bool) {\\r\\n        require(\\r\\n            number >= 1 && number <= maxPlanetsCount,\\r\\n            \\\"incorrect planet number\\\"\\r\\n        );\\r\\n        if (!_isNeedDestroyPlanet(planet)) return false;\\r\\n        uint256 tokenToBurn = planet.token + planet.tokenStaked;\\r\\n        if (tokenToBurn > 0) erc20.transfer(address(0), tokenToBurn);\\r\\n        delete _planets[number - 1];\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _executePlanetsClaimPeriods() private {\\r\\n        for (uint8 i = 0; i < maxPlanetsCount; ++i) {\\r\\n            _tryNextClaimPeriodSnapshot(_planets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function executePlanets() external {\\r\\n        _executePlanetsDestructions();\\r\\n        _executePlanetsClaimPeriods();\\r\\n        _executeNewPlanets();\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountsOnPlanets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructionStartProb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc202\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethOnPlanets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRewardsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeNewPlanets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executePlanets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"getAccSlotForPlanet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct AccPlanetData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAccSlots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct AccPlanetData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPlanetById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimResourcesTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPeriodSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakedSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2Snapshot\",\"type\":\"uint256\"}],\"internalType\":\"struct Planet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"getPlanetByNumber\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimResourcesTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPeriodSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakedSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2Snapshot\",\"type\":\"uint256\"}],\"internalType\":\"struct Planet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"getPlanetClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"getPlanetData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimResourcesTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPeriodSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakedSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2Snapshot\",\"type\":\"uint256\"}],\"internalType\":\"struct Planet\",\"name\":\"planet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDirty\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Period\",\"name\":\"period\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"internalType\":\"struct PlanetData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPlanetNumberById\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlanets\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimResourcesTimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPeriodSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakedSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2Snapshot\",\"type\":\"uint256\"}],\"internalType\":\"struct Planet\",\"name\":\"planet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDirty\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Period\",\"name\":\"period\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"internalType\":\"struct PlanetData[4]\",\"name\":\"\",\"type\":\"tuple[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensCount\",\"type\":\"uint256\"}],\"name\":\"getRewardForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensCount\",\"type\":\"uint256\"}],\"name\":\"goToPlanet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"planetNumber\",\"type\":\"uint8\"}],\"name\":\"isPlanetClaimInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isPlanetExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"}],\"name\":\"leavePlanet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlanetRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlanetsCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPlanetRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newPlanetTimeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newPlanetTimeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetClaimResourcesTimerMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetClaimResourcesTimerMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetDestructionTimeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetDestructionTimeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetPeriodWaitTimerMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetPeriodWaitTimerMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetsCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetClaimResourcesTimerMin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetClaimResourcesTimerMax_\",\"type\":\"uint256\"}],\"name\":\"setClaimResourcesTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prob\",\"type\":\"uint256\"}],\"name\":\"setDestructionStartProb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc202_\",\"type\":\"address\"}],\"name\":\"setErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planetPeriodWaitTimerMin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetPeriodWaitTimerMax_\",\"type\":\"uint256\"}],\"name\":\"setPeriodWaitTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2OnPlanets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2RewardsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2Total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOnPlanets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOnPlanetsRewardWithStacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewardsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStacked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCreatedPlanets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"updatePlanet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Space", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ccc2f1812b6906c19e899119d7b0562acc683283", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}