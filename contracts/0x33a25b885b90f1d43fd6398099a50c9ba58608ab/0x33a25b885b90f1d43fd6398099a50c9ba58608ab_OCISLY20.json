{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"mainnet/0x75c97384ca209f915381755c582ec0e2ce88c1ba/OCISLY.sol\": {\r\n      \"content\": \"//https://ocisly.io/\\r\\n//https://t.me/CommunityOCISLY\\r\\n//https://twitter.com/Ocislytoken\\r\\n\\r\\n// SPDX-License-Identifier:MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n// Dex Factory contract interface\\r\\ninterface IDexFactory {\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n}\\r\\n\\r\\n// Dex Router contract interface\\r\\ninterface IDexRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _owner = _msgSender();\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = payable(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract OCISLY20 is Context, IERC20, Ownable {\\r\\n    string private _name = \\\"Of Course I Still Love You\\\";\\r\\n    string private _symbol = \\\"OCISLY2.0\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n    uint256 private _totalSupply = 420_690_000_000_000 * 1e18;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    mapping(address => bool) public isExcludedFromFee;\\r\\n    mapping(address => bool) public isExcludedFromMaxTxn;\\r\\n    mapping(address => bool) public isExcludedFromMaxHolding;\\r\\n\\r\\n    uint256 public minTokenToSwap = (_totalSupply * 5) / (10000); // this amount will trigger swap and distribute\\r\\n    uint256 public maxHoldLimit = (_totalSupply * 2) / (100); // this is the max wallet holding limit\\r\\n    uint256 public maxTxnLimit = (_totalSupply * 2) / (100); // this is the max transaction limit\\r\\n    uint256 public percentDivider = 100;\\r\\n    uint256 public launchedAt;\\r\\n\\r\\n    bool public distributeAndLiquifyStatus; // should be true to turn on to liquidate the pool\\r\\n    bool public feesStatus; // enable by default\\r\\n    bool public trading; // once enable can't be disable afterwards\\r\\n\\r\\n    IDexRouter public dexRouter; // router declaration\\r\\n\\r\\n    address public dexPair; // pair address declaration\\r\\n    address public marketingWallet; // marketing address declaration\\r\\n    address private constant DEAD = address(0xdead);\\r\\n    address private constant ZERO = address(0);\\r\\n\\r\\n    uint256 public marketingFeeOnBuying = 30;\\r\\n\\r\\n    uint256 public marketingFeeOnSelling = 30;\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _balances[owner()] = _totalSupply;\\r\\n        marketingWallet = address(0xEE0151450cc8793E36458A8928c0336a6c67C732);\\r\\n\\r\\n        dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        isExcludedFromFee[address(dexRouter)] = true;\\r\\n        isExcludedFromMaxTxn[address(dexRouter)] = true;\\r\\n        isExcludedFromMaxHolding[address(dexRouter)] = true;\\r\\n\\r\\n        dexPair = IDexFactory(dexRouter.factory()).createPair(\\r\\n            address(this),\\r\\n            dexRouter.WETH()\\r\\n        );\\r\\n        isExcludedFromMaxHolding[dexPair] = true;\\r\\n\\r\\n        //exclude owner and this contract from fee\\r\\n        isExcludedFromFee[owner()] = true;\\r\\n        isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        //exclude owner and this contract from max Txn\\r\\n        isExcludedFromMaxTxn[owner()] = true;\\r\\n        isExcludedFromMaxTxn[address(this)] = true;\\r\\n\\r\\n        //exclude owner and this contract from max hold limit\\r\\n        isExcludedFromMaxHolding[owner()] = true;\\r\\n        isExcludedFromMaxHolding[address(this)] = true;\\r\\n        isExcludedFromMaxHolding[marketingWallet] = true;\\r\\n\\r\\n        emit Transfer(address(0), owner(), _totalSupply);\\r\\n    }\\r\\n\\r\\n    //to receive ETH from dexRouter when swapping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()] - amount\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + (addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] - subtractedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function includeOrExcludeFromFee(\\r\\n        address account,\\r\\n        bool value\\r\\n    ) external onlyOwner {\\r\\n        isExcludedFromFee[account] = value;\\r\\n    }\\r\\n\\r\\n    function includeOrExcludeFromMaxTxn(\\r\\n        address account,\\r\\n        bool value\\r\\n    ) external onlyOwner {\\r\\n        isExcludedFromMaxTxn[account] = value;\\r\\n    }\\r\\n\\r\\n    function includeOrExcludeFromMaxHolding(\\r\\n        address account,\\r\\n        bool value\\r\\n    ) external onlyOwner {\\r\\n        isExcludedFromMaxHolding[account] = value;\\r\\n    }\\r\\n\\r\\n    function setMinTokenToSwap(uint256 _amount) external onlyOwner {\\r\\n        minTokenToSwap = _amount * 1e18;\\r\\n    }\\r\\n\\r\\n    function setMaxHoldLimit(uint256 _amount) external onlyOwner {\\r\\n        maxHoldLimit = _amount * 1e18;\\r\\n    }\\r\\n\\r\\n    function setMaxTxnLimit(uint256 _amount) external onlyOwner {\\r\\n        maxTxnLimit = _amount * 1e18;\\r\\n    }\\r\\n\\r\\n    function setBuyFeePercent(uint256 _marketingFee) external onlyOwner {\\r\\n        marketingFeeOnBuying = _marketingFee;\\r\\n    }\\r\\n\\r\\n    function setSellFeePercent(uint256 _marketingFee) external onlyOwner {\\r\\n        marketingFeeOnSelling = _marketingFee;\\r\\n    }\\r\\n\\r\\n    function setDistributionStatus(bool _value) public onlyOwner {\\r\\n        distributeAndLiquifyStatus = _value;\\r\\n    }\\r\\n\\r\\n    function enableOrDisableFees(bool _value) external onlyOwner {\\r\\n        feesStatus = _value;\\r\\n    }\\r\\n\\r\\n    function updateAddresses(address _marketingWallet) external onlyOwner {\\r\\n        marketingWallet = _marketingWallet;\\r\\n    }\\r\\n\\r\\n    function enableTrading() external onlyOwner {\\r\\n        require(!trading, \\\": already enabled\\\");\\r\\n\\r\\n        trading = true;\\r\\n        feesStatus = true;\\r\\n        distributeAndLiquifyStatus = true;\\r\\n        launchedAt = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function removeStuckEth(address _receiver) public onlyOwner {\\r\\n        payable(_receiver).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function totalBuyFeePerTx(uint256 amount) public view returns (uint256) {\\r\\n        uint256 fee = (amount * marketingFeeOnBuying) / (percentDivider);\\r\\n        return fee;\\r\\n    }\\r\\n\\r\\n    function totalSellFeePerTx(uint256 amount) public view returns (uint256) {\\r\\n        uint256 fee = (amount * marketingFeeOnSelling) / (percentDivider);\\r\\n        return fee;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\" approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        if (!isExcludedFromMaxTxn[from] && !isExcludedFromMaxTxn[to]) {\\r\\n            require(amount <= maxTxnLimit, \\\" max txn limit exceeds\\\");\\r\\n\\r\\n            // trading disable till launch\\r\\n            if (!trading) {\\r\\n                require(\\r\\n                    dexPair != from && dexPair != to,\\r\\n                    \\\": trading is disable\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!isExcludedFromMaxHolding[to]) {\\r\\n            require(\\r\\n                (balanceOf(to) + amount) <= maxHoldLimit,\\r\\n                \\\": max hold limit exceeds\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // swap and liquify\\r\\n        distributeAndLiquify(from, to);\\r\\n\\r\\n        //indicates if fee should be deducted from transfer\\r\\n        bool takeFee = true;\\r\\n\\r\\n        //if any account belongs to isExcludedFromFee account then remove the fee\\r\\n        if (isExcludedFromFee[from] || isExcludedFromFee[to] || !feesStatus) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        //transfer amount, it will take tax, burn, liquidity fee\\r\\n        _tokenTransfer(from, to, amount, takeFee);\\r\\n    }\\r\\n\\r\\n    //this method is responsible for taking all fees, if takeFee is true\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) private {\\r\\n        if (dexPair == sender && takeFee) {\\r\\n            uint256 allFee;\\r\\n            uint256 tTransferAmount;\\r\\n            allFee = totalBuyFeePerTx(amount);\\r\\n            tTransferAmount = amount - allFee;\\r\\n\\r\\n            _balances[sender] = _balances[sender] - amount;\\r\\n            _balances[recipient] = _balances[recipient] + tTransferAmount;\\r\\n            emit Transfer(sender, recipient, tTransferAmount);\\r\\n\\r\\n            takeTokenFee(sender, allFee);\\r\\n        } else if (dexPair == recipient && takeFee) {\\r\\n            uint256 allFee = totalSellFeePerTx(amount);\\r\\n            uint256 tTransferAmount = amount - allFee;\\r\\n            _balances[sender] = _balances[sender] - amount;\\r\\n            _balances[recipient] = _balances[recipient] + tTransferAmount;\\r\\n            emit Transfer(sender, recipient, tTransferAmount);\\r\\n\\r\\n            takeTokenFee(sender, allFee);\\r\\n        } else {\\r\\n            _balances[sender] = _balances[sender] - amount;\\r\\n            _balances[recipient] = _balances[recipient] + (amount);\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function takeTokenFee(address sender, uint256 amount) private {\\r\\n        _balances[address(this)] = _balances[address(this)] + (amount);\\r\\n\\r\\n        emit Transfer(sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    // to withdarw ETH from contract\\r\\n    function withdrawETH(uint256 _amount) external onlyOwner {\\r\\n        require(address(this).balance >= _amount, \\\"Invalid Amount\\\");\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n    }\\r\\n\\r\\n    // to withdraw ERC20 tokens from contract\\r\\n    function withdrawToken(IERC20 _token, uint256 _amount) external onlyOwner {\\r\\n        require(_token.balanceOf(address(this)) >= _amount, \\\"Invalid Amount\\\");\\r\\n        _token.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function distributeAndLiquify(address from, address to) private {\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        bool shouldSell = contractTokenBalance >= minTokenToSwap;\\r\\n\\r\\n        if (\\r\\n            shouldSell &&\\r\\n            from != dexPair &&\\r\\n            distributeAndLiquifyStatus &&\\r\\n            !(from == address(this) && to == dexPair) // swap 1 time\\r\\n        ) {\\r\\n            // approve contract\\r\\n            _approve(address(this), address(dexRouter), minTokenToSwap);\\r\\n\\r\\n            // now is to lock into liquidty pool\\r\\n            Utils.swapTokensForEth(address(dexRouter), minTokenToSwap);\\r\\n            uint256 ethForMarketing = address(this).balance;\\r\\n\\r\\n            // sending Eth to Marketing wallet\\r\\n            if (ethForMarketing > 0)\\r\\n                payable(marketingWallet).transfer(ethForMarketing);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// Library for swapping on Dex\\r\\nlibrary Utils {\\r\\n    function swapTokensForEth(\\r\\n        address routerAddress,\\r\\n        uint256 tokenAmount\\r\\n    ) internal {\\r\\n        IDexRouter dexRouter = IDexRouter(routerAddress);\\r\\n\\r\\n        // generate the Dex pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = dexRouter.WETH();\\r\\n\\r\\n        // make the swap\\r\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 300\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        address routerAddress,\\r\\n        address owner,\\r\\n        uint256 tokenAmount,\\r\\n        uint256 ethAmount\\r\\n    ) internal {\\r\\n        IDexRouter dexRouter = IDexRouter(routerAddress);\\r\\n\\r\\n        // add the liquidity\\r\\n        dexRouter.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            owner,\\r\\n            block.timestamp + 300\\r\\n        );\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAndLiquifyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableOrDisableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxHolding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTxn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setDistributionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalBuyFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalSellFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"updateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OCISLY20", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}