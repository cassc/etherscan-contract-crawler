{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/WasabiOptionArbitrageV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IWasabiPool.sol\\\";\\nimport \\\"./lib/Signing.sol\\\";\\nimport \\\"./lending/interfaces/IFlashloan.sol\\\";\\nimport { IWETH } from \\\"./IWETH.sol\\\";\\n\\n/**\\n  * An arbitrage contract that exercises an option and buys/sells from the marketplaces\\n  * to take profits without using any user capital.\\n  */\\ncontract WasabiOptionArbitrageV2 is IERC721Receiver, Ownable, ReentrancyGuard {\\n    address private option;\\n    address wethAddress;\\n\\n    /// @notice Wasabi Flashloan\\n    IFlashloan public flashloan;\\n\\n    error FailedToExecuteMarketOrder();\\n\\n    struct FunctionCallData {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n\\n    event Arbitrage(address account, uint256 optionId, uint256 payout);\\n\\n    /**\\n     * @dev Constructs a new WasabiOptionArbitrage contract\\n     */\\n    constructor(address _option, address _wethAddress, IFlashloan _flashloan) {\\n        option = _option;\\n        wethAddress = _wethAddress;\\n        flashloan = _flashloan;\\n    }\\n\\n    /**\\n     * @dev Executes the given option and takes profits by selling/buying from the markets for the given marketplace call data\\n     */\\n    function arbitrage(\\n        uint256 _optionId,\\n        uint256 _value,\\n        address _poolAddress,\\n        uint256 _tokenId,\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) external payable nonReentrant {\\n        validate(_marketplaceCallData, _signatures);\\n\\n        uint256 flashLoanRepayAmount = flashloan.borrow(_value);\\n\\n        // Transfer Option for Execute\\n        IERC721(option).safeTransferFrom(msg.sender, address(this), _optionId);\\n\\n        IWasabiPool pool = IWasabiPool(_poolAddress);\\n\\n        require(pool.getLiquidityAddress() == address(0), \\\"Cannot perform arbitrage for non ETH pools\\\");\\n\\n        WasabiStructs.OptionData memory optionData = pool.getOptionData(_optionId);\\n\\n        if (optionData.optionType == WasabiStructs.OptionType.CALL) {\\n            // Execute Option\\n            IWasabiPool(_poolAddress).executeOption{value: _value}(_optionId);\\n\\n            // Sell NFT\\n            bool marketSuccess = executeFunctions(_marketplaceCallData);\\n            if (!marketSuccess) {\\n                revert FailedToExecuteMarketOrder();\\n            }\\n\\n            // Withdraw any WETH received\\n            IWETH weth = IWETH(wethAddress);\\n            uint256 wethBalance = weth.balanceOf(address(this));\\n            if (wethBalance > 0) {\\n                weth.withdraw(wethBalance);\\n            }\\n        } else {\\n            // Buy NFT\\n            bool marketSuccess = executeFunctions(_marketplaceCallData);\\n            if (!marketSuccess) {\\n                revert FailedToExecuteMarketOrder();\\n            }\\n\\n            // Execute Option\\n            address nft = IWasabiPool(_poolAddress).getNftAddress();\\n            IERC721(nft).approve(_poolAddress, _tokenId);\\n            IWasabiPool(_poolAddress).executeOptionWithSell(_optionId, _tokenId);\\n        }\\n\\n        require(address(this).balance >= flashLoanRepayAmount, \\\"Loan not paid back\\\");\\n        uint256 payout = address(this).balance - flashLoanRepayAmount;\\n\\n        // Repay flashloan\\n        (bool sent, ) = payable(address(flashloan)).call{value: flashLoanRepayAmount}(\\\"\\\");\\n        require(sent, \\\"Failed to send ETH\\\");\\n        // Deliver payout\\n        if (payout > 0) {\\n            (sent, ) = payable(_msgSender()).call{value: payout}(\\\"\\\");\\n            require(sent, \\\"Failed to send ETH\\\");\\n        }\\n\\n        emit Arbitrage(_msgSender(), _optionId, payout);\\n    }\\n\\n    /**\\n     * @dev Executes a given list of functions\\n     */\\n    function executeFunctions(FunctionCallData[] memory _marketplaceCallData) internal returns (bool) {\\n        for (uint256 i = 0; i < _marketplaceCallData.length; i++) {\\n            FunctionCallData memory functionCallData = _marketplaceCallData[i];\\n            (bool success, ) = functionCallData.to.call{value: functionCallData.value}(functionCallData.data);\\n            if (success == false) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Validates if the FunctionCallData list has been approved\\n     */\\n    function validate(FunctionCallData[] calldata _marketplaceCallData, bytes[] calldata _signatures) private view {\\n        require(_marketplaceCallData.length > 0, \\\"Need marketplace calls\\\");\\n        require(_marketplaceCallData.length == _signatures.length, \\\"Length is invalid\\\");\\n        for (uint256 i = 0; i < _marketplaceCallData.length; i++) {\\n            bytes32 ethSignedMessageHash = Signing.getEthSignedMessageHash(getMessageHash(_marketplaceCallData[i]));\\n            require(Signing.recoverSigner(ethSignedMessageHash, _signatures[i]) == owner(), 'Owner is not signer');\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the message hash for the given _data\\n     */\\n    function getMessageHash(FunctionCallData calldata _data) public pure returns (bytes32) {\\n        return keccak256(abi.encode(_data.to, _data.value, _data.data));\\n    }\\n    /**\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* tokenId */,\\n        bytes memory /* data */)\\n    public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    \\n    // Payable function to receive ETH\\n    receive() external payable {\\n    }\\n\\n    /**\\n     * @dev withdraws any stuck eth in this contract\\n     */\\n    function withdrawETH(uint256 _amount) external payable onlyOwner {\\n        require(_amount <= address(this).balance, 'Invalid amount');\\n        address payable to = payable(owner());\\n        to.transfer(_amount);\\n    }\\n\\n    /**\\n     * @dev withdraws any stuck ERC20 in this contract\\n     */\\n    function withdrawERC20(IERC20 _token, uint256 _amount) external onlyOwner {\\n        _token.transfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev withdraws any stuck ERC721 in this contract\\n     */\\n    function withdrawERC721(IERC721 _token, uint256 _tokenId) external onlyOwner {\\n        _token.safeTransferFrom(address(this), owner(), _tokenId);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/WasabiStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary WasabiStructs {\\n    enum OptionType {\\n        CALL,\\n        PUT\\n    }\\n\\n    struct OptionData {\\n        bool active;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 expiry;\\n        uint256 tokenId; // Locked token for CALL options\\n    }\\n\\n    struct PoolAsk {\\n        uint256 id;\\n        address poolAddress;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 premium;\\n        uint256 expiry;\\n        uint256 tokenId; // Token to lock for CALL options\\n        uint256 orderExpiry;\\n    }\\n\\n    struct PoolBid {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        uint256 orderExpiry;\\n        uint256 optionId;\\n    }\\n\\n    struct Bid {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        address collection;\\n        uint256 orderExpiry;\\n        address buyer;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 expiry;\\n        uint256 expiryAllowance;\\n        address optionTokenAddress;\\n    }\\n\\n    struct Ask {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        uint256 orderExpiry;\\n        address seller;\\n        uint256 optionId;\\n    }\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/Signing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {WasabiStructs} from \\\"./WasabiStructs.sol\\\";\\n\\n/**\\n * @dev Signature Verification\\n */\\nlibrary Signing {\\n\\n    /**\\n     * @dev Returns the message hash for the given request\\n     */\\n    function getMessageHash(WasabiStructs.PoolAsk calldata _request) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _request.id,\\n                _request.poolAddress,\\n                _request.optionType,\\n                _request.strikePrice,\\n                _request.premium,\\n                _request.expiry,\\n                _request.tokenId,\\n                _request.orderExpiry));\\n    }\\n\\n    /**\\n     * @dev Returns the message hash for the given request\\n     */\\n    function getAskHash(WasabiStructs.Ask calldata _ask) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _ask.id,\\n                _ask.price,\\n                _ask.tokenAddress,\\n                _ask.orderExpiry,\\n                _ask.seller,\\n                _ask.optionId));\\n    }\\n\\n    function getBidHash(WasabiStructs.Bid calldata _bid) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _bid.id,\\n                _bid.price,\\n                _bid.tokenAddress,\\n                _bid.collection,\\n                _bid.orderExpiry,\\n                _bid.buyer,\\n                _bid.optionType,\\n                _bid.strikePrice,\\n                _bid.expiry,\\n                _bid.expiryAllowance));\\n    }\\n\\n    /**\\n     * @dev creates an ETH signed message hash\\n     */\\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    function getSigner(\\n        WasabiStructs.PoolAsk calldata _request,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        bytes32 messageHash = getMessageHash(_request);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature);\\n    }\\n\\n    function getAskSigner(\\n        WasabiStructs.Ask calldata _ask,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        bytes32 messageHash = getAskHash(_ask);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature);\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lending/interfaces/IFlashloan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Flashloan Interface\\ninterface IFlashloan {\\n    /// @notice Flashloan Info Struct\\n    /// @param enabled Enabled flag\\n    /// @param flashloanPremiumValue;\\n    struct FlashLoanInfo {\\n        bool enabled;\\n        uint256 flashloanPremiumValue;\\n    }\\n\\n    /// @notice ETH Transfer Failed\\n    error EthTransferFailed();\\n\\n    /// @notice Borrow ETH\\n    /// @param amount Flashloan amount\\n    /// @return flashLoanRepayAmount Flashloan repayment amount\\n    function borrow(uint256 amount) external returns (uint256 flashLoanRepayAmount);\\n}\\n\"\r\n    },\r\n    \"/contracts/IWasabiPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./lib/WasabiStructs.sol\\\";\\n\\n/**\\n * @dev Required interface of an WasabiPool compliant contract.\\n */\\ninterface IWasabiPool is IERC165, IERC721Receiver {\\n    \\n    /**\\n     * @dev Emitted when `admin` is changed.\\n     */\\n    event AdminChanged(address admin);\\n\\n    /**\\n     * @dev Emitted when an order is cancelled.\\n     */\\n    event OrderCancelled(uint256 id);\\n\\n    /**\\n     * @dev Emitted when a pool bid is taken\\n     */\\n    event PoolBidTaken(uint256 id);\\n\\n    /**\\n     * @dev Emitted when an ERC721 is received\\n     */\\n    event ERC721Received(uint256 tokenId);\\n\\n    /**\\n     * @dev Emitted when ETH is received\\n     */\\n    event ETHReceived(uint amount);\\n\\n    /**\\n     * @dev Emitted when ERC20 is received\\n     */\\n    event ERC20Received(uint amount);\\n\\n    /**\\n     * @dev Emitted when an ERC721 is withdrawn\\n     */\\n    event ERC721Withdrawn(uint256 tokenId);\\n\\n    /**\\n     * @dev Emitted when ERC20 is withdrawn\\n     */\\n    event ERC20Withdrawn(uint amount);\\n\\n    /**\\n     * @dev Emitted when ETH is withdrawn\\n     */\\n    event ETHWithdrawn(uint amount);\\n\\n    /**\\n     * @dev Emitted when an option is executed.\\n     */\\n    event OptionExecuted(uint256 optionId);\\n\\n    /**\\n     * @dev Emitted when an option is issued\\n     */\\n    event OptionIssued(uint256 optionId, uint256 price);\\n\\n    /**\\n     * @dev Emitted when an option is issued\\n     */\\n    event OptionIssued(uint256 optionId, uint256 price, uint256 poolAskId);\\n\\n    /**\\n     * @dev Emitted when the pool settings are edited\\n     */\\n    event PoolSettingsChanged();\\n\\n    /**\\n     * @dev Returns the address of the nft\\n     */\\n    function getNftAddress() external view returns(address);\\n\\n    /**\\n     * @dev Returns the address of the nft\\n     */\\n    function getLiquidityAddress() external view returns(address);\\n\\n    /**\\n     * @dev Writes an option for the given ask.\\n     */\\n    function writeOption(\\n        WasabiStructs.PoolAsk calldata _request, bytes calldata _signature\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Writes an option for the given rule and buyer.\\n     */\\n    function writeOptionTo(\\n        WasabiStructs.PoolAsk calldata _request, bytes calldata _signature, address _receiver\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Executes the option for the given id.\\n     */\\n    function executeOption(uint256 _optionId) external payable;\\n\\n    /**\\n     * @dev Executes the option for the given id.\\n     */\\n    function executeOptionWithSell(uint256 _optionId, uint256 _tokenId) external payable;\\n\\n    /**\\n     * @dev Cancels the order for the given _orderId.\\n     */\\n    function cancelOrder(uint256 _orderId) external;\\n\\n    /**\\n     * @dev Withdraws ERC721 tokens from the pool.\\n     */\\n    function withdrawERC721(IERC721 _nft, uint256[] calldata _tokenIds) external;\\n\\n    /**\\n     * @dev Deposits ERC721 tokens to the pool.\\n     */\\n    function depositERC721(IERC721 _nft, uint256[] calldata _tokenIds) external;\\n\\n    /**\\n     * @dev Withdraws ETH from this pool\\n     */\\n    function withdrawETH(uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws ERC20 tokens from this pool\\n     */\\n    function withdrawERC20(IERC20 _token, uint256 _amount) external;\\n\\n    /**\\n     * @dev Sets the admin of this pool.\\n     */\\n    function setAdmin(address _admin) external;\\n\\n    /**\\n     * @dev Removes the admin from this pool.\\n     */\\n    function removeAdmin() external;\\n\\n    /**\\n     * @dev Returns the address of the current admin.\\n     */\\n    function getAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the factory managing this pool\\n     */\\n    function getFactory() external view returns (address);\\n\\n    /**\\n     * @dev Returns the available balance this pool contains that can be withdrawn or collateralized\\n     */\\n    function availableBalance() view external returns(uint256);\\n\\n    /**\\n     * @dev Returns an array of ids of all outstanding (issued or expired) options\\n     */\\n    function getOptionIds() external view returns(uint256[] memory);\\n\\n    /**\\n     * @dev Returns the id of the option that locked the given token id, reverts if there is none\\n     */\\n    function getOptionIdForToken(uint256 _tokenId) external view returns(uint256);\\n\\n    /**\\n     * @dev Returns the option data for the given option id\\n     */\\n    function getOptionData(uint256 _optionId) external view returns(WasabiStructs.OptionData memory);\\n\\n    /**\\n     * @dev Returns 'true' if the option for the given id is valid and active, 'false' otherwise\\n     */\\n    function isValid(uint256 _optionId) view external returns(bool);\\n\\n    /**\\n     * @dev Checks if _tokenId unlocked\\n     */\\n    function isAvailableTokenId(uint256 _tokenId) external view returns(bool);\\n\\n    /**\\n     * @dev Clears the expired options from the pool\\n     */\\n    function clearExpiredOptions(uint256[] memory _optionIds) external;\\n\\n    /**\\n     * @dev accepts the bid for LPs with _tokenId. If its a put option, _tokenId can be 0\\n     */\\n    function acceptBid(WasabiStructs.Bid calldata _bid, bytes calldata _signature, uint256 _tokenId) external returns(uint256);\\n\\n    /**\\n     * @dev accepts the ask for LPs\\n     */\\n    function acceptAsk(WasabiStructs.Ask calldata _ask, bytes calldata _signature) external;\\n\\n    /**\\n     * @dev accepts a bid created for this pool\\n     */\\n    function acceptPoolBid(WasabiStructs.PoolBid calldata _poolBid, bytes calldata _signature) external payable;\\n}\"\r\n    },\r\n    \"/contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_option\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"contract IFlashloan\",\"name\":\"_flashloan\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedToExecuteMarketOrder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Arbitrage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct WasabiOptionArbitrageV2.FunctionCallData[]\",\"name\":\"_marketplaceCallData\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"arbitrage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashloan\",\"outputs\":[{\"internalType\":\"contract IFlashloan\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct WasabiOptionArbitrageV2.FunctionCallData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WasabiOptionArbitrageV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "000000000000000000000000fc68f2130e094c95b6c4f5494158cbeb172e18a0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000001a05856e823efdb78ddcf0cf209f69dd6e6f3d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}