{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/wrappers/ConvexStakingWrapperFrax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ConvexStakingWrapper.sol\\\";\\r\\nimport \\\"../interfaces/IProxyFactory.sol\\\";\\r\\nimport \\\"../interfaces/IOwner.sol\\\";\\r\\n\\r\\n\\r\\ninterface IFraxFarmDistributor {\\r\\n    function initialize(address _farm, address _wrapper) external;\\r\\n}\\r\\n\\r\\ninterface IFraxFarm {\\r\\n    function lockedLiquidityOf(address account) external view returns (uint256 amount);\\r\\n}\\r\\n\\r\\n//Staking wrapper for Frax Finance platform\\r\\n//use convex LP positions as collateral while still receiving rewards\\r\\n//\\r\\n//This version directs all rewards from the vault(fxs gauge) to a distributor contract\\r\\n//which will feed the rewards back into the vault\\r\\ncontract ConvexStakingWrapperFrax is ConvexStakingWrapper {\\r\\n    using SafeERC20\\r\\n    for IERC20;\\r\\n    using SafeMath\\r\\n    for uint256;\\r\\n\\r\\n    address public immutable distroImplementation;\\r\\n    address public immutable factory;\\r\\n    address public constant proxyFactory = address(0x66807B5598A848602734B82E432dD88DBE13fC8f);\\r\\n\\r\\n    address public distroContract;\\r\\n    bool public distroSealed;\\r\\n\\r\\n    constructor(address _distributor, address _factory) public{\\r\\n        distroImplementation = _distributor;\\r\\n        factory = _factory;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() override{\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() public view override returns(address) {\\r\\n        return IOwner(factory).owner();\\r\\n    }\\r\\n\\r\\n\\r\\n    function initialize(uint256 _poolId)\\r\\n    override external {\\r\\n        require(!isInit,\\\"already init\\\");\\r\\n        // _owner = msg.sender;\\r\\n        // emit OwnershipTransferred(address(0), _owner);\\r\\n\\r\\n        (address _lptoken, address _token, , address _rewards, , ) = IBooster(convexBooster).poolInfo(_poolId);\\r\\n        curveToken = _lptoken;\\r\\n        convexToken = _token;\\r\\n        convexPool = _rewards;\\r\\n        convexPoolId = _poolId;\\r\\n\\r\\n        _tokenname = string(abi.encodePacked(\\\"Staked \\\", ERC20(_token).name(), \\\" Frax\\\" ));\\r\\n        _tokensymbol = string(abi.encodePacked(\\\"stk\\\", ERC20(_token).symbol(), \\\"-frax\\\"));\\r\\n        isShutdown = false;\\r\\n        isInit = true;\\r\\n\\r\\n        //add rewards\\r\\n        addRewards();\\r\\n        setApprovals();\\r\\n    }\\r\\n\\r\\n    function _getDepositedBalance(address _account) internal override view returns(uint256) {\\r\\n        if (_account == address(0) || _account == collateralVault) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 collateral;\\r\\n        if(collateralVault != address(0)){\\r\\n           collateral = IFraxFarm(collateralVault).lockedLiquidityOf(_account);\\r\\n        }\\r\\n\\r\\n        return balanceOf(_account).add(collateral);\\r\\n    }\\r\\n\\r\\n    //add extra check if farm is the caller of claim then pull tokens\\r\\n    function _claimExtras(bool _isClaim) internal override{\\r\\n        super._claimExtras(_isClaim);\\r\\n\\r\\n        //if the frax farm is the caller, send all crv/cvx to the distribution contract\\r\\n        if(_isClaim && msg.sender == distroContract){\\r\\n            uint256 b = IERC20(crv).balanceOf(address(this));\\r\\n            if(b > 0){\\r\\n                _transferReward(crv,distroContract,b);\\r\\n            }\\r\\n            b = IERC20(cvx).balanceOf(address(this));\\r\\n            if(b > 0){\\r\\n                _transferReward(cvx,distroContract,b);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addTokenReward(address _token) public override onlyOwner {\\r\\n        require(_token != crv && _token != cvx,\\\"!revive\\\");\\r\\n        super.addTokenReward(_token);\\r\\n    }\\r\\n\\r\\n    function setVault(address _vault) external onlyOwner{\\r\\n        //set distro contract to take care of rewards\\r\\n        require(distroContract == address(0), \\\"already set\\\");\\r\\n        \\r\\n        //create a distro contract\\r\\n        distroContract = IProxyFactory(proxyFactory).clone(distroImplementation);\\r\\n        IFraxFarmDistributor(distroContract).initialize(_vault, address(this));\\r\\n\\r\\n        //forward rewards from vault to distro\\r\\n        rewardRedirect[_vault] = distroContract;\\r\\n        collateralVault = _vault;\\r\\n\\r\\n        //invalidate crv and cvx so that they are not distributed directly\\r\\n        //but rather picked up by the frax farm distributor via _claimExtras\\r\\n        invalidateReward(crv);\\r\\n        invalidateReward(cvx);\\r\\n    }\\r\\n\\r\\n    //Also resetting of distributor while this feature is new\\r\\n    //Seal once battle tested\\r\\n    //Future versions should remove this\\r\\n    function setDistributor(address _distro) external onlyOwner{\\r\\n        address _farm = collateralVault;\\r\\n        require(_farm != address(0),\\\"!farm\\\");\\r\\n        require(!distroSealed,\\\"sealed\\\");\\r\\n\\r\\n        distroContract = _distro;\\r\\n        IFraxFarmDistributor(_distro).initialize(_farm, address(this));\\r\\n        rewardRedirect[_farm] = _distro;\\r\\n    }\\r\\n\\r\\n    function sealDistributor() external onlyOwner{\\r\\n        distroSealed = true;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/wrappers/ConvexStakingWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/IRewardStaking.sol\\\";\\r\\nimport \\\"../interfaces/IConvexDeposits.sol\\\";\\r\\nimport \\\"../interfaces/CvxMining.sol\\\";\\r\\nimport \\\"../interfaces/IBooster.sol\\\";\\r\\nimport \\\"../interfaces/IRewardHook.sol\\\";\\r\\nimport \\\"../interfaces/ITokenWrapper.sol\\\";\\r\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n\\r\\n//Example of a tokenize a convex staked position.\\r\\n//if used as collateral some modifications will be needed to fit the specific platform\\r\\n\\r\\n//Based on Curve.fi's gauge wrapper implementations at https://github.com/curvefi/curve-dao-contracts/tree/master/contracts/gauges/wrappers\\r\\ncontract ConvexStakingWrapper is ERC20, ReentrancyGuard {\\r\\n    using SafeERC20\\r\\n    for IERC20;\\r\\n    using SafeMath\\r\\n    for uint256;\\r\\n\\r\\n    struct EarnedData {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct RewardType {\\r\\n        address reward_token;\\r\\n        address reward_pool;\\r\\n        uint256 reward_integral;\\r\\n        uint256 reward_remaining;\\r\\n        mapping(address => uint256) reward_integral_for;\\r\\n        mapping(address => uint256) claimable_reward;\\r\\n    }\\r\\n\\r\\n    //constants/immutables\\r\\n    address public constant convexBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\r\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\r\\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\r\\n    address public curveToken;\\r\\n    address public convexToken;\\r\\n    address public convexPool;\\r\\n    uint256 public convexPoolId;\\r\\n    address public collateralVault;\\r\\n    uint256 private constant CRV_INDEX = 0;\\r\\n    uint256 private constant CVX_INDEX = 1;\\r\\n\\r\\n    //rewards\\r\\n    RewardType[] public rewards;\\r\\n    mapping(address => uint256) public registeredRewards;\\r\\n    address public rewardHook;\\r\\n    mapping(address => address) public rewardRedirect;\\r\\n\\r\\n    //management\\r\\n    bool public isShutdown;\\r\\n    bool public isInit;\\r\\n    address internal _owner;\\r\\n\\r\\n    string internal _tokenname;\\r\\n    string internal _tokensymbol;\\r\\n\\r\\n    event Deposited(address indexed _user, address indexed _account, uint256 _amount, bool _wrapped);\\r\\n    event Withdrawn(address indexed _user, uint256 _amount, bool _unwrapped);\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    event RewardInvalidated(address _rewardToken);\\r\\n    event RewardRedirected(address indexed _account, address _forward);\\r\\n    event RewardAdded(address _token);\\r\\n    event Shutdown();\\r\\n    event HookSet(address _hook);\\r\\n    event UserCheckpoint(address _userA, address _userB);\\r\\n\\r\\n    constructor() public\\r\\n        ERC20(\\r\\n            \\\"StakedConvexToken\\\",\\r\\n            \\\"stkCvx\\\"\\r\\n        ){\\r\\n    }\\r\\n\\r\\n    function initialize(uint256 _poolId)\\r\\n    virtual external {\\r\\n        require(!isInit,\\\"already init\\\");\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n\\r\\n        (address _lptoken, address _token, , address _rewards, , ) = IBooster(convexBooster).poolInfo(_poolId);\\r\\n        curveToken = _lptoken;\\r\\n        convexToken = _token;\\r\\n        convexPool = _rewards;\\r\\n        convexPoolId = _poolId;\\r\\n\\r\\n        _tokenname = string(abi.encodePacked(\\\"Staked \\\", ERC20(_token).name() ));\\r\\n        _tokensymbol = string(abi.encodePacked(\\\"stk\\\", ERC20(_token).symbol()));\\r\\n        isShutdown = false;\\r\\n        isInit = true;\\r\\n\\r\\n        // collateralVault = _vault;\\r\\n\\r\\n        //add rewards\\r\\n        addRewards();\\r\\n        setApprovals();\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns(address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _tokenname;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _tokensymbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() virtual{\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function shutdown() external onlyOwner {\\r\\n        isShutdown = true;\\r\\n        emit Shutdown();\\r\\n    }\\r\\n\\r\\n    function setApprovals() public {\\r\\n        IERC20(curveToken).safeApprove(convexBooster, 0);\\r\\n        IERC20(curveToken).safeApprove(convexBooster, uint256(-1));\\r\\n        IERC20(convexToken).safeApprove(convexPool, 0);\\r\\n        IERC20(convexToken).safeApprove(convexPool, uint256(-1));\\r\\n    }\\r\\n\\r\\n    function addRewards() public {\\r\\n        address mainPool = convexPool;\\r\\n\\r\\n        if (rewards.length == 0) {\\r\\n            rewards.push(\\r\\n                RewardType({\\r\\n                    reward_token: crv,\\r\\n                    reward_pool: mainPool,\\r\\n                    reward_integral: 0,\\r\\n                    reward_remaining: 0\\r\\n                })\\r\\n            );\\r\\n            rewards.push(\\r\\n                RewardType({\\r\\n                    reward_token: cvx,\\r\\n                    reward_pool: address(0),\\r\\n                    reward_integral: 0,\\r\\n                    reward_remaining: 0\\r\\n                })\\r\\n            );\\r\\n            registeredRewards[crv] = CRV_INDEX+1; //mark registered at index+1\\r\\n            registeredRewards[cvx] = CVX_INDEX+1; //mark registered at index+1\\r\\n            //send to self to warmup state\\r\\n            IERC20(crv).transfer(address(this),0);\\r\\n            //send to self to warmup state\\r\\n            IERC20(cvx).transfer(address(this),0);\\r\\n            emit RewardAdded(crv);\\r\\n            emit RewardAdded(cvx);\\r\\n        }\\r\\n\\r\\n        uint256 extraCount = IRewardStaking(mainPool).extraRewardsLength();\\r\\n        for (uint256 i = 0; i < extraCount; i++) {\\r\\n            address extraPool = IRewardStaking(mainPool).extraRewards(i);\\r\\n            address extraToken = IRewardStaking(extraPool).rewardToken();\\r\\n            //from pool 151, extra reward tokens are wrapped\\r\\n            if(convexPoolId >= 151){\\r\\n                extraToken = ITokenWrapper(extraToken).token();\\r\\n            }\\r\\n            if(extraToken == cvx){\\r\\n                //update cvx reward pool address\\r\\n                rewards[CVX_INDEX].reward_pool = extraPool;\\r\\n            }else if(registeredRewards[extraToken] == 0){\\r\\n                //add new token to list\\r\\n                rewards.push(\\r\\n                    RewardType({\\r\\n                        reward_token: extraToken,\\r\\n                        reward_pool: extraPool,\\r\\n                        reward_integral: 0,\\r\\n                        reward_remaining: 0\\r\\n                    })\\r\\n                );\\r\\n                registeredRewards[extraToken] = rewards.length; //mark registered at index+1\\r\\n                emit RewardAdded(extraToken);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addTokenReward(address _token) public virtual onlyOwner {\\r\\n\\r\\n        //check if not registered yet\\r\\n        if(registeredRewards[_token] == 0){\\r\\n            //add new token to list\\r\\n            rewards.push(\\r\\n                RewardType({\\r\\n                    reward_token: _token,\\r\\n                    reward_pool: address(0),\\r\\n                    reward_integral: 0,\\r\\n                    reward_remaining: 0\\r\\n                })\\r\\n            );\\r\\n            //add to registered map\\r\\n            registeredRewards[_token] = rewards.length; //mark registered at index+1\\r\\n            //send to self to warmup state\\r\\n            IERC20(_token).transfer(address(this),0);   \\r\\n            emit RewardAdded(_token);\\r\\n        }else{\\r\\n            //get previous used index of given token\\r\\n            //this ensures that reviving can only be done on the previous used slot\\r\\n            uint256 index = registeredRewards[_token];\\r\\n            if(index > 0){\\r\\n                //index is registeredRewards minus one\\r\\n                RewardType storage reward = rewards[index-1];\\r\\n                //check if it was invalidated\\r\\n                if(reward.reward_token == address(0)){\\r\\n                    //revive\\r\\n                    reward.reward_token = _token;\\r\\n                    emit RewardAdded(_token);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //allow invalidating a reward if the token causes trouble in calcRewardIntegral\\r\\n    function invalidateReward(address _token) public onlyOwner {\\r\\n        uint256 index = registeredRewards[_token];\\r\\n        if(index > 0){\\r\\n            //index is registered rewards minus one\\r\\n            RewardType storage reward = rewards[index-1];\\r\\n            require(reward.reward_token == _token, \\\"!mismatch\\\");\\r\\n            //set reward token address to 0, integral calc will now skip\\r\\n            reward.reward_token = address(0);\\r\\n            emit RewardInvalidated(_token);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setHook(address _hook) external onlyOwner{\\r\\n        rewardHook = _hook;\\r\\n        emit HookSet(_hook);\\r\\n    }\\r\\n\\r\\n    function rewardLength() external view returns(uint256) {\\r\\n        return rewards.length;\\r\\n    }\\r\\n\\r\\n    function _getDepositedBalance(address _account) internal virtual view returns(uint256) {\\r\\n        if (_account == address(0) || _account == collateralVault) {\\r\\n            return 0;\\r\\n        }\\r\\n        //get balance from collateralVault\\r\\n\\r\\n        return balanceOf(_account);\\r\\n    }\\r\\n\\r\\n    function _getTotalSupply() internal virtual view returns(uint256){\\r\\n\\r\\n        //override and add any supply needed (interest based growth)\\r\\n\\r\\n        return totalSupply();\\r\\n    }\\r\\n\\r\\n    //internal transfer function to transfer rewards out on claim\\r\\n    function _transferReward(address _token, address _to, uint256 _amount) internal virtual{\\r\\n        IERC20(_token).safeTransfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function _calcRewardIntegral(uint256 _index, address[2] memory _accounts, uint256[2] memory _balances, uint256 _supply, bool _isClaim) internal{\\r\\n         RewardType storage reward = rewards[_index];\\r\\n         if(reward.reward_token == address(0)){\\r\\n            return;\\r\\n         }\\r\\n\\r\\n        //get difference in balance and remaining rewards\\r\\n        //getReward is unguarded so we use reward_remaining to keep track of how much was actually claimed\\r\\n        uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\\r\\n\\r\\n        //check that balance increased and update integral\\r\\n        if (_supply > 0 && bal > reward.reward_remaining) {\\r\\n            reward.reward_integral = reward.reward_integral + (bal.sub(reward.reward_remaining).mul(1e20).div(_supply));\\r\\n        }\\r\\n\\r\\n        //update user integrals\\r\\n        for (uint256 u = 0; u < _accounts.length; u++) {\\r\\n            //do not give rewards to address 0\\r\\n            if (_accounts[u] == address(0)) continue;\\r\\n            if (_accounts[u] == collateralVault) continue;\\r\\n            if(_isClaim && u != 0) continue; //only update/claim for first address and use second as forwarding\\r\\n\\r\\n            uint userI = reward.reward_integral_for[_accounts[u]];\\r\\n            if(_isClaim || userI < reward.reward_integral){\\r\\n                if(_isClaim){\\r\\n                    uint256 receiveable = reward.claimable_reward[_accounts[u]].add(_balances[u].mul( reward.reward_integral.sub(userI)).div(1e20));\\r\\n                    if(receiveable > 0){\\r\\n                        reward.claimable_reward[_accounts[u]] = 0;\\r\\n                        //cheat for gas savings by transfering to the second index in accounts list\\r\\n                        //if claiming only the 0 index will update so 1 index can hold forwarding info\\r\\n                        //guaranteed to have an address in u+1 so no need to check\\r\\n                        _transferReward(reward.reward_token, _accounts[u+1], receiveable);\\r\\n                        bal = bal.sub(receiveable);\\r\\n                    }\\r\\n                }else{\\r\\n                    reward.claimable_reward[_accounts[u]] = reward.claimable_reward[_accounts[u]].add(_balances[u].mul( reward.reward_integral.sub(userI)).div(1e20));\\r\\n                }\\r\\n                reward.reward_integral_for[_accounts[u]] = reward.reward_integral;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //update remaining reward here since balance could have changed if claiming\\r\\n        if(bal != reward.reward_remaining){\\r\\n            reward.reward_remaining = bal;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkpoint(address[2] memory _accounts) internal nonReentrant{\\r\\n        uint256 supply = _getTotalSupply();\\r\\n        uint256[2] memory depositedBalance;\\r\\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]);\\r\\n        depositedBalance[1] = _getDepositedBalance(_accounts[1]);\\r\\n        \\r\\n        //just in case, dont claim rewards directly if shutdown\\r\\n        //can still technically claim via unguarded calls but skipping here\\r\\n        //protects against outside calls reverting\\r\\n        if(!isShutdown){\\r\\n            IRewardStaking(convexPool).getReward(address(this), true);\\r\\n        }\\r\\n        _claimExtras(false);\\r\\n\\r\\n        uint256 rewardCount = rewards.length;\\r\\n        for (uint256 i = 0; i < rewardCount; i++) {\\r\\n           _calcRewardIntegral(i,_accounts,depositedBalance,supply,false);\\r\\n        }\\r\\n        emit UserCheckpoint(_accounts[0],_accounts[1]);\\r\\n    }\\r\\n\\r\\n    function _checkpointAndClaim(address[2] memory _accounts) internal nonReentrant{\\r\\n        uint256 supply = _getTotalSupply();\\r\\n        uint256[2] memory depositedBalance;\\r\\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]); //only do first slot\\r\\n        \\r\\n        //just in case, dont claim rewards directly if shutdown\\r\\n        //can still technically claim via unguarded calls but skipping here\\r\\n        //protects against outside calls reverting\\r\\n        if(!isShutdown){\\r\\n            IRewardStaking(convexPool).getReward(address(this), true);\\r\\n        }\\r\\n        _claimExtras(true);\\r\\n\\r\\n        uint256 rewardCount = rewards.length;\\r\\n        for (uint256 i = 0; i < rewardCount; i++) {\\r\\n           _calcRewardIntegral(i,_accounts,depositedBalance,supply,true);\\r\\n        }\\r\\n        emit UserCheckpoint(_accounts[0],_accounts[1]);\\r\\n    }\\r\\n\\r\\n    //claim any rewards not part of the convex pool\\r\\n    function _claimExtras(bool _isClaim) internal virtual{\\r\\n        //override and add any external reward claiming\\r\\n        if(rewardHook != address(0)){\\r\\n            try IRewardHook(rewardHook).onRewardClaim(){\\r\\n            }catch{}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function user_checkpoint(address _account) external returns(bool) {\\r\\n        _checkpoint([_account, address(0)]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function totalBalanceOf(address _account) external view returns(uint256){\\r\\n        return _getDepositedBalance(_account);\\r\\n    }\\r\\n\\r\\n    //run earned as a mutable function to claim everything before calculating earned rewards\\r\\n    function earned(address _account) external returns(EarnedData[] memory claimable) {\\r\\n        //checkpoint to pull in and tally new rewards\\r\\n        _checkpoint([_account, address(0)]);\\r\\n        return _earned(_account);\\r\\n    }\\r\\n\\r\\n    function _earned(address _account) internal view returns(EarnedData[] memory claimable) {\\r\\n\\r\\n        uint256 rewardCount = rewards.length;\\r\\n        claimable = new EarnedData[](rewardCount);\\r\\n\\r\\n        for (uint256 i = 0; i < rewardCount; i++) {\\r\\n            RewardType storage reward = rewards[i];\\r\\n            if(reward.reward_token == address(0)){\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            claimable[i].amount = reward.claimable_reward[_account];\\r\\n            claimable[i].token = reward.reward_token;\\r\\n        }\\r\\n        return claimable;\\r\\n    }\\r\\n\\r\\n    //set any claimed rewards to automatically go to a different address\\r\\n    //set address to zero to disable\\r\\n    function setRewardRedirect(address _to) external nonReentrant{\\r\\n        rewardRedirect[msg.sender] = _to;\\r\\n        emit RewardRedirected(msg.sender, _to);\\r\\n    }\\r\\n\\r\\n    function getReward(address _account) external {\\r\\n        //check if there is a redirect address\\r\\n        if(rewardRedirect[_account] != address(0)){\\r\\n            _checkpointAndClaim([_account, rewardRedirect[_account]]);\\r\\n        }else{\\r\\n            //claim directly in checkpoint logic to save a bit of gas\\r\\n            _checkpointAndClaim([_account, _account]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getReward(address _account, address _forwardTo) external {\\r\\n        require(msg.sender == _account, \\\"!self\\\");\\r\\n        //claim directly in checkpoint logic to save a bit of gas\\r\\n        //pack forwardTo into account array to save gas so that a proxy etc doesnt have to double transfer\\r\\n        _checkpointAndClaim([_account,_forwardTo]);\\r\\n    }\\r\\n\\r\\n    //deposit a curve token\\r\\n    function deposit(uint256 _amount, address _to) external {\\r\\n        require(!isShutdown, \\\"shutdown\\\");\\r\\n\\r\\n        //dont need to call checkpoint since _mint() will\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            _mint(_to, _amount);\\r\\n            IERC20(curveToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            IConvexDeposits(convexBooster).deposit(convexPoolId, _amount, true);\\r\\n        }\\r\\n\\r\\n        emit Deposited(msg.sender, _to, _amount, true);\\r\\n    }\\r\\n\\r\\n    //stake a convex token\\r\\n    function stake(uint256 _amount, address _to) external {\\r\\n        require(!isShutdown, \\\"shutdown\\\");\\r\\n\\r\\n        //dont need to call checkpoint since _mint() will\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            _mint(_to, _amount);\\r\\n            IERC20(convexToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            IRewardStaking(convexPool).stake(_amount);\\r\\n        }\\r\\n\\r\\n        emit Deposited(msg.sender, _to, _amount, false);\\r\\n    }\\r\\n\\r\\n    //withdraw to convex deposit token\\r\\n    function withdraw(uint256 _amount) external {\\r\\n\\r\\n        //dont need to call checkpoint since _burn() will\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            _burn(msg.sender, _amount);\\r\\n            IRewardStaking(convexPool).withdraw(_amount, false);\\r\\n            IERC20(convexToken).safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n        emit Withdrawn(msg.sender, _amount, false);\\r\\n    }\\r\\n\\r\\n    //withdraw to underlying curve lp token\\r\\n    function withdrawAndUnwrap(uint256 _amount) external {\\r\\n        \\r\\n        //dont need to call checkpoint since _burn() will\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            _burn(msg.sender, _amount);\\r\\n            IRewardStaking(convexPool).withdrawAndUnwrap(_amount, false);\\r\\n            IERC20(curveToken).safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n        //events\\r\\n        emit Withdrawn(msg.sender, _amount, true);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\\r\\n        _checkpoint([_from, _to]);\\r\\n    }\\r\\n\\r\\n    //helper function\\r\\n    function earmarkRewards() external returns(bool){\\r\\n        return IBooster(convexBooster).earmarkRewards(convexPoolId);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ITokenWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface ITokenWrapper {\\r\\n   function token() external view returns (address);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewardStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IRewardStaking {\\r\\n    function stakeFor(address, uint256) external;\\r\\n    function stake( uint256) external;\\r\\n    function withdraw(uint256 amount, bool claim) external;\\r\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\r\\n    function earned(address account) external view returns (uint256);\\r\\n    function getReward() external;\\r\\n    function getReward(address _account, bool _claimExtras) external;\\r\\n    function extraRewardsLength() external view returns (uint256);\\r\\n    function extraRewards(uint256 _pid) external view returns (address);\\r\\n    function rewardToken() external view returns (address);\\r\\n    function balanceOf(address _account) external view returns (uint256);\\r\\n    function rewardRate() external view returns(uint256);\\r\\n    function totalSupply() external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewardHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IRewardHook {\\r\\n    function onRewardClaim() external;\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IProxyFactory {\\r\\n    function clone(address _target) external returns(address);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IOwner {\\r\\n    function setPendingOwner(address _powner) external;\\r\\n    function acceptPendingOwner() external;\\r\\n    function owner() external view returns(address);\\r\\n    function pendingOwner() external view returns(address);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ICvx.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface ICvx {\\r\\n    function reductionPerCliff() external view returns(uint256);\\r\\n    function totalSupply() external view returns(uint256);\\r\\n    function totalCliffs() external view returns(uint256);\\r\\n    function maxSupply() external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IConvexDeposits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IConvexDeposits {\\r\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\\r\\n    function deposit(uint256 _amount, bool _lock, address _stakeAddress) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IBooster {\\r\\n    function owner() external view returns(address);\\r\\n    function feeToken() external view returns(address);\\r\\n    function feeDistro() external view returns(address);\\r\\n    function lockFees() external view returns(address);\\r\\n    function stakerRewards() external view returns(address);\\r\\n    function lockRewards() external view returns(address);\\r\\n    function setVoteDelegate(address _voteDelegate) external;\\r\\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool);\\r\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool);\\r\\n    function poolInfo(uint256 _pid) external view returns(address _lptoken, address _token, address _gauge, address _crvRewards, address _stash, bool _shutdown);\\r\\n    function earmarkRewards(uint256 _pid) external returns(bool);\\r\\n    function earmarkFees() external returns(bool);\\r\\n    function isShutdown() external view returns(bool);\\r\\n    function poolLength() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/CvxMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../interfaces/ICvx.sol\\\";\\r\\n\\r\\nlibrary CvxMining{\\r\\n    ICvx public constant cvx = ICvx(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\r\\n\\r\\n    function ConvertCrvToCvx(uint256 _amount) external view returns(uint256){\\r\\n        uint256 supply = cvx.totalSupply();\\r\\n        uint256 reductionPerCliff = cvx.reductionPerCliff();\\r\\n        uint256 totalCliffs = cvx.totalCliffs();\\r\\n        uint256 maxSupply = cvx.maxSupply();\\r\\n\\r\\n        uint256 cliff = supply / reductionPerCliff;\\r\\n        //mint if below total cliffs\\r\\n        if(cliff < totalCliffs){\\r\\n            //for reduction% take inverse of current cliff\\r\\n            uint256 reduction = totalCliffs - cliff;\\r\\n            //reduce\\r\\n            _amount = _amount * reduction / totalCliffs;\\r\\n\\r\\n            //supply cap check\\r\\n            uint256 amtTillMax = maxSupply - supply;\\r\\n            if(_amount > amtTillMax){\\r\\n                _amount = amtTillMax;\\r\\n            }\\r\\n\\r\\n            //mint\\r\\n            return _amount;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_wrapped\",\"type\":\"bool\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"HookSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"RewardInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_forward\",\"type\":\"address\"}],\"name\":\"RewardRedirected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userB\",\"type\":\"address\"}],\"name\":\"UserCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_unwrapped\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addTokenReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distroContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distroImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distroSealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConvexStakingWrapper.EarnedData[]\",\"name\":\"claimable\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwardTo\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"invalidateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRedirect\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward_integral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sealDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distro\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setRewardRedirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"user_checkpoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvexStakingWrapperFrax", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004c586e8b191d67aa79eb55e89f9a5cbd9bcbdc570000000000000000000000008952bfd1ba716cb7bdc553d503b068f4681c5808", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}