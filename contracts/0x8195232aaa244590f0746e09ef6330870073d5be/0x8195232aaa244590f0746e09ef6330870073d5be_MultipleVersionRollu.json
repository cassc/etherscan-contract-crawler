{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/L1/rollup/MultipleVersionRollupVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.16;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IScrollChain} from \\\"./IScrollChain.sol\\\";\\nimport {IRollupVerifier} from \\\"../../libraries/verifier/IRollupVerifier.sol\\\";\\nimport {IZkEvmVerifier} from \\\"../../libraries/verifier/IZkEvmVerifier.sol\\\";\\n\\ncontract MultipleVersionRollupVerifier is IRollupVerifier, Ownable {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the address of verifier is updated.\\n    /// @param startBatchIndex The start batch index when the verifier will be used.\\n    /// @param verifier The address of new verifier.\\n    event UpdateVerifier(uint256 startBatchIndex, address verifier);\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct Verifier {\\n        // The start batch index for the verifier.\\n        uint64 startBatchIndex;\\n        // The address of zkevm verifier.\\n        address verifier;\\n    }\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /// @notice The list of legacy zkevm verifier, sorted by batchIndex in increasing order.\\n    Verifier[] public legacyVerifiers;\\n\\n    /// @notice The lastest used zkevm verifier.\\n    Verifier public latestVerifier;\\n\\n    /// @notice The address of ScrollChain contract.\\n    address public scrollChain;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    constructor(address _verifier) {\\n        require(_verifier != address(0), \\\"zero verifier address\\\");\\n\\n        latestVerifier.verifier = _verifier;\\n    }\\n\\n    function initialize(address _scrollChain) external onlyOwner {\\n        require(scrollChain == address(0), \\\"initialized\\\");\\n\\n        scrollChain = _scrollChain;\\n    }\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the number of legacy verifiers.\\n    function legacyVerifiersLength() external view returns (uint256) {\\n        return legacyVerifiers.length;\\n    }\\n\\n    /// @notice Compute the verifier should be used for specific batch.\\n    /// @param _batchIndex The batch index to query.\\n    function getVerifier(uint256 _batchIndex) public view returns (address) {\\n        // Normally, we will use the latest verifier.\\n        Verifier memory _verifier = latestVerifier;\\n\\n        if (_verifier.startBatchIndex > _batchIndex) {\\n            uint256 _length = legacyVerifiers.length;\\n            // In most case, only last few verifier will be used by `ScrollChain`.\\n            // So, we use linear search instead of binary search.\\n            unchecked {\\n                for (uint256 i = _length; i > 0; --i) {\\n                    _verifier = legacyVerifiers[i - 1];\\n                    if (_verifier.startBatchIndex <= _batchIndex) break;\\n                }\\n            }\\n        }\\n\\n        return _verifier.verifier;\\n    }\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @inheritdoc IRollupVerifier\\n    function verifyAggregateProof(\\n        uint256 _batchIndex,\\n        bytes calldata _aggrProof,\\n        bytes32 _publicInputHash\\n    ) external view override {\\n        address _verifier = getVerifier(_batchIndex);\\n\\n        IZkEvmVerifier(_verifier).verify(_aggrProof, _publicInputHash);\\n    }\\n\\n    /************************\\n     * Restricted Functions *\\n     ************************/\\n\\n    /// @notice Update the address of zkevm verifier.\\n    /// @param _startBatchIndex The start batch index when the verifier will be used.\\n    /// @param _verifier The address of new verifier.\\n    function updateVerifier(uint64 _startBatchIndex, address _verifier) external onlyOwner {\\n        require(_startBatchIndex > IScrollChain(scrollChain).lastFinalizedBatchIndex(), \\\"start batch index finalized\\\");\\n\\n        Verifier memory _latestVerifier = latestVerifier;\\n        require(_startBatchIndex >= _latestVerifier.startBatchIndex, \\\"start batch index too small\\\");\\n        require(_verifier != address(0), \\\"zero verifier address\\\");\\n\\n        if (_latestVerifier.startBatchIndex < _startBatchIndex) {\\n            legacyVerifiers.push(_latestVerifier);\\n            _latestVerifier.startBatchIndex = _startBatchIndex;\\n        }\\n        _latestVerifier.verifier = _verifier;\\n\\n        latestVerifier = _latestVerifier;\\n\\n        emit UpdateVerifier(_startBatchIndex, _verifier);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/L1/rollup/IScrollChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScrollChain {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when a new batch is committed.\\n    /// @param batchIndex The index of the batch.\\n    /// @param batchHash The hash of the batch.\\n    event CommitBatch(uint256 indexed batchIndex, bytes32 indexed batchHash);\\n\\n    /// @notice revert a pending batch.\\n    /// @param batchIndex The index of the batch.\\n    /// @param batchHash The hash of the batch\\n    event RevertBatch(uint256 indexed batchIndex, bytes32 indexed batchHash);\\n\\n    /// @notice Emitted when a batch is finalized.\\n    /// @param batchIndex The index of the batch.\\n    /// @param batchHash The hash of the batch\\n    /// @param stateRoot The state root on layer 2 after this batch.\\n    /// @param withdrawRoot The merkle root on layer2 after this batch.\\n    event FinalizeBatch(uint256 indexed batchIndex, bytes32 indexed batchHash, bytes32 stateRoot, bytes32 withdrawRoot);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice The latest finalized batch index.\\n    function lastFinalizedBatchIndex() external view returns (uint256);\\n\\n    /// @notice Return the batch hash of a committed batch.\\n    /// @param batchIndex The index of the batch.\\n    function committedBatches(uint256 batchIndex) external view returns (bytes32);\\n\\n    /// @notice Return the state root of a committed batch.\\n    /// @param batchIndex The index of the batch.\\n    function finalizedStateRoots(uint256 batchIndex) external view returns (bytes32);\\n\\n    /// @notice Return the message root of a committed batch.\\n    /// @param batchIndex The index of the batch.\\n    function withdrawRoots(uint256 batchIndex) external view returns (bytes32);\\n\\n    /// @notice Return whether the batch is finalized by batch index.\\n    /// @param batchIndex The index of the batch.\\n    function isBatchFinalized(uint256 batchIndex) external view returns (bool);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Commit a batch of transactions on layer 1.\\n    ///\\n    /// @param version The version of current batch.\\n    /// @param parentBatchHeader The header of parent batch, see the comments of `BatchHeaderV0Codec`.\\n    /// @param chunks The list of encoded chunks, see the comments of `ChunkCodec`.\\n    /// @param skippedL1MessageBitmap The bitmap indicates whether each L1 message is skipped or not.\\n    function commitBatch(\\n        uint8 version,\\n        bytes calldata parentBatchHeader,\\n        bytes[] memory chunks,\\n        bytes calldata skippedL1MessageBitmap\\n    ) external;\\n\\n    /// @notice Revert a pending batch.\\n    /// @dev one can only revert unfinalized batches.\\n    /// @param batchHeader The header of current batch, see the encoding in comments of `commitBatch`.\\n    /// @param count The number of subsequent batches to revert, including current batch.\\n    function revertBatch(bytes calldata batchHeader, uint256 count) external;\\n\\n    /// @notice Finalize a committed batch on layer 1.\\n    /// @param batchHeader The header of current batch, see the encoding in comments of `commitBatch.\\n    /// @param prevStateRoot The state root of parent batch.\\n    /// @param postStateRoot The state root of current batch.\\n    /// @param withdrawRoot The withdraw trie root of current batch.\\n    /// @param aggrProof The aggregation proof for current batch.\\n    function finalizeBatchWithProof(\\n        bytes calldata batchHeader,\\n        bytes32 prevStateRoot,\\n        bytes32 postStateRoot,\\n        bytes32 withdrawRoot,\\n        bytes calldata aggrProof\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/verifier/IRollupVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IRollupVerifier {\\n    /// @notice Verify aggregate zk proof.\\n    /// @param batchIndex The batch index to verify.\\n    /// @param aggrProof The aggregated proof.\\n    /// @param publicInputHash The public input hash.\\n    function verifyAggregateProof(\\n        uint256 batchIndex,\\n        bytes calldata aggrProof,\\n        bytes32 publicInputHash\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"src/libraries/verifier/IZkEvmVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IZkEvmVerifier {\\n    /// @notice Verify aggregate zk proof.\\n    /// @param aggrProof The aggregated proof.\\n    /// @param publicInputHash The public input hash.\\n    function verify(bytes calldata aggrProof, bytes32 publicInputHash) external view;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBatchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"UpdateVerifier\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"}],\"name\":\"getVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scrollChain\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVerifier\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startBatchIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"legacyVerifiers\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startBatchIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyVerifiersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scrollChain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_startBatchIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_aggrProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_publicInputHash\",\"type\":\"bytes32\"}],\"name\":\"verifyAggregateProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultipleVersionRollupVerifier", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000017407f764ff6ec002830e024a0dfd4842978c4a2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}