{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SkullNBananasGadgetsFreeMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface ISkullNBananasGadgets {\\n    function ownerMintForAddress(\\n        address _recipientAccount,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n}\\n\\ninterface ISkullNBananasCollection {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\\ncontract SkullNBananasGadgetsFreeMint is Ownable {\\n    mapping(address => uint16) public addressMapping;\\n    mapping(address => bool) public hasClaimedFreeGadget;\\n\\n    uint256 public freeGadgetId;\\n\\n    ISkullNBananasGadgets public gadgetsContractAddress;\\n    ISkullNBananasCollection public collectionContractAddress;\\n\\n    address[] private addresses = [\\n        0x17e02a5DB177725505820e3a5C33f3570c5C3310,\\n        0xB0f318E42d967808c1669571d61fd6e21ADB1176,\\n        0x2D7a74B2D7e2e37Ddd81b44b821cBeB581cf26c9,\\n        0xBdaFf5d154D80cAC102Ec38239719b172bB781A0,\\n        0x22b6a6f39c07c689fa5C1C71E0769483e8186dC8,\\n        0xF568a3b53E283d25cbca49Ec600F7F80af5fE625,\\n        0xe9DbfDc7d19a365623cC57395B3953345F33606A,\\n        0xA68386D3592d425F08876C1D850100a42e44554B,\\n        0xDf6c0834cEb76c025e0Fb1BB6C41F9110C37b4f1,\\n        0x697fFe382b9C01Eb6C5A76550a50860F10DB144A,\\n        0x720EA94bf57228a9F7C17639c3981A5F300d1098,\\n        0xfd87EEc11F467971f953a085933a07d8FBC247A3,\\n        0x03827309eF4f31d0BBAc02eCB9c6EC0DBd819Fa4,\\n        0x29e546a6969Db7a5637f05011fbc8eB84c41cBa1,\\n        0xac635694Ef9E1da5dC263a30FCED0B675d6bB3d5,\\n        0xCA7F0662A8cfe766Bba982B31cc5DdA5A0f1a655,\\n        0xf20C9b18e1b8bBC063da9Ef18005D5760CBF1876,\\n        0xc7125eF179F6e6b29EA461F20AD415E54D250211,\\n        0xeaFc446672E9a011e32e2501051a6f3111dA4b49,\\n        0xFAdb2A005Cf95F49fBF9B2180DaF3545cF32D7f6,\\n        0x2c35dFBAfC30F55662e91b6296f9Cf47238c81d3,\\n        0x44a584B709eCD27369a7484d48bF64eae2FafE85,\\n        0x3455F665e8df4ed84892f56bDb0BBE974aD96128,\\n        0xE36bCAd5Cc643D9e5f410F261e51623e900D58a8,\\n        0x19DA9096939eAf1a5c5e80196dbdbA8e1dc9fB3D,\\n        0x561b33f35D354BcA5E0BEB2bf56ea0C6bE5eBe45,\\n        0x3768D5460a9341833C63Af1f51c0061158008c4E,\\n        0x9EaD143bd86A94E8eBb2651CC128DE089EC6d513,\\n        0xdAb1a1854214684acE522439684a145E62505233,\\n        0x9E0daFe2BDa9B9645d5a17EbE02B22306A1c0228,\\n        0xbaA552EC41FF2417fb8D0531AAF2E92b4780aee5,\\n        0x4dBd057aEa218F498A9B660f6cfdf6CE86Bf8De7,\\n        0x9450F6dDfb0D9BEde4afF3434274711E97fAb325,\\n        0x56564af6d67D112f26E50Ca3F6986e2420Fd7BDE,\\n        0x280D9f1e40DB2B727Cb08018276a6f03541a22f2,\\n        0x69395Bf888e9E651b9Df34F3CC20cBa8a78fF3D6,\\n        0xBAa6Ce50594Ab1B4929118FDe5Bf566BC10426e5,\\n        0x622581b700469599e9F03d4d4c1fD506010b94fe,\\n        0xA48d7df1Cc2BD4C08DEF0F95eb53Cb1508Be12Cb,\\n        0x3EB5F7acd0dCa6363F06dA06F22E1ad95662685B,\\n        0x2F2d413F0de14B1CCB8B9EdCFe87D95e061EE673,\\n        0xa01ff8E3d13b42e05F506876d58DBFc119f75EB1,\\n        0x872CaB911c71242eC5461cb7F0AeB9560996baB3,\\n        0x98916025D2e79c71D0221432976A7FDB8B6402d6,\\n        0x974687B24cd5A21A536F7E12E843846fe71808D1,\\n        0x267428F735c0839a2F318c04d177da987cA8Ed6C,\\n        0xd34129144bcFEA91e240d11c80fdBAa848B9458B,\\n        0xefB2607cA778A43D7c0ae46A91AAdD7795279bb4,\\n        0x3A94BdfC04dbdC35110b87D27C7F6B5568be4676,\\n        0xa8C10eC49dF815e73A881ABbE0Aa7b210f39E2Df,\\n        0xD7e2D7749Ee320aAB2b5DC400CE8ab1E3c20fF3d,\\n        0x10E10F098F7A57756565a9ae4e20CE4da801b803,\\n        0xf826Fc01bf3e5C472105A7811E27973B555A1139,\\n        0x0aA03f65C0f2C4e036759afDbafCA3dA825fa708,\\n        0x68b02672410AeCC65eb1FFD3fF4Aa3578461EA3d,\\n        0xC4b6fC9678b7097808041BEBf236252300784686,\\n        0x89796A5cDbB99c2FBEF2C3E313CcB30c0410B947,\\n        0xF8159FF65ef39E242dE7591c90E21c19Ac5276fB,\\n        0x1E06601411b553E3C69e49E754286246Fd469a73,\\n        0x7730bDE0cE4d9970a0dE3E83248BbDa1d5a3E7E8,\\n        0xF130823618b6764a9b054A452880d90D027CEe7E,\\n        0x8905EB929C323763Db494cdfCd12D84bdd0a7835,\\n        0x0452a84Fc3197A3E8E6900EF561c621D397D3be5,\\n        0x6E1FE8C0D1D1259B09111D75bE7539eC10615Ab8,\\n        0x1cA89DD09eB8FA5eAC5a38b645d64434a47162A8,\\n        0x18b31Cdbc5C3A5782d8828dB9e4596aC809736D6\\n    ];\\n\\n    uint16[] private amounts = [\\n        1,\\n        1,\\n        2,\\n        1,\\n        2,\\n        1,\\n        2,\\n        4,\\n        1,\\n        2,\\n        1,\\n        14,\\n        6,\\n        2,\\n        1,\\n        2,\\n        31,\\n        43,\\n        1,\\n        1,\\n        3,\\n        1,\\n        3,\\n        41,\\n        2,\\n        1,\\n        3,\\n        7,\\n        81,\\n        1,\\n        1,\\n        2,\\n        2,\\n        1,\\n        1,\\n        1,\\n        2,\\n        1,\\n        1,\\n        1,\\n        1,\\n        1,\\n        1,\\n        2,\\n        1,\\n        1,\\n        3,\\n        1,\\n        1,\\n        71,\\n        1,\\n        1,\\n        1,\\n        1,\\n        1,\\n        2,\\n        6,\\n        2,\\n        1,\\n        5,\\n        10,\\n        10,\\n        1,\\n        14,\\n        2,\\n        1\\n    ];\\n\\n    constructor() {\\n        gadgetsContractAddress = ISkullNBananasGadgets(\\n            0x3C0412D5eAB01F169C8Cc5bEDDB97c482c5B53d9\\n        );\\n        collectionContractAddress = ISkullNBananasCollection(\\n            0x9a9813752Cf595e5013CA39c1aaa3f5458a30dC5\\n        );\\n        freeGadgetId = 1048;\\n        addAddress(addresses, amounts);\\n    }\\n\\n    function setGadgetsContractAddress(\\n        ISkullNBananasGadgets _contractAddress\\n    ) public onlyOwner {\\n        gadgetsContractAddress = _contractAddress;\\n    }\\n\\n    function setCollectionContractAddress(\\n        ISkullNBananasCollection _contractAddress\\n    ) public onlyOwner {\\n        collectionContractAddress = _contractAddress;\\n    }\\n\\n    function setFreeMintId(uint256 _id) public onlyOwner {\\n        freeGadgetId = _id;\\n    }\\n\\n    function addAddress(\\n        address[] memory _addresses,\\n        uint16[] memory _nftToSend\\n    ) public onlyOwner {\\n        require(\\n            _addresses.length == _nftToSend.length,\\n            \\\"Addresses and NFTs to send must be the same length\\\"\\n        );\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            addressMapping[_addresses[i]] = _nftToSend[i];\\n        }\\n    }\\n\\n    function gadgetsFreeMint(uint256[] memory _id) public {\\n        uint16 nftToSend = addressMapping[msg.sender];\\n        require(nftToSend > 0, \\\"No NFT to redeem\\\");\\n        require(_id.length <= nftToSend, \\\"You can't redeem this many items\\\");\\n\\n        for (uint i = 0; i < _id.length; i++) {\\n            gadgetsContractAddress.ownerMintForAddress(msg.sender, _id[i], 1);\\n        }\\n\\n        addressMapping[msg.sender] -= uint16(_id.length);\\n    }\\n\\n    function cupFreeMint() public {\\n        require(\\n            !hasClaimedFreeGadget[msg.sender],\\n            \\\"Free gadget already claimed\\\"\\n        );\\n        require(\\n            collectionContractAddress.balanceOf(msg.sender) > 0,\\n            \\\"Can't redeem any free gadget\\\"\\n        );\\n\\n        gadgetsContractAddress.ownerMintForAddress(msg.sender, freeGadgetId, 1);\\n\\n        hasClaimedFreeGadget[msg.sender] = true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_nftToSend\",\"type\":\"uint16[]\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMapping\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionContractAddress\",\"outputs\":[{\"internalType\":\"contract ISkullNBananasCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cupFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeGadgetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gadgetsContractAddress\",\"outputs\":[{\"internalType\":\"contract ISkullNBananasGadgets\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"}],\"name\":\"gadgetsFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimedFreeGadget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISkullNBananasCollection\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setCollectionContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setFreeMintId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISkullNBananasGadgets\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setGadgetsContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SkullNBananasGadgetsFreeMint", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}