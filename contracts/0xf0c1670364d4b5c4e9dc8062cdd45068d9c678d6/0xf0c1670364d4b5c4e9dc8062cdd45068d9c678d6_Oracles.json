{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Oracles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./presets/OwnablePausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IRewardEthToken.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IOracles.sol\\\";\\nimport \\\"./interfaces/IMerkleDistributor.sol\\\";\\nimport \\\"./interfaces/IPoolValidators.sol\\\";\\n\\n/**\\n * @title Oracles\\n *\\n * @dev Oracles contract stores accounts responsible for submitting or update values based on the off-chain data.\\n * The threshold of inputs from different oracles is required to submit the data.\\n */\\ncontract Oracles is IOracles, OwnablePausableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant ORACLE_ROLE = keccak256(\\\"ORACLE_ROLE\\\");\\n\\n    // @dev Rewards nonce is used to protect from submitting the same rewards vote several times.\\n    CountersUpgradeable.Counter private rewardsNonce;\\n\\n    // @dev Validators nonce is used to protect from submitting the same validator vote several times.\\n    CountersUpgradeable.Counter private validatorsNonce;\\n\\n    // @dev Address of the RewardEthToken contract.\\n    IRewardEthToken private rewardEthToken;\\n\\n    // @dev Address of the Pool contract.\\n    IPool private pool;\\n\\n    // @dev Address of the PoolValidators contract.\\n    IPoolValidators private poolValidators;\\n\\n    // @dev Address of the MerkleDistributor contract.\\n    IMerkleDistributor private merkleDistributor;\\n\\n    /**\\n    * @dev Modifier for checking whether the caller is an oracle.\\n    */\\n    modifier onlyOracle() {\\n        require(hasRole(ORACLE_ROLE, msg.sender), \\\"Oracles: access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IOracles-currentRewardsNonce}.\\n     */\\n    function currentRewardsNonce() external override view returns (uint256) {\\n        return rewardsNonce.current();\\n    }\\n\\n    /**\\n     * @dev See {IOracles-isOracle}.\\n     */\\n    function isOracle(address account) external override view returns (bool) {\\n        return hasRole(ORACLE_ROLE, account);\\n    }\\n\\n    /**\\n     * @dev See {IOracles-addOracle}.\\n     */\\n    function addOracle(address account) external override {\\n        require(account != address(0), \\\"Oracles: invalid oracle address\\\");\\n        grantRole(ORACLE_ROLE, account);\\n        emit OracleAdded(account);\\n    }\\n\\n    /**\\n     * @dev See {IOracles-removeOracle}.\\n     */\\n    function removeOracle(address account) external override {\\n        revokeRole(ORACLE_ROLE, account);\\n        emit OracleRemoved(account);\\n    }\\n\\n    /**\\n     * @dev See {IOracles-isMerkleRootVoting}.\\n     */\\n    function isMerkleRootVoting() public override view returns (bool) {\\n        uint256 lastRewardBlockNumber = rewardEthToken.lastUpdateBlockNumber();\\n        return merkleDistributor.lastUpdateBlockNumber() < lastRewardBlockNumber && lastRewardBlockNumber != block.number;\\n    }\\n\\n    /**\\n    * @dev Function for checking whether number of signatures is enough to update the value.\\n    * @param signaturesCount - number of signatures.\\n    */\\n    function isEnoughSignatures(uint256 signaturesCount) internal view returns (bool) {\\n        uint256 totalOracles = getRoleMemberCount(ORACLE_ROLE);\\n        return totalOracles >= signaturesCount && signaturesCount.mul(3) > totalOracles.mul(2);\\n    }\\n\\n    /**\\n     * @dev See {IOracles-submitMerkleRoot}.\\n     */\\n    function submitMerkleRoot(\\n        bytes32 merkleRoot,\\n        string calldata merkleProofs,\\n        bytes[] calldata signatures\\n    )\\n        external override onlyOracle whenNotPaused\\n    {\\n        require(isMerkleRootVoting(), \\\"Oracles: too early\\\");\\n        require(isEnoughSignatures(signatures.length), \\\"Oracles: invalid number of signatures\\\");\\n\\n        // calculate candidate ID hash\\n        uint256 nonce = rewardsNonce.current();\\n        bytes32 candidateId = ECDSAUpgradeable.toEthSignedMessageHash(\\n            keccak256(abi.encode(nonce, merkleProofs, merkleRoot))\\n        );\\n\\n        // check signatures and calculate number of submitted oracle votes\\n        address[] memory signedOracles = new address[](signatures.length);\\n        for (uint256 i = 0; i < signatures.length; i++) {\\n            bytes memory signature = signatures[i];\\n            address signer = ECDSAUpgradeable.recover(candidateId, signature);\\n            require(hasRole(ORACLE_ROLE, signer), \\\"Oracles: invalid signer\\\");\\n\\n            for (uint256 j = 0; j < i; j++) {\\n                require(signedOracles[j] != signer, \\\"Oracles: repeated signature\\\");\\n            }\\n            signedOracles[i] = signer;\\n            emit MerkleRootVoteSubmitted(msg.sender, signer, nonce, merkleRoot, merkleProofs);\\n        }\\n\\n        // increment nonce for future signatures\\n        rewardsNonce.increment();\\n\\n        // update merkle root\\n        merkleDistributor.setMerkleRoot(merkleRoot, merkleProofs);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary CountersUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/presets/OwnablePausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IOwnablePausable.sol\\\";\\n\\n/**\\n * @title OwnablePausableUpgradeable\\n *\\n * @dev Bundles Access Control, Pausable and Upgradeable contracts in one.\\n *\\n */\\nabstract contract OwnablePausableUpgradeable is IOwnablePausable, PausableUpgradeable, AccessControlUpgradeable {\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n    * @dev Modifier for checking whether the caller is an admin.\\n    */\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"OwnablePausable: access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier for checking whether the caller is a pauser.\\n    */\\n    modifier onlyPauser() {\\n        require(hasRole(PAUSER_ROLE, msg.sender), \\\"OwnablePausable: access denied\\\");\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __OwnablePausableUpgradeable_init(address _admin) internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n        __OwnablePausableUpgradeable_init_unchained(_admin);\\n    }\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `PAUSER_ROLE` to the admin account.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __OwnablePausableUpgradeable_init_unchained(address _admin) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(PAUSER_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @dev See {IOwnablePausable-isAdmin}.\\n     */\\n    function isAdmin(address _account) external override view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev See {IOwnablePausable-addAdmin}.\\n     */\\n    function addAdmin(address _account) external override {\\n        grantRole(DEFAULT_ADMIN_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev See {IOwnablePausable-removeAdmin}.\\n     */\\n    function removeAdmin(address _account) external override {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev See {IOwnablePausable-isPauser}.\\n     */\\n    function isPauser(address _account) external override view returns (bool) {\\n        return hasRole(PAUSER_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev See {IOwnablePausable-addPauser}.\\n     */\\n    function addPauser(address _account) external override {\\n        grantRole(PAUSER_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev See {IOwnablePausable-removePauser}.\\n     */\\n    function removePauser(address _account) external override {\\n        revokeRole(PAUSER_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev See {IOwnablePausable-pause}.\\n     */\\n    function pause() external override onlyPauser {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev See {IOwnablePausable-unpause}.\\n     */\\n    function unpause() external override onlyPauser {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardEthToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IFeesEscrow.sol\\\";\\n\\n/**\\n * @dev Interface of the RewardEthToken contract.\\n */\\ninterface IRewardEthToken is IERC20Upgradeable {\\n    /**\\n    * @dev Structure for storing information about user reward checkpoint.\\n    * @param rewardPerToken - user reward per token.\\n    * @param reward - user reward checkpoint.\\n    */\\n    struct Checkpoint {\\n        uint128 reward;\\n        uint128 rewardPerToken;\\n    }\\n\\n    /**\\n    * @dev Event for tracking updated protocol fee recipient.\\n    * @param recipient - address of the new fee recipient.\\n    */\\n    event ProtocolFeeRecipientUpdated(address recipient);\\n\\n    /**\\n    * @dev Event for tracking updated protocol fee.\\n    * @param protocolFee - new protocol fee.\\n    */\\n    event ProtocolFeeUpdated(uint256 protocolFee);\\n\\n    /**\\n    * @dev Event for tracking whether rewards distribution through merkle distributor is enabled/disabled.\\n    * @param account - address of the account.\\n    * @param isDisabled - whether rewards distribution is disabled.\\n    */\\n    event RewardsToggled(address indexed account, bool isDisabled);\\n\\n    /**\\n    * @dev Event for tracking rewards update by oracles.\\n    * @param periodRewards - rewards since the last update.\\n    * @param totalRewards - total amount of rewards.\\n    * @param rewardPerToken - calculated reward per token for account reward calculation.\\n    * @param distributorReward - distributor reward.\\n    * @param protocolReward - protocol reward.\\n    */\\n    event RewardsUpdated(\\n        uint256 periodRewards,\\n        uint256 totalRewards,\\n        uint256 rewardPerToken,\\n        uint256 distributorReward,\\n        uint256 protocolReward\\n    );\\n\\n    /**\\n    * @dev Function for getting the address of the merkle distributor.\\n    */\\n    function merkleDistributor() external view returns (address);\\n\\n    /**\\n    * @dev Function for getting the address of the protocol fee recipient.\\n    */\\n    function protocolFeeRecipient() external view returns (address);\\n\\n    /**\\n    * @dev Function for getting the address of the vault.\\n    */\\n    function vault() external view returns (address);\\n\\n    /**\\n    * @dev Function for getting the total assets.\\n    */\\n    function totalAssets() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for getting the total penalty.\\n    */\\n    function totalPenalty() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for changing the protocol fee recipient's address.\\n    * @param recipient - new protocol fee recipient's address.\\n    */\\n    function setProtocolFeeRecipient(address recipient) external;\\n\\n    /**\\n    * @dev Function for getting protocol fee. The percentage fee users pay from their reward for using the pool service.\\n    */\\n    function protocolFee() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for changing the protocol fee.\\n    * @param _protocolFee - new protocol fee. Must be less than 10000 (100.00%).\\n    */\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    /**\\n    * @dev Function for retrieving the total rewards amount.\\n    */\\n    function totalRewards() external view returns (uint128);\\n\\n    /**\\n    * @dev Function for retrieving the last total rewards update block number.\\n    */\\n    function lastUpdateBlockNumber() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for retrieving current reward per token used for account reward calculation.\\n    */\\n    function rewardPerToken() external view returns (uint128);\\n\\n    /**\\n    * @dev Function for setting whether rewards are disabled for the account.\\n    * Can only be called by the `StakedEthToken` contract.\\n    * @param account - address of the account to disable rewards for.\\n    * @param isDisabled - whether the rewards will be disabled.\\n    */\\n    function setRewardsDisabled(address account, bool isDisabled) external;\\n\\n    /**\\n    * @dev Function for retrieving account's current checkpoint.\\n    * @param account - address of the account to retrieve the checkpoint for.\\n    */\\n    function checkpoints(address account) external view returns (uint128, uint128);\\n\\n    /**\\n    * @dev Function for checking whether account's reward will be distributed through the merkle distributor.\\n    * @param account - address of the account.\\n    */\\n    function rewardsDisabled(address account) external view returns (bool);\\n\\n    /**\\n    * @dev Function for updating account's reward checkpoint.\\n    * @param account - address of the account to update the reward checkpoint for.\\n    */\\n    function updateRewardCheckpoint(address account) external returns (bool);\\n\\n    /**\\n    * @dev Function for updating reward checkpoints for two accounts simultaneously (for gas savings).\\n    * @param account1 - address of the first account to update the reward checkpoint for.\\n    * @param account2 - address of the second account to update the reward checkpoint for.\\n    */\\n    function updateRewardCheckpoints(address account1, address account2) external returns (bool, bool);\\n\\n    /**\\n    * @dev Function for updating validators total rewards.\\n    * Can only be called by Vault contract.\\n    * @param rewardsDelta - the total rewards earned or penalties received.\\n    */\\n    function updateTotalRewards(int256 rewardsDelta) external;\\n\\n    /**\\n    * @dev Function for migrating to the StakeWise V3 Vault.\\n    * @param receiver - address of the account the tokens will be assigned to.\\n    * @param principal - amount of sETH2 tokens to migrate.\\n    * @param reward - amount of rETH2 tokens to migrate.\\n    */\\n    function migrate(address receiver, uint256 principal, uint256 reward) external;\\n\\n    /**\\n    * @dev Function for claiming rETH2 from the merkle distribution.\\n    * Can only be called by MerkleDistributor contract.\\n    * @param account - address of the account the tokens will be assigned to.\\n    * @param amount - amount of tokens to assign to the account.\\n    */\\n    function claim(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"./IDepositContract.sol\\\";\\n\\n/**\\n * @dev Interface of the Pool contract.\\n */\\ninterface IPool {\\n    /**\\n    * @dev Event for tracking registered validators.\\n    * @param publicKey - validator public key.\\n    * @param operator - address of the validator operator.\\n    */\\n    event ValidatorRegistered(bytes publicKey, address operator);\\n\\n    /**\\n    * @dev Event for tracking scheduled deposit activation.\\n    * @param sender - address of the deposit sender.\\n    * @param validatorIndex - index of the activated validator.\\n    * @param value - deposit amount to be activated.\\n    */\\n    event ActivationScheduled(address indexed sender, uint256 validatorIndex, uint256 value);\\n\\n    /**\\n    * @dev Event for tracking activated deposits.\\n    * @param account - account the deposit was activated for.\\n    * @param validatorIndex - index of the activated validator.\\n    * @param value - amount activated.\\n    * @param sender - address of the transaction sender.\\n    */\\n    event Activated(address indexed account, uint256 validatorIndex, uint256 value, address indexed sender);\\n\\n    /**\\n    * @dev Event for tracking activated validators updates.\\n    * @param activatedValidators - new total amount of activated validators.\\n    * @param sender - address of the transaction sender.\\n    */\\n    event ActivatedValidatorsUpdated(uint256 activatedValidators, address sender);\\n\\n    /**\\n    * @dev Event for tracking updates to the minimal deposit amount considered for the activation period.\\n    * @param minActivatingDeposit - new minimal deposit amount considered for the activation.\\n    * @param sender - address of the transaction sender.\\n    */\\n    event MinActivatingDepositUpdated(uint256 minActivatingDeposit, address sender);\\n\\n    /**\\n    * @dev Event for tracking pending validators limit.\\n    * When it's exceeded, the deposits will be set for the activation.\\n    * @param pendingValidatorsLimit - pending validators percent limit.\\n    * @param sender - address of the transaction sender.\\n    */\\n    event PendingValidatorsLimitUpdated(uint256 pendingValidatorsLimit, address sender);\\n\\n    /**\\n    * @dev Event for tracking added deposits with partner.\\n    * @param partner - address of the partner.\\n    * @param amount - the amount added.\\n    */\\n    event StakedWithPartner(address indexed partner, uint256 amount);\\n\\n    /**\\n    * @dev Event for tracking added deposits with referrer.\\n    * @param referrer - address of the referrer.\\n    * @param amount - the amount added.\\n    */\\n    event StakedWithReferrer(address indexed referrer, uint256 amount);\\n\\n    /**\\n    * @dev Returns PoolEscrow contract address.\\n    */\\n    function poolEscrow() external view returns (address);\\n\\n    /**\\n    * @dev Function for receiving native tokens without minting sETH.\\n    */\\n    function receiveFees() external payable;\\n\\n    /**\\n    * @dev Function for transferring all ETH accumulated in Pool contract to PoolEscrow contract.\\n    */\\n    function transferToPoolEscrow() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the Oracles contract.\\n */\\ninterface IOracles {\\n    /**\\n    * @dev Event for tracking oracle merkle root votes.\\n    * @param sender - address of the transaction sender.\\n    * @param oracle - address of the account which submitted vote.\\n    * @param nonce - current nonce.\\n    * @param merkleRoot - new merkle root.\\n    * @param merkleProofs - link to the merkle proofs.\\n    */\\n    event MerkleRootVoteSubmitted(\\n        address indexed sender,\\n        address indexed oracle,\\n        uint256 nonce,\\n        bytes32 indexed merkleRoot,\\n        string merkleProofs\\n    );\\n\\n    /**\\n    * @dev Event for tracking new or updates oracles.\\n    * @param oracle - address of new or updated oracle.\\n    */\\n    event OracleAdded(address indexed oracle);\\n\\n    /**\\n    * @dev Event for tracking removed oracles.\\n    * @param oracle - address of removed oracle.\\n    */\\n    event OracleRemoved(address indexed oracle);\\n\\n    /**\\n    * @dev Function for checking whether an account has an oracle role.\\n    * @param account - account to check.\\n    */\\n    function isOracle(address account) external view returns (bool);\\n\\n    /**\\n    * @dev Function for checking whether the oracles are currently voting for new merkle root.\\n    */\\n    function isMerkleRootVoting() external view returns (bool);\\n\\n    /**\\n    * @dev Function for retrieving current rewards nonce.\\n    */\\n    function currentRewardsNonce() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for adding an oracle role to the account.\\n    * Can only be called by an account with an admin role.\\n    * @param account - account to assign an oracle role to.\\n    */\\n    function addOracle(address account) external;\\n\\n    /**\\n    * @dev Function for removing an oracle role from the account.\\n    * Can only be called by an account with an admin role.\\n    * @param account - account to remove an oracle role from.\\n    */\\n    function removeOracle(address account) external;\\n\\n    /**\\n    * @dev Function for submitting new merkle root.\\n    * The quorum of signatures over the same data is required to submit the new value.\\n    * @param merkleRoot - hash of the new merkle root.\\n    * @param merkleProofs - link to the merkle proofs.\\n    * @param signatures - oracles' signatures.\\n    */\\n    function submitMerkleRoot(\\n        bytes32 merkleRoot,\\n        string calldata merkleProofs,\\n        bytes[] calldata signatures\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMerkleDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IOracles.sol\\\";\\n\\n/**\\n * @dev Interface of the MerkleDistributor contract.\\n * Allows anyone to claim a token if they exist in a merkle root.\\n */\\ninterface IMerkleDistributor {\\n    /**\\n    * @dev Event for tracking merkle root updates.\\n    * @param sender - address of the new transaction sender.\\n    * @param merkleRoot - new merkle root hash.\\n    * @param merkleProofs - link to the merkle proofs.\\n    */\\n    event MerkleRootUpdated(\\n        address indexed sender,\\n        bytes32 indexed merkleRoot,\\n        string merkleProofs\\n    );\\n\\n    /**\\n    * @dev Event for tracking periodic tokens distributions.\\n    * @param from - address to transfer the tokens from.\\n    * @param token - address of the token.\\n    * @param beneficiary - address of the beneficiary, the allocation is added to.\\n    * @param amount - amount of tokens to distribute.\\n    * @param startBlock - start block of the tokens distribution.\\n    * @param endBlock - end block of the tokens distribution.\\n    */\\n    event PeriodicDistributionAdded(\\n        address indexed from,\\n        address indexed token,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    );\\n\\n    /**\\n    * @dev Event for tracking one time tokens distributions.\\n    * @param from - address to transfer the tokens from.\\n    * @param origin - predefined origin address to label the distribution.\\n    * @param token - address of the token.\\n    * @param amount - amount of tokens to distribute.\\n    * @param rewardsLink - link to the file where rewards are stored.\\n    */\\n    event OneTimeDistributionAdded(\\n        address indexed from,\\n        address indexed origin,\\n        address indexed token,\\n        uint256 amount,\\n        string rewardsLink\\n    );\\n\\n    /**\\n    * @dev Event for tracking tokens' claims.\\n    * @param account - the address of the user that has claimed the tokens.\\n    * @param index - the index of the user that has claimed the tokens.\\n    * @param tokens - list of token addresses the user got amounts in.\\n    * @param amounts - list of user token amounts.\\n    */\\n    event Claimed(address indexed account, uint256 index, address[] tokens, uint256[] amounts);\\n\\n    /**\\n    * @dev Function for getting the current merkle root.\\n    */\\n    function merkleRoot() external view returns (bytes32);\\n\\n    /**\\n    * @dev Function for getting the RewardEthToken contract address.\\n    */\\n    function rewardEthToken() external view returns (address);\\n\\n    /**\\n    * @dev Function for getting the Oracles contract address.\\n    */\\n    function oracles() external view returns (IOracles);\\n\\n    /**\\n    * @dev Function for retrieving the last total merkle root update block number.\\n    */\\n    function lastUpdateBlockNumber() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for upgrading the MerkleDistributor contract. The `initialize` function must be defined\\n    * if deploying contract for the first time that will initialize the state variables above.\\n    * @param _oracles - address of the Oracles contract.\\n    */\\n    function upgrade(address _oracles) external;\\n\\n    /**\\n    * @dev Function for checking the claimed bit map.\\n    * @param _merkleRoot - the merkle root hash.\\n    * @param _wordIndex - the word index of te bit map.\\n    */\\n    function claimedBitMap(bytes32 _merkleRoot, uint256 _wordIndex) external view returns (uint256);\\n\\n    /**\\n    * @dev Function for changing the merkle root. Can only be called by `Oracles` contract.\\n    * @param newMerkleRoot - new merkle root hash.\\n    * @param merkleProofs - URL to the merkle proofs.\\n    */\\n    function setMerkleRoot(bytes32 newMerkleRoot, string calldata merkleProofs) external;\\n\\n    /**\\n    * @dev Function for distributing tokens periodically for the number of blocks.\\n    * @param from - address of the account to transfer the tokens from.\\n    * @param token - address of the token.\\n    * @param beneficiary - address of the beneficiary.\\n    * @param amount - amount of tokens to distribute.\\n    * @param durationInBlocks - duration in blocks when the token distribution should be stopped.\\n    */\\n    function distributePeriodically(\\n        address from,\\n        address token,\\n        address beneficiary,\\n        uint256 amount,\\n        uint256 durationInBlocks\\n    ) external;\\n\\n    /**\\n    * @dev Function for distributing tokens one time.\\n    * @param from - address of the account to transfer the tokens from.\\n    * @param origin - predefined origin address to label the distribution.\\n    * @param token - address of the token.\\n    * @param amount - amount of tokens to distribute.\\n    * @param rewardsLink - link to the file where rewards for the accounts are stored.\\n    */\\n    function distributeOneTime(\\n        address from,\\n        address origin,\\n        address token,\\n        uint256 amount,\\n        string calldata rewardsLink\\n    ) external;\\n\\n    /**\\n    * @dev Function for checking whether the tokens were already claimed.\\n    * @param index - the index of the user that is part of the merkle root.\\n    */\\n    function isClaimed(uint256 index) external view returns (bool);\\n\\n    /**\\n    * @dev Function for claiming the given amount of tokens to the account address.\\n    * Reverts if the inputs are invalid or the oracles are currently updating the merkle root.\\n    * @param index - the index of the user that is part of the merkle root.\\n    * @param account - the address of the user that is part of the merkle root.\\n    * @param tokens - list of the token addresses.\\n    * @param amounts - list of token amounts.\\n    * @param merkleProof - an array of hashes to verify whether the user is part of the merkle root.\\n    */\\n    function claim(\\n        uint256 index,\\n        address account,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes32[] calldata merkleProof\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolValidators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the PoolValidators contract.\\n */\\ninterface IPoolValidators {\\n    /**\\n    * @dev Structure for storing operator data.\\n    * @param depositDataMerkleRoot - validators deposit data merkle root.\\n    * @param committed - defines whether operator has committed its readiness to host validators.\\n    */\\n    struct Operator {\\n        bytes32 depositDataMerkleRoot;\\n        bool committed;\\n    }\\n\\n    /**\\n    * @dev Structure for passing information about the validator deposit data.\\n    * @param operator - address of the operator.\\n    * @param withdrawalCredentials - withdrawal credentials used for generating the deposit data.\\n    * @param depositDataRoot - hash tree root of the deposit data, generated by the operator.\\n    * @param publicKey - BLS public key of the validator, generated by the operator.\\n    * @param signature - BLS signature of the validator, generated by the operator.\\n    */\\n    struct DepositData {\\n        address operator;\\n        bytes32 withdrawalCredentials;\\n        bytes32 depositDataRoot;\\n        bytes publicKey;\\n        bytes signature;\\n    }\\n\\n    /**\\n    * @dev Event for tracking new operators.\\n    * @param operator - address of the operator.\\n    * @param depositDataMerkleRoot - validators deposit data merkle root.\\n    * @param depositDataMerkleProofs - validators deposit data merkle proofs.\\n    */\\n    event OperatorAdded(\\n        address indexed operator,\\n        bytes32 indexed depositDataMerkleRoot,\\n        string depositDataMerkleProofs\\n    );\\n\\n    /**\\n    * @dev Event for tracking operator's commitments.\\n    * @param operator - address of the operator that expressed its readiness to host validators.\\n    */\\n    event OperatorCommitted(address indexed operator);\\n\\n    /**\\n    * @dev Event for tracking operators' removals.\\n    * @param sender - address of the transaction sender.\\n    * @param operator - address of the operator.\\n    */\\n    event OperatorRemoved(\\n        address indexed sender,\\n        address indexed operator\\n    );\\n\\n    /**\\n    * @dev Constructor for initializing the PoolValidators contract.\\n    * @param _admin - address of the contract admin.\\n    * @param _pool - address of the Pool contract.\\n    * @param _oracles - address of the Oracles contract.\\n    */\\n    function initialize(address _admin, address _pool, address _oracles) external;\\n\\n    /**\\n    * @dev Function for retrieving the operator.\\n    * @param _operator - address of the operator to retrieve the data for.\\n    */\\n    function getOperator(address _operator) external view returns (bytes32, bool);\\n\\n    /**\\n    * @dev Function for checking whether validator is registered.\\n    * @param validatorId - hash of the validator public key to receive the status for.\\n    */\\n    function isValidatorRegistered(bytes32 validatorId) external view returns (bool);\\n\\n    /**\\n    * @dev Function for adding new operator.\\n    * @param _operator - address of the operator to add or update.\\n    * @param depositDataMerkleRoot - validators deposit data merkle root.\\n    * @param depositDataMerkleProofs - validators deposit data merkle proofs.\\n    */\\n    function addOperator(\\n        address _operator,\\n        bytes32 depositDataMerkleRoot,\\n        string calldata depositDataMerkleProofs\\n    ) external;\\n\\n    /**\\n    * @dev Function for committing operator. Must be called by the operator address\\n    * specified through the `addOperator` function call.\\n    */\\n    function commitOperator() external;\\n\\n    /**\\n    * @dev Function for removing operator. Can be called either by operator or admin.\\n    * @param _operator - address of the operator to remove.\\n    */\\n    function removeOperator(address _operator) external;\\n\\n    /**\\n    * @dev Function for registering the validator.\\n    * @param depositData - deposit data of the validator.\\n    * @param merkleProof - an array of hashes to verify whether the deposit data is part of the merkle root.\\n    */\\n    function registerValidator(DepositData calldata depositData, bytes32[] calldata merkleProof) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnablePausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the OwnablePausableUpgradeable and OwnablePausable contracts.\\n */\\ninterface IOwnablePausable {\\n    /**\\n    * @dev Function for checking whether an account has an admin role.\\n    * @param _account - account to check.\\n    */\\n    function isAdmin(address _account) external view returns (bool);\\n\\n    /**\\n    * @dev Function for assigning an admin role to the account.\\n    * Can only be called by an account with an admin role.\\n    * @param _account - account to assign an admin role to.\\n    */\\n    function addAdmin(address _account) external;\\n\\n    /**\\n    * @dev Function for removing an admin role from the account.\\n    * Can only be called by an account with an admin role.\\n    * @param _account - account to remove an admin role from.\\n    */\\n    function removeAdmin(address _account) external;\\n\\n    /**\\n    * @dev Function for checking whether an account has a pauser role.\\n    * @param _account - account to check.\\n    */\\n    function isPauser(address _account) external view returns (bool);\\n\\n    /**\\n    * @dev Function for adding a pauser role to the account.\\n    * Can only be called by an account with an admin role.\\n    * @param _account - account to assign a pauser role to.\\n    */\\n    function addPauser(address _account) external;\\n\\n    /**\\n    * @dev Function for removing a pauser role from the account.\\n    * Can only be called by an account with an admin role.\\n    * @param _account - account to remove a pauser role from.\\n    */\\n    function removePauser(address _account) external;\\n\\n    /**\\n    * @dev Function for pausing the contract.\\n    */\\n    function pause() external;\\n\\n    /**\\n    * @dev Function for unpausing the contract.\\n    */\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeesEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the FeesEscrow contract.\\n */\\ninterface IFeesEscrow {\\n    /**\\n    * @dev Event for tracking fees withdrawals to Pool contract.\\n    * @param amount - the number of fees.\\n    */\\n    event FeesTransferred(uint256 amount);\\n\\n    /**\\n    * @dev Function is used to transfer accumulated rewards to Pool contract.\\n    * Can only be executed by the RewardEthToken contract.\\n    */\\n    function transferToPool() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\n/// https://github.com/ethereum/eth2.0-specs/blob/dev/solidity_deposit_contract/deposit_contract.sol\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"merkleProofs\",\"type\":\"string\"}],\"name\":\"MerkleRootVoteSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewardsNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMerkleRootVoting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"merkleProofs\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"submitMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Oracles", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "5000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}