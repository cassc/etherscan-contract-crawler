{"SourceCode": "/*\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNX0Oxdolcc:;;,,,,,,,;;;:cclodxO0XNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0koc;'..                            ..';cdk0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0xl;'.                                          .';lx0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0dc'.                                                    .'cd0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc'.                                                            .'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx:.                        .........                                   .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc.                         'dkl,'...........                                .:kXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo'                            :XNxcloodoooll:;'.                                  'l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOc.                              '0MMMMMMMMMMMMWWXkc.                                  .cOWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMNO:.                                cNMMMMMMMMMMMMMMMMWk.                                   .:ONMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMW0c.                                 .OMMMMMMMMMMMMMMMMMM0'                                     .:OWMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMKl.                                   ;KNNNWWWWMMMMMWWWWWNO'                                       .c0WMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMNx'                                     .'''',,;;::::::;;,,'.                                          .dXMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMWK:.                                    'c'        ,:.         ,:.                                         ;OWMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMWk'                                      oWO'      ,0Wd.       ;KO.                                          .xNMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMNd.                                       ,KW0c,'';l0WMNklc,'';oKNl                                            .lXMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMXl.                                         ;kNWWNNWMMMMMMMWWNNWWKl.                                              :KMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMXc                                            .lNMMMMMMMMMMMMMMMMk'                                                 ;KMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMXc                                              .kMMMMMMMMMMMMMMMNc                                                   ;KMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMNl                                                ;KMMMMMMMMMMMMMMO.                                                    :XMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMWd.         .';;,..                                .OMMWNNNWWWWMMMWd.                                                     lNMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMO'       .:xKNWWNOxxl.                             .OMMXOkxkOKXNMMWd.                               .,::ccloddl,          .xWMMMMMMMMMMMM\r\nMMMMMMMMMMMMX:       'kWMMMMN0kkKO,                             :KMMMMMWWWWWMMMWd.                             'o0WWMMMMMMMMNo.         ,0MMMMMMMMMMMM\r\nMMMMMMMMMMMWd.       oWMMMX0OOOk:.                          ..;xXMMMMMMMMMMMMMMMK:                            cKNWMMMMMMMMMMMK;          lNMMMMMMMMMMM\r\nMMMMMMMMMMMK,       .xWMMXOkkdc.                       .,:ox0XWMMMMMMMWNXKKKKKKXNNkc,..                      .kK0NWMMMMMMNXWMWd.         .kWMMMMMMMMMM\r\nMMMMMMMMMMWd.       .kWN0kdc;.                   .,coxOXNMMMMMMMMWNXKXXNWWWWWWWWMMMMWXKOxdlc;'.               .cxk0NXNMMXxOWMMK,          cXMMMMMMMMMM\r\nMMMMMMMMMMX;        .kNKkxl.                 .cx0XWMMMMMMMMMMMMMMMMWNKK000KKXNWMMMMMMMMMMMMMWNK0ko;.            ..cllOOl',OMMMWo          .OMMMMMMMMMM\r\nMMMMMMMMMMk.         lNMMMK;                .dNMMMMMMMMMMMMMMMMMMMMMMMMMWNXXXNWMMMMMMMMMMMMMMMMMMMNOc.               ..  cNMMMMO.          oWMMMMMMMMM\r\nMMMMMMMMMWo          .kMMMWO.              .xWMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNX0kxoo0WMMMMMMMMW0o'                .xWMMMMX:          :XMMMMMMMMM\r\nMMMMMMMMMNc           cXMMMWx.           .c0WMWK00KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk;..    oWMMMMMMMMMMMXx;.             ,KMMMMMWd.         '0MMMMMMMMM\r\nMMMMMMMMMK;           .kMMMMNo.        .c0WMMMWXXNWMMMMMMMMMMMMMMMMNXKOxdkNMMMMMMNc      .xMMMMMMMMMMMMWWNKko;.         lNMMMMMMk.         .kMMMMMMMMM\r\nMMMMMMMMM0'            :XMMMMNl      .c0WMMMMMMMMMMMMMMMMMMMMMMMMNx,..   .kMMMMMM0,      .OMMMMMMMMMMWK0XWMMMWXOo:.    .kMMMMMMMK,         .xWMMMMMMMM\r\nMMMMMMMMM0'            .xWMMMMXc   .l0WMMMMMMMMMMMMMMMMMMMMMMMMMM0'      '0MMMMMMk.      ,KMMMMMMMMNOdkXMMMMMMMMMWXOo;.:XMMMMMMMX;         .dWMMMMMMMM\r\nMMMMMMMMM0'             :XMMMMMX:.lKWMMMWXXWNXNMMMMMMMMMMMMMMMMMWx.      ,KMMMMMWd.      :XMMMMMMXkdxKWMMMMMMMMMMMMMMNKKWMMMMMMMX:         .dWMMMMMMMM\r\nMMMMMMMMMK,             .xWMMMMMXXWMMWXOO0X0OXWMMMMMMMMMMMMMMMMMNl       :NMMMMMX:       lWMMMWN0xkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMK;         .xWMMMMMMMM\r\nMMMMMMMMMX:              ;XMMMMMMMMWXkxOX0xONMMMMMMMMMMMMMMMMMMMX;       :00Oxoc,       .dWMMMWKOxdxOKXNWMMMMMMMMMMMMMMMMMMMMMMWx.         .kMMMMMMMMM\r\nMMMMMMMMMNl              .xWMMMMMWXOxONXkd0WMWXKNMMMMMMMMMMMMMMM0'        ..            .kMMMMWO,    ..,:coxOKXNWMMMMMMMMMMMMWKo.          '0MMMMMMMMM\r\nMMMMMMMMMMx.              ;XMMMMMNKKWW0xOXXOo;..dWMMMMMMMMMMMMMMk.                      '0MMMMNc             ..';codk0KXNNX0kl.            ;XMMMMMMMMM\r\nMMMMMMMMMM0,               lNMMMMMMMW0xxo;.     'OMMMMMMMMMMMMMWd.       .',;cod;       :XMMMMO.                     ...''..               oWMMMMMMMMM\r\nMMMMMMMMMMNl               .cKWMMMWKd:'.         ;KMMMMMMMMMMMMNl       ;0NWWMMWl       lNMMMNl                                           .OMMMMMMMMMM\r\nMMMMMMMMMMMO'                .cddl;.              oNMMMMMMMMMMMX:      .xMMMMMMX:      .dWMMMO'                                           cXMMMMMMMMMM\r\nMMMMMMMMMMMNo                                     .kWMMMMMMMMMMK,      .OMMMMMMK,      .kMMMNl                                           .kMMMMMMMMMMM\r\nMMMMMMMMMMMM0,                                     ,0MMMMMMMMMMO.      ,KMMMMMMO.    .'lXMMM0'                                           lNMMMMMMMMMMM\r\nMMMMMMMMMMMMWx.                                     lNMMMMMMMMMx.      ;XMMMMMMXdloxOXNWMMMWd.                                          ,0MMMMMMMMMMMM\r\nMMMMMMMMMMMMMNo.                                    .kWMMMMMMMWd.    .,xWMMMMMMMMMMMMMMMMMMM0,                                         .xWMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMXc                                     ,KMMMMMMMMKoloxOKNWMMMMMMMMMMMMMMMMMMMMWx.                                       .oNMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMM0;                                     lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc                                       cXMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMM0;                                    '0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,                                     :KMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMK:                                   lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk.                                   :KMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMXc.                                :XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo                                 .cXMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMNd.                              'OMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXXXXNNNWWWWWMK,                               .dNMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMWk,                            .dWMMMMMMMWNNXXXXNWWMMMMMMMMMWXK0Okxxdddoollokl                              ,OWMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMKc.                          cXMMMWMMMMMMWNXK00OOkkxkkOO0XNNWMMMMMWWNXXKK0Xx.                           .cKMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMWk;                        .dkdlcldddk0XWMMMMMMWXK0kkxddxxxdxxxxxkO0KXWWMM0,                          ,kNMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMNx'                       .    .okxdoddxkOKNWMMMMMMMMMMWWNXKK00OO0KXNWMMWO,                       'dXMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMKo.                           cNMMMWNX000KXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMK:                    .oXWMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo'                         .kMMMMWNXKKKKKKKXXNNWWMMMMMMMMMMMMMMMMMMMMMXo.                'oKWMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXx;.                       lNMMMWNK0OOkkkOO0KKNWMMMMMMMMMWNXKXWMMMMMMMWk'             ,dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOc.                   .l0WMMMMMWNXXNWMMMMMMMMMMMMMMWXK00KXWMMMMMMMMMWO,         .:kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx:.             .;dXWMMMMMMMWNXKKKXNWMMMMMMMMMMWNXXWMMMMMMMMMMMMMMMKc     .;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKx:.        .cONMMMMMMMMMMMMMMMMWWMMMMNKOkkxdolxXWMMMMMMMMMMMMMMMMNd..:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOl,.  'oKWMMMMMMMMMMMMMMMMMMMMWKko,.        .lONMMMMMMMMMMMMMMMWXXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkONMMMMMMMMMMMMMMMMMMMMWNkc.              .;xXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx,                    ,xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd,.           ....,;:loxOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0OOkkkxxkkkOO00KXNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n\r\nDo you know Dr. HONG?\r\nTeam Doctor's 1st project\r\nSNS x Challenge COIN\r\n\r\nOur team landed in the crypto world in 2017.\r\nIn the meantime, our team has helped with several 'MOON' projects.\r\nThis is our team's first project now, but we are confident that we will fly it out\r\nof the atmosphere based on our experience.\r\nWe love the value of the name 'Team Doctor' rather than honey.\r\nPlease trust us.\r\n-Team Doctor-\r\n\r\nWebsite: https://drhong.org\r\nTwitter: https://twitter.com/Dr_HongHongHong\r\nTelegram: https://t.me/drhongpo\r\n\r\nLet's go to the MOON\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ncontract DrHONG is Context, IERC20, Ownable {\r\n    mapping(address => uint256) private _balance;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _FreeWallets;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 1000000000 * 10**_decimals;\r\n    uint256 private constant onePercent = (_totalSupply)/100;\r\n    uint256 private constant minimumSwapAmount = 1 * 10**_decimals;\r\n    uint256 private maxSwap = onePercent / 2;\r\n    uint256 public MaximumOneTrxAmount = onePercent;\r\n    uint256 public MxWalletSize = onePercent;\r\n    uint256 private InitialBlockNo;\r\n\r\n    uint256 public buyTax = 25;\r\n    uint256 public sellTax = 35;\r\n    \r\n    string private constant _name = \"DrHONG\";\r\n    string private constant _symbol = \"HONG\";\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address immutable public FeesAddress ;\r\n    address immutable public SecFeesWallet;\r\n\r\n    bool private launch = false;\r\n\r\n    constructor() {\r\n        FeesAddress  = 0x5744faA0964769e7a19B611633e56b60Da6c9D07;\r\n        SecFeesWallet = 0x460b25182518B0Cc8aE8f9eC9dfFC99cd04D8B29;     \r\n        _balance[msg.sender] = _totalSupply;\r\n        _FreeWallets[FeesAddress ] = 1;\r\n        _FreeWallets[msg.sender] = 1;\r\n        _FreeWallets[address(this)] = 1;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)public override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if(currentAllowance != type(uint256).max) { \r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function StartTrading() external onlyOwner {\r\n        require(!launch,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        \r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        launch = true;\r\n        InitialBlockNo = block.number;\r\n    }\r\n\r\n    function _addExcludedWallet(address wallet) external onlyOwner {\r\n        _FreeWallets[wallet] = 1;\r\n    }\r\n\r\n    function _RemoveExcludedWallet(address wallet) external onlyOwner {\r\n        _FreeWallets[wallet] = 0;\r\n    }\r\n\r\n    function FreeFromLimits() external onlyOwner {\r\n        MaximumOneTrxAmount = _totalSupply;\r\n        MxWalletSize = _totalSupply;\r\n    }\r\n\r\n    function ChangeTaxes(uint256 newBuyTax, uint256 newSellTax) external onlyOwner {\r\n        require(newBuyTax + newSellTax <= 70, \"Tax too high\");\r\n        buyTax = newBuyTax;\r\n        sellTax = newSellTax;\r\n    }\r\n\r\n    function _tokenTransfer(address from, address to, uint256 amount, uint256 _tax) private {\r\n        uint256 taxTokens = (amount * _tax) / 100;\r\n        uint256 transferAmount = amount - taxTokens;\r\n\r\n        _balance[from] = _balance[from] - amount;\r\n        _balance[to] = _balance[to] + transferAmount;\r\n        _balance[address(this)] = _balance[address(this)] + taxTokens;\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"ERC20: no tokens transferred\");\r\n        uint256 _tax = 0;\r\n        if (_FreeWallets[from] == 0 && _FreeWallets[to] == 0)\r\n        {\r\n            require(launch, \"Trading not open\");\r\n            require(amount <= MaximumOneTrxAmount, \"MaxTx Enabled at launch\");\r\n            if (to != uniswapV2Pair && to != address(0xdead)) require(balanceOf(to) + amount <= MxWalletSize, \"MaxWallet Enabled at launch\");\r\n            if (block.number < InitialBlockNo + 2) {\r\n                _tax = 60;\r\n            } else {\r\n                if (from == uniswapV2Pair) {\r\n                    _tax = buyTax;\r\n                } else if (to == uniswapV2Pair) {\r\n                    uint256 tokensToSwap = balanceOf(address(this));                  \r\n                    if (tokensToSwap > minimumSwapAmount) {  \r\n                        uint256 mxSw = maxSwap;\r\n                        if (tokensToSwap > amount) tokensToSwap = amount;                     \r\n                        if (tokensToSwap > mxSw) tokensToSwap = mxSw;                      \r\n                        swapTokensForEth(tokensToSwap);\r\n                    }\r\n                    _tax = sellTax;\r\n                }\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount, _tax);\r\n    }\r\n\r\n    function manualSendBalance() external onlyOwner {\r\n        bool success;\r\n        (success, ) = SecFeesWallet.call{value: address(this).balance / 10}(\"\");\r\n        (success, ) = FeesAddress .call{value: address(this).balance}(\"\");\r\n    } \r\n\r\n    function manualSwapTokens(uint256 percent) external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 amtswap = (percent*contractBalance)/100;\r\n        swapTokensForEth(amtswap);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        bool success;\r\n        (success, ) = SecFeesWallet.call{value: address(this).balance / 10}(\"\");\r\n        (success, ) = FeesAddress .call{value: address(this).balance}(\"\");\r\n    }\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"ChangeTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FreeFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaximumOneTrxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SecFeesWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"_RemoveExcludedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"_addExcludedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSendBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DrHONG", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5916ad95a8e7d08b1f64ce1565c640be313d952bcdc92515065a1f8de09153e0"}